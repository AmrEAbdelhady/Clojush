Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[11 11 0 11] 0] [[-16 86 -16 -16] -16] [[-91 -91 -91 57] -91] [[62 -32 62 62] -32] [[-92 -92 3 -92] -92] [[-36 38 38 38] -36] [[-4 -4 86 -4] -4] [[-52 -52 97 -52] -52] [[-33 38 38 38] -33] [[81 81 -25 81] -25] [(-82 -82 -82 -82) -82] [(-95 -95 -95 -95) -95] [(9 9 9 9) 9] [(-29 -29 -29 -29) -29] [(88 88 88 88) 88] [(10 68 8 21) 8] [(70 90 38 17) 17] [(87 7 12 31) 7] [(7 26 65 64) 7] [(52 0 23 14) 0] [(94 50 74 64) 50] [(55 47 7 58) 7] [(21 77 81 44) 21] [(97 82 68 6) 6] [(88 71 32 74) 32] [(58 85 40 70) 40] [(48 83 83 42) 42] [(11 46 37 26) 11] [(18 25 50 42) 18] [(60 24 12 50) 12] [(8 71 84 41) 8] [(14 75 1 98) 1] [(85 27 77 65) 27] [(27 70 42 81) 27] [(52 14 28 74) 14] [(81 -44 71 -58) -58] [(27 75 81 99) 27] [(-77 -3 -46 -34) -77] [(15 29 -72 -60) -72] [(54 -84 60 -99) -99] [(-48 7 94 1) -48] [(-59 4 73 -4) -59] [(-57 16 -35 -21) -57] [(52 5 -57 -55) -57] [(90 -70 16 33) -70] [(26 70 60 74) 26] [(96 7 83 26) 7] [(-65 19 38 13) -65] [(-43 93 28 -58) -58] [(-72 -80 -19 -7) -80] [(38 -84 -96 -63) -96] [(-15 53 -76 11) -76] [(50 50 -48 -20) -48] [(-6 -74 73 89) -74] [(-40 -78 50 71) -78] [(67 65 -1 18) -1] [(-36 36 -23 -31) -36] [(-93 22 78 -84) -93] [(-8 -73 -50 -26) -73] [(-48 -45 -76 23) -76] [(26 -54 69 -58) -58] [(-73 -11 11 18) -73] [(84 1 36 23) 1] [(44 20 -56 -43) -56] [(33 33 -27 49) -27] [(38 -38 -66 5) -66] [(69 77 -43 35) -43] [(-22 70 -88 -29) -88] [(58 -94 -59 63) -94] [(-67 55 62 -49) -67] [(-25 8 -75 -81) -81] [(37 84 -41 -59) -59] [(-58 96 -50 -98) -98] [(-24 91 22 7) -24] [(-96 75 4 2) -96] [(62 42 -28 -13) -28] [(60 49 -64 -45) -64] [(68 74 -81 99) -81] [(-28 -47 17 -78) -78] [(19 -100 -9 -45) -100] [(-49 -67 -71 28) -71] [(-90 87 -22 97) -90] [(-36 -66 -71 65) -71] [(-53 -1 72 26) -53] [(25 32 76 9) 9] [(24 42 15 95) 15] [(72 -30 37 -15) -30] [(49 -13 -61 25) -61] [(-25 -97 -70 1) -97] [(-95 57 -75 -40) -95] [(32 -41 56 -12) -41] [(94 -83 15 -78) -83] [(4 56 67 44) 4] [(81 72 -89 -29) -89] [(18 28 61 -76) -76])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[11 11 0 11] 0]
Train Case:   6 | Input/Output: [[-16 86 -16 -16] -16]
Train Case:   7 | Input/Output: [[-91 -91 -91 57] -91]
Train Case:   8 | Input/Output: [[62 -32 62 62] -32]
Train Case:   9 | Input/Output: [[-92 -92 3 -92] -92]
Train Case:  10 | Input/Output: [[-36 38 38 38] -36]
Train Case:  11 | Input/Output: [[-4 -4 86 -4] -4]
Train Case:  12 | Input/Output: [[-52 -52 97 -52] -52]
Train Case:  13 | Input/Output: [[-33 38 38 38] -33]
Train Case:  14 | Input/Output: [[81 81 -25 81] -25]
Train Case:  15 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  16 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  17 | Input/Output: [(9 9 9 9) 9]
Train Case:  18 | Input/Output: [(-29 -29 -29 -29) -29]
Train Case:  19 | Input/Output: [(88 88 88 88) 88]
Train Case:  20 | Input/Output: [(10 68 8 21) 8]
Train Case:  21 | Input/Output: [(70 90 38 17) 17]
Train Case:  22 | Input/Output: [(87 7 12 31) 7]
Train Case:  23 | Input/Output: [(7 26 65 64) 7]
Train Case:  24 | Input/Output: [(52 0 23 14) 0]
Train Case:  25 | Input/Output: [(94 50 74 64) 50]
Train Case:  26 | Input/Output: [(55 47 7 58) 7]
Train Case:  27 | Input/Output: [(21 77 81 44) 21]
Train Case:  28 | Input/Output: [(97 82 68 6) 6]
Train Case:  29 | Input/Output: [(88 71 32 74) 32]
Train Case:  30 | Input/Output: [(58 85 40 70) 40]
Train Case:  31 | Input/Output: [(48 83 83 42) 42]
Train Case:  32 | Input/Output: [(11 46 37 26) 11]
Train Case:  33 | Input/Output: [(18 25 50 42) 18]
Train Case:  34 | Input/Output: [(60 24 12 50) 12]
Train Case:  35 | Input/Output: [(8 71 84 41) 8]
Train Case:  36 | Input/Output: [(14 75 1 98) 1]
Train Case:  37 | Input/Output: [(85 27 77 65) 27]
Train Case:  38 | Input/Output: [(27 70 42 81) 27]
Train Case:  39 | Input/Output: [(52 14 28 74) 14]
Train Case:  40 | Input/Output: [(81 -44 71 -58) -58]
Train Case:  41 | Input/Output: [(27 75 81 99) 27]
Train Case:  42 | Input/Output: [(-77 -3 -46 -34) -77]
Train Case:  43 | Input/Output: [(15 29 -72 -60) -72]
Train Case:  44 | Input/Output: [(54 -84 60 -99) -99]
Train Case:  45 | Input/Output: [(-48 7 94 1) -48]
Train Case:  46 | Input/Output: [(-59 4 73 -4) -59]
Train Case:  47 | Input/Output: [(-57 16 -35 -21) -57]
Train Case:  48 | Input/Output: [(52 5 -57 -55) -57]
Train Case:  49 | Input/Output: [(90 -70 16 33) -70]
Train Case:  50 | Input/Output: [(26 70 60 74) 26]
Train Case:  51 | Input/Output: [(96 7 83 26) 7]
Train Case:  52 | Input/Output: [(-65 19 38 13) -65]
Train Case:  53 | Input/Output: [(-43 93 28 -58) -58]
Train Case:  54 | Input/Output: [(-72 -80 -19 -7) -80]
Train Case:  55 | Input/Output: [(38 -84 -96 -63) -96]
Train Case:  56 | Input/Output: [(-15 53 -76 11) -76]
Train Case:  57 | Input/Output: [(50 50 -48 -20) -48]
Train Case:  58 | Input/Output: [(-6 -74 73 89) -74]
Train Case:  59 | Input/Output: [(-40 -78 50 71) -78]
Train Case:  60 | Input/Output: [(67 65 -1 18) -1]
Train Case:  61 | Input/Output: [(-36 36 -23 -31) -36]
Train Case:  62 | Input/Output: [(-93 22 78 -84) -93]
Train Case:  63 | Input/Output: [(-8 -73 -50 -26) -73]
Train Case:  64 | Input/Output: [(-48 -45 -76 23) -76]
Train Case:  65 | Input/Output: [(26 -54 69 -58) -58]
Train Case:  66 | Input/Output: [(-73 -11 11 18) -73]
Train Case:  67 | Input/Output: [(84 1 36 23) 1]
Train Case:  68 | Input/Output: [(44 20 -56 -43) -56]
Train Case:  69 | Input/Output: [(33 33 -27 49) -27]
Train Case:  70 | Input/Output: [(38 -38 -66 5) -66]
Train Case:  71 | Input/Output: [(69 77 -43 35) -43]
Train Case:  72 | Input/Output: [(-22 70 -88 -29) -88]
Train Case:  73 | Input/Output: [(58 -94 -59 63) -94]
Train Case:  74 | Input/Output: [(-67 55 62 -49) -67]
Train Case:  75 | Input/Output: [(-25 8 -75 -81) -81]
Train Case:  76 | Input/Output: [(37 84 -41 -59) -59]
Train Case:  77 | Input/Output: [(-58 96 -50 -98) -98]
Train Case:  78 | Input/Output: [(-24 91 22 7) -24]
Train Case:  79 | Input/Output: [(-96 75 4 2) -96]
Train Case:  80 | Input/Output: [(62 42 -28 -13) -28]
Train Case:  81 | Input/Output: [(60 49 -64 -45) -64]
Train Case:  82 | Input/Output: [(68 74 -81 99) -81]
Train Case:  83 | Input/Output: [(-28 -47 17 -78) -78]
Train Case:  84 | Input/Output: [(19 -100 -9 -45) -100]
Train Case:  85 | Input/Output: [(-49 -67 -71 28) -71]
Train Case:  86 | Input/Output: [(-90 87 -22 97) -90]
Train Case:  87 | Input/Output: [(-36 -66 -71 65) -71]
Train Case:  88 | Input/Output: [(-53 -1 72 26) -53]
Train Case:  89 | Input/Output: [(25 32 76 9) 9]
Train Case:  90 | Input/Output: [(24 42 15 95) 15]
Train Case:  91 | Input/Output: [(72 -30 37 -15) -30]
Train Case:  92 | Input/Output: [(49 -13 -61 25) -61]
Train Case:  93 | Input/Output: [(-25 -97 -70 1) -97]
Train Case:  94 | Input/Output: [(-95 57 -75 -40) -95]
Train Case:  95 | Input/Output: [(32 -41 56 -12) -41]
Train Case:  96 | Input/Output: [(94 -83 15 -78) -83]
Train Case:  97 | Input/Output: [(4 56 67 44) 4]
Train Case:  98 | Input/Output: [(81 72 -89 -29) -89]
Train Case:  99 | Input/Output: [(18 28 61 -76) -76]
Test Case:   0 | Input/Output: [[-33 19 19 19] -33]
Test Case:   1 | Input/Output: [[-39 70 70 70] -39]
Test Case:   2 | Input/Output: [[65 65 -82 65] -82]
Test Case:   3 | Input/Output: [[66 66 66 84] 66]
Test Case:   4 | Input/Output: [[-17 -17 -17 60] -17]
Test Case:   5 | Input/Output: [[4 5 5 5] 4]
Test Case:   6 | Input/Output: [[36 36 81 36] 36]
Test Case:   7 | Input/Output: [[65 25 25 25] 25]
Test Case:   8 | Input/Output: [[-62 -93 -93 -93] -93]
Test Case:   9 | Input/Output: [[52 52 -48 52] -48]
Test Case:  10 | Input/Output: [[70 64 70 70] 64]
Test Case:  11 | Input/Output: [[-20 79 -20 -20] -20]
Test Case:  12 | Input/Output: [[56 65 56 56] 56]
Test Case:  13 | Input/Output: [[16 -1 16 16] -1]
Test Case:  14 | Input/Output: [[1 1 1 17] 1]
Test Case:  15 | Input/Output: [[-60 49 -60 -60] -60]
Test Case:  16 | Input/Output: [[-70 -83 -70 -70] -83]
Test Case:  17 | Input/Output: [[-40 -40 -40 13] -40]
Test Case:  18 | Input/Output: [[-74 -74 59 -74] -74]
Test Case:  19 | Input/Output: [[-4 -4 -87 -4] -87]
Test Case:  20 | Input/Output: [[24 96 96 96] 24]
Test Case:  21 | Input/Output: [[-3 -3 -3 48] -3]
Test Case:  22 | Input/Output: [[24 -89 24 24] -89]
Test Case:  23 | Input/Output: [[73 73 -96 73] -96]
Test Case:  24 | Input/Output: [[52 52 -4 52] -4]
Test Case:  25 | Input/Output: [[8 8 8 11] 8]
Test Case:  26 | Input/Output: [[66 74 74 74] 66]
Test Case:  27 | Input/Output: [[96 69 96 96] 69]
Test Case:  28 | Input/Output: [[36 -93 36 36] -93]
Test Case:  29 | Input/Output: [[-2 -2 3 -2] -2]
Test Case:  30 | Input/Output: [[58 58 58 -69] -69]
Test Case:  31 | Input/Output: [[-10 2 -10 -10] -10]
Test Case:  32 | Input/Output: [[65 93 65 65] 65]
Test Case:  33 | Input/Output: [[-98 -98 -36 -98] -98]
Test Case:  34 | Input/Output: [[-53 -53 -53 -54] -54]
Test Case:  35 | Input/Output: [[-56 -24 -56 -56] -56]
Test Case:  36 | Input/Output: [[-7 -3 -3 -3] -7]
Test Case:  37 | Input/Output: [[-74 -74 -74 4] -74]
Test Case:  38 | Input/Output: [[73 50 73 73] 50]
Test Case:  39 | Input/Output: [[-99 -43 -99 -99] -99]
Test Case:  40 | Input/Output: [[-93 -93 -93 38] -93]
Test Case:  41 | Input/Output: [[67 48 67 67] 48]
Test Case:  42 | Input/Output: [[-11 -33 -33 -33] -33]
Test Case:  43 | Input/Output: [[88 88 -89 88] -89]
Test Case:  44 | Input/Output: [[19 19 19 -22] -22]
Test Case:  45 | Input/Output: [[-70 -70 -70 -81] -81]
Test Case:  46 | Input/Output: [[-17 -17 -27 -17] -27]
Test Case:  47 | Input/Output: [[3 3 3 -90] -90]
Test Case:  48 | Input/Output: [[17 64 17 17] 17]
Test Case:  49 | Input/Output: [[-66 -66 -66 -21] -66]
Test Case:  50 | Input/Output: [[39 25 39 39] 25]
Test Case:  51 | Input/Output: [[53 55 55 55] 53]
Test Case:  52 | Input/Output: [[75 80 75 75] 75]
Test Case:  53 | Input/Output: [[-25 -25 -25 -29] -29]
Test Case:  54 | Input/Output: [[89 -94 -94 -94] -94]
Test Case:  55 | Input/Output: [[-77 43 -77 -77] -77]
Test Case:  56 | Input/Output: [[-82 -82 28 -82] -82]
Test Case:  57 | Input/Output: [[-63 -63 -98 -63] -98]
Test Case:  58 | Input/Output: [[84 -65 84 84] -65]
Test Case:  59 | Input/Output: [[-77 -77 -77 -76] -77]
Test Case:  60 | Input/Output: [[-11 -11 81 -11] -11]
Test Case:  61 | Input/Output: [[-65 -65 51 -65] -65]
Test Case:  62 | Input/Output: [[-5 -44 -44 -44] -44]
Test Case:  63 | Input/Output: [[58 58 58 8] 8]
Test Case:  64 | Input/Output: [[40 40 23 40] 23]
Test Case:  65 | Input/Output: [[-6 -6 -6 35] -6]
Test Case:  66 | Input/Output: [[58 58 -73 58] -73]
Test Case:  67 | Input/Output: [[61 61 -80 61] -80]
Test Case:  68 | Input/Output: [[73 73 73 -23] -23]
Test Case:  69 | Input/Output: [[-9 -9 -26 -9] -26]
Test Case:  70 | Input/Output: [[4 -20 4 4] -20]
Test Case:  71 | Input/Output: [[84 84 84 -3] -3]
Test Case:  72 | Input/Output: [[5 -56 5 5] -56]
Test Case:  73 | Input/Output: [[-56 -56 -63 -56] -63]
Test Case:  74 | Input/Output: [[37 37 59 37] 37]
Test Case:  75 | Input/Output: [[-3 15 15 15] -3]
Test Case:  76 | Input/Output: [[15 15 -31 15] -31]
Test Case:  77 | Input/Output: [[-90 23 23 23] -90]
Test Case:  78 | Input/Output: [[-6 13 13 13] -6]
Test Case:  79 | Input/Output: [[31 -28 -28 -28] -28]
Test Case:  80 | Input/Output: [[69 -50 -50 -50] -50]
Test Case:  81 | Input/Output: [[43 -96 43 43] -96]
Test Case:  82 | Input/Output: [[-27 -27 -34 -27] -34]
Test Case:  83 | Input/Output: [[-88 -88 -88 -18] -88]
Test Case:  84 | Input/Output: [[-65 -63 -65 -65] -65]
Test Case:  85 | Input/Output: [[17 8 17 17] 8]
Test Case:  86 | Input/Output: [[98 98 98 43] 43]
Test Case:  87 | Input/Output: [[73 -55 -55 -55] -55]
Test Case:  88 | Input/Output: [[-37 -37 -37 66] -37]
Test Case:  89 | Input/Output: [[23 -29 23 23] -29]
Test Case:  90 | Input/Output: [[-39 -15 -15 -15] -39]
Test Case:  91 | Input/Output: [[25 25 25 13] 13]
Test Case:  92 | Input/Output: [[-31 87 -31 -31] -31]
Test Case:  93 | Input/Output: [[-90 52 52 52] -90]
Test Case:  94 | Input/Output: [[95 37 37 37] 37]
Test Case:  95 | Input/Output: [[31 31 -78 31] -78]
Test Case:  96 | Input/Output: [[5 5 5 -71] -71]
Test Case:  97 | Input/Output: [[75 14 75 75] 14]
Test Case:  98 | Input/Output: [[-12 -12 -62 -12] -62]
Test Case:  99 | Input/Output: [[0 0 0 97] 0]
Test Case: 100 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 101 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 102 | Input/Output: [(9 9 9 9) 9]
Test Case: 103 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 104 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 105 | Input/Output: [(38 38 38 38) 38]
Test Case: 106 | Input/Output: [(86 86 86 86) 86]
Test Case: 107 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 108 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 109 | Input/Output: [(89 89 89 89) 89]
Test Case: 110 | Input/Output: [(30 30 30 30) 30]
Test Case: 111 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 112 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 113 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 114 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 115 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 116 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 117 | Input/Output: [(31 31 31 31) 31]
Test Case: 118 | Input/Output: [(92 92 92 92) 92]
Test Case: 119 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 120 | Input/Output: [(34 34 34 34) 34]
Test Case: 121 | Input/Output: [(32 32 32 32) 32]
Test Case: 122 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 123 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 124 | Input/Output: [(42 42 42 42) 42]
Test Case: 125 | Input/Output: [(7 7 7 7) 7]
Test Case: 126 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 127 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 128 | Input/Output: [(1 1 1 1) 1]
Test Case: 129 | Input/Output: [(39 39 39 39) 39]
Test Case: 130 | Input/Output: [(49 49 49 49) 49]
Test Case: 131 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 132 | Input/Output: [(15 15 15 15) 15]
Test Case: 133 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 134 | Input/Output: [(59 59 59 59) 59]
Test Case: 135 | Input/Output: [(67 67 67 67) 67]
Test Case: 136 | Input/Output: [(20 20 20 20) 20]
Test Case: 137 | Input/Output: [(75 75 75 75) 75]
Test Case: 138 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 139 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 140 | Input/Output: [(1 1 1 1) 1]
Test Case: 141 | Input/Output: [(32 32 32 32) 32]
Test Case: 142 | Input/Output: [(98 98 98 98) 98]
Test Case: 143 | Input/Output: [(71 71 71 71) 71]
Test Case: 144 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 145 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 146 | Input/Output: [(7 7 7 7) 7]
Test Case: 147 | Input/Output: [(70 70 70 70) 70]
Test Case: 148 | Input/Output: [(56 56 56 56) 56]
Test Case: 149 | Input/Output: [(11 11 11 11) 11]
Test Case: 150 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 151 | Input/Output: [(36 36 36 36) 36]
Test Case: 152 | Input/Output: [(3 3 3 3) 3]
Test Case: 153 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 154 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 155 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 156 | Input/Output: [(8 8 8 8) 8]
Test Case: 157 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 158 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 159 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 160 | Input/Output: [(80 80 80 80) 80]
Test Case: 161 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 162 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 163 | Input/Output: [(52 52 52 52) 52]
Test Case: 164 | Input/Output: [(37 37 37 37) 37]
Test Case: 165 | Input/Output: [(18 18 18 18) 18]
Test Case: 166 | Input/Output: [(18 18 18 18) 18]
Test Case: 167 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 168 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 169 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 170 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 171 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 172 | Input/Output: [(86 86 86 86) 86]
Test Case: 173 | Input/Output: [(69 69 69 69) 69]
Test Case: 174 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 175 | Input/Output: [(53 53 53 53) 53]
Test Case: 176 | Input/Output: [(41 41 41 41) 41]
Test Case: 177 | Input/Output: [(80 80 80 80) 80]
Test Case: 178 | Input/Output: [(42 42 42 42) 42]
Test Case: 179 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 180 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 181 | Input/Output: [(94 94 94 94) 94]
Test Case: 182 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 183 | Input/Output: [(94 94 94 94) 94]
Test Case: 184 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 185 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 186 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 187 | Input/Output: [(40 40 40 40) 40]
Test Case: 188 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 189 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 190 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 191 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 192 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 193 | Input/Output: [(82 82 82 82) 82]
Test Case: 194 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 195 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 196 | Input/Output: [(23 23 23 23) 23]
Test Case: 197 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 198 | Input/Output: [(75 75 75 75) 75]
Test Case: 199 | Input/Output: [(13 13 13 13) 13]
Test Case: 200 | Input/Output: [(7 19 15 23) 7]
Test Case: 201 | Input/Output: [(70 17 91 68) 17]
Test Case: 202 | Input/Output: [(39 79 87 41) 39]
Test Case: 203 | Input/Output: [(21 93 76 24) 21]
Test Case: 204 | Input/Output: [(66 0 20 3) 0]
Test Case: 205 | Input/Output: [(24 29 21 86) 21]
Test Case: 206 | Input/Output: [(61 12 52 69) 12]
Test Case: 207 | Input/Output: [(11 47 19 92) 11]
Test Case: 208 | Input/Output: [(42 42 39 45) 39]
Test Case: 209 | Input/Output: [(20 84 66 46) 20]
Test Case: 210 | Input/Output: [(36 57 55 91) 36]
Test Case: 211 | Input/Output: [(86 74 80 75) 74]
Test Case: 212 | Input/Output: [(34 74 72 63) 34]
Test Case: 213 | Input/Output: [(67 30 72 80) 30]
Test Case: 214 | Input/Output: [(93 46 99 36) 36]
Test Case: 215 | Input/Output: [(48 33 77 87) 33]
Test Case: 216 | Input/Output: [(13 93 3 13) 3]
Test Case: 217 | Input/Output: [(65 13 0 51) 0]
Test Case: 218 | Input/Output: [(53 47 31 85) 31]
Test Case: 219 | Input/Output: [(55 59 26 66) 26]
Test Case: 220 | Input/Output: [(17 97 43 31) 17]
Test Case: 221 | Input/Output: [(53 1 79 66) 1]
Test Case: 222 | Input/Output: [(58 84 44 92) 44]
Test Case: 223 | Input/Output: [(15 46 8 62) 8]
Test Case: 224 | Input/Output: [(75 27 96 72) 27]
Test Case: 225 | Input/Output: [(80 53 37 25) 25]
Test Case: 226 | Input/Output: [(57 24 100 48) 24]
Test Case: 227 | Input/Output: [(27 18 1 80) 1]
Test Case: 228 | Input/Output: [(66 85 62 86) 62]
Test Case: 229 | Input/Output: [(43 43 78 78) 43]
Test Case: 230 | Input/Output: [(81 9 66 80) 9]
Test Case: 231 | Input/Output: [(20 93 42 78) 20]
Test Case: 232 | Input/Output: [(100 84 97 21) 21]
Test Case: 233 | Input/Output: [(47 16 54 9) 9]
Test Case: 234 | Input/Output: [(7 35 19 4) 4]
Test Case: 235 | Input/Output: [(6 27 76 29) 6]
Test Case: 236 | Input/Output: [(17 27 8 36) 8]
Test Case: 237 | Input/Output: [(52 56 46 12) 12]
Test Case: 238 | Input/Output: [(25 37 10 2) 2]
Test Case: 239 | Input/Output: [(83 99 63 61) 61]
Test Case: 240 | Input/Output: [(18 92 27 88) 18]
Test Case: 241 | Input/Output: [(18 4 100 9) 4]
Test Case: 242 | Input/Output: [(77 16 68 19) 16]
Test Case: 243 | Input/Output: [(20 62 68 2) 2]
Test Case: 244 | Input/Output: [(9 18 45 79) 9]
Test Case: 245 | Input/Output: [(20 65 67 33) 20]
Test Case: 246 | Input/Output: [(35 60 5 40) 5]
Test Case: 247 | Input/Output: [(30 19 15 24) 15]
Test Case: 248 | Input/Output: [(81 42 95 41) 41]
Test Case: 249 | Input/Output: [(81 93 93 4) 4]
Test Case: 250 | Input/Output: [(95 98 43 17) 17]
Test Case: 251 | Input/Output: [(57 81 79 58) 57]
Test Case: 252 | Input/Output: [(6 10 93 54) 6]
Test Case: 253 | Input/Output: [(4 79 60 80) 4]
Test Case: 254 | Input/Output: [(85 22 11 26) 11]
Test Case: 255 | Input/Output: [(96 53 1 66) 1]
Test Case: 256 | Input/Output: [(55 13 28 84) 13]
Test Case: 257 | Input/Output: [(21 83 94 15) 15]
Test Case: 258 | Input/Output: [(51 80 69 26) 26]
Test Case: 259 | Input/Output: [(14 77 28 39) 14]
Test Case: 260 | Input/Output: [(63 47 20 90) 20]
Test Case: 261 | Input/Output: [(92 64 40 44) 40]
Test Case: 262 | Input/Output: [(42 94 2 97) 2]
Test Case: 263 | Input/Output: [(35 71 51 88) 35]
Test Case: 264 | Input/Output: [(89 80 37 71) 37]
Test Case: 265 | Input/Output: [(80 47 1 11) 1]
Test Case: 266 | Input/Output: [(98 68 15 47) 15]
Test Case: 267 | Input/Output: [(25 82 87 34) 25]
Test Case: 268 | Input/Output: [(16 94 91 59) 16]
Test Case: 269 | Input/Output: [(74 24 40 89) 24]
Test Case: 270 | Input/Output: [(40 42 7 85) 7]
Test Case: 271 | Input/Output: [(17 25 41 62) 17]
Test Case: 272 | Input/Output: [(69 36 77 46) 36]
Test Case: 273 | Input/Output: [(37 57 11 9) 9]
Test Case: 274 | Input/Output: [(43 1 14 32) 1]
Test Case: 275 | Input/Output: [(79 77 53 24) 24]
Test Case: 276 | Input/Output: [(16 79 6 31) 6]
Test Case: 277 | Input/Output: [(72 28 47 34) 28]
Test Case: 278 | Input/Output: [(88 47 63 6) 6]
Test Case: 279 | Input/Output: [(15 30 29 33) 15]
Test Case: 280 | Input/Output: [(99 67 75 31) 31]
Test Case: 281 | Input/Output: [(47 86 91 70) 47]
Test Case: 282 | Input/Output: [(31 95 85 91) 31]
Test Case: 283 | Input/Output: [(20 81 10 78) 10]
Test Case: 284 | Input/Output: [(66 43 63 69) 43]
Test Case: 285 | Input/Output: [(27 17 73 32) 17]
Test Case: 286 | Input/Output: [(62 70 88 10) 10]
Test Case: 287 | Input/Output: [(85 98 27 80) 27]
Test Case: 288 | Input/Output: [(36 57 73 41) 36]
Test Case: 289 | Input/Output: [(3 83 39 17) 3]
Test Case: 290 | Input/Output: [(57 89 19 77) 19]
Test Case: 291 | Input/Output: [(26 22 67 62) 22]
Test Case: 292 | Input/Output: [(88 27 84 49) 27]
Test Case: 293 | Input/Output: [(35 61 38 83) 35]
Test Case: 294 | Input/Output: [(61 75 61 43) 43]
Test Case: 295 | Input/Output: [(62 12 51 33) 12]
Test Case: 296 | Input/Output: [(49 52 17 73) 17]
Test Case: 297 | Input/Output: [(95 62 1 60) 1]
Test Case: 298 | Input/Output: [(55 59 52 36) 36]
Test Case: 299 | Input/Output: [(27 0 1 54) 0]
Test Case: 300 | Input/Output: [(4 58 59 41) 4]
Test Case: 301 | Input/Output: [(12 73 27 100) 12]
Test Case: 302 | Input/Output: [(50 49 82 90) 49]
Test Case: 303 | Input/Output: [(28 52 92 58) 28]
Test Case: 304 | Input/Output: [(36 14 28 32) 14]
Test Case: 305 | Input/Output: [(62 12 91 55) 12]
Test Case: 306 | Input/Output: [(19 53 95 19) 19]
Test Case: 307 | Input/Output: [(90 25 53 8) 8]
Test Case: 308 | Input/Output: [(51 24 63 21) 21]
Test Case: 309 | Input/Output: [(95 8 34 51) 8]
Test Case: 310 | Input/Output: [(47 53 45 75) 45]
Test Case: 311 | Input/Output: [(56 57 100 86) 56]
Test Case: 312 | Input/Output: [(1 37 21 77) 1]
Test Case: 313 | Input/Output: [(25 95 32 55) 25]
Test Case: 314 | Input/Output: [(41 3 21 35) 3]
Test Case: 315 | Input/Output: [(82 45 8 46) 8]
Test Case: 316 | Input/Output: [(48 8 89 66) 8]
Test Case: 317 | Input/Output: [(88 84 9 5) 5]
Test Case: 318 | Input/Output: [(13 99 0 25) 0]
Test Case: 319 | Input/Output: [(34 29 93 25) 25]
Test Case: 320 | Input/Output: [(42 8 84 77) 8]
Test Case: 321 | Input/Output: [(96 78 65 33) 33]
Test Case: 322 | Input/Output: [(68 49 1 48) 1]
Test Case: 323 | Input/Output: [(0 80 23 20) 0]
Test Case: 324 | Input/Output: [(13 49 42 42) 13]
Test Case: 325 | Input/Output: [(12 99 95 13) 12]
Test Case: 326 | Input/Output: [(8 55 14 36) 8]
Test Case: 327 | Input/Output: [(1 65 21 14) 1]
Test Case: 328 | Input/Output: [(13 75 12 100) 12]
Test Case: 329 | Input/Output: [(21 82 35 68) 21]
Test Case: 330 | Input/Output: [(5 8 41 63) 5]
Test Case: 331 | Input/Output: [(82 62 32 35) 32]
Test Case: 332 | Input/Output: [(3 28 47 43) 3]
Test Case: 333 | Input/Output: [(35 24 34 1) 1]
Test Case: 334 | Input/Output: [(85 75 57 93) 57]
Test Case: 335 | Input/Output: [(79 31 9 25) 9]
Test Case: 336 | Input/Output: [(89 81 35 24) 24]
Test Case: 337 | Input/Output: [(62 70 20 15) 15]
Test Case: 338 | Input/Output: [(97 11 17 17) 11]
Test Case: 339 | Input/Output: [(97 23 63 75) 23]
Test Case: 340 | Input/Output: [(97 23 27 30) 23]
Test Case: 341 | Input/Output: [(100 91 55 30) 30]
Test Case: 342 | Input/Output: [(39 28 44 42) 28]
Test Case: 343 | Input/Output: [(75 7 25 14) 7]
Test Case: 344 | Input/Output: [(48 35 33 46) 33]
Test Case: 345 | Input/Output: [(72 6 26 35) 6]
Test Case: 346 | Input/Output: [(37 72 64 63) 37]
Test Case: 347 | Input/Output: [(55 68 40 95) 40]
Test Case: 348 | Input/Output: [(62 26 94 47) 26]
Test Case: 349 | Input/Output: [(94 97 76 46) 46]
Test Case: 350 | Input/Output: [(6 9 96 63) 6]
Test Case: 351 | Input/Output: [(95 65 53 25) 25]
Test Case: 352 | Input/Output: [(38 9 48 84) 9]
Test Case: 353 | Input/Output: [(60 13 25 6) 6]
Test Case: 354 | Input/Output: [(12 77 18 42) 12]
Test Case: 355 | Input/Output: [(28 59 50 69) 28]
Test Case: 356 | Input/Output: [(87 77 31 17) 17]
Test Case: 357 | Input/Output: [(0 40 16 12) 0]
Test Case: 358 | Input/Output: [(61 69 29 57) 29]
Test Case: 359 | Input/Output: [(83 53 44 19) 19]
Test Case: 360 | Input/Output: [(34 81 8 19) 8]
Test Case: 361 | Input/Output: [(78 97 47 65) 47]
Test Case: 362 | Input/Output: [(45 46 55 44) 44]
Test Case: 363 | Input/Output: [(37 14 40 46) 14]
Test Case: 364 | Input/Output: [(47 71 87 54) 47]
Test Case: 365 | Input/Output: [(14 91 84 6) 6]
Test Case: 366 | Input/Output: [(86 86 9 30) 9]
Test Case: 367 | Input/Output: [(63 44 63 89) 44]
Test Case: 368 | Input/Output: [(97 24 68 20) 20]
Test Case: 369 | Input/Output: [(0 23 68 44) 0]
Test Case: 370 | Input/Output: [(9 32 16 69) 9]
Test Case: 371 | Input/Output: [(67 47 89 5) 5]
Test Case: 372 | Input/Output: [(98 76 76 89) 76]
Test Case: 373 | Input/Output: [(13 32 45 73) 13]
Test Case: 374 | Input/Output: [(8 12 13 61) 8]
Test Case: 375 | Input/Output: [(74 79 99 54) 54]
Test Case: 376 | Input/Output: [(92 59 14 79) 14]
Test Case: 377 | Input/Output: [(13 100 74 85) 13]
Test Case: 378 | Input/Output: [(71 97 25 50) 25]
Test Case: 379 | Input/Output: [(71 38 57 22) 22]
Test Case: 380 | Input/Output: [(35 4 62 22) 4]
Test Case: 381 | Input/Output: [(47 51 23 49) 23]
Test Case: 382 | Input/Output: [(53 50 88 4) 4]
Test Case: 383 | Input/Output: [(71 88 24 30) 24]
Test Case: 384 | Input/Output: [(70 74 87 58) 58]
Test Case: 385 | Input/Output: [(30 82 73 43) 30]
Test Case: 386 | Input/Output: [(21 54 77 88) 21]
Test Case: 387 | Input/Output: [(3 10 73 11) 3]
Test Case: 388 | Input/Output: [(78 49 63 6) 6]
Test Case: 389 | Input/Output: [(44 29 36 41) 29]
Test Case: 390 | Input/Output: [(49 29 48 50) 29]
Test Case: 391 | Input/Output: [(55 96 57 53) 53]
Test Case: 392 | Input/Output: [(17 60 26 96) 17]
Test Case: 393 | Input/Output: [(45 23 57 11) 11]
Test Case: 394 | Input/Output: [(91 69 86 37) 37]
Test Case: 395 | Input/Output: [(62 0 62 22) 0]
Test Case: 396 | Input/Output: [(28 38 29 42) 28]
Test Case: 397 | Input/Output: [(48 24 15 13) 13]
Test Case: 398 | Input/Output: [(83 45 50 53) 45]
Test Case: 399 | Input/Output: [(32 6 78 78) 6]
Test Case: 400 | Input/Output: [(86 93 -41 -89) -89]
Test Case: 401 | Input/Output: [(-94 65 -47 45) -94]
Test Case: 402 | Input/Output: [(-56 -20 88 39) -56]
Test Case: 403 | Input/Output: [(65 92 57 -63) -63]
Test Case: 404 | Input/Output: [(55 -43 87 44) -43]
Test Case: 405 | Input/Output: [(-20 3 -24 11) -24]
Test Case: 406 | Input/Output: [(-3 -76 -94 37) -94]
Test Case: 407 | Input/Output: [(-27 -64 -52 63) -64]
Test Case: 408 | Input/Output: [(57 -87 61 65) -87]
Test Case: 409 | Input/Output: [(-34 -10 18 -49) -49]
Test Case: 410 | Input/Output: [(-75 -89 -28 23) -89]
Test Case: 411 | Input/Output: [(47 -29 -26 -6) -29]
Test Case: 412 | Input/Output: [(65 61 -37 -53) -53]
Test Case: 413 | Input/Output: [(96 77 2 10) 2]
Test Case: 414 | Input/Output: [(96 -43 36 37) -43]
Test Case: 415 | Input/Output: [(0 -57 -97 14) -97]
Test Case: 416 | Input/Output: [(-12 -30 0 10) -30]
Test Case: 417 | Input/Output: [(72 -24 -65 -93) -93]
Test Case: 418 | Input/Output: [(-39 83 -72 44) -72]
Test Case: 419 | Input/Output: [(-19 -44 -10 -7) -44]
Test Case: 420 | Input/Output: [(-82 -51 -56 62) -82]
Test Case: 421 | Input/Output: [(86 -54 -11 -99) -99]
Test Case: 422 | Input/Output: [(-34 -36 98 94) -36]
Test Case: 423 | Input/Output: [(-64 98 91 38) -64]
Test Case: 424 | Input/Output: [(-51 100 -9 -89) -89]
Test Case: 425 | Input/Output: [(-62 -51 -10 -51) -62]
Test Case: 426 | Input/Output: [(-89 -60 77 82) -89]
Test Case: 427 | Input/Output: [(94 59 78 -62) -62]
Test Case: 428 | Input/Output: [(-52 -66 22 -76) -76]
Test Case: 429 | Input/Output: [(19 54 0 21) 0]
Test Case: 430 | Input/Output: [(-45 -11 -6 53) -45]
Test Case: 431 | Input/Output: [(-95 -64 -49 -74) -95]
Test Case: 432 | Input/Output: [(-50 -58 -75 38) -75]
Test Case: 433 | Input/Output: [(77 -92 -19 -47) -92]
Test Case: 434 | Input/Output: [(57 -22 -31 96) -31]
Test Case: 435 | Input/Output: [(-40 72 -76 -69) -76]
Test Case: 436 | Input/Output: [(-39 0 20 -3) -39]
Test Case: 437 | Input/Output: [(98 -8 -41 83) -41]
Test Case: 438 | Input/Output: [(-26 27 -69 81) -69]
Test Case: 439 | Input/Output: [(-12 -50 41 -26) -50]
Test Case: 440 | Input/Output: [(63 57 42 -47) -47]
Test Case: 441 | Input/Output: [(33 -95 64 8) -95]
Test Case: 442 | Input/Output: [(-41 -14 24 -6) -41]
Test Case: 443 | Input/Output: [(-17 22 -5 -47) -47]
Test Case: 444 | Input/Output: [(-100 56 35 -56) -100]
Test Case: 445 | Input/Output: [(87 -41 -23 -93) -93]
Test Case: 446 | Input/Output: [(-33 62 63 13) -33]
Test Case: 447 | Input/Output: [(-61 -68 91 53) -68]
Test Case: 448 | Input/Output: [(-85 87 62 94) -85]
Test Case: 449 | Input/Output: [(42 -74 15 -32) -74]
Test Case: 450 | Input/Output: [(-97 38 41 -80) -97]
Test Case: 451 | Input/Output: [(53 34 -61 51) -61]
Test Case: 452 | Input/Output: [(13 -60 63 57) -60]
Test Case: 453 | Input/Output: [(-41 -73 36 -98) -98]
Test Case: 454 | Input/Output: [(-46 25 -21 -6) -46]
Test Case: 455 | Input/Output: [(0 71 -52 -86) -86]
Test Case: 456 | Input/Output: [(33 68 -10 -64) -64]
Test Case: 457 | Input/Output: [(-12 1 -48 32) -48]
Test Case: 458 | Input/Output: [(-30 78 38 99) -30]
Test Case: 459 | Input/Output: [(0 -6 57 16) -6]
Test Case: 460 | Input/Output: [(50 -65 -47 25) -65]
Test Case: 461 | Input/Output: [(-11 -48 79 -97) -97]
Test Case: 462 | Input/Output: [(53 -11 56 79) -11]
Test Case: 463 | Input/Output: [(22 -23 -19 -41) -41]
Test Case: 464 | Input/Output: [(17 85 -58 56) -58]
Test Case: 465 | Input/Output: [(53 94 -12 -43) -43]
Test Case: 466 | Input/Output: [(-35 38 -62 42) -62]
Test Case: 467 | Input/Output: [(23 -56 84 -74) -74]
Test Case: 468 | Input/Output: [(19 34 94 -37) -37]
Test Case: 469 | Input/Output: [(-50 -66 56 4) -66]
Test Case: 470 | Input/Output: [(-17 -44 43 -76) -76]
Test Case: 471 | Input/Output: [(100 -89 30 -43) -89]
Test Case: 472 | Input/Output: [(-30 23 46 37) -30]
Test Case: 473 | Input/Output: [(15 -82 -90 44) -90]
Test Case: 474 | Input/Output: [(-29 8 -90 55) -90]
Test Case: 475 | Input/Output: [(94 67 -92 88) -92]
Test Case: 476 | Input/Output: [(85 95 -16 -90) -90]
Test Case: 477 | Input/Output: [(67 -6 33 -14) -14]
Test Case: 478 | Input/Output: [(-95 -39 -38 45) -95]
Test Case: 479 | Input/Output: [(41 44 55 90) 41]
Test Case: 480 | Input/Output: [(-21 50 33 20) -21]
Test Case: 481 | Input/Output: [(-22 -20 56 -52) -52]
Test Case: 482 | Input/Output: [(57 80 91 -98) -98]
Test Case: 483 | Input/Output: [(22 94 21 -9) -9]
Test Case: 484 | Input/Output: [(74 -25 -33 -87) -87]
Test Case: 485 | Input/Output: [(76 83 92 -45) -45]
Test Case: 486 | Input/Output: [(38 76 -65 -8) -65]
Test Case: 487 | Input/Output: [(-59 -8 -97 18) -97]
Test Case: 488 | Input/Output: [(-24 76 44 -43) -43]
Test Case: 489 | Input/Output: [(46 -98 -99 9) -99]
Test Case: 490 | Input/Output: [(54 -17 -70 -16) -70]
Test Case: 491 | Input/Output: [(-31 -75 80 -75) -75]
Test Case: 492 | Input/Output: [(8 -80 -14 82) -80]
Test Case: 493 | Input/Output: [(80 -72 13 -93) -93]
Test Case: 494 | Input/Output: [(47 -80 1 74) -80]
Test Case: 495 | Input/Output: [(61 -56 71 -13) -56]
Test Case: 496 | Input/Output: [(-6 71 -99 -53) -99]
Test Case: 497 | Input/Output: [(38 54 99 75) 38]
Test Case: 498 | Input/Output: [(77 94 67 80) 67]
Test Case: 499 | Input/Output: [(57 58 21 -85) -85]
Test Case: 500 | Input/Output: [(68 57 81 -91) -91]
Test Case: 501 | Input/Output: [(-18 -59 -24 -17) -59]
Test Case: 502 | Input/Output: [(98 -68 -52 -74) -74]
Test Case: 503 | Input/Output: [(-98 -80 38 -98) -98]
Test Case: 504 | Input/Output: [(16 45 32 94) 16]
Test Case: 505 | Input/Output: [(-8 -88 -51 -56) -88]
Test Case: 506 | Input/Output: [(-80 32 39 -21) -80]
Test Case: 507 | Input/Output: [(72 -62 -93 -74) -93]
Test Case: 508 | Input/Output: [(17 6 19 49) 6]
Test Case: 509 | Input/Output: [(61 -63 60 44) -63]
Test Case: 510 | Input/Output: [(21 15 99 -55) -55]
Test Case: 511 | Input/Output: [(-21 -39 16 -14) -39]
Test Case: 512 | Input/Output: [(74 90 -78 -98) -98]
Test Case: 513 | Input/Output: [(-70 -47 -45 -14) -70]
Test Case: 514 | Input/Output: [(-53 96 -97 -54) -97]
Test Case: 515 | Input/Output: [(-9 55 52 -88) -88]
Test Case: 516 | Input/Output: [(-68 9 -78 -96) -96]
Test Case: 517 | Input/Output: [(-58 -8 -22 12) -58]
Test Case: 518 | Input/Output: [(34 80 -11 -58) -58]
Test Case: 519 | Input/Output: [(-41 -89 83 -87) -89]
Test Case: 520 | Input/Output: [(67 62 -6 -48) -48]
Test Case: 521 | Input/Output: [(74 87 21 -97) -97]
Test Case: 522 | Input/Output: [(70 -49 47 55) -49]
Test Case: 523 | Input/Output: [(68 46 3 -2) -2]
Test Case: 524 | Input/Output: [(-63 56 -9 76) -63]
Test Case: 525 | Input/Output: [(15 99 -2 40) -2]
Test Case: 526 | Input/Output: [(-81 65 63 -10) -81]
Test Case: 527 | Input/Output: [(-82 58 -62 43) -82]
Test Case: 528 | Input/Output: [(67 -21 53 30) -21]
Test Case: 529 | Input/Output: [(50 21 68 -47) -47]
Test Case: 530 | Input/Output: [(90 -1 -31 73) -31]
Test Case: 531 | Input/Output: [(-11 -18 -1 18) -18]
Test Case: 532 | Input/Output: [(-35 -71 17 77) -71]
Test Case: 533 | Input/Output: [(63 69 -82 33) -82]
Test Case: 534 | Input/Output: [(-90 29 66 30) -90]
Test Case: 535 | Input/Output: [(-7 70 -22 -98) -98]
Test Case: 536 | Input/Output: [(-12 -53 -53 -23) -53]
Test Case: 537 | Input/Output: [(-65 84 -44 -97) -97]
Test Case: 538 | Input/Output: [(75 57 -60 9) -60]
Test Case: 539 | Input/Output: [(15 -5 45 73) -5]
Test Case: 540 | Input/Output: [(-18 75 -39 60) -39]
Test Case: 541 | Input/Output: [(50 11 96 11) 11]
Test Case: 542 | Input/Output: [(-32 -5 75 -49) -49]
Test Case: 543 | Input/Output: [(6 66 -44 -95) -95]
Test Case: 544 | Input/Output: [(1 8 45 -59) -59]
Test Case: 545 | Input/Output: [(-74 -70 -59 -39) -74]
Test Case: 546 | Input/Output: [(95 -29 39 33) -29]
Test Case: 547 | Input/Output: [(-67 36 -61 62) -67]
Test Case: 548 | Input/Output: [(88 61 -95 73) -95]
Test Case: 549 | Input/Output: [(36 32 89 -65) -65]
Test Case: 550 | Input/Output: [(-44 -92 -86 -58) -92]
Test Case: 551 | Input/Output: [(52 38 -87 -36) -87]
Test Case: 552 | Input/Output: [(-65 -16 40 -16) -65]
Test Case: 553 | Input/Output: [(-25 66 -59 89) -59]
Test Case: 554 | Input/Output: [(99 -18 -8 -83) -83]
Test Case: 555 | Input/Output: [(-26 19 84 32) -26]
Test Case: 556 | Input/Output: [(51 -77 69 -69) -77]
Test Case: 557 | Input/Output: [(7 31 -10 95) -10]
Test Case: 558 | Input/Output: [(4 94 71 -22) -22]
Test Case: 559 | Input/Output: [(45 16 -16 22) -16]
Test Case: 560 | Input/Output: [(91 6 -62 5) -62]
Test Case: 561 | Input/Output: [(-40 95 27 70) -40]
Test Case: 562 | Input/Output: [(-43 -24 23 33) -43]
Test Case: 563 | Input/Output: [(-55 74 28 -48) -55]
Test Case: 564 | Input/Output: [(-56 18 -66 47) -66]
Test Case: 565 | Input/Output: [(83 28 20 -94) -94]
Test Case: 566 | Input/Output: [(-45 -76 19 23) -76]
Test Case: 567 | Input/Output: [(-65 -24 97 86) -65]
Test Case: 568 | Input/Output: [(-36 65 -32 -57) -57]
Test Case: 569 | Input/Output: [(-11 16 95 6) -11]
Test Case: 570 | Input/Output: [(63 6 16 6) 6]
Test Case: 571 | Input/Output: [(-75 -97 -83 35) -97]
Test Case: 572 | Input/Output: [(-84 4 67 43) -84]
Test Case: 573 | Input/Output: [(-63 -92 62 -24) -92]
Test Case: 574 | Input/Output: [(88 97 -99 86) -99]
Test Case: 575 | Input/Output: [(-37 25 -67 -35) -67]
Test Case: 576 | Input/Output: [(88 88 68 40) 40]
Test Case: 577 | Input/Output: [(84 -88 -47 -81) -88]
Test Case: 578 | Input/Output: [(-96 81 -32 45) -96]
Test Case: 579 | Input/Output: [(94 -18 -16 31) -18]
Test Case: 580 | Input/Output: [(-33 -32 -43 -9) -43]
Test Case: 581 | Input/Output: [(46 88 9 20) 9]
Test Case: 582 | Input/Output: [(54 -66 -27 -94) -94]
Test Case: 583 | Input/Output: [(-61 -26 20 42) -61]
Test Case: 584 | Input/Output: [(43 45 41 8) 8]
Test Case: 585 | Input/Output: [(-19 -23 12 58) -23]
Test Case: 586 | Input/Output: [(92 -98 29 -52) -98]
Test Case: 587 | Input/Output: [(10 -98 -9 -13) -98]
Test Case: 588 | Input/Output: [(-61 42 78 67) -61]
Test Case: 589 | Input/Output: [(-12 -33 100 11) -33]
Test Case: 590 | Input/Output: [(-91 55 62 -19) -91]
Test Case: 591 | Input/Output: [(-68 35 39 100) -68]
Test Case: 592 | Input/Output: [(56 -74 -53 -44) -74]
Test Case: 593 | Input/Output: [(63 -23 -23 -93) -93]
Test Case: 594 | Input/Output: [(99 64 -21 49) -21]
Test Case: 595 | Input/Output: [(-95 39 -40 97) -95]
Test Case: 596 | Input/Output: [(46 41 -58 86) -58]
Test Case: 597 | Input/Output: [(78 83 45 -28) -28]
Test Case: 598 | Input/Output: [(9 6 -80 30) -80]
Test Case: 599 | Input/Output: [(2 56 74 -72) -72]
Test Case: 600 | Input/Output: [(-1 0 11 69) -1]
Test Case: 601 | Input/Output: [(23 -30 -47 58) -47]
Test Case: 602 | Input/Output: [(92 -97 -7 -99) -99]
Test Case: 603 | Input/Output: [(-30 67 5 -14) -30]
Test Case: 604 | Input/Output: [(-69 0 12 1) -69]
Test Case: 605 | Input/Output: [(-95 -74 -94 2) -95]
Test Case: 606 | Input/Output: [(52 5 -47 -87) -87]
Test Case: 607 | Input/Output: [(-96 24 98 73) -96]
Test Case: 608 | Input/Output: [(100 98 -3 19) -3]
Test Case: 609 | Input/Output: [(-48 14 -54 61) -54]
Test Case: 610 | Input/Output: [(98 -76 -44 -25) -76]
Test Case: 611 | Input/Output: [(-93 -2 84 -5) -93]
Test Case: 612 | Input/Output: [(72 70 76 -51) -51]
Test Case: 613 | Input/Output: [(-36 -64 88 32) -64]
Test Case: 614 | Input/Output: [(95 -87 -89 35) -89]
Test Case: 615 | Input/Output: [(-67 89 -99 -52) -99]
Test Case: 616 | Input/Output: [(44 -93 49 98) -93]
Test Case: 617 | Input/Output: [(-63 43 -59 -95) -95]
Test Case: 618 | Input/Output: [(-11 -7 -61 20) -61]
Test Case: 619 | Input/Output: [(-24 -89 92 -73) -89]
Test Case: 620 | Input/Output: [(61 -23 -91 -85) -91]
Test Case: 621 | Input/Output: [(4 45 84 41) 4]
Test Case: 622 | Input/Output: [(-18 91 -37 84) -37]
Test Case: 623 | Input/Output: [(24 -95 36 -53) -95]
Test Case: 624 | Input/Output: [(-43 0 -7 -40) -43]
Test Case: 625 | Input/Output: [(-19 -51 -28 -26) -51]
Test Case: 626 | Input/Output: [(88 75 29 20) 20]
Test Case: 627 | Input/Output: [(75 86 65 -20) -20]
Test Case: 628 | Input/Output: [(-9 -11 81 86) -11]
Test Case: 629 | Input/Output: [(-100 -14 -6 65) -100]
Test Case: 630 | Input/Output: [(57 -46 -59 -97) -97]
Test Case: 631 | Input/Output: [(-2 -60 80 -79) -79]
Test Case: 632 | Input/Output: [(26 73 -29 -32) -32]
Test Case: 633 | Input/Output: [(-37 15 22 62) -37]
Test Case: 634 | Input/Output: [(11 52 0 -94) -94]
Test Case: 635 | Input/Output: [(-79 -10 3 27) -79]
Test Case: 636 | Input/Output: [(80 -58 -53 -86) -86]
Test Case: 637 | Input/Output: [(8 21 -57 46) -57]
Test Case: 638 | Input/Output: [(-44 14 -17 -20) -44]
Test Case: 639 | Input/Output: [(62 15 -78 -77) -78]
Test Case: 640 | Input/Output: [(55 -16 23 -58) -58]
Test Case: 641 | Input/Output: [(72 -6 78 -23) -23]
Test Case: 642 | Input/Output: [(64 -32 -16 56) -32]
Test Case: 643 | Input/Output: [(92 61 98 58) 58]
Test Case: 644 | Input/Output: [(-67 -19 60 51) -67]
Test Case: 645 | Input/Output: [(-86 -55 -99 41) -99]
Test Case: 646 | Input/Output: [(99 2 87 -58) -58]
Test Case: 647 | Input/Output: [(9 5 95 90) 5]
Test Case: 648 | Input/Output: [(67 38 93 -31) -31]
Test Case: 649 | Input/Output: [(-23 -76 69 -71) -76]
Test Case: 650 | Input/Output: [(-79 34 84 -80) -80]
Test Case: 651 | Input/Output: [(-23 -49 -94 37) -94]
Test Case: 652 | Input/Output: [(-49 -90 26 10) -90]
Test Case: 653 | Input/Output: [(-55 -53 -30 53) -55]
Test Case: 654 | Input/Output: [(-73 -10 15 15) -73]
Test Case: 655 | Input/Output: [(-56 -28 -84 27) -84]
Test Case: 656 | Input/Output: [(14 79 71 82) 14]
Test Case: 657 | Input/Output: [(23 -23 55 91) -23]
Test Case: 658 | Input/Output: [(-64 20 7 -54) -64]
Test Case: 659 | Input/Output: [(1 -82 78 11) -82]
Test Case: 660 | Input/Output: [(-83 21 -23 -71) -83]
Test Case: 661 | Input/Output: [(79 -4 0 79) -4]
Test Case: 662 | Input/Output: [(1 81 91 -37) -37]
Test Case: 663 | Input/Output: [(95 91 -60 -82) -82]
Test Case: 664 | Input/Output: [(-80 85 59 54) -80]
Test Case: 665 | Input/Output: [(-5 38 47 73) -5]
Test Case: 666 | Input/Output: [(97 3 -18 24) -18]
Test Case: 667 | Input/Output: [(-11 13 -2 87) -11]
Test Case: 668 | Input/Output: [(71 -100 85 1) -100]
Test Case: 669 | Input/Output: [(10 61 11 22) 10]
Test Case: 670 | Input/Output: [(-1 -38 46 44) -38]
Test Case: 671 | Input/Output: [(-98 22 91 75) -98]
Test Case: 672 | Input/Output: [(-2 -92 -11 -67) -92]
Test Case: 673 | Input/Output: [(-33 -37 -61 -34) -61]
Test Case: 674 | Input/Output: [(-100 -57 -96 12) -100]
Test Case: 675 | Input/Output: [(-21 -19 33 46) -21]
Test Case: 676 | Input/Output: [(82 79 78 -29) -29]
Test Case: 677 | Input/Output: [(94 -75 -21 -64) -75]
Test Case: 678 | Input/Output: [(65 17 -85 89) -85]
Test Case: 679 | Input/Output: [(-85 -13 51 -45) -85]
Test Case: 680 | Input/Output: [(73 -95 54 92) -95]
Test Case: 681 | Input/Output: [(93 57 44 -69) -69]
Test Case: 682 | Input/Output: [(-15 -15 -83 -39) -83]
Test Case: 683 | Input/Output: [(-24 -73 -50 -16) -73]
Test Case: 684 | Input/Output: [(13 -8 -13 20) -13]
Test Case: 685 | Input/Output: [(84 27 -98 97) -98]
Test Case: 686 | Input/Output: [(81 11 -100 -63) -100]
Test Case: 687 | Input/Output: [(-59 57 24 -47) -59]
Test Case: 688 | Input/Output: [(44 -50 -55 -98) -98]
Test Case: 689 | Input/Output: [(36 78 -64 -43) -64]
Test Case: 690 | Input/Output: [(-68 -81 -58 72) -81]
Test Case: 691 | Input/Output: [(33 -94 -66 99) -94]
Test Case: 692 | Input/Output: [(-89 -23 46 -8) -89]
Test Case: 693 | Input/Output: [(-84 13 -25 -44) -84]
Test Case: 694 | Input/Output: [(32 -22 -6 24) -22]
Test Case: 695 | Input/Output: [(-84 -55 -69 -18) -84]
Test Case: 696 | Input/Output: [(1 92 -5 24) -5]
Test Case: 697 | Input/Output: [(72 23 93 54) 23]
Test Case: 698 | Input/Output: [(55 99 -65 61) -65]
Test Case: 699 | Input/Output: [(-91 -1 -4 54) -91]
Test Case: 700 | Input/Output: [(83 83 -49 83) -49]
Test Case: 701 | Input/Output: [(-92 -17 32 -13) -92]
Test Case: 702 | Input/Output: [(-43 -89 82 -24) -89]
Test Case: 703 | Input/Output: [(-15 60 36 -25) -25]
Test Case: 704 | Input/Output: [(17 12 -8 -36) -36]
Test Case: 705 | Input/Output: [(-43 -80 57 86) -80]
Test Case: 706 | Input/Output: [(-80 -34 -46 48) -80]
Test Case: 707 | Input/Output: [(73 -40 9 -60) -60]
Test Case: 708 | Input/Output: [(65 -60 71 -91) -91]
Test Case: 709 | Input/Output: [(-20 -86 -48 56) -86]
Test Case: 710 | Input/Output: [(65 -26 37 -90) -90]
Test Case: 711 | Input/Output: [(78 -57 -15 -42) -57]
Test Case: 712 | Input/Output: [(-22 71 23 -88) -88]
Test Case: 713 | Input/Output: [(-63 -30 -69 -57) -69]
Test Case: 714 | Input/Output: [(70 68 57 -33) -33]
Test Case: 715 | Input/Output: [(80 55 61 67) 55]
Test Case: 716 | Input/Output: [(13 -28 -100 47) -100]
Test Case: 717 | Input/Output: [(-41 7 -75 36) -75]
Test Case: 718 | Input/Output: [(0 -82 -38 -67) -82]
Test Case: 719 | Input/Output: [(59 91 68 -9) -9]
Test Case: 720 | Input/Output: [(-7 61 46 4) -7]
Test Case: 721 | Input/Output: [(-14 0 -67 -93) -93]
Test Case: 722 | Input/Output: [(-43 -60 12 19) -60]
Test Case: 723 | Input/Output: [(-69 70 -27 -64) -69]
Test Case: 724 | Input/Output: [(85 -10 37 -98) -98]
Test Case: 725 | Input/Output: [(94 57 -57 -11) -57]
Test Case: 726 | Input/Output: [(19 -100 -48 17) -100]
Test Case: 727 | Input/Output: [(20 53 23 43) 20]
Test Case: 728 | Input/Output: [(83 -13 42 48) -13]
Test Case: 729 | Input/Output: [(-54 -35 -88 -56) -88]
Test Case: 730 | Input/Output: [(90 -21 -37 91) -37]
Test Case: 731 | Input/Output: [(23 32 39 73) 23]
Test Case: 732 | Input/Output: [(3 -31 -23 -49) -49]
Test Case: 733 | Input/Output: [(0 91 17 74) 0]
Test Case: 734 | Input/Output: [(-97 -53 -60 -3) -97]
Test Case: 735 | Input/Output: [(-52 -88 22 18) -88]
Test Case: 736 | Input/Output: [(99 3 -7 61) -7]
Test Case: 737 | Input/Output: [(4 -71 -72 20) -72]
Test Case: 738 | Input/Output: [(13 -42 99 69) -42]
Test Case: 739 | Input/Output: [(29 44 -91 -19) -91]
Test Case: 740 | Input/Output: [(-89 37 10 14) -89]
Test Case: 741 | Input/Output: [(-73 6 -1 58) -73]
Test Case: 742 | Input/Output: [(57 -62 -72 -71) -72]
Test Case: 743 | Input/Output: [(-49 17 9 89) -49]
Test Case: 744 | Input/Output: [(-13 -4 -17 -61) -61]
Test Case: 745 | Input/Output: [(24 79 15 -93) -93]
Test Case: 746 | Input/Output: [(-54 100 33 91) -54]
Test Case: 747 | Input/Output: [(-34 59 33 52) -34]
Test Case: 748 | Input/Output: [(16 98 -2 -17) -17]
Test Case: 749 | Input/Output: [(27 30 90 83) 27]
Test Case: 750 | Input/Output: [(17 84 58 97) 17]
Test Case: 751 | Input/Output: [(-35 28 -45 -5) -45]
Test Case: 752 | Input/Output: [(79 94 22 -20) -20]
Test Case: 753 | Input/Output: [(-60 -91 -91 31) -91]
Test Case: 754 | Input/Output: [(-7 -8 -67 -35) -67]
Test Case: 755 | Input/Output: [(-38 -43 32 34) -43]
Test Case: 756 | Input/Output: [(100 -79 -70 27) -79]
Test Case: 757 | Input/Output: [(79 89 -7 -28) -28]
Test Case: 758 | Input/Output: [(-25 38 -74 70) -74]
Test Case: 759 | Input/Output: [(-89 72 78 -3) -89]
Test Case: 760 | Input/Output: [(25 -6 -59 -51) -59]
Test Case: 761 | Input/Output: [(-60 -20 92 -22) -60]
Test Case: 762 | Input/Output: [(-68 76 76 95) -68]
Test Case: 763 | Input/Output: [(23 66 1 76) 1]
Test Case: 764 | Input/Output: [(-18 -7 -52 0) -52]
Test Case: 765 | Input/Output: [(74 -83 11 12) -83]
Test Case: 766 | Input/Output: [(94 -77 -75 -26) -77]
Test Case: 767 | Input/Output: [(-36 19 83 53) -36]
Test Case: 768 | Input/Output: [(17 -67 -4 -43) -67]
Test Case: 769 | Input/Output: [(-69 82 71 -78) -78]
Test Case: 770 | Input/Output: [(-73 -24 79 -54) -73]
Test Case: 771 | Input/Output: [(58 -41 26 81) -41]
Test Case: 772 | Input/Output: [(-100 13 -74 -66) -100]
Test Case: 773 | Input/Output: [(99 -19 -20 67) -20]
Test Case: 774 | Input/Output: [(49 -22 -91 27) -91]
Test Case: 775 | Input/Output: [(-5 28 -94 70) -94]
Test Case: 776 | Input/Output: [(28 54 -39 -8) -39]
Test Case: 777 | Input/Output: [(-21 10 -5 -81) -81]
Test Case: 778 | Input/Output: [(-36 63 20 19) -36]
Test Case: 779 | Input/Output: [(41 43 -8 -95) -95]
Test Case: 780 | Input/Output: [(70 71 -97 -59) -97]
Test Case: 781 | Input/Output: [(-7 61 -61 -79) -79]
Test Case: 782 | Input/Output: [(53 -21 52 -14) -21]
Test Case: 783 | Input/Output: [(31 1 22 38) 1]
Test Case: 784 | Input/Output: [(76 -88 -63 -99) -99]
Test Case: 785 | Input/Output: [(40 -75 -44 57) -75]
Test Case: 786 | Input/Output: [(65 65 -88 36) -88]
Test Case: 787 | Input/Output: [(32 -9 2 -31) -31]
Test Case: 788 | Input/Output: [(14 91 38 -57) -57]
Test Case: 789 | Input/Output: [(-78 -56 46 -5) -78]
Test Case: 790 | Input/Output: [(-82 -6 88 -80) -82]
Test Case: 791 | Input/Output: [(26 10 -1 -28) -28]
Test Case: 792 | Input/Output: [(100 56 -15 -93) -93]
Test Case: 793 | Input/Output: [(25 -44 -64 -4) -64]
Test Case: 794 | Input/Output: [(-90 -88 -13 -29) -90]
Test Case: 795 | Input/Output: [(51 -7 66 20) -7]
Test Case: 796 | Input/Output: [(86 78 -96 -7) -96]
Test Case: 797 | Input/Output: [(47 73 2 11) 2]
Test Case: 798 | Input/Output: [(23 -18 29 4) -18]
Test Case: 799 | Input/Output: [(92 -93 -100 34) -100]
Test Case: 800 | Input/Output: [(0 42 75 -5) -5]
Test Case: 801 | Input/Output: [(36 56 49 -69) -69]
Test Case: 802 | Input/Output: [(-54 3 45 -54) -54]
Test Case: 803 | Input/Output: [(57 19 70 87) 19]
Test Case: 804 | Input/Output: [(-10 -31 46 0) -31]
Test Case: 805 | Input/Output: [(83 69 8 -86) -86]
Test Case: 806 | Input/Output: [(86 -3 38 25) -3]
Test Case: 807 | Input/Output: [(3 -70 -76 -14) -76]
Test Case: 808 | Input/Output: [(-13 -21 32 -93) -93]
Test Case: 809 | Input/Output: [(-91 74 22 77) -91]
Test Case: 810 | Input/Output: [(-65 -6 98 -9) -65]
Test Case: 811 | Input/Output: [(50 -21 84 75) -21]
Test Case: 812 | Input/Output: [(31 4 -52 30) -52]
Test Case: 813 | Input/Output: [(10 93 -94 -80) -94]
Test Case: 814 | Input/Output: [(44 -1 -20 58) -20]
Test Case: 815 | Input/Output: [(-17 65 -99 -12) -99]
Test Case: 816 | Input/Output: [(-87 22 99 56) -87]
Test Case: 817 | Input/Output: [(94 -26 -53 48) -53]
Test Case: 818 | Input/Output: [(99 71 32 -58) -58]
Test Case: 819 | Input/Output: [(13 -87 -37 15) -87]
Test Case: 820 | Input/Output: [(-48 -97 15 -40) -97]
Test Case: 821 | Input/Output: [(-100 -44 48 23) -100]
Test Case: 822 | Input/Output: [(-69 36 -50 -71) -71]
Test Case: 823 | Input/Output: [(66 -96 83 5) -96]
Test Case: 824 | Input/Output: [(-75 -82 69 -91) -91]
Test Case: 825 | Input/Output: [(91 -68 -37 25) -68]
Test Case: 826 | Input/Output: [(-54 70 54 -48) -54]
Test Case: 827 | Input/Output: [(22 94 75 -17) -17]
Test Case: 828 | Input/Output: [(-71 18 29 -43) -71]
Test Case: 829 | Input/Output: [(-24 -25 94 -53) -53]
Test Case: 830 | Input/Output: [(19 4 58 -73) -73]
Test Case: 831 | Input/Output: [(-16 -12 -50 -39) -50]
Test Case: 832 | Input/Output: [(28 -21 -77 98) -77]
Test Case: 833 | Input/Output: [(97 -75 -66 47) -75]
Test Case: 834 | Input/Output: [(78 79 -70 -58) -70]
Test Case: 835 | Input/Output: [(1 7 13 29) 1]
Test Case: 836 | Input/Output: [(61 80 -30 -21) -30]
Test Case: 837 | Input/Output: [(-18 -44 45 86) -44]
Test Case: 838 | Input/Output: [(-9 -91 0 -40) -91]
Test Case: 839 | Input/Output: [(68 -72 98 7) -72]
Test Case: 840 | Input/Output: [(-26 -19 100 -41) -41]
Test Case: 841 | Input/Output: [(-66 9 54 -54) -66]
Test Case: 842 | Input/Output: [(68 26 -46 -85) -85]
Test Case: 843 | Input/Output: [(-32 -45 -86 40) -86]
Test Case: 844 | Input/Output: [(-98 98 -81 -52) -98]
Test Case: 845 | Input/Output: [(-49 42 -43 87) -49]
Test Case: 846 | Input/Output: [(-23 -76 -88 96) -88]
Test Case: 847 | Input/Output: [(-73 7 31 -87) -87]
Test Case: 848 | Input/Output: [(44 -82 97 -70) -82]
Test Case: 849 | Input/Output: [(-54 42 -44 55) -54]
Test Case: 850 | Input/Output: [(97 -69 -20 97) -69]
Test Case: 851 | Input/Output: [(-82 81 10 86) -82]
Test Case: 852 | Input/Output: [(-60 30 -7 69) -60]
Test Case: 853 | Input/Output: [(-25 -10 63 -61) -61]
Test Case: 854 | Input/Output: [(92 8 -58 -47) -58]
Test Case: 855 | Input/Output: [(29 46 -67 -74) -74]
Test Case: 856 | Input/Output: [(76 -65 -66 -88) -88]
Test Case: 857 | Input/Output: [(76 -66 14 -52) -66]
Test Case: 858 | Input/Output: [(-67 -92 -66 44) -92]
Test Case: 859 | Input/Output: [(66 -81 -9 -89) -89]
Test Case: 860 | Input/Output: [(-40 56 -89 64) -89]
Test Case: 861 | Input/Output: [(42 -91 -88 -77) -91]
Test Case: 862 | Input/Output: [(95 -76 34 67) -76]
Test Case: 863 | Input/Output: [(-1 89 39 -62) -62]
Test Case: 864 | Input/Output: [(-52 -82 -16 -69) -82]
Test Case: 865 | Input/Output: [(-86 75 75 -59) -86]
Test Case: 866 | Input/Output: [(24 71 4 -77) -77]
Test Case: 867 | Input/Output: [(79 -82 80 67) -82]
Test Case: 868 | Input/Output: [(-45 -53 -47 -22) -53]
Test Case: 869 | Input/Output: [(74 55 86 -21) -21]
Test Case: 870 | Input/Output: [(-73 72 2 -89) -89]
Test Case: 871 | Input/Output: [(-100 87 13 17) -100]
Test Case: 872 | Input/Output: [(-94 -53 -17 -44) -94]
Test Case: 873 | Input/Output: [(51 -61 41 -18) -61]
Test Case: 874 | Input/Output: [(25 -45 -81 49) -81]
Test Case: 875 | Input/Output: [(68 99 -36 -44) -44]
Test Case: 876 | Input/Output: [(99 27 47 3) 3]
Test Case: 877 | Input/Output: [(88 -82 -54 3) -82]
Test Case: 878 | Input/Output: [(86 -48 69 23) -48]
Test Case: 879 | Input/Output: [(54 1 49 -48) -48]
Test Case: 880 | Input/Output: [(6 -95 58 -27) -95]
Test Case: 881 | Input/Output: [(59 61 45 47) 45]
Test Case: 882 | Input/Output: [(-8 -68 91 65) -68]
Test Case: 883 | Input/Output: [(-83 74 5 -15) -83]
Test Case: 884 | Input/Output: [(-4 -5 -4 -33) -33]
Test Case: 885 | Input/Output: [(56 89 12 -12) -12]
Test Case: 886 | Input/Output: [(22 57 -42 51) -42]
Test Case: 887 | Input/Output: [(-24 -14 -26 -37) -37]
Test Case: 888 | Input/Output: [(15 1 -37 -88) -88]
Test Case: 889 | Input/Output: [(-16 17 93 -50) -50]
Test Case: 890 | Input/Output: [(-76 98 30 -67) -76]
Test Case: 891 | Input/Output: [(8 -99 13 78) -99]
Test Case: 892 | Input/Output: [(72 -3 76 -91) -91]
Test Case: 893 | Input/Output: [(61 -66 52 40) -66]
Test Case: 894 | Input/Output: [(-15 -21 -35 60) -35]
Test Case: 895 | Input/Output: [(-62 -27 -38 82) -62]
Test Case: 896 | Input/Output: [(-18 6 30 -5) -18]
Test Case: 897 | Input/Output: [(-75 48 -34 92) -75]
Test Case: 898 | Input/Output: [(-66 -56 -68 -25) -68]
Test Case: 899 | Input/Output: [(-98 84 18 -66) -98]
Test Case: 900 | Input/Output: [(-56 30 -72 -21) -72]
Test Case: 901 | Input/Output: [(-32 -66 41 89) -66]
Test Case: 902 | Input/Output: [(56 -50 66 -5) -50]
Test Case: 903 | Input/Output: [(67 -91 71 -51) -91]
Test Case: 904 | Input/Output: [(-5 -39 11 -46) -46]
Test Case: 905 | Input/Output: [(5 35 53 71) 5]
Test Case: 906 | Input/Output: [(27 76 89 39) 27]
Test Case: 907 | Input/Output: [(71 -98 -67 82) -98]
Test Case: 908 | Input/Output: [(35 11 -41 -3) -41]
Test Case: 909 | Input/Output: [(-2 -51 10 36) -51]
Test Case: 910 | Input/Output: [(4 -11 -40 13) -40]
Test Case: 911 | Input/Output: [(89 67 -77 -64) -77]
Test Case: 912 | Input/Output: [(-5 -4 73 -81) -81]
Test Case: 913 | Input/Output: [(46 -3 94 6) -3]
Test Case: 914 | Input/Output: [(58 -42 69 -61) -61]
Test Case: 915 | Input/Output: [(-41 -23 97 62) -41]
Test Case: 916 | Input/Output: [(69 32 64 -83) -83]
Test Case: 917 | Input/Output: [(80 31 -76 -77) -77]
Test Case: 918 | Input/Output: [(-52 52 -52 -30) -52]
Test Case: 919 | Input/Output: [(-18 12 -15 -31) -31]
Test Case: 920 | Input/Output: [(-87 17 14 -9) -87]
Test Case: 921 | Input/Output: [(-59 61 -46 -87) -87]
Test Case: 922 | Input/Output: [(7 -95 74 -28) -95]
Test Case: 923 | Input/Output: [(63 -5 -29 46) -29]
Test Case: 924 | Input/Output: [(60 70 43 -37) -37]
Test Case: 925 | Input/Output: [(-11 -21 64 76) -21]
Test Case: 926 | Input/Output: [(7 43 -29 -8) -29]
Test Case: 927 | Input/Output: [(93 89 30 21) 21]
Test Case: 928 | Input/Output: [(94 -34 45 -84) -84]
Test Case: 929 | Input/Output: [(-21 67 -25 -96) -96]
Test Case: 930 | Input/Output: [(-64 -37 36 -68) -68]
Test Case: 931 | Input/Output: [(-92 -87 87 -80) -92]
Test Case: 932 | Input/Output: [(60 18 -93 -99) -99]
Test Case: 933 | Input/Output: [(-1 13 36 26) -1]
Test Case: 934 | Input/Output: [(81 -34 57 100) -34]
Test Case: 935 | Input/Output: [(99 -15 -8 -43) -43]
Test Case: 936 | Input/Output: [(-57 14 52 29) -57]
Test Case: 937 | Input/Output: [(-95 11 -51 -46) -95]
Test Case: 938 | Input/Output: [(-100 35 83 -96) -100]
Test Case: 939 | Input/Output: [(-32 -51 49 88) -51]
Test Case: 940 | Input/Output: [(72 -15 98 -21) -21]
Test Case: 941 | Input/Output: [(-55 4 -100 -20) -100]
Test Case: 942 | Input/Output: [(-55 -18 -76 27) -76]
Test Case: 943 | Input/Output: [(48 67 -67 -10) -67]
Test Case: 944 | Input/Output: [(75 72 -83 26) -83]
Test Case: 945 | Input/Output: [(50 -87 13 -7) -87]
Test Case: 946 | Input/Output: [(-97 86 25 49) -97]
Test Case: 947 | Input/Output: [(-61 78 50 -98) -98]
Test Case: 948 | Input/Output: [(47 -26 -31 -85) -85]
Test Case: 949 | Input/Output: [(-33 64 -28 -69) -69]
Test Case: 950 | Input/Output: [(69 -58 -27 -68) -68]
Test Case: 951 | Input/Output: [(98 -25 51 72) -25]
Test Case: 952 | Input/Output: [(-23 94 -63 -90) -90]
Test Case: 953 | Input/Output: [(-41 -4 89 86) -41]
Test Case: 954 | Input/Output: [(51 43 -14 64) -14]
Test Case: 955 | Input/Output: [(60 -37 -22 81) -37]
Test Case: 956 | Input/Output: [(17 42 -54 30) -54]
Test Case: 957 | Input/Output: [(-90 -96 20 -62) -96]
Test Case: 958 | Input/Output: [(-18 56 -88 92) -88]
Test Case: 959 | Input/Output: [(-90 3 71 24) -90]
Test Case: 960 | Input/Output: [(-50 22 -93 -30) -93]
Test Case: 961 | Input/Output: [(30 90 87 10) 10]
Test Case: 962 | Input/Output: [(-94 -29 60 72) -94]
Test Case: 963 | Input/Output: [(54 -13 -85 -51) -85]
Test Case: 964 | Input/Output: [(-61 -74 -71 -60) -74]
Test Case: 965 | Input/Output: [(9 25 -72 -96) -96]
Test Case: 966 | Input/Output: [(-39 -50 16 -40) -50]
Test Case: 967 | Input/Output: [(-71 -19 67 71) -71]
Test Case: 968 | Input/Output: [(7 68 61 -45) -45]
Test Case: 969 | Input/Output: [(15 83 -11 43) -11]
Test Case: 970 | Input/Output: [(-77 76 -96 52) -96]
Test Case: 971 | Input/Output: [(-69 -17 -57 60) -69]
Test Case: 972 | Input/Output: [(-59 -63 28 -26) -63]
Test Case: 973 | Input/Output: [(40 43 19 88) 19]
Test Case: 974 | Input/Output: [(84 -42 44 48) -42]
Test Case: 975 | Input/Output: [(19 -57 22 7) -57]
Test Case: 976 | Input/Output: [(-13 -96 -80 71) -96]
Test Case: 977 | Input/Output: [(9 12 81 -22) -22]
Test Case: 978 | Input/Output: [(-48 74 77 -66) -66]
Test Case: 979 | Input/Output: [(-10 -62 21 0) -62]
Test Case: 980 | Input/Output: [(-90 -87 48 -29) -90]
Test Case: 981 | Input/Output: [(71 42 -98 -39) -98]
Test Case: 982 | Input/Output: [(2 -62 96 49) -62]
Test Case: 983 | Input/Output: [(79 36 17 27) 17]
Test Case: 984 | Input/Output: [(12 43 -41 43) -41]
Test Case: 985 | Input/Output: [(24 -89 -91 27) -91]
Test Case: 986 | Input/Output: [(-6 -28 93 -13) -28]
Test Case: 987 | Input/Output: [(-42 61 -29 -55) -55]
Test Case: 988 | Input/Output: [(49 36 -42 53) -42]
Test Case: 989 | Input/Output: [(-42 0 43 26) -42]
Test Case: 990 | Input/Output: [(-41 97 -54 86) -54]
Test Case: 991 | Input/Output: [(-38 -51 -37 54) -51]
Test Case: 992 | Input/Output: [(74 83 -93 46) -93]
Test Case: 993 | Input/Output: [(79 50 -82 94) -82]
Test Case: 994 | Input/Output: [(-14 -44 33 37) -44]
Test Case: 995 | Input/Output: [(86 -94 63 77) -94]
Test Case: 996 | Input/Output: [(73 82 30 -49) -49]
Test Case: 997 | Input/Output: [(-77 49 38 56) -77]
Test Case: 998 | Input/Output: [(-62 25 74 50) -62]
Test Case: 999 | Input/Output: [(-57 -31 55 -86) -86]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -71 8 -118 29 82 -92 80 121 99 63 -14 -5 -105 91 -92 85
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[11 11 0 11] 0] [[-16 86 -16 -16] -16] [[-91 -91 -91 57] -91] [[62 -32 62 62] -32] [[-92 -92 3 -92] -92] [[-36 38 38 38] -36] [[-4 -4 86 -4] -4] [[-52 -52 97 -52] -52] [[-33 38 38 38] -33] [[81 81 -25 81] -25] [(-82 -82 -82 -82) -82] [(-95 -95 -95 -95) -95] [(9 9 9 9) 9] [(-29 -29 -29 -29) -29] [(88 88 88 88) 88] [(10 68 8 21) 8] [(70 90 38 17) 17] [(87 7 12 31) 7] [(7 26 65 64) 7] [(52 0 23 14) 0] [(94 50 74 64) 50] [(55 47 7 58) 7] [(21 77 81 44) 21] [(97 82 68 6) 6] [(88 71 32 74) 32] [(58 85 40 70) 40] [(48 83 83 42) 42] [(11 46 37 26) 11] [(18 25 50 42) 18] [(60 24 12 50) 12] [(8 71 84 41) 8] [(14 75 1 98) 1] [(85 27 77 65) 27] [(27 70 42 81) 27] [(52 14 28 74) 14] [(81 -44 71 -58) -58] [(27 75 81 99) 27] [(-77 -3 -46 -34) -77] [(15 29 -72 -60) -72] [(54 -84 60 -99) -99] [(-48 7 94 1) -48] [(-59 4 73 -4) -59] [(-57 16 -35 -21) -57] [(52 5 -57 -55) -57] [(90 -70 16 33) -70] [(26 70 60 74) 26] [(96 7 83 26) 7] [(-65 19 38 13) -65] [(-43 93 28 -58) -58] [(-72 -80 -19 -7) -80] [(38 -84 -96 -63) -96] [(-15 53 -76 11) -76] [(50 50 -48 -20) -48] [(-6 -74 73 89) -74] [(-40 -78 50 71) -78] [(67 65 -1 18) -1] [(-36 36 -23 -31) -36] [(-93 22 78 -84) -93] [(-8 -73 -50 -26) -73] [(-48 -45 -76 23) -76] [(26 -54 69 -58) -58] [(-73 -11 11 18) -73] [(84 1 36 23) 1] [(44 20 -56 -43) -56] [(33 33 -27 49) -27] [(38 -38 -66 5) -66] [(69 77 -43 35) -43] [(-22 70 -88 -29) -88] [(58 -94 -59 63) -94] [(-67 55 62 -49) -67] [(-25 8 -75 -81) -81] [(37 84 -41 -59) -59] [(-58 96 -50 -98) -98] [(-24 91 22 7) -24] [(-96 75 4 2) -96] [(62 42 -28 -13) -28] [(60 49 -64 -45) -64] [(68 74 -81 99) -81] [(-28 -47 17 -78) -78] [(19 -100 -9 -45) -100] [(-49 -67 -71 28) -71] [(-90 87 -22 97) -90] [(-36 -66 -71 65) -71] [(-53 -1 72 26) -53] [(25 32 76 9) 9] [(24 42 15 95) 15] [(72 -30 37 -15) -30] [(49 -13 -61 25) -61] [(-25 -97 -70 1) -97] [(-95 57 -75 -40) -95] [(32 -41 56 -12) -41] [(94 -83 15 -78) -83] [(4 56 67 44) 4] [(81 72 -89 -29) -89] [(18 28 61 -76) -76])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 68                 
Correct output: 17                  | Program output: 90                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 77                 
Correct output: 6                   | Program output: 82                 
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 85                 
Correct output: 42                  | Program output: 83                 
Correct output: 11                  | Program output: 46                 
Correct output: 18                  | Program output: 25                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 71                 
Correct output: 1                   | Program output: 75                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 70                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 75                 
Correct output: -77                 | Program output: -3                 
Correct output: -72                 | Program output: 29                 
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: 7                  
Correct output: -59                 | Program output: 4                  
Correct output: -57                 | Program output: 16                 
Correct output: -57                 | Program output: 5                  
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 70                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -58                 | Program output: 93                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: 53                 
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 65                 
Correct output: -36                 | Program output: 36                 
Correct output: -93                 | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -45                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -11                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 20                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 77                 
Correct output: -88                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: 55                 
Correct output: -81                 | Program output: 8                  
Correct output: -59                 | Program output: 84                 
Correct output: -98                 | Program output: 96                 
Correct output: -24                 | Program output: 91                 
Correct output: -96                 | Program output: 75                 
Correct output: -28                 | Program output: 42                 
Correct output: -64                 | Program output: 49                 
Correct output: -81                 | Program output: 74                 
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: 87                 
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -1                 
Correct output: 9                   | Program output: 32                 
Correct output: 15                  | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 56                 
Correct output: -89                 | Program output: 72                 
Correct output: -76                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 2, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_206} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_invert_second_then_and integer_mult exec_pop () integer_dup_times integer_dec exec_when (in3 integer_dec) integer_sub integer_dup boolean_invert_first_then_and integer_lt boolean_or boolean_eq integer_fromboolean in1 boolean_empty tag_boolean_206 boolean_flush boolean_yankdup integer_empty integer_dup boolean_eq boolean_stackdepth integer_dec boolean_yankdup print_integer integer_flush integer_inc exec_do*range (exec_do*while (integer_dup_times exec_yank in3 exec_yankdup) integer_div integer_yank) integer_gt boolean_invert_second_then_and exec_y ())
Lexicase best errors: [1 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 2, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_206} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_invert_second_then_and integer_mult exec_pop () integer_dup_times integer_dec exec_when (in3 integer_dec) integer_sub integer_dup boolean_invert_first_then_and integer_lt boolean_or boolean_eq integer_fromboolean in1 boolean_empty tag_boolean_206 boolean_flush boolean_yankdup integer_empty integer_dup boolean_eq boolean_stackdepth integer_dec boolean_yankdup print_integer integer_flush integer_inc exec_do*range (exec_do*while (integer_dup_times exec_yank in3 exec_yankdup) integer_div integer_yank) integer_gt boolean_invert_second_then_and exec_y ())
Zero cases best errors: [1 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 11 5 3 4 3 15 5 4 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (2 11 5 3 4 3 15 5 4 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup})
Best program: (in2 boolean_swap integer_min print_integer exec_while (print_integer integer_lte print_boolean) boolean_invert_second_then_and exec_yankdup exec_stackdepth exec_y_when_autoconstructing (print_boolean boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 integer_swap boolean_yankdup integer_dup) ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.946
Median total errors in population: 10
Error averages by case: (0.998 0.989 0.995 0.997 0.996 0.997 0.985 0.995 0.996 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.383
Average program size in population (points): 69.523
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 502571
--- Timings ---
Current time: 1559594133246 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.9 seconds, 37.0%
Fitness Testing:      1.4 seconds, 58.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10                 
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 82                 
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: 5                  
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: -15                
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -48                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 20                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 69                 
Correct output: -88                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -25                
Correct output: -59                 | Program output: 37                 
Correct output: -98                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 42                 
Correct output: -64                 | Program output: 49                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: 72                 
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_409} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_241} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_s_when_autoconstructing (exec_yankdup boolean_invert_first_then_and) (exec_dup_items exec_k_when_autoconstructing (integer_inc) (integer_fromboolean) exec_when (integer_min exec_y_when_autoconstructing (integer_dup_times boolean_xor exec_yankdup integer_lte in2 tag_exec_144 () in1 integer_empty integer_min integer_add exec_stackdepth exec_y_when_autoconstructing (boolean_swap) integer_yank print_integer) in1 boolean_frominteger) exec_dup (integer_dec) boolean_dup_items integer_yankdup) (boolean_dup_times exec_y_when_autoconstructing () integer_shove exec_flush tag_integer_409 integer_min) integer_gte integer_fromboolean exec_do*times () exec_do*range (print_boolean exec_stackdepth print_newline boolean_eq integer_div) integer_swap boolean_dup exec_do*range (boolean_empty boolean_swap tagged_241) exec_do*range () boolean_flush integer_mult integer_dup_items integer_inc integer_lt exec_if (integer_lt integer_fromboolean in2 boolean_dup exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_pop exec_rot (exec_flush boolean_dup_items integer_fromboolean exec_k (print_exec () boolean_empty exec_if (exec_if (exec_s_when_autoconstructing (exec_yank boolean_frominteger) () ()) ()) ()) ()) () ()) ()) () ()) ())
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 115
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_409} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_241} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_s_when_autoconstructing (exec_yankdup boolean_invert_first_then_and) (exec_dup_items exec_k_when_autoconstructing (integer_inc) (integer_fromboolean) exec_when (integer_min exec_y_when_autoconstructing (integer_dup_times boolean_xor exec_yankdup integer_lte in2 tag_exec_144 () in1 integer_empty integer_min integer_add exec_stackdepth exec_y_when_autoconstructing (boolean_swap) integer_yank print_integer) in1 boolean_frominteger) exec_dup (integer_dec) boolean_dup_items integer_yankdup) (boolean_dup_times exec_y_when_autoconstructing () integer_shove exec_flush tag_integer_409 integer_min) integer_gte integer_fromboolean exec_do*times () exec_do*range (print_boolean exec_stackdepth print_newline boolean_eq integer_div) integer_swap boolean_dup exec_do*range (boolean_empty boolean_swap tagged_241) exec_do*range () boolean_flush integer_mult integer_dup_items integer_inc integer_lt exec_if (integer_lt integer_fromboolean in2 boolean_dup exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_pop exec_rot (exec_flush boolean_dup_items integer_fromboolean exec_k (print_exec () boolean_empty exec_if (exec_if (exec_s_when_autoconstructing (exec_yank boolean_frominteger) () ()) ()) ()) ()) () ()) ()) () ()) ())
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 115
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 75 219 105 219 263 539 615 216 113)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (224 75 219 105 219 263 539 615 216 113)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_123} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction 61} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_241} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Best program: (exec_s_when_autoconstructing (boolean_invert_first_then_and) (exec_dup_items boolean_empty) (integer_inc) integer_fromboolean exec_when (integer_min boolean_not exec_y_when_autoconstructing (integer_dup_times boolean_xor exec_yankdup in2 integer_stackdepth integer_lte in2 tag_exec_144 () in1 integer_empty tagged_123 integer_min integer_add exec_stackdepth exec_y_when_autoconstructing (integer_yank print_integer) in1 boolean_frominteger) exec_dup (integer_dec) boolean_dup_items integer_yankdup) integer_flush boolean_dup_times exec_y_when_autoconstructing () integer_shove exec_k_when_autoconstructing (exec_flush integer_min) (exec_do*times (integer_fromboolean exec_do*range (print_boolean exec_stackdepth boolean_eq 61 integer_div)) boolean_dup exec_do*range (boolean_empty boolean_swap tagged_241) exec_y_when_autoconstructing ()) boolean_flush integer_mult integer_rot integer_dup_items integer_inc integer_lt exec_if (integer_lt boolean_dup exec_k_when_autoconstructing (boolean_invert_second_then_and exec_rot (exec_flush boolean_dup_items exec_do*times ()) (integer_fromboolean exec_k (print_exec () boolean_empty exec_if (exec_s_when_autoconstructing (exec_yank boolean_frominteger) () ()) ()) ()) ()) ()) ())
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 77
Size: 109
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.412
Median total errors in population: 7
Error averages by case: (0.776 0.925 0.781 0.895 0.781 0.737 0.461 0.385 0.784 0.887)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.585
Average program size in population (points): 68.045
Average percent parens in population: 0.245
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 991370
--- Timings ---
Current time: 1559594135219 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.5%
Reproduction:         1.9 seconds, 42.9%
Fitness Testing:      2.0 seconds, 45.7%
Report:               0.4 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 437
Test mean error for best: 0.43700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 38                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 77                 
Correct output: 6                   | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 83                 
Correct output: 11                  | Program output: 37                 
Correct output: 18                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 75                 
Correct output: -77                 | Program output: -46                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: 7                  
Correct output: -59                 | Program output: 4                  
Correct output: -57                 | Program output: -35                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 60                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -23                
Correct output: -93                 | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -11                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: 55                 
Correct output: -81                 | Program output: -75                
Correct output: -59                 | Program output: -41                
Correct output: -98                 | Program output: -50                
Correct output: -24                 | Program output: 22                 
Correct output: -96                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -22                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -1                 
Correct output: 9                   | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -75                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_123} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_409} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_241} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_s_when_autoconstructing (exec_yankdup boolean_invert_first_then_and) (exec_dup_items integer_inc) (integer_fromboolean) exec_when (integer_min boolean_not integer_dup_times integer_stackdepth boolean_xor exec_yankdup in2 integer_stackdepth integer_lte boolean_dup_items in2 tag_exec_144 () in1 integer_empty exec_k (tagged_123 integer_min exec_y_when_autoconstructing (boolean_swap) exec_y (integer_yank print_integer) in1 integer_sub boolean_frominteger) (exec_dup (integer_dec) boolean_dup_items integer_yankdup) boolean_dup_times exec_y_when_autoconstructing () integer_shove exec_flush tag_integer_409 integer_min) exec_y (exec_do*times (integer_gte integer_fromboolean print_exec (exec_do*times () exec_do*range (print_boolean exec_stackdepth print_newline boolean_eq boolean_dup exec_do*range (integer_lt boolean_empty integer_inc boolean_swap tagged_241) integer_mult)) integer_dup_items integer_inc) exec_while () integer_lt exec_k (exec_if (integer_lt boolean_dup exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and exec_rot (exec_flush boolean_dup_items integer_fromboolean exec_k (print_exec () boolean_empty exec_if (integer_gt exec_s_when_autoconstructing (boolean_not) (exec_yank boolean_frominteger) ()) ()) ()) () ()) ()) () ()) ()) ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 124
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_123} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_409} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_241} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_s_when_autoconstructing (exec_yankdup boolean_invert_first_then_and) (exec_dup_items integer_inc) (integer_fromboolean) exec_when (integer_min boolean_not integer_dup_times integer_stackdepth boolean_xor exec_yankdup in2 integer_stackdepth integer_lte boolean_dup_items in2 tag_exec_144 () in1 integer_empty exec_k (tagged_123 integer_min exec_y_when_autoconstructing (boolean_swap) exec_y (integer_yank print_integer) in1 integer_sub boolean_frominteger) (exec_dup (integer_dec) boolean_dup_items integer_yankdup) boolean_dup_times exec_y_when_autoconstructing () integer_shove exec_flush tag_integer_409 integer_min) exec_y (exec_do*times (integer_gte integer_fromboolean print_exec (exec_do*times () exec_do*range (print_boolean exec_stackdepth print_newline boolean_eq boolean_dup exec_do*range (integer_lt boolean_empty integer_inc boolean_swap tagged_241) integer_mult)) integer_dup_items integer_inc) exec_while () integer_lt exec_k (exec_if (integer_lt boolean_dup exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and exec_rot (exec_flush boolean_dup_items integer_fromboolean exec_k (print_exec () boolean_empty exec_if (integer_gt exec_s_when_autoconstructing (boolean_not) (exec_yank boolean_frominteger) ()) ()) ()) () ()) ()) () ()) ()) ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 124
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 637 156 158 278 359 533 200 577 353)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (99 637 156 158 278 359 533 200 577 353)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction tag_integer_213} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction -38} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup})
Best program: (in2 in3 boolean_swap integer_min exec_while (tag_integer_213) print_integer integer_lte print_boolean boolean_invert_second_then_and exec_yankdup exec_stackdepth exec_y_when_autoconstructing (print_boolean boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_gte -38 integer_swap integer_gt integer_dup) ()))
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.65
Median total errors in population: 6
Error averages by case: (0.901 0.363 0.844 0.842 0.722 0.641 0.467 0.8 0.423 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.499
Average program size in population (points): 72.146
Average percent parens in population: 0.249
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1531777
--- Timings ---
Current time: 1559594137210 milliseconds
Total Time:           6.6 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         3.1 seconds, 46.7%
Fitness Testing:      2.6 seconds, 39.2%
Report:               0.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 38                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 23                 
Correct output: 50                  | Program output: 74                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 68                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 77                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: 71                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 54                 
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 83                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 26                 
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 36                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -75                
Correct output: -59                 | Program output: -41                
Correct output: -98                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -28                
Correct output: -100                | Program output: -9                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 32                 
Correct output: -83                 | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (in2 in3 boolean_swap in1 integer_min print_integer exec_while (print_integer integer_lte print_boolean) boolean_invert_second_then_and exec_yankdup integer_rot exec_stackdepth exec_y_when_autoconstructing (print_boolean boolean_not exec_s_when_autoconstructing () (integer_pop integer_swap boolean_frominteger boolean_swap boolean_dup integer_mod integer_swap boolean_yankdup integer_dup boolean_invert_second_then_and) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (in2 in3 boolean_swap in1 integer_min print_integer exec_while (print_integer integer_lte print_boolean) boolean_invert_second_then_and exec_yankdup integer_rot exec_stackdepth exec_y_when_autoconstructing (print_boolean boolean_not exec_s_when_autoconstructing () (integer_pop integer_swap boolean_frominteger boolean_swap boolean_dup integer_mod integer_swap boolean_yankdup integer_dup boolean_invert_second_then_and) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 330 333 659 281 338 296 88 599 599)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (275 330 333 659 281 338 296 88 599 599)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_boolean_376} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (in2 in3 boolean_swap in1 integer_min print_integer in1 exec_while (print_integer integer_lte print_boolean) boolean_invert_second_then_and exec_yankdup exec_y_when_autoconstructing (print_boolean boolean_not tag_boolean_376) exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 integer_swap boolean_yankdup boolean_invert_second_then_and) ())
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 33
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.202
Median total errors in population: 6
Error averages by case: (0.725 0.67 0.667 0.341 0.719 0.662 0.704 0.912 0.401 0.401)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.63
Average program size in population (points): 59.397
Average percent parens in population: 0.238
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1973497
--- Timings ---
Current time: 1559594139004 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.2 seconds, 49.8%
Fitness Testing:      3.0 seconds, 35.8%
Report:               1.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10                 
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 82                 
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: 5                  
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: -15                
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -48                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 20                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 69                 
Correct output: -88                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -25                
Correct output: -59                 | Program output: 37                 
Correct output: -98                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 42                 
Correct output: -64                 | Program output: 49                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: 72                 
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_boolean_387} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (in2 in3 boolean_swap print_boolean boolean_and integer_min print_integer boolean_pop exec_while (print_integer integer_lte print_boolean) boolean_not print_integer exec_yankdup exec_empty exec_y_when_autoconstructing (exec_noop tag_boolean_387 print_boolean integer_dup_times boolean_not exec_s_when_autoconstructing () (integer_pop boolean_swap exec_do*times (integer_gte integer_mod -38 boolean_yankdup integer_dup boolean_invert_second_then_and)) ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_boolean_387} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (in2 in3 boolean_swap print_boolean boolean_and integer_min print_integer boolean_pop exec_while (print_integer integer_lte print_boolean) boolean_not print_integer exec_yankdup exec_empty exec_y_when_autoconstructing (exec_noop tag_boolean_387 print_boolean integer_dup_times boolean_not exec_s_when_autoconstructing () (integer_pop boolean_swap exec_do*times (integer_gte integer_mod -38 boolean_yankdup integer_dup boolean_invert_second_then_and)) ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 446 451 89 616 231 661 451 91 459)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (229 446 451 89 616 231 661 451 91 459)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_409} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger})
Best program: (exec_s_when_autoconstructing (exec_dup_items exec_k_when_autoconstructing (integer_inc) (exec_eq integer_fromboolean) integer_min boolean_xor exec_yankdup in2 tag_exec_144 () in1 integer_empty integer_min integer_add exec_stackdepth exec_y_when_autoconstructing (boolean_swap) integer_yank print_integer) (exec_k_when_autoconstructing (in1 boolean_frominteger) (exec_dup (boolean_yank) integer_dec) boolean_dup_items boolean_dup_times integer_shove exec_flush tag_integer_409 integer_min) (integer_gte integer_fromboolean exec_do*count (exec_do*range (print_boolean print_newline boolean_eq boolean_invert_first_then_and integer_swap exec_do*range (boolean_swap exec_do*while (print_exec (exec_do*range () boolean_flush integer_mult)) integer_dup_items exec_do*count (integer_inc) integer_lt exec_if (integer_lt in2 boolean_dup exec_rot (exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and exec_when () integer_pop in1 exec_rot (exec_flush boolean_dup_items integer_fromboolean print_exec () exec_if (exec_if (exec_dup_times () exec_s_when_autoconstructing (boolean_frominteger) () ()) ()) ()) () ()) ()) () ()) () ()) ())))))
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 73
Size: 114
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.276
Median total errors in population: 4
Error averages by case: (0.771 0.554 0.549 0.911 0.384 0.769 0.339 0.549 0.909 0.541)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.707
Average program size in population (points): 44.992
Average percent parens in population: 0.205
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2327006
--- Timings ---
Current time: 1559594140719 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.3 seconds, 52.4%
Fitness Testing:      3.3 seconds, 33.0%
Report:               1.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 11                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: 81                 
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 10                 
Correct output: 17                  | Program output: 70                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 82                 
Correct output: 32                  | Program output: 71                 
Correct output: 40                  | Program output: 58                 
Correct output: 42                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -44                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -99                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: 5                  
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -84                
Correct output: -76                 | Program output: -15                
Correct output: -48                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -48                
Correct output: -58                 | Program output: -54                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 20                 
Correct output: -27                 | Program output: 33                 
Correct output: -66                 | Program output: -38                
Correct output: -43                 | Program output: 69                 
Correct output: -88                 | Program output: -22                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -25                
Correct output: -59                 | Program output: 37                 
Correct output: -98                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 42                 
Correct output: -64                 | Program output: 49                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -67                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 25                 
Correct output: 15                  | Program output: 24                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -13                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: 72                 
Correct output: -76                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_123} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_965} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction 61} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_241} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_boolean_190} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_dup_items exec_s_when_autoconstructing (boolean_invert_first_then_and) (integer_stackdepth) (exec_dup_items integer_inc) boolean_dup_items integer_fromboolean exec_when (integer_min integer_lt boolean_not integer_dup_times exec_yankdup in2 integer_stackdepth integer_lte in2 tag_exec_144 () in1 exec_when () integer_empty tagged_123 integer_min integer_add exec_stackdepth integer_dup_times integer_yank print_integer) tagged_965 in1 boolean_frominteger exec_dup (integer_dec) boolean_dup_items in2 integer_yankdup exec_yank boolean_dup_times integer_eq integer_shove exec_k_when_autoconstructing (exec_if (exec_flush exec_y (integer_rot) integer_min) (integer_dup integer_gte exec_yankdup integer_fromboolean print_exec (exec_do*times () print_boolean integer_add exec_stackdepth print_newline boolean_eq boolean_yank 61 integer_div)) boolean_dup exec_y_when_autoconstructing (exec_do*range (boolean_empty boolean_swap boolean_invert_second_then_and boolean_frominteger tagged_241) boolean_flush integer_mult)) (exec_do*times () integer_dup_items integer_lt exec_if (integer_fromboolean boolean_dup integer_dup_items exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_gte exec_flush tag_boolean_190 boolean_dup boolean_empty exec_s_when_autoconstructing (exec_yank boolean_frominteger) () ()) ()) () ()) ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 117
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_144} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_123} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_965} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction 61} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_241} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_boolean_190} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_dup_items exec_s_when_autoconstructing (boolean_invert_first_then_and) (integer_stackdepth) (exec_dup_items integer_inc) boolean_dup_items integer_fromboolean exec_when (integer_min integer_lt boolean_not integer_dup_times exec_yankdup in2 integer_stackdepth integer_lte in2 tag_exec_144 () in1 exec_when () integer_empty tagged_123 integer_min integer_add exec_stackdepth integer_dup_times integer_yank print_integer) tagged_965 in1 boolean_frominteger exec_dup (integer_dec) boolean_dup_items in2 integer_yankdup exec_yank boolean_dup_times integer_eq integer_shove exec_k_when_autoconstructing (exec_if (exec_flush exec_y (integer_rot) integer_min) (integer_dup integer_gte exec_yankdup integer_fromboolean print_exec (exec_do*times () print_boolean integer_add exec_stackdepth print_newline boolean_eq boolean_yank 61 integer_div)) boolean_dup exec_y_when_autoconstructing (exec_do*range (boolean_empty boolean_swap boolean_invert_second_then_and boolean_frominteger tagged_241) boolean_flush integer_mult)) (exec_do*times () integer_dup_items integer_lt exec_if (integer_fromboolean boolean_dup integer_dup_items exec_rot (exec_k_when_autoconstructing (boolean_invert_second_then_and integer_gte exec_flush tag_boolean_190 boolean_dup boolean_empty exec_s_when_autoconstructing (exec_yank boolean_frominteger) () ()) ()) () ()) ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 117
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 321 293 268 319 307 303 320 292 321)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (307 321 293 268 319 307 303 320 292 321)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (in2 boolean_swap in1 integer_min print_integer exec_do*while (in1 exec_while (print_integer integer_lte integer_stackdepth) print_boolean) boolean_invert_second_then_and boolean_invert_second_then_and exec_yankdup exec_stackdepth exec_y_when_autoconstructing (print_boolean boolean_not integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 integer_swap integer_yank boolean_yankdup integer_dup exec_yankdup integer_swap boolean_invert_second_then_and))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.949
Median total errors in population: 7
Error averages by case: (0.693 0.679 0.707 0.732 0.681 0.693 0.697 0.68 0.708 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.303
Average program size in population (points): 45.708
Average percent parens in population: 0.206
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2699419
--- Timings ---
Current time: 1559594142412 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 54.1%
Fitness Testing:      3.6 seconds, 31.0%
Report:               1.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 62                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 65                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 28                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 26                 
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -6                 
Correct output: -78                 | Program output: -40                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 23                 
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -12                
Correct output: -83                 | Program output: -78                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_max})
Lexicase best program: (in2 in3 in4 integer_min boolean_swap in1 integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 exec_yank integer_fromboolean) (boolean_yankdup integer_dup boolean_shove) integer_max))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 38
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_max})
Zero cases best program: (in2 in3 in4 integer_min boolean_swap in1 integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 exec_yank integer_fromboolean) (boolean_yankdup integer_dup boolean_shove) integer_max))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 447 590 325 159 435 169 169 182 156)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (170 447 590 325 159 435 169 169 182 156)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_max})
Best program: (in2 in3 in4 integer_min boolean_swap in1 integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 exec_yank integer_fromboolean) (boolean_yankdup integer_dup boolean_shove) integer_max))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 38
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 7.198
Median total errors in population: 7
Error averages by case: (0.83 0.553 0.41 0.675 0.841 0.565 0.831 0.831 0.818 0.844)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.255
Average program size in population (points): 56.179
Average percent parens in population: 0.220
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3200768
--- Timings ---
Current time: 1559594144250 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.5 seconds, 55.1%
Fitness Testing:      4.1 seconds, 29.9%
Report:               1.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_max})
Lexicase best program: (in2 in3 in4 integer_min boolean_swap integer_min in1 integer_min print_integer in1 exec_yankdup exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 exec_yank integer_fromboolean) boolean_yankdup integer_dup boolean_shove integer_max)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 36
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_max})
Zero cases best program: (in2 in3 in4 integer_min boolean_swap integer_min in1 integer_min print_integer in1 exec_yankdup exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not integer_pop boolean_frominteger boolean_swap integer_gte integer_mod -38 exec_yank integer_fromboolean) boolean_yankdup integer_dup boolean_shove integer_max)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 36
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (720 517 264 264 272 476 425 262 528 432)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (720 517 264 264 272 476 425 262 528 432)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction -38} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction in1})
Best program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.84
Median total errors in population: 4
Error averages by case: (0.28 0.483 0.736 0.736 0.728 0.524 0.575 0.738 0.472 0.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.209
Average program size in population (points): 38.041
Average percent parens in population: 0.178
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.011
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3628168
--- Timings ---
Current time: 1559594146463 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 56.0%
Fitness Testing:      4.5 seconds, 28.9%
Report:               2.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 45


Auto-simplifying with starting size: 45
step: 0
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 500
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1000
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1500
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2000
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2500
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3000
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3500
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4000
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4500
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 5000
program: (in2 in3 in4 integer_min boolean_swap in1 integer_min integer_min print_integer in1 exec_while (print_integer print_boolean) integer_yank boolean_invert_second_then_and boolean_stackdepth exec_yankdup exec_stackdepth exec_y_when_autoconstructing (boolean_not exec_s_when_autoconstructing () (integer_pop boolean_frominteger boolean_swap integer_mod -38 exec_do*range (exec_yank exec_when () integer_fromboolean) boolean_yankdup integer_dup boolean_shove) (exec_do*range (integer_max in1))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: 88                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: -58                 | Program output: -58                
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -57                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -1                  | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -73                 | Program output: -73                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
;;******************************
