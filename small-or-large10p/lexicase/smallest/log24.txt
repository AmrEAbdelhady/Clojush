Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-28 -28 -28 -70] -70] [[-68 -68 -68 48] -68] [[68 71 71 71] 68] [[-32 -53 -32 -32] -53] [[60 60 80 60] 60] [[-96 -96 35 -96] -96] [[-49 -74 -49 -49] -74] [[100 100 100 39] 39] [[60 60 -84 60] -84] [[-60 74 74 74] -60] [(-62 -62 -62 -62) -62] [(-22 -22 -22 -22) -22] [(85 85 85 85) 85] [(14 14 14 14) 14] [(32 32 32 32) 32] [(81 57 7 80) 7] [(33 44 1 65) 1] [(75 15 100 23) 15] [(17 42 91 84) 17] [(39 94 100 38) 38] [(53 12 9 25) 9] [(13 89 38 25) 13] [(62 91 29 79) 29] [(78 86 100 60) 60] [(11 42 20 79) 11] [(87 20 33 99) 20] [(4 72 18 55) 4] [(37 59 93 63) 37] [(24 76 40 76) 24] [(94 59 27 39) 27] [(60 14 67 46) 14] [(52 64 45 85) 45] [(88 49 46 36) 36] [(44 13 81 97) 13] [(4 10 9 49) 4] [(87 0 52 -87) -87] [(-47 89 -67 -78) -78] [(20 6 30 -79) -79] [(65 71 35 -4) -4] [(-3 -13 -69 -39) -69] [(-45 13 87 70) -45] [(22 -25 33 -41) -41] [(39 -61 -73 -23) -73] [(-29 22 -11 89) -29] [(0 8 -38 -14) -38] [(-76 -56 95 81) -76] [(-46 -14 -68 30) -68] [(-85 -67 -98 5) -98] [(46 -82 85 -73) -82] [(1 25 -75 97) -75] [(-27 -29 88 -14) -29] [(57 -9 3 20) -9] [(-13 11 59 -28) -28] [(83 23 -28 46) -28] [(-95 -64 -74 -69) -95] [(70 69 68 72) 68] [(-71 -46 -84 -69) -84] [(66 75 34 29) 29] [(73 24 -45 21) -45] [(64 -36 99 32) -36] [(-75 79 -9 18) -75] [(-100 -100 -84 74) -100] [(-45 -37 65 -6) -45] [(83 -42 -71 14) -71] [(-19 1 -64 80) -64] [(57 22 75 69) 22] [(-92 6 100 -16) -92] [(17 61 -100 -52) -100] [(-6 69 -60 -65) -65] [(88 78 -25 -24) -25] [(1 22 74 -32) -32] [(-38 87 -80 -75) -80] [(24 -29 54 -16) -29] [(-96 -80 -48 -57) -96] [(100 -52 42 -81) -81] [(18 -61 21 93) -61] [(28 39 -79 78) -79] [(7 44 46 -13) -13] [(7 -1 -58 -14) -58] [(73 -21 91 -69) -69] [(74 80 -26 27) -26] [(-84 -1 -73 -92) -92] [(-80 -8 33 5) -80] [(32 63 -11 27) -11] [(-47 15 23 -86) -86] [(73 28 -43 78) -43] [(37 -74 -22 12) -74] [(-65 -81 -53 80) -81] [(35 -33 43 -87) -87] [(22 44 -9 21) -9] [(88 -10 17 61) -10] [(36 76 -96 50) -96] [(-18 -75 28 -97) -97] [(79 -32 58 89) -32] [(-75 -83 7 89) -83])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-28 -28 -28 -70] -70]
Train Case:   6 | Input/Output: [[-68 -68 -68 48] -68]
Train Case:   7 | Input/Output: [[68 71 71 71] 68]
Train Case:   8 | Input/Output: [[-32 -53 -32 -32] -53]
Train Case:   9 | Input/Output: [[60 60 80 60] 60]
Train Case:  10 | Input/Output: [[-96 -96 35 -96] -96]
Train Case:  11 | Input/Output: [[-49 -74 -49 -49] -74]
Train Case:  12 | Input/Output: [[100 100 100 39] 39]
Train Case:  13 | Input/Output: [[60 60 -84 60] -84]
Train Case:  14 | Input/Output: [[-60 74 74 74] -60]
Train Case:  15 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  16 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:  17 | Input/Output: [(85 85 85 85) 85]
Train Case:  18 | Input/Output: [(14 14 14 14) 14]
Train Case:  19 | Input/Output: [(32 32 32 32) 32]
Train Case:  20 | Input/Output: [(81 57 7 80) 7]
Train Case:  21 | Input/Output: [(33 44 1 65) 1]
Train Case:  22 | Input/Output: [(75 15 100 23) 15]
Train Case:  23 | Input/Output: [(17 42 91 84) 17]
Train Case:  24 | Input/Output: [(39 94 100 38) 38]
Train Case:  25 | Input/Output: [(53 12 9 25) 9]
Train Case:  26 | Input/Output: [(13 89 38 25) 13]
Train Case:  27 | Input/Output: [(62 91 29 79) 29]
Train Case:  28 | Input/Output: [(78 86 100 60) 60]
Train Case:  29 | Input/Output: [(11 42 20 79) 11]
Train Case:  30 | Input/Output: [(87 20 33 99) 20]
Train Case:  31 | Input/Output: [(4 72 18 55) 4]
Train Case:  32 | Input/Output: [(37 59 93 63) 37]
Train Case:  33 | Input/Output: [(24 76 40 76) 24]
Train Case:  34 | Input/Output: [(94 59 27 39) 27]
Train Case:  35 | Input/Output: [(60 14 67 46) 14]
Train Case:  36 | Input/Output: [(52 64 45 85) 45]
Train Case:  37 | Input/Output: [(88 49 46 36) 36]
Train Case:  38 | Input/Output: [(44 13 81 97) 13]
Train Case:  39 | Input/Output: [(4 10 9 49) 4]
Train Case:  40 | Input/Output: [(87 0 52 -87) -87]
Train Case:  41 | Input/Output: [(-47 89 -67 -78) -78]
Train Case:  42 | Input/Output: [(20 6 30 -79) -79]
Train Case:  43 | Input/Output: [(65 71 35 -4) -4]
Train Case:  44 | Input/Output: [(-3 -13 -69 -39) -69]
Train Case:  45 | Input/Output: [(-45 13 87 70) -45]
Train Case:  46 | Input/Output: [(22 -25 33 -41) -41]
Train Case:  47 | Input/Output: [(39 -61 -73 -23) -73]
Train Case:  48 | Input/Output: [(-29 22 -11 89) -29]
Train Case:  49 | Input/Output: [(0 8 -38 -14) -38]
Train Case:  50 | Input/Output: [(-76 -56 95 81) -76]
Train Case:  51 | Input/Output: [(-46 -14 -68 30) -68]
Train Case:  52 | Input/Output: [(-85 -67 -98 5) -98]
Train Case:  53 | Input/Output: [(46 -82 85 -73) -82]
Train Case:  54 | Input/Output: [(1 25 -75 97) -75]
Train Case:  55 | Input/Output: [(-27 -29 88 -14) -29]
Train Case:  56 | Input/Output: [(57 -9 3 20) -9]
Train Case:  57 | Input/Output: [(-13 11 59 -28) -28]
Train Case:  58 | Input/Output: [(83 23 -28 46) -28]
Train Case:  59 | Input/Output: [(-95 -64 -74 -69) -95]
Train Case:  60 | Input/Output: [(70 69 68 72) 68]
Train Case:  61 | Input/Output: [(-71 -46 -84 -69) -84]
Train Case:  62 | Input/Output: [(66 75 34 29) 29]
Train Case:  63 | Input/Output: [(73 24 -45 21) -45]
Train Case:  64 | Input/Output: [(64 -36 99 32) -36]
Train Case:  65 | Input/Output: [(-75 79 -9 18) -75]
Train Case:  66 | Input/Output: [(-100 -100 -84 74) -100]
Train Case:  67 | Input/Output: [(-45 -37 65 -6) -45]
Train Case:  68 | Input/Output: [(83 -42 -71 14) -71]
Train Case:  69 | Input/Output: [(-19 1 -64 80) -64]
Train Case:  70 | Input/Output: [(57 22 75 69) 22]
Train Case:  71 | Input/Output: [(-92 6 100 -16) -92]
Train Case:  72 | Input/Output: [(17 61 -100 -52) -100]
Train Case:  73 | Input/Output: [(-6 69 -60 -65) -65]
Train Case:  74 | Input/Output: [(88 78 -25 -24) -25]
Train Case:  75 | Input/Output: [(1 22 74 -32) -32]
Train Case:  76 | Input/Output: [(-38 87 -80 -75) -80]
Train Case:  77 | Input/Output: [(24 -29 54 -16) -29]
Train Case:  78 | Input/Output: [(-96 -80 -48 -57) -96]
Train Case:  79 | Input/Output: [(100 -52 42 -81) -81]
Train Case:  80 | Input/Output: [(18 -61 21 93) -61]
Train Case:  81 | Input/Output: [(28 39 -79 78) -79]
Train Case:  82 | Input/Output: [(7 44 46 -13) -13]
Train Case:  83 | Input/Output: [(7 -1 -58 -14) -58]
Train Case:  84 | Input/Output: [(73 -21 91 -69) -69]
Train Case:  85 | Input/Output: [(74 80 -26 27) -26]
Train Case:  86 | Input/Output: [(-84 -1 -73 -92) -92]
Train Case:  87 | Input/Output: [(-80 -8 33 5) -80]
Train Case:  88 | Input/Output: [(32 63 -11 27) -11]
Train Case:  89 | Input/Output: [(-47 15 23 -86) -86]
Train Case:  90 | Input/Output: [(73 28 -43 78) -43]
Train Case:  91 | Input/Output: [(37 -74 -22 12) -74]
Train Case:  92 | Input/Output: [(-65 -81 -53 80) -81]
Train Case:  93 | Input/Output: [(35 -33 43 -87) -87]
Train Case:  94 | Input/Output: [(22 44 -9 21) -9]
Train Case:  95 | Input/Output: [(88 -10 17 61) -10]
Train Case:  96 | Input/Output: [(36 76 -96 50) -96]
Train Case:  97 | Input/Output: [(-18 -75 28 -97) -97]
Train Case:  98 | Input/Output: [(79 -32 58 89) -32]
Train Case:  99 | Input/Output: [(-75 -83 7 89) -83]
Test Case:   0 | Input/Output: [[-6 -6 -6 80] -6]
Test Case:   1 | Input/Output: [[45 72 45 45] 45]
Test Case:   2 | Input/Output: [[-86 14 14 14] -86]
Test Case:   3 | Input/Output: [[48 -21 48 48] -21]
Test Case:   4 | Input/Output: [[-82 -83 -83 -83] -83]
Test Case:   5 | Input/Output: [[-98 -45 -45 -45] -98]
Test Case:   6 | Input/Output: [[-46 -46 -46 14] -46]
Test Case:   7 | Input/Output: [[37 37 37 0] 0]
Test Case:   8 | Input/Output: [[97 97 97 61] 61]
Test Case:   9 | Input/Output: [[-29 -29 -29 -71] -71]
Test Case:  10 | Input/Output: [[-100 -74 -74 -74] -100]
Test Case:  11 | Input/Output: [[-75 -75 90 -75] -75]
Test Case:  12 | Input/Output: [[57 57 57 26] 26]
Test Case:  13 | Input/Output: [[66 66 -41 66] -41]
Test Case:  14 | Input/Output: [[-94 -94 -94 80] -94]
Test Case:  15 | Input/Output: [[-65 -77 -65 -65] -77]
Test Case:  16 | Input/Output: [[-86 14 -86 -86] -86]
Test Case:  17 | Input/Output: [[-66 76 -66 -66] -66]
Test Case:  18 | Input/Output: [[12 12 12 51] 12]
Test Case:  19 | Input/Output: [[-47 -42 -42 -42] -47]
Test Case:  20 | Input/Output: [[-99 -99 -99 22] -99]
Test Case:  21 | Input/Output: [[-87 58 -87 -87] -87]
Test Case:  22 | Input/Output: [[-29 -45 -45 -45] -45]
Test Case:  23 | Input/Output: [[95 95 95 -74] -74]
Test Case:  24 | Input/Output: [[79 79 79 -36] -36]
Test Case:  25 | Input/Output: [[-9 -48 -48 -48] -48]
Test Case:  26 | Input/Output: [[-10 -20 -10 -10] -20]
Test Case:  27 | Input/Output: [[-56 -56 31 -56] -56]
Test Case:  28 | Input/Output: [[-15 -15 88 -15] -15]
Test Case:  29 | Input/Output: [[-67 99 99 99] -67]
Test Case:  30 | Input/Output: [[53 53 53 54] 53]
Test Case:  31 | Input/Output: [[60 -76 -76 -76] -76]
Test Case:  32 | Input/Output: [[19 23 19 19] 19]
Test Case:  33 | Input/Output: [[67 -66 -66 -66] -66]
Test Case:  34 | Input/Output: [[77 -36 -36 -36] -36]
Test Case:  35 | Input/Output: [[50 50 50 51] 50]
Test Case:  36 | Input/Output: [[25 25 25 95] 25]
Test Case:  37 | Input/Output: [[57 57 57 57] 57]
Test Case:  38 | Input/Output: [[74 74 74 16] 16]
Test Case:  39 | Input/Output: [[51 51 51 -70] -70]
Test Case:  40 | Input/Output: [[82 82 -65 82] -65]
Test Case:  41 | Input/Output: [[71 71 71 67] 67]
Test Case:  42 | Input/Output: [[-99 -68 -99 -99] -99]
Test Case:  43 | Input/Output: [[-100 14 -100 -100] -100]
Test Case:  44 | Input/Output: [[51 -25 51 51] -25]
Test Case:  45 | Input/Output: [[-80 -33 -80 -80] -80]
Test Case:  46 | Input/Output: [[71 71 -76 71] -76]
Test Case:  47 | Input/Output: [[80 98 98 98] 80]
Test Case:  48 | Input/Output: [[-5 -5 -5 -15] -15]
Test Case:  49 | Input/Output: [[-47 -47 -47 100] -47]
Test Case:  50 | Input/Output: [[99 76 99 99] 76]
Test Case:  51 | Input/Output: [[51 51 49 51] 49]
Test Case:  52 | Input/Output: [[0 0 -86 0] -86]
Test Case:  53 | Input/Output: [[-48 58 58 58] -48]
Test Case:  54 | Input/Output: [[1 1 1 -1] -1]
Test Case:  55 | Input/Output: [[-10 -10 22 -10] -10]
Test Case:  56 | Input/Output: [[-8 -92 -92 -92] -92]
Test Case:  57 | Input/Output: [[85 -41 -41 -41] -41]
Test Case:  58 | Input/Output: [[2 -4 2 2] -4]
Test Case:  59 | Input/Output: [[83 2 83 83] 2]
Test Case:  60 | Input/Output: [[77 77 -65 77] -65]
Test Case:  61 | Input/Output: [[-24 -14 -14 -14] -24]
Test Case:  62 | Input/Output: [[89 89 89 82] 82]
Test Case:  63 | Input/Output: [[-11 44 -11 -11] -11]
Test Case:  64 | Input/Output: [[-62 -10 -10 -10] -62]
Test Case:  65 | Input/Output: [[61 61 81 61] 61]
Test Case:  66 | Input/Output: [[-37 15 15 15] -37]
Test Case:  67 | Input/Output: [[70 -50 70 70] -50]
Test Case:  68 | Input/Output: [[-82 95 -82 -82] -82]
Test Case:  69 | Input/Output: [[82 -14 82 82] -14]
Test Case:  70 | Input/Output: [[-38 -38 -38 40] -38]
Test Case:  71 | Input/Output: [[76 76 76 -95] -95]
Test Case:  72 | Input/Output: [[-23 -23 -23 15] -23]
Test Case:  73 | Input/Output: [[-68 9 9 9] -68]
Test Case:  74 | Input/Output: [[67 67 -89 67] -89]
Test Case:  75 | Input/Output: [[11 73 11 11] 11]
Test Case:  76 | Input/Output: [[70 70 70 15] 15]
Test Case:  77 | Input/Output: [[100 100 100 -32] -32]
Test Case:  78 | Input/Output: [[19 80 80 80] 19]
Test Case:  79 | Input/Output: [[57 -20 57 57] -20]
Test Case:  80 | Input/Output: [[-91 88 88 88] -91]
Test Case:  81 | Input/Output: [[-37 -37 -37 -2] -37]
Test Case:  82 | Input/Output: [[-53 -53 -49 -53] -53]
Test Case:  83 | Input/Output: [[9 9 9 -12] -12]
Test Case:  84 | Input/Output: [[62 62 62 -30] -30]
Test Case:  85 | Input/Output: [[45 17 17 17] 17]
Test Case:  86 | Input/Output: [[79 -15 -15 -15] -15]
Test Case:  87 | Input/Output: [[40 -17 -17 -17] -17]
Test Case:  88 | Input/Output: [[-86 -86 58 -86] -86]
Test Case:  89 | Input/Output: [[37 37 37 95] 37]
Test Case:  90 | Input/Output: [[56 46 56 56] 46]
Test Case:  91 | Input/Output: [[-36 -36 79 -36] -36]
Test Case:  92 | Input/Output: [[1 1 1 -82] -82]
Test Case:  93 | Input/Output: [[9 -42 9 9] -42]
Test Case:  94 | Input/Output: [[24 -54 24 24] -54]
Test Case:  95 | Input/Output: [[90 90 90 -24] -24]
Test Case:  96 | Input/Output: [[-67 -38 -38 -38] -67]
Test Case:  97 | Input/Output: [[96 96 51 96] 51]
Test Case:  98 | Input/Output: [[20 -45 20 20] -45]
Test Case:  99 | Input/Output: [[-90 45 45 45] -90]
Test Case: 100 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 101 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 102 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 103 | Input/Output: [(17 17 17 17) 17]
Test Case: 104 | Input/Output: [(14 14 14 14) 14]
Test Case: 105 | Input/Output: [(27 27 27 27) 27]
Test Case: 106 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 107 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 108 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 109 | Input/Output: [(50 50 50 50) 50]
Test Case: 110 | Input/Output: [(92 92 92 92) 92]
Test Case: 111 | Input/Output: [(100 100 100 100) 100]
Test Case: 112 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 113 | Input/Output: [(9 9 9 9) 9]
Test Case: 114 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 115 | Input/Output: [(7 7 7 7) 7]
Test Case: 116 | Input/Output: [(20 20 20 20) 20]
Test Case: 117 | Input/Output: [(50 50 50 50) 50]
Test Case: 118 | Input/Output: [(59 59 59 59) 59]
Test Case: 119 | Input/Output: [(15 15 15 15) 15]
Test Case: 120 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 121 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 122 | Input/Output: [(42 42 42 42) 42]
Test Case: 123 | Input/Output: [(10 10 10 10) 10]
Test Case: 124 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 125 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 126 | Input/Output: [(1 1 1 1) 1]
Test Case: 127 | Input/Output: [(81 81 81 81) 81]
Test Case: 128 | Input/Output: [(3 3 3 3) 3]
Test Case: 129 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 130 | Input/Output: [(40 40 40 40) 40]
Test Case: 131 | Input/Output: [(77 77 77 77) 77]
Test Case: 132 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 133 | Input/Output: [(56 56 56 56) 56]
Test Case: 134 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 135 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 136 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 137 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 138 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 139 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 140 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 141 | Input/Output: [(80 80 80 80) 80]
Test Case: 142 | Input/Output: [(85 85 85 85) 85]
Test Case: 143 | Input/Output: [(47 47 47 47) 47]
Test Case: 144 | Input/Output: [(62 62 62 62) 62]
Test Case: 145 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 146 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 147 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 148 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 149 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 150 | Input/Output: [(52 52 52 52) 52]
Test Case: 151 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 152 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 153 | Input/Output: [(71 71 71 71) 71]
Test Case: 154 | Input/Output: [(33 33 33 33) 33]
Test Case: 155 | Input/Output: [(92 92 92 92) 92]
Test Case: 156 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 157 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 158 | Input/Output: [(72 72 72 72) 72]
Test Case: 159 | Input/Output: [(80 80 80 80) 80]
Test Case: 160 | Input/Output: [(98 98 98 98) 98]
Test Case: 161 | Input/Output: [(65 65 65 65) 65]
Test Case: 162 | Input/Output: [(28 28 28 28) 28]
Test Case: 163 | Input/Output: [(15 15 15 15) 15]
Test Case: 164 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 165 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 166 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 167 | Input/Output: [(66 66 66 66) 66]
Test Case: 168 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 169 | Input/Output: [(100 100 100 100) 100]
Test Case: 170 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 171 | Input/Output: [(7 7 7 7) 7]
Test Case: 172 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 173 | Input/Output: [(54 54 54 54) 54]
Test Case: 174 | Input/Output: [(38 38 38 38) 38]
Test Case: 175 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 176 | Input/Output: [(73 73 73 73) 73]
Test Case: 177 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 178 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 179 | Input/Output: [(95 95 95 95) 95]
Test Case: 180 | Input/Output: [(21 21 21 21) 21]
Test Case: 181 | Input/Output: [(84 84 84 84) 84]
Test Case: 182 | Input/Output: [(51 51 51 51) 51]
Test Case: 183 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 184 | Input/Output: [(29 29 29 29) 29]
Test Case: 185 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 186 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 187 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 188 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 189 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 190 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 191 | Input/Output: [(94 94 94 94) 94]
Test Case: 192 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 193 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 194 | Input/Output: [(52 52 52 52) 52]
Test Case: 195 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 196 | Input/Output: [(71 71 71 71) 71]
Test Case: 197 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 198 | Input/Output: [(58 58 58 58) 58]
Test Case: 199 | Input/Output: [(35 35 35 35) 35]
Test Case: 200 | Input/Output: [(33 18 44 76) 18]
Test Case: 201 | Input/Output: [(76 94 21 24) 21]
Test Case: 202 | Input/Output: [(37 6 20 20) 6]
Test Case: 203 | Input/Output: [(24 37 58 18) 18]
Test Case: 204 | Input/Output: [(66 4 44 62) 4]
Test Case: 205 | Input/Output: [(24 26 58 69) 24]
Test Case: 206 | Input/Output: [(31 42 39 47) 31]
Test Case: 207 | Input/Output: [(73 73 79 3) 3]
Test Case: 208 | Input/Output: [(24 57 10 45) 10]
Test Case: 209 | Input/Output: [(64 77 71 60) 60]
Test Case: 210 | Input/Output: [(26 13 26 98) 13]
Test Case: 211 | Input/Output: [(81 63 3 76) 3]
Test Case: 212 | Input/Output: [(29 19 81 69) 19]
Test Case: 213 | Input/Output: [(21 47 94 49) 21]
Test Case: 214 | Input/Output: [(63 1 94 23) 1]
Test Case: 215 | Input/Output: [(0 13 90 37) 0]
Test Case: 216 | Input/Output: [(62 18 45 61) 18]
Test Case: 217 | Input/Output: [(54 42 68 76) 42]
Test Case: 218 | Input/Output: [(66 21 46 46) 21]
Test Case: 219 | Input/Output: [(27 60 11 38) 11]
Test Case: 220 | Input/Output: [(99 82 21 33) 21]
Test Case: 221 | Input/Output: [(78 57 8 74) 8]
Test Case: 222 | Input/Output: [(17 96 8 88) 8]
Test Case: 223 | Input/Output: [(29 88 6 2) 2]
Test Case: 224 | Input/Output: [(65 19 10 29) 10]
Test Case: 225 | Input/Output: [(61 11 69 87) 11]
Test Case: 226 | Input/Output: [(60 12 17 54) 12]
Test Case: 227 | Input/Output: [(93 88 54 61) 54]
Test Case: 228 | Input/Output: [(56 74 17 97) 17]
Test Case: 229 | Input/Output: [(72 40 58 74) 40]
Test Case: 230 | Input/Output: [(13 84 87 68) 13]
Test Case: 231 | Input/Output: [(85 57 32 69) 32]
Test Case: 232 | Input/Output: [(45 86 36 51) 36]
Test Case: 233 | Input/Output: [(30 12 0 97) 0]
Test Case: 234 | Input/Output: [(54 88 17 82) 17]
Test Case: 235 | Input/Output: [(40 0 98 48) 0]
Test Case: 236 | Input/Output: [(20 77 70 85) 20]
Test Case: 237 | Input/Output: [(99 40 42 69) 40]
Test Case: 238 | Input/Output: [(30 73 2 79) 2]
Test Case: 239 | Input/Output: [(64 72 75 56) 56]
Test Case: 240 | Input/Output: [(6 35 46 16) 6]
Test Case: 241 | Input/Output: [(38 26 21 19) 19]
Test Case: 242 | Input/Output: [(80 71 29 100) 29]
Test Case: 243 | Input/Output: [(18 24 1 81) 1]
Test Case: 244 | Input/Output: [(84 15 66 89) 15]
Test Case: 245 | Input/Output: [(32 98 21 11) 11]
Test Case: 246 | Input/Output: [(11 9 21 65) 9]
Test Case: 247 | Input/Output: [(66 91 6 38) 6]
Test Case: 248 | Input/Output: [(70 65 18 83) 18]
Test Case: 249 | Input/Output: [(83 52 88 1) 1]
Test Case: 250 | Input/Output: [(93 72 4 70) 4]
Test Case: 251 | Input/Output: [(99 11 58 2) 2]
Test Case: 252 | Input/Output: [(2 0 91 50) 0]
Test Case: 253 | Input/Output: [(33 59 52 36) 33]
Test Case: 254 | Input/Output: [(23 99 41 72) 23]
Test Case: 255 | Input/Output: [(26 19 24 34) 19]
Test Case: 256 | Input/Output: [(67 99 56 51) 51]
Test Case: 257 | Input/Output: [(79 28 30 64) 28]
Test Case: 258 | Input/Output: [(15 38 49 65) 15]
Test Case: 259 | Input/Output: [(93 46 55 93) 46]
Test Case: 260 | Input/Output: [(92 93 85 85) 85]
Test Case: 261 | Input/Output: [(28 47 29 59) 28]
Test Case: 262 | Input/Output: [(56 80 28 76) 28]
Test Case: 263 | Input/Output: [(89 73 43 59) 43]
Test Case: 264 | Input/Output: [(71 98 50 74) 50]
Test Case: 265 | Input/Output: [(61 14 37 43) 14]
Test Case: 266 | Input/Output: [(46 7 6 78) 6]
Test Case: 267 | Input/Output: [(30 7 75 43) 7]
Test Case: 268 | Input/Output: [(40 39 27 46) 27]
Test Case: 269 | Input/Output: [(20 96 18 79) 18]
Test Case: 270 | Input/Output: [(68 39 93 25) 25]
Test Case: 271 | Input/Output: [(52 75 65 41) 41]
Test Case: 272 | Input/Output: [(8 97 52 93) 8]
Test Case: 273 | Input/Output: [(61 97 96 9) 9]
Test Case: 274 | Input/Output: [(87 82 61 95) 61]
Test Case: 275 | Input/Output: [(77 77 7 92) 7]
Test Case: 276 | Input/Output: [(61 32 10 19) 10]
Test Case: 277 | Input/Output: [(100 42 40 9) 9]
Test Case: 278 | Input/Output: [(50 14 68 88) 14]
Test Case: 279 | Input/Output: [(100 7 77 40) 7]
Test Case: 280 | Input/Output: [(100 36 0 31) 0]
Test Case: 281 | Input/Output: [(24 14 29 76) 14]
Test Case: 282 | Input/Output: [(77 21 2 94) 2]
Test Case: 283 | Input/Output: [(99 63 3 70) 3]
Test Case: 284 | Input/Output: [(75 83 82 12) 12]
Test Case: 285 | Input/Output: [(1 80 80 72) 1]
Test Case: 286 | Input/Output: [(74 29 9 43) 9]
Test Case: 287 | Input/Output: [(73 9 45 44) 9]
Test Case: 288 | Input/Output: [(42 74 36 55) 36]
Test Case: 289 | Input/Output: [(61 83 64 5) 5]
Test Case: 290 | Input/Output: [(1 54 36 14) 1]
Test Case: 291 | Input/Output: [(80 61 69 55) 55]
Test Case: 292 | Input/Output: [(29 10 31 64) 10]
Test Case: 293 | Input/Output: [(39 67 54 65) 39]
Test Case: 294 | Input/Output: [(67 88 11 42) 11]
Test Case: 295 | Input/Output: [(84 97 56 17) 17]
Test Case: 296 | Input/Output: [(72 38 58 92) 38]
Test Case: 297 | Input/Output: [(31 71 55 5) 5]
Test Case: 298 | Input/Output: [(68 0 36 74) 0]
Test Case: 299 | Input/Output: [(42 28 95 65) 28]
Test Case: 300 | Input/Output: [(88 9 51 82) 9]
Test Case: 301 | Input/Output: [(36 98 84 36) 36]
Test Case: 302 | Input/Output: [(92 18 10 55) 10]
Test Case: 303 | Input/Output: [(29 73 16 74) 16]
Test Case: 304 | Input/Output: [(51 72 44 70) 44]
Test Case: 305 | Input/Output: [(4 7 1 21) 1]
Test Case: 306 | Input/Output: [(3 87 83 87) 3]
Test Case: 307 | Input/Output: [(9 57 58 96) 9]
Test Case: 308 | Input/Output: [(28 56 72 46) 28]
Test Case: 309 | Input/Output: [(4 47 84 73) 4]
Test Case: 310 | Input/Output: [(27 87 62 26) 26]
Test Case: 311 | Input/Output: [(50 9 66 16) 9]
Test Case: 312 | Input/Output: [(7 98 9 82) 7]
Test Case: 313 | Input/Output: [(4 40 36 13) 4]
Test Case: 314 | Input/Output: [(4 77 76 86) 4]
Test Case: 315 | Input/Output: [(92 58 33 35) 33]
Test Case: 316 | Input/Output: [(78 16 13 68) 13]
Test Case: 317 | Input/Output: [(24 44 57 3) 3]
Test Case: 318 | Input/Output: [(11 0 49 68) 0]
Test Case: 319 | Input/Output: [(19 34 47 43) 19]
Test Case: 320 | Input/Output: [(49 84 24 19) 19]
Test Case: 321 | Input/Output: [(65 67 53 47) 47]
Test Case: 322 | Input/Output: [(32 37 35 97) 32]
Test Case: 323 | Input/Output: [(77 16 42 20) 16]
Test Case: 324 | Input/Output: [(38 33 3 43) 3]
Test Case: 325 | Input/Output: [(69 23 70 59) 23]
Test Case: 326 | Input/Output: [(78 38 78 97) 38]
Test Case: 327 | Input/Output: [(59 65 99 21) 21]
Test Case: 328 | Input/Output: [(32 38 93 90) 32]
Test Case: 329 | Input/Output: [(27 14 99 48) 14]
Test Case: 330 | Input/Output: [(23 48 68 81) 23]
Test Case: 331 | Input/Output: [(39 44 80 49) 39]
Test Case: 332 | Input/Output: [(19 22 54 82) 19]
Test Case: 333 | Input/Output: [(31 96 0 52) 0]
Test Case: 334 | Input/Output: [(42 4 68 90) 4]
Test Case: 335 | Input/Output: [(73 75 21 60) 21]
Test Case: 336 | Input/Output: [(55 77 99 48) 48]
Test Case: 337 | Input/Output: [(4 84 51 21) 4]
Test Case: 338 | Input/Output: [(51 24 51 70) 24]
Test Case: 339 | Input/Output: [(4 48 54 69) 4]
Test Case: 340 | Input/Output: [(63 37 92 4) 4]
Test Case: 341 | Input/Output: [(98 48 9 36) 9]
Test Case: 342 | Input/Output: [(32 77 41 97) 32]
Test Case: 343 | Input/Output: [(18 46 39 91) 18]
Test Case: 344 | Input/Output: [(99 53 78 45) 45]
Test Case: 345 | Input/Output: [(92 61 23 92) 23]
Test Case: 346 | Input/Output: [(10 17 95 41) 10]
Test Case: 347 | Input/Output: [(88 1 84 37) 1]
Test Case: 348 | Input/Output: [(76 69 28 28) 28]
Test Case: 349 | Input/Output: [(72 18 71 51) 18]
Test Case: 350 | Input/Output: [(45 8 60 73) 8]
Test Case: 351 | Input/Output: [(26 79 19 45) 19]
Test Case: 352 | Input/Output: [(60 59 68 67) 59]
Test Case: 353 | Input/Output: [(82 42 30 90) 30]
Test Case: 354 | Input/Output: [(96 82 96 18) 18]
Test Case: 355 | Input/Output: [(51 86 92 32) 32]
Test Case: 356 | Input/Output: [(96 95 2 93) 2]
Test Case: 357 | Input/Output: [(45 0 27 7) 0]
Test Case: 358 | Input/Output: [(46 20 82 3) 3]
Test Case: 359 | Input/Output: [(95 73 24 64) 24]
Test Case: 360 | Input/Output: [(34 93 94 77) 34]
Test Case: 361 | Input/Output: [(30 81 4 33) 4]
Test Case: 362 | Input/Output: [(21 12 71 93) 12]
Test Case: 363 | Input/Output: [(5 18 71 7) 5]
Test Case: 364 | Input/Output: [(52 80 93 50) 50]
Test Case: 365 | Input/Output: [(93 40 25 5) 5]
Test Case: 366 | Input/Output: [(23 30 22 4) 4]
Test Case: 367 | Input/Output: [(77 33 12 46) 12]
Test Case: 368 | Input/Output: [(4 55 97 76) 4]
Test Case: 369 | Input/Output: [(11 80 93 20) 11]
Test Case: 370 | Input/Output: [(16 22 67 77) 16]
Test Case: 371 | Input/Output: [(91 31 13 80) 13]
Test Case: 372 | Input/Output: [(1 64 63 14) 1]
Test Case: 373 | Input/Output: [(51 62 82 31) 31]
Test Case: 374 | Input/Output: [(75 100 87 34) 34]
Test Case: 375 | Input/Output: [(27 94 50 35) 27]
Test Case: 376 | Input/Output: [(24 36 16 13) 13]
Test Case: 377 | Input/Output: [(1 65 36 51) 1]
Test Case: 378 | Input/Output: [(38 38 14 46) 14]
Test Case: 379 | Input/Output: [(11 39 3 63) 3]
Test Case: 380 | Input/Output: [(7 60 66 35) 7]
Test Case: 381 | Input/Output: [(48 57 69 76) 48]
Test Case: 382 | Input/Output: [(21 7 48 75) 7]
Test Case: 383 | Input/Output: [(4 56 41 42) 4]
Test Case: 384 | Input/Output: [(44 41 6 89) 6]
Test Case: 385 | Input/Output: [(79 95 55 73) 55]
Test Case: 386 | Input/Output: [(97 33 31 65) 31]
Test Case: 387 | Input/Output: [(6 10 0 88) 0]
Test Case: 388 | Input/Output: [(89 42 73 22) 22]
Test Case: 389 | Input/Output: [(20 51 74 44) 20]
Test Case: 390 | Input/Output: [(27 86 37 1) 1]
Test Case: 391 | Input/Output: [(97 57 17 66) 17]
Test Case: 392 | Input/Output: [(12 45 65 91) 12]
Test Case: 393 | Input/Output: [(44 82 77 99) 44]
Test Case: 394 | Input/Output: [(55 69 57 78) 55]
Test Case: 395 | Input/Output: [(11 79 61 12) 11]
Test Case: 396 | Input/Output: [(10 28 90 30) 10]
Test Case: 397 | Input/Output: [(90 28 13 92) 13]
Test Case: 398 | Input/Output: [(17 16 59 3) 3]
Test Case: 399 | Input/Output: [(46 87 73 41) 41]
Test Case: 400 | Input/Output: [(-77 94 -50 -88) -88]
Test Case: 401 | Input/Output: [(31 -83 -19 71) -83]
Test Case: 402 | Input/Output: [(-40 78 37 -57) -57]
Test Case: 403 | Input/Output: [(-74 77 78 21) -74]
Test Case: 404 | Input/Output: [(6 -51 0 59) -51]
Test Case: 405 | Input/Output: [(-54 65 4 -85) -85]
Test Case: 406 | Input/Output: [(46 -27 -78 -5) -78]
Test Case: 407 | Input/Output: [(50 -78 0 80) -78]
Test Case: 408 | Input/Output: [(-8 70 -84 -65) -84]
Test Case: 409 | Input/Output: [(89 48 65 65) 48]
Test Case: 410 | Input/Output: [(-56 -31 -43 -17) -56]
Test Case: 411 | Input/Output: [(60 -58 -26 -4) -58]
Test Case: 412 | Input/Output: [(54 73 47 -24) -24]
Test Case: 413 | Input/Output: [(-90 -41 38 22) -90]
Test Case: 414 | Input/Output: [(26 -11 -27 77) -27]
Test Case: 415 | Input/Output: [(96 41 -53 -1) -53]
Test Case: 416 | Input/Output: [(83 -91 9 55) -91]
Test Case: 417 | Input/Output: [(-9 94 63 14) -9]
Test Case: 418 | Input/Output: [(-10 46 65 75) -10]
Test Case: 419 | Input/Output: [(-18 40 16 38) -18]
Test Case: 420 | Input/Output: [(66 58 -63 50) -63]
Test Case: 421 | Input/Output: [(70 -2 -59 -58) -59]
Test Case: 422 | Input/Output: [(92 52 30 18) 18]
Test Case: 423 | Input/Output: [(-48 92 71 -74) -74]
Test Case: 424 | Input/Output: [(-7 68 -52 1) -52]
Test Case: 425 | Input/Output: [(3 -75 78 -22) -75]
Test Case: 426 | Input/Output: [(89 10 27 -14) -14]
Test Case: 427 | Input/Output: [(100 33 -39 79) -39]
Test Case: 428 | Input/Output: [(26 -80 69 53) -80]
Test Case: 429 | Input/Output: [(70 -87 35 -25) -87]
Test Case: 430 | Input/Output: [(-64 12 58 -21) -64]
Test Case: 431 | Input/Output: [(-89 82 21 63) -89]
Test Case: 432 | Input/Output: [(83 -85 36 -51) -85]
Test Case: 433 | Input/Output: [(-87 57 77 70) -87]
Test Case: 434 | Input/Output: [(70 -32 99 -33) -33]
Test Case: 435 | Input/Output: [(3 51 90 -55) -55]
Test Case: 436 | Input/Output: [(94 43 -18 22) -18]
Test Case: 437 | Input/Output: [(-43 100 -74 69) -74]
Test Case: 438 | Input/Output: [(100 -14 97 70) -14]
Test Case: 439 | Input/Output: [(94 -19 -78 -9) -78]
Test Case: 440 | Input/Output: [(-8 36 -70 -77) -77]
Test Case: 441 | Input/Output: [(89 65 99 67) 65]
Test Case: 442 | Input/Output: [(-55 97 58 -48) -55]
Test Case: 443 | Input/Output: [(0 -55 -23 -2) -55]
Test Case: 444 | Input/Output: [(30 45 34 -54) -54]
Test Case: 445 | Input/Output: [(47 65 -79 -7) -79]
Test Case: 446 | Input/Output: [(29 42 61 13) 13]
Test Case: 447 | Input/Output: [(-49 35 50 92) -49]
Test Case: 448 | Input/Output: [(-80 88 -46 74) -80]
Test Case: 449 | Input/Output: [(16 -53 -15 79) -53]
Test Case: 450 | Input/Output: [(78 0 -69 -26) -69]
Test Case: 451 | Input/Output: [(-88 11 71 -83) -88]
Test Case: 452 | Input/Output: [(-65 -64 94 94) -65]
Test Case: 453 | Input/Output: [(-39 -74 -98 18) -98]
Test Case: 454 | Input/Output: [(-80 -17 -75 72) -80]
Test Case: 455 | Input/Output: [(-10 48 -42 82) -42]
Test Case: 456 | Input/Output: [(6 45 -35 -84) -84]
Test Case: 457 | Input/Output: [(-65 -71 -63 -48) -71]
Test Case: 458 | Input/Output: [(-98 41 -14 49) -98]
Test Case: 459 | Input/Output: [(-84 -27 -96 100) -96]
Test Case: 460 | Input/Output: [(-82 -97 -64 12) -97]
Test Case: 461 | Input/Output: [(-9 -26 -69 -49) -69]
Test Case: 462 | Input/Output: [(5 47 -80 31) -80]
Test Case: 463 | Input/Output: [(-48 90 79 92) -48]
Test Case: 464 | Input/Output: [(-69 19 -4 90) -69]
Test Case: 465 | Input/Output: [(-71 -94 -11 -82) -94]
Test Case: 466 | Input/Output: [(-28 -31 -74 -20) -74]
Test Case: 467 | Input/Output: [(17 -37 34 26) -37]
Test Case: 468 | Input/Output: [(46 -43 100 -52) -52]
Test Case: 469 | Input/Output: [(72 -93 71 27) -93]
Test Case: 470 | Input/Output: [(-97 0 -83 33) -97]
Test Case: 471 | Input/Output: [(90 -32 -68 38) -68]
Test Case: 472 | Input/Output: [(-45 -14 -83 18) -83]
Test Case: 473 | Input/Output: [(74 -67 46 25) -67]
Test Case: 474 | Input/Output: [(-98 62 99 74) -98]
Test Case: 475 | Input/Output: [(35 59 -54 -51) -54]
Test Case: 476 | Input/Output: [(-10 -49 67 40) -49]
Test Case: 477 | Input/Output: [(-35 56 -81 -88) -88]
Test Case: 478 | Input/Output: [(68 6 49 65) 6]
Test Case: 479 | Input/Output: [(-40 -19 7 -71) -71]
Test Case: 480 | Input/Output: [(-70 -34 49 20) -70]
Test Case: 481 | Input/Output: [(-74 7 -48 4) -74]
Test Case: 482 | Input/Output: [(-86 58 -30 -100) -100]
Test Case: 483 | Input/Output: [(-65 3 23 -56) -65]
Test Case: 484 | Input/Output: [(72 65 17 -96) -96]
Test Case: 485 | Input/Output: [(-21 16 10 44) -21]
Test Case: 486 | Input/Output: [(-39 82 26 -33) -39]
Test Case: 487 | Input/Output: [(-92 55 -65 91) -92]
Test Case: 488 | Input/Output: [(-38 -95 29 -58) -95]
Test Case: 489 | Input/Output: [(57 38 22 -53) -53]
Test Case: 490 | Input/Output: [(82 -100 45 -89) -100]
Test Case: 491 | Input/Output: [(-67 65 53 66) -67]
Test Case: 492 | Input/Output: [(-17 70 83 -9) -17]
Test Case: 493 | Input/Output: [(-39 66 -50 23) -50]
Test Case: 494 | Input/Output: [(-68 -82 76 -81) -82]
Test Case: 495 | Input/Output: [(36 -14 90 14) -14]
Test Case: 496 | Input/Output: [(29 38 73 -22) -22]
Test Case: 497 | Input/Output: [(73 -95 -91 78) -95]
Test Case: 498 | Input/Output: [(75 16 -51 -47) -51]
Test Case: 499 | Input/Output: [(76 91 84 15) 15]
Test Case: 500 | Input/Output: [(26 -82 62 -99) -99]
Test Case: 501 | Input/Output: [(-75 60 -28 39) -75]
Test Case: 502 | Input/Output: [(-45 15 1 37) -45]
Test Case: 503 | Input/Output: [(-61 -70 -45 -49) -70]
Test Case: 504 | Input/Output: [(38 75 24 5) 5]
Test Case: 505 | Input/Output: [(49 79 38 -11) -11]
Test Case: 506 | Input/Output: [(-48 -5 62 97) -48]
Test Case: 507 | Input/Output: [(-75 -30 -66 69) -75]
Test Case: 508 | Input/Output: [(35 71 -45 -63) -63]
Test Case: 509 | Input/Output: [(75 -36 -69 18) -69]
Test Case: 510 | Input/Output: [(79 -31 65 -23) -31]
Test Case: 511 | Input/Output: [(-14 79 -80 -48) -80]
Test Case: 512 | Input/Output: [(68 -100 63 88) -100]
Test Case: 513 | Input/Output: [(33 68 38 32) 32]
Test Case: 514 | Input/Output: [(9 10 -21 -74) -74]
Test Case: 515 | Input/Output: [(-25 -14 76 -34) -34]
Test Case: 516 | Input/Output: [(92 -48 39 -88) -88]
Test Case: 517 | Input/Output: [(-15 37 16 3) -15]
Test Case: 518 | Input/Output: [(-42 15 -8 -35) -42]
Test Case: 519 | Input/Output: [(95 50 92 68) 50]
Test Case: 520 | Input/Output: [(11 10 -90 57) -90]
Test Case: 521 | Input/Output: [(-69 -80 -6 9) -80]
Test Case: 522 | Input/Output: [(25 71 -98 -14) -98]
Test Case: 523 | Input/Output: [(-7 -15 73 -67) -67]
Test Case: 524 | Input/Output: [(-65 22 -56 -18) -65]
Test Case: 525 | Input/Output: [(-3 94 -4 26) -4]
Test Case: 526 | Input/Output: [(54 -91 43 92) -91]
Test Case: 527 | Input/Output: [(-98 -15 -14 -76) -98]
Test Case: 528 | Input/Output: [(37 -30 -4 48) -30]
Test Case: 529 | Input/Output: [(73 -41 -88 10) -88]
Test Case: 530 | Input/Output: [(34 -79 -58 -3) -79]
Test Case: 531 | Input/Output: [(-95 -77 8 -10) -95]
Test Case: 532 | Input/Output: [(-82 -62 -61 91) -82]
Test Case: 533 | Input/Output: [(10 -60 -42 -54) -60]
Test Case: 534 | Input/Output: [(-23 2 -90 -94) -94]
Test Case: 535 | Input/Output: [(-61 4 48 38) -61]
Test Case: 536 | Input/Output: [(67 -82 -13 -56) -82]
Test Case: 537 | Input/Output: [(60 -67 -87 -64) -87]
Test Case: 538 | Input/Output: [(57 -66 -20 2) -66]
Test Case: 539 | Input/Output: [(38 0 -49 -80) -80]
Test Case: 540 | Input/Output: [(0 29 2 10) 0]
Test Case: 541 | Input/Output: [(-25 31 19 -62) -62]
Test Case: 542 | Input/Output: [(-35 14 79 -10) -35]
Test Case: 543 | Input/Output: [(-56 41 26 51) -56]
Test Case: 544 | Input/Output: [(31 -49 34 46) -49]
Test Case: 545 | Input/Output: [(83 56 7 91) 7]
Test Case: 546 | Input/Output: [(-92 -35 62 10) -92]
Test Case: 547 | Input/Output: [(76 -90 78 11) -90]
Test Case: 548 | Input/Output: [(-49 39 -31 18) -49]
Test Case: 549 | Input/Output: [(46 7 -64 13) -64]
Test Case: 550 | Input/Output: [(-32 -3 -76 -78) -78]
Test Case: 551 | Input/Output: [(46 65 -91 -8) -91]
Test Case: 552 | Input/Output: [(-54 6 36 -38) -54]
Test Case: 553 | Input/Output: [(-20 50 -99 37) -99]
Test Case: 554 | Input/Output: [(-87 -79 -37 -46) -87]
Test Case: 555 | Input/Output: [(90 -64 -23 -62) -64]
Test Case: 556 | Input/Output: [(-78 41 -83 35) -83]
Test Case: 557 | Input/Output: [(95 -59 -29 -22) -59]
Test Case: 558 | Input/Output: [(-37 97 -8 -49) -49]
Test Case: 559 | Input/Output: [(-62 -57 -32 -48) -62]
Test Case: 560 | Input/Output: [(-73 17 73 21) -73]
Test Case: 561 | Input/Output: [(47 80 -96 -69) -96]
Test Case: 562 | Input/Output: [(28 7 67 10) 7]
Test Case: 563 | Input/Output: [(-41 -67 84 -90) -90]
Test Case: 564 | Input/Output: [(-36 55 2 52) -36]
Test Case: 565 | Input/Output: [(73 -78 -39 -62) -78]
Test Case: 566 | Input/Output: [(79 -61 -63 90) -63]
Test Case: 567 | Input/Output: [(-22 -77 5 -79) -79]
Test Case: 568 | Input/Output: [(42 -95 32 -30) -95]
Test Case: 569 | Input/Output: [(-50 11 -72 65) -72]
Test Case: 570 | Input/Output: [(1 -86 80 16) -86]
Test Case: 571 | Input/Output: [(-1 51 73 27) -1]
Test Case: 572 | Input/Output: [(-22 -35 -23 21) -35]
Test Case: 573 | Input/Output: [(75 -40 -78 75) -78]
Test Case: 574 | Input/Output: [(13 26 28 -11) -11]
Test Case: 575 | Input/Output: [(5 -58 -33 -14) -58]
Test Case: 576 | Input/Output: [(85 26 63 32) 26]
Test Case: 577 | Input/Output: [(60 -49 11 74) -49]
Test Case: 578 | Input/Output: [(-31 58 -52 14) -52]
Test Case: 579 | Input/Output: [(-7 -38 -84 -100) -100]
Test Case: 580 | Input/Output: [(88 40 84 73) 40]
Test Case: 581 | Input/Output: [(69 5 -16 94) -16]
Test Case: 582 | Input/Output: [(65 -95 -22 -29) -95]
Test Case: 583 | Input/Output: [(-13 -92 5 -79) -92]
Test Case: 584 | Input/Output: [(33 -69 -92 -6) -92]
Test Case: 585 | Input/Output: [(32 -80 15 11) -80]
Test Case: 586 | Input/Output: [(-80 34 -77 -14) -80]
Test Case: 587 | Input/Output: [(0 88 -97 -20) -97]
Test Case: 588 | Input/Output: [(-92 32 37 -99) -99]
Test Case: 589 | Input/Output: [(-32 -34 61 41) -34]
Test Case: 590 | Input/Output: [(-82 -65 -65 -11) -82]
Test Case: 591 | Input/Output: [(64 -85 44 73) -85]
Test Case: 592 | Input/Output: [(85 -72 -12 -4) -72]
Test Case: 593 | Input/Output: [(59 66 51 41) 41]
Test Case: 594 | Input/Output: [(-98 92 -74 -11) -98]
Test Case: 595 | Input/Output: [(25 -46 86 -17) -46]
Test Case: 596 | Input/Output: [(-55 84 22 -40) -55]
Test Case: 597 | Input/Output: [(-27 23 46 -76) -76]
Test Case: 598 | Input/Output: [(46 68 90 -70) -70]
Test Case: 599 | Input/Output: [(13 36 -91 -74) -91]
Test Case: 600 | Input/Output: [(-24 41 62 91) -24]
Test Case: 601 | Input/Output: [(66 -41 88 74) -41]
Test Case: 602 | Input/Output: [(35 -21 -11 61) -21]
Test Case: 603 | Input/Output: [(-47 66 93 30) -47]
Test Case: 604 | Input/Output: [(-48 62 70 -9) -48]
Test Case: 605 | Input/Output: [(63 60 41 57) 41]
Test Case: 606 | Input/Output: [(-100 97 44 31) -100]
Test Case: 607 | Input/Output: [(83 14 39 87) 14]
Test Case: 608 | Input/Output: [(-15 68 51 -8) -15]
Test Case: 609 | Input/Output: [(34 -85 -63 -70) -85]
Test Case: 610 | Input/Output: [(-45 23 -100 -82) -100]
Test Case: 611 | Input/Output: [(17 -68 62 -42) -68]
Test Case: 612 | Input/Output: [(-16 -58 -12 -49) -58]
Test Case: 613 | Input/Output: [(40 9 47 -43) -43]
Test Case: 614 | Input/Output: [(47 -35 71 47) -35]
Test Case: 615 | Input/Output: [(22 45 85 27) 22]
Test Case: 616 | Input/Output: [(-92 -67 33 -24) -92]
Test Case: 617 | Input/Output: [(0 -21 -59 -48) -59]
Test Case: 618 | Input/Output: [(80 79 -68 -16) -68]
Test Case: 619 | Input/Output: [(55 -25 40 26) -25]
Test Case: 620 | Input/Output: [(-79 75 -36 -59) -79]
Test Case: 621 | Input/Output: [(-46 64 -10 84) -46]
Test Case: 622 | Input/Output: [(-78 82 -53 -63) -78]
Test Case: 623 | Input/Output: [(-25 -93 97 -86) -93]
Test Case: 624 | Input/Output: [(-73 63 -40 -7) -73]
Test Case: 625 | Input/Output: [(-26 -26 33 95) -26]
Test Case: 626 | Input/Output: [(42 15 -56 23) -56]
Test Case: 627 | Input/Output: [(-91 -6 72 77) -91]
Test Case: 628 | Input/Output: [(86 41 66 44) 41]
Test Case: 629 | Input/Output: [(-34 26 -10 -33) -34]
Test Case: 630 | Input/Output: [(-75 68 -55 -47) -75]
Test Case: 631 | Input/Output: [(35 -62 42 -100) -100]
Test Case: 632 | Input/Output: [(41 64 16 96) 16]
Test Case: 633 | Input/Output: [(73 52 58 -34) -34]
Test Case: 634 | Input/Output: [(-10 -39 39 -1) -39]
Test Case: 635 | Input/Output: [(8 -63 -17 -16) -63]
Test Case: 636 | Input/Output: [(8 46 8 84) 8]
Test Case: 637 | Input/Output: [(27 75 -83 -60) -83]
Test Case: 638 | Input/Output: [(-84 -2 -79 56) -84]
Test Case: 639 | Input/Output: [(-89 -92 -11 -59) -92]
Test Case: 640 | Input/Output: [(-97 -94 53 19) -97]
Test Case: 641 | Input/Output: [(60 -55 -99 76) -99]
Test Case: 642 | Input/Output: [(36 98 64 31) 31]
Test Case: 643 | Input/Output: [(-71 -14 -37 -99) -99]
Test Case: 644 | Input/Output: [(69 -21 -76 -67) -76]
Test Case: 645 | Input/Output: [(-78 -98 -53 -65) -98]
Test Case: 646 | Input/Output: [(5 17 54 81) 5]
Test Case: 647 | Input/Output: [(45 65 57 -60) -60]
Test Case: 648 | Input/Output: [(19 1 -12 -16) -16]
Test Case: 649 | Input/Output: [(13 -50 -72 -87) -87]
Test Case: 650 | Input/Output: [(6 12 40 93) 6]
Test Case: 651 | Input/Output: [(92 -55 -59 93) -59]
Test Case: 652 | Input/Output: [(36 -4 -49 54) -49]
Test Case: 653 | Input/Output: [(-49 55 33 -15) -49]
Test Case: 654 | Input/Output: [(55 -10 98 -31) -31]
Test Case: 655 | Input/Output: [(26 -30 -18 -12) -30]
Test Case: 656 | Input/Output: [(70 -26 -54 -58) -58]
Test Case: 657 | Input/Output: [(-51 66 50 50) -51]
Test Case: 658 | Input/Output: [(45 -66 40 74) -66]
Test Case: 659 | Input/Output: [(43 -43 44 -39) -43]
Test Case: 660 | Input/Output: [(-60 -75 15 -39) -75]
Test Case: 661 | Input/Output: [(54 -72 81 -97) -97]
Test Case: 662 | Input/Output: [(-40 16 -11 2) -40]
Test Case: 663 | Input/Output: [(-30 -70 4 -54) -70]
Test Case: 664 | Input/Output: [(-42 82 -92 56) -92]
Test Case: 665 | Input/Output: [(28 -44 3 92) -44]
Test Case: 666 | Input/Output: [(-2 41 -32 82) -32]
Test Case: 667 | Input/Output: [(-47 84 -98 -57) -98]
Test Case: 668 | Input/Output: [(64 -95 -90 -3) -95]
Test Case: 669 | Input/Output: [(10 33 22 38) 10]
Test Case: 670 | Input/Output: [(66 -12 -91 -8) -91]
Test Case: 671 | Input/Output: [(-66 74 -43 28) -66]
Test Case: 672 | Input/Output: [(15 -36 -3 -28) -36]
Test Case: 673 | Input/Output: [(-25 -50 3 86) -50]
Test Case: 674 | Input/Output: [(-3 47 -57 -85) -85]
Test Case: 675 | Input/Output: [(91 15 48 100) 15]
Test Case: 676 | Input/Output: [(-63 -97 -12 -81) -97]
Test Case: 677 | Input/Output: [(-51 -64 -92 29) -92]
Test Case: 678 | Input/Output: [(33 93 54 40) 33]
Test Case: 679 | Input/Output: [(54 -67 -38 73) -67]
Test Case: 680 | Input/Output: [(15 -23 13 8) -23]
Test Case: 681 | Input/Output: [(-49 -43 91 -37) -49]
Test Case: 682 | Input/Output: [(34 29 -11 -11) -11]
Test Case: 683 | Input/Output: [(56 13 85 -80) -80]
Test Case: 684 | Input/Output: [(32 98 -89 -78) -89]
Test Case: 685 | Input/Output: [(-42 -16 -94 -88) -94]
Test Case: 686 | Input/Output: [(-48 -7 100 65) -48]
Test Case: 687 | Input/Output: [(68 95 67 -5) -5]
Test Case: 688 | Input/Output: [(12 68 -22 -83) -83]
Test Case: 689 | Input/Output: [(-41 90 -13 96) -41]
Test Case: 690 | Input/Output: [(54 23 -13 -32) -32]
Test Case: 691 | Input/Output: [(-59 -60 24 -83) -83]
Test Case: 692 | Input/Output: [(48 -93 -88 59) -93]
Test Case: 693 | Input/Output: [(96 -99 -43 -8) -99]
Test Case: 694 | Input/Output: [(-36 -85 -61 43) -85]
Test Case: 695 | Input/Output: [(-82 64 -25 73) -82]
Test Case: 696 | Input/Output: [(8 -33 -99 -78) -99]
Test Case: 697 | Input/Output: [(86 -99 52 -62) -99]
Test Case: 698 | Input/Output: [(85 -63 54 73) -63]
Test Case: 699 | Input/Output: [(33 -76 -83 -6) -83]
Test Case: 700 | Input/Output: [(-83 66 26 -67) -83]
Test Case: 701 | Input/Output: [(51 -97 -67 80) -97]
Test Case: 702 | Input/Output: [(-83 -27 23 -51) -83]
Test Case: 703 | Input/Output: [(-71 94 69 71) -71]
Test Case: 704 | Input/Output: [(77 64 -13 6) -13]
Test Case: 705 | Input/Output: [(66 18 -71 25) -71]
Test Case: 706 | Input/Output: [(-5 98 67 -81) -81]
Test Case: 707 | Input/Output: [(47 53 12 -58) -58]
Test Case: 708 | Input/Output: [(14 76 -68 -43) -68]
Test Case: 709 | Input/Output: [(-83 80 -46 -62) -83]
Test Case: 710 | Input/Output: [(89 -75 7 19) -75]
Test Case: 711 | Input/Output: [(47 8 -59 -95) -95]
Test Case: 712 | Input/Output: [(40 37 31 65) 31]
Test Case: 713 | Input/Output: [(-96 50 51 32) -96]
Test Case: 714 | Input/Output: [(77 -77 38 13) -77]
Test Case: 715 | Input/Output: [(-37 15 16 -17) -37]
Test Case: 716 | Input/Output: [(-90 -99 62 -78) -99]
Test Case: 717 | Input/Output: [(26 -91 -80 -93) -93]
Test Case: 718 | Input/Output: [(-65 30 -50 92) -65]
Test Case: 719 | Input/Output: [(-66 28 -27 75) -66]
Test Case: 720 | Input/Output: [(-76 -18 69 86) -76]
Test Case: 721 | Input/Output: [(28 32 100 -7) -7]
Test Case: 722 | Input/Output: [(93 -31 -40 -63) -63]
Test Case: 723 | Input/Output: [(58 -77 38 -64) -77]
Test Case: 724 | Input/Output: [(-64 -49 14 -88) -88]
Test Case: 725 | Input/Output: [(21 -49 35 36) -49]
Test Case: 726 | Input/Output: [(-66 -85 -69 -50) -85]
Test Case: 727 | Input/Output: [(-7 51 79 -52) -52]
Test Case: 728 | Input/Output: [(-67 97 51 -87) -87]
Test Case: 729 | Input/Output: [(-77 -72 79 -30) -77]
Test Case: 730 | Input/Output: [(-80 27 75 68) -80]
Test Case: 731 | Input/Output: [(-67 19 -23 -10) -67]
Test Case: 732 | Input/Output: [(-23 -95 42 -67) -95]
Test Case: 733 | Input/Output: [(70 -34 94 -50) -50]
Test Case: 734 | Input/Output: [(-80 -75 -18 69) -80]
Test Case: 735 | Input/Output: [(-42 53 -66 -90) -90]
Test Case: 736 | Input/Output: [(8 86 -39 -66) -66]
Test Case: 737 | Input/Output: [(77 -46 -46 -13) -46]
Test Case: 738 | Input/Output: [(9 13 -89 47) -89]
Test Case: 739 | Input/Output: [(66 67 73 -95) -95]
Test Case: 740 | Input/Output: [(-3 27 34 78) -3]
Test Case: 741 | Input/Output: [(4 12 46 65) 4]
Test Case: 742 | Input/Output: [(49 -89 -4 57) -89]
Test Case: 743 | Input/Output: [(57 -28 48 90) -28]
Test Case: 744 | Input/Output: [(26 15 33 -24) -24]
Test Case: 745 | Input/Output: [(34 1 23 -21) -21]
Test Case: 746 | Input/Output: [(55 89 38 30) 30]
Test Case: 747 | Input/Output: [(-19 21 84 92) -19]
Test Case: 748 | Input/Output: [(-78 -34 38 75) -78]
Test Case: 749 | Input/Output: [(21 -50 65 -85) -85]
Test Case: 750 | Input/Output: [(3 11 56 -29) -29]
Test Case: 751 | Input/Output: [(-20 32 77 68) -20]
Test Case: 752 | Input/Output: [(-90 60 10 61) -90]
Test Case: 753 | Input/Output: [(94 31 80 -65) -65]
Test Case: 754 | Input/Output: [(62 50 -61 69) -61]
Test Case: 755 | Input/Output: [(81 59 -28 56) -28]
Test Case: 756 | Input/Output: [(-6 85 -77 70) -77]
Test Case: 757 | Input/Output: [(16 -18 88 -36) -36]
Test Case: 758 | Input/Output: [(-73 -63 7 7) -73]
Test Case: 759 | Input/Output: [(82 -56 -84 13) -84]
Test Case: 760 | Input/Output: [(-63 25 66 33) -63]
Test Case: 761 | Input/Output: [(38 -84 90 -7) -84]
Test Case: 762 | Input/Output: [(-5 -57 -40 65) -57]
Test Case: 763 | Input/Output: [(-99 -67 -15 -67) -99]
Test Case: 764 | Input/Output: [(16 71 -99 10) -99]
Test Case: 765 | Input/Output: [(10 65 10 11) 10]
Test Case: 766 | Input/Output: [(1 19 26 -33) -33]
Test Case: 767 | Input/Output: [(2 77 -48 83) -48]
Test Case: 768 | Input/Output: [(84 -71 -40 78) -71]
Test Case: 769 | Input/Output: [(-49 -27 -11 -21) -49]
Test Case: 770 | Input/Output: [(57 29 46 -4) -4]
Test Case: 771 | Input/Output: [(-71 57 -39 -16) -71]
Test Case: 772 | Input/Output: [(50 -88 -89 33) -89]
Test Case: 773 | Input/Output: [(-29 -42 -57 30) -57]
Test Case: 774 | Input/Output: [(2 9 68 66) 2]
Test Case: 775 | Input/Output: [(73 -84 17 -30) -84]
Test Case: 776 | Input/Output: [(28 -97 50 23) -97]
Test Case: 777 | Input/Output: [(-90 15 -94 -62) -94]
Test Case: 778 | Input/Output: [(-87 -4 91 37) -87]
Test Case: 779 | Input/Output: [(-99 -29 -2 19) -99]
Test Case: 780 | Input/Output: [(41 80 -76 -46) -76]
Test Case: 781 | Input/Output: [(69 -60 -99 -38) -99]
Test Case: 782 | Input/Output: [(23 64 -4 76) -4]
Test Case: 783 | Input/Output: [(91 -30 3 -39) -39]
Test Case: 784 | Input/Output: [(31 33 -9 38) -9]
Test Case: 785 | Input/Output: [(-86 -94 -53 75) -94]
Test Case: 786 | Input/Output: [(75 -42 86 -15) -42]
Test Case: 787 | Input/Output: [(-46 -15 46 -34) -46]
Test Case: 788 | Input/Output: [(-9 -48 39 -58) -58]
Test Case: 789 | Input/Output: [(57 31 -46 -4) -46]
Test Case: 790 | Input/Output: [(-10 -12 20 -2) -12]
Test Case: 791 | Input/Output: [(7 -97 63 -59) -97]
Test Case: 792 | Input/Output: [(-65 97 -78 -26) -78]
Test Case: 793 | Input/Output: [(-80 24 -84 6) -84]
Test Case: 794 | Input/Output: [(19 -37 3 -79) -79]
Test Case: 795 | Input/Output: [(25 99 77 -6) -6]
Test Case: 796 | Input/Output: [(81 -80 15 -18) -80]
Test Case: 797 | Input/Output: [(74 21 67 82) 21]
Test Case: 798 | Input/Output: [(93 -48 71 -93) -93]
Test Case: 799 | Input/Output: [(0 -97 94 85) -97]
Test Case: 800 | Input/Output: [(11 8 -14 -2) -14]
Test Case: 801 | Input/Output: [(75 71 53 -81) -81]
Test Case: 802 | Input/Output: [(-22 43 -87 -48) -87]
Test Case: 803 | Input/Output: [(100 3 58 -99) -99]
Test Case: 804 | Input/Output: [(31 42 46 -73) -73]
Test Case: 805 | Input/Output: [(-3 -20 -56 97) -56]
Test Case: 806 | Input/Output: [(-82 -14 97 -93) -93]
Test Case: 807 | Input/Output: [(-67 67 18 -78) -78]
Test Case: 808 | Input/Output: [(85 -42 50 -70) -70]
Test Case: 809 | Input/Output: [(-69 87 91 15) -69]
Test Case: 810 | Input/Output: [(-43 -51 -74 15) -74]
Test Case: 811 | Input/Output: [(71 9 -96 -99) -99]
Test Case: 812 | Input/Output: [(-1 79 -7 -76) -76]
Test Case: 813 | Input/Output: [(-53 -9 4 -29) -53]
Test Case: 814 | Input/Output: [(40 -76 82 9) -76]
Test Case: 815 | Input/Output: [(-64 81 14 57) -64]
Test Case: 816 | Input/Output: [(1 87 74 -84) -84]
Test Case: 817 | Input/Output: [(9 37 -78 -89) -89]
Test Case: 818 | Input/Output: [(-44 -82 57 21) -82]
Test Case: 819 | Input/Output: [(-68 33 47 78) -68]
Test Case: 820 | Input/Output: [(-80 -56 55 -54) -80]
Test Case: 821 | Input/Output: [(8 -93 -71 6) -93]
Test Case: 822 | Input/Output: [(88 -28 -59 -49) -59]
Test Case: 823 | Input/Output: [(53 45 -40 -51) -51]
Test Case: 824 | Input/Output: [(-68 86 -82 57) -82]
Test Case: 825 | Input/Output: [(8 46 -28 -31) -31]
Test Case: 826 | Input/Output: [(-9 16 -17 -100) -100]
Test Case: 827 | Input/Output: [(1 30 -23 -59) -59]
Test Case: 828 | Input/Output: [(-43 98 48 36) -43]
Test Case: 829 | Input/Output: [(26 71 -87 -47) -87]
Test Case: 830 | Input/Output: [(53 65 -89 -87) -89]
Test Case: 831 | Input/Output: [(-16 52 -7 6) -16]
Test Case: 832 | Input/Output: [(-55 50 -40 -87) -87]
Test Case: 833 | Input/Output: [(8 -41 11 -5) -41]
Test Case: 834 | Input/Output: [(95 -12 3 55) -12]
Test Case: 835 | Input/Output: [(-59 -19 -59 13) -59]
Test Case: 836 | Input/Output: [(47 8 -76 37) -76]
Test Case: 837 | Input/Output: [(54 3 70 87) 3]
Test Case: 838 | Input/Output: [(97 22 -94 66) -94]
Test Case: 839 | Input/Output: [(1 -18 -91 20) -91]
Test Case: 840 | Input/Output: [(-74 42 80 -83) -83]
Test Case: 841 | Input/Output: [(7 -26 -78 90) -78]
Test Case: 842 | Input/Output: [(-47 -49 -14 -5) -49]
Test Case: 843 | Input/Output: [(12 61 -66 -88) -88]
Test Case: 844 | Input/Output: [(54 89 0 -44) -44]
Test Case: 845 | Input/Output: [(92 42 9 99) 9]
Test Case: 846 | Input/Output: [(52 56 -22 29) -22]
Test Case: 847 | Input/Output: [(68 -46 85 -50) -50]
Test Case: 848 | Input/Output: [(95 95 65 -27) -27]
Test Case: 849 | Input/Output: [(96 -91 31 85) -91]
Test Case: 850 | Input/Output: [(-40 0 75 -20) -40]
Test Case: 851 | Input/Output: [(-41 -65 2 22) -65]
Test Case: 852 | Input/Output: [(-92 -11 2 -49) -92]
Test Case: 853 | Input/Output: [(11 -48 -55 -91) -91]
Test Case: 854 | Input/Output: [(-29 -56 -70 -73) -73]
Test Case: 855 | Input/Output: [(51 92 73 -95) -95]
Test Case: 856 | Input/Output: [(-63 -54 60 -55) -63]
Test Case: 857 | Input/Output: [(-22 7 68 -89) -89]
Test Case: 858 | Input/Output: [(46 40 -15 -33) -33]
Test Case: 859 | Input/Output: [(-27 28 89 11) -27]
Test Case: 860 | Input/Output: [(-13 -2 -67 54) -67]
Test Case: 861 | Input/Output: [(74 75 -12 8) -12]
Test Case: 862 | Input/Output: [(13 -13 69 20) -13]
Test Case: 863 | Input/Output: [(-75 -40 -66 60) -75]
Test Case: 864 | Input/Output: [(79 2 89 -5) -5]
Test Case: 865 | Input/Output: [(69 -14 50 72) -14]
Test Case: 866 | Input/Output: [(4 -54 24 70) -54]
Test Case: 867 | Input/Output: [(10 87 37 70) 10]
Test Case: 868 | Input/Output: [(-77 45 -43 53) -77]
Test Case: 869 | Input/Output: [(-63 40 93 -47) -63]
Test Case: 870 | Input/Output: [(-3 35 -25 -92) -92]
Test Case: 871 | Input/Output: [(-81 -84 -51 81) -84]
Test Case: 872 | Input/Output: [(-44 52 -55 -72) -72]
Test Case: 873 | Input/Output: [(-7 -15 -48 -15) -48]
Test Case: 874 | Input/Output: [(18 25 -13 -35) -35]
Test Case: 875 | Input/Output: [(64 84 60 -71) -71]
Test Case: 876 | Input/Output: [(-66 -72 20 55) -72]
Test Case: 877 | Input/Output: [(-62 -64 4 -30) -64]
Test Case: 878 | Input/Output: [(-53 -78 64 61) -78]
Test Case: 879 | Input/Output: [(-56 69 -57 30) -57]
Test Case: 880 | Input/Output: [(44 -68 100 13) -68]
Test Case: 881 | Input/Output: [(-98 -84 18 0) -98]
Test Case: 882 | Input/Output: [(-73 -24 -14 21) -73]
Test Case: 883 | Input/Output: [(26 -22 82 -45) -45]
Test Case: 884 | Input/Output: [(13 85 -7 -89) -89]
Test Case: 885 | Input/Output: [(71 -17 45 66) -17]
Test Case: 886 | Input/Output: [(14 76 26 -38) -38]
Test Case: 887 | Input/Output: [(-28 -71 -15 69) -71]
Test Case: 888 | Input/Output: [(-45 -89 -82 61) -89]
Test Case: 889 | Input/Output: [(86 -40 -100 29) -100]
Test Case: 890 | Input/Output: [(76 35 -95 -19) -95]
Test Case: 891 | Input/Output: [(-85 -46 17 28) -85]
Test Case: 892 | Input/Output: [(-58 -7 -86 70) -86]
Test Case: 893 | Input/Output: [(46 -63 -38 -49) -63]
Test Case: 894 | Input/Output: [(39 28 76 65) 28]
Test Case: 895 | Input/Output: [(-88 27 82 -15) -88]
Test Case: 896 | Input/Output: [(67 18 23 -58) -58]
Test Case: 897 | Input/Output: [(-70 7 -88 -83) -88]
Test Case: 898 | Input/Output: [(52 33 3 23) 3]
Test Case: 899 | Input/Output: [(-70 -90 -59 -19) -90]
Test Case: 900 | Input/Output: [(-20 -96 68 -76) -96]
Test Case: 901 | Input/Output: [(-64 58 19 -3) -64]
Test Case: 902 | Input/Output: [(-19 -90 -20 55) -90]
Test Case: 903 | Input/Output: [(52 73 98 -55) -55]
Test Case: 904 | Input/Output: [(98 98 -92 14) -92]
Test Case: 905 | Input/Output: [(12 47 -36 18) -36]
Test Case: 906 | Input/Output: [(83 100 40 38) 38]
Test Case: 907 | Input/Output: [(95 -60 -21 99) -60]
Test Case: 908 | Input/Output: [(78 -58 57 88) -58]
Test Case: 909 | Input/Output: [(-91 -2 -15 76) -91]
Test Case: 910 | Input/Output: [(94 -80 72 -93) -93]
Test Case: 911 | Input/Output: [(28 22 38 22) 22]
Test Case: 912 | Input/Output: [(11 14 -59 23) -59]
Test Case: 913 | Input/Output: [(-73 32 -98 60) -98]
Test Case: 914 | Input/Output: [(-47 -5 55 95) -47]
Test Case: 915 | Input/Output: [(89 -33 -61 -51) -61]
Test Case: 916 | Input/Output: [(-5 -24 80 -61) -61]
Test Case: 917 | Input/Output: [(52 -90 -80 -92) -92]
Test Case: 918 | Input/Output: [(-100 70 -97 -38) -100]
Test Case: 919 | Input/Output: [(-87 10 54 -87) -87]
Test Case: 920 | Input/Output: [(21 -61 -99 -5) -99]
Test Case: 921 | Input/Output: [(88 -96 91 -88) -96]
Test Case: 922 | Input/Output: [(-68 -32 -33 63) -68]
Test Case: 923 | Input/Output: [(90 -33 -38 -93) -93]
Test Case: 924 | Input/Output: [(-1 0 45 54) -1]
Test Case: 925 | Input/Output: [(54 -93 -7 -8) -93]
Test Case: 926 | Input/Output: [(23 -92 -29 14) -92]
Test Case: 927 | Input/Output: [(2 10 63 45) 2]
Test Case: 928 | Input/Output: [(61 5 30 68) 5]
Test Case: 929 | Input/Output: [(95 -45 -1 59) -45]
Test Case: 930 | Input/Output: [(71 -76 27 7) -76]
Test Case: 931 | Input/Output: [(81 42 30 -48) -48]
Test Case: 932 | Input/Output: [(96 43 -16 55) -16]
Test Case: 933 | Input/Output: [(32 -73 88 -41) -73]
Test Case: 934 | Input/Output: [(31 -24 83 46) -24]
Test Case: 935 | Input/Output: [(-16 1 5 66) -16]
Test Case: 936 | Input/Output: [(72 93 -24 84) -24]
Test Case: 937 | Input/Output: [(19 -76 -20 3) -76]
Test Case: 938 | Input/Output: [(88 30 54 -52) -52]
Test Case: 939 | Input/Output: [(-84 83 -32 -47) -84]
Test Case: 940 | Input/Output: [(7 -72 -54 13) -72]
Test Case: 941 | Input/Output: [(9 -86 -16 -90) -90]
Test Case: 942 | Input/Output: [(-88 30 -9 89) -88]
Test Case: 943 | Input/Output: [(59 91 2 80) 2]
Test Case: 944 | Input/Output: [(55 -68 -50 -7) -68]
Test Case: 945 | Input/Output: [(17 24 -19 16) -19]
Test Case: 946 | Input/Output: [(49 -27 -75 -54) -75]
Test Case: 947 | Input/Output: [(-38 26 -39 -95) -95]
Test Case: 948 | Input/Output: [(-62 61 -57 -1) -62]
Test Case: 949 | Input/Output: [(-47 -80 92 77) -80]
Test Case: 950 | Input/Output: [(-15 -58 -93 -40) -93]
Test Case: 951 | Input/Output: [(-52 76 26 -20) -52]
Test Case: 952 | Input/Output: [(-93 15 -14 -36) -93]
Test Case: 953 | Input/Output: [(92 95 56 -68) -68]
Test Case: 954 | Input/Output: [(88 76 -75 -98) -98]
Test Case: 955 | Input/Output: [(84 76 45 -93) -93]
Test Case: 956 | Input/Output: [(26 -55 78 4) -55]
Test Case: 957 | Input/Output: [(12 81 58 59) 12]
Test Case: 958 | Input/Output: [(4 49 -90 -61) -90]
Test Case: 959 | Input/Output: [(-36 39 47 12) -36]
Test Case: 960 | Input/Output: [(-21 -31 80 -18) -31]
Test Case: 961 | Input/Output: [(89 66 -12 -68) -68]
Test Case: 962 | Input/Output: [(-59 -92 -92 51) -92]
Test Case: 963 | Input/Output: [(-74 -20 33 -72) -74]
Test Case: 964 | Input/Output: [(46 67 -48 25) -48]
Test Case: 965 | Input/Output: [(6 -67 86 98) -67]
Test Case: 966 | Input/Output: [(68 66 18 56) 18]
Test Case: 967 | Input/Output: [(-60 -53 -4 -87) -87]
Test Case: 968 | Input/Output: [(73 -71 65 63) -71]
Test Case: 969 | Input/Output: [(-11 -15 50 74) -15]
Test Case: 970 | Input/Output: [(-72 -16 -25 -12) -72]
Test Case: 971 | Input/Output: [(-71 100 1 28) -71]
Test Case: 972 | Input/Output: [(23 70 17 57) 17]
Test Case: 973 | Input/Output: [(62 -39 34 -77) -77]
Test Case: 974 | Input/Output: [(-8 45 -58 18) -58]
Test Case: 975 | Input/Output: [(-95 -98 95 -27) -98]
Test Case: 976 | Input/Output: [(-41 74 -47 16) -47]
Test Case: 977 | Input/Output: [(-69 93 20 71) -69]
Test Case: 978 | Input/Output: [(-93 81 42 23) -93]
Test Case: 979 | Input/Output: [(9 30 -76 -17) -76]
Test Case: 980 | Input/Output: [(-85 8 15 -89) -89]
Test Case: 981 | Input/Output: [(9 -58 -33 12) -58]
Test Case: 982 | Input/Output: [(17 -98 32 55) -98]
Test Case: 983 | Input/Output: [(90 98 46 -90) -90]
Test Case: 984 | Input/Output: [(87 -14 7 -78) -78]
Test Case: 985 | Input/Output: [(77 9 -89 -30) -89]
Test Case: 986 | Input/Output: [(-92 -95 -33 0) -95]
Test Case: 987 | Input/Output: [(48 -72 -56 -45) -72]
Test Case: 988 | Input/Output: [(8 70 78 -66) -66]
Test Case: 989 | Input/Output: [(72 -79 23 41) -79]
Test Case: 990 | Input/Output: [(-17 91 71 -6) -17]
Test Case: 991 | Input/Output: [(90 78 -44 83) -44]
Test Case: 992 | Input/Output: [(-48 4 -98 -43) -98]
Test Case: 993 | Input/Output: [(-10 -85 26 79) -85]
Test Case: 994 | Input/Output: [(73 -87 49 3) -87]
Test Case: 995 | Input/Output: [(66 64 -7 -19) -19]
Test Case: 996 | Input/Output: [(-22 55 -16 55) -22]
Test Case: 997 | Input/Output: [(42 83 -5 44) -5]
Test Case: 998 | Input/Output: [(-43 49 75 16) -43]
Test Case: 999 | Input/Output: [(-30 14 -54 -19) -54]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -20 -128 -76 2 55 -88 -101 -100 126 66 113 -115 -12 112 109 22
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-28 -28 -28 -70] -70] [[-68 -68 -68 48] -68] [[68 71 71 71] 68] [[-32 -53 -32 -32] -53] [[60 60 80 60] 60] [[-96 -96 35 -96] -96] [[-49 -74 -49 -49] -74] [[100 100 100 39] 39] [[60 60 -84 60] -84] [[-60 74 74 74] -60] [(-62 -62 -62 -62) -62] [(-22 -22 -22 -22) -22] [(85 85 85 85) 85] [(14 14 14 14) 14] [(32 32 32 32) 32] [(81 57 7 80) 7] [(33 44 1 65) 1] [(75 15 100 23) 15] [(17 42 91 84) 17] [(39 94 100 38) 38] [(53 12 9 25) 9] [(13 89 38 25) 13] [(62 91 29 79) 29] [(78 86 100 60) 60] [(11 42 20 79) 11] [(87 20 33 99) 20] [(4 72 18 55) 4] [(37 59 93 63) 37] [(24 76 40 76) 24] [(94 59 27 39) 27] [(60 14 67 46) 14] [(52 64 45 85) 45] [(88 49 46 36) 36] [(44 13 81 97) 13] [(4 10 9 49) 4] [(87 0 52 -87) -87] [(-47 89 -67 -78) -78] [(20 6 30 -79) -79] [(65 71 35 -4) -4] [(-3 -13 -69 -39) -69] [(-45 13 87 70) -45] [(22 -25 33 -41) -41] [(39 -61 -73 -23) -73] [(-29 22 -11 89) -29] [(0 8 -38 -14) -38] [(-76 -56 95 81) -76] [(-46 -14 -68 30) -68] [(-85 -67 -98 5) -98] [(46 -82 85 -73) -82] [(1 25 -75 97) -75] [(-27 -29 88 -14) -29] [(57 -9 3 20) -9] [(-13 11 59 -28) -28] [(83 23 -28 46) -28] [(-95 -64 -74 -69) -95] [(70 69 68 72) 68] [(-71 -46 -84 -69) -84] [(66 75 34 29) 29] [(73 24 -45 21) -45] [(64 -36 99 32) -36] [(-75 79 -9 18) -75] [(-100 -100 -84 74) -100] [(-45 -37 65 -6) -45] [(83 -42 -71 14) -71] [(-19 1 -64 80) -64] [(57 22 75 69) 22] [(-92 6 100 -16) -92] [(17 61 -100 -52) -100] [(-6 69 -60 -65) -65] [(88 78 -25 -24) -25] [(1 22 74 -32) -32] [(-38 87 -80 -75) -80] [(24 -29 54 -16) -29] [(-96 -80 -48 -57) -96] [(100 -52 42 -81) -81] [(18 -61 21 93) -61] [(28 39 -79 78) -79] [(7 44 46 -13) -13] [(7 -1 -58 -14) -58] [(73 -21 91 -69) -69] [(74 80 -26 27) -26] [(-84 -1 -73 -92) -92] [(-80 -8 33 5) -80] [(32 63 -11 27) -11] [(-47 15 23 -86) -86] [(73 28 -43 78) -43] [(37 -74 -22 12) -74] [(-65 -81 -53 80) -81] [(35 -33 43 -87) -87] [(22 44 -9 21) -9] [(88 -10 17 61) -10] [(36 76 -96 50) -96] [(-18 -75 28 -97) -97] [(79 -32 58 89) -32] [(-75 -83 7 89) -83])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 48                 
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 39                 
Correct output: -84                 | Program output: 60                 
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 80                 
Correct output: 1                   | Program output: 65                 
Correct output: 15                  | Program output: 23                 
Correct output: 17                  | Program output: 84                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 25                 
Correct output: 13                  | Program output: 25                 
Correct output: 29                  | Program output: 79                 
Correct output: 60                  | Program output: 60                 
Correct output: 11                  | Program output: 79                 
Correct output: 20                  | Program output: 99                 
Correct output: 4                   | Program output: 55                 
Correct output: 37                  | Program output: 63                 
Correct output: 24                  | Program output: 76                 
Correct output: 27                  | Program output: 39                 
Correct output: 14                  | Program output: 46                 
Correct output: 45                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 97                 
Correct output: 4                   | Program output: 49                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -39                
Correct output: -45                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -23                
Correct output: -29                 | Program output: 89                 
Correct output: -38                 | Program output: -14                
Correct output: -76                 | Program output: 81                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: 5                  
Correct output: -82                 | Program output: -73                
Correct output: -75                 | Program output: 97                 
Correct output: -29                 | Program output: -14                
Correct output: -9                  | Program output: 20                 
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: 46                 
Correct output: -95                 | Program output: -69                
Correct output: 68                  | Program output: 72                 
Correct output: -84                 | Program output: -69                
Correct output: 29                  | Program output: 29                 
Correct output: -45                 | Program output: 21                 
Correct output: -36                 | Program output: 32                 
Correct output: -75                 | Program output: 18                 
Correct output: -100                | Program output: 74                 
Correct output: -45                 | Program output: -6                 
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: 80                 
Correct output: 22                  | Program output: 69                 
Correct output: -92                 | Program output: -16                
Correct output: -100                | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -29                 | Program output: -16                
Correct output: -96                 | Program output: -57                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 93                 
Correct output: -79                 | Program output: 78                 
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -14                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: 5                  
Correct output: -11                 | Program output: 27                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: 78                 
Correct output: -74                 | Program output: 12                 
Correct output: -81                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 21                 
Correct output: -10                 | Program output: 61                 
Correct output: -96                 | Program output: 50                 
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: 89                 
Correct output: -83                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_807} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_198} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and})
Lexicase best program: (integer_eq boolean_dup_times tagged_807 integer_flush boolean_dup_items integer_mod boolean_dup_times integer_lte exec_pop () integer_stackdepth boolean_dup_times boolean_rot boolean_yankdup exec_k () (integer_dup_items) integer_max boolean_or integer_dup boolean_flush integer_gt boolean_eq boolean_stackdepth in4 print_integer in2 exec_s_when_autoconstructing (integer_add in2 boolean_and) (integer_min) (integer_mod exec_do*times (tagged_198 boolean_pop) exec_k_when_autoconstructing (exec_y_when_autoconstructing () integer_yankdup boolean_pop exec_while (exec_k () (integer_pop boolean_rot integer_min integer_add) exec_s_when_autoconstructing () (boolean_dup_times) (boolean_dup integer_fromboolean) exec_when (integer_gt exec_do*times (integer_dec in4 exec_dup (print_exec () print_boolean boolean_yankdup boolean_invert_first_then_and in4 boolean_pop exec_when (integer_mult integer_yankdup boolean_dup boolean_and)))))) ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 87
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_807} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_198} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and})
Zero cases best program: (integer_eq boolean_dup_times tagged_807 integer_flush boolean_dup_items integer_mod boolean_dup_times integer_lte exec_pop () integer_stackdepth boolean_dup_times boolean_rot boolean_yankdup exec_k () (integer_dup_items) integer_max boolean_or integer_dup boolean_flush integer_gt boolean_eq boolean_stackdepth in4 print_integer in2 exec_s_when_autoconstructing (integer_add in2 boolean_and) (integer_min) (integer_mod exec_do*times (tagged_198 boolean_pop) exec_k_when_autoconstructing (exec_y_when_autoconstructing () integer_yankdup boolean_pop exec_while (exec_k () (integer_pop boolean_rot integer_min integer_add) exec_s_when_autoconstructing () (boolean_dup_times) (boolean_dup integer_fromboolean) exec_when (integer_gt exec_do*times (integer_dec in4 exec_dup (print_exec () print_boolean boolean_yankdup boolean_invert_first_then_and in4 boolean_pop exec_when (integer_mult integer_yankdup boolean_dup boolean_and)))))) ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 87
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 1 5 14 5 3 4 3 5)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 3 1 5 14 5 3 4 3 5)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop})
Best program: (exec_empty integer_div in3 boolean_dup_items integer_add boolean_and integer_yank integer_eq exec_do*count (integer_gte integer_swap) boolean_invert_first_then_and exec_shove (in1 integer_inc boolean_invert_first_then_and integer_dup_items integer_swap boolean_pop integer_flush boolean_yankdup in4 exec_k (boolean_dup_times) (exec_do*times (integer_mod integer_yank boolean_yankdup in3 boolean_flush integer_dup print_boolean) boolean_empty integer_mod exec_stackdepth in2) exec_k (exec_when () print_integer in2 boolean_yank boolean_invert_second_then_and exec_stackdepth) () integer_dup boolean_swap integer_stackdepth exec_if (exec_rot (boolean_not boolean_yank exec_dup (boolean_invert_first_then_and) boolean_empty exec_do*times (integer_gt) integer_add) (integer_dup in4 integer_gt) (integer_mod integer_min boolean_not boolean_stackdepth exec_pop ())) ()))
Errors: [0 1 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 81
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.999 0.995 0.986 0.995 0.997 0.996 0.997 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.569
Average program size in population (points): 69.581
Average percent parens in population: 0.275
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475150
--- Timings ---
Current time: 1559593827844 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 29.9%
Fitness Testing:      1.7 seconds, 66.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: 35                 
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 52                 
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: 95                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 85                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 88                 
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -74                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -45                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: 54                 
Correct output: -96                 | Program output: -48                
Correct output: -81                 | Program output: 42                 
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -73                
Correct output: -80                 | Program output: 33                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -53                
Correct output: -87                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 28                 
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_gt})
Lexicase best program: (boolean_frominteger integer_eq print_integer exec_when (exec_when (boolean_swap boolean_pop exec_while ()) exec_shove () boolean_eq) in3 exec_s_when_autoconstructing (exec_dup () exec_s_when_autoconstructing (print_integer exec_flush boolean_empty exec_yank exec_empty) (print_boolean) (integer_lt integer_dec boolean_invert_second_then_and exec_yankdup print_boolean)) (exec_if () (exec_while (exec_k_when_autoconstructing (boolean_xor exec_dup_items boolean_stackdepth boolean_dup) (integer_inc integer_gt)))) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_gt})
Zero cases best program: (boolean_frominteger integer_eq print_integer exec_when (exec_when (boolean_swap boolean_pop exec_while ()) exec_shove () boolean_eq) in3 exec_s_when_autoconstructing (exec_dup () exec_s_when_autoconstructing (print_integer exec_flush boolean_empty exec_yank exec_empty) (print_boolean) (integer_lt integer_dec boolean_invert_second_then_and exec_yankdup print_boolean)) (exec_if () (exec_while (exec_k_when_autoconstructing (boolean_xor exec_dup_items boolean_stackdepth boolean_dup) (integer_inc integer_gt)))) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 189 502 4 39 70 185 65 65 66)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (213 189 502 4 39 70 185 65 65 66)
Population mean number of perfect (error zero) cases: 1.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_676} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count})
Best program: (in3 boolean_yankdup exec_k_when_autoconstructing (print_integer) (integer_yankdup integer_gt exec_yankdup print_boolean integer_dup_items exec_y (boolean_not integer_max) in4 integer_max exec_k () (integer_rot boolean_yank in4 tagged_676 in1 exec_k_when_autoconstructing () (integer_stackdepth) print_newline boolean_yankdup integer_stackdepth) exec_when (integer_inc) integer_inc integer_gt) integer_dec exec_rot () () (integer_max boolean_invert_second_then_and exec_do*count ()))
Errors: [1 1 0 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 47
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 8.602
Median total errors in population: 9
Error averages by case: (0.787 0.811 0.498 0.996 0.961 0.93 0.815 0.935 0.935 0.934)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.985
Average program size in population (points): 70.269
Average percent parens in population: 0.233
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1069611
--- Timings ---
Current time: 1559593830230 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.8 seconds, 37.5%
Fitness Testing:      2.4 seconds, 49.8%
Report:               0.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: 35                 
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 52                 
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: 95                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 85                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 88                 
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -74                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -45                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: 54                 
Correct output: -96                 | Program output: -48                
Correct output: -81                 | Program output: 42                 
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -73                
Correct output: -80                 | Program output: 33                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -53                
Correct output: -87                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 28                 
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_gt})
Lexicase best program: (exec_y_when_autoconstructing (boolean_frominteger integer_eq print_integer exec_when (exec_when (boolean_swap boolean_pop exec_while ()) exec_dup_items integer_max in3 exec_s_when_autoconstructing (exec_dup () integer_dup_times print_integer exec_flush boolean_empty exec_yank integer_lt integer_dec in3 boolean_invert_second_then_and exec_yankdup exec_if () (exec_while (boolean_xor boolean_dup) integer_inc integer_gt)) () ())))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_gt})
Zero cases best program: (exec_y_when_autoconstructing (boolean_frominteger integer_eq print_integer exec_when (exec_when (boolean_swap boolean_pop exec_while ()) exec_dup_items integer_max in3 exec_s_when_autoconstructing (exec_dup () integer_dup_times print_integer exec_flush boolean_empty exec_yank integer_lt integer_dec in3 boolean_invert_second_then_and exec_yankdup exec_if () (exec_while (boolean_xor boolean_dup) integer_inc integer_gt)) () ())))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (132 154 561 583 147 246 250 247 248 36)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (132 154 561 583 147 246 250 247 248 36)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction tagged_676} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count})
Best program: (in3 exec_k_when_autoconstructing (exec_when (print_integer) integer_yankdup integer_gt exec_yankdup print_boolean exec_y (boolean_not integer_dup_items integer_max) in4 integer_max exec_k () (integer_rot print_integer boolean_pop boolean_and in4 tagged_676 in1 integer_stackdepth) print_newline boolean_yankdup integer_stackdepth) (integer_inc integer_gt) in3 integer_max boolean_invert_second_then_and integer_inc exec_do*count ())
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 7.396
Median total errors in population: 7
Error averages by case: (0.868 0.846 0.439 0.417 0.853 0.754 0.75 0.753 0.752 0.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.929
Average program size in population (points): 65.548
Average percent parens in population: 0.240
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1582678
--- Timings ---
Current time: 1559593832700 milliseconds
Total Time:           7.3 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 41.5%
Fitness Testing:      3.0 seconds, 41.1%
Report:               1.2 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: 35                 
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 52                 
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: 95                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 85                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 88                 
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -74                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -45                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: 54                 
Correct output: -96                 | Program output: -48                
Correct output: -81                 | Program output: 42                 
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -73                
Correct output: -80                 | Program output: 33                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -53                
Correct output: -87                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 28                 
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_676} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count})
Lexicase best program: (in3 exec_k_when_autoconstructing (print_integer) (integer_yankdup integer_gt print_boolean exec_y (integer_dup_items integer_max) integer_max exec_flush exec_k () (integer_rot integer_inc print_integer boolean_pop integer_lt boolean_and boolean_yank in4 tagged_676 in1 integer_stackdepth) print_newline boolean_yankdup integer_stackdepth) exec_when (boolean_dup integer_inc integer_gt) integer_dec in3 integer_max boolean_invert_second_then_and exec_do*count ())
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_676} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count})
Zero cases best program: (in3 exec_k_when_autoconstructing (print_integer) (integer_yankdup integer_gt print_boolean exec_y (integer_dup_items integer_max) integer_max exec_flush exec_k () (integer_rot integer_inc print_integer boolean_pop integer_lt boolean_and boolean_yank in4 tagged_676 in1 integer_stackdepth) print_newline boolean_yankdup integer_stackdepth) exec_when (boolean_dup integer_inc integer_gt) integer_dec in3 integer_max boolean_invert_second_then_and exec_do*count ())
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (54 171 173 322 322 327 51 388 327 326)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (54 171 173 322 322 327 51 388 327 326)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_boolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_gt})
Best program: (boolean_frominteger integer_eq print_integer exec_when (exec_when (boolean_pop exec_while ()) in3 exec_s_when_autoconstructing (print_integer exec_flush boolean_empty boolean_rot exec_yank print_boolean) (integer_dec print_boolean in3 exec_yankdup print_boolean) () integer_fromboolean) exec_if () (exec_while (integer_add boolean_xor boolean_stackdepth boolean_dup) in4) integer_inc exec_do*range (integer_gt))
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.539
Median total errors in population: 8
Error averages by case: (0.946 0.829 0.827 0.678 0.678 0.673 0.949 0.612 0.673 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.71
Average program size in population (points): 68.249
Average percent parens in population: 0.243
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2103377
--- Timings ---
Current time: 1559593834597 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 43.5%
Fitness Testing:      3.5 seconds, 36.7%
Report:               1.8 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: 35                 
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 52                 
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: 95                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 85                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 88                 
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -74                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -45                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: 54                 
Correct output: -96                 | Program output: -48                
Correct output: -81                 | Program output: 42                 
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -73                
Correct output: -80                 | Program output: 33                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -53                
Correct output: -87                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 28                 
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_676} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (in3 exec_k_when_autoconstructing (integer_sub print_integer) (integer_yankdup boolean_dup integer_gt exec_yankdup print_boolean exec_y (boolean_not integer_max) in4 integer_max exec_k () (integer_fromboolean) print_integer boolean_pop boolean_yank in4 tagged_676 exec_y_when_autoconstructing (integer_stackdepth) print_newline boolean_yankdup integer_stackdepth) boolean_swap integer_inc integer_gt integer_inc boolean_invert_second_then_and integer_dec integer_max boolean_invert_second_then_and)
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_676} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (in3 exec_k_when_autoconstructing (integer_sub print_integer) (integer_yankdup boolean_dup integer_gt exec_yankdup print_boolean exec_y (boolean_not integer_max) in4 integer_max exec_k () (integer_fromboolean) print_integer boolean_pop boolean_yank in4 tagged_676 exec_y_when_autoconstructing (integer_stackdepth) print_newline boolean_yankdup integer_stackdepth) boolean_swap integer_inc integer_gt integer_inc boolean_invert_second_then_and integer_dec integer_max boolean_invert_second_then_and)
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 101 398 398 1 655 642 400 398 139)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (143 101 398 398 1 655 642 400 398 139)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_587} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove})
Best program: (in3 print_integer boolean_flush boolean_dup in1 boolean_rot exec_shove () boolean_pop integer_flush exec_dup (integer_shove exec_flush) exec_when () exec_dup () exec_s_when_autoconstructing () (integer_stackdepth boolean_invert_first_then_and exec_while (boolean_not) boolean_dup_items print_newline in1 print_integer integer_dup) (exec_y_when_autoconstructing (boolean_yankdup exec_do*count () integer_max) integer_dup_times exec_empty boolean_yank boolean_xor) exec_empty in4 integer_mult integer_fromboolean exec_if () (integer_min) integer_dec exec_do*times (boolean_or) boolean_xor exec_pop (integer_min exec_dup_times (boolean_or tagged_587 exec_yankdup exec_k (exec_yankdup exec_yankdup boolean_xor boolean_dup_times boolean_empty boolean_empty exec_dup_times () boolean_shove) ())))
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 57
Size: 76
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.725
Median total errors in population: 6
Error averages by case: (0.857 0.899 0.602 0.602 0.999 0.345 0.358 0.6 0.602 0.861)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.765
Average program size in population (points): 66.97
Average percent parens in population: 0.240
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2604046
--- Timings ---
Current time: 1559593836548 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 47.0%
Fitness Testing:      4.0 seconds, 35.0%
Report:               2.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 48                 
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 39                 
Correct output: -84                 | Program output: 60                 
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 80                 
Correct output: 1                   | Program output: 65                 
Correct output: 15                  | Program output: 23                 
Correct output: 17                  | Program output: 84                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 25                 
Correct output: 13                  | Program output: 25                 
Correct output: 29                  | Program output: 79                 
Correct output: 60                  | Program output: 60                 
Correct output: 11                  | Program output: 79                 
Correct output: 20                  | Program output: 99                 
Correct output: 4                   | Program output: 55                 
Correct output: 37                  | Program output: 63                 
Correct output: 24                  | Program output: 76                 
Correct output: 27                  | Program output: 39                 
Correct output: 14                  | Program output: 46                 
Correct output: 45                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 97                 
Correct output: 4                   | Program output: 49                 
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -39                
Correct output: -45                 | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -23                
Correct output: -29                 | Program output: 89                 
Correct output: -38                 | Program output: -14                
Correct output: -76                 | Program output: 81                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: 5                  
Correct output: -82                 | Program output: -73                
Correct output: -75                 | Program output: 97                 
Correct output: -29                 | Program output: -14                
Correct output: -9                  | Program output: 20                 
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: 46                 
Correct output: -95                 | Program output: -69                
Correct output: 68                  | Program output: 72                 
Correct output: -84                 | Program output: -69                
Correct output: 29                  | Program output: 29                 
Correct output: -45                 | Program output: 21                 
Correct output: -36                 | Program output: 32                 
Correct output: -75                 | Program output: 18                 
Correct output: -100                | Program output: 74                 
Correct output: -45                 | Program output: -6                 
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: 80                 
Correct output: 22                  | Program output: 69                 
Correct output: -92                 | Program output: -16                
Correct output: -100                | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -29                 | Program output: -16                
Correct output: -96                 | Program output: -57                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 93                 
Correct output: -79                 | Program output: 78                 
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -14                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: 5                  
Correct output: -11                 | Program output: 27                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: 78                 
Correct output: -74                 | Program output: 12                 
Correct output: -81                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 21                 
Correct output: -10                 | Program output: 61                 
Correct output: -96                 | Program output: 50                 
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: 89                 
Correct output: -83                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -12} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_198} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and})
Lexicase best program: (integer_eq boolean_not boolean_dup_times tagged_807 boolean_dup_items integer_inc integer_pop boolean_dup_times integer_dup_times integer_max boolean_stackdepth integer_lte exec_pop () integer_stackdepth -12 boolean_yankdup exec_k () (integer_gte integer_dup_items) exec_when (integer_dup_times boolean_or exec_swap (boolean_flush integer_gt boolean_eq in4 boolean_xor print_integer integer_min) (integer_mult integer_mod exec_swap (exec_do*times (tagged_198 boolean_pop) exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_yankdup boolean_pop exec_k () (boolean_rot exec_dup_items) integer_add) (exec_s_when_autoconstructing () (boolean_dup_times) (exec_k (integer_dup_times) (boolean_dup exec_when (boolean_swap integer_dec boolean_yankdup boolean_invert_first_then_and boolean_pop exec_when (integer_mult boolean_eq integer_yankdup exec_dup () boolean_dup integer_add boolean_and)))))) () ()) ())))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -12} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_198} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and})
Zero cases best program: (integer_eq boolean_not boolean_dup_times tagged_807 boolean_dup_items integer_inc integer_pop boolean_dup_times integer_dup_times integer_max boolean_stackdepth integer_lte exec_pop () integer_stackdepth -12 boolean_yankdup exec_k () (integer_gte integer_dup_items) exec_when (integer_dup_times boolean_or exec_swap (boolean_flush integer_gt boolean_eq in4 boolean_xor print_integer integer_min) (integer_mult integer_mod exec_swap (exec_do*times (tagged_198 boolean_pop) exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_yankdup boolean_pop exec_k () (boolean_rot exec_dup_items) integer_add) (exec_s_when_autoconstructing () (boolean_dup_times) (exec_k (integer_dup_times) (boolean_dup exec_when (boolean_swap integer_dec boolean_yankdup boolean_invert_first_then_and boolean_pop exec_when (integer_mult boolean_eq integer_yankdup exec_dup () boolean_dup integer_add boolean_and)))))) () ()) ())))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 63 379 169 73 72 63 381 64 701)
Population mean number of elite cases: 2.27
Count of perfect (error zero) individuals by case: (305 63 379 169 73 72 63 381 64 701)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_pop} {:close 2, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and})
Best program: (integer_lte integer_eq integer_add boolean_frominteger integer_flush exec_do*count () exec_s_when_autoconstructing () (integer_yankdup boolean_dup_times integer_lte boolean_dup_times boolean_rot integer_eq boolean_yankdup exec_k () (integer_dup_items)) (boolean_pop) integer_max boolean_or exec_k (integer_dup integer_gt boolean_eq boolean_dup exec_noop boolean_stackdepth in4 print_integer in2 exec_s_when_autoconstructing (integer_pop) (integer_pop integer_add in2 integer_min) (integer_rot exec_do*times (boolean_dup exec_yank exec_stackdepth boolean_pop) integer_dup_times)) (exec_y_when_autoconstructing () integer_yankdup boolean_pop exec_while (integer_min boolean_and) integer_max boolean_dup integer_fromboolean) exec_when (integer_gt integer_dec integer_dup_items integer_flush boolean_dup_times) print_boolean boolean_yankdup boolean_invert_first_then_and boolean_pop boolean_dup boolean_and)
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 63
Size: 79
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 7.73
Median total errors in population: 7
Error averages by case: (0.695 0.937 0.621 0.831 0.927 0.928 0.937 0.619 0.936 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.191
Average program size in population (points): 64.652
Average percent parens in population: 0.256
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3063848
--- Timings ---
Current time: 1559593838691 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 49.1%
Fitness Testing:      4.5 seconds, 33.8%
Report:               2.2 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: 35                 
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 52                 
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: 95                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 85                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 88                 
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -74                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -45                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: 54                 
Correct output: -96                 | Program output: -48                
Correct output: -81                 | Program output: 42                 
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -73                
Correct output: -80                 | Program output: 33                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -53                
Correct output: -87                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 28                 
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tagged_302} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_587} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction -96} {:close 0, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times in3 print_integer integer_shove boolean_rot boolean_flush boolean_yank boolean_rot exec_shove () integer_flush in1 boolean_dup_times boolean_swap integer_dup boolean_xor exec_flush exec_dup (exec_when () exec_dup () exec_s_when_autoconstructing () (boolean_not) (boolean_dup_items tagged_302) boolean_rot boolean_not boolean_rot integer_div in1 print_integer exec_yankdup exec_do*count () exec_do*range (integer_max) integer_dup_times exec_empty boolean_frominteger integer_min boolean_xor) exec_empty in4 print_exec () integer_mult exec_flush integer_min boolean_pop integer_dec boolean_xor exec_pop (integer_eq boolean_empty) integer_min exec_shove (boolean_or tagged_587 exec_yankdup integer_dup_times integer_add exec_yankdup integer_flush) boolean_dup_times boolean_yankdup exec_dup_times (-96) print_newline exec_swap (boolean_xor integer_swap integer_eq boolean_empty boolean_shove) ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tagged_302} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_587} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction -96} {:close 0, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times in3 print_integer integer_shove boolean_rot boolean_flush boolean_yank boolean_rot exec_shove () integer_flush in1 boolean_dup_times boolean_swap integer_dup boolean_xor exec_flush exec_dup (exec_when () exec_dup () exec_s_when_autoconstructing () (boolean_not) (boolean_dup_items tagged_302) boolean_rot boolean_not boolean_rot integer_div in1 print_integer exec_yankdup exec_do*count () exec_do*range (integer_max) integer_dup_times exec_empty boolean_frominteger integer_min boolean_xor) exec_empty in4 print_exec () integer_mult exec_flush integer_min boolean_pop integer_dec boolean_xor exec_pop (integer_eq boolean_empty) integer_min exec_shove (boolean_or tagged_587 exec_yankdup integer_dup_times integer_add exec_yankdup integer_flush) boolean_dup_times boolean_yankdup exec_dup_times (-96) print_newline exec_swap (boolean_xor integer_swap integer_eq boolean_empty boolean_shove) ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 283 217 166 168 452 168 179 669 217)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (219 283 217 166 168 452 168 179 669 217)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 2, :instruction print_boolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction -7} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc})
Best program: (boolean_frominteger integer_eq exec_do*count (print_integer exec_when (boolean_pop exec_while ()) integer_max in3 exec_s_when_autoconstructing (exec_dup () print_integer exec_y () exec_flush boolean_empty exec_yank integer_gte print_boolean) (integer_eq integer_dec boolean_eq integer_dec in3 boolean_invert_second_then_and exec_yankdup in1 print_boolean) () integer_fromboolean) exec_if () (integer_add -7 integer_mod boolean_xor boolean_stackdepth exec_if () (integer_inc)))
Errors: [1 1 1 0 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 6
Error averages by case: (0.781 0.717 0.783 0.834 0.832 0.548 0.832 0.821 0.331 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.826
Average program size in population (points): 64.69
Average percent parens in population: 0.264
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3499338
--- Timings ---
Current time: 1559593840775 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.7 seconds, 49.7%
Fitness Testing:      4.9 seconds, 31.9%
Report:               2.7 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 81                 
Correct output: 1                   | Program output: 33                 
Correct output: 15                  | Program output: 75                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 39                 
Correct output: 9                   | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 62                 
Correct output: 60                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 94                 
Correct output: 14                  | Program output: 60                 
Correct output: 45                  | Program output: 52                 
Correct output: 36                  | Program output: 88                 
Correct output: 13                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: 87                 
Correct output: -78                 | Program output: -47                
Correct output: -79                 | Program output: 20                 
Correct output: -4                  | Program output: 65                 
Correct output: -69                 | Program output: -3                 
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: 22                 
Correct output: -73                 | Program output: 39                 
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -46                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: 46                 
Correct output: -75                 | Program output: 1                  
Correct output: -29                 | Program output: -27                
Correct output: -9                  | Program output: 57                 
Correct output: -28                 | Program output: -13                
Correct output: -28                 | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: 68                  | Program output: 70                 
Correct output: -84                 | Program output: -71                
Correct output: 29                  | Program output: 66                 
Correct output: -45                 | Program output: 73                 
Correct output: -36                 | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -71                 | Program output: 83                 
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 17                 
Correct output: -65                 | Program output: -6                 
Correct output: -25                 | Program output: 88                 
Correct output: -32                 | Program output: 1                  
Correct output: -80                 | Program output: -38                
Correct output: -29                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: 100                
Correct output: -61                 | Program output: 18                 
Correct output: -79                 | Program output: 28                 
Correct output: -13                 | Program output: 7                  
Correct output: -58                 | Program output: 7                  
Correct output: -69                 | Program output: 73                 
Correct output: -26                 | Program output: 74                 
Correct output: -92                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 32                 
Correct output: -86                 | Program output: -47                
Correct output: -43                 | Program output: 73                 
Correct output: -74                 | Program output: 37                 
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: 35                 
Correct output: -9                  | Program output: 22                 
Correct output: -10                 | Program output: 88                 
Correct output: -96                 | Program output: 36                 
Correct output: -97                 | Program output: -18                
Correct output: -32                 | Program output: 79                 
Correct output: -83                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_eq exec_when (exec_when (boolean_pop exec_shove () integer_max integer_empty in1) exec_dup () print_integer boolean_dup_items exec_flush integer_lt exec_yank integer_dec boolean_eq in3 integer_flush boolean_invert_second_then_and exec_if () (print_exec (boolean_stackdepth integer_add exec_if () (integer_empty)))))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_eq exec_when (exec_when (boolean_pop exec_shove () integer_max integer_empty in1) exec_dup () print_integer boolean_dup_items exec_flush integer_lt exec_yank integer_dec boolean_eq in3 integer_flush boolean_invert_second_then_and exec_if () (print_exec (boolean_stackdepth integer_add exec_if () (integer_empty)))))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 177 177 176 219 217 5 5 471 5)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (294 177 177 176 219 217 5 5 471 5)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_gt})
Best program: (boolean_frominteger print_integer exec_when (boolean_pop exec_shove () integer_max integer_empty boolean_frominteger) in3 exec_while (integer_add in1) exec_dup () print_integer exec_s_when_autoconstructing () (exec_flush integer_lt boolean_pop) (integer_gte) integer_dec in3 boolean_invert_second_then_and integer_fromboolean exec_if () (exec_while (boolean_stackdepth integer_gt)))
Errors: [1 0 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 8.254
Median total errors in population: 8
Error averages by case: (0.706 0.823 0.823 0.824 0.781 0.783 0.995 0.995 0.529 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.914
Average program size in population (points): 60.979
Average percent parens in population: 0.265
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3966513
--- Timings ---
Current time: 1559593842850 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.1 seconds, 50.9%
Fitness Testing:      5.4 seconds, 30.4%
Report:               3.2 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 52                 
Correct output: -78                 | Program output: -47                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -3                 
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -46                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: 85                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -27                
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -71                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -6                 
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -38                
Correct output: -29                 | Program output: 54                 
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: 42                 
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -47                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -18                
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_if})
Lexicase best program: (boolean_frominteger boolean_dup_items integer_eq print_integer exec_dup_times () exec_when (boolean_pop exec_while ()) exec_shove () integer_empty boolean_frominteger in3 in1 exec_dup () exec_do*times (print_integer exec_flush integer_lte integer_lt exec_yank integer_gte) integer_dec integer_dec exec_y () boolean_eq in3 integer_fromboolean exec_if () (exec_while (exec_stackdepth) boolean_stackdepth boolean_dup) in3 exec_if () ())
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_if})
Zero cases best program: (boolean_frominteger boolean_dup_items integer_eq print_integer exec_dup_times () exec_when (boolean_pop exec_while ()) exec_shove () integer_empty boolean_frominteger in3 in1 exec_dup () exec_do*times (print_integer exec_flush integer_lte integer_lt exec_yank integer_gte) integer_dec integer_dec exec_y () boolean_eq in3 integer_fromboolean exec_if () (exec_while (exec_stackdepth) boolean_stackdepth boolean_dup) in3 exec_if () ())
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 319 130 118 131 222 189 319 118 189)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (154 319 130 118 131 222 189 319 118 189)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Best program: (boolean_frominteger integer_eq print_integer exec_when (boolean_pop exec_while ()) exec_shove () integer_empty boolean_frominteger in3 in1 boolean_xor exec_dup () exec_do*times (print_integer exec_flush integer_lte integer_lt integer_gte) integer_dec integer_dec integer_inc boolean_eq in3 integer_fromboolean exec_if () (exec_while (boolean_stackdepth boolean_dup) exec_if () ()))
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 41
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 8.111
Median total errors in population: 8
Error averages by case: (0.846 0.681 0.87 0.882 0.869 0.778 0.811 0.681 0.882 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.637
Average program size in population (points): 58.861
Average percent parens in population: 0.278
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4372289
--- Timings ---
Current time: 1559593844742 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 52.7%
Fitness Testing:      5.8 seconds, 29.5%
Report:               3.4 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 81                 
Correct output: 1                   | Program output: 33                 
Correct output: 15                  | Program output: 75                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 39                 
Correct output: 9                   | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 62                 
Correct output: 60                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 94                 
Correct output: 14                  | Program output: 60                 
Correct output: 45                  | Program output: 52                 
Correct output: 36                  | Program output: 88                 
Correct output: 13                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: 0                  
Correct output: -78                 | Program output: -47                
Correct output: -79                 | Program output: 20                 
Correct output: -4                  | Program output: 65                 
Correct output: -69                 | Program output: -13                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -25                
Correct output: -73                 | Program output: -61                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: 0                  
Correct output: -76                 | Program output: -56                
Correct output: -68                 | Program output: -14                
Correct output: -98                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: -13                
Correct output: -28                 | Program output: 83                 
Correct output: -95                 | Program output: -64                
Correct output: 68                  | Program output: 70                 
Correct output: -84                 | Program output: -46                
Correct output: 29                  | Program output: 66                 
Correct output: -45                 | Program output: 73                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -37                
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 17                 
Correct output: -65                 | Program output: -6                 
Correct output: -25                 | Program output: 88                 
Correct output: -32                 | Program output: 1                  
Correct output: -80                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -80                
Correct output: -81                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 28                 
Correct output: -13                 | Program output: 7                  
Correct output: -58                 | Program output: -1                 
Correct output: -69                 | Program output: -21                
Correct output: -26                 | Program output: 74                 
Correct output: -92                 | Program output: -1                 
Correct output: -80                 | Program output: -8                 
Correct output: -11                 | Program output: 32                 
Correct output: -86                 | Program output: -47                
Correct output: -43                 | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -33                
Correct output: -9                  | Program output: 22                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: 36                 
Correct output: -97                 | Program output: -75                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Lexicase best program: (boolean_frominteger integer_eq print_integer boolean_shove boolean_or exec_when (exec_while ()) exec_shove () integer_empty in3 in1 in2 exec_dup () exec_do*times (print_integer exec_flush integer_lte integer_lt exec_yank integer_gte) integer_dec integer_dec boolean_eq in3 integer_fromboolean exec_if () (exec_while (boolean_stackdepth boolean_dup) exec_if () ()))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Zero cases best program: (boolean_frominteger integer_eq print_integer boolean_shove boolean_or exec_when (exec_while ()) exec_shove () integer_empty in3 in1 in2 exec_dup () exec_do*times (print_integer exec_flush integer_lte integer_lt exec_yank integer_gte) integer_dec integer_dec boolean_eq in3 integer_fromboolean exec_if () (exec_while (boolean_stackdepth boolean_dup) exec_if () ()))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 200 9 131 740 474 668 314 9 195)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (196 200 9 131 740 474 668 314 9 195)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Best program: (boolean_frominteger integer_eq print_integer boolean_shove boolean_or exec_when (exec_while ()) exec_shove () integer_empty in3 in1 in2 exec_dup () exec_do*times (print_integer exec_flush integer_lte integer_lt exec_yank integer_gte) integer_dec integer_dec boolean_eq in3 integer_fromboolean exec_if () (exec_while (boolean_stackdepth boolean_dup) exec_if () ()))
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 41
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.064
Median total errors in population: 6
Error averages by case: (0.804 0.8 0.991 0.869 0.26 0.526 0.332 0.686 0.991 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.506
Average program size in population (points): 51.49
Average percent parens in population: 0.274
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4676532
--- Timings ---
Current time: 1559593846408 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.6 seconds, 54.1%
Fitness Testing:      6.1 seconds, 28.6%
Report:               3.6 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output:                    
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output:                    
Correct output: -87                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -13                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: -25                
Correct output: -73                 | Program output: -61                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -56                
Correct output: -68                 | Program output: -14                
Correct output: -98                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output:                    
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -64                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -46                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -37                
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output:                    
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -80                
Correct output: -81                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -1                 
Correct output: -69                 | Program output: -21                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -1                 
Correct output: -80                 | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -75                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Lexicase best program: (integer_eq exec_when (boolean_pop exec_while ()) exec_shove () integer_empty boolean_frominteger exec_y_when_autoconstructing (in3 integer_eq in1) exec_dup_items exec_dup () integer_lte in2 exec_do*times (print_integer exec_flush integer_lte integer_lt integer_gte) integer_dec integer_dec boolean_eq in3 integer_fromboolean exec_if () (boolean_invert_second_then_and exec_while (boolean_frominteger boolean_stackdepth boolean_dup) exec_if () ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Zero cases best program: (integer_eq exec_when (boolean_pop exec_while ()) exec_shove () integer_empty boolean_frominteger exec_y_when_autoconstructing (in3 integer_eq in1) exec_dup_items exec_dup () integer_lte in2 exec_do*times (print_integer exec_flush integer_lte integer_lt integer_gte) integer_dec integer_dec boolean_eq in3 integer_fromboolean exec_if () (boolean_invert_second_then_and exec_while (boolean_frominteger boolean_stackdepth boolean_dup) exec_if () ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (758 151 163 190 164 422 437 422 722 758)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (758 151 163 190 164 422 437 422 722 758)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if})
Best program: (integer_eq integer_dup boolean_pop exec_shove () integer_empty boolean_frominteger exec_y_when_autoconstructing (in3 integer_add integer_eq in1) exec_dup_items exec_dup () in2 exec_do*times (print_integer exec_flush integer_lte integer_gte) integer_dec integer_dec boolean_eq in3 integer_fromboolean integer_pop exec_if () (exec_while (boolean_frominteger boolean_stackdepth integer_yank boolean_dup) exec_if (exec_if () ()) ()))
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 45
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.813
Median total errors in population: 6
Error averages by case: (0.242 0.849 0.837 0.81 0.836 0.578 0.563 0.578 0.278 0.242)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.751
Average program size in population (points): 47.68
Average percent parens in population: 0.272
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5018625
--- Timings ---
Current time: 1559593848058 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 55.1%
Fitness Testing:      6.5 seconds, 28.0%
Report:               3.8 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -46                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -14                
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -69                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -69                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -6                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: -16                
Correct output: -100                | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -29                 | Program output: -16                
Correct output: -96                 | Program output: -57                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -14                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Lexicase best program: (boolean_frominteger integer_yank print_integer exec_when (boolean_pop integer_shove exec_while ()) exec_shove () integer_empty exec_y_when_autoconstructing (integer_mod in3 in1) boolean_xor in4 exec_dup () exec_do*times (exec_do*times (print_integer exec_y (exec_flush integer_lt integer_gte) integer_dec boolean_eq in3 boolean_stackdepth boolean_dup) exec_if () ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Zero cases best program: (boolean_frominteger integer_yank print_integer exec_when (boolean_pop integer_shove exec_while ()) exec_shove () integer_empty exec_y_when_autoconstructing (integer_mod in3 in1) boolean_xor in4 exec_dup () exec_do*times (exec_do*times (print_integer exec_y (exec_flush integer_lt integer_gte) integer_dec boolean_eq in3 boolean_stackdepth boolean_dup) exec_if () ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (34 124 126 127 221 522 47 204 7 570)
Population mean number of elite cases: 1.98
Count of perfect (error zero) individuals by case: (34 124 126 127 221 522 47 204 7 570)
Population mean number of perfect (error zero) cases: 1.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if})
Best program: (boolean_frominteger integer_yank print_integer exec_when (boolean_pop integer_shove exec_while ()) exec_shove () integer_empty exec_y_when_autoconstructing (integer_mod in3 in1) boolean_xor in4 exec_dup () exec_do*times (exec_do*times (print_integer exec_y (exec_flush integer_lt integer_gte) exec_shove () integer_dec integer_dec boolean_eq in3 boolean_stackdepth boolean_yankdup boolean_dup) exec_if () ()))
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 8.018
Median total errors in population: 8
Error averages by case: (0.966 0.876 0.874 0.873 0.779 0.478 0.953 0.796 0.993 0.43)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.135
Average program size in population (points): 48.598
Average percent parens in population: 0.277
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5371431
--- Timings ---
Current time: 1559593849699 milliseconds
Total Time:          24.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 56.0%
Fitness Testing:      6.8 seconds, 27.5%
Report:               4.0 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -46                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -14                
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -69                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -69                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -6                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: -16                
Correct output: -100                | Program output: -52                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -24                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -29                 | Program output: -16                
Correct output: -96                 | Program output: -57                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -14                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_frominteger integer_yank print_integer exec_when (boolean_pop boolean_flush) exec_empty boolean_dup_times exec_when (exec_while ()) exec_shove () integer_empty exec_y_when_autoconstructing (in3 in1) boolean_xor in4 exec_dup () exec_do*times (exec_do*times (print_integer exec_y (exec_flush integer_lt integer_gte) exec_shove () integer_dec integer_dec boolean_eq in3 boolean_stackdepth boolean_dup) exec_if () (boolean_xor)))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_frominteger integer_yank print_integer exec_when (boolean_pop boolean_flush) exec_empty boolean_dup_times exec_when (exec_while ()) exec_shove () integer_empty exec_y_when_autoconstructing (in3 in1) boolean_xor in4 exec_dup () exec_do*times (exec_do*times (print_integer exec_y (exec_flush integer_lt integer_gte) exec_shove () integer_dec integer_dec boolean_eq in3 boolean_stackdepth boolean_dup) exec_if () (boolean_xor)))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 113 752 307 327 176 294 326 293 269)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (327 113 752 307 327 176 294 326 293 269)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if})
Best program: (boolean_frominteger print_integer boolean_pop exec_shove () integer_empty integer_mod in3 in1 boolean_xor in4 exec_do*times (exec_do*times (print_integer exec_y (exec_flush integer_lt integer_gte) exec_rot () (integer_dec in3 boolean_stackdepth boolean_dup) (integer_dup exec_if () ()))))
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.816
Median total errors in population: 7
Error averages by case: (0.673 0.887 0.248 0.693 0.673 0.824 0.706 0.674 0.707 0.731)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.626
Average program size in population (points): 45.664
Average percent parens in population: 0.283
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5748657
--- Timings ---
Current time: 1559593851385 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 56.6%
Fitness Testing:      7.2 seconds, 27.1%
Report:               4.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 100                
Correct output: 17                  | Program output: 91                 
Correct output: 38                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 38                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 11                  | Program output: 20                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 18                 
Correct output: 37                  | Program output: 93                 
Correct output: 24                  | Program output: 40                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 67                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 46                 
Correct output: 13                  | Program output: 81                 
Correct output: 4                   | Program output: 9                  
Correct output: -87                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: 30                 
Correct output: -4                  | Program output: 35                 
Correct output: -69                 | Program output: -13                
Correct output: -45                 | Program output: 87                 
Correct output: -41                 | Program output: -25                
Correct output: -73                 | Program output: -61                
Correct output: -29                 | Program output: -11                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -56                
Correct output: -68                 | Program output: -14                
Correct output: -98                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: 59                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -64                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -46                
Correct output: 29                  | Program output: 34                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -9                 
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -37                
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 75                 
Correct output: -92                 | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -80                
Correct output: -81                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 46                 
Correct output: -58                 | Program output: -1                 
Correct output: -69                 | Program output: -21                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -1                 
Correct output: -80                 | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 23                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -75                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if})
Lexicase best program: (boolean_frominteger integer_eq print_integer boolean_shove boolean_empty exec_when (integer_lte integer_max exec_while ()) exec_shove () boolean_eq integer_empty in3 in1 in2 boolean_pop in3 exec_dup () exec_do*times (print_integer exec_flush exec_do*times (integer_lte exec_yank integer_fromboolean) integer_gte) integer_dec boolean_dup exec_shove (integer_dec exec_s_when_autoconstructing (boolean_eq integer_fromboolean) (exec_if () (exec_while (exec_if () ()))) ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if})
Zero cases best program: (boolean_frominteger integer_eq print_integer boolean_shove boolean_empty exec_when (integer_lte integer_max exec_while ()) exec_shove () boolean_eq integer_empty in3 in1 in2 boolean_pop in3 exec_dup () exec_do*times (print_integer exec_flush exec_do*times (integer_lte exec_yank integer_fromboolean) integer_gte) integer_dec boolean_dup exec_shove (integer_dec exec_s_when_autoconstructing (boolean_eq integer_fromboolean) (exec_if () (exec_while (exec_if () ()))) ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 197 389 375 365 588 196 201 181 144)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (390 197 389 375 365 588 196 201 181 144)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 2, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if})
Best program: (boolean_frominteger print_integer boolean_invert_first_then_and boolean_shove integer_mult boolean_empty exec_when (exec_while ()) exec_shove () boolean_eq integer_empty in3 in1 boolean_shove in2 boolean_pop exec_dup () exec_do*times (print_integer exec_flush integer_lte exec_yank integer_gte) integer_dec integer_dec exec_s_when_autoconstructing (boolean_eq integer_fromboolean) (exec_if () (boolean_stackdepth exec_dup_times (boolean_shove exec_if () ()))) ())
Errors: [0 0 0 1 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.974
Median total errors in population: 6
Error averages by case: (0.61 0.803 0.611 0.625 0.635 0.412 0.804 0.799 0.819 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.654
Average program size in population (points): 43.689
Average percent parens in population: 0.273
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6191542
--- Timings ---
Current time: 1559593853120 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 57.1%
Fitness Testing:      7.6 seconds, 27.0%
Report:               4.4 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 586
Test mean error for best: 0.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 71                 
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: 74                 
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 57                 
Correct output: 1                   | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 42                 
Correct output: 38                  | Program output: 94                 
Correct output: 9                   | Program output: 12                 
Correct output: 13                  | Program output: 89                 
Correct output: 29                  | Program output: 91                 
Correct output: 60                  | Program output: 86                 
Correct output: 11                  | Program output: 42                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 72                 
Correct output: 37                  | Program output: 59                 
Correct output: 24                  | Program output: 76                 
Correct output: 27                  | Program output: 59                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 64                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 10                 
Correct output: -87                 | Program output: 0                  
Correct output: -78                 | Program output: 89                 
Correct output: -79                 | Program output: 6                  
Correct output: -4                  | Program output: 71                 
Correct output: -69                 | Program output: -13                
Correct output: -45                 | Program output: 13                 
Correct output: -41                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: 22                 
Correct output: -38                 | Program output: 8                  
Correct output: -76                 | Program output: -56                
Correct output: -68                 | Program output: -14                
Correct output: -98                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: 25                 
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -64                
Correct output: 68                  | Program output: 69                 
Correct output: -84                 | Program output: -46                
Correct output: 29                  | Program output: 75                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 79                 
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 1                  
Correct output: 22                  | Program output: 22                 
Correct output: -92                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: 69                 
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -80                
Correct output: -81                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: 44                 
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: -21                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -1                 
Correct output: -80                 | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 15                 
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -75                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup})
Lexicase best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop exec_while () boolean_xor exec_shove () boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 exec_dup () in1 integer_yankdup exec_do*times (print_integer exec_y (integer_lt integer_yankdup) integer_gte) exec_shove () boolean_invert_second_then_and integer_dec boolean_shove print_newline boolean_eq integer_yankdup exec_dup_times () boolean_dup)
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup})
Zero cases best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop exec_while () boolean_xor exec_shove () boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 exec_dup () in1 integer_yankdup exec_do*times (print_integer exec_y (integer_lt integer_yankdup) integer_gte) exec_shove () boolean_invert_second_then_and integer_dec boolean_shove print_newline boolean_eq integer_yankdup exec_dup_times () boolean_dup)
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 450 103 378 324 247 698 170 170 452)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (764 450 103 378 324 247 698 170 170 452)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup})
Best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop exec_while () boolean_xor exec_shove () boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 exec_dup () in1 integer_yankdup exec_do*times (print_integer exec_y (integer_lt integer_yankdup) integer_gte) exec_shove () boolean_invert_second_then_and integer_dec boolean_shove print_newline boolean_eq integer_yankdup exec_dup_times () boolean_dup)
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.244
Median total errors in population: 6
Error averages by case: (0.236 0.55 0.897 0.622 0.676 0.753 0.302 0.83 0.83 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.957
Average program size in population (points): 43.968
Average percent parens in population: 0.270
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6667115
--- Timings ---
Current time: 1559593855284 milliseconds
Total Time:          29.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.2 seconds, 57.4%
Fitness Testing:      8.0 seconds, 26.9%
Report:               4.6 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 100                
Correct output: -84                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 81                 
Correct output: 1                   | Program output: 33                 
Correct output: 15                  | Program output: 75                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 39                 
Correct output: 9                   | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 62                 
Correct output: 60                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 94                 
Correct output: 14                  | Program output: 60                 
Correct output: 45                  | Program output: 52                 
Correct output: 36                  | Program output: 88                 
Correct output: 13                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -3                 
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -23                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -46                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -27                
Correct output: -9                  | Program output: 57                 
Correct output: -28                 | Program output: -13                
Correct output: -28                 | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: 68                  | Program output: 70                 
Correct output: -84                 | Program output: -71                
Correct output: 29                  | Program output: 66                 
Correct output: -45                 | Program output: 73                 
Correct output: -36                 | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -71                 | Program output: 83                 
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -52                
Correct output: -65                 | Program output: -6                 
Correct output: -25                 | Program output: -24                
Correct output: -32                 | Program output: 1                  
Correct output: -80                 | Program output: -38                
Correct output: -29                 | Program output: -16                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 18                 
Correct output: -79                 | Program output: 28                 
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -14                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: 74                 
Correct output: -92                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 32                 
Correct output: -86                 | Program output: -47                
Correct output: -43                 | Program output: 73                 
Correct output: -74                 | Program output: 37                 
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: 22                 
Correct output: -10                 | Program output: 88                 
Correct output: -96                 | Program output: 36                 
Correct output: -97                 | Program output: -18                
Correct output: -32                 | Program output: 79                 
Correct output: -83                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_dup})
Lexicase best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup boolean_xor integer_lte boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 integer_min exec_dup () in1 integer_yankdup exec_do*times (print_integer exec_y (integer_shove integer_yankdup) integer_gte) exec_shove () boolean_invert_second_then_and integer_dec print_newline integer_dec boolean_eq integer_yankdup exec_dup_times () boolean_shove boolean_dup)
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_dup})
Zero cases best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup boolean_xor integer_lte boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 integer_min exec_dup () in1 integer_yankdup exec_do*times (print_integer exec_y (integer_shove integer_yankdup) integer_gte) exec_shove () boolean_invert_second_then_and integer_dec print_newline integer_dec boolean_eq integer_yankdup exec_dup_times () boolean_shove boolean_dup)
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 56 92 361 679 58 624 43 129 102)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (359 56 92 361 679 58 624 43 129 102)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup})
Best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop exec_while () boolean_xor exec_dup_times () exec_shove () exec_eq boolean_frominteger exec_y_when_autoconstructing (integer_mod exec_rot () (in3 in1) (boolean_flush in4 in2) exec_dup () in1 integer_yankdup exec_do*times (print_integer exec_y (integer_lt integer_yankdup) integer_gte) exec_shove () boolean_invert_second_then_and integer_dec boolean_shove print_newline boolean_eq exec_dup_times () boolean_dup))
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.497
Median total errors in population: 8
Error averages by case: (0.641 0.944 0.908 0.639 0.321 0.942 0.376 0.957 0.871 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.476
Average program size in population (points): 41.754
Average percent parens in population: 0.222
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7640743
--- Timings ---
Current time: 1559593857878 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 56.2%
Fitness Testing:      8.9 seconds, 27.5%
Report:               5.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 270
Test mean error for best: 0.27000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 39                 
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 23                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 29                 
Correct output: 60                  | Program output: 60                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 14                  | Program output: 46                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -46                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -27                
Correct output: -9                  | Program output: 3                  
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: 68                  | Program output: 68                 
Correct output: -84                 | Program output: -71                
Correct output: 29                  | Program output: 29                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -29                 | Program output: -16                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 18                 
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: 58                 
Correct output: -83                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_dup})
Lexicase best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup boolean_xor integer_lte boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 integer_min exec_dup () boolean_pop in1 integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove integer_yankdup) integer_gte) exec_shove () integer_dec print_newline integer_dec boolean_eq integer_yankdup boolean_shove boolean_dup)
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_dup})
Zero cases best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup boolean_xor integer_lte boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 integer_min exec_dup () boolean_pop in1 integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove integer_yankdup) integer_gte) exec_shove () integer_dec print_newline integer_dec boolean_eq integer_yankdup boolean_shove boolean_dup)
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 268 399 402 272 320 179 130 31 322)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (235 268 399 402 272 320 179 130 31 322)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_dup})
Best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup boolean_xor integer_lte boolean_frominteger exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 integer_min exec_dup () boolean_pop in1 integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove integer_yankdup) integer_gte) exec_shove () integer_dec print_newline integer_dec boolean_eq integer_yankdup boolean_shove boolean_dup)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 42
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.442
Median total errors in population: 8
Error averages by case: (0.765 0.732 0.601 0.598 0.728 0.68 0.821 0.87 0.969 0.678)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.939
Average program size in population (points): 43.413
Average percent parens in population: 0.217
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8669510
--- Timings ---
Current time: 1559593860519 milliseconds
Total Time:          35.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 55.1%
Fitness Testing:      9.9 seconds, 28.1%
Report:               5.8 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: 39                  | Program output: 39                 
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 57                 
Correct output: 1                   | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 12                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 62                 
Correct output: 60                  | Program output: 60                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: -14                
Correct output: -76                 | Program output: -56                
Correct output: -68                 | Program output: -14                
Correct output: -98                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -69                
Correct output: 68                  | Program output: 69                 
Correct output: -84                 | Program output: -69                
Correct output: 29                  | Program output: 29                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -19                
Correct output: 22                  | Program output: 22                 
Correct output: -92                 | Program output: -16                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup})
Lexicase best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove integer_yankdup) exec_yank integer_gte) exec_shove () integer_dec print_newline integer_dec boolean_eq integer_yankdup boolean_shove exec_yank boolean_dup)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup})
Zero cases best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove integer_yankdup) exec_yank integer_gte) exec_shove () integer_dec print_newline integer_dec boolean_eq integer_yankdup boolean_shove exec_yank boolean_dup)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 409 134 63 444 407 88 429 433 63)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (480 409 134 63 444 407 88 429 433 63)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup})
Best program: (boolean_frominteger boolean_empty integer_yank print_integer exec_eq boolean_pop integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove integer_yankdup) exec_yank integer_gte) exec_shove () integer_dec print_newline integer_dec boolean_eq integer_yankdup boolean_shove exec_yank boolean_dup)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 49
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 7.05
Median total errors in population: 7
Error averages by case: (0.52 0.591 0.866 0.937 0.556 0.593 0.912 0.571 0.567 0.937)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.039
Average program size in population (points): 43.383
Average percent parens in population: 0.167
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9835215
--- Timings ---
Current time: 1559593863305 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 54.0%
Fitness Testing:     10.9 seconds, 28.9%
Report:               6.4 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 183
Test mean error for best: 0.18300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 39                 
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 57                 
Correct output: 1                   | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 12                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 62                 
Correct output: 60                  | Program output: 60                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: 68                  | Program output: 69                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 29                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 22                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup})
Lexicase best program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 51
Percent parens: 0.157
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup})
Zero cases best program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 51
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 458 593 379 343 376 646 178 437 421)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (341 458 593 379 343 376 646 178 437 421)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup})
Best program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 5.828
Median total errors in population: 6
Error averages by case: (0.659 0.542 0.407 0.621 0.657 0.624 0.354 0.822 0.563 0.579)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.647
Average program size in population (points): 48.024
Average percent parens in population: 0.173
Minimum age in population: 18.0
Maximum age in population: 18.0
Average age in population: 18.0
Median age in population: 18.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.011
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 11011588
--- Timings ---
Current time: 1559593866178 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.6 seconds, 53.0%
Fitness Testing:     12.0 seconds, 29.5%
Report:               7.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 18
Successful program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 51


Auto-simplifying with starting size: 51
step: 0
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 500
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1000
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1500
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2000
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2500
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3000
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3500
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4000
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4500
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 5000
program: (boolean_frominteger boolean_empty print_integer exec_eq boolean_invert_second_then_and integer_dup exec_pop (boolean_xor integer_lte) boolean_frominteger exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_mod in3 in1) boolean_flush in4 in2 integer_min exec_dup () boolean_pop) in1 exec_stackdepth integer_yankdup exec_do*times (integer_min print_integer exec_y (integer_shove exec_yankdup integer_yankdup) boolean_or exec_yank integer_gte) exec_shove () integer_dec integer_dec boolean_eq integer_yankdup boolean_shove integer_inc exec_yank boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 183
Test mean error for best: 0.18300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -53                 | Program output: -32                
Correct output: 60                  | Program output: 60                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -49                
Correct output: 39                  | Program output: 39                 
Correct output: -84                 | Program output: -84                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -22                 | Program output: -22                
Correct output: 85                  | Program output: 85                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 57                 
Correct output: 1                   | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 12                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 62                 
Correct output: 60                  | Program output: 60                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -73                 | Program output: -73                
Correct output: -29                 | Program output: -29                
Correct output: -38                 | Program output: -38                
Correct output: -76                 | Program output: -76                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -9                  | Program output: -9                 
Correct output: -28                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: 68                  | Program output: 69                 
Correct output: -84                 | Program output: -84                
Correct output: 29                  | Program output: 29                 
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: 22                  | Program output: 22                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -60                
Correct output: -25                 | Program output: -25                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -29                 | Program output: -29                
Correct output: -96                 | Program output: -96                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -13                 | Program output: -13                
Correct output: -58                 | Program output: -58                
Correct output: -69                 | Program output: -69                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -9                  | Program output: -9                 
Correct output: -10                 | Program output: -10                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
;;******************************
