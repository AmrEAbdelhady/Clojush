Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 -5 -5 -80] -80] [[-32 96 96 96] -32] [[99 99 99 86] 86] [[-50 -50 -50 61] -50] [[-20 96 -20 -20] -20] [[84 84 70 84] 70] [[89 89 89 -12] -12] [[58 58 58 -63] -63] [[97 97 93 97] 93] [[50 -61 50 50] -61] [(63 63 63 63) 63] [(-18 -18 -18 -18) -18] [(52 52 52 52) 52] [(59 59 59 59) 59] [(-47 -47 -47 -47) -47] [(33 13 45 25) 13] [(75 49 76 100) 49] [(50 39 16 14) 14] [(88 38 31 100) 31] [(85 46 57 60) 46] [(69 93 85 55) 55] [(32 86 0 24) 0] [(60 37 24 13) 13] [(18 45 70 71) 18] [(92 35 83 93) 35] [(37 20 11 72) 11] [(79 10 98 64) 10] [(71 80 83 95) 71] [(85 21 25 68) 21] [(13 63 78 69) 13] [(56 41 82 53) 41] [(58 87 18 53) 18] [(95 78 94 17) 17] [(4 41 36 46) 4] [(91 8 11 37) 8] [(79 46 7 75) 7] [(92 36 63 18) 18] [(-99 -27 30 -4) -99] [(-75 -46 -52 57) -75] [(-76 33 60 -27) -76] [(19 13 -87 -66) -87] [(69 25 0 45) 0] [(-13 -49 36 66) -49] [(-51 27 36 -77) -77] [(-21 21 -79 32) -79] [(47 0 -39 16) -39] [(-82 35 92 -59) -82] [(-21 68 -85 -22) -85] [(80 80 1 -52) -52] [(-64 -95 91 -7) -95] [(-52 -22 -56 80) -56] [(-54 -95 -72 -35) -95] [(-46 3 -96 31) -96] [(39 81 -2 -51) -51] [(50 6 -91 53) -91] [(-5 84 74 -30) -30] [(-87 -49 -27 64) -87] [(93 -88 -14 99) -88] [(-81 -15 87 -44) -81] [(91 10 -52 59) -52] [(77 34 -44 -18) -44] [(-61 31 -97 -30) -97] [(-66 -28 -96 59) -96] [(-25 -46 -32 8) -46] [(-25 -56 20 80) -56] [(-74 67 14 -78) -78] [(7 -96 -90 100) -96] [(8 72 -75 38) -75] [(37 -9 57 83) -9] [(30 84 -50 -95) -95] [(25 -34 -41 49) -41] [(61 -41 -56 -6) -56] [(-88 20 -57 36) -88] [(-10 93 52 54) -10] [(-30 89 -38 33) -38] [(44 -43 49 79) -43] [(-81 26 34 45) -81] [(76 76 31 -41) -41] [(-72 -88 95 33) -88] [(99 49 76 11) 11] [(8 99 -87 43) -87] [(26 -30 -65 58) -65] [(-35 24 23 70) -35] [(53 -15 48 11) -15] [(-70 -76 70 -43) -76] [(30 100 28 20) 20] [(-58 -23 43 -88) -88] [(12 -97 73 87) -97] [(1 94 34 6) 1] [(-44 -24 -65 60) -65] [(34 -7 11 57) -7] [(52 -88 -55 -4) -88] [(-87 -58 -70 -51) -87] [(14 56 3 -44) -44] [(38 -32 35 -27) -32])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-5 -5 -5 -80] -80]
Train Case:   6 | Input/Output: [[-32 96 96 96] -32]
Train Case:   7 | Input/Output: [[99 99 99 86] 86]
Train Case:   8 | Input/Output: [[-50 -50 -50 61] -50]
Train Case:   9 | Input/Output: [[-20 96 -20 -20] -20]
Train Case:  10 | Input/Output: [[84 84 70 84] 70]
Train Case:  11 | Input/Output: [[89 89 89 -12] -12]
Train Case:  12 | Input/Output: [[58 58 58 -63] -63]
Train Case:  13 | Input/Output: [[97 97 93 97] 93]
Train Case:  14 | Input/Output: [[50 -61 50 50] -61]
Train Case:  15 | Input/Output: [(63 63 63 63) 63]
Train Case:  16 | Input/Output: [(-18 -18 -18 -18) -18]
Train Case:  17 | Input/Output: [(52 52 52 52) 52]
Train Case:  18 | Input/Output: [(59 59 59 59) 59]
Train Case:  19 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  20 | Input/Output: [(33 13 45 25) 13]
Train Case:  21 | Input/Output: [(75 49 76 100) 49]
Train Case:  22 | Input/Output: [(50 39 16 14) 14]
Train Case:  23 | Input/Output: [(88 38 31 100) 31]
Train Case:  24 | Input/Output: [(85 46 57 60) 46]
Train Case:  25 | Input/Output: [(69 93 85 55) 55]
Train Case:  26 | Input/Output: [(32 86 0 24) 0]
Train Case:  27 | Input/Output: [(60 37 24 13) 13]
Train Case:  28 | Input/Output: [(18 45 70 71) 18]
Train Case:  29 | Input/Output: [(92 35 83 93) 35]
Train Case:  30 | Input/Output: [(37 20 11 72) 11]
Train Case:  31 | Input/Output: [(79 10 98 64) 10]
Train Case:  32 | Input/Output: [(71 80 83 95) 71]
Train Case:  33 | Input/Output: [(85 21 25 68) 21]
Train Case:  34 | Input/Output: [(13 63 78 69) 13]
Train Case:  35 | Input/Output: [(56 41 82 53) 41]
Train Case:  36 | Input/Output: [(58 87 18 53) 18]
Train Case:  37 | Input/Output: [(95 78 94 17) 17]
Train Case:  38 | Input/Output: [(4 41 36 46) 4]
Train Case:  39 | Input/Output: [(91 8 11 37) 8]
Train Case:  40 | Input/Output: [(79 46 7 75) 7]
Train Case:  41 | Input/Output: [(92 36 63 18) 18]
Train Case:  42 | Input/Output: [(-99 -27 30 -4) -99]
Train Case:  43 | Input/Output: [(-75 -46 -52 57) -75]
Train Case:  44 | Input/Output: [(-76 33 60 -27) -76]
Train Case:  45 | Input/Output: [(19 13 -87 -66) -87]
Train Case:  46 | Input/Output: [(69 25 0 45) 0]
Train Case:  47 | Input/Output: [(-13 -49 36 66) -49]
Train Case:  48 | Input/Output: [(-51 27 36 -77) -77]
Train Case:  49 | Input/Output: [(-21 21 -79 32) -79]
Train Case:  50 | Input/Output: [(47 0 -39 16) -39]
Train Case:  51 | Input/Output: [(-82 35 92 -59) -82]
Train Case:  52 | Input/Output: [(-21 68 -85 -22) -85]
Train Case:  53 | Input/Output: [(80 80 1 -52) -52]
Train Case:  54 | Input/Output: [(-64 -95 91 -7) -95]
Train Case:  55 | Input/Output: [(-52 -22 -56 80) -56]
Train Case:  56 | Input/Output: [(-54 -95 -72 -35) -95]
Train Case:  57 | Input/Output: [(-46 3 -96 31) -96]
Train Case:  58 | Input/Output: [(39 81 -2 -51) -51]
Train Case:  59 | Input/Output: [(50 6 -91 53) -91]
Train Case:  60 | Input/Output: [(-5 84 74 -30) -30]
Train Case:  61 | Input/Output: [(-87 -49 -27 64) -87]
Train Case:  62 | Input/Output: [(93 -88 -14 99) -88]
Train Case:  63 | Input/Output: [(-81 -15 87 -44) -81]
Train Case:  64 | Input/Output: [(91 10 -52 59) -52]
Train Case:  65 | Input/Output: [(77 34 -44 -18) -44]
Train Case:  66 | Input/Output: [(-61 31 -97 -30) -97]
Train Case:  67 | Input/Output: [(-66 -28 -96 59) -96]
Train Case:  68 | Input/Output: [(-25 -46 -32 8) -46]
Train Case:  69 | Input/Output: [(-25 -56 20 80) -56]
Train Case:  70 | Input/Output: [(-74 67 14 -78) -78]
Train Case:  71 | Input/Output: [(7 -96 -90 100) -96]
Train Case:  72 | Input/Output: [(8 72 -75 38) -75]
Train Case:  73 | Input/Output: [(37 -9 57 83) -9]
Train Case:  74 | Input/Output: [(30 84 -50 -95) -95]
Train Case:  75 | Input/Output: [(25 -34 -41 49) -41]
Train Case:  76 | Input/Output: [(61 -41 -56 -6) -56]
Train Case:  77 | Input/Output: [(-88 20 -57 36) -88]
Train Case:  78 | Input/Output: [(-10 93 52 54) -10]
Train Case:  79 | Input/Output: [(-30 89 -38 33) -38]
Train Case:  80 | Input/Output: [(44 -43 49 79) -43]
Train Case:  81 | Input/Output: [(-81 26 34 45) -81]
Train Case:  82 | Input/Output: [(76 76 31 -41) -41]
Train Case:  83 | Input/Output: [(-72 -88 95 33) -88]
Train Case:  84 | Input/Output: [(99 49 76 11) 11]
Train Case:  85 | Input/Output: [(8 99 -87 43) -87]
Train Case:  86 | Input/Output: [(26 -30 -65 58) -65]
Train Case:  87 | Input/Output: [(-35 24 23 70) -35]
Train Case:  88 | Input/Output: [(53 -15 48 11) -15]
Train Case:  89 | Input/Output: [(-70 -76 70 -43) -76]
Train Case:  90 | Input/Output: [(30 100 28 20) 20]
Train Case:  91 | Input/Output: [(-58 -23 43 -88) -88]
Train Case:  92 | Input/Output: [(12 -97 73 87) -97]
Train Case:  93 | Input/Output: [(1 94 34 6) 1]
Train Case:  94 | Input/Output: [(-44 -24 -65 60) -65]
Train Case:  95 | Input/Output: [(34 -7 11 57) -7]
Train Case:  96 | Input/Output: [(52 -88 -55 -4) -88]
Train Case:  97 | Input/Output: [(-87 -58 -70 -51) -87]
Train Case:  98 | Input/Output: [(14 56 3 -44) -44]
Train Case:  99 | Input/Output: [(38 -32 35 -27) -32]
Test Case:   0 | Input/Output: [[92 92 92 100] 92]
Test Case:   1 | Input/Output: [[-22 -98 -98 -98] -98]
Test Case:   2 | Input/Output: [[9 9 -99 9] -99]
Test Case:   3 | Input/Output: [[-58 -70 -70 -70] -70]
Test Case:   4 | Input/Output: [[13 -100 13 13] -100]
Test Case:   5 | Input/Output: [[-21 -21 -57 -21] -57]
Test Case:   6 | Input/Output: [[-52 -52 -1 -52] -52]
Test Case:   7 | Input/Output: [[-83 -41 -83 -83] -83]
Test Case:   8 | Input/Output: [[75 -81 -81 -81] -81]
Test Case:   9 | Input/Output: [[-77 -77 -61 -77] -77]
Test Case:  10 | Input/Output: [[-33 -33 -33 -11] -33]
Test Case:  11 | Input/Output: [[-19 -90 -90 -90] -90]
Test Case:  12 | Input/Output: [[52 57 52 52] 52]
Test Case:  13 | Input/Output: [[51 51 51 -39] -39]
Test Case:  14 | Input/Output: [[-76 73 73 73] -76]
Test Case:  15 | Input/Output: [[-41 -41 -44 -41] -44]
Test Case:  16 | Input/Output: [[47 47 47 88] 47]
Test Case:  17 | Input/Output: [[74 34 74 74] 34]
Test Case:  18 | Input/Output: [[-7 -7 -5 -7] -7]
Test Case:  19 | Input/Output: [[1 -72 -72 -72] -72]
Test Case:  20 | Input/Output: [[97 -93 -93 -93] -93]
Test Case:  21 | Input/Output: [[-47 -99 -47 -47] -99]
Test Case:  22 | Input/Output: [[19 19 40 19] 19]
Test Case:  23 | Input/Output: [[-36 -57 -57 -57] -57]
Test Case:  24 | Input/Output: [[9 -95 -95 -95] -95]
Test Case:  25 | Input/Output: [[63 63 63 74] 63]
Test Case:  26 | Input/Output: [[-71 -60 -71 -71] -71]
Test Case:  27 | Input/Output: [[66 19 66 66] 19]
Test Case:  28 | Input/Output: [[59 1 59 59] 1]
Test Case:  29 | Input/Output: [[85 -5 85 85] -5]
Test Case:  30 | Input/Output: [[80 80 2 80] 2]
Test Case:  31 | Input/Output: [[-7 44 -7 -7] -7]
Test Case:  32 | Input/Output: [[15 -15 -15 -15] -15]
Test Case:  33 | Input/Output: [[-35 75 -35 -35] -35]
Test Case:  34 | Input/Output: [[83 -10 -10 -10] -10]
Test Case:  35 | Input/Output: [[-94 -94 -94 95] -94]
Test Case:  36 | Input/Output: [[87 87 87 9] 9]
Test Case:  37 | Input/Output: [[74 10 10 10] 10]
Test Case:  38 | Input/Output: [[28 28 28 78] 28]
Test Case:  39 | Input/Output: [[-44 62 62 62] -44]
Test Case:  40 | Input/Output: [[-37 -37 -37 15] -37]
Test Case:  41 | Input/Output: [[36 36 36 59] 36]
Test Case:  42 | Input/Output: [[-29 32 -29 -29] -29]
Test Case:  43 | Input/Output: [[30 57 57 57] 30]
Test Case:  44 | Input/Output: [[-88 -4 -4 -4] -88]
Test Case:  45 | Input/Output: [[29 -13 -13 -13] -13]
Test Case:  46 | Input/Output: [[-11 -83 -83 -83] -83]
Test Case:  47 | Input/Output: [[22 -27 -27 -27] -27]
Test Case:  48 | Input/Output: [[74 74 38 74] 38]
Test Case:  49 | Input/Output: [[33 -100 -100 -100] -100]
Test Case:  50 | Input/Output: [[22 92 92 92] 22]
Test Case:  51 | Input/Output: [[100 100 -4 100] -4]
Test Case:  52 | Input/Output: [[1 -56 1 1] -56]
Test Case:  53 | Input/Output: [[-41 6 6 6] -41]
Test Case:  54 | Input/Output: [[94 94 -20 94] -20]
Test Case:  55 | Input/Output: [[-10 -10 -10 -35] -35]
Test Case:  56 | Input/Output: [[-68 -68 -68 86] -68]
Test Case:  57 | Input/Output: [[-89 -89 -68 -89] -89]
Test Case:  58 | Input/Output: [[-8 -8 -8 1] -8]
Test Case:  59 | Input/Output: [[5 40 40 40] 5]
Test Case:  60 | Input/Output: [[-69 -60 -69 -69] -69]
Test Case:  61 | Input/Output: [[-90 -44 -44 -44] -90]
Test Case:  62 | Input/Output: [[-57 72 -57 -57] -57]
Test Case:  63 | Input/Output: [[57 57 57 -85] -85]
Test Case:  64 | Input/Output: [[83 83 50 83] 50]
Test Case:  65 | Input/Output: [[46 46 46 -8] -8]
Test Case:  66 | Input/Output: [[-77 -77 -77 -99] -99]
Test Case:  67 | Input/Output: [[-23 -23 -64 -23] -64]
Test Case:  68 | Input/Output: [[12 -14 12 12] -14]
Test Case:  69 | Input/Output: [[15 15 15 66] 15]
Test Case:  70 | Input/Output: [[46 46 46 -45] -45]
Test Case:  71 | Input/Output: [[78 78 78 72] 72]
Test Case:  72 | Input/Output: [[-18 -18 -18 -49] -49]
Test Case:  73 | Input/Output: [[-29 -26 -29 -29] -29]
Test Case:  74 | Input/Output: [[62 62 62 -87] -87]
Test Case:  75 | Input/Output: [[-68 -49 -68 -68] -68]
Test Case:  76 | Input/Output: [[86 -26 86 86] -26]
Test Case:  77 | Input/Output: [[-50 -50 -50 26] -50]
Test Case:  78 | Input/Output: [[18 74 74 74] 18]
Test Case:  79 | Input/Output: [[-41 73 -41 -41] -41]
Test Case:  80 | Input/Output: [[78 -69 -69 -69] -69]
Test Case:  81 | Input/Output: [[66 66 66 30] 30]
Test Case:  82 | Input/Output: [[51 51 51 1] 1]
Test Case:  83 | Input/Output: [[-31 -57 -31 -31] -57]
Test Case:  84 | Input/Output: [[-62 -62 -62 10] -62]
Test Case:  85 | Input/Output: [[-66 -66 -68 -66] -68]
Test Case:  86 | Input/Output: [[-67 60 -67 -67] -67]
Test Case:  87 | Input/Output: [[-46 26 -46 -46] -46]
Test Case:  88 | Input/Output: [[-14 -28 -28 -28] -28]
Test Case:  89 | Input/Output: [[90 90 90 90] 90]
Test Case:  90 | Input/Output: [[-78 54 54 54] -78]
Test Case:  91 | Input/Output: [[53 -56 -56 -56] -56]
Test Case:  92 | Input/Output: [[34 1 34 34] 1]
Test Case:  93 | Input/Output: [[-52 -52 50 -52] -52]
Test Case:  94 | Input/Output: [[-63 -39 -39 -39] -63]
Test Case:  95 | Input/Output: [[7 7 -15 7] -15]
Test Case:  96 | Input/Output: [[11 11 11 54] 11]
Test Case:  97 | Input/Output: [[1 57 1 1] 1]
Test Case:  98 | Input/Output: [[-17 -17 -17 -3] -17]
Test Case:  99 | Input/Output: [[-59 -59 -8 -59] -59]
Test Case: 100 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 101 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 102 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 103 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 104 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 105 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 106 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 107 | Input/Output: [(4 4 4 4) 4]
Test Case: 108 | Input/Output: [(70 70 70 70) 70]
Test Case: 109 | Input/Output: [(69 69 69 69) 69]
Test Case: 110 | Input/Output: [(27 27 27 27) 27]
Test Case: 111 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 112 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 113 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 114 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 115 | Input/Output: [(64 64 64 64) 64]
Test Case: 116 | Input/Output: [(75 75 75 75) 75]
Test Case: 117 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 118 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 119 | Input/Output: [(30 30 30 30) 30]
Test Case: 120 | Input/Output: [(50 50 50 50) 50]
Test Case: 121 | Input/Output: [(14 14 14 14) 14]
Test Case: 122 | Input/Output: [(93 93 93 93) 93]
Test Case: 123 | Input/Output: [(32 32 32 32) 32]
Test Case: 124 | Input/Output: [(96 96 96 96) 96]
Test Case: 125 | Input/Output: [(77 77 77 77) 77]
Test Case: 126 | Input/Output: [(66 66 66 66) 66]
Test Case: 127 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 128 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 129 | Input/Output: [(19 19 19 19) 19]
Test Case: 130 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 131 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 132 | Input/Output: [(10 10 10 10) 10]
Test Case: 133 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 134 | Input/Output: [(5 5 5 5) 5]
Test Case: 135 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 136 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 137 | Input/Output: [(19 19 19 19) 19]
Test Case: 138 | Input/Output: [(30 30 30 30) 30]
Test Case: 139 | Input/Output: [(83 83 83 83) 83]
Test Case: 140 | Input/Output: [(3 3 3 3) 3]
Test Case: 141 | Input/Output: [(83 83 83 83) 83]
Test Case: 142 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 143 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 144 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 145 | Input/Output: [(80 80 80 80) 80]
Test Case: 146 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 147 | Input/Output: [(26 26 26 26) 26]
Test Case: 148 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 149 | Input/Output: [(23 23 23 23) 23]
Test Case: 150 | Input/Output: [(32 32 32 32) 32]
Test Case: 151 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 152 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 153 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 154 | Input/Output: [(84 84 84 84) 84]
Test Case: 155 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 156 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 157 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 158 | Input/Output: [(51 51 51 51) 51]
Test Case: 159 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 160 | Input/Output: [(88 88 88 88) 88]
Test Case: 161 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 162 | Input/Output: [(97 97 97 97) 97]
Test Case: 163 | Input/Output: [(90 90 90 90) 90]
Test Case: 164 | Input/Output: [(99 99 99 99) 99]
Test Case: 165 | Input/Output: [(31 31 31 31) 31]
Test Case: 166 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 167 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 168 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 169 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 170 | Input/Output: [(91 91 91 91) 91]
Test Case: 171 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 172 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 173 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 174 | Input/Output: [(97 97 97 97) 97]
Test Case: 175 | Input/Output: [(99 99 99 99) 99]
Test Case: 176 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 177 | Input/Output: [(55 55 55 55) 55]
Test Case: 178 | Input/Output: [(94 94 94 94) 94]
Test Case: 179 | Input/Output: [(16 16 16 16) 16]
Test Case: 180 | Input/Output: [(57 57 57 57) 57]
Test Case: 181 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 182 | Input/Output: [(87 87 87 87) 87]
Test Case: 183 | Input/Output: [(41 41 41 41) 41]
Test Case: 184 | Input/Output: [(57 57 57 57) 57]
Test Case: 185 | Input/Output: [(62 62 62 62) 62]
Test Case: 186 | Input/Output: [(31 31 31 31) 31]
Test Case: 187 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 188 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 189 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 190 | Input/Output: [(73 73 73 73) 73]
Test Case: 191 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 192 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 193 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 194 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 195 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 196 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 197 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 198 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 199 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 200 | Input/Output: [(47 78 39 81) 39]
Test Case: 201 | Input/Output: [(54 58 90 30) 30]
Test Case: 202 | Input/Output: [(16 89 49 77) 16]
Test Case: 203 | Input/Output: [(87 85 18 99) 18]
Test Case: 204 | Input/Output: [(9 45 66 81) 9]
Test Case: 205 | Input/Output: [(12 78 45 65) 12]
Test Case: 206 | Input/Output: [(79 84 26 0) 0]
Test Case: 207 | Input/Output: [(76 83 42 67) 42]
Test Case: 208 | Input/Output: [(68 19 55 76) 19]
Test Case: 209 | Input/Output: [(58 59 83 80) 58]
Test Case: 210 | Input/Output: [(15 58 28 33) 15]
Test Case: 211 | Input/Output: [(5 83 16 77) 5]
Test Case: 212 | Input/Output: [(64 71 44 83) 44]
Test Case: 213 | Input/Output: [(76 80 68 3) 3]
Test Case: 214 | Input/Output: [(35 44 4 34) 4]
Test Case: 215 | Input/Output: [(46 99 14 21) 14]
Test Case: 216 | Input/Output: [(30 45 42 41) 30]
Test Case: 217 | Input/Output: [(14 97 100 91) 14]
Test Case: 218 | Input/Output: [(54 17 68 18) 17]
Test Case: 219 | Input/Output: [(66 92 5 40) 5]
Test Case: 220 | Input/Output: [(25 58 12 30) 12]
Test Case: 221 | Input/Output: [(40 50 99 33) 33]
Test Case: 222 | Input/Output: [(95 0 70 10) 0]
Test Case: 223 | Input/Output: [(50 41 48 18) 18]
Test Case: 224 | Input/Output: [(98 5 10 86) 5]
Test Case: 225 | Input/Output: [(56 59 67 99) 56]
Test Case: 226 | Input/Output: [(26 3 36 81) 3]
Test Case: 227 | Input/Output: [(80 10 59 66) 10]
Test Case: 228 | Input/Output: [(26 64 10 48) 10]
Test Case: 229 | Input/Output: [(85 95 10 98) 10]
Test Case: 230 | Input/Output: [(38 39 5 2) 2]
Test Case: 231 | Input/Output: [(46 30 66 70) 30]
Test Case: 232 | Input/Output: [(92 24 12 98) 12]
Test Case: 233 | Input/Output: [(16 31 1 64) 1]
Test Case: 234 | Input/Output: [(79 53 58 76) 53]
Test Case: 235 | Input/Output: [(18 63 42 67) 18]
Test Case: 236 | Input/Output: [(15 93 30 12) 12]
Test Case: 237 | Input/Output: [(79 91 33 10) 10]
Test Case: 238 | Input/Output: [(35 34 8 53) 8]
Test Case: 239 | Input/Output: [(7 70 87 77) 7]
Test Case: 240 | Input/Output: [(65 12 93 35) 12]
Test Case: 241 | Input/Output: [(85 56 44 3) 3]
Test Case: 242 | Input/Output: [(80 93 20 98) 20]
Test Case: 243 | Input/Output: [(25 13 51 52) 13]
Test Case: 244 | Input/Output: [(28 3 19 11) 3]
Test Case: 245 | Input/Output: [(46 37 24 64) 24]
Test Case: 246 | Input/Output: [(29 6 21 79) 6]
Test Case: 247 | Input/Output: [(34 85 49 18) 18]
Test Case: 248 | Input/Output: [(10 36 15 65) 10]
Test Case: 249 | Input/Output: [(19 33 52 82) 19]
Test Case: 250 | Input/Output: [(69 13 7 92) 7]
Test Case: 251 | Input/Output: [(83 26 44 65) 26]
Test Case: 252 | Input/Output: [(82 91 2 96) 2]
Test Case: 253 | Input/Output: [(29 77 28 94) 28]
Test Case: 254 | Input/Output: [(11 60 25 54) 11]
Test Case: 255 | Input/Output: [(66 8 1 39) 1]
Test Case: 256 | Input/Output: [(50 35 79 15) 15]
Test Case: 257 | Input/Output: [(67 14 66 32) 14]
Test Case: 258 | Input/Output: [(23 94 90 32) 23]
Test Case: 259 | Input/Output: [(34 14 22 56) 14]
Test Case: 260 | Input/Output: [(19 25 7 42) 7]
Test Case: 261 | Input/Output: [(54 0 7 18) 0]
Test Case: 262 | Input/Output: [(67 85 53 61) 53]
Test Case: 263 | Input/Output: [(34 34 65 88) 34]
Test Case: 264 | Input/Output: [(93 11 79 47) 11]
Test Case: 265 | Input/Output: [(85 79 46 38) 38]
Test Case: 266 | Input/Output: [(29 59 86 6) 6]
Test Case: 267 | Input/Output: [(90 64 92 79) 64]
Test Case: 268 | Input/Output: [(99 22 71 20) 20]
Test Case: 269 | Input/Output: [(58 73 38 98) 38]
Test Case: 270 | Input/Output: [(74 25 21 64) 21]
Test Case: 271 | Input/Output: [(32 25 86 1) 1]
Test Case: 272 | Input/Output: [(50 14 79 65) 14]
Test Case: 273 | Input/Output: [(17 52 65 50) 17]
Test Case: 274 | Input/Output: [(1 44 7 42) 1]
Test Case: 275 | Input/Output: [(6 7 18 17) 6]
Test Case: 276 | Input/Output: [(91 55 69 34) 34]
Test Case: 277 | Input/Output: [(25 27 48 96) 25]
Test Case: 278 | Input/Output: [(31 60 15 44) 15]
Test Case: 279 | Input/Output: [(24 2 69 92) 2]
Test Case: 280 | Input/Output: [(34 0 5 12) 0]
Test Case: 281 | Input/Output: [(97 45 44 87) 44]
Test Case: 282 | Input/Output: [(98 68 9 52) 9]
Test Case: 283 | Input/Output: [(15 62 20 91) 15]
Test Case: 284 | Input/Output: [(21 97 99 5) 5]
Test Case: 285 | Input/Output: [(67 16 97 74) 16]
Test Case: 286 | Input/Output: [(34 1 9 45) 1]
Test Case: 287 | Input/Output: [(15 77 29 12) 12]
Test Case: 288 | Input/Output: [(62 26 53 1) 1]
Test Case: 289 | Input/Output: [(81 55 97 79) 55]
Test Case: 290 | Input/Output: [(58 3 80 71) 3]
Test Case: 291 | Input/Output: [(5 19 75 0) 0]
Test Case: 292 | Input/Output: [(98 65 96 9) 9]
Test Case: 293 | Input/Output: [(41 41 2 79) 2]
Test Case: 294 | Input/Output: [(44 95 5 34) 5]
Test Case: 295 | Input/Output: [(14 31 85 12) 12]
Test Case: 296 | Input/Output: [(21 8 32 35) 8]
Test Case: 297 | Input/Output: [(23 69 50 35) 23]
Test Case: 298 | Input/Output: [(22 70 10 22) 10]
Test Case: 299 | Input/Output: [(32 84 50 61) 32]
Test Case: 300 | Input/Output: [(45 38 23 68) 23]
Test Case: 301 | Input/Output: [(9 60 59 44) 9]
Test Case: 302 | Input/Output: [(15 41 78 76) 15]
Test Case: 303 | Input/Output: [(61 89 82 72) 61]
Test Case: 304 | Input/Output: [(13 71 15 11) 11]
Test Case: 305 | Input/Output: [(50 54 34 32) 32]
Test Case: 306 | Input/Output: [(85 43 2 0) 0]
Test Case: 307 | Input/Output: [(58 44 71 34) 34]
Test Case: 308 | Input/Output: [(32 25 72 3) 3]
Test Case: 309 | Input/Output: [(100 47 18 40) 18]
Test Case: 310 | Input/Output: [(58 41 86 7) 7]
Test Case: 311 | Input/Output: [(41 50 53 77) 41]
Test Case: 312 | Input/Output: [(81 37 28 68) 28]
Test Case: 313 | Input/Output: [(75 0 50 79) 0]
Test Case: 314 | Input/Output: [(49 63 34 3) 3]
Test Case: 315 | Input/Output: [(91 44 39 77) 39]
Test Case: 316 | Input/Output: [(42 0 42 28) 0]
Test Case: 317 | Input/Output: [(46 21 31 11) 11]
Test Case: 318 | Input/Output: [(52 92 21 8) 8]
Test Case: 319 | Input/Output: [(54 42 72 47) 42]
Test Case: 320 | Input/Output: [(39 40 96 56) 39]
Test Case: 321 | Input/Output: [(76 61 48 3) 3]
Test Case: 322 | Input/Output: [(53 97 72 22) 22]
Test Case: 323 | Input/Output: [(35 21 68 64) 21]
Test Case: 324 | Input/Output: [(92 17 99 46) 17]
Test Case: 325 | Input/Output: [(98 6 29 84) 6]
Test Case: 326 | Input/Output: [(72 97 39 44) 39]
Test Case: 327 | Input/Output: [(7 49 8 30) 7]
Test Case: 328 | Input/Output: [(85 79 59 65) 59]
Test Case: 329 | Input/Output: [(61 19 33 95) 19]
Test Case: 330 | Input/Output: [(57 64 44 86) 44]
Test Case: 331 | Input/Output: [(23 63 90 28) 23]
Test Case: 332 | Input/Output: [(28 90 92 15) 15]
Test Case: 333 | Input/Output: [(30 8 13 6) 6]
Test Case: 334 | Input/Output: [(16 75 59 25) 16]
Test Case: 335 | Input/Output: [(94 57 42 56) 42]
Test Case: 336 | Input/Output: [(55 5 33 67) 5]
Test Case: 337 | Input/Output: [(65 97 9 38) 9]
Test Case: 338 | Input/Output: [(29 28 76 86) 28]
Test Case: 339 | Input/Output: [(54 89 58 28) 28]
Test Case: 340 | Input/Output: [(43 94 19 35) 19]
Test Case: 341 | Input/Output: [(80 88 72 12) 12]
Test Case: 342 | Input/Output: [(90 62 51 89) 51]
Test Case: 343 | Input/Output: [(98 67 92 15) 15]
Test Case: 344 | Input/Output: [(13 58 0 57) 0]
Test Case: 345 | Input/Output: [(62 40 100 30) 30]
Test Case: 346 | Input/Output: [(5 0 79 80) 0]
Test Case: 347 | Input/Output: [(3 23 7 71) 3]
Test Case: 348 | Input/Output: [(25 55 92 70) 25]
Test Case: 349 | Input/Output: [(84 77 52 63) 52]
Test Case: 350 | Input/Output: [(12 11 94 31) 11]
Test Case: 351 | Input/Output: [(18 30 91 11) 11]
Test Case: 352 | Input/Output: [(41 38 0 35) 0]
Test Case: 353 | Input/Output: [(10 67 45 88) 10]
Test Case: 354 | Input/Output: [(90 51 18 34) 18]
Test Case: 355 | Input/Output: [(2 99 75 8) 2]
Test Case: 356 | Input/Output: [(68 50 19 100) 19]
Test Case: 357 | Input/Output: [(12 58 97 75) 12]
Test Case: 358 | Input/Output: [(14 66 61 66) 14]
Test Case: 359 | Input/Output: [(70 85 81 42) 42]
Test Case: 360 | Input/Output: [(14 12 67 83) 12]
Test Case: 361 | Input/Output: [(31 11 0 5) 0]
Test Case: 362 | Input/Output: [(78 62 49 87) 49]
Test Case: 363 | Input/Output: [(59 75 29 8) 8]
Test Case: 364 | Input/Output: [(98 45 33 96) 33]
Test Case: 365 | Input/Output: [(85 43 97 66) 43]
Test Case: 366 | Input/Output: [(70 37 33 88) 33]
Test Case: 367 | Input/Output: [(71 58 88 22) 22]
Test Case: 368 | Input/Output: [(10 6 16 52) 6]
Test Case: 369 | Input/Output: [(8 13 54 58) 8]
Test Case: 370 | Input/Output: [(66 96 84 96) 66]
Test Case: 371 | Input/Output: [(62 25 52 55) 25]
Test Case: 372 | Input/Output: [(57 51 77 87) 51]
Test Case: 373 | Input/Output: [(3 96 73 78) 3]
Test Case: 374 | Input/Output: [(31 84 91 21) 21]
Test Case: 375 | Input/Output: [(16 32 34 79) 16]
Test Case: 376 | Input/Output: [(74 76 98 5) 5]
Test Case: 377 | Input/Output: [(55 36 65 100) 36]
Test Case: 378 | Input/Output: [(25 14 23 63) 14]
Test Case: 379 | Input/Output: [(57 7 56 62) 7]
Test Case: 380 | Input/Output: [(18 61 33 63) 18]
Test Case: 381 | Input/Output: [(11 41 94 34) 11]
Test Case: 382 | Input/Output: [(26 60 91 29) 26]
Test Case: 383 | Input/Output: [(65 74 68 99) 65]
Test Case: 384 | Input/Output: [(53 97 80 55) 53]
Test Case: 385 | Input/Output: [(23 80 6 32) 6]
Test Case: 386 | Input/Output: [(28 13 50 3) 3]
Test Case: 387 | Input/Output: [(100 95 80 3) 3]
Test Case: 388 | Input/Output: [(81 17 30 11) 11]
Test Case: 389 | Input/Output: [(31 66 63 9) 9]
Test Case: 390 | Input/Output: [(2 77 39 8) 2]
Test Case: 391 | Input/Output: [(57 37 42 5) 5]
Test Case: 392 | Input/Output: [(2 16 7 31) 2]
Test Case: 393 | Input/Output: [(87 41 22 100) 22]
Test Case: 394 | Input/Output: [(87 82 93 96) 82]
Test Case: 395 | Input/Output: [(12 65 56 90) 12]
Test Case: 396 | Input/Output: [(34 6 54 89) 6]
Test Case: 397 | Input/Output: [(80 15 77 88) 15]
Test Case: 398 | Input/Output: [(9 54 93 59) 9]
Test Case: 399 | Input/Output: [(48 53 100 76) 48]
Test Case: 400 | Input/Output: [(-15 -5 72 -19) -19]
Test Case: 401 | Input/Output: [(-42 -70 -96 71) -96]
Test Case: 402 | Input/Output: [(97 -69 83 76) -69]
Test Case: 403 | Input/Output: [(-24 -98 77 -40) -98]
Test Case: 404 | Input/Output: [(73 1 -64 -33) -64]
Test Case: 405 | Input/Output: [(-75 28 61 26) -75]
Test Case: 406 | Input/Output: [(25 -27 -50 -10) -50]
Test Case: 407 | Input/Output: [(85 -4 -90 94) -90]
Test Case: 408 | Input/Output: [(-8 -84 46 24) -84]
Test Case: 409 | Input/Output: [(-75 -9 -52 -93) -93]
Test Case: 410 | Input/Output: [(-24 -83 -91 48) -91]
Test Case: 411 | Input/Output: [(4 64 -2 92) -2]
Test Case: 412 | Input/Output: [(-62 -53 40 -6) -62]
Test Case: 413 | Input/Output: [(28 -99 -32 41) -99]
Test Case: 414 | Input/Output: [(-17 65 -91 -38) -91]
Test Case: 415 | Input/Output: [(-2 -100 -82 -38) -100]
Test Case: 416 | Input/Output: [(-98 3 53 -3) -98]
Test Case: 417 | Input/Output: [(1 94 -11 -55) -55]
Test Case: 418 | Input/Output: [(21 41 40 -41) -41]
Test Case: 419 | Input/Output: [(-62 90 -24 -13) -62]
Test Case: 420 | Input/Output: [(66 19 80 47) 19]
Test Case: 421 | Input/Output: [(-4 41 32 -69) -69]
Test Case: 422 | Input/Output: [(10 83 30 62) 10]
Test Case: 423 | Input/Output: [(-54 72 83 -99) -99]
Test Case: 424 | Input/Output: [(-17 0 -52 -21) -52]
Test Case: 425 | Input/Output: [(67 53 24 18) 18]
Test Case: 426 | Input/Output: [(60 -20 -23 3) -23]
Test Case: 427 | Input/Output: [(-31 -65 51 89) -65]
Test Case: 428 | Input/Output: [(75 31 97 67) 31]
Test Case: 429 | Input/Output: [(-56 27 23 -47) -56]
Test Case: 430 | Input/Output: [(-74 62 -50 -51) -74]
Test Case: 431 | Input/Output: [(-69 -1 -63 -35) -69]
Test Case: 432 | Input/Output: [(62 25 22 -68) -68]
Test Case: 433 | Input/Output: [(11 28 -76 85) -76]
Test Case: 434 | Input/Output: [(-26 -35 96 -63) -63]
Test Case: 435 | Input/Output: [(35 94 86 -2) -2]
Test Case: 436 | Input/Output: [(25 52 30 23) 23]
Test Case: 437 | Input/Output: [(34 8 31 89) 8]
Test Case: 438 | Input/Output: [(45 43 -46 -36) -46]
Test Case: 439 | Input/Output: [(-40 -73 40 50) -73]
Test Case: 440 | Input/Output: [(9 22 68 -67) -67]
Test Case: 441 | Input/Output: [(-42 -100 53 40) -100]
Test Case: 442 | Input/Output: [(-62 -51 -6 66) -62]
Test Case: 443 | Input/Output: [(-60 89 26 -30) -60]
Test Case: 444 | Input/Output: [(-65 -49 68 81) -65]
Test Case: 445 | Input/Output: [(-90 -34 -95 -37) -95]
Test Case: 446 | Input/Output: [(-53 1 69 53) -53]
Test Case: 447 | Input/Output: [(-20 15 52 -26) -26]
Test Case: 448 | Input/Output: [(40 -58 -15 -50) -58]
Test Case: 449 | Input/Output: [(44 33 56 2) 2]
Test Case: 450 | Input/Output: [(-14 88 51 -45) -45]
Test Case: 451 | Input/Output: [(16 42 -22 4) -22]
Test Case: 452 | Input/Output: [(-71 49 68 80) -71]
Test Case: 453 | Input/Output: [(-68 -26 12 48) -68]
Test Case: 454 | Input/Output: [(20 11 4 -18) -18]
Test Case: 455 | Input/Output: [(-67 11 -93 55) -93]
Test Case: 456 | Input/Output: [(-31 -3 -17 -47) -47]
Test Case: 457 | Input/Output: [(-6 60 6 -19) -19]
Test Case: 458 | Input/Output: [(-69 -48 78 -94) -94]
Test Case: 459 | Input/Output: [(-48 -30 -94 -4) -94]
Test Case: 460 | Input/Output: [(-91 18 6 -96) -96]
Test Case: 461 | Input/Output: [(85 -86 67 80) -86]
Test Case: 462 | Input/Output: [(11 -52 35 -79) -79]
Test Case: 463 | Input/Output: [(-67 -20 -67 -32) -67]
Test Case: 464 | Input/Output: [(25 -59 6 -45) -59]
Test Case: 465 | Input/Output: [(-21 -66 36 49) -66]
Test Case: 466 | Input/Output: [(-54 23 6 37) -54]
Test Case: 467 | Input/Output: [(-72 98 -8 68) -72]
Test Case: 468 | Input/Output: [(-37 46 -85 -87) -87]
Test Case: 469 | Input/Output: [(4 -37 -13 -99) -99]
Test Case: 470 | Input/Output: [(38 -19 56 72) -19]
Test Case: 471 | Input/Output: [(-42 -70 -30 -34) -70]
Test Case: 472 | Input/Output: [(-79 25 -20 -24) -79]
Test Case: 473 | Input/Output: [(46 48 -57 39) -57]
Test Case: 474 | Input/Output: [(87 -38 -77 -1) -77]
Test Case: 475 | Input/Output: [(95 40 -90 -3) -90]
Test Case: 476 | Input/Output: [(0 -86 46 -81) -86]
Test Case: 477 | Input/Output: [(-80 -89 0 -9) -89]
Test Case: 478 | Input/Output: [(49 -95 -70 62) -95]
Test Case: 479 | Input/Output: [(25 -30 -77 25) -77]
Test Case: 480 | Input/Output: [(-50 70 -68 62) -68]
Test Case: 481 | Input/Output: [(25 72 -84 29) -84]
Test Case: 482 | Input/Output: [(5 -20 68 5) -20]
Test Case: 483 | Input/Output: [(-29 -50 -1 26) -50]
Test Case: 484 | Input/Output: [(-93 44 -75 -54) -93]
Test Case: 485 | Input/Output: [(-90 -47 69 63) -90]
Test Case: 486 | Input/Output: [(1 -56 -13 -15) -56]
Test Case: 487 | Input/Output: [(-69 -85 -12 52) -85]
Test Case: 488 | Input/Output: [(-48 69 -100 -20) -100]
Test Case: 489 | Input/Output: [(-18 60 8 68) -18]
Test Case: 490 | Input/Output: [(50 -2 31 -80) -80]
Test Case: 491 | Input/Output: [(22 -94 -27 27) -94]
Test Case: 492 | Input/Output: [(-96 77 -32 66) -96]
Test Case: 493 | Input/Output: [(-43 -75 84 4) -75]
Test Case: 494 | Input/Output: [(43 15 62 81) 15]
Test Case: 495 | Input/Output: [(-50 -61 -52 -37) -61]
Test Case: 496 | Input/Output: [(-47 68 47 96) -47]
Test Case: 497 | Input/Output: [(50 -96 26 -27) -96]
Test Case: 498 | Input/Output: [(-100 75 -42 98) -100]
Test Case: 499 | Input/Output: [(11 69 -9 4) -9]
Test Case: 500 | Input/Output: [(59 50 -82 -77) -82]
Test Case: 501 | Input/Output: [(66 -58 23 -66) -66]
Test Case: 502 | Input/Output: [(-43 27 -3 -88) -88]
Test Case: 503 | Input/Output: [(-47 1 87 -49) -49]
Test Case: 504 | Input/Output: [(16 -94 36 29) -94]
Test Case: 505 | Input/Output: [(-26 48 17 -41) -41]
Test Case: 506 | Input/Output: [(67 -67 90 -63) -67]
Test Case: 507 | Input/Output: [(-59 96 51 91) -59]
Test Case: 508 | Input/Output: [(6 71 -88 87) -88]
Test Case: 509 | Input/Output: [(91 58 -15 -67) -67]
Test Case: 510 | Input/Output: [(69 -93 -56 21) -93]
Test Case: 511 | Input/Output: [(-36 18 66 -50) -50]
Test Case: 512 | Input/Output: [(-64 -69 8 27) -69]
Test Case: 513 | Input/Output: [(100 86 -29 -38) -38]
Test Case: 514 | Input/Output: [(73 14 -75 3) -75]
Test Case: 515 | Input/Output: [(85 17 72 -10) -10]
Test Case: 516 | Input/Output: [(-38 -31 25 -59) -59]
Test Case: 517 | Input/Output: [(73 -66 87 43) -66]
Test Case: 518 | Input/Output: [(-84 52 -9 -83) -84]
Test Case: 519 | Input/Output: [(9 52 -38 -86) -86]
Test Case: 520 | Input/Output: [(-3 -75 67 1) -75]
Test Case: 521 | Input/Output: [(-41 -48 -81 33) -81]
Test Case: 522 | Input/Output: [(51 19 -61 1) -61]
Test Case: 523 | Input/Output: [(1 -94 -3 -75) -94]
Test Case: 524 | Input/Output: [(-79 54 1 87) -79]
Test Case: 525 | Input/Output: [(-46 -21 -39 47) -46]
Test Case: 526 | Input/Output: [(-18 44 -40 -43) -43]
Test Case: 527 | Input/Output: [(-98 -24 68 8) -98]
Test Case: 528 | Input/Output: [(75 -66 -76 -98) -98]
Test Case: 529 | Input/Output: [(2 -100 10 -89) -100]
Test Case: 530 | Input/Output: [(37 31 -66 69) -66]
Test Case: 531 | Input/Output: [(14 14 96 -72) -72]
Test Case: 532 | Input/Output: [(-33 -47 36 51) -47]
Test Case: 533 | Input/Output: [(-80 -59 55 -74) -80]
Test Case: 534 | Input/Output: [(-78 -77 58 71) -78]
Test Case: 535 | Input/Output: [(-30 -13 -94 -83) -94]
Test Case: 536 | Input/Output: [(97 -97 64 15) -97]
Test Case: 537 | Input/Output: [(-59 27 99 97) -59]
Test Case: 538 | Input/Output: [(98 87 -8 -67) -67]
Test Case: 539 | Input/Output: [(46 -16 -9 82) -16]
Test Case: 540 | Input/Output: [(59 -10 -50 74) -50]
Test Case: 541 | Input/Output: [(3 39 81 43) 3]
Test Case: 542 | Input/Output: [(41 -62 77 -84) -84]
Test Case: 543 | Input/Output: [(-5 -5 39 -60) -60]
Test Case: 544 | Input/Output: [(-16 -75 58 -78) -78]
Test Case: 545 | Input/Output: [(56 36 -24 -77) -77]
Test Case: 546 | Input/Output: [(-84 -98 -10 -63) -98]
Test Case: 547 | Input/Output: [(-81 9 -53 84) -81]
Test Case: 548 | Input/Output: [(-29 -14 76 -66) -66]
Test Case: 549 | Input/Output: [(89 75 -3 -32) -32]
Test Case: 550 | Input/Output: [(11 -20 23 23) -20]
Test Case: 551 | Input/Output: [(77 49 45 -23) -23]
Test Case: 552 | Input/Output: [(69 16 24 76) 16]
Test Case: 553 | Input/Output: [(32 15 -45 85) -45]
Test Case: 554 | Input/Output: [(15 -61 -14 -29) -61]
Test Case: 555 | Input/Output: [(-30 -90 -68 -27) -90]
Test Case: 556 | Input/Output: [(96 -38 -76 -11) -76]
Test Case: 557 | Input/Output: [(75 3 17 -99) -99]
Test Case: 558 | Input/Output: [(-73 -66 -93 -9) -93]
Test Case: 559 | Input/Output: [(74 29 -96 -83) -96]
Test Case: 560 | Input/Output: [(26 48 57 65) 26]
Test Case: 561 | Input/Output: [(72 -64 -1 -75) -75]
Test Case: 562 | Input/Output: [(90 84 -40 -99) -99]
Test Case: 563 | Input/Output: [(23 2 -12 -46) -46]
Test Case: 564 | Input/Output: [(37 -48 -41 -51) -51]
Test Case: 565 | Input/Output: [(-12 4 -24 34) -24]
Test Case: 566 | Input/Output: [(-47 -58 -69 97) -69]
Test Case: 567 | Input/Output: [(78 -62 -70 -57) -70]
Test Case: 568 | Input/Output: [(95 -22 -35 59) -35]
Test Case: 569 | Input/Output: [(-97 22 67 -97) -97]
Test Case: 570 | Input/Output: [(56 -73 -21 11) -73]
Test Case: 571 | Input/Output: [(-39 17 -39 -39) -39]
Test Case: 572 | Input/Output: [(35 -17 27 -3) -17]
Test Case: 573 | Input/Output: [(50 -26 -6 -94) -94]
Test Case: 574 | Input/Output: [(35 65 13 -59) -59]
Test Case: 575 | Input/Output: [(-30 34 -61 -53) -61]
Test Case: 576 | Input/Output: [(58 43 -60 41) -60]
Test Case: 577 | Input/Output: [(71 37 95 -31) -31]
Test Case: 578 | Input/Output: [(86 44 -61 -56) -61]
Test Case: 579 | Input/Output: [(-82 24 16 96) -82]
Test Case: 580 | Input/Output: [(35 -8 -68 90) -68]
Test Case: 581 | Input/Output: [(-7 -70 15 25) -70]
Test Case: 582 | Input/Output: [(-81 -99 -13 -62) -99]
Test Case: 583 | Input/Output: [(3 81 69 -28) -28]
Test Case: 584 | Input/Output: [(-94 46 -47 -30) -94]
Test Case: 585 | Input/Output: [(59 -41 -69 25) -69]
Test Case: 586 | Input/Output: [(-35 90 -28 -50) -50]
Test Case: 587 | Input/Output: [(-100 -93 20 19) -100]
Test Case: 588 | Input/Output: [(-86 72 -88 -37) -88]
Test Case: 589 | Input/Output: [(-96 39 -39 -92) -96]
Test Case: 590 | Input/Output: [(-64 100 3 -85) -85]
Test Case: 591 | Input/Output: [(5 -81 52 -69) -81]
Test Case: 592 | Input/Output: [(-30 -4 94 -51) -51]
Test Case: 593 | Input/Output: [(42 -42 -47 7) -47]
Test Case: 594 | Input/Output: [(-78 57 63 81) -78]
Test Case: 595 | Input/Output: [(-5 79 -35 -21) -35]
Test Case: 596 | Input/Output: [(72 -23 -7 -80) -80]
Test Case: 597 | Input/Output: [(-64 -70 87 23) -70]
Test Case: 598 | Input/Output: [(-88 -57 29 41) -88]
Test Case: 599 | Input/Output: [(-1 -14 -98 -54) -98]
Test Case: 600 | Input/Output: [(-75 -23 -64 -84) -84]
Test Case: 601 | Input/Output: [(-92 -47 -29 17) -92]
Test Case: 602 | Input/Output: [(-95 34 -33 -61) -95]
Test Case: 603 | Input/Output: [(96 49 13 16) 13]
Test Case: 604 | Input/Output: [(22 -55 -35 -97) -97]
Test Case: 605 | Input/Output: [(-79 80 38 -21) -79]
Test Case: 606 | Input/Output: [(72 -21 -38 -85) -85]
Test Case: 607 | Input/Output: [(-20 -56 97 -91) -91]
Test Case: 608 | Input/Output: [(-18 -9 47 84) -18]
Test Case: 609 | Input/Output: [(13 87 -64 4) -64]
Test Case: 610 | Input/Output: [(-66 84 -3 66) -66]
Test Case: 611 | Input/Output: [(-83 72 -21 -98) -98]
Test Case: 612 | Input/Output: [(-42 -27 55 85) -42]
Test Case: 613 | Input/Output: [(-67 -39 -35 87) -67]
Test Case: 614 | Input/Output: [(64 69 -82 97) -82]
Test Case: 615 | Input/Output: [(-98 61 -8 78) -98]
Test Case: 616 | Input/Output: [(8 -15 -94 -77) -94]
Test Case: 617 | Input/Output: [(5 65 49 -74) -74]
Test Case: 618 | Input/Output: [(-39 33 -32 87) -39]
Test Case: 619 | Input/Output: [(46 38 46 -84) -84]
Test Case: 620 | Input/Output: [(-14 61 -96 86) -96]
Test Case: 621 | Input/Output: [(53 -26 -39 17) -39]
Test Case: 622 | Input/Output: [(-38 89 37 85) -38]
Test Case: 623 | Input/Output: [(91 -45 0 -96) -96]
Test Case: 624 | Input/Output: [(52 -47 20 79) -47]
Test Case: 625 | Input/Output: [(-76 -38 -26 0) -76]
Test Case: 626 | Input/Output: [(-22 42 -32 60) -32]
Test Case: 627 | Input/Output: [(-11 -15 64 -11) -15]
Test Case: 628 | Input/Output: [(-40 34 57 -55) -55]
Test Case: 629 | Input/Output: [(-15 -2 -99 4) -99]
Test Case: 630 | Input/Output: [(-15 50 -68 62) -68]
Test Case: 631 | Input/Output: [(-64 -69 -54 16) -69]
Test Case: 632 | Input/Output: [(45 -19 -8 83) -19]
Test Case: 633 | Input/Output: [(67 -23 -58 -60) -60]
Test Case: 634 | Input/Output: [(-12 -22 -43 -50) -50]
Test Case: 635 | Input/Output: [(-89 77 16 -75) -89]
Test Case: 636 | Input/Output: [(58 61 -33 22) -33]
Test Case: 637 | Input/Output: [(-65 64 -27 31) -65]
Test Case: 638 | Input/Output: [(71 84 62 30) 30]
Test Case: 639 | Input/Output: [(8 -91 27 -55) -91]
Test Case: 640 | Input/Output: [(84 72 -78 -20) -78]
Test Case: 641 | Input/Output: [(-28 -29 -86 -32) -86]
Test Case: 642 | Input/Output: [(12 65 -76 16) -76]
Test Case: 643 | Input/Output: [(4 45 88 -12) -12]
Test Case: 644 | Input/Output: [(-27 -62 83 79) -62]
Test Case: 645 | Input/Output: [(-3 35 28 -59) -59]
Test Case: 646 | Input/Output: [(-88 2 51 -72) -88]
Test Case: 647 | Input/Output: [(-100 -20 79 34) -100]
Test Case: 648 | Input/Output: [(96 35 72 -10) -10]
Test Case: 649 | Input/Output: [(88 80 33 13) 13]
Test Case: 650 | Input/Output: [(86 68 15 -91) -91]
Test Case: 651 | Input/Output: [(-53 -81 -47 -68) -81]
Test Case: 652 | Input/Output: [(75 -47 -72 -34) -72]
Test Case: 653 | Input/Output: [(-74 47 -23 -46) -74]
Test Case: 654 | Input/Output: [(-60 2 62 -49) -60]
Test Case: 655 | Input/Output: [(66 46 90 37) 37]
Test Case: 656 | Input/Output: [(-41 -85 95 87) -85]
Test Case: 657 | Input/Output: [(-84 -88 66 13) -88]
Test Case: 658 | Input/Output: [(-6 -49 63 -10) -49]
Test Case: 659 | Input/Output: [(58 74 12 56) 12]
Test Case: 660 | Input/Output: [(-62 -60 -39 59) -62]
Test Case: 661 | Input/Output: [(-88 -77 84 69) -88]
Test Case: 662 | Input/Output: [(-51 52 56 11) -51]
Test Case: 663 | Input/Output: [(-81 -38 -8 29) -81]
Test Case: 664 | Input/Output: [(-14 -26 -96 -88) -96]
Test Case: 665 | Input/Output: [(-94 -63 -86 -26) -94]
Test Case: 666 | Input/Output: [(-63 12 76 -3) -63]
Test Case: 667 | Input/Output: [(-44 38 77 -91) -91]
Test Case: 668 | Input/Output: [(48 10 44 -49) -49]
Test Case: 669 | Input/Output: [(-25 13 54 -25) -25]
Test Case: 670 | Input/Output: [(-32 75 -31 36) -32]
Test Case: 671 | Input/Output: [(92 96 -55 -44) -55]
Test Case: 672 | Input/Output: [(-88 4 95 80) -88]
Test Case: 673 | Input/Output: [(-55 -23 -79 77) -79]
Test Case: 674 | Input/Output: [(-55 85 14 -65) -65]
Test Case: 675 | Input/Output: [(-9 74 -35 -54) -54]
Test Case: 676 | Input/Output: [(66 62 34 -24) -24]
Test Case: 677 | Input/Output: [(75 24 85 52) 24]
Test Case: 678 | Input/Output: [(31 -16 -45 28) -45]
Test Case: 679 | Input/Output: [(-56 -35 -91 -16) -91]
Test Case: 680 | Input/Output: [(95 64 -20 -17) -20]
Test Case: 681 | Input/Output: [(-46 -77 47 -57) -77]
Test Case: 682 | Input/Output: [(-39 65 -69 2) -69]
Test Case: 683 | Input/Output: [(58 -40 47 93) -40]
Test Case: 684 | Input/Output: [(-91 39 -52 -90) -91]
Test Case: 685 | Input/Output: [(9 -37 24 -2) -37]
Test Case: 686 | Input/Output: [(26 85 45 44) 26]
Test Case: 687 | Input/Output: [(48 15 -23 -99) -99]
Test Case: 688 | Input/Output: [(-56 -46 43 -76) -76]
Test Case: 689 | Input/Output: [(94 50 -4 -28) -28]
Test Case: 690 | Input/Output: [(65 54 26 -76) -76]
Test Case: 691 | Input/Output: [(67 70 -13 -68) -68]
Test Case: 692 | Input/Output: [(46 75 -27 -21) -27]
Test Case: 693 | Input/Output: [(11 10 -7 18) -7]
Test Case: 694 | Input/Output: [(62 1 97 -37) -37]
Test Case: 695 | Input/Output: [(-15 44 3 51) -15]
Test Case: 696 | Input/Output: [(-18 -53 51 16) -53]
Test Case: 697 | Input/Output: [(-21 -15 84 82) -21]
Test Case: 698 | Input/Output: [(-63 43 -26 -52) -63]
Test Case: 699 | Input/Output: [(-77 -30 -55 49) -77]
Test Case: 700 | Input/Output: [(-25 -6 -81 78) -81]
Test Case: 701 | Input/Output: [(48 8 69 23) 8]
Test Case: 702 | Input/Output: [(16 -16 -33 -67) -67]
Test Case: 703 | Input/Output: [(-92 -90 -95 31) -95]
Test Case: 704 | Input/Output: [(-89 -82 -34 -6) -89]
Test Case: 705 | Input/Output: [(54 -92 -57 -48) -92]
Test Case: 706 | Input/Output: [(-98 23 13 68) -98]
Test Case: 707 | Input/Output: [(-24 16 84 -24) -24]
Test Case: 708 | Input/Output: [(85 98 38 56) 38]
Test Case: 709 | Input/Output: [(1 -7 2 -5) -7]
Test Case: 710 | Input/Output: [(-6 -69 15 -70) -70]
Test Case: 711 | Input/Output: [(10 -37 99 21) -37]
Test Case: 712 | Input/Output: [(48 -53 10 18) -53]
Test Case: 713 | Input/Output: [(-14 91 36 -91) -91]
Test Case: 714 | Input/Output: [(-10 -87 -71 -33) -87]
Test Case: 715 | Input/Output: [(89 5 10 -54) -54]
Test Case: 716 | Input/Output: [(-82 41 -41 -77) -82]
Test Case: 717 | Input/Output: [(-1 -42 77 -96) -96]
Test Case: 718 | Input/Output: [(88 -18 61 93) -18]
Test Case: 719 | Input/Output: [(76 -72 91 71) -72]
Test Case: 720 | Input/Output: [(-90 60 -58 -12) -90]
Test Case: 721 | Input/Output: [(8 63 65 17) 8]
Test Case: 722 | Input/Output: [(58 -83 -87 67) -87]
Test Case: 723 | Input/Output: [(3 31 -30 -76) -76]
Test Case: 724 | Input/Output: [(-90 94 100 -67) -90]
Test Case: 725 | Input/Output: [(-16 -36 -39 49) -39]
Test Case: 726 | Input/Output: [(22 84 -20 -64) -64]
Test Case: 727 | Input/Output: [(-77 -58 35 71) -77]
Test Case: 728 | Input/Output: [(-80 -57 24 18) -80]
Test Case: 729 | Input/Output: [(30 96 65 -26) -26]
Test Case: 730 | Input/Output: [(8 53 25 2) 2]
Test Case: 731 | Input/Output: [(-49 14 -2 37) -49]
Test Case: 732 | Input/Output: [(54 87 -85 33) -85]
Test Case: 733 | Input/Output: [(65 -100 36 -61) -100]
Test Case: 734 | Input/Output: [(-78 -97 -62 76) -97]
Test Case: 735 | Input/Output: [(-59 -14 78 -70) -70]
Test Case: 736 | Input/Output: [(13 -3 -3 -77) -77]
Test Case: 737 | Input/Output: [(-34 -61 -92 91) -92]
Test Case: 738 | Input/Output: [(49 2 -76 -29) -76]
Test Case: 739 | Input/Output: [(-75 98 -53 100) -75]
Test Case: 740 | Input/Output: [(29 69 13 -13) -13]
Test Case: 741 | Input/Output: [(-70 -37 76 32) -70]
Test Case: 742 | Input/Output: [(-77 -15 24 5) -77]
Test Case: 743 | Input/Output: [(32 -50 -24 -49) -50]
Test Case: 744 | Input/Output: [(83 7 -88 -21) -88]
Test Case: 745 | Input/Output: [(26 -58 13 -5) -58]
Test Case: 746 | Input/Output: [(74 78 -43 -6) -43]
Test Case: 747 | Input/Output: [(-72 -31 -99 -19) -99]
Test Case: 748 | Input/Output: [(-20 92 -61 -28) -61]
Test Case: 749 | Input/Output: [(45 57 -71 34) -71]
Test Case: 750 | Input/Output: [(-88 20 23 89) -88]
Test Case: 751 | Input/Output: [(39 -18 -79 -50) -79]
Test Case: 752 | Input/Output: [(-65 -11 37 -30) -65]
Test Case: 753 | Input/Output: [(-97 -30 7 -7) -97]
Test Case: 754 | Input/Output: [(42 -11 30 44) -11]
Test Case: 755 | Input/Output: [(94 8 19 -92) -92]
Test Case: 756 | Input/Output: [(29 16 90 -43) -43]
Test Case: 757 | Input/Output: [(10 75 -65 30) -65]
Test Case: 758 | Input/Output: [(34 44 -10 -52) -52]
Test Case: 759 | Input/Output: [(-55 -29 47 -13) -55]
Test Case: 760 | Input/Output: [(29 68 21 71) 21]
Test Case: 761 | Input/Output: [(-71 -46 9 42) -71]
Test Case: 762 | Input/Output: [(43 93 11 -50) -50]
Test Case: 763 | Input/Output: [(-49 -36 -74 42) -74]
Test Case: 764 | Input/Output: [(-60 -83 51 -53) -83]
Test Case: 765 | Input/Output: [(-56 5 -19 -2) -56]
Test Case: 766 | Input/Output: [(-95 -40 -77 -5) -95]
Test Case: 767 | Input/Output: [(61 -9 -25 56) -25]
Test Case: 768 | Input/Output: [(94 39 53 -14) -14]
Test Case: 769 | Input/Output: [(42 90 -58 84) -58]
Test Case: 770 | Input/Output: [(1 -48 82 83) -48]
Test Case: 771 | Input/Output: [(-68 -43 -98 -45) -98]
Test Case: 772 | Input/Output: [(11 27 48 -100) -100]
Test Case: 773 | Input/Output: [(69 -60 92 -77) -77]
Test Case: 774 | Input/Output: [(-47 -72 -75 59) -75]
Test Case: 775 | Input/Output: [(-37 -77 32 50) -77]
Test Case: 776 | Input/Output: [(21 30 22 94) 21]
Test Case: 777 | Input/Output: [(-62 -77 78 97) -77]
Test Case: 778 | Input/Output: [(54 -18 -7 41) -18]
Test Case: 779 | Input/Output: [(90 71 92 27) 27]
Test Case: 780 | Input/Output: [(-94 -38 60 -64) -94]
Test Case: 781 | Input/Output: [(-45 -84 55 84) -84]
Test Case: 782 | Input/Output: [(-22 57 -83 -10) -83]
Test Case: 783 | Input/Output: [(92 -64 46 -51) -64]
Test Case: 784 | Input/Output: [(-52 -29 12 -58) -58]
Test Case: 785 | Input/Output: [(-11 -54 -48 14) -54]
Test Case: 786 | Input/Output: [(39 7 -57 42) -57]
Test Case: 787 | Input/Output: [(63 34 -54 -19) -54]
Test Case: 788 | Input/Output: [(76 -82 -22 2) -82]
Test Case: 789 | Input/Output: [(-5 97 -32 -60) -60]
Test Case: 790 | Input/Output: [(15 0 -63 -27) -63]
Test Case: 791 | Input/Output: [(82 -58 -11 -65) -65]
Test Case: 792 | Input/Output: [(-40 98 29 -82) -82]
Test Case: 793 | Input/Output: [(78 -56 -8 -91) -91]
Test Case: 794 | Input/Output: [(-1 -81 -7 -17) -81]
Test Case: 795 | Input/Output: [(-64 87 -89 69) -89]
Test Case: 796 | Input/Output: [(-36 23 45 35) -36]
Test Case: 797 | Input/Output: [(-100 -44 -5 -50) -100]
Test Case: 798 | Input/Output: [(-19 54 28 42) -19]
Test Case: 799 | Input/Output: [(24 -64 80 26) -64]
Test Case: 800 | Input/Output: [(-35 -74 53 79) -74]
Test Case: 801 | Input/Output: [(93 -60 75 -85) -85]
Test Case: 802 | Input/Output: [(92 -79 58 97) -79]
Test Case: 803 | Input/Output: [(41 -90 19 -2) -90]
Test Case: 804 | Input/Output: [(10 -17 -11 -90) -90]
Test Case: 805 | Input/Output: [(-55 -24 -45 -75) -75]
Test Case: 806 | Input/Output: [(63 2 88 -64) -64]
Test Case: 807 | Input/Output: [(77 -55 24 51) -55]
Test Case: 808 | Input/Output: [(-96 -19 -27 95) -96]
Test Case: 809 | Input/Output: [(-41 89 -49 -95) -95]
Test Case: 810 | Input/Output: [(-14 -50 93 92) -50]
Test Case: 811 | Input/Output: [(-77 34 -92 -59) -92]
Test Case: 812 | Input/Output: [(-20 68 26 -80) -80]
Test Case: 813 | Input/Output: [(-75 11 87 -78) -78]
Test Case: 814 | Input/Output: [(60 49 39 -87) -87]
Test Case: 815 | Input/Output: [(-59 72 94 -45) -59]
Test Case: 816 | Input/Output: [(6 79 -49 72) -49]
Test Case: 817 | Input/Output: [(-72 -64 47 -30) -72]
Test Case: 818 | Input/Output: [(-73 -92 -19 73) -92]
Test Case: 819 | Input/Output: [(65 89 99 -56) -56]
Test Case: 820 | Input/Output: [(-98 1 -39 13) -98]
Test Case: 821 | Input/Output: [(-40 -95 13 -34) -95]
Test Case: 822 | Input/Output: [(26 7 -57 -58) -58]
Test Case: 823 | Input/Output: [(93 79 -14 93) -14]
Test Case: 824 | Input/Output: [(-9 80 -66 -67) -67]
Test Case: 825 | Input/Output: [(66 66 -67 79) -67]
Test Case: 826 | Input/Output: [(-27 48 75 100) -27]
Test Case: 827 | Input/Output: [(-24 -7 -36 91) -36]
Test Case: 828 | Input/Output: [(17 31 36 -45) -45]
Test Case: 829 | Input/Output: [(31 -2 -93 58) -93]
Test Case: 830 | Input/Output: [(16 73 65 91) 16]
Test Case: 831 | Input/Output: [(34 87 39 -1) -1]
Test Case: 832 | Input/Output: [(19 -92 86 -7) -92]
Test Case: 833 | Input/Output: [(-21 -95 92 3) -95]
Test Case: 834 | Input/Output: [(-60 28 -88 -18) -88]
Test Case: 835 | Input/Output: [(60 80 43 57) 43]
Test Case: 836 | Input/Output: [(-84 -46 17 84) -84]
Test Case: 837 | Input/Output: [(42 -74 -50 45) -74]
Test Case: 838 | Input/Output: [(75 -67 71 83) -67]
Test Case: 839 | Input/Output: [(-70 -8 -84 -47) -84]
Test Case: 840 | Input/Output: [(16 -59 -54 -61) -61]
Test Case: 841 | Input/Output: [(57 -62 67 71) -62]
Test Case: 842 | Input/Output: [(-59 78 -43 39) -59]
Test Case: 843 | Input/Output: [(-32 12 -3 0) -32]
Test Case: 844 | Input/Output: [(16 -65 -80 -22) -80]
Test Case: 845 | Input/Output: [(-13 93 72 -81) -81]
Test Case: 846 | Input/Output: [(-30 44 21 -25) -30]
Test Case: 847 | Input/Output: [(-42 -12 5 -32) -42]
Test Case: 848 | Input/Output: [(45 -95 -59 -60) -95]
Test Case: 849 | Input/Output: [(36 -66 31 -51) -66]
Test Case: 850 | Input/Output: [(74 -31 84 -52) -52]
Test Case: 851 | Input/Output: [(29 -46 37 -68) -68]
Test Case: 852 | Input/Output: [(-6 20 -37 -52) -52]
Test Case: 853 | Input/Output: [(38 81 -22 36) -22]
Test Case: 854 | Input/Output: [(-15 -50 6 -61) -61]
Test Case: 855 | Input/Output: [(-53 -63 63 -56) -63]
Test Case: 856 | Input/Output: [(8 46 -30 77) -30]
Test Case: 857 | Input/Output: [(-98 -84 -34 42) -98]
Test Case: 858 | Input/Output: [(14 67 96 -45) -45]
Test Case: 859 | Input/Output: [(-15 0 -47 35) -47]
Test Case: 860 | Input/Output: [(33 -61 53 65) -61]
Test Case: 861 | Input/Output: [(28 14 98 96) 14]
Test Case: 862 | Input/Output: [(5 70 42 70) 5]
Test Case: 863 | Input/Output: [(33 66 75 -74) -74]
Test Case: 864 | Input/Output: [(-79 -74 -27 -21) -79]
Test Case: 865 | Input/Output: [(96 -24 -9 -69) -69]
Test Case: 866 | Input/Output: [(78 -89 6 -11) -89]
Test Case: 867 | Input/Output: [(43 -57 -49 6) -57]
Test Case: 868 | Input/Output: [(33 -86 -70 16) -86]
Test Case: 869 | Input/Output: [(6 -75 -66 -52) -75]
Test Case: 870 | Input/Output: [(36 -75 70 -99) -99]
Test Case: 871 | Input/Output: [(23 -85 -86 -76) -86]
Test Case: 872 | Input/Output: [(-49 66 18 41) -49]
Test Case: 873 | Input/Output: [(-88 52 1 -16) -88]
Test Case: 874 | Input/Output: [(65 9 4 97) 4]
Test Case: 875 | Input/Output: [(-86 -68 86 -32) -86]
Test Case: 876 | Input/Output: [(-16 4 38 -61) -61]
Test Case: 877 | Input/Output: [(88 3 64 -35) -35]
Test Case: 878 | Input/Output: [(-13 -95 74 20) -95]
Test Case: 879 | Input/Output: [(3 86 56 18) 3]
Test Case: 880 | Input/Output: [(62 -3 -13 36) -13]
Test Case: 881 | Input/Output: [(30 -38 51 44) -38]
Test Case: 882 | Input/Output: [(86 -36 54 27) -36]
Test Case: 883 | Input/Output: [(6 88 -67 -58) -67]
Test Case: 884 | Input/Output: [(20 19 -62 58) -62]
Test Case: 885 | Input/Output: [(41 4 59 29) 4]
Test Case: 886 | Input/Output: [(-90 26 -76 18) -90]
Test Case: 887 | Input/Output: [(52 35 -44 -52) -52]
Test Case: 888 | Input/Output: [(-32 -98 -5 -21) -98]
Test Case: 889 | Input/Output: [(21 -11 96 69) -11]
Test Case: 890 | Input/Output: [(-48 66 -76 -54) -76]
Test Case: 891 | Input/Output: [(46 -80 77 -77) -80]
Test Case: 892 | Input/Output: [(-100 8 67 24) -100]
Test Case: 893 | Input/Output: [(96 -41 -95 -47) -95]
Test Case: 894 | Input/Output: [(98 -37 -59 10) -59]
Test Case: 895 | Input/Output: [(47 37 28 -31) -31]
Test Case: 896 | Input/Output: [(9 -56 35 66) -56]
Test Case: 897 | Input/Output: [(72 72 17 89) 17]
Test Case: 898 | Input/Output: [(18 34 60 -89) -89]
Test Case: 899 | Input/Output: [(40 49 79 100) 40]
Test Case: 900 | Input/Output: [(-40 -19 95 13) -40]
Test Case: 901 | Input/Output: [(26 -73 50 81) -73]
Test Case: 902 | Input/Output: [(-69 68 85 51) -69]
Test Case: 903 | Input/Output: [(98 97 -63 77) -63]
Test Case: 904 | Input/Output: [(-47 32 -82 55) -82]
Test Case: 905 | Input/Output: [(37 -44 33 -17) -44]
Test Case: 906 | Input/Output: [(-14 92 -61 3) -61]
Test Case: 907 | Input/Output: [(-9 22 -51 71) -51]
Test Case: 908 | Input/Output: [(68 43 48 -79) -79]
Test Case: 909 | Input/Output: [(20 16 -96 16) -96]
Test Case: 910 | Input/Output: [(0 -37 51 14) -37]
Test Case: 911 | Input/Output: [(-18 40 75 58) -18]
Test Case: 912 | Input/Output: [(0 83 56 48) 0]
Test Case: 913 | Input/Output: [(-28 -47 97 -73) -73]
Test Case: 914 | Input/Output: [(-48 -36 -34 -66) -66]
Test Case: 915 | Input/Output: [(-60 -78 -67 16) -78]
Test Case: 916 | Input/Output: [(-95 80 1 -48) -95]
Test Case: 917 | Input/Output: [(-71 19 -20 -3) -71]
Test Case: 918 | Input/Output: [(-52 58 -18 19) -52]
Test Case: 919 | Input/Output: [(32 37 69 -60) -60]
Test Case: 920 | Input/Output: [(80 -94 -80 41) -94]
Test Case: 921 | Input/Output: [(-56 76 -83 9) -83]
Test Case: 922 | Input/Output: [(56 -15 13 -75) -75]
Test Case: 923 | Input/Output: [(25 -85 -57 44) -85]
Test Case: 924 | Input/Output: [(-57 72 11 -84) -84]
Test Case: 925 | Input/Output: [(4 61 21 -99) -99]
Test Case: 926 | Input/Output: [(80 -87 88 3) -87]
Test Case: 927 | Input/Output: [(-81 -54 -3 3) -81]
Test Case: 928 | Input/Output: [(-84 -70 63 36) -84]
Test Case: 929 | Input/Output: [(-16 19 -26 -79) -79]
Test Case: 930 | Input/Output: [(-10 63 98 51) -10]
Test Case: 931 | Input/Output: [(-8 86 -36 -25) -36]
Test Case: 932 | Input/Output: [(12 -64 9 -62) -64]
Test Case: 933 | Input/Output: [(70 5 29 76) 5]
Test Case: 934 | Input/Output: [(-14 16 99 40) -14]
Test Case: 935 | Input/Output: [(29 89 29 32) 29]
Test Case: 936 | Input/Output: [(52 -19 90 -88) -88]
Test Case: 937 | Input/Output: [(-99 92 -46 92) -99]
Test Case: 938 | Input/Output: [(-7 -20 50 77) -20]
Test Case: 939 | Input/Output: [(-15 -13 -69 -48) -69]
Test Case: 940 | Input/Output: [(-100 70 67 62) -100]
Test Case: 941 | Input/Output: [(40 -30 -38 -49) -49]
Test Case: 942 | Input/Output: [(11 79 -47 2) -47]
Test Case: 943 | Input/Output: [(-66 52 -46 -47) -66]
Test Case: 944 | Input/Output: [(54 60 79 -59) -59]
Test Case: 945 | Input/Output: [(89 -55 -48 9) -55]
Test Case: 946 | Input/Output: [(-54 -9 7 34) -54]
Test Case: 947 | Input/Output: [(-25 -47 42 16) -47]
Test Case: 948 | Input/Output: [(70 85 40 92) 40]
Test Case: 949 | Input/Output: [(-17 -85 -53 -66) -85]
Test Case: 950 | Input/Output: [(10 -99 77 -41) -99]
Test Case: 951 | Input/Output: [(36 -6 97 -19) -19]
Test Case: 952 | Input/Output: [(-100 -46 -91 -79) -100]
Test Case: 953 | Input/Output: [(-43 -40 -16 27) -43]
Test Case: 954 | Input/Output: [(-63 -21 -38 12) -63]
Test Case: 955 | Input/Output: [(74 80 -63 -79) -79]
Test Case: 956 | Input/Output: [(99 34 7 26) 7]
Test Case: 957 | Input/Output: [(67 16 -55 18) -55]
Test Case: 958 | Input/Output: [(-15 -53 11 78) -53]
Test Case: 959 | Input/Output: [(28 -35 -96 -48) -96]
Test Case: 960 | Input/Output: [(-27 -43 71 -47) -47]
Test Case: 961 | Input/Output: [(46 14 -2 32) -2]
Test Case: 962 | Input/Output: [(79 -30 70 -48) -48]
Test Case: 963 | Input/Output: [(87 84 -47 67) -47]
Test Case: 964 | Input/Output: [(-8 -93 -9 53) -93]
Test Case: 965 | Input/Output: [(-2 77 92 -56) -56]
Test Case: 966 | Input/Output: [(13 -60 24 14) -60]
Test Case: 967 | Input/Output: [(75 -54 43 -73) -73]
Test Case: 968 | Input/Output: [(-53 -50 -17 -9) -53]
Test Case: 969 | Input/Output: [(52 45 -5 52) -5]
Test Case: 970 | Input/Output: [(10 81 -98 35) -98]
Test Case: 971 | Input/Output: [(-53 -34 86 -24) -53]
Test Case: 972 | Input/Output: [(-16 -4 -91 41) -91]
Test Case: 973 | Input/Output: [(-45 -17 35 -19) -45]
Test Case: 974 | Input/Output: [(59 -75 -38 85) -75]
Test Case: 975 | Input/Output: [(-94 84 1 36) -94]
Test Case: 976 | Input/Output: [(44 -9 56 -21) -21]
Test Case: 977 | Input/Output: [(90 43 35 -71) -71]
Test Case: 978 | Input/Output: [(-56 19 -88 -82) -88]
Test Case: 979 | Input/Output: [(-27 56 -77 -56) -77]
Test Case: 980 | Input/Output: [(-15 -37 74 57) -37]
Test Case: 981 | Input/Output: [(-51 -28 4 65) -51]
Test Case: 982 | Input/Output: [(-81 72 5 -89) -89]
Test Case: 983 | Input/Output: [(-14 42 81 -80) -80]
Test Case: 984 | Input/Output: [(-44 13 32 99) -44]
Test Case: 985 | Input/Output: [(-4 -93 -68 4) -93]
Test Case: 986 | Input/Output: [(72 0 20 -17) -17]
Test Case: 987 | Input/Output: [(-7 65 94 85) -7]
Test Case: 988 | Input/Output: [(41 -16 -63 83) -63]
Test Case: 989 | Input/Output: [(1 12 -19 -19) -19]
Test Case: 990 | Input/Output: [(92 -47 89 79) -47]
Test Case: 991 | Input/Output: [(47 -6 28 -96) -96]
Test Case: 992 | Input/Output: [(86 -33 62 88) -33]
Test Case: 993 | Input/Output: [(-96 -30 41 39) -96]
Test Case: 994 | Input/Output: [(-85 -74 37 75) -85]
Test Case: 995 | Input/Output: [(-86 49 1 -19) -86]
Test Case: 996 | Input/Output: [(9 -81 90 97) -81]
Test Case: 997 | Input/Output: [(-93 -9 -46 -20) -93]
Test Case: 998 | Input/Output: [(81 -73 -49 77) -73]
Test Case: 999 | Input/Output: [(76 -64 -35 -94) -94]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 67 64 115 -40 -77 17 -115 92 -68 77 -88 102 103 41 4 15
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 -5 -5 -80] -80] [[-32 96 96 96] -32] [[99 99 99 86] 86] [[-50 -50 -50 61] -50] [[-20 96 -20 -20] -20] [[84 84 70 84] 70] [[89 89 89 -12] -12] [[58 58 58 -63] -63] [[97 97 93 97] 93] [[50 -61 50 50] -61] [(63 63 63 63) 63] [(-18 -18 -18 -18) -18] [(52 52 52 52) 52] [(59 59 59 59) 59] [(-47 -47 -47 -47) -47] [(33 13 45 25) 13] [(75 49 76 100) 49] [(50 39 16 14) 14] [(88 38 31 100) 31] [(85 46 57 60) 46] [(69 93 85 55) 55] [(32 86 0 24) 0] [(60 37 24 13) 13] [(18 45 70 71) 18] [(92 35 83 93) 35] [(37 20 11 72) 11] [(79 10 98 64) 10] [(71 80 83 95) 71] [(85 21 25 68) 21] [(13 63 78 69) 13] [(56 41 82 53) 41] [(58 87 18 53) 18] [(95 78 94 17) 17] [(4 41 36 46) 4] [(91 8 11 37) 8] [(79 46 7 75) 7] [(92 36 63 18) 18] [(-99 -27 30 -4) -99] [(-75 -46 -52 57) -75] [(-76 33 60 -27) -76] [(19 13 -87 -66) -87] [(69 25 0 45) 0] [(-13 -49 36 66) -49] [(-51 27 36 -77) -77] [(-21 21 -79 32) -79] [(47 0 -39 16) -39] [(-82 35 92 -59) -82] [(-21 68 -85 -22) -85] [(80 80 1 -52) -52] [(-64 -95 91 -7) -95] [(-52 -22 -56 80) -56] [(-54 -95 -72 -35) -95] [(-46 3 -96 31) -96] [(39 81 -2 -51) -51] [(50 6 -91 53) -91] [(-5 84 74 -30) -30] [(-87 -49 -27 64) -87] [(93 -88 -14 99) -88] [(-81 -15 87 -44) -81] [(91 10 -52 59) -52] [(77 34 -44 -18) -44] [(-61 31 -97 -30) -97] [(-66 -28 -96 59) -96] [(-25 -46 -32 8) -46] [(-25 -56 20 80) -56] [(-74 67 14 -78) -78] [(7 -96 -90 100) -96] [(8 72 -75 38) -75] [(37 -9 57 83) -9] [(30 84 -50 -95) -95] [(25 -34 -41 49) -41] [(61 -41 -56 -6) -56] [(-88 20 -57 36) -88] [(-10 93 52 54) -10] [(-30 89 -38 33) -38] [(44 -43 49 79) -43] [(-81 26 34 45) -81] [(76 76 31 -41) -41] [(-72 -88 95 33) -88] [(99 49 76 11) 11] [(8 99 -87 43) -87] [(26 -30 -65 58) -65] [(-35 24 23 70) -35] [(53 -15 48 11) -15] [(-70 -76 70 -43) -76] [(30 100 28 20) 20] [(-58 -23 43 -88) -88] [(12 -97 73 87) -97] [(1 94 34 6) 1] [(-44 -24 -65 60) -65] [(34 -7 11 57) -7] [(52 -88 -55 -4) -88] [(-87 -58 -70 -51) -87] [(14 56 3 -44) -44] [(38 -32 35 -27) -32])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 25                 
Correct output: 49                  | Program output: 100                
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 100                
Correct output: 46                  | Program output: 60                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 71                 
Correct output: 35                  | Program output: 93                 
Correct output: 11                  | Program output: 72                 
Correct output: 10                  | Program output: 64                 
Correct output: 71                  | Program output: 95                 
Correct output: 21                  | Program output: 68                 
Correct output: 13                  | Program output: 69                 
Correct output: 41                  | Program output: 53                 
Correct output: 18                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 46                 
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -4                 
Correct output: -75                 | Program output: 57                 
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 45                 
Correct output: -49                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 32                 
Correct output: -39                 | Program output: 16                 
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -7                 
Correct output: -56                 | Program output: 80                 
Correct output: -95                 | Program output: -35                
Correct output: -96                 | Program output: 31                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: 53                 
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: 64                 
Correct output: -88                 | Program output: 99                 
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: 59                 
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -30                
Correct output: -96                 | Program output: 59                 
Correct output: -46                 | Program output: 8                  
Correct output: -56                 | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: 100                
Correct output: -75                 | Program output: 38                 
Correct output: -9                  | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 49                 
Correct output: -56                 | Program output: -6                 
Correct output: -88                 | Program output: 36                 
Correct output: -10                 | Program output: 54                 
Correct output: -38                 | Program output: 33                 
Correct output: -43                 | Program output: 79                 
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: 43                 
Correct output: -65                 | Program output: 58                 
Correct output: -35                 | Program output: 70                 
Correct output: -15                 | Program output: 11                 
Correct output: -76                 | Program output: -43                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 87                 
Correct output: 1                   | Program output: 6                  
Correct output: -65                 | Program output: 60                 
Correct output: -7                  | Program output: 57                 
Correct output: -88                 | Program output: -4                 
Correct output: -87                 | Program output: -51                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in4 boolean_invert_first_then_and print_integer integer_eq integer_fromboolean boolean_dup_items boolean_dup integer_dec in1 integer_lte exec_yankdup exec_s_when_autoconstructing (integer_pop boolean_xor integer_mult boolean_not in1 in1 integer_pop exec_s (integer_gte exec_do*times (exec_yankdup integer_sub) integer_fromboolean) () ()) () ())
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in4 boolean_invert_first_then_and print_integer integer_eq integer_fromboolean boolean_dup_items boolean_dup integer_dec in1 integer_lte exec_yankdup exec_s_when_autoconstructing (integer_pop boolean_xor integer_mult boolean_not in1 in1 integer_pop exec_s (integer_gte exec_do*times (exec_yankdup integer_sub) integer_fromboolean) () ()) () ())
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 2 6 1 2 1 4 1 6 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (16 2 6 1 2 1 4 1 6 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec})
Best program: (boolean_stackdepth integer_rot integer_rot exec_dup_items boolean_not integer_eq exec_eq integer_lt boolean_stackdepth boolean_yank boolean_xor exec_yankdup boolean_frominteger exec_do*count (integer_max exec_yank integer_lte in4 boolean_not boolean_flush) exec_eq exec_do*while (integer_add) exec_k_when_autoconstructing (exec_k (print_integer) (integer_shove print_integer integer_dec integer_swap exec_shove () integer_inc in3) exec_yankdup integer_flush exec_if (exec_do*times (exec_dup_times (exec_dup (exec_dup_items exec_dup_times (integer_dec))))) ()) ())
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.984 0.998 0.994 0.999 0.998 0.999 0.996 0.999 0.994 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.252
Average program size in population (points): 68.075
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464153
--- Timings ---
Current time: 1559593842393 milliseconds
Total Time:           2.0 seconds
Initialization:       0.1 seconds,  5.6%
Reproduction:         0.8 seconds, 38.4%
Fitness Testing:      1.1 seconds, 56.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_579} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup})
Lexicase best program: (in3 integer_empty print_integer exec_y () integer_yank boolean_frominteger exec_noop exec_do*range (integer_dec integer_lte integer_mult boolean_or exec_eq integer_gte boolean_xor in2) print_exec (boolean_eq integer_min in3) print_boolean integer_gte exec_while (tagged_579) integer_gt exec_do*count (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty) exec_do*while () boolean_empty) integer_max integer_max exec_flush exec_yank boolean_dup integer_min exec_do*count () integer_lt integer_pop boolean_flush integer_lte exec_y_when_autoconstructing () boolean_dup_times exec_do*count (integer_stackdepth integer_gt in2 boolean_or boolean_dup_items boolean_xor) boolean_or integer_dup_times integer_lt exec_do*times (exec_s_when_autoconstructing (boolean_dup) () ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_579} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup})
Zero cases best program: (in3 integer_empty print_integer exec_y () integer_yank boolean_frominteger exec_noop exec_do*range (integer_dec integer_lte integer_mult boolean_or exec_eq integer_gte boolean_xor in2) print_exec (boolean_eq integer_min in3) print_boolean integer_gte exec_while (tagged_579) integer_gt exec_do*count (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty) exec_do*while () boolean_empty) integer_max integer_max exec_flush exec_yank boolean_dup integer_min exec_do*count () integer_lt integer_pop boolean_flush integer_lte exec_y_when_autoconstructing () boolean_dup_times exec_do*count (integer_stackdepth integer_gt in2 boolean_or boolean_dup_items boolean_xor) boolean_or integer_dup_times integer_lt exec_do*times (exec_s_when_autoconstructing (boolean_dup) () ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 288 272 692 142 142 265 142 265 138)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (263 288 272 692 142 142 265 142 265 138)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_579} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup})
Best program: (in3 integer_empty print_integer exec_y () exec_pop (integer_yank boolean_frominteger exec_noop exec_do*range (integer_dec integer_lte integer_mult boolean_or exec_eq integer_gte boolean_xor in2) print_exec (in3) exec_do*times (integer_sub print_boolean in3 exec_while (tagged_579) integer_gt exec_do*count (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty) exec_do*while () boolean_empty) integer_max integer_max)) exec_flush exec_yank boolean_dup integer_min exec_do*count () integer_lt integer_pop boolean_flush integer_lte exec_y_when_autoconstructing () boolean_dup_times boolean_stackdepth boolean_and exec_do*count (in2 boolean_or boolean_dup_items boolean_xor) boolean_or integer_dup_times integer_lt exec_do*times (exec_s_when_autoconstructing (print_boolean boolean_dup) () ()))
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 77
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 7.391
Median total errors in population: 8
Error averages by case: (0.737 0.712 0.728 0.308 0.858 0.858 0.735 0.858 0.735 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.396
Average program size in population (points): 54.086
Average percent parens in population: 0.259
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1025423
--- Timings ---
Current time: 1559593844441 milliseconds
Total Time:           3.9 seconds
Initialization:       0.1 seconds,  2.8%
Reproduction:         1.7 seconds, 44.6%
Fitness Testing:      1.6 seconds, 42.4%
Report:               0.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: 96                 
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte})
Lexicase best program: (integer_fromboolean integer_pop integer_gte exec_dup_times () in2 print_boolean exec_k_when_autoconstructing (exec_while () print_integer integer_flush in3 boolean_not exec_when () integer_lte) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte})
Zero cases best program: (integer_fromboolean integer_pop integer_gte exec_dup_times () in2 print_boolean exec_k_when_autoconstructing (exec_while () print_integer integer_flush in3 boolean_not exec_when () integer_lte) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 317 1 317 313 310 65 1 313 65)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (317 317 1 317 313 310 65 1 313 65)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_70} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove})
Best program: (in2 exec_when (tagged_70) integer_fromboolean boolean_dup boolean_yank exec_rot (integer_shove) (integer_lte integer_eq exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (exec_dup () print_integer integer_gte boolean_yank exec_dup_items exec_dup_times (boolean_frominteger boolean_flush exec_swap (boolean_eq exec_dup_times () integer_lte integer_lte exec_when (integer_dec integer_gt exec_shove ())) ())) () ()) ()) ())
Errors: [0 0 1 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 47
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 7.981
Median total errors in population: 9
Error averages by case: (0.683 0.683 0.999 0.683 0.687 0.69 0.935 0.999 0.687 0.935)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.454
Average program size in population (points): 53.233
Average percent parens in population: 0.270
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1512462
--- Timings ---
Current time: 1559593846414 milliseconds
Total Time:           6.1 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         3.0 seconds, 48.4%
Fitness Testing:      2.1 seconds, 34.7%
Report:               0.9 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: 96                 
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction -78} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction -73} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_if} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_264} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_923})
Lexicase best program: (integer_add integer_max boolean_yankdup boolean_shove in2 print_integer boolean_not boolean_dup print_boolean boolean_rot -78 exec_k (exec_yank integer_dup_items) (-73 integer_empty exec_if () () exec_swap () (exec_s_when_autoconstructing (integer_mod exec_yankdup exec_dup (print_newline boolean_swap) exec_when (tagged_264 exec_swap (boolean_rot tagged_923) ())) () ())))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction -78} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction -73} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_if} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_264} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_923})
Zero cases best program: (integer_add integer_max boolean_yankdup boolean_shove in2 print_integer boolean_not boolean_dup print_boolean boolean_rot -78 exec_k (exec_yank integer_dup_items) (-73 integer_empty exec_if () () exec_swap () (exec_s_when_autoconstructing (integer_mod exec_yankdup exec_dup (print_newline boolean_swap) exec_when (tagged_264 exec_swap (boolean_rot tagged_923) ())) () ())))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 390 136 726 68 68 391 390 391 136)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (68 390 136 726 68 68 391 390 391 136)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer})
Best program: (exec_when (in2 print_boolean) exec_when () print_integer exec_do*range (exec_s (exec_empty exec_empty print_integer) () ()))
Errors: [1 0 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 17
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 7.236
Median total errors in population: 7
Error averages by case: (0.932 0.61 0.864 0.274 0.932 0.932 0.609 0.61 0.609 0.864)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.348
Average program size in population (points): 34.578
Average percent parens in population: 0.314
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1855458
--- Timings ---
Current time: 1559593848122 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.2 seconds, 52.8%
Fitness Testing:      2.4 seconds, 30.8%
Report:               1.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_579} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction 1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup})
Lexicase best program: (in3 print_integer exec_y () exec_pop (exec_noop boolean_frominteger integer_lte integer_mult exec_do*while (exec_eq boolean_dup integer_gte boolean_xor exec_dup_items in2) print_exec (in3) exec_do*times (exec_noop integer_sub print_boolean exec_while (tagged_579) in2 integer_gt exec_do*count (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty) exec_do*while () boolean_empty) integer_max integer_max)) exec_flush integer_add exec_shove (boolean_dup) integer_min exec_do*count () integer_lt integer_pop exec_y_when_autoconstructing () boolean_dup_times boolean_and boolean_xor boolean_rot in2 in4 boolean_or 1 boolean_dup_times boolean_dup_items integer_min boolean_or integer_dup_times in2 integer_empty integer_lt exec_do*times (integer_rot) boolean_dup)
Lexicase best errors: [0 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 76
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_579} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction 1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup})
Zero cases best program: (in3 print_integer exec_y () exec_pop (exec_noop boolean_frominteger integer_lte integer_mult exec_do*while (exec_eq boolean_dup integer_gte boolean_xor exec_dup_items in2) print_exec (in3) exec_do*times (exec_noop integer_sub print_boolean exec_while (tagged_579) in2 integer_gt exec_do*count (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty) exec_do*while () boolean_empty) integer_max integer_max)) exec_flush integer_add exec_shove (boolean_dup) integer_min exec_do*count () integer_lt integer_pop exec_y_when_autoconstructing () boolean_dup_times boolean_and boolean_xor boolean_rot in2 in4 boolean_or 1 boolean_dup_times boolean_dup_items integer_min boolean_or integer_dup_times in2 integer_empty integer_lt exec_do*times (integer_rot) boolean_dup)
Zero cases best errors: [0 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 76
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 300 1 304 1 405 303 239 1 239)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (239 300 1 304 1 405 303 239 1 239)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_579} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction tag_boolean_563} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup})
Best program: (print_integer in3 print_integer exec_y () integer_yank exec_when (boolean_frominteger exec_noop integer_dec exec_eq integer_gte integer_eq print_exec (boolean_and in3) exec_do*times (print_boolean integer_gte exec_while (tagged_579) exec_k () (integer_gt exec_stackdepth boolean_empty) boolean_and print_exec (tag_boolean_563 integer_max boolean_dup_items integer_max)) exec_flush integer_lte) exec_yank boolean_dup integer_min integer_lt integer_pop boolean_flush integer_lte integer_flush exec_y_when_autoconstructing () exec_dup_items boolean_dup_times boolean_or integer_shove boolean_xor integer_dup_times integer_lt exec_swap () (exec_s_when_autoconstructing (exec_rot (integer_dup_items) (print_boolean boolean_dup) ()) () ()))
Errors: [0 1 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 72
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.968
Median total errors in population: 7
Error averages by case: (0.761 0.7 0.999 0.696 0.999 0.595 0.697 0.761 0.999 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.524
Average program size in population (points): 45.219
Average percent parens in population: 0.267
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2317830
--- Timings ---
Current time: 1559593850671 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.8 seconds, 57.3%
Fitness Testing:      2.8 seconds, 28.1%
Report:               1.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: 61                 
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 25                 
Correct output: 49                  | Program output: 100                
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 100                
Correct output: 46                  | Program output: 60                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 71                 
Correct output: 35                  | Program output: 93                 
Correct output: 11                  | Program output: 72                 
Correct output: 10                  | Program output: 64                 
Correct output: 71                  | Program output: 95                 
Correct output: 21                  | Program output: 68                 
Correct output: 13                  | Program output: 69                 
Correct output: 41                  | Program output: 53                 
Correct output: 18                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 46                 
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -4                 
Correct output: -75                 | Program output: 57                 
Correct output: -76                 | Program output: -27                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 45                 
Correct output: -49                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 32                 
Correct output: -39                 | Program output: 16                 
Correct output: -82                 | Program output: -59                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -7                 
Correct output: -56                 | Program output: 80                 
Correct output: -95                 | Program output: -35                
Correct output: -96                 | Program output: 31                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: 53                 
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: 64                 
Correct output: -88                 | Program output: 99                 
Correct output: -81                 | Program output: -44                
Correct output: -52                 | Program output: 59                 
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -30                
Correct output: -96                 | Program output: 59                 
Correct output: -46                 | Program output: 8                  
Correct output: -56                 | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: 100                
Correct output: -75                 | Program output: 38                 
Correct output: -9                  | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 49                 
Correct output: -56                 | Program output: -6                 
Correct output: -88                 | Program output: 36                 
Correct output: -10                 | Program output: 54                 
Correct output: -38                 | Program output: 33                 
Correct output: -43                 | Program output: 79                 
Correct output: -81                 | Program output: 45                 
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: 43                 
Correct output: -65                 | Program output: 58                 
Correct output: -35                 | Program output: 70                 
Correct output: -15                 | Program output: 11                 
Correct output: -76                 | Program output: -43                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 87                 
Correct output: 1                   | Program output: 6                  
Correct output: -65                 | Program output: 60                 
Correct output: -7                  | Program output: 57                 
Correct output: -88                 | Program output: -4                 
Correct output: -87                 | Program output: -51                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_eq in4 boolean_invert_first_then_and exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (in1) exec_dup_items integer_lte exec_yankdup integer_flush integer_pop boolean_xor integer_mult print_boolean boolean_not in1 in1 boolean_dup integer_pop integer_dup_times integer_empty integer_gt exec_s (integer_swap integer_gte exec_do*times (in2) integer_sub) (integer_fromboolean boolean_and) ())
Lexicase best errors: [1 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_eq in4 boolean_invert_first_then_and exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (in1) exec_dup_items integer_lte exec_yankdup integer_flush integer_pop boolean_xor integer_mult print_boolean boolean_not in1 in1 boolean_dup integer_pop integer_dup_times integer_empty integer_gt exec_s (integer_swap integer_gte exec_do*times (in2) integer_sub) (integer_fromboolean boolean_and) ())
Zero cases best errors: [1 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 253 4 154 252 156 156 227 228 4)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (4 253 4 154 252 156 156 227 228 4)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and})
Best program: (exec_eq exec_s_when_autoconstructing () (in4) (boolean_invert_first_then_and print_integer) integer_fromboolean boolean_dup_items integer_dec exec_dup_items integer_lte exec_yankdup integer_flush integer_pop exec_s_when_autoconstructing () (boolean_xor integer_mult print_boolean) (in1 in1 boolean_dup integer_pop integer_dup_times integer_empty integer_swap exec_s (integer_shove integer_gt integer_gte exec_do*times (in2) integer_sub) (integer_fromboolean boolean_and) ()))
Errors: [0 1 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.562
Median total errors in population: 8
Error averages by case: (0.996 0.747 0.996 0.846 0.748 0.844 0.844 0.773 0.772 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.114
Average program size in population (points): 48.996
Average percent parens in population: 0.246
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2817835
--- Timings ---
Current time: 1559593852749 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.0 seconds, 56.9%
Fitness Testing:      3.3 seconds, 26.9%
Report:               1.9 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction tagged_579} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Lexicase best program: (in3 integer_empty print_integer exec_y () integer_yank integer_pop boolean_rot exec_noop integer_inc exec_do*range (integer_lte integer_mult exec_yank integer_pop exec_eq integer_gte integer_lte) boolean_xor print_exec (integer_min in3) exec_do*times (integer_sub print_boolean boolean_xor integer_gte exec_while (integer_gte tagged_579) print_boolean exec_dup (exec_k_when_autoconstructing () (boolean_empty) exec_do*while () integer_fromboolean boolean_empty) integer_max integer_max) boolean_frominteger exec_flush exec_yank boolean_dup integer_min exec_do*while (integer_dup_items) integer_swap integer_lt integer_pop integer_dup boolean_flush boolean_eq integer_mod integer_lte exec_y_when_autoconstructing () boolean_dup_times exec_do*count (integer_stackdepth integer_div boolean_and boolean_dup_items integer_min) boolean_frominteger exec_yank boolean_stackdepth integer_dup_times integer_lt exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_dup) () ())
Lexicase best errors: [0 1 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction tagged_579} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Zero cases best program: (in3 integer_empty print_integer exec_y () integer_yank integer_pop boolean_rot exec_noop integer_inc exec_do*range (integer_lte integer_mult exec_yank integer_pop exec_eq integer_gte integer_lte) boolean_xor print_exec (integer_min in3) exec_do*times (integer_sub print_boolean boolean_xor integer_gte exec_while (integer_gte tagged_579) print_boolean exec_dup (exec_k_when_autoconstructing () (boolean_empty) exec_do*while () integer_fromboolean boolean_empty) integer_max integer_max) boolean_frominteger exec_flush exec_yank boolean_dup integer_min exec_do*while (integer_dup_items) integer_swap integer_lt integer_pop integer_dup boolean_flush boolean_eq integer_mod integer_lte exec_y_when_autoconstructing () boolean_dup_times exec_do*count (integer_stackdepth integer_div boolean_and boolean_dup_items integer_min) boolean_frominteger exec_yank boolean_stackdepth integer_dup_times integer_lt exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_dup) () ())
Zero cases best errors: [0 1 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 136 181 167 169 136 176 176 132 140)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (175 136 181 167 169 136 176 176 132 140)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tagged_579} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_563} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod})
Best program: (in3 integer_empty integer_gte print_integer exec_y () integer_yank exec_do*range (integer_lte integer_mult exec_eq integer_gte boolean_xor in2) print_exec (integer_min in3) exec_do*times (integer_sub exec_rot () (integer_gte exec_while (exec_flush integer_dup_items tagged_579) integer_gt integer_pop exec_when () exec_do*count (exec_k_when_autoconstructing () (boolean_empty) exec_dup_times (boolean_rot tag_boolean_563 exec_if () (boolean_yank integer_max exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_flush in2 integer_dup) (exec_yank boolean_dup) (exec_do*count () print_newline integer_pop) integer_sub integer_lte integer_stackdepth in2 exec_while ()) () (boolean_xor) integer_dup_times boolean_invert_second_then_and integer_rot) integer_lt exec_do*times (exec_noop) exec_dup_items integer_stackdepth print_boolean boolean_dup integer_mod))) ()))
Errors: [0 1 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 88
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 8.412
Median total errors in population: 9
Error averages by case: (0.825 0.864 0.819 0.833 0.831 0.864 0.824 0.824 0.868 0.86)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.324
Average program size in population (points): 46.16
Average percent parens in population: 0.234
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3437607
--- Timings ---
Current time: 1559593855135 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 57.3%
Fitness Testing:      3.8 seconds, 25.9%
Report:               2.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 33                 
Correct output: 49                  | Program output: 75                 
Correct output: 14                  | Program output: 50                 
Correct output: 31                  | Program output: 88                 
Correct output: 46                  | Program output: 85                 
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 32                 
Correct output: 13                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 92                 
Correct output: 11                  | Program output: 37                 
Correct output: 10                  | Program output: 79                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 85                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 56                 
Correct output: 18                  | Program output: 58                 
Correct output: 17                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 91                 
Correct output: 7                   | Program output: 79                 
Correct output: 18                  | Program output: 92                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 19                 
Correct output: 0                   | Program output: 69                 
Correct output: -49                 | Program output: -13                
Correct output: -77                 | Program output: -51                
Correct output: -79                 | Program output: -21                
Correct output: -39                 | Program output: 47                 
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -21                
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -64                
Correct output: -56                 | Program output: -52                
Correct output: -95                 | Program output: -54                
Correct output: -96                 | Program output: -46                
Correct output: -51                 | Program output: 39                 
Correct output: -91                 | Program output: 50                 
Correct output: -30                 | Program output: -5                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 91                 
Correct output: -44                 | Program output: 77                 
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -66                
Correct output: -46                 | Program output: -25                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -74                
Correct output: -96                 | Program output: 7                  
Correct output: -75                 | Program output: 8                  
Correct output: -9                  | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -41                 | Program output: 25                 
Correct output: -56                 | Program output: 61                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: 44                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -72                
Correct output: 11                  | Program output: 99                 
Correct output: -87                 | Program output: 8                  
Correct output: -65                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: 53                 
Correct output: -76                 | Program output: -70                
Correct output: 20                  | Program output: 30                 
Correct output: -88                 | Program output: -58                
Correct output: -97                 | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -44                
Correct output: -7                  | Program output: 34                 
Correct output: -88                 | Program output: 52                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 14                 
Correct output: -32                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max})
Lexicase best program: (integer_pop exec_do*count (exec_empty in4 exec_eq in2) exec_k_when_autoconstructing (print_integer integer_flush) (integer_flush integer_shove in4 integer_empty boolean_not integer_add integer_sub exec_swap (exec_when () integer_max) ()))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max})
Zero cases best program: (integer_pop exec_do*count (exec_empty in4 exec_eq in2) exec_k_when_autoconstructing (print_integer integer_flush) (integer_flush integer_shove in4 integer_empty boolean_not integer_add integer_sub exec_swap (exec_when () integer_max) ()))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 290 51 133 135 51 134 51 52 199)
Population mean number of elite cases: 1.23
Count of perfect (error zero) individuals by case: (135 290 51 133 135 51 134 51 52 199)
Population mean number of perfect (error zero) cases: 1.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction -94} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction 16} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Best program: (exec_eq in4 boolean_invert_first_then_and exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (integer_dec in1) exec_do*while (exec_dup_items in3) exec_yankdup boolean_xor integer_mult -94 boolean_not in1 boolean_dup integer_pop integer_dup_times integer_swap integer_gte exec_do*times (16 integer_sub) integer_fromboolean)
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 33
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 8.769
Median total errors in population: 9
Error averages by case: (0.865 0.71 0.949 0.867 0.865 0.949 0.866 0.949 0.948 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.575
Average program size in population (points): 49.458
Average percent parens in population: 0.242
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3917040
--- Timings ---
Current time: 1559593857036 milliseconds
Total Time:          16.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.6 seconds, 57.4%
Fitness Testing:      4.2 seconds, 25.1%
Report:               2.8 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_563} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup})
Lexicase best program: (in3 integer_empty exec_noop print_integer exec_y () integer_yank boolean_stackdepth exec_do*range (integer_lte integer_mult integer_yankdup integer_gte boolean_invert_first_then_and in2 boolean_xor boolean_dup print_exec (integer_min in3) exec_do*times (integer_sub exec_shove (exec_rot () (exec_while (print_boolean integer_dup_items exec_when () integer_inc integer_max exec_do*count (exec_stackdepth boolean_and boolean_empty) tag_boolean_563 integer_max exec_s_when_autoconstructing (integer_max) () (exec_flush in2 boolean_rot exec_yank integer_dec print_newline integer_lt boolean_flush integer_lte boolean_dup_times exec_while (exec_eq boolean_or exec_while ())) boolean_and) boolean_invert_second_then_and) (integer_empty boolean_dup_items boolean_xor) boolean_or)) integer_dup_times boolean_invert_second_then_and integer_rot) integer_lt exec_do*times (boolean_flush integer_pop integer_stackdepth print_boolean boolean_dup))
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 85
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_boolean_563} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup})
Zero cases best program: (in3 integer_empty exec_noop print_integer exec_y () integer_yank boolean_stackdepth exec_do*range (integer_lte integer_mult integer_yankdup integer_gte boolean_invert_first_then_and in2 boolean_xor boolean_dup print_exec (integer_min in3) exec_do*times (integer_sub exec_shove (exec_rot () (exec_while (print_boolean integer_dup_items exec_when () integer_inc integer_max exec_do*count (exec_stackdepth boolean_and boolean_empty) tag_boolean_563 integer_max exec_s_when_autoconstructing (integer_max) () (exec_flush in2 boolean_rot exec_yank integer_dec print_newline integer_lt boolean_flush integer_lte boolean_dup_times exec_while (exec_eq boolean_or exec_while ())) boolean_and) boolean_invert_second_then_and) (integer_empty boolean_dup_items boolean_xor) boolean_or)) integer_dup_times boolean_invert_second_then_and integer_rot) integer_lt exec_do*times (boolean_flush integer_pop integer_stackdepth print_boolean boolean_dup))
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 85
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 220 313 636 85 221 89 89 83 88)
Population mean number of elite cases: 1.91
Count of perfect (error zero) individuals by case: (83 220 313 636 85 221 89 89 83 88)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_579} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt})
Best program: (integer_stackdepth in3 integer_empty print_integer integer_yank integer_div boolean_frominteger exec_do*range (integer_dec integer_mult boolean_or integer_dup_times boolean_eq exec_eq in4) boolean_stackdepth boolean_xor integer_dec in3 boolean_eq integer_gt exec_swap () (integer_fromboolean tagged_579) exec_do*count (exec_dup_times (integer_mod integer_rot exec_do*while () integer_max boolean_dup exec_stackdepth exec_s (integer_max) () (integer_mult boolean_dup) integer_pop integer_lte exec_y_when_autoconstructing () boolean_dup_times integer_add exec_do*count (integer_stackdepth exec_do*range () print_exec (integer_dup_times integer_lt)))))
Errors: [1 1 0 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 8.093
Median total errors in population: 9
Error averages by case: (0.917 0.78 0.687 0.364 0.915 0.779 0.911 0.911 0.917 0.912)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.554
Average program size in population (points): 43.653
Average percent parens in population: 0.228
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4477314
--- Timings ---
Current time: 1559593859243 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.2 seconds, 58.8%
Fitness Testing:      4.7 seconds, 24.5%
Report:               3.1 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: 96                 
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction tag_boolean_576} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_392} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_563} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_exec_345} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times})
Lexicase best program: (in3 integer_empty integer_empty integer_swap print_integer tag_boolean_576 exec_y () boolean_not boolean_frominteger exec_while () exec_noop exec_do*range (integer_div exec_swap () (exec_yank in2) print_exec (boolean_swap exec_swap (exec_do*count (in3) integer_gt exec_do*times (integer_pop integer_dup) integer_gte boolean_or tagged_392 integer_gt exec_rot (exec_stackdepth exec_k_when_autoconstructing () (tag_boolean_563 in1 in2 integer_max integer_max)) (exec_flush exec_yank exec_rot (integer_lte exec_do*count (integer_stackdepth in2 integer_rot tag_exec_345 (exec_do*while (boolean_or print_newline boolean_or)) integer_sub exec_do*times ())) () ()) ()) ())))
Lexicase best errors: [0 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction tag_boolean_576} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_392} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_563} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_exec_345} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times})
Zero cases best program: (in3 integer_empty integer_empty integer_swap print_integer tag_boolean_576 exec_y () boolean_not boolean_frominteger exec_while () exec_noop exec_do*range (integer_div exec_swap () (exec_yank in2) print_exec (boolean_swap exec_swap (exec_do*count (in3) integer_gt exec_do*times (integer_pop integer_dup) integer_gte boolean_or tagged_392 integer_gt exec_rot (exec_stackdepth exec_k_when_autoconstructing () (tag_boolean_563 in1 in2 integer_max integer_max)) (exec_flush exec_yank exec_rot (integer_lte exec_do*count (integer_stackdepth in2 integer_rot tag_exec_345 (exec_do*while (boolean_or print_newline boolean_or)) integer_sub exec_do*times ())) () ()) ()) ())))
Zero cases best errors: [0 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 305 214 304 12 148 664 215 12 214)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (304 305 214 304 12 148 664 215 12 214)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max})
Best program: (integer_pop exec_empty exec_dup (in2) exec_k_when_autoconstructing (boolean_dup print_integer integer_flush integer_empty integer_add integer_sub exec_when () integer_max) ())
Errors: [1 1 0 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.608
Median total errors in population: 6
Error averages by case: (0.696 0.695 0.786 0.696 0.988 0.852 0.336 0.785 0.988 0.786)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.206
Average program size in population (points): 50.55
Average percent parens in population: 0.246
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4959569
--- Timings ---
Current time: 1559593861065 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.4 seconds, 59.4%
Fitness Testing:      5.1 seconds, 24.4%
Report:               3.3 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: 96                 
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 39                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 93                 
Correct output: 0                   | Program output: 86                 
Correct output: 13                  | Program output: 37                 
Correct output: 18                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 63                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 87                 
Correct output: 17                  | Program output: 78                 
Correct output: 4                   | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: -27                
Correct output: -75                 | Program output: -46                
Correct output: -76                 | Program output: 33                 
Correct output: -87                 | Program output: 13                 
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: 27                 
Correct output: -79                 | Program output: 21                 
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: 35                 
Correct output: -85                 | Program output: 68                 
Correct output: -52                 | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 3                  
Correct output: -51                 | Program output: 81                 
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: 84                 
Correct output: -87                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: 34                 
Correct output: -97                 | Program output: 31                 
Correct output: -96                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 67                 
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 72                 
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: 84                 
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: 20                 
Correct output: -10                 | Program output: 93                 
Correct output: -38                 | Program output: 89                 
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: 26                 
Correct output: -41                 | Program output: 76                 
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 49                 
Correct output: -87                 | Program output: 99                 
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: 24                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 100                
Correct output: -88                 | Program output: -23                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 94                 
Correct output: -65                 | Program output: -24                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -58                
Correct output: -44                 | Program output: 56                 
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer})
Lexicase best program: (exec_when (integer_rot) in2 print_boolean exec_when () print_integer exec_eq exec_do*range (exec_empty integer_eq boolean_not exec_empty print_integer))
Lexicase best errors: [1 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer})
Zero cases best program: (exec_when (integer_rot) in2 print_boolean exec_when () print_integer exec_eq exec_do*range (exec_empty integer_eq boolean_not exec_empty print_integer))
Zero cases best errors: [1 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 135 281 250 135 249 250 250 730 66)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (68 135 281 250 135 249 250 250 730 66)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 3, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items})
Best program: (in2 integer_lt integer_rot boolean_pop integer_add print_integer integer_lt integer_lte integer_dup_times integer_max exec_if (exec_k_when_autoconstructing (boolean_stackdepth integer_dup_times integer_inc exec_do*count () integer_yank exec_dup_items) ()) ())
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 24
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.586
Median total errors in population: 8
Error averages by case: (0.932 0.865 0.719 0.75 0.865 0.751 0.75 0.75 0.27 0.934)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.112
Average program size in population (points): 48.026
Average percent parens in population: 0.250
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5462407
--- Timings ---
Current time: 1559593862944 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 59.9%
Fitness Testing:      5.5 seconds, 24.3%
Report:               3.5 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 2, :instruction 59} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while})
Lexicase best program: (in3 integer_empty print_integer exec_y () boolean_frominteger integer_yank boolean_frominteger exec_do*range (in4) boolean_swap integer_lte exec_k (integer_shove) (boolean_pop) boolean_empty boolean_empty boolean_swap integer_mult exec_eq exec_pop (boolean_xor exec_do*times (boolean_yank print_boolean boolean_and integer_mod integer_div exec_while (exec_stackdepth integer_rot exec_k_when_autoconstructing () (boolean_xor exec_do*while () integer_inc boolean_or boolean_empty) integer_max exec_flush integer_yank boolean_swap boolean_dup) integer_min exec_do*count () integer_empty) integer_sub integer_shove integer_lt boolean_empty) exec_yank boolean_rot boolean_frominteger integer_lte boolean_swap 59 integer_sub boolean_dup_times exec_do*count (boolean_yank exec_do*range (boolean_xor) boolean_xor) integer_dup_times exec_s_when_autoconstructing (exec_do*times () exec_k () (exec_do*while ())) () ())
Lexicase best errors: [1 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 87
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 2, :instruction 59} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while})
Zero cases best program: (in3 integer_empty print_integer exec_y () boolean_frominteger integer_yank boolean_frominteger exec_do*range (in4) boolean_swap integer_lte exec_k (integer_shove) (boolean_pop) boolean_empty boolean_empty boolean_swap integer_mult exec_eq exec_pop (boolean_xor exec_do*times (boolean_yank print_boolean boolean_and integer_mod integer_div exec_while (exec_stackdepth integer_rot exec_k_when_autoconstructing () (boolean_xor exec_do*while () integer_inc boolean_or boolean_empty) integer_max exec_flush integer_yank boolean_swap boolean_dup) integer_min exec_do*count () integer_empty) integer_sub integer_shove integer_lt boolean_empty) exec_yank boolean_rot boolean_frominteger integer_lte boolean_swap 59 integer_sub boolean_dup_times exec_do*count (boolean_yank exec_do*range (boolean_xor) boolean_xor) integer_dup_times exec_s_when_autoconstructing (exec_do*times () exec_k () (exec_do*while ())) () ())
Zero cases best errors: [1 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 87
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 89 318 170 89 97 89 319 88 89)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (141 89 318 170 89 97 89 319 88 89)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean})
Best program: (in3 integer_empty print_integer exec_y () boolean_frominteger exec_do*range (integer_div in1 integer_dec boolean_or exec_k (integer_dup_times integer_gte boolean_xor integer_sub in3) (boolean_eq boolean_invert_first_then_and exec_while (integer_swap integer_inc exec_eq boolean_invert_second_then_and boolean_and) integer_yankdup) boolean_dup_items integer_rot integer_max integer_swap exec_dup_items) integer_mult exec_yank exec_dup (integer_gte boolean_invert_first_then_and boolean_dup) boolean_flush boolean_dup_times boolean_dup_times integer_max print_integer integer_inc exec_do*count (integer_dup_times print_boolean))
Errors: [1 0 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 53
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 8.511
Median total errors in population: 9
Error averages by case: (0.859 0.911 0.682 0.83 0.911 0.903 0.911 0.681 0.912 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.715
Average program size in population (points): 38.504
Average percent parens in population: 0.255
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5909931
--- Timings ---
Current time: 1559593864872 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 60.3%
Fitness Testing:      5.9 seconds, 24.2%
Report:               3.7 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -5                 
Correct output: -32                 | Program output: 96                 
Correct output: 86                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: 89                 
Correct output: -63                 | Program output: 58                 
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 45                 
Correct output: 49                  | Program output: 76                 
Correct output: 14                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 57                 
Correct output: 55                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 24                 
Correct output: 18                  | Program output: 70                 
Correct output: 35                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 98                 
Correct output: 71                  | Program output: 83                 
Correct output: 21                  | Program output: 25                 
Correct output: 13                  | Program output: 78                 
Correct output: 41                  | Program output: 82                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 94                 
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 63                 
Correct output: -99                 | Program output: 30                 
Correct output: -75                 | Program output: -52                
Correct output: -76                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: 36                 
Correct output: -77                 | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 1                  
Correct output: -95                 | Program output: 91                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: 74                 
Correct output: -87                 | Program output: -27                
Correct output: -88                 | Program output: -14                
Correct output: -81                 | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -32                
Correct output: -56                 | Program output: 20                 
Correct output: -78                 | Program output: 14                 
Correct output: -96                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 57                 
Correct output: -95                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -57                
Correct output: -10                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 49                 
Correct output: -81                 | Program output: 34                 
Correct output: -41                 | Program output: 31                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: 23                 
Correct output: -15                 | Program output: 48                 
Correct output: -76                 | Program output: 70                 
Correct output: 20                  | Program output: 28                 
Correct output: -88                 | Program output: 43                 
Correct output: -97                 | Program output: 73                 
Correct output: 1                   | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: 11                 
Correct output: -88                 | Program output: -55                
Correct output: -87                 | Program output: -70                
Correct output: -44                 | Program output: 3                  
Correct output: -32                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max})
Lexicase best program: (in3 boolean_eq print_integer exec_dup (integer_shove exec_y () boolean_frominteger exec_rot (exec_swap (integer_div integer_lte exec_swap (integer_yankdup) (integer_dec integer_shove) integer_gte integer_dup in2) (exec_do*count (exec_do*times (integer_dup_times integer_min exec_while (exec_dup_times (exec_do*count (integer_fromboolean integer_flush exec_eq exec_stackdepth exec_do*count (exec_k_when_autoconstructing () (integer_max in4 integer_mult integer_sub exec_yank boolean_dup) integer_lt integer_gte integer_pop) boolean_flush integer_inc integer_stackdepth) integer_lte print_boolean exec_pop () integer_fromboolean boolean_dup_times integer_dup exec_do*count (integer_mult exec_shove (boolean_or)) integer_dup_times integer_max)))))) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max})
Zero cases best program: (in3 boolean_eq print_integer exec_dup (integer_shove exec_y () boolean_frominteger exec_rot (exec_swap (integer_div integer_lte exec_swap (integer_yankdup) (integer_dec integer_shove) integer_gte integer_dup in2) (exec_do*count (exec_do*times (integer_dup_times integer_min exec_while (exec_dup_times (exec_do*count (integer_fromboolean integer_flush exec_eq exec_stackdepth exec_do*count (exec_k_when_autoconstructing () (integer_max in4 integer_mult integer_sub exec_yank boolean_dup) integer_lt integer_gte integer_pop) boolean_flush integer_inc integer_stackdepth) integer_lte print_boolean exec_pop () integer_fromboolean boolean_dup_times integer_dup exec_do*count (integer_mult exec_shove (boolean_or)) integer_dup_times integer_max)))))) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 445 141 70 449 448 450 675 450 450)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (449 445 141 70 449 448 450 675 450 450)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction 20} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction tagged_579} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 1, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction print_exec} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_exec_704} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup})
Best program: (in3 integer_empty print_integer exec_y () integer_yank boolean_eq integer_dec integer_pop exec_noop integer_inc exec_s (boolean_rot integer_lte print_exec (integer_mult exec_yank integer_pop exec_eq 20 integer_lte) integer_rot) (boolean_xor exec_do*times (print_boolean integer_eq exec_do*times (boolean_xor integer_gte integer_div integer_mod) integer_gte tagged_579) exec_dup (exec_k_when_autoconstructing () (boolean_empty) integer_inc integer_fromboolean integer_fromboolean integer_dup_times exec_dup_items boolean_empty) integer_flush integer_max exec_k_when_autoconstructing () (integer_max integer_max)) (exec_when () integer_swap integer_empty boolean_frominteger) exec_flush exec_rot (exec_yank boolean_dup) (integer_dup integer_min integer_min exec_s_when_autoconstructing (in1 exec_do*while (integer_add) boolean_invert_second_then_and integer_swap print_exec () integer_dup) (exec_when (exec_flush) boolean_eq boolean_shove) (exec_noop integer_dec) exec_y_when_autoconstructing () boolean_dup_times exec_do*count (boolean_flush boolean_not integer_rot integer_pop exec_y_when_autoconstructing (integer_dup integer_min) integer_dup_times integer_min)) (integer_lte) integer_lt exec_s_when_autoconstructing (boolean_invert_second_then_and integer_fromboolean tag_exec_704 (boolean_pop) boolean_dup) () ())
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 91
Size: 121
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 5.973
Median total errors in population: 8
Error averages by case: (0.551 0.555 0.859 0.93 0.551 0.552 0.55 0.325 0.55 0.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.255
Average program size in population (points): 58.931
Average percent parens in population: 0.249
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6442763
--- Timings ---
Current time: 1559593867349 milliseconds
Total Time:          26.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 60.3%
Fitness Testing:      6.4 seconds, 23.9%
Report:               4.1 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: 50                 
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 25                 
Correct output: 49                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 88                 
Correct output: 46                  | Program output: 60                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 92                 
Correct output: 11                  | Program output: 37                 
Correct output: 10                  | Program output: 64                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 53                 
Correct output: 18                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 45                 
Correct output: -49                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -21                
Correct output: -39                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -64                
Correct output: -56                 | Program output: -52                
Correct output: -95                 | Program output: -54                
Correct output: -96                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: 50                 
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 59                 
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -66                
Correct output: -46                 | Program output: -25                
Correct output: -56                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: 7                  
Correct output: -75                 | Program output: 8                  
Correct output: -9                  | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 25                 
Correct output: -56                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: 44                 
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -72                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: 8                  
Correct output: -65                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: 11                 
Correct output: -76                 | Program output: -70                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -44                
Correct output: -7                  | Program output: 34                 
Correct output: -88                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean exec_do*times (boolean_dup_items) integer_pop) (exec_dup (in1) tag_integer_822 integer_min integer_mod) exec_yankdup exec_dup_times (in3 exec_yank integer_flush) exec_dup () exec_do*times () boolean_dup integer_mult print_boolean integer_add exec_do*times () boolean_not integer_dup_items integer_eq exec_flush in1 boolean_dup integer_pop integer_dup_times exec_pop () integer_lt integer_empty boolean_shove integer_fromboolean integer_swap integer_sub integer_fromboolean)
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean exec_do*times (boolean_dup_items) integer_pop) (exec_dup (in1) tag_integer_822 integer_min integer_mod) exec_yankdup exec_dup_times (in3 exec_yank integer_flush) exec_dup () exec_do*times () boolean_dup integer_mult print_boolean integer_add exec_do*times () boolean_not integer_dup_items integer_eq exec_flush in1 boolean_dup integer_pop integer_dup_times exec_pop () integer_lt integer_empty boolean_shove integer_fromboolean integer_swap integer_sub integer_fromboolean)
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (623 583 582 41 703 43 43 41 43 39)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (623 583 582 41 703 43 43 41 43 39)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range})
Best program: (in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min integer_mod) boolean_yank exec_dup_times (in3 integer_flush) boolean_frominteger integer_yank exec_dup () boolean_dup integer_mult boolean_not in1 integer_rot in4 boolean_dup integer_pop integer_dup_times integer_lt integer_empty in4 boolean_swap boolean_shove integer_fromboolean integer_swap exec_shove (integer_sub) exec_do*range ())
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.259
Median total errors in population: 6
Error averages by case: (0.377 0.417 0.418 0.959 0.297 0.957 0.957 0.959 0.957 0.961)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.601
Average program size in population (points): 65.152
Average percent parens in population: 0.254
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7039739
--- Timings ---
Current time: 1559593869551 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.4 seconds, 59.8%
Fitness Testing:      7.0 seconds, 23.9%
Report:               4.7 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -21                
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 8                  
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: 8                  
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -44                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in4 exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min in2 integer_min integer_mod) exec_while () exec_dup_times (in3 integer_flush) exec_y (exec_dup () exec_do*times () boolean_dup integer_mult print_boolean) boolean_not in1 exec_noop boolean_dup integer_pop integer_dup_times integer_lt exec_if () (integer_lt) integer_empty integer_lte integer_swap integer_sub integer_fromboolean)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in4 exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min in2 integer_min integer_mod) exec_while () exec_dup_times (in3 integer_flush) exec_y (exec_dup () exec_do*times () boolean_dup integer_mult print_boolean) boolean_not in1 exec_noop boolean_dup integer_pop integer_dup_times integer_lt exec_if () (integer_lt) integer_empty integer_lte integer_swap integer_sub integer_fromboolean)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 563 6 200 4 275 4 4 4 283)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (283 563 6 200 4 275 4 4 4 283)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Best program: (in4 exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min in2 integer_min integer_mod) exec_while () exec_dup_times (in3 integer_flush) exec_y (exec_dup () exec_do*times () boolean_dup integer_mult print_boolean) boolean_not in1 exec_noop boolean_dup integer_pop integer_dup_times integer_lt exec_if () (integer_lt) integer_empty integer_lte integer_swap integer_sub integer_fromboolean)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.374
Median total errors in population: 8
Error averages by case: (0.717 0.437 0.994 0.8 0.996 0.725 0.996 0.996 0.996 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.473
Average program size in population (points): 52.659
Average percent parens in population: 0.225
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7600739
--- Timings ---
Current time: 1559593871802 milliseconds
Total Time:          31.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 59.6%
Fitness Testing:      7.4 seconds, 23.8%
Report:               5.0 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 203
Test mean error for best: 0.20300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 97                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -66                
Correct output: 0                   | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -21                
Correct output: -39                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -22                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: 6                  
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 10                 
Correct output: -44                 | Program output: -18                
Correct output: -97                 | Program output: -61                
Correct output: -96                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: 8                  
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -34                
Correct output: -56                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: 8                  
Correct output: -65                 | Program output: -30                
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -44                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in4 exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min in2 integer_min integer_mod) exec_while () exec_dup_times (in3 integer_flush) exec_y (exec_dup () integer_flush exec_do*times () boolean_dup integer_mult print_boolean) boolean_not exec_noop boolean_dup integer_dup_times integer_lt exec_if () (exec_shove () integer_lt) integer_empty integer_lte integer_swap integer_mult integer_sub integer_fromboolean)
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in4 exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min in2 integer_min integer_mod) exec_while () exec_dup_times (in3 integer_flush) exec_y (exec_dup () integer_flush exec_do*times () boolean_dup integer_mult print_boolean) boolean_not exec_noop boolean_dup integer_dup_times integer_lt exec_if () (exec_shove () integer_lt) integer_empty integer_lte integer_swap integer_mult integer_sub integer_fromboolean)
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 478 333 222 223 232 33 354 48 33)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (573 478 333 222 223 232 33 354 48 33)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_822} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Best program: (in4 exec_rot (print_integer) (integer_fromboolean boolean_dup_items) (exec_dup (in1) tag_integer_822 integer_min in2 integer_min integer_mod) exec_while () exec_dup_times (in3 integer_flush) exec_y (exec_dup () exec_do*times () boolean_dup integer_mult print_boolean) boolean_not exec_swap () (exec_noop boolean_dup integer_pop exec_yank integer_dup_times exec_if () (integer_lt) integer_empty integer_lte) integer_sub integer_fromboolean)
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.471
Median total errors in population: 8
Error averages by case: (0.427 0.522 0.667 0.778 0.777 0.768 0.967 0.646 0.952 0.967)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.783
Average program size in population (points): 47.451
Average percent parens in population: 0.244
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8646109
--- Timings ---
Current time: 1559593874320 milliseconds
Total Time:          33.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 58.3%
Fitness Testing:      8.2 seconds, 24.3%
Report:               5.7 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 48
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 48
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 386 174 150 397 411 227 384 151 403)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (151 386 174 150 397 411 227 384 151 403)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean})
Best program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 48
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.166
Median total errors in population: 8
Error averages by case: (0.849 0.614 0.826 0.85 0.603 0.589 0.773 0.616 0.849 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.947
Average program size in population (points): 47.749
Average percent parens in population: 0.246
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 9615977
--- Timings ---
Current time: 1559593876579 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.7 seconds, 57.3%
Fitness Testing:      8.9 seconds, 24.6%
Report:               6.4 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 48


Auto-simplifying with starting size: 48
step: 0
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 500
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 1000
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 1500
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 2000
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 2500
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 3000
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 3500
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 4000
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 4500
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 5000
program: (in2 in4 exec_rot (print_integer) (boolean_frominteger integer_fromboolean boolean_dup_items) (boolean_or in3 exec_dup (exec_s () (in1) (integer_min)) integer_min integer_rot integer_mod) in3 exec_yankdup integer_flush exec_do*times () integer_mult exec_do*times () in1 integer_rot boolean_dup in3 integer_pop integer_dup_times integer_lt exec_do*times (integer_lte integer_fromboolean) boolean_eq integer_swap integer_sub boolean_rot integer_fromboolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: 86                  | Program output: 86                 
Correct output: -50                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: 70                  | Program output: 70                 
Correct output: -12                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: 93                  | Program output: 93                 
Correct output: -61                 | Program output: -61                
Correct output: 63                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: 52                  | Program output: 52                 
Correct output: 59                  | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: 13                  | Program output: 13                 
Correct output: 49                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 31                  | Program output: 31                 
Correct output: 46                  | Program output: 46                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 71                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: 0                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -30                 | Program output: -30                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -81                 | Program output: -81                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: 20                  | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -65                 | Program output: -65                
Correct output: -7                  | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -32                 | Program output: -32                
;;******************************
