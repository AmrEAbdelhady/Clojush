Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-36 -72 -72 -72] -72] [[95 -59 95 95] -59] [[20 68 20 20] 20] [[-39 -83 -83 -83] -83] [[70 -35 70 70] -35] [[24 24 87 24] 24] [[-71 68 -71 -71] -71] [[-10 -10 -10 13] -10] [[-97 -97 -97 -53] -97] [[-100 -100 -100 3] -100] [(-17 -17 -17 -17) -17] [(74 74 74 74) 74] [(-37 -37 -37 -37) -37] [(88 88 88 88) 88] [(-23 -23 -23 -23) -23] [(76 60 94 68) 60] [(70 80 9 45) 9] [(37 55 49 62) 37] [(100 2 6 19) 2] [(10 8 42 48) 8] [(66 56 77 28) 28] [(36 89 37 44) 36] [(37 51 41 42) 37] [(9 60 22 71) 9] [(34 20 31 8) 8] [(25 28 70 38) 25] [(95 80 26 89) 26] [(37 59 32 5) 5] [(44 95 74 49) 44] [(53 1 95 36) 1] [(42 86 100 93) 42] [(5 96 76 80) 5] [(24 12 7 31) 7] [(85 48 50 82) 48] [(16 98 23 35) 16] [(-39 88 -93 -73) -93] [(-25 53 44 -45) -45] [(62 -24 -67 89) -67] [(-100 -69 21 97) -100] [(95 67 96 -9) -9] [(-17 -36 34 74) -36] [(61 1 26 1) 1] [(-63 89 -93 -22) -93] [(-10 -1 -69 86) -69] [(74 94 20 28) 20] [(8 74 -38 -89) -89] [(-9 77 -72 60) -72] [(-11 52 -90 88) -90] [(-51 69 -14 -79) -79] [(-66 33 5 -36) -66] [(94 31 46 -64) -64] [(26 3 72 66) 3] [(-94 -55 -1 39) -94] [(-87 -8 -95 71) -95] [(-34 12 -91 89) -91] [(42 -84 -7 34) -84] [(79 19 45 14) 14] [(-92 26 5 64) -92] [(81 -45 -83 10) -83] [(-23 52 63 -96) -96] [(-18 52 25 2) -18] [(10 25 -38 -92) -92] [(-85 -100 0 -55) -100] [(-12 -45 36 39) -45] [(17 95 36 79) 17] [(21 93 -76 -74) -76] [(84 -89 -3 -43) -89] [(-91 9 54 -29) -91] [(-56 41 10 39) -56] [(13 -1 36 15) -1] [(-63 -91 16 88) -91] [(95 -45 -37 -59) -59] [(-77 49 -88 31) -88] [(-13 94 64 -53) -53] [(80 -66 -79 79) -79] [(20 26 86 73) 20] [(3 56 -68 90) -68] [(48 7 57 18) 7] [(-21 89 -1 31) -21] [(67 -71 99 -81) -81] [(-15 -43 62 -67) -67] [(37 -62 98 76) -62] [(57 13 93 58) 13] [(-9 77 -45 -58) -58] [(7 -34 3 -61) -61] [(65 65 94 1) 1] [(-17 10 -26 52) -26] [(64 70 81 49) 49] [(7 -68 -61 11) -68] [(-83 -9 -65 -12) -83] [(44 46 -93 51) -93] [(-26 55 -58 100) -58] [(91 -99 -75 -27) -99] [(33 82 -12 -88) -88] [(15 -33 -38 40) -38])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-36 -72 -72 -72] -72]
Train Case:   6 | Input/Output: [[95 -59 95 95] -59]
Train Case:   7 | Input/Output: [[20 68 20 20] 20]
Train Case:   8 | Input/Output: [[-39 -83 -83 -83] -83]
Train Case:   9 | Input/Output: [[70 -35 70 70] -35]
Train Case:  10 | Input/Output: [[24 24 87 24] 24]
Train Case:  11 | Input/Output: [[-71 68 -71 -71] -71]
Train Case:  12 | Input/Output: [[-10 -10 -10 13] -10]
Train Case:  13 | Input/Output: [[-97 -97 -97 -53] -97]
Train Case:  14 | Input/Output: [[-100 -100 -100 3] -100]
Train Case:  15 | Input/Output: [(-17 -17 -17 -17) -17]
Train Case:  16 | Input/Output: [(74 74 74 74) 74]
Train Case:  17 | Input/Output: [(-37 -37 -37 -37) -37]
Train Case:  18 | Input/Output: [(88 88 88 88) 88]
Train Case:  19 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  20 | Input/Output: [(76 60 94 68) 60]
Train Case:  21 | Input/Output: [(70 80 9 45) 9]
Train Case:  22 | Input/Output: [(37 55 49 62) 37]
Train Case:  23 | Input/Output: [(100 2 6 19) 2]
Train Case:  24 | Input/Output: [(10 8 42 48) 8]
Train Case:  25 | Input/Output: [(66 56 77 28) 28]
Train Case:  26 | Input/Output: [(36 89 37 44) 36]
Train Case:  27 | Input/Output: [(37 51 41 42) 37]
Train Case:  28 | Input/Output: [(9 60 22 71) 9]
Train Case:  29 | Input/Output: [(34 20 31 8) 8]
Train Case:  30 | Input/Output: [(25 28 70 38) 25]
Train Case:  31 | Input/Output: [(95 80 26 89) 26]
Train Case:  32 | Input/Output: [(37 59 32 5) 5]
Train Case:  33 | Input/Output: [(44 95 74 49) 44]
Train Case:  34 | Input/Output: [(53 1 95 36) 1]
Train Case:  35 | Input/Output: [(42 86 100 93) 42]
Train Case:  36 | Input/Output: [(5 96 76 80) 5]
Train Case:  37 | Input/Output: [(24 12 7 31) 7]
Train Case:  38 | Input/Output: [(85 48 50 82) 48]
Train Case:  39 | Input/Output: [(16 98 23 35) 16]
Train Case:  40 | Input/Output: [(-39 88 -93 -73) -93]
Train Case:  41 | Input/Output: [(-25 53 44 -45) -45]
Train Case:  42 | Input/Output: [(62 -24 -67 89) -67]
Train Case:  43 | Input/Output: [(-100 -69 21 97) -100]
Train Case:  44 | Input/Output: [(95 67 96 -9) -9]
Train Case:  45 | Input/Output: [(-17 -36 34 74) -36]
Train Case:  46 | Input/Output: [(61 1 26 1) 1]
Train Case:  47 | Input/Output: [(-63 89 -93 -22) -93]
Train Case:  48 | Input/Output: [(-10 -1 -69 86) -69]
Train Case:  49 | Input/Output: [(74 94 20 28) 20]
Train Case:  50 | Input/Output: [(8 74 -38 -89) -89]
Train Case:  51 | Input/Output: [(-9 77 -72 60) -72]
Train Case:  52 | Input/Output: [(-11 52 -90 88) -90]
Train Case:  53 | Input/Output: [(-51 69 -14 -79) -79]
Train Case:  54 | Input/Output: [(-66 33 5 -36) -66]
Train Case:  55 | Input/Output: [(94 31 46 -64) -64]
Train Case:  56 | Input/Output: [(26 3 72 66) 3]
Train Case:  57 | Input/Output: [(-94 -55 -1 39) -94]
Train Case:  58 | Input/Output: [(-87 -8 -95 71) -95]
Train Case:  59 | Input/Output: [(-34 12 -91 89) -91]
Train Case:  60 | Input/Output: [(42 -84 -7 34) -84]
Train Case:  61 | Input/Output: [(79 19 45 14) 14]
Train Case:  62 | Input/Output: [(-92 26 5 64) -92]
Train Case:  63 | Input/Output: [(81 -45 -83 10) -83]
Train Case:  64 | Input/Output: [(-23 52 63 -96) -96]
Train Case:  65 | Input/Output: [(-18 52 25 2) -18]
Train Case:  66 | Input/Output: [(10 25 -38 -92) -92]
Train Case:  67 | Input/Output: [(-85 -100 0 -55) -100]
Train Case:  68 | Input/Output: [(-12 -45 36 39) -45]
Train Case:  69 | Input/Output: [(17 95 36 79) 17]
Train Case:  70 | Input/Output: [(21 93 -76 -74) -76]
Train Case:  71 | Input/Output: [(84 -89 -3 -43) -89]
Train Case:  72 | Input/Output: [(-91 9 54 -29) -91]
Train Case:  73 | Input/Output: [(-56 41 10 39) -56]
Train Case:  74 | Input/Output: [(13 -1 36 15) -1]
Train Case:  75 | Input/Output: [(-63 -91 16 88) -91]
Train Case:  76 | Input/Output: [(95 -45 -37 -59) -59]
Train Case:  77 | Input/Output: [(-77 49 -88 31) -88]
Train Case:  78 | Input/Output: [(-13 94 64 -53) -53]
Train Case:  79 | Input/Output: [(80 -66 -79 79) -79]
Train Case:  80 | Input/Output: [(20 26 86 73) 20]
Train Case:  81 | Input/Output: [(3 56 -68 90) -68]
Train Case:  82 | Input/Output: [(48 7 57 18) 7]
Train Case:  83 | Input/Output: [(-21 89 -1 31) -21]
Train Case:  84 | Input/Output: [(67 -71 99 -81) -81]
Train Case:  85 | Input/Output: [(-15 -43 62 -67) -67]
Train Case:  86 | Input/Output: [(37 -62 98 76) -62]
Train Case:  87 | Input/Output: [(57 13 93 58) 13]
Train Case:  88 | Input/Output: [(-9 77 -45 -58) -58]
Train Case:  89 | Input/Output: [(7 -34 3 -61) -61]
Train Case:  90 | Input/Output: [(65 65 94 1) 1]
Train Case:  91 | Input/Output: [(-17 10 -26 52) -26]
Train Case:  92 | Input/Output: [(64 70 81 49) 49]
Train Case:  93 | Input/Output: [(7 -68 -61 11) -68]
Train Case:  94 | Input/Output: [(-83 -9 -65 -12) -83]
Train Case:  95 | Input/Output: [(44 46 -93 51) -93]
Train Case:  96 | Input/Output: [(-26 55 -58 100) -58]
Train Case:  97 | Input/Output: [(91 -99 -75 -27) -99]
Train Case:  98 | Input/Output: [(33 82 -12 -88) -88]
Train Case:  99 | Input/Output: [(15 -33 -38 40) -38]
Test Case:   0 | Input/Output: [[97 -78 -78 -78] -78]
Test Case:   1 | Input/Output: [[90 -25 -25 -25] -25]
Test Case:   2 | Input/Output: [[47 100 47 47] 47]
Test Case:   3 | Input/Output: [[45 45 45 -34] -34]
Test Case:   4 | Input/Output: [[94 94 -59 94] -59]
Test Case:   5 | Input/Output: [[-59 -15 -59 -59] -59]
Test Case:   6 | Input/Output: [[77 77 98 77] 77]
Test Case:   7 | Input/Output: [[66 66 66 92] 66]
Test Case:   8 | Input/Output: [[70 70 70 48] 48]
Test Case:   9 | Input/Output: [[-87 -87 -87 82] -87]
Test Case:  10 | Input/Output: [[46 46 -33 46] -33]
Test Case:  11 | Input/Output: [[-80 -80 -9 -80] -80]
Test Case:  12 | Input/Output: [[-33 -33 98 -33] -33]
Test Case:  13 | Input/Output: [[5 5 5 50] 5]
Test Case:  14 | Input/Output: [[-76 -76 -35 -76] -76]
Test Case:  15 | Input/Output: [[-38 -38 -38 62] -38]
Test Case:  16 | Input/Output: [[-9 -9 -9 -93] -93]
Test Case:  17 | Input/Output: [[-48 49 -48 -48] -48]
Test Case:  18 | Input/Output: [[98 -28 -28 -28] -28]
Test Case:  19 | Input/Output: [[20 20 4 20] 4]
Test Case:  20 | Input/Output: [[52 -81 -81 -81] -81]
Test Case:  21 | Input/Output: [[-14 49 49 49] -14]
Test Case:  22 | Input/Output: [[-48 -51 -51 -51] -51]
Test Case:  23 | Input/Output: [[-29 -59 -59 -59] -59]
Test Case:  24 | Input/Output: [[-60 80 -60 -60] -60]
Test Case:  25 | Input/Output: [[94 94 94 -11] -11]
Test Case:  26 | Input/Output: [[-79 -77 -79 -79] -79]
Test Case:  27 | Input/Output: [[43 -62 -62 -62] -62]
Test Case:  28 | Input/Output: [[-52 -52 -52 4] -52]
Test Case:  29 | Input/Output: [[-9 -44 -9 -9] -44]
Test Case:  30 | Input/Output: [[39 57 39 39] 39]
Test Case:  31 | Input/Output: [[40 40 40 6] 6]
Test Case:  32 | Input/Output: [[31 79 79 79] 31]
Test Case:  33 | Input/Output: [[-93 -15 -15 -15] -93]
Test Case:  34 | Input/Output: [[-57 -14 -14 -14] -57]
Test Case:  35 | Input/Output: [[-66 -8 -66 -66] -66]
Test Case:  36 | Input/Output: [[-33 -33 55 -33] -33]
Test Case:  37 | Input/Output: [[62 81 81 81] 62]
Test Case:  38 | Input/Output: [[-92 -92 -78 -92] -92]
Test Case:  39 | Input/Output: [[-14 -14 -21 -14] -21]
Test Case:  40 | Input/Output: [[-71 -71 -24 -71] -71]
Test Case:  41 | Input/Output: [[45 73 45 45] 45]
Test Case:  42 | Input/Output: [[44 44 -51 44] -51]
Test Case:  43 | Input/Output: [[-5 -5 -5 -75] -75]
Test Case:  44 | Input/Output: [[77 77 -40 77] -40]
Test Case:  45 | Input/Output: [[-17 -17 -17 -97] -97]
Test Case:  46 | Input/Output: [[-73 -73 -17 -73] -73]
Test Case:  47 | Input/Output: [[-6 -6 -6 -6] -6]
Test Case:  48 | Input/Output: [[59 59 17 59] 17]
Test Case:  49 | Input/Output: [[3 3 37 3] 3]
Test Case:  50 | Input/Output: [[-25 -25 8 -25] -25]
Test Case:  51 | Input/Output: [[95 -74 95 95] -74]
Test Case:  52 | Input/Output: [[42 -45 -45 -45] -45]
Test Case:  53 | Input/Output: [[79 11 11 11] 11]
Test Case:  54 | Input/Output: [[87 -77 -77 -77] -77]
Test Case:  55 | Input/Output: [[-49 -49 -49 6] -49]
Test Case:  56 | Input/Output: [[-1 -1 97 -1] -1]
Test Case:  57 | Input/Output: [[11 11 11 -15] -15]
Test Case:  58 | Input/Output: [[59 59 59 91] 59]
Test Case:  59 | Input/Output: [[46 46 46 36] 36]
Test Case:  60 | Input/Output: [[-80 -75 -75 -75] -80]
Test Case:  61 | Input/Output: [[-13 66 66 66] -13]
Test Case:  62 | Input/Output: [[-39 -86 -39 -39] -86]
Test Case:  63 | Input/Output: [[44 44 48 44] 44]
Test Case:  64 | Input/Output: [[-38 -38 89 -38] -38]
Test Case:  65 | Input/Output: [[-24 -24 -24 -93] -93]
Test Case:  66 | Input/Output: [[-6 -6 -84 -6] -84]
Test Case:  67 | Input/Output: [[-90 66 -90 -90] -90]
Test Case:  68 | Input/Output: [[-33 45 45 45] -33]
Test Case:  69 | Input/Output: [[34 34 34 -61] -61]
Test Case:  70 | Input/Output: [[68 68 -87 68] -87]
Test Case:  71 | Input/Output: [[-83 67 -83 -83] -83]
Test Case:  72 | Input/Output: [[-92 -92 79 -92] -92]
Test Case:  73 | Input/Output: [[-95 -95 -95 -82] -95]
Test Case:  74 | Input/Output: [[-48 -48 -48 -76] -76]
Test Case:  75 | Input/Output: [[-95 -25 -25 -25] -95]
Test Case:  76 | Input/Output: [[76 76 -10 76] -10]
Test Case:  77 | Input/Output: [[-94 -94 68 -94] -94]
Test Case:  78 | Input/Output: [[-31 -55 -31 -31] -55]
Test Case:  79 | Input/Output: [[-39 -78 -39 -39] -78]
Test Case:  80 | Input/Output: [[-61 -61 -61 -91] -91]
Test Case:  81 | Input/Output: [[26 26 84 26] 26]
Test Case:  82 | Input/Output: [[-31 26 -31 -31] -31]
Test Case:  83 | Input/Output: [[-98 -36 -36 -36] -98]
Test Case:  84 | Input/Output: [[20 58 58 58] 20]
Test Case:  85 | Input/Output: [[-2 -2 -85 -2] -85]
Test Case:  86 | Input/Output: [[-93 -93 -93 -56] -93]
Test Case:  87 | Input/Output: [[-25 21 21 21] -25]
Test Case:  88 | Input/Output: [[-48 -48 -48 -88] -88]
Test Case:  89 | Input/Output: [[-22 21 21 21] -22]
Test Case:  90 | Input/Output: [[31 31 37 31] 31]
Test Case:  91 | Input/Output: [[25 25 25 62] 25]
Test Case:  92 | Input/Output: [[-90 4 4 4] -90]
Test Case:  93 | Input/Output: [[83 83 83 17] 17]
Test Case:  94 | Input/Output: [[-93 -62 -93 -93] -93]
Test Case:  95 | Input/Output: [[-15 -15 -15 -24] -24]
Test Case:  96 | Input/Output: [[-2 54 -2 -2] -2]
Test Case:  97 | Input/Output: [[53 53 -82 53] -82]
Test Case:  98 | Input/Output: [[28 66 66 66] 28]
Test Case:  99 | Input/Output: [[-92 -92 -93 -92] -93]
Test Case: 100 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 101 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 102 | Input/Output: [(87 87 87 87) 87]
Test Case: 103 | Input/Output: [(81 81 81 81) 81]
Test Case: 104 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 105 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 106 | Input/Output: [(21 21 21 21) 21]
Test Case: 107 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 108 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 109 | Input/Output: [(94 94 94 94) 94]
Test Case: 110 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 111 | Input/Output: [(42 42 42 42) 42]
Test Case: 112 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 113 | Input/Output: [(77 77 77 77) 77]
Test Case: 114 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 115 | Input/Output: [(95 95 95 95) 95]
Test Case: 116 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 117 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 118 | Input/Output: [(10 10 10 10) 10]
Test Case: 119 | Input/Output: [(49 49 49 49) 49]
Test Case: 120 | Input/Output: [(98 98 98 98) 98]
Test Case: 121 | Input/Output: [(74 74 74 74) 74]
Test Case: 122 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 123 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 124 | Input/Output: [(10 10 10 10) 10]
Test Case: 125 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 126 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 127 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 128 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 129 | Input/Output: [(92 92 92 92) 92]
Test Case: 130 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 131 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 132 | Input/Output: [(0 0 0 0) 0]
Test Case: 133 | Input/Output: [(5 5 5 5) 5]
Test Case: 134 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 135 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 136 | Input/Output: [(50 50 50 50) 50]
Test Case: 137 | Input/Output: [(57 57 57 57) 57]
Test Case: 138 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 139 | Input/Output: [(79 79 79 79) 79]
Test Case: 140 | Input/Output: [(71 71 71 71) 71]
Test Case: 141 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 142 | Input/Output: [(6 6 6 6) 6]
Test Case: 143 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 144 | Input/Output: [(2 2 2 2) 2]
Test Case: 145 | Input/Output: [(21 21 21 21) 21]
Test Case: 146 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 147 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 148 | Input/Output: [(20 20 20 20) 20]
Test Case: 149 | Input/Output: [(3 3 3 3) 3]
Test Case: 150 | Input/Output: [(91 91 91 91) 91]
Test Case: 151 | Input/Output: [(93 93 93 93) 93]
Test Case: 152 | Input/Output: [(78 78 78 78) 78]
Test Case: 153 | Input/Output: [(70 70 70 70) 70]
Test Case: 154 | Input/Output: [(88 88 88 88) 88]
Test Case: 155 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 156 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 157 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 158 | Input/Output: [(62 62 62 62) 62]
Test Case: 159 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 160 | Input/Output: [(25 25 25 25) 25]
Test Case: 161 | Input/Output: [(56 56 56 56) 56]
Test Case: 162 | Input/Output: [(56 56 56 56) 56]
Test Case: 163 | Input/Output: [(88 88 88 88) 88]
Test Case: 164 | Input/Output: [(70 70 70 70) 70]
Test Case: 165 | Input/Output: [(69 69 69 69) 69]
Test Case: 166 | Input/Output: [(10 10 10 10) 10]
Test Case: 167 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 168 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 169 | Input/Output: [(50 50 50 50) 50]
Test Case: 170 | Input/Output: [(92 92 92 92) 92]
Test Case: 171 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 172 | Input/Output: [(54 54 54 54) 54]
Test Case: 173 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 174 | Input/Output: [(39 39 39 39) 39]
Test Case: 175 | Input/Output: [(27 27 27 27) 27]
Test Case: 176 | Input/Output: [(64 64 64 64) 64]
Test Case: 177 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 178 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 179 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 180 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 181 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 182 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 183 | Input/Output: [(11 11 11 11) 11]
Test Case: 184 | Input/Output: [(2 2 2 2) 2]
Test Case: 185 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 186 | Input/Output: [(60 60 60 60) 60]
Test Case: 187 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 188 | Input/Output: [(62 62 62 62) 62]
Test Case: 189 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 190 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 191 | Input/Output: [(23 23 23 23) 23]
Test Case: 192 | Input/Output: [(67 67 67 67) 67]
Test Case: 193 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 194 | Input/Output: [(19 19 19 19) 19]
Test Case: 195 | Input/Output: [(34 34 34 34) 34]
Test Case: 196 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 197 | Input/Output: [(76 76 76 76) 76]
Test Case: 198 | Input/Output: [(3 3 3 3) 3]
Test Case: 199 | Input/Output: [(12 12 12 12) 12]
Test Case: 200 | Input/Output: [(100 19 39 47) 19]
Test Case: 201 | Input/Output: [(60 2 90 65) 2]
Test Case: 202 | Input/Output: [(84 97 16 13) 13]
Test Case: 203 | Input/Output: [(94 40 24 91) 24]
Test Case: 204 | Input/Output: [(63 59 10 21) 10]
Test Case: 205 | Input/Output: [(80 13 81 97) 13]
Test Case: 206 | Input/Output: [(75 22 15 91) 15]
Test Case: 207 | Input/Output: [(68 78 95 17) 17]
Test Case: 208 | Input/Output: [(64 93 49 73) 49]
Test Case: 209 | Input/Output: [(29 58 41 100) 29]
Test Case: 210 | Input/Output: [(40 73 44 67) 40]
Test Case: 211 | Input/Output: [(54 66 55 29) 29]
Test Case: 212 | Input/Output: [(23 83 55 58) 23]
Test Case: 213 | Input/Output: [(90 56 92 90) 56]
Test Case: 214 | Input/Output: [(35 16 57 66) 16]
Test Case: 215 | Input/Output: [(42 59 95 63) 42]
Test Case: 216 | Input/Output: [(62 26 65 67) 26]
Test Case: 217 | Input/Output: [(22 84 15 67) 15]
Test Case: 218 | Input/Output: [(26 87 42 81) 26]
Test Case: 219 | Input/Output: [(49 8 48 69) 8]
Test Case: 220 | Input/Output: [(12 38 54 72) 12]
Test Case: 221 | Input/Output: [(59 18 10 82) 10]
Test Case: 222 | Input/Output: [(46 11 59 45) 11]
Test Case: 223 | Input/Output: [(69 86 40 83) 40]
Test Case: 224 | Input/Output: [(2 10 48 64) 2]
Test Case: 225 | Input/Output: [(39 70 15 80) 15]
Test Case: 226 | Input/Output: [(8 92 11 62) 8]
Test Case: 227 | Input/Output: [(71 81 52 72) 52]
Test Case: 228 | Input/Output: [(30 90 24 79) 24]
Test Case: 229 | Input/Output: [(62 4 39 40) 4]
Test Case: 230 | Input/Output: [(68 69 77 94) 68]
Test Case: 231 | Input/Output: [(82 98 13 97) 13]
Test Case: 232 | Input/Output: [(10 22 58 62) 10]
Test Case: 233 | Input/Output: [(16 34 99 99) 16]
Test Case: 234 | Input/Output: [(88 10 24 13) 10]
Test Case: 235 | Input/Output: [(88 30 10 25) 10]
Test Case: 236 | Input/Output: [(11 69 63 72) 11]
Test Case: 237 | Input/Output: [(36 73 50 12) 12]
Test Case: 238 | Input/Output: [(9 81 2 56) 2]
Test Case: 239 | Input/Output: [(58 46 47 1) 1]
Test Case: 240 | Input/Output: [(46 97 31 69) 31]
Test Case: 241 | Input/Output: [(92 65 66 77) 65]
Test Case: 242 | Input/Output: [(31 30 3 16) 3]
Test Case: 243 | Input/Output: [(13 2 77 60) 2]
Test Case: 244 | Input/Output: [(37 49 28 74) 28]
Test Case: 245 | Input/Output: [(61 87 87 8) 8]
Test Case: 246 | Input/Output: [(79 34 31 91) 31]
Test Case: 247 | Input/Output: [(99 1 94 50) 1]
Test Case: 248 | Input/Output: [(30 53 63 19) 19]
Test Case: 249 | Input/Output: [(56 60 37 26) 26]
Test Case: 250 | Input/Output: [(63 32 28 8) 8]
Test Case: 251 | Input/Output: [(13 20 45 27) 13]
Test Case: 252 | Input/Output: [(60 27 68 58) 27]
Test Case: 253 | Input/Output: [(89 59 13 58) 13]
Test Case: 254 | Input/Output: [(37 67 23 25) 23]
Test Case: 255 | Input/Output: [(94 67 2 14) 2]
Test Case: 256 | Input/Output: [(47 34 70 50) 34]
Test Case: 257 | Input/Output: [(79 71 84 58) 58]
Test Case: 258 | Input/Output: [(42 48 87 2) 2]
Test Case: 259 | Input/Output: [(81 27 70 38) 27]
Test Case: 260 | Input/Output: [(96 35 89 66) 35]
Test Case: 261 | Input/Output: [(47 72 29 14) 14]
Test Case: 262 | Input/Output: [(81 80 77 15) 15]
Test Case: 263 | Input/Output: [(73 1 85 72) 1]
Test Case: 264 | Input/Output: [(47 19 59 24) 19]
Test Case: 265 | Input/Output: [(11 27 19 66) 11]
Test Case: 266 | Input/Output: [(52 28 40 66) 28]
Test Case: 267 | Input/Output: [(27 15 56 6) 6]
Test Case: 268 | Input/Output: [(10 82 37 65) 10]
Test Case: 269 | Input/Output: [(98 17 42 55) 17]
Test Case: 270 | Input/Output: [(61 10 21 71) 10]
Test Case: 271 | Input/Output: [(34 22 100 33) 22]
Test Case: 272 | Input/Output: [(35 87 48 77) 35]
Test Case: 273 | Input/Output: [(79 79 93 44) 44]
Test Case: 274 | Input/Output: [(68 47 24 30) 24]
Test Case: 275 | Input/Output: [(81 39 79 85) 39]
Test Case: 276 | Input/Output: [(53 88 55 47) 47]
Test Case: 277 | Input/Output: [(3 80 17 77) 3]
Test Case: 278 | Input/Output: [(77 19 42 32) 19]
Test Case: 279 | Input/Output: [(22 90 35 7) 7]
Test Case: 280 | Input/Output: [(73 19 7 62) 7]
Test Case: 281 | Input/Output: [(76 28 59 42) 28]
Test Case: 282 | Input/Output: [(27 52 3 46) 3]
Test Case: 283 | Input/Output: [(57 40 48 6) 6]
Test Case: 284 | Input/Output: [(69 7 94 38) 7]
Test Case: 285 | Input/Output: [(17 40 100 65) 17]
Test Case: 286 | Input/Output: [(39 71 74 54) 39]
Test Case: 287 | Input/Output: [(13 58 64 82) 13]
Test Case: 288 | Input/Output: [(15 58 85 63) 15]
Test Case: 289 | Input/Output: [(91 86 60 78) 60]
Test Case: 290 | Input/Output: [(83 10 92 8) 8]
Test Case: 291 | Input/Output: [(51 77 18 100) 18]
Test Case: 292 | Input/Output: [(40 80 66 8) 8]
Test Case: 293 | Input/Output: [(49 91 92 76) 49]
Test Case: 294 | Input/Output: [(72 16 69 53) 16]
Test Case: 295 | Input/Output: [(29 91 8 92) 8]
Test Case: 296 | Input/Output: [(14 16 46 16) 14]
Test Case: 297 | Input/Output: [(52 86 18 36) 18]
Test Case: 298 | Input/Output: [(48 68 50 99) 48]
Test Case: 299 | Input/Output: [(99 17 82 81) 17]
Test Case: 300 | Input/Output: [(74 22 88 87) 22]
Test Case: 301 | Input/Output: [(90 55 84 45) 45]
Test Case: 302 | Input/Output: [(75 85 34 93) 34]
Test Case: 303 | Input/Output: [(13 76 15 73) 13]
Test Case: 304 | Input/Output: [(1 93 75 8) 1]
Test Case: 305 | Input/Output: [(25 83 93 14) 14]
Test Case: 306 | Input/Output: [(46 45 42 36) 36]
Test Case: 307 | Input/Output: [(73 7 6 85) 6]
Test Case: 308 | Input/Output: [(25 73 92 72) 25]
Test Case: 309 | Input/Output: [(58 26 3 48) 3]
Test Case: 310 | Input/Output: [(2 4 53 100) 2]
Test Case: 311 | Input/Output: [(4 72 93 96) 4]
Test Case: 312 | Input/Output: [(97 57 92 57) 57]
Test Case: 313 | Input/Output: [(22 19 21 88) 19]
Test Case: 314 | Input/Output: [(32 98 12 90) 12]
Test Case: 315 | Input/Output: [(17 74 81 76) 17]
Test Case: 316 | Input/Output: [(95 71 2 98) 2]
Test Case: 317 | Input/Output: [(22 2 85 54) 2]
Test Case: 318 | Input/Output: [(37 81 51 74) 37]
Test Case: 319 | Input/Output: [(73 31 27 48) 27]
Test Case: 320 | Input/Output: [(81 80 5 1) 1]
Test Case: 321 | Input/Output: [(14 7 25 98) 7]
Test Case: 322 | Input/Output: [(84 3 42 48) 3]
Test Case: 323 | Input/Output: [(21 20 4 62) 4]
Test Case: 324 | Input/Output: [(46 92 25 25) 25]
Test Case: 325 | Input/Output: [(17 18 99 51) 17]
Test Case: 326 | Input/Output: [(28 60 40 80) 28]
Test Case: 327 | Input/Output: [(25 41 79 9) 9]
Test Case: 328 | Input/Output: [(67 83 42 4) 4]
Test Case: 329 | Input/Output: [(85 39 76 16) 16]
Test Case: 330 | Input/Output: [(87 8 22 96) 8]
Test Case: 331 | Input/Output: [(61 47 76 68) 47]
Test Case: 332 | Input/Output: [(5 75 7 96) 5]
Test Case: 333 | Input/Output: [(23 97 95 22) 22]
Test Case: 334 | Input/Output: [(89 28 52 87) 28]
Test Case: 335 | Input/Output: [(61 0 9 2) 0]
Test Case: 336 | Input/Output: [(60 31 19 78) 19]
Test Case: 337 | Input/Output: [(83 95 47 54) 47]
Test Case: 338 | Input/Output: [(32 66 46 100) 32]
Test Case: 339 | Input/Output: [(60 96 65 99) 60]
Test Case: 340 | Input/Output: [(72 0 36 19) 0]
Test Case: 341 | Input/Output: [(51 75 50 88) 50]
Test Case: 342 | Input/Output: [(97 70 1 62) 1]
Test Case: 343 | Input/Output: [(42 15 46 92) 15]
Test Case: 344 | Input/Output: [(36 79 23 12) 12]
Test Case: 345 | Input/Output: [(57 42 24 79) 24]
Test Case: 346 | Input/Output: [(64 24 75 85) 24]
Test Case: 347 | Input/Output: [(41 16 13 79) 13]
Test Case: 348 | Input/Output: [(94 7 49 33) 7]
Test Case: 349 | Input/Output: [(12 56 92 19) 12]
Test Case: 350 | Input/Output: [(6 46 84 38) 6]
Test Case: 351 | Input/Output: [(46 6 65 28) 6]
Test Case: 352 | Input/Output: [(31 87 42 13) 13]
Test Case: 353 | Input/Output: [(32 44 25 48) 25]
Test Case: 354 | Input/Output: [(93 70 99 2) 2]
Test Case: 355 | Input/Output: [(74 26 86 26) 26]
Test Case: 356 | Input/Output: [(32 92 87 83) 32]
Test Case: 357 | Input/Output: [(74 51 18 23) 18]
Test Case: 358 | Input/Output: [(98 61 48 17) 17]
Test Case: 359 | Input/Output: [(6 96 41 36) 6]
Test Case: 360 | Input/Output: [(92 60 99 20) 20]
Test Case: 361 | Input/Output: [(55 89 51 62) 51]
Test Case: 362 | Input/Output: [(50 88 43 56) 43]
Test Case: 363 | Input/Output: [(33 81 72 2) 2]
Test Case: 364 | Input/Output: [(74 34 41 54) 34]
Test Case: 365 | Input/Output: [(80 21 33 30) 21]
Test Case: 366 | Input/Output: [(90 34 38 91) 34]
Test Case: 367 | Input/Output: [(1 54 52 42) 1]
Test Case: 368 | Input/Output: [(5 31 59 48) 5]
Test Case: 369 | Input/Output: [(71 93 22 19) 19]
Test Case: 370 | Input/Output: [(65 34 54 6) 6]
Test Case: 371 | Input/Output: [(32 30 59 33) 30]
Test Case: 372 | Input/Output: [(31 59 25 59) 25]
Test Case: 373 | Input/Output: [(10 20 98 44) 10]
Test Case: 374 | Input/Output: [(55 72 20 92) 20]
Test Case: 375 | Input/Output: [(7 68 11 65) 7]
Test Case: 376 | Input/Output: [(59 30 38 81) 30]
Test Case: 377 | Input/Output: [(17 10 88 11) 10]
Test Case: 378 | Input/Output: [(97 31 92 59) 31]
Test Case: 379 | Input/Output: [(56 61 99 4) 4]
Test Case: 380 | Input/Output: [(69 29 7 89) 7]
Test Case: 381 | Input/Output: [(32 60 66 10) 10]
Test Case: 382 | Input/Output: [(17 20 6 62) 6]
Test Case: 383 | Input/Output: [(52 24 64 74) 24]
Test Case: 384 | Input/Output: [(14 64 7 2) 2]
Test Case: 385 | Input/Output: [(24 62 32 46) 24]
Test Case: 386 | Input/Output: [(1 46 15 93) 1]
Test Case: 387 | Input/Output: [(48 6 83 34) 6]
Test Case: 388 | Input/Output: [(75 21 15 62) 15]
Test Case: 389 | Input/Output: [(58 10 55 100) 10]
Test Case: 390 | Input/Output: [(29 86 86 76) 29]
Test Case: 391 | Input/Output: [(41 54 48 24) 24]
Test Case: 392 | Input/Output: [(77 50 21 22) 21]
Test Case: 393 | Input/Output: [(8 44 21 30) 8]
Test Case: 394 | Input/Output: [(70 37 40 78) 37]
Test Case: 395 | Input/Output: [(75 21 83 63) 21]
Test Case: 396 | Input/Output: [(18 42 25 1) 1]
Test Case: 397 | Input/Output: [(37 56 92 47) 37]
Test Case: 398 | Input/Output: [(21 94 38 98) 21]
Test Case: 399 | Input/Output: [(22 14 63 15) 14]
Test Case: 400 | Input/Output: [(54 -97 99 -81) -97]
Test Case: 401 | Input/Output: [(-84 96 83 99) -84]
Test Case: 402 | Input/Output: [(56 -80 -41 -76) -80]
Test Case: 403 | Input/Output: [(23 -86 66 -87) -87]
Test Case: 404 | Input/Output: [(79 44 22 -27) -27]
Test Case: 405 | Input/Output: [(-18 42 80 64) -18]
Test Case: 406 | Input/Output: [(-27 10 -84 -5) -84]
Test Case: 407 | Input/Output: [(-55 19 -2 0) -55]
Test Case: 408 | Input/Output: [(-10 42 -85 -93) -93]
Test Case: 409 | Input/Output: [(-72 18 -77 54) -77]
Test Case: 410 | Input/Output: [(14 -71 29 63) -71]
Test Case: 411 | Input/Output: [(-99 100 75 25) -99]
Test Case: 412 | Input/Output: [(-18 41 79 -41) -41]
Test Case: 413 | Input/Output: [(-80 42 -69 -87) -87]
Test Case: 414 | Input/Output: [(-91 99 -60 4) -91]
Test Case: 415 | Input/Output: [(-85 56 -7 -41) -85]
Test Case: 416 | Input/Output: [(4 80 57 -30) -30]
Test Case: 417 | Input/Output: [(91 -53 78 -9) -53]
Test Case: 418 | Input/Output: [(44 45 -65 80) -65]
Test Case: 419 | Input/Output: [(17 98 9 -80) -80]
Test Case: 420 | Input/Output: [(-76 0 -31 6) -76]
Test Case: 421 | Input/Output: [(-87 46 -31 -34) -87]
Test Case: 422 | Input/Output: [(-26 -64 25 5) -64]
Test Case: 423 | Input/Output: [(48 16 10 81) 10]
Test Case: 424 | Input/Output: [(-41 33 81 -86) -86]
Test Case: 425 | Input/Output: [(52 72 -51 -74) -74]
Test Case: 426 | Input/Output: [(-92 77 -13 71) -92]
Test Case: 427 | Input/Output: [(16 -35 -70 -99) -99]
Test Case: 428 | Input/Output: [(-44 -54 -96 94) -96]
Test Case: 429 | Input/Output: [(-92 43 -18 56) -92]
Test Case: 430 | Input/Output: [(-48 21 26 -85) -85]
Test Case: 431 | Input/Output: [(99 -83 -72 -32) -83]
Test Case: 432 | Input/Output: [(-30 8 6 -53) -53]
Test Case: 433 | Input/Output: [(50 -21 -36 -28) -36]
Test Case: 434 | Input/Output: [(47 74 71 -70) -70]
Test Case: 435 | Input/Output: [(-65 82 -33 -72) -72]
Test Case: 436 | Input/Output: [(8 26 -4 -24) -24]
Test Case: 437 | Input/Output: [(-19 63 -30 0) -30]
Test Case: 438 | Input/Output: [(-90 -50 54 67) -90]
Test Case: 439 | Input/Output: [(-18 -57 -8 49) -57]
Test Case: 440 | Input/Output: [(16 28 64 -63) -63]
Test Case: 441 | Input/Output: [(68 -44 60 -1) -44]
Test Case: 442 | Input/Output: [(5 -41 -77 59) -77]
Test Case: 443 | Input/Output: [(58 91 -13 -72) -72]
Test Case: 444 | Input/Output: [(0 -89 63 -59) -89]
Test Case: 445 | Input/Output: [(90 -82 -77 53) -82]
Test Case: 446 | Input/Output: [(-23 -6 -10 93) -23]
Test Case: 447 | Input/Output: [(9 -36 98 85) -36]
Test Case: 448 | Input/Output: [(-6 -8 -80 -66) -80]
Test Case: 449 | Input/Output: [(-26 -87 63 15) -87]
Test Case: 450 | Input/Output: [(-49 -29 -31 89) -49]
Test Case: 451 | Input/Output: [(-77 98 -67 -73) -77]
Test Case: 452 | Input/Output: [(-32 -96 81 -50) -96]
Test Case: 453 | Input/Output: [(-92 -40 -55 77) -92]
Test Case: 454 | Input/Output: [(-54 -89 -68 -56) -89]
Test Case: 455 | Input/Output: [(-20 23 24 16) -20]
Test Case: 456 | Input/Output: [(-82 31 -62 -31) -82]
Test Case: 457 | Input/Output: [(24 43 38 -16) -16]
Test Case: 458 | Input/Output: [(23 -61 21 83) -61]
Test Case: 459 | Input/Output: [(-3 23 57 71) -3]
Test Case: 460 | Input/Output: [(-1 89 -92 -96) -96]
Test Case: 461 | Input/Output: [(18 -28 52 18) -28]
Test Case: 462 | Input/Output: [(46 -81 66 -77) -81]
Test Case: 463 | Input/Output: [(32 -17 78 -74) -74]
Test Case: 464 | Input/Output: [(23 71 37 11) 11]
Test Case: 465 | Input/Output: [(-6 3 13 27) -6]
Test Case: 466 | Input/Output: [(-60 38 38 94) -60]
Test Case: 467 | Input/Output: [(-74 81 -68 22) -74]
Test Case: 468 | Input/Output: [(-49 -20 -98 -13) -98]
Test Case: 469 | Input/Output: [(27 -57 -7 -88) -88]
Test Case: 470 | Input/Output: [(12 67 -77 -64) -77]
Test Case: 471 | Input/Output: [(34 21 19 -24) -24]
Test Case: 472 | Input/Output: [(2 -88 2 33) -88]
Test Case: 473 | Input/Output: [(30 67 87 20) 20]
Test Case: 474 | Input/Output: [(-3 63 -3 40) -3]
Test Case: 475 | Input/Output: [(-19 -26 -3 -84) -84]
Test Case: 476 | Input/Output: [(18 -35 -65 -17) -65]
Test Case: 477 | Input/Output: [(-51 49 -89 -73) -89]
Test Case: 478 | Input/Output: [(15 54 55 15) 15]
Test Case: 479 | Input/Output: [(80 -43 -26 -67) -67]
Test Case: 480 | Input/Output: [(67 55 -58 -12) -58]
Test Case: 481 | Input/Output: [(69 -76 -93 -26) -93]
Test Case: 482 | Input/Output: [(28 -25 19 0) -25]
Test Case: 483 | Input/Output: [(-51 15 7 -33) -51]
Test Case: 484 | Input/Output: [(62 67 42 -94) -94]
Test Case: 485 | Input/Output: [(13 44 -88 34) -88]
Test Case: 486 | Input/Output: [(-43 30 71 -26) -43]
Test Case: 487 | Input/Output: [(-20 17 -59 2) -59]
Test Case: 488 | Input/Output: [(12 -88 0 -9) -88]
Test Case: 489 | Input/Output: [(-43 6 -22 -8) -43]
Test Case: 490 | Input/Output: [(-90 -7 -61 -1) -90]
Test Case: 491 | Input/Output: [(8 -70 0 -92) -92]
Test Case: 492 | Input/Output: [(47 35 -79 -15) -79]
Test Case: 493 | Input/Output: [(-47 77 94 -47) -47]
Test Case: 494 | Input/Output: [(-42 10 -87 31) -87]
Test Case: 495 | Input/Output: [(42 -11 54 92) -11]
Test Case: 496 | Input/Output: [(-80 58 -52 44) -80]
Test Case: 497 | Input/Output: [(-12 -73 29 -71) -73]
Test Case: 498 | Input/Output: [(-45 -96 -74 -50) -96]
Test Case: 499 | Input/Output: [(35 27 38 -62) -62]
Test Case: 500 | Input/Output: [(91 96 -91 34) -91]
Test Case: 501 | Input/Output: [(13 17 96 74) 13]
Test Case: 502 | Input/Output: [(11 55 -77 98) -77]
Test Case: 503 | Input/Output: [(-38 -96 -83 -57) -96]
Test Case: 504 | Input/Output: [(-60 75 77 48) -60]
Test Case: 505 | Input/Output: [(97 98 62 86) 62]
Test Case: 506 | Input/Output: [(-26 -1 65 -35) -35]
Test Case: 507 | Input/Output: [(-69 -20 -9 -7) -69]
Test Case: 508 | Input/Output: [(32 65 -6 78) -6]
Test Case: 509 | Input/Output: [(-16 -85 66 -22) -85]
Test Case: 510 | Input/Output: [(22 21 53 -75) -75]
Test Case: 511 | Input/Output: [(95 -49 -81 65) -81]
Test Case: 512 | Input/Output: [(40 -77 41 8) -77]
Test Case: 513 | Input/Output: [(32 72 -68 87) -68]
Test Case: 514 | Input/Output: [(32 78 61 -74) -74]
Test Case: 515 | Input/Output: [(68 -35 37 97) -35]
Test Case: 516 | Input/Output: [(-84 58 -21 8) -84]
Test Case: 517 | Input/Output: [(12 -83 0 36) -83]
Test Case: 518 | Input/Output: [(-27 -18 64 -33) -33]
Test Case: 519 | Input/Output: [(-88 54 -10 14) -88]
Test Case: 520 | Input/Output: [(-6 47 46 -77) -77]
Test Case: 521 | Input/Output: [(-93 34 23 -4) -93]
Test Case: 522 | Input/Output: [(61 69 -79 3) -79]
Test Case: 523 | Input/Output: [(-52 -83 -88 -31) -88]
Test Case: 524 | Input/Output: [(-32 68 66 63) -32]
Test Case: 525 | Input/Output: [(-69 -60 75 -99) -99]
Test Case: 526 | Input/Output: [(-19 37 -91 72) -91]
Test Case: 527 | Input/Output: [(-53 -47 15 -7) -53]
Test Case: 528 | Input/Output: [(67 -31 41 32) -31]
Test Case: 529 | Input/Output: [(-55 -31 66 -52) -55]
Test Case: 530 | Input/Output: [(-48 -32 -10 76) -48]
Test Case: 531 | Input/Output: [(-32 -39 24 46) -39]
Test Case: 532 | Input/Output: [(-70 -3 14 49) -70]
Test Case: 533 | Input/Output: [(-78 -35 24 67) -78]
Test Case: 534 | Input/Output: [(-57 48 82 10) -57]
Test Case: 535 | Input/Output: [(69 41 -67 -74) -74]
Test Case: 536 | Input/Output: [(86 65 -51 -36) -51]
Test Case: 537 | Input/Output: [(-54 -92 32 -13) -92]
Test Case: 538 | Input/Output: [(-21 15 61 3) -21]
Test Case: 539 | Input/Output: [(-92 -78 84 20) -92]
Test Case: 540 | Input/Output: [(-99 -84 88 73) -99]
Test Case: 541 | Input/Output: [(24 -94 -67 -4) -94]
Test Case: 542 | Input/Output: [(-40 -43 13 32) -43]
Test Case: 543 | Input/Output: [(-78 -6 30 -80) -80]
Test Case: 544 | Input/Output: [(52 49 17 40) 17]
Test Case: 545 | Input/Output: [(-90 89 6 -68) -90]
Test Case: 546 | Input/Output: [(-17 -54 98 -10) -54]
Test Case: 547 | Input/Output: [(80 -25 37 49) -25]
Test Case: 548 | Input/Output: [(-90 70 -94 -8) -94]
Test Case: 549 | Input/Output: [(41 -13 -73 -84) -84]
Test Case: 550 | Input/Output: [(42 71 16 -92) -92]
Test Case: 551 | Input/Output: [(72 -90 65 -53) -90]
Test Case: 552 | Input/Output: [(-42 99 90 69) -42]
Test Case: 553 | Input/Output: [(37 39 -87 -8) -87]
Test Case: 554 | Input/Output: [(39 19 -5 -99) -99]
Test Case: 555 | Input/Output: [(-43 55 -21 -43) -43]
Test Case: 556 | Input/Output: [(50 -61 -66 54) -66]
Test Case: 557 | Input/Output: [(-38 9 64 61) -38]
Test Case: 558 | Input/Output: [(-21 -41 -95 61) -95]
Test Case: 559 | Input/Output: [(14 -73 82 -56) -73]
Test Case: 560 | Input/Output: [(-36 -86 16 -26) -86]
Test Case: 561 | Input/Output: [(-16 -89 30 88) -89]
Test Case: 562 | Input/Output: [(75 -3 61 61) -3]
Test Case: 563 | Input/Output: [(-96 -58 99 -34) -96]
Test Case: 564 | Input/Output: [(66 76 81 -17) -17]
Test Case: 565 | Input/Output: [(82 -81 23 89) -81]
Test Case: 566 | Input/Output: [(-22 -51 88 24) -51]
Test Case: 567 | Input/Output: [(-54 46 -40 56) -54]
Test Case: 568 | Input/Output: [(-54 -6 1 90) -54]
Test Case: 569 | Input/Output: [(8 95 98 50) 8]
Test Case: 570 | Input/Output: [(8 75 -20 -87) -87]
Test Case: 571 | Input/Output: [(36 -31 -43 -45) -45]
Test Case: 572 | Input/Output: [(-14 -78 40 21) -78]
Test Case: 573 | Input/Output: [(-63 -36 -28 59) -63]
Test Case: 574 | Input/Output: [(-65 39 -57 11) -65]
Test Case: 575 | Input/Output: [(14 -78 -43 15) -78]
Test Case: 576 | Input/Output: [(2 60 11 94) 2]
Test Case: 577 | Input/Output: [(-49 -86 23 43) -86]
Test Case: 578 | Input/Output: [(-93 68 62 -72) -93]
Test Case: 579 | Input/Output: [(-86 -21 -45 19) -86]
Test Case: 580 | Input/Output: [(71 98 8 -99) -99]
Test Case: 581 | Input/Output: [(82 12 -21 -29) -29]
Test Case: 582 | Input/Output: [(-65 -76 -75 55) -76]
Test Case: 583 | Input/Output: [(86 -48 -44 20) -48]
Test Case: 584 | Input/Output: [(90 5 -62 17) -62]
Test Case: 585 | Input/Output: [(-36 91 -60 -55) -60]
Test Case: 586 | Input/Output: [(-48 65 -71 -18) -71]
Test Case: 587 | Input/Output: [(8 14 -15 -47) -47]
Test Case: 588 | Input/Output: [(4 -65 -53 63) -65]
Test Case: 589 | Input/Output: [(-1 100 99 -93) -93]
Test Case: 590 | Input/Output: [(-96 -68 99 43) -96]
Test Case: 591 | Input/Output: [(42 -86 -90 -78) -90]
Test Case: 592 | Input/Output: [(39 -19 -95 -65) -95]
Test Case: 593 | Input/Output: [(-29 -64 45 87) -64]
Test Case: 594 | Input/Output: [(6 -75 68 -26) -75]
Test Case: 595 | Input/Output: [(96 -58 70 77) -58]
Test Case: 596 | Input/Output: [(-69 -67 70 23) -69]
Test Case: 597 | Input/Output: [(-45 58 76 12) -45]
Test Case: 598 | Input/Output: [(-6 -80 32 0) -80]
Test Case: 599 | Input/Output: [(-95 -38 -92 48) -95]
Test Case: 600 | Input/Output: [(-7 -45 -58 43) -58]
Test Case: 601 | Input/Output: [(-58 -74 -68 26) -74]
Test Case: 602 | Input/Output: [(1 100 35 22) 1]
Test Case: 603 | Input/Output: [(-25 31 -49 -37) -49]
Test Case: 604 | Input/Output: [(61 -23 -12 -39) -39]
Test Case: 605 | Input/Output: [(35 37 18 -38) -38]
Test Case: 606 | Input/Output: [(60 84 -96 8) -96]
Test Case: 607 | Input/Output: [(-28 56 -52 -25) -52]
Test Case: 608 | Input/Output: [(77 21 -64 -91) -91]
Test Case: 609 | Input/Output: [(8 52 54 41) 8]
Test Case: 610 | Input/Output: [(-13 41 -100 -40) -100]
Test Case: 611 | Input/Output: [(73 -71 -61 27) -71]
Test Case: 612 | Input/Output: [(-10 -25 35 -4) -25]
Test Case: 613 | Input/Output: [(63 22 47 -95) -95]
Test Case: 614 | Input/Output: [(44 -37 41 77) -37]
Test Case: 615 | Input/Output: [(29 15 46 45) 15]
Test Case: 616 | Input/Output: [(-4 57 -75 -61) -75]
Test Case: 617 | Input/Output: [(4 19 49 -14) -14]
Test Case: 618 | Input/Output: [(17 33 0 71) 0]
Test Case: 619 | Input/Output: [(-36 -88 -8 3) -88]
Test Case: 620 | Input/Output: [(97 -80 70 67) -80]
Test Case: 621 | Input/Output: [(80 -73 65 37) -73]
Test Case: 622 | Input/Output: [(40 -48 56 -71) -71]
Test Case: 623 | Input/Output: [(9 -54 -39 15) -54]
Test Case: 624 | Input/Output: [(-83 1 -42 -94) -94]
Test Case: 625 | Input/Output: [(35 -72 95 -99) -99]
Test Case: 626 | Input/Output: [(-71 -7 -45 31) -71]
Test Case: 627 | Input/Output: [(50 48 -58 31) -58]
Test Case: 628 | Input/Output: [(62 -71 -99 -19) -99]
Test Case: 629 | Input/Output: [(-81 37 -94 -85) -94]
Test Case: 630 | Input/Output: [(25 9 9 -28) -28]
Test Case: 631 | Input/Output: [(91 -59 -67 1) -67]
Test Case: 632 | Input/Output: [(39 -92 -10 93) -92]
Test Case: 633 | Input/Output: [(-43 -99 88 88) -99]
Test Case: 634 | Input/Output: [(-68 0 -96 -90) -96]
Test Case: 635 | Input/Output: [(-27 25 -57 -92) -92]
Test Case: 636 | Input/Output: [(-33 -4 68 45) -33]
Test Case: 637 | Input/Output: [(28 -30 -43 -29) -43]
Test Case: 638 | Input/Output: [(48 -81 85 -12) -81]
Test Case: 639 | Input/Output: [(-52 -94 0 -11) -94]
Test Case: 640 | Input/Output: [(49 81 -88 12) -88]
Test Case: 641 | Input/Output: [(26 -19 74 88) -19]
Test Case: 642 | Input/Output: [(52 -17 97 69) -17]
Test Case: 643 | Input/Output: [(-57 42 1 71) -57]
Test Case: 644 | Input/Output: [(62 44 -76 67) -76]
Test Case: 645 | Input/Output: [(7 -46 37 -47) -47]
Test Case: 646 | Input/Output: [(-54 73 96 42) -54]
Test Case: 647 | Input/Output: [(-18 -50 30 -9) -50]
Test Case: 648 | Input/Output: [(-33 42 100 -16) -33]
Test Case: 649 | Input/Output: [(-39 79 50 5) -39]
Test Case: 650 | Input/Output: [(-92 -89 48 -43) -92]
Test Case: 651 | Input/Output: [(23 66 -13 98) -13]
Test Case: 652 | Input/Output: [(65 -15 77 -38) -38]
Test Case: 653 | Input/Output: [(68 17 71 96) 17]
Test Case: 654 | Input/Output: [(-60 13 -98 99) -98]
Test Case: 655 | Input/Output: [(-22 -33 -4 -63) -63]
Test Case: 656 | Input/Output: [(53 51 13 7) 7]
Test Case: 657 | Input/Output: [(-55 11 -17 -65) -65]
Test Case: 658 | Input/Output: [(16 83 -75 91) -75]
Test Case: 659 | Input/Output: [(59 -52 65 -22) -52]
Test Case: 660 | Input/Output: [(-3 -80 46 -28) -80]
Test Case: 661 | Input/Output: [(-26 -22 -27 -42) -42]
Test Case: 662 | Input/Output: [(-69 50 -90 -46) -90]
Test Case: 663 | Input/Output: [(-44 -71 -23 -26) -71]
Test Case: 664 | Input/Output: [(58 -54 -24 89) -54]
Test Case: 665 | Input/Output: [(-34 91 -86 44) -86]
Test Case: 666 | Input/Output: [(64 -66 54 98) -66]
Test Case: 667 | Input/Output: [(-84 42 83 49) -84]
Test Case: 668 | Input/Output: [(-49 60 -25 -32) -49]
Test Case: 669 | Input/Output: [(35 89 69 -70) -70]
Test Case: 670 | Input/Output: [(-79 -7 57 -15) -79]
Test Case: 671 | Input/Output: [(-79 -7 -88 -69) -88]
Test Case: 672 | Input/Output: [(-90 38 -86 67) -90]
Test Case: 673 | Input/Output: [(-22 69 -40 17) -40]
Test Case: 674 | Input/Output: [(-29 68 18 26) -29]
Test Case: 675 | Input/Output: [(-35 -81 -87 -38) -87]
Test Case: 676 | Input/Output: [(22 0 -55 -77) -77]
Test Case: 677 | Input/Output: [(-45 -11 62 35) -45]
Test Case: 678 | Input/Output: [(-99 -46 21 63) -99]
Test Case: 679 | Input/Output: [(62 39 -75 -56) -75]
Test Case: 680 | Input/Output: [(-65 58 21 48) -65]
Test Case: 681 | Input/Output: [(-86 95 36 -49) -86]
Test Case: 682 | Input/Output: [(-17 -20 -68 -5) -68]
Test Case: 683 | Input/Output: [(43 99 -47 48) -47]
Test Case: 684 | Input/Output: [(3 15 46 -88) -88]
Test Case: 685 | Input/Output: [(1 -86 20 -4) -86]
Test Case: 686 | Input/Output: [(-32 90 -90 -16) -90]
Test Case: 687 | Input/Output: [(-58 53 -38 83) -58]
Test Case: 688 | Input/Output: [(73 -35 -7 73) -35]
Test Case: 689 | Input/Output: [(6 -80 57 -54) -80]
Test Case: 690 | Input/Output: [(-79 -57 16 71) -79]
Test Case: 691 | Input/Output: [(-24 -40 20 49) -40]
Test Case: 692 | Input/Output: [(44 73 -27 27) -27]
Test Case: 693 | Input/Output: [(-86 49 90 -36) -86]
Test Case: 694 | Input/Output: [(-21 14 90 -11) -21]
Test Case: 695 | Input/Output: [(38 -55 -51 -23) -55]
Test Case: 696 | Input/Output: [(-49 52 62 9) -49]
Test Case: 697 | Input/Output: [(-30 59 63 32) -30]
Test Case: 698 | Input/Output: [(-41 19 46 36) -41]
Test Case: 699 | Input/Output: [(60 41 76 30) 30]
Test Case: 700 | Input/Output: [(16 19 94 -24) -24]
Test Case: 701 | Input/Output: [(61 29 -55 92) -55]
Test Case: 702 | Input/Output: [(55 -32 74 -84) -84]
Test Case: 703 | Input/Output: [(-92 -99 -20 61) -99]
Test Case: 704 | Input/Output: [(-97 -67 33 99) -97]
Test Case: 705 | Input/Output: [(68 44 0 84) 0]
Test Case: 706 | Input/Output: [(32 -97 56 -82) -97]
Test Case: 707 | Input/Output: [(8 61 70 15) 8]
Test Case: 708 | Input/Output: [(-48 1 81 -72) -72]
Test Case: 709 | Input/Output: [(19 -41 58 53) -41]
Test Case: 710 | Input/Output: [(-5 93 38 71) -5]
Test Case: 711 | Input/Output: [(13 67 50 -43) -43]
Test Case: 712 | Input/Output: [(-77 3 1 -76) -77]
Test Case: 713 | Input/Output: [(-25 -67 -72 71) -72]
Test Case: 714 | Input/Output: [(-88 91 34 94) -88]
Test Case: 715 | Input/Output: [(43 29 57 42) 29]
Test Case: 716 | Input/Output: [(-100 80 -31 -44) -100]
Test Case: 717 | Input/Output: [(-32 16 54 -37) -37]
Test Case: 718 | Input/Output: [(-15 80 -41 67) -41]
Test Case: 719 | Input/Output: [(12 34 3 -28) -28]
Test Case: 720 | Input/Output: [(-18 -28 90 -44) -44]
Test Case: 721 | Input/Output: [(100 -46 -49 -22) -49]
Test Case: 722 | Input/Output: [(49 65 78 9) 9]
Test Case: 723 | Input/Output: [(-1 43 26 -88) -88]
Test Case: 724 | Input/Output: [(-64 57 -38 -61) -64]
Test Case: 725 | Input/Output: [(-47 -19 23 -84) -84]
Test Case: 726 | Input/Output: [(-100 -82 -4 -62) -100]
Test Case: 727 | Input/Output: [(-84 58 68 23) -84]
Test Case: 728 | Input/Output: [(-64 -34 -3 -94) -94]
Test Case: 729 | Input/Output: [(41 44 15 -18) -18]
Test Case: 730 | Input/Output: [(-38 -60 33 -23) -60]
Test Case: 731 | Input/Output: [(66 31 90 9) 9]
Test Case: 732 | Input/Output: [(57 7 74 -13) -13]
Test Case: 733 | Input/Output: [(-13 27 49 -42) -42]
Test Case: 734 | Input/Output: [(16 80 15 47) 15]
Test Case: 735 | Input/Output: [(96 54 83 -72) -72]
Test Case: 736 | Input/Output: [(-21 -95 -61 60) -95]
Test Case: 737 | Input/Output: [(-8 -19 -67 -92) -92]
Test Case: 738 | Input/Output: [(2 -60 0 -41) -60]
Test Case: 739 | Input/Output: [(56 -33 -19 -90) -90]
Test Case: 740 | Input/Output: [(-13 71 -92 -44) -92]
Test Case: 741 | Input/Output: [(100 -57 -7 91) -57]
Test Case: 742 | Input/Output: [(11 -85 100 38) -85]
Test Case: 743 | Input/Output: [(-76 -99 -100 -62) -100]
Test Case: 744 | Input/Output: [(-13 73 97 23) -13]
Test Case: 745 | Input/Output: [(-30 35 -62 48) -62]
Test Case: 746 | Input/Output: [(-11 13 -35 -27) -35]
Test Case: 747 | Input/Output: [(75 -51 95 -40) -51]
Test Case: 748 | Input/Output: [(-74 79 25 -19) -74]
Test Case: 749 | Input/Output: [(65 10 85 50) 10]
Test Case: 750 | Input/Output: [(82 28 -69 -29) -69]
Test Case: 751 | Input/Output: [(0 -50 91 -22) -50]
Test Case: 752 | Input/Output: [(67 16 -50 80) -50]
Test Case: 753 | Input/Output: [(-27 14 -84 -63) -84]
Test Case: 754 | Input/Output: [(93 -55 24 -29) -55]
Test Case: 755 | Input/Output: [(70 -43 78 -91) -91]
Test Case: 756 | Input/Output: [(56 100 86 -16) -16]
Test Case: 757 | Input/Output: [(82 -17 -25 76) -25]
Test Case: 758 | Input/Output: [(-48 10 27 -22) -48]
Test Case: 759 | Input/Output: [(6 -49 -67 -8) -67]
Test Case: 760 | Input/Output: [(-21 -9 36 -8) -21]
Test Case: 761 | Input/Output: [(57 -74 58 98) -74]
Test Case: 762 | Input/Output: [(74 3 -25 40) -25]
Test Case: 763 | Input/Output: [(-90 51 67 74) -90]
Test Case: 764 | Input/Output: [(-23 18 -49 2) -49]
Test Case: 765 | Input/Output: [(95 35 -76 39) -76]
Test Case: 766 | Input/Output: [(8 -89 38 -32) -89]
Test Case: 767 | Input/Output: [(55 -83 91 10) -83]
Test Case: 768 | Input/Output: [(-29 29 7 49) -29]
Test Case: 769 | Input/Output: [(-43 19 79 46) -43]
Test Case: 770 | Input/Output: [(-58 -13 -18 26) -58]
Test Case: 771 | Input/Output: [(78 96 -54 12) -54]
Test Case: 772 | Input/Output: [(52 72 62 56) 52]
Test Case: 773 | Input/Output: [(-83 -95 -99 81) -99]
Test Case: 774 | Input/Output: [(55 -94 87 -27) -94]
Test Case: 775 | Input/Output: [(-17 52 83 -97) -97]
Test Case: 776 | Input/Output: [(-62 25 -64 21) -64]
Test Case: 777 | Input/Output: [(-8 67 20 28) -8]
Test Case: 778 | Input/Output: [(68 12 98 5) 5]
Test Case: 779 | Input/Output: [(-1 -64 -49 58) -64]
Test Case: 780 | Input/Output: [(-75 -4 -96 -35) -96]
Test Case: 781 | Input/Output: [(-53 -60 92 -77) -77]
Test Case: 782 | Input/Output: [(-72 -10 78 96) -72]
Test Case: 783 | Input/Output: [(8 -47 -92 -61) -92]
Test Case: 784 | Input/Output: [(-72 -38 36 55) -72]
Test Case: 785 | Input/Output: [(-26 94 56 80) -26]
Test Case: 786 | Input/Output: [(-56 -98 26 47) -98]
Test Case: 787 | Input/Output: [(-51 83 47 52) -51]
Test Case: 788 | Input/Output: [(-93 -78 -28 -21) -93]
Test Case: 789 | Input/Output: [(32 -71 -62 -12) -71]
Test Case: 790 | Input/Output: [(70 -67 60 -75) -75]
Test Case: 791 | Input/Output: [(-4 -15 60 -89) -89]
Test Case: 792 | Input/Output: [(-23 -40 66 -62) -62]
Test Case: 793 | Input/Output: [(-87 57 -40 35) -87]
Test Case: 794 | Input/Output: [(-99 -99 -13 9) -99]
Test Case: 795 | Input/Output: [(-97 -21 17 -28) -97]
Test Case: 796 | Input/Output: [(-73 18 1 -81) -81]
Test Case: 797 | Input/Output: [(20 -62 -12 -50) -62]
Test Case: 798 | Input/Output: [(22 62 -35 -70) -70]
Test Case: 799 | Input/Output: [(24 -91 -94 -42) -94]
Test Case: 800 | Input/Output: [(80 5 83 88) 5]
Test Case: 801 | Input/Output: [(-27 31 -94 33) -94]
Test Case: 802 | Input/Output: [(16 75 88 -38) -38]
Test Case: 803 | Input/Output: [(37 -81 -15 51) -81]
Test Case: 804 | Input/Output: [(-97 -18 -99 -38) -99]
Test Case: 805 | Input/Output: [(-69 92 74 87) -69]
Test Case: 806 | Input/Output: [(92 71 -20 -71) -71]
Test Case: 807 | Input/Output: [(-63 -74 -63 72) -74]
Test Case: 808 | Input/Output: [(48 9 -49 97) -49]
Test Case: 809 | Input/Output: [(15 -14 -94 47) -94]
Test Case: 810 | Input/Output: [(-26 99 -12 -76) -76]
Test Case: 811 | Input/Output: [(83 -57 51 -19) -57]
Test Case: 812 | Input/Output: [(-97 -90 -1 -58) -97]
Test Case: 813 | Input/Output: [(34 -8 -80 1) -80]
Test Case: 814 | Input/Output: [(-65 73 48 -73) -73]
Test Case: 815 | Input/Output: [(90 97 86 72) 72]
Test Case: 816 | Input/Output: [(10 13 34 -22) -22]
Test Case: 817 | Input/Output: [(-55 4 48 26) -55]
Test Case: 818 | Input/Output: [(-55 78 -95 -52) -95]
Test Case: 819 | Input/Output: [(-99 -54 -27 -52) -99]
Test Case: 820 | Input/Output: [(-81 87 -24 -27) -81]
Test Case: 821 | Input/Output: [(45 -50 -31 100) -50]
Test Case: 822 | Input/Output: [(-54 -53 -5 -83) -83]
Test Case: 823 | Input/Output: [(79 -43 -70 71) -70]
Test Case: 824 | Input/Output: [(-73 0 -26 -90) -90]
Test Case: 825 | Input/Output: [(41 -7 -50 56) -50]
Test Case: 826 | Input/Output: [(94 32 96 -16) -16]
Test Case: 827 | Input/Output: [(-98 36 -96 -99) -99]
Test Case: 828 | Input/Output: [(-43 -53 -60 -15) -60]
Test Case: 829 | Input/Output: [(50 -75 90 -51) -75]
Test Case: 830 | Input/Output: [(-36 -66 25 72) -66]
Test Case: 831 | Input/Output: [(64 -67 87 -81) -81]
Test Case: 832 | Input/Output: [(44 -95 -63 4) -95]
Test Case: 833 | Input/Output: [(70 -77 4 -58) -77]
Test Case: 834 | Input/Output: [(-48 -24 21 -81) -81]
Test Case: 835 | Input/Output: [(12 45 17 -68) -68]
Test Case: 836 | Input/Output: [(89 51 -47 19) -47]
Test Case: 837 | Input/Output: [(3 -21 21 -23) -23]
Test Case: 838 | Input/Output: [(-24 93 99 -8) -24]
Test Case: 839 | Input/Output: [(-20 14 36 -41) -41]
Test Case: 840 | Input/Output: [(39 46 9 14) 9]
Test Case: 841 | Input/Output: [(22 -85 -45 65) -85]
Test Case: 842 | Input/Output: [(-95 30 73 -93) -95]
Test Case: 843 | Input/Output: [(-76 -48 69 79) -76]
Test Case: 844 | Input/Output: [(82 -73 5 -68) -73]
Test Case: 845 | Input/Output: [(43 93 98 -23) -23]
Test Case: 846 | Input/Output: [(62 -27 95 -64) -64]
Test Case: 847 | Input/Output: [(89 -4 48 -82) -82]
Test Case: 848 | Input/Output: [(82 10 -22 -67) -67]
Test Case: 849 | Input/Output: [(44 28 43 -81) -81]
Test Case: 850 | Input/Output: [(-69 -89 11 -17) -89]
Test Case: 851 | Input/Output: [(92 41 -66 -20) -66]
Test Case: 852 | Input/Output: [(52 70 67 18) 18]
Test Case: 853 | Input/Output: [(-14 -54 28 -86) -86]
Test Case: 854 | Input/Output: [(-12 -15 29 -43) -43]
Test Case: 855 | Input/Output: [(65 82 -67 30) -67]
Test Case: 856 | Input/Output: [(-28 -83 68 79) -83]
Test Case: 857 | Input/Output: [(-88 -60 84 -72) -88]
Test Case: 858 | Input/Output: [(62 51 54 -61) -61]
Test Case: 859 | Input/Output: [(-24 -67 6 38) -67]
Test Case: 860 | Input/Output: [(14 -19 51 54) -19]
Test Case: 861 | Input/Output: [(45 -57 -63 -72) -72]
Test Case: 862 | Input/Output: [(100 25 -75 -12) -75]
Test Case: 863 | Input/Output: [(37 57 44 -76) -76]
Test Case: 864 | Input/Output: [(-33 92 -71 92) -71]
Test Case: 865 | Input/Output: [(-58 -63 -15 55) -63]
Test Case: 866 | Input/Output: [(-86 -25 43 -93) -93]
Test Case: 867 | Input/Output: [(72 13 -69 17) -69]
Test Case: 868 | Input/Output: [(-46 -80 -19 -94) -94]
Test Case: 869 | Input/Output: [(82 -78 -4 -37) -78]
Test Case: 870 | Input/Output: [(94 -58 1 -29) -58]
Test Case: 871 | Input/Output: [(43 -15 -62 96) -62]
Test Case: 872 | Input/Output: [(66 6 66 -73) -73]
Test Case: 873 | Input/Output: [(20 61 -26 100) -26]
Test Case: 874 | Input/Output: [(72 -48 -54 88) -54]
Test Case: 875 | Input/Output: [(23 -10 71 -51) -51]
Test Case: 876 | Input/Output: [(-14 100 53 -66) -66]
Test Case: 877 | Input/Output: [(2 -97 -28 -34) -97]
Test Case: 878 | Input/Output: [(-34 -84 -45 -94) -94]
Test Case: 879 | Input/Output: [(98 -33 66 -20) -33]
Test Case: 880 | Input/Output: [(86 -61 -10 25) -61]
Test Case: 881 | Input/Output: [(-60 100 -61 85) -61]
Test Case: 882 | Input/Output: [(28 81 -87 16) -87]
Test Case: 883 | Input/Output: [(55 85 -17 75) -17]
Test Case: 884 | Input/Output: [(-3 36 28 44) -3]
Test Case: 885 | Input/Output: [(-34 -24 24 62) -34]
Test Case: 886 | Input/Output: [(32 47 79 27) 27]
Test Case: 887 | Input/Output: [(-48 -40 34 -5) -48]
Test Case: 888 | Input/Output: [(5 -22 37 -17) -22]
Test Case: 889 | Input/Output: [(22 0 -11 -35) -35]
Test Case: 890 | Input/Output: [(-17 83 44 -26) -26]
Test Case: 891 | Input/Output: [(-62 -25 -56 -98) -98]
Test Case: 892 | Input/Output: [(-71 -81 82 24) -81]
Test Case: 893 | Input/Output: [(-81 87 88 8) -81]
Test Case: 894 | Input/Output: [(-8 -2 -77 33) -77]
Test Case: 895 | Input/Output: [(21 30 74 -70) -70]
Test Case: 896 | Input/Output: [(-57 65 -64 62) -64]
Test Case: 897 | Input/Output: [(53 -97 -90 -9) -97]
Test Case: 898 | Input/Output: [(96 -12 65 60) -12]
Test Case: 899 | Input/Output: [(-94 2 2 1) -94]
Test Case: 900 | Input/Output: [(-66 44 -27 -13) -66]
Test Case: 901 | Input/Output: [(71 -50 4 44) -50]
Test Case: 902 | Input/Output: [(-86 -41 20 -31) -86]
Test Case: 903 | Input/Output: [(80 -74 -23 34) -74]
Test Case: 904 | Input/Output: [(-13 76 100 43) -13]
Test Case: 905 | Input/Output: [(62 -27 99 -1) -27]
Test Case: 906 | Input/Output: [(-79 19 11 46) -79]
Test Case: 907 | Input/Output: [(57 -47 29 -54) -54]
Test Case: 908 | Input/Output: [(88 -1 -28 62) -28]
Test Case: 909 | Input/Output: [(-20 -85 39 89) -85]
Test Case: 910 | Input/Output: [(32 -90 5 -44) -90]
Test Case: 911 | Input/Output: [(88 -28 98 81) -28]
Test Case: 912 | Input/Output: [(49 34 42 -55) -55]
Test Case: 913 | Input/Output: [(21 8 53 -20) -20]
Test Case: 914 | Input/Output: [(73 -53 -37 4) -53]
Test Case: 915 | Input/Output: [(11 75 -8 -35) -35]
Test Case: 916 | Input/Output: [(92 -48 75 62) -48]
Test Case: 917 | Input/Output: [(99 -95 -4 -42) -95]
Test Case: 918 | Input/Output: [(33 27 -16 -22) -22]
Test Case: 919 | Input/Output: [(97 -94 48 81) -94]
Test Case: 920 | Input/Output: [(49 16 13 62) 13]
Test Case: 921 | Input/Output: [(-75 9 -80 -93) -93]
Test Case: 922 | Input/Output: [(-79 65 96 -85) -85]
Test Case: 923 | Input/Output: [(52 77 -47 -69) -69]
Test Case: 924 | Input/Output: [(63 -45 -62 71) -62]
Test Case: 925 | Input/Output: [(-63 -18 -40 -49) -63]
Test Case: 926 | Input/Output: [(-56 -72 47 -17) -72]
Test Case: 927 | Input/Output: [(-96 -90 -75 -11) -96]
Test Case: 928 | Input/Output: [(-81 -40 97 -57) -81]
Test Case: 929 | Input/Output: [(-77 -17 89 63) -77]
Test Case: 930 | Input/Output: [(69 67 -1 26) -1]
Test Case: 931 | Input/Output: [(99 49 -34 99) -34]
Test Case: 932 | Input/Output: [(-79 -98 5 98) -98]
Test Case: 933 | Input/Output: [(-58 -88 23 -88) -88]
Test Case: 934 | Input/Output: [(98 -78 49 -5) -78]
Test Case: 935 | Input/Output: [(-28 10 -21 -67) -67]
Test Case: 936 | Input/Output: [(90 91 -41 85) -41]
Test Case: 937 | Input/Output: [(-70 -39 35 25) -70]
Test Case: 938 | Input/Output: [(97 -68 74 79) -68]
Test Case: 939 | Input/Output: [(-79 72 -38 -5) -79]
Test Case: 940 | Input/Output: [(-67 -55 -99 64) -99]
Test Case: 941 | Input/Output: [(61 -5 -11 -90) -90]
Test Case: 942 | Input/Output: [(-83 44 -20 4) -83]
Test Case: 943 | Input/Output: [(31 38 -92 -17) -92]
Test Case: 944 | Input/Output: [(18 88 -41 81) -41]
Test Case: 945 | Input/Output: [(-47 -60 40 84) -60]
Test Case: 946 | Input/Output: [(79 -4 -37 -65) -65]
Test Case: 947 | Input/Output: [(-37 39 55 47) -37]
Test Case: 948 | Input/Output: [(-61 -37 99 -71) -71]
Test Case: 949 | Input/Output: [(-53 32 -73 -97) -97]
Test Case: 950 | Input/Output: [(-9 73 -24 -48) -48]
Test Case: 951 | Input/Output: [(-30 -73 71 -70) -73]
Test Case: 952 | Input/Output: [(48 75 -56 2) -56]
Test Case: 953 | Input/Output: [(-98 -48 -59 87) -98]
Test Case: 954 | Input/Output: [(98 59 76 -7) -7]
Test Case: 955 | Input/Output: [(72 -40 51 -73) -73]
Test Case: 956 | Input/Output: [(-8 14 -11 -88) -88]
Test Case: 957 | Input/Output: [(18 -65 29 4) -65]
Test Case: 958 | Input/Output: [(-73 67 -60 -51) -73]
Test Case: 959 | Input/Output: [(36 100 -69 -26) -69]
Test Case: 960 | Input/Output: [(39 63 48 -51) -51]
Test Case: 961 | Input/Output: [(69 51 -96 -32) -96]
Test Case: 962 | Input/Output: [(-25 71 -15 85) -25]
Test Case: 963 | Input/Output: [(-81 -45 42 95) -81]
Test Case: 964 | Input/Output: [(-33 -12 29 79) -33]
Test Case: 965 | Input/Output: [(-81 -34 -2 34) -81]
Test Case: 966 | Input/Output: [(-57 100 38 95) -57]
Test Case: 967 | Input/Output: [(-32 75 61 82) -32]
Test Case: 968 | Input/Output: [(-3 -70 86 78) -70]
Test Case: 969 | Input/Output: [(-61 -62 -90 42) -90]
Test Case: 970 | Input/Output: [(48 -45 -81 84) -81]
Test Case: 971 | Input/Output: [(-59 -15 22 -46) -59]
Test Case: 972 | Input/Output: [(70 80 -60 12) -60]
Test Case: 973 | Input/Output: [(-77 -37 -68 -30) -77]
Test Case: 974 | Input/Output: [(-5 -11 -72 10) -72]
Test Case: 975 | Input/Output: [(-54 79 5 14) -54]
Test Case: 976 | Input/Output: [(81 -69 57 61) -69]
Test Case: 977 | Input/Output: [(-53 -90 -53 -95) -95]
Test Case: 978 | Input/Output: [(51 82 8 8) 8]
Test Case: 979 | Input/Output: [(-61 -23 68 99) -61]
Test Case: 980 | Input/Output: [(87 54 85 -41) -41]
Test Case: 981 | Input/Output: [(80 29 29 90) 29]
Test Case: 982 | Input/Output: [(94 74 -1 79) -1]
Test Case: 983 | Input/Output: [(6 68 67 -46) -46]
Test Case: 984 | Input/Output: [(-55 -90 34 -61) -90]
Test Case: 985 | Input/Output: [(-89 39 -79 -47) -89]
Test Case: 986 | Input/Output: [(78 -32 -8 74) -32]
Test Case: 987 | Input/Output: [(-32 55 51 96) -32]
Test Case: 988 | Input/Output: [(64 99 37 -90) -90]
Test Case: 989 | Input/Output: [(27 57 -32 47) -32]
Test Case: 990 | Input/Output: [(-13 75 -26 -73) -73]
Test Case: 991 | Input/Output: [(35 77 27 99) 27]
Test Case: 992 | Input/Output: [(-12 18 21 -51) -51]
Test Case: 993 | Input/Output: [(41 69 -83 -20) -83]
Test Case: 994 | Input/Output: [(-65 72 17 -54) -65]
Test Case: 995 | Input/Output: [(-89 5 69 -95) -95]
Test Case: 996 | Input/Output: [(31 97 54 -84) -84]
Test Case: 997 | Input/Output: [(2 -30 -64 -99) -99]
Test Case: 998 | Input/Output: [(100 23 -46 12) -46]
Test Case: 999 | Input/Output: [(-51 21 -11 31) -51]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 16 -35 122 118 23 24 43 72 -110 -45 57 -10 -39 -102 110 -66
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-36 -72 -72 -72] -72] [[95 -59 95 95] -59] [[20 68 20 20] 20] [[-39 -83 -83 -83] -83] [[70 -35 70 70] -35] [[24 24 87 24] 24] [[-71 68 -71 -71] -71] [[-10 -10 -10 13] -10] [[-97 -97 -97 -53] -97] [[-100 -100 -100 3] -100] [(-17 -17 -17 -17) -17] [(74 74 74 74) 74] [(-37 -37 -37 -37) -37] [(88 88 88 88) 88] [(-23 -23 -23 -23) -23] [(76 60 94 68) 60] [(70 80 9 45) 9] [(37 55 49 62) 37] [(100 2 6 19) 2] [(10 8 42 48) 8] [(66 56 77 28) 28] [(36 89 37 44) 36] [(37 51 41 42) 37] [(9 60 22 71) 9] [(34 20 31 8) 8] [(25 28 70 38) 25] [(95 80 26 89) 26] [(37 59 32 5) 5] [(44 95 74 49) 44] [(53 1 95 36) 1] [(42 86 100 93) 42] [(5 96 76 80) 5] [(24 12 7 31) 7] [(85 48 50 82) 48] [(16 98 23 35) 16] [(-39 88 -93 -73) -93] [(-25 53 44 -45) -45] [(62 -24 -67 89) -67] [(-100 -69 21 97) -100] [(95 67 96 -9) -9] [(-17 -36 34 74) -36] [(61 1 26 1) 1] [(-63 89 -93 -22) -93] [(-10 -1 -69 86) -69] [(74 94 20 28) 20] [(8 74 -38 -89) -89] [(-9 77 -72 60) -72] [(-11 52 -90 88) -90] [(-51 69 -14 -79) -79] [(-66 33 5 -36) -66] [(94 31 46 -64) -64] [(26 3 72 66) 3] [(-94 -55 -1 39) -94] [(-87 -8 -95 71) -95] [(-34 12 -91 89) -91] [(42 -84 -7 34) -84] [(79 19 45 14) 14] [(-92 26 5 64) -92] [(81 -45 -83 10) -83] [(-23 52 63 -96) -96] [(-18 52 25 2) -18] [(10 25 -38 -92) -92] [(-85 -100 0 -55) -100] [(-12 -45 36 39) -45] [(17 95 36 79) 17] [(21 93 -76 -74) -76] [(84 -89 -3 -43) -89] [(-91 9 54 -29) -91] [(-56 41 10 39) -56] [(13 -1 36 15) -1] [(-63 -91 16 88) -91] [(95 -45 -37 -59) -59] [(-77 49 -88 31) -88] [(-13 94 64 -53) -53] [(80 -66 -79 79) -79] [(20 26 86 73) 20] [(3 56 -68 90) -68] [(48 7 57 18) 7] [(-21 89 -1 31) -21] [(67 -71 99 -81) -81] [(-15 -43 62 -67) -67] [(37 -62 98 76) -62] [(57 13 93 58) 13] [(-9 77 -45 -58) -58] [(7 -34 3 -61) -61] [(65 65 94 1) 1] [(-17 10 -26 52) -26] [(64 70 81 49) 49] [(7 -68 -61 11) -68] [(-83 -9 -65 -12) -83] [(44 46 -93 51) -93] [(-26 55 -58 100) -58] [(91 -99 -75 -27) -99] [(33 82 -12 -88) -88] [(15 -33 -38 40) -38])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: 95                 
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: 13                 
Correct output: -97                 | Program output: -53                
Correct output: -100                | Program output: 3                  
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 68                 
Correct output: 9                   | Program output: 45                 
Correct output: 37                  | Program output: 62                 
Correct output: 2                   | Program output: 19                 
Correct output: 8                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 36                  | Program output: 44                 
Correct output: 37                  | Program output: 42                 
Correct output: 9                   | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 38                 
Correct output: 26                  | Program output: 89                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 49                 
Correct output: 1                   | Program output: 36                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 80                 
Correct output: 7                   | Program output: 31                 
Correct output: 48                  | Program output: 82                 
Correct output: 16                  | Program output: 35                 
Correct output: -93                 | Program output: -73                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: 89                 
Correct output: -100                | Program output: 97                 
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: -93                 | Program output: -22                
Correct output: -69                 | Program output: 86                 
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 60                 
Correct output: -90                 | Program output: 88                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 3                   | Program output: 66                 
Correct output: -94                 | Program output: 39                 
Correct output: -95                 | Program output: 71                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: 64                 
Correct output: -83                 | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -18                 | Program output: 2                  
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -55                
Correct output: -45                 | Program output: 39                 
Correct output: 17                  | Program output: 79                 
Correct output: -76                 | Program output: -74                
Correct output: -89                 | Program output: -43                
Correct output: -91                 | Program output: -29                
Correct output: -56                 | Program output: 39                 
Correct output: -1                  | Program output: 15                 
Correct output: -91                 | Program output: 88                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: 31                 
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 79                 
Correct output: 20                  | Program output: 73                 
Correct output: -68                 | Program output: 90                 
Correct output: 7                   | Program output: 18                 
Correct output: -21                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 76                 
Correct output: 13                  | Program output: 58                 
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: -61                
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: 52                 
Correct output: 49                  | Program output: 49                 
Correct output: -68                 | Program output: 11                 
Correct output: -83                 | Program output: -12                
Correct output: -93                 | Program output: 51                 
Correct output: -58                 | Program output: 100                
Correct output: -99                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction 79} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y})
Lexicase best program: (in4 print_integer exec_do*range (exec_k (boolean_shove exec_dup () integer_fromboolean integer_dup_times integer_mult boolean_shove boolean_stackdepth exec_stackdepth) (integer_inc exec_when (exec_pop ()) boolean_empty integer_gt boolean_stackdepth) boolean_yank integer_max boolean_frominteger exec_do*times (integer_min boolean_and print_integer integer_flush) integer_yankdup) exec_do*count () integer_yank exec_y (boolean_pop boolean_and) boolean_or exec_noop integer_min boolean_xor exec_eq exec_y_when_autoconstructing (in2 integer_yank exec_while (exec_do*range (integer_flush boolean_invert_first_then_and boolean_invert_first_then_and) boolean_yankdup boolean_empty exec_empty exec_shove (exec_stackdepth) integer_mod exec_yank integer_lt) exec_stackdepth) exec_y_when_autoconstructing (boolean_pop boolean_or integer_max) integer_yankdup exec_dup (print_boolean 79 print_exec (exec_y ())))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 82
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction 79} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y})
Zero cases best program: (in4 print_integer exec_do*range (exec_k (boolean_shove exec_dup () integer_fromboolean integer_dup_times integer_mult boolean_shove boolean_stackdepth exec_stackdepth) (integer_inc exec_when (exec_pop ()) boolean_empty integer_gt boolean_stackdepth) boolean_yank integer_max boolean_frominteger exec_do*times (integer_min boolean_and print_integer integer_flush) integer_yankdup) exec_do*count () integer_yank exec_y (boolean_pop boolean_and) boolean_or exec_noop integer_min boolean_xor exec_eq exec_y_when_autoconstructing (in2 integer_yank exec_while (exec_do*range (integer_flush boolean_invert_first_then_and boolean_invert_first_then_and) boolean_yankdup boolean_empty exec_empty exec_shove (exec_stackdepth) integer_mod exec_yank integer_lt) exec_stackdepth) exec_y_when_autoconstructing (boolean_pop boolean_or integer_max) integer_yankdup exec_dup (print_boolean 79 print_exec (exec_y ())))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 82
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 4 1 4 5 3 4 5 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 4 4 1 4 5 3 4 5 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction -67} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_870} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2})
Best program: (integer_rot integer_shove in4 print_integer integer_pop -67 integer_add integer_dup_items exec_do*count (in1 exec_do*times (integer_flush integer_yankdup integer_mult in2) exec_y (integer_mod) integer_gte exec_k (exec_do*range () integer_min integer_inc exec_shove () integer_dup integer_swap integer_dec) () print_integer integer_sub boolean_invert_first_then_and integer_gte) boolean_dup boolean_not print_integer exec_pop () exec_k (exec_do*range (exec_k () (integer_pop exec_eq boolean_flush integer_flush integer_gte integer_yankdup boolean_invert_second_then_and integer_flush exec_if (tagged_870 print_integer in4 exec_do*times (exec_yankdup integer_gt print_newline) integer_swap) (integer_dup_times exec_noop exec_if (exec_do*count (integer_fromboolean exec_dup (integer_eq) integer_gt boolean_rot boolean_swap integer_empty integer_mod exec_stackdepth integer_dup_items exec_s_when_autoconstructing (integer_lt integer_pop boolean_pop) (exec_y_when_autoconstructing (exec_k (exec_stackdepth print_newline print_newline boolean_flush) (in2))) ())) ())))) ())
Errors: [1 0 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 79
Size: 106
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 9.961
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.996 0.999 0.996 0.995 0.997 0.996 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.996
Average program size in population (points): 68.587
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 505074
--- Timings ---
Current time: 1559593802660 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 31.8%
Fitness Testing:      1.5 seconds, 64.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: 95                 
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 49                 
Correct output: 2                   | Program output: 6                  
Correct output: 8                   | Program output: 42                 
Correct output: 28                  | Program output: 77                 
Correct output: 36                  | Program output: 37                 
Correct output: 37                  | Program output: 41                 
Correct output: 9                   | Program output: 22                 
Correct output: 8                   | Program output: 31                 
Correct output: 25                  | Program output: 70                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 32                 
Correct output: 44                  | Program output: 74                 
Correct output: 1                   | Program output: 95                 
Correct output: 42                  | Program output: 100                
Correct output: 5                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 48                  | Program output: 50                 
Correct output: 16                  | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: 44                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 21                 
Correct output: -9                  | Program output: 96                 
Correct output: -36                 | Program output: 34                 
Correct output: 1                   | Program output: 26                 
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -14                
Correct output: -66                 | Program output: 5                  
Correct output: -64                 | Program output: 46                 
Correct output: 3                   | Program output: 72                 
Correct output: -94                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -7                 
Correct output: 14                  | Program output: 45                 
Correct output: -92                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 63                 
Correct output: -18                 | Program output: 25                 
Correct output: -92                 | Program output: -38                
Correct output: -100                | Program output: 0                  
Correct output: -45                 | Program output: 36                 
Correct output: 17                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -3                 
Correct output: -91                 | Program output: 54                 
Correct output: -56                 | Program output: 10                 
Correct output: -1                  | Program output: 36                 
Correct output: -91                 | Program output: 16                 
Correct output: -59                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 57                 
Correct output: -21                 | Program output: -1                 
Correct output: -81                 | Program output: 99                 
Correct output: -67                 | Program output: 62                 
Correct output: -62                 | Program output: 98                 
Correct output: 13                  | Program output: 93                 
Correct output: -58                 | Program output: -45                
Correct output: -61                 | Program output: 3                  
Correct output: 1                   | Program output: 94                 
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 81                 
Correct output: -68                 | Program output: -61                
Correct output: -83                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -75                
Correct output: -88                 | Program output: -12                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_164} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction -44} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_exec} {:close 0, :instruction tagged_603} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty})
Lexicase best program: (exec_dup_times (boolean_pop) integer_mod boolean_invert_first_then_and integer_lte tagged_164 boolean_invert_first_then_and exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_eq print_integer print_newline) (exec_swap (exec_do*times (exec_rot (exec_do*times () exec_do*count (integer_shove in3 integer_max print_integer print_integer boolean_invert_first_then_and)) (exec_do*while () -44 in1 in1 boolean_frominteger) (in3 integer_max) integer_sub exec_stackdepth) exec_swap (boolean_swap boolean_shove boolean_frominteger exec_k_when_autoconstructing () (exec_if (in3 integer_empty) (boolean_invert_second_then_and exec_pop (integer_yank print_integer exec_rot (boolean_swap) (exec_s (print_exec () tagged_603 integer_lte integer_empty boolean_stackdepth exec_eq in1) (integer_flush) (integer_lt exec_flush exec_y_when_autoconstructing (exec_s_when_autoconstructing () (exec_do*while (boolean_empty)) ()))) ())))) ()) ())) () ())
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_164} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction -44} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 1, :instruction print_exec} {:close 0, :instruction tagged_603} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty})
Zero cases best program: (exec_dup_times (boolean_pop) integer_mod boolean_invert_first_then_and integer_lte tagged_164 boolean_invert_first_then_and exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_eq print_integer print_newline) (exec_swap (exec_do*times (exec_rot (exec_do*times () exec_do*count (integer_shove in3 integer_max print_integer print_integer boolean_invert_first_then_and)) (exec_do*while () -44 in1 in1 boolean_frominteger) (in3 integer_max) integer_sub exec_stackdepth) exec_swap (boolean_swap boolean_shove boolean_frominteger exec_k_when_autoconstructing () (exec_if (in3 integer_empty) (boolean_invert_second_then_and exec_pop (integer_yank print_integer exec_rot (boolean_swap) (exec_s (print_exec () tagged_603 integer_lte integer_empty boolean_stackdepth exec_eq in1) (integer_flush) (integer_lt exec_flush exec_y_when_autoconstructing (exec_s_when_autoconstructing () (exec_do*while (boolean_empty)) ()))) ())))) ()) ())) () ())
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 251 64 596 94 93 256 497 104 103)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (92 251 64 596 94 93 256 497 104 103)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while})
Best program: (exec_s_when_autoconstructing () (exec_dup () in2 integer_dup_times) (exec_dup_times () exec_noop in3 print_integer) boolean_shove exec_shove (integer_stackdepth integer_yankdup exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_pop (boolean_rot exec_while ())) ())))
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 29
Percent parens: 0.414
--- Population Statistics ---
Average total errors in population: 7.85
Median total errors in population: 8
Error averages by case: (0.908 0.749 0.936 0.404 0.906 0.907 0.744 0.503 0.896 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.28
Average program size in population (points): 76.158
Average percent parens in population: 0.276
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1354595
--- Timings ---
Current time: 1559593804826 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         1.8 seconds, 33.6%
Fitness Testing:      2.4 seconds, 46.1%
Report:               1.0 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -36                
Correct output: -59                 | Program output: 95                 
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -39                
Correct output: -35                 | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 76                 
Correct output: 9                   | Program output: 70                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 100                
Correct output: 8                   | Program output: 10                 
Correct output: 28                  | Program output: 66                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 95                 
Correct output: 5                   | Program output: 37                 
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 24                 
Correct output: 48                  | Program output: 85                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -39                
Correct output: -45                 | Program output: -25                
Correct output: -67                 | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -9                  | Program output: 95                 
Correct output: -36                 | Program output: -17                
Correct output: 1                   | Program output: 61                 
Correct output: -93                 | Program output: -63                
Correct output: -69                 | Program output: -10                
Correct output: 20                  | Program output: 74                 
Correct output: -89                 | Program output: 8                  
Correct output: -72                 | Program output: -9                 
Correct output: -90                 | Program output: -11                
Correct output: -79                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -87                
Correct output: -91                 | Program output: -34                
Correct output: -84                 | Program output: 42                 
Correct output: 14                  | Program output: 79                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 81                 
Correct output: -96                 | Program output: -23                
Correct output: -18                 | Program output: -18                
Correct output: -92                 | Program output: 10                 
Correct output: -100                | Program output: -85                
Correct output: -45                 | Program output: -12                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: 21                 
Correct output: -89                 | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 13                 
Correct output: -91                 | Program output: -63                
Correct output: -59                 | Program output: 95                 
Correct output: -88                 | Program output: -77                
Correct output: -53                 | Program output: -13                
Correct output: -79                 | Program output: 80                 
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: 3                  
Correct output: 7                   | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 67                 
Correct output: -67                 | Program output: -15                
Correct output: -62                 | Program output: 37                 
Correct output: 13                  | Program output: 57                 
Correct output: -58                 | Program output: -9                 
Correct output: -61                 | Program output: 7                  
Correct output: 1                   | Program output: 65                 
Correct output: -26                 | Program output: -17                
Correct output: 49                  | Program output: 64                 
Correct output: -68                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 44                 
Correct output: -58                 | Program output: -26                
Correct output: -99                 | Program output: 91                 
Correct output: -88                 | Program output: 33                 
Correct output: -38                 | Program output: 15                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_837} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction 59} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_716})
Lexicase best program: (integer_lte boolean_shove in1 print_integer exec_when (exec_k_when_autoconstructing () (integer_dup boolean_and exec_dup (integer_flush boolean_yank) tagged_837 exec_yank) integer_yank boolean_shove boolean_invert_second_then_and exec_if (exec_dup () in3 exec_empty exec_dup (exec_when () boolean_yank integer_mult boolean_dup_items integer_dup exec_do*times (integer_flush 59 exec_s_when_autoconstructing (exec_do*while (exec_s () (integer_fromboolean boolean_swap exec_shove () integer_fromboolean tag_boolean_716) ())) () ()))) ()))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_837} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction 59} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_716})
Zero cases best program: (integer_lte boolean_shove in1 print_integer exec_when (exec_k_when_autoconstructing () (integer_dup boolean_and exec_dup (integer_flush boolean_yank) tagged_837 exec_yank) integer_yank boolean_shove boolean_invert_second_then_and exec_if (exec_dup () in3 exec_empty exec_dup (exec_when () boolean_yank integer_mult boolean_dup_items integer_dup exec_do*times (integer_flush 59 exec_s_when_autoconstructing (exec_do*while (exec_s () (integer_fromboolean boolean_swap exec_shove () integer_fromboolean tag_boolean_716) ())) () ()))) ()))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 349 136 136 349 5 138 136 136 491)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (355 349 136 136 349 5 138 136 136 491)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_837} {:close 0, :instruction -83} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction 59} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_408} {:close 0, :instruction tag_boolean_716})
Best program: (boolean_shove in1 exec_noop print_integer integer_swap exec_when (exec_k_when_autoconstructing () (exec_when (integer_dup boolean_and exec_dup (boolean_not integer_flush tagged_837 -83 exec_yank) integer_yankdup boolean_shove exec_rot (exec_if (exec_dup () exec_dup_items exec_dup (exec_when () integer_mult integer_rot integer_dup_items integer_dup exec_do*times (integer_flush 59 exec_s_when_autoconstructing (exec_do*while (exec_s () (boolean_swap tagged_408) (tag_boolean_716))) () ()))) ()) () ()))))
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 59
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 7.769
Median total errors in population: 10
Error averages by case: (0.645 0.651 0.864 0.864 0.651 0.995 0.862 0.864 0.864 0.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.407
Average program size in population (points): 57.077
Average percent parens in population: 0.329
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1900615
--- Timings ---
Current time: 1559593807037 milliseconds
Total Time:           7.3 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         2.9 seconds, 40.3%
Fitness Testing:      3.0 seconds, 40.9%
Report:               1.3 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: 95                 
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 76                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 6                  
Correct output: 8                   | Program output: 10                 
Correct output: 28                  | Program output: 66                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 31                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 32                 
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 48                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -9                  | Program output: 95                 
Correct output: -36                 | Program output: -17                
Correct output: 1                   | Program output: 26                 
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: 46                 
Correct output: 3                   | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -7                 
Correct output: 14                  | Program output: 45                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -23                
Correct output: -18                 | Program output: -18                
Correct output: -92                 | Program output: -38                
Correct output: -100                | Program output: -85                
Correct output: -45                 | Program output: -12                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 13                 
Correct output: -91                 | Program output: -63                
Correct output: -59                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 67                 
Correct output: -67                 | Program output: -15                
Correct output: -62                 | Program output: 37                 
Correct output: 13                  | Program output: 57                 
Correct output: -58                 | Program output: -45                
Correct output: -61                 | Program output: 3                  
Correct output: 1                   | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 64                 
Correct output: -68                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -75                
Correct output: -88                 | Program output: -12                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Lexicase best program: (exec_yankdup integer_gte in3 tagged_117 in3 tagged_476 integer_dec integer_dup_items exec_swap (integer_flush integer_yank boolean_invert_first_then_and boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (boolean_empty in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush print_exec (boolean_and boolean_flush boolean_shove integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot -30))) ()) () ())) () ())))))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 79
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Zero cases best program: (exec_yankdup integer_gte in3 tagged_117 in3 tagged_476 integer_dec integer_dup_items exec_swap (integer_flush integer_yank boolean_invert_first_then_and boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (boolean_empty in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush print_exec (boolean_and boolean_flush boolean_shove integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot -30))) ()) () ())) () ())))))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 79
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (40 320 372 3 317 229 228 553 319 325)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (40 320 372 3 317 229 228 553 319 325)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Best program: (exec_yankdup integer_gte in3 tagged_117 in3 tagged_476 integer_dec integer_dup_items exec_swap (integer_flush integer_yank boolean_invert_first_then_and boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (boolean_empty in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush print_exec (boolean_and boolean_flush boolean_shove integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot -30))) ()) () ())) () ())))))
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 79
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 7.294
Median total errors in population: 7
Error averages by case: (0.96 0.68 0.628 0.997 0.683 0.771 0.772 0.447 0.681 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.38
Average program size in population (points): 63.398
Average percent parens in population: 0.329
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2442668
--- Timings ---
Current time: 1559593808985 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.0 seconds, 43.0%
Fitness Testing:      3.5 seconds, 37.5%
Report:               1.7 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: 95                 
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 76                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 6                  
Correct output: 8                   | Program output: 10                 
Correct output: 28                  | Program output: 66                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 31                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 32                 
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 48                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -9                  | Program output: 95                 
Correct output: -36                 | Program output: -17                
Correct output: 1                   | Program output: 26                 
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: 46                 
Correct output: 3                   | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -7                 
Correct output: 14                  | Program output: 45                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -23                
Correct output: -18                 | Program output: -18                
Correct output: -92                 | Program output: -38                
Correct output: -100                | Program output: -85                
Correct output: -45                 | Program output: -12                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 13                 
Correct output: -91                 | Program output: -63                
Correct output: -59                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 67                 
Correct output: -67                 | Program output: -15                
Correct output: -62                 | Program output: 37                 
Correct output: 13                  | Program output: 57                 
Correct output: -58                 | Program output: -45                
Correct output: -61                 | Program output: 3                  
Correct output: 1                   | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 64                 
Correct output: -68                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -75                
Correct output: -88                 | Program output: -12                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_yankdup boolean_xor integer_gte in3 tagged_117 in3 tagged_476 integer_dec integer_dup_items exec_swap (integer_flush exec_flush integer_yank boolean_invert_first_then_and boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (boolean_empty in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush print_exec (boolean_and boolean_flush boolean_shove integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot boolean_pop))) ()) () ())) () ())))))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 81
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_yankdup boolean_xor integer_gte in3 tagged_117 in3 tagged_476 integer_dec integer_dup_items exec_swap (integer_flush exec_flush integer_yank boolean_invert_first_then_and boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (boolean_empty in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush print_exec (boolean_and boolean_flush boolean_shove integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot boolean_pop))) ()) () ())) () ())))))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 81
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 233 136 136 50 406 135 257 405 260)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (87 233 136 136 50 406 135 257 405 260)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Best program: (exec_yankdup in3 tagged_117 in3 tagged_476 integer_dec integer_dup_items exec_swap (integer_flush integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (in1) exec_rot (boolean_empty in2 integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor exec_flush exec_s_when_autoconstructing () (print_exec (boolean_and integer_yank boolean_flush integer_dup_times) boolean_shove integer_mod boolean_frominteger exec_while (boolean_stackdepth) integer_inc) (exec_y_when_autoconstructing () integer_eq boolean_rot -30)) () ()) ()))))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 73
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.895
Median total errors in population: 10
Error averages by case: (0.913 0.767 0.864 0.864 0.95 0.594 0.865 0.743 0.595 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.803
Average program size in population (points): 74.625
Average percent parens in population: 0.316
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2880508
--- Timings ---
Current time: 1559593810862 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.1 seconds, 45.5%
Fitness Testing:      4.0 seconds, 35.3%
Report:               2.1 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: 95                 
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 76                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 6                  
Correct output: 8                   | Program output: 10                 
Correct output: 28                  | Program output: 66                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 31                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 32                 
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 48                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -9                  | Program output: 95                 
Correct output: -36                 | Program output: -17                
Correct output: 1                   | Program output: 26                 
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: 46                 
Correct output: 3                   | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -7                 
Correct output: 14                  | Program output: 45                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -23                
Correct output: -18                 | Program output: -18                
Correct output: -92                 | Program output: -38                
Correct output: -100                | Program output: -85                
Correct output: -45                 | Program output: -12                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 13                 
Correct output: -91                 | Program output: -63                
Correct output: -59                 | Program output: -37                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 67                 
Correct output: -67                 | Program output: -15                
Correct output: -62                 | Program output: 37                 
Correct output: 13                  | Program output: 57                 
Correct output: -58                 | Program output: -45                
Correct output: -61                 | Program output: 3                  
Correct output: 1                   | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 64                 
Correct output: -68                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -75                
Correct output: -88                 | Program output: -12                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Lexicase best program: (exec_yankdup in3 tagged_117 in3 integer_dec integer_dup_items exec_swap (integer_flush integer_yank boolean_invert_first_then_and boolean_dup boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop boolean_rot exec_pop () print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush exec_flush print_exec (boolean_and boolean_flush integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot -30))) ()) () ())) () ())))))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 78
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tagged_117} {:close 1, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Zero cases best program: (exec_yankdup in3 tagged_117 in3 integer_dec integer_dup_items exec_swap (integer_flush integer_yank boolean_invert_first_then_and boolean_dup boolean_xor integer_gt integer_lte boolean_and integer_lt) (integer_min in1 exec_do*while (integer_min boolean_dup exec_k_when_autoconstructing () (exec_dup (exec_rot (in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop boolean_rot exec_pop () print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush exec_flush print_exec (boolean_and boolean_flush integer_mod boolean_frominteger exec_while (boolean_stackdepth) exec_swap (integer_inc) (exec_y_when_autoconstructing () boolean_rot -30))) ()) () ())) () ())))))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 78
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 344 369 73 158 110 452 111 110 155)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (344 344 369 73 158 110 452 111 110 155)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -30})
Best program: (integer_gte in3 in3 tagged_476 integer_dup_items exec_if () (integer_yank boolean_invert_first_then_and integer_gt boolean_and integer_swap integer_lt) in1 integer_min exec_do*while (boolean_yank) exec_do*while () integer_min boolean_dup exec_k_when_autoconstructing () (boolean_swap exec_dup (exec_rot (exec_yankdup) () (exec_dup (in2 exec_s () (integer_lte exec_do*while () boolean_swap) (integer_dup_items exec_noop print_integer exec_rot (boolean_xor integer_mod exec_s_when_autoconstructing () (exec_flush print_exec (boolean_and boolean_flush boolean_shove integer_mod exec_stackdepth boolean_frominteger exec_while (boolean_stackdepth) integer_inc) boolean_rot) (exec_y_when_autoconstructing () -30)) () ()))))))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 51
Size: 76
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 7.774
Median total errors in population: 9
Error averages by case: (0.656 0.656 0.631 0.927 0.842 0.89 0.548 0.889 0.89 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.836
Average program size in population (points): 76.732
Average percent parens in population: 0.324
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3278393
--- Timings ---
Current time: 1559593812728 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.2 seconds, 47.5%
Fitness Testing:      4.4 seconds, 33.4%
Report:               2.4 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 437
Test mean error for best: 0.43700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 60                 
Correct output: 9                   | Program output: 70                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 80                 
Correct output: 5                   | Program output: 37                 
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: 44                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -69                
Correct output: -9                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: 1                   | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 74                 
Correct output: -89                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -14                
Correct output: -66                 | Program output: 5                  
Correct output: -64                 | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: -94                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: 14                  | Program output: 19                 
Correct output: -92                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 52                 
Correct output: -18                 | Program output: 25                 
Correct output: -92                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 9                  
Correct output: -56                 | Program output: 10                 
Correct output: -1                  | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 7                  
Correct output: -21                 | Program output: -1                 
Correct output: -81                 | Program output: -71                
Correct output: -67                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -45                
Correct output: -61                 | Program output: -34                
Correct output: 1                   | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 64                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -12                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Lexicase best program: (exec_yankdup integer_div in3 integer_lte in1 in3 tagged_476 exec_swap () () boolean_invert_first_then_and integer_dec integer_dup_items exec_swap (integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and in1 exec_yank exec_do*while (in2 integer_min exec_k (boolean_dup print_integer exec_dup (exec_rot (exec_s_when_autoconstructing (boolean_empty exec_do*while () boolean_swap) (integer_dup_items integer_add exec_pop () exec_noop boolean_xor exec_flush print_exec (boolean_and integer_mod boolean_frominteger boolean_stackdepth exec_while (boolean_stackdepth) exec_swap (integer_inc) (integer_add) print_integer boolean_rot -30)) ()) () ())) ())) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Zero cases best program: (exec_yankdup integer_div in3 integer_lte in1 in3 tagged_476 exec_swap () () boolean_invert_first_then_and integer_dec integer_dup_items exec_swap (integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and in1 exec_yank exec_do*while (in2 integer_min exec_k (boolean_dup print_integer exec_dup (exec_rot (exec_s_when_autoconstructing (boolean_empty exec_do*while () boolean_swap) (integer_dup_items integer_add exec_pop () exec_noop boolean_xor exec_flush print_exec (boolean_and integer_mod boolean_frominteger boolean_stackdepth exec_while (boolean_stackdepth) exec_swap (integer_inc) (integer_add) print_integer boolean_rot -30)) ()) () ())) ())) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 295 64 280 176 194 395 296 76 527)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (190 295 64 280 176 194 395 296 76 527)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Best program: (exec_yankdup integer_div in3 integer_lte in1 in3 tagged_476 exec_swap () () boolean_invert_first_then_and integer_dec integer_dup_items exec_swap (integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and in1 exec_yank exec_do*while (in2 integer_min exec_k (boolean_dup print_integer exec_dup (exec_rot (exec_s_when_autoconstructing (boolean_empty exec_do*while () boolean_swap) (integer_dup_items integer_add exec_pop () exec_noop boolean_xor exec_flush print_exec (boolean_and integer_mod boolean_frominteger boolean_stackdepth exec_while (boolean_stackdepth) exec_swap (integer_inc) (integer_add) print_integer boolean_rot -30)) ()) () ())) ())) ())
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 50
Size: 71
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.507
Median total errors in population: 7
Error averages by case: (0.81 0.705 0.936 0.72 0.824 0.806 0.605 0.704 0.924 0.473)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.908
Average program size in population (points): 76.012
Average percent parens in population: 0.315
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3709477
--- Timings ---
Current time: 1559593814591 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.3 seconds, 49.0%
Fitness Testing:      4.8 seconds, 32.0%
Report:               2.8 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 437
Test mean error for best: 0.43700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 60                 
Correct output: 9                   | Program output: 70                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 80                 
Correct output: 5                   | Program output: 37                 
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: 44                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -69                
Correct output: -9                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: 1                   | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 74                 
Correct output: -89                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -14                
Correct output: -66                 | Program output: 5                  
Correct output: -64                 | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: -94                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: 14                  | Program output: 19                 
Correct output: -92                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 52                 
Correct output: -18                 | Program output: 25                 
Correct output: -92                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 9                  
Correct output: -56                 | Program output: 10                 
Correct output: -1                  | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 7                  
Correct output: -21                 | Program output: -1                 
Correct output: -81                 | Program output: -71                
Correct output: -67                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -45                
Correct output: -61                 | Program output: -34                
Correct output: 1                   | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 64                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -12                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Lexicase best program: (exec_yankdup integer_div integer_div in3 integer_lte in1 in3 tagged_476 boolean_invert_first_then_and integer_dec integer_dup_items exec_swap (integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and in1 exec_when () exec_yank exec_do*while (in2 integer_min exec_k (boolean_dup print_integer exec_dup (exec_s_when_autoconstructing (boolean_empty exec_do*while () boolean_swap) (integer_dup_items integer_add exec_pop () exec_rot (exec_noop exec_flush print_exec (boolean_and integer_mod in1) boolean_frominteger boolean_stackdepth exec_while (boolean_stackdepth) exec_swap (integer_inc) (integer_add) print_integer boolean_rot -30) () ()) ())) ())) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30})
Zero cases best program: (exec_yankdup integer_div integer_div in3 integer_lte in1 in3 tagged_476 boolean_invert_first_then_and integer_dec integer_dup_items exec_swap (integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and in1 exec_when () exec_yank exec_do*while (in2 integer_min exec_k (boolean_dup print_integer exec_dup (exec_s_when_autoconstructing (boolean_empty exec_do*while () boolean_swap) (integer_dup_items integer_add exec_pop () exec_rot (exec_noop exec_flush print_exec (boolean_and integer_mod in1) boolean_frominteger boolean_stackdepth exec_while (boolean_stackdepth) exec_swap (integer_inc) (integer_add) print_integer boolean_rot -30) () ()) ())) ())) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 243 624 471 611 93 626 203 488 94)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (250 243 624 471 611 93 626 203 488 94)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction -30} {:close 0, :instruction exec_when})
Best program: (exec_yankdup integer_div in3 integer_lte in1 in3 tagged_476 exec_swap () () boolean_invert_first_then_and integer_dec integer_dup_items exec_swap (integer_yank boolean_invert_first_then_and boolean_xor integer_lte boolean_and in1 exec_yank exec_do*while (in2 integer_min exec_k (print_integer exec_dup (exec_rot (exec_s_when_autoconstructing (boolean_empty exec_do*while () boolean_swap) (integer_dup_items integer_add integer_dup_items exec_pop () exec_noop boolean_xor exec_flush print_exec (boolean_and integer_mod boolean_frominteger boolean_stackdepth exec_while (boolean_stackdepth) exec_swap (integer_inc) (print_integer boolean_rot -30 exec_when ()))) ()) () ())) ())) ())
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.297
Median total errors in population: 5
Error averages by case: (0.75 0.757 0.376 0.529 0.389 0.907 0.374 0.797 0.512 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.288
Average program size in population (points): 72.035
Average percent parens in population: 0.301
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4197508
--- Timings ---
Current time: 1559593816502 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.4 seconds, 49.9%
Fitness Testing:      5.2 seconds, 31.1%
Report:               3.1 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 1
Test mean error for best: 0.00100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 48                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: 1                   | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: -64                
Correct output: 3                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -18                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 7                  
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: -61                
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_117} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_stackdepth integer_gte in3 exec_do*while (tagged_117) exec_s (in4 in3) (exec_dup (tagged_476) integer_dup_items exec_empty exec_swap (exec_do*range (integer_yank integer_gt integer_lte integer_gte) integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap exec_while (boolean_stackdepth) boolean_xor exec_swap (integer_inc) (integer_fromboolean))) () ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_117} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_stackdepth integer_gte in3 exec_do*while (tagged_117) exec_s (in4 in3) (exec_dup (tagged_476) integer_dup_items exec_empty exec_swap (exec_do*range (integer_yank integer_gt integer_lte integer_gte) integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap exec_while (boolean_stackdepth) boolean_xor exec_swap (integer_inc) (integer_fromboolean))) () ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 195 191 164 162 224 450 210 165 550)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (324 195 191 164 162 224 450 210 165 550)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_117} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction tagged_476} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_352} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc})
Best program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 61
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.365
Median total errors in population: 7
Error averages by case: (0.676 0.805 0.809 0.836 0.838 0.776 0.55 0.79 0.835 0.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.763
Average program size in population (points): 71.694
Average percent parens in population: 0.305
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4697364
--- Timings ---
Current time: 1559593818459 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.5 seconds, 50.6%
Fitness Testing:      5.7 seconds, 30.4%
Report:               3.5 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 61


Auto-simplifying with starting size: 61
step: 0
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 500
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1000
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1500
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2000
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2500
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3000
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3500
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4000
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4500
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 5000
program: (boolean_stackdepth in3 exec_do*while (tagged_117) exec_s (in4 in3) (tagged_476) (integer_dup_items exec_empty exec_swap (exec_do*range (integer_gt integer_lte integer_gte) boolean_and integer_lt) (integer_min in1 exec_do*while (tagged_352 exec_dup (exec_do*while () integer_min boolean_empty in2 exec_do*while () boolean_swap) integer_dup_items exec_noop print_integer exec_rot (integer_mod exec_flush print_exec (exec_eq boolean_shove integer_mod boolean_swap integer_div exec_while (boolean_stackdepth) boolean_xor integer_inc)) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 1
Test mean error for best: 0.00100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: 24                  | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -10                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -17                 | Program output: -17                
Correct output: 74                  | Program output: 74                 
Correct output: -37                 | Program output: -37                
Correct output: 88                  | Program output: 88                 
Correct output: -23                 | Program output: -23                
Correct output: 60                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: 36                  | Program output: 36                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 48                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: 1                   | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: -66                
Correct output: -64                 | Program output: -64                
Correct output: 3                   | Program output: 3                  
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: 14                  | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -96                
Correct output: -18                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: 17                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: 7                   | Program output: 7                  
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: -61                
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: 49                  | Program output: 49                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -58                 | Program output: -58                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -38                 | Program output: -38                
;;******************************
