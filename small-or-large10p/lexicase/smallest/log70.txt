Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 -39 85 85] -39] [[96 96 -13 96] -13] [[10 -71 -71 -71] -71] [[75 75 75 -33] -33] [[65 65 65 -43] -43] [[17 -86 17 17] -86] [[-99 -99 -99 -59] -99] [[59 49 49 49] 49] [[55 84 84 84] 55] [[68 68 68 61] 61] [(-76 -76 -76 -76) -76] [(7 7 7 7) 7] [(10 10 10 10) 10] [(-91 -91 -91 -91) -91] [(-11 -11 -11 -11) -11] [(46 4 29 57) 4] [(22 89 46 31) 22] [(32 100 2 21) 2] [(35 40 35 87) 35] [(78 64 6 86) 6] [(79 7 0 76) 0] [(75 43 37 7) 7] [(40 59 46 28) 28] [(23 26 84 93) 23] [(3 32 62 93) 3] [(40 40 10 85) 10] [(93 63 55 24) 24] [(48 18 3 6) 3] [(13 89 95 55) 13] [(1 39 89 72) 1] [(34 89 15 26) 15] [(53 91 64 62) 53] [(69 51 85 23) 23] [(38 18 54 82) 18] [(57 21 18 29) 18] [(-20 -65 -25 -42) -65] [(68 -89 40 -50) -89] [(-88 -100 -69 84) -100] [(40 80 61 -8) -8] [(-25 -79 23 72) -79] [(-51 -40 -61 -84) -84] [(-14 -47 -12 44) -47] [(-3 -85 8 32) -85] [(53 -45 30 50) -45] [(82 -98 5 80) -98] [(-97 -7 87 67) -97] [(-24 95 22 -47) -47] [(31 74 -26 -59) -59] [(-28 -4 18 -63) -63] [(79 -24 -35 -55) -55] [(-71 31 80 -88) -88] [(88 12 -29 34) -29] [(-82 20 -72 -2) -82] [(7 96 27 96) 7] [(-89 38 56 100) -89] [(65 37 99 -22) -22] [(8 -16 -95 -54) -95] [(70 -79 -98 51) -98] [(-53 93 -56 10) -56] [(37 87 83 29) 29] [(-51 10 63 91) -51] [(-13 -6 -95 -100) -100] [(-72 -14 -92 -57) -92] [(85 -74 28 -44) -74] [(39 -9 39 -34) -34] [(-61 -73 -87 52) -87] [(-6 92 46 -68) -68] [(-7 -36 46 -28) -36] [(84 -37 -10 -53) -53] [(32 -83 83 49) -83] [(-94 -42 -19 -5) -94] [(2 -9 70 -97) -97] [(10 95 -96 75) -96] [(63 40 67 7) 7] [(34 -64 -43 88) -64] [(-99 92 15 75) -99] [(100 69 -92 20) -92] [(77 -82 4 -46) -82] [(63 -81 1 66) -81] [(-89 37 25 -41) -89] [(7 -7 -87 69) -87] [(74 13 28 -65) -65] [(-38 -18 -96 -21) -96] [(-74 99 -8 -54) -74] [(-22 -85 -5 -74) -85] [(-78 -66 -52 -69) -78] [(36 18 43 96) 18] [(85 -30 30 -99) -99] [(-6 33 -32 88) -32] [(-57 -33 18 72) -57] [(67 -1 -66 -8) -66] [(21 48 -60 -75) -75] [(42 -79 89 -32) -79] [(-32 -29 15 -68) -68] [(45 20 -31 18) -31])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[85 -39 85 85] -39]
Train Case:   6 | Input/Output: [[96 96 -13 96] -13]
Train Case:   7 | Input/Output: [[10 -71 -71 -71] -71]
Train Case:   8 | Input/Output: [[75 75 75 -33] -33]
Train Case:   9 | Input/Output: [[65 65 65 -43] -43]
Train Case:  10 | Input/Output: [[17 -86 17 17] -86]
Train Case:  11 | Input/Output: [[-99 -99 -99 -59] -99]
Train Case:  12 | Input/Output: [[59 49 49 49] 49]
Train Case:  13 | Input/Output: [[55 84 84 84] 55]
Train Case:  14 | Input/Output: [[68 68 68 61] 61]
Train Case:  15 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  16 | Input/Output: [(7 7 7 7) 7]
Train Case:  17 | Input/Output: [(10 10 10 10) 10]
Train Case:  18 | Input/Output: [(-91 -91 -91 -91) -91]
Train Case:  19 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  20 | Input/Output: [(46 4 29 57) 4]
Train Case:  21 | Input/Output: [(22 89 46 31) 22]
Train Case:  22 | Input/Output: [(32 100 2 21) 2]
Train Case:  23 | Input/Output: [(35 40 35 87) 35]
Train Case:  24 | Input/Output: [(78 64 6 86) 6]
Train Case:  25 | Input/Output: [(79 7 0 76) 0]
Train Case:  26 | Input/Output: [(75 43 37 7) 7]
Train Case:  27 | Input/Output: [(40 59 46 28) 28]
Train Case:  28 | Input/Output: [(23 26 84 93) 23]
Train Case:  29 | Input/Output: [(3 32 62 93) 3]
Train Case:  30 | Input/Output: [(40 40 10 85) 10]
Train Case:  31 | Input/Output: [(93 63 55 24) 24]
Train Case:  32 | Input/Output: [(48 18 3 6) 3]
Train Case:  33 | Input/Output: [(13 89 95 55) 13]
Train Case:  34 | Input/Output: [(1 39 89 72) 1]
Train Case:  35 | Input/Output: [(34 89 15 26) 15]
Train Case:  36 | Input/Output: [(53 91 64 62) 53]
Train Case:  37 | Input/Output: [(69 51 85 23) 23]
Train Case:  38 | Input/Output: [(38 18 54 82) 18]
Train Case:  39 | Input/Output: [(57 21 18 29) 18]
Train Case:  40 | Input/Output: [(-20 -65 -25 -42) -65]
Train Case:  41 | Input/Output: [(68 -89 40 -50) -89]
Train Case:  42 | Input/Output: [(-88 -100 -69 84) -100]
Train Case:  43 | Input/Output: [(40 80 61 -8) -8]
Train Case:  44 | Input/Output: [(-25 -79 23 72) -79]
Train Case:  45 | Input/Output: [(-51 -40 -61 -84) -84]
Train Case:  46 | Input/Output: [(-14 -47 -12 44) -47]
Train Case:  47 | Input/Output: [(-3 -85 8 32) -85]
Train Case:  48 | Input/Output: [(53 -45 30 50) -45]
Train Case:  49 | Input/Output: [(82 -98 5 80) -98]
Train Case:  50 | Input/Output: [(-97 -7 87 67) -97]
Train Case:  51 | Input/Output: [(-24 95 22 -47) -47]
Train Case:  52 | Input/Output: [(31 74 -26 -59) -59]
Train Case:  53 | Input/Output: [(-28 -4 18 -63) -63]
Train Case:  54 | Input/Output: [(79 -24 -35 -55) -55]
Train Case:  55 | Input/Output: [(-71 31 80 -88) -88]
Train Case:  56 | Input/Output: [(88 12 -29 34) -29]
Train Case:  57 | Input/Output: [(-82 20 -72 -2) -82]
Train Case:  58 | Input/Output: [(7 96 27 96) 7]
Train Case:  59 | Input/Output: [(-89 38 56 100) -89]
Train Case:  60 | Input/Output: [(65 37 99 -22) -22]
Train Case:  61 | Input/Output: [(8 -16 -95 -54) -95]
Train Case:  62 | Input/Output: [(70 -79 -98 51) -98]
Train Case:  63 | Input/Output: [(-53 93 -56 10) -56]
Train Case:  64 | Input/Output: [(37 87 83 29) 29]
Train Case:  65 | Input/Output: [(-51 10 63 91) -51]
Train Case:  66 | Input/Output: [(-13 -6 -95 -100) -100]
Train Case:  67 | Input/Output: [(-72 -14 -92 -57) -92]
Train Case:  68 | Input/Output: [(85 -74 28 -44) -74]
Train Case:  69 | Input/Output: [(39 -9 39 -34) -34]
Train Case:  70 | Input/Output: [(-61 -73 -87 52) -87]
Train Case:  71 | Input/Output: [(-6 92 46 -68) -68]
Train Case:  72 | Input/Output: [(-7 -36 46 -28) -36]
Train Case:  73 | Input/Output: [(84 -37 -10 -53) -53]
Train Case:  74 | Input/Output: [(32 -83 83 49) -83]
Train Case:  75 | Input/Output: [(-94 -42 -19 -5) -94]
Train Case:  76 | Input/Output: [(2 -9 70 -97) -97]
Train Case:  77 | Input/Output: [(10 95 -96 75) -96]
Train Case:  78 | Input/Output: [(63 40 67 7) 7]
Train Case:  79 | Input/Output: [(34 -64 -43 88) -64]
Train Case:  80 | Input/Output: [(-99 92 15 75) -99]
Train Case:  81 | Input/Output: [(100 69 -92 20) -92]
Train Case:  82 | Input/Output: [(77 -82 4 -46) -82]
Train Case:  83 | Input/Output: [(63 -81 1 66) -81]
Train Case:  84 | Input/Output: [(-89 37 25 -41) -89]
Train Case:  85 | Input/Output: [(7 -7 -87 69) -87]
Train Case:  86 | Input/Output: [(74 13 28 -65) -65]
Train Case:  87 | Input/Output: [(-38 -18 -96 -21) -96]
Train Case:  88 | Input/Output: [(-74 99 -8 -54) -74]
Train Case:  89 | Input/Output: [(-22 -85 -5 -74) -85]
Train Case:  90 | Input/Output: [(-78 -66 -52 -69) -78]
Train Case:  91 | Input/Output: [(36 18 43 96) 18]
Train Case:  92 | Input/Output: [(85 -30 30 -99) -99]
Train Case:  93 | Input/Output: [(-6 33 -32 88) -32]
Train Case:  94 | Input/Output: [(-57 -33 18 72) -57]
Train Case:  95 | Input/Output: [(67 -1 -66 -8) -66]
Train Case:  96 | Input/Output: [(21 48 -60 -75) -75]
Train Case:  97 | Input/Output: [(42 -79 89 -32) -79]
Train Case:  98 | Input/Output: [(-32 -29 15 -68) -68]
Train Case:  99 | Input/Output: [(45 20 -31 18) -31]
Test Case:   0 | Input/Output: [[-5 85 85 85] -5]
Test Case:   1 | Input/Output: [[23 23 23 -37] -37]
Test Case:   2 | Input/Output: [[-66 -66 -66 85] -66]
Test Case:   3 | Input/Output: [[-92 -10 -10 -10] -92]
Test Case:   4 | Input/Output: [[-79 -2 -79 -79] -79]
Test Case:   5 | Input/Output: [[-84 -84 -84 -63] -84]
Test Case:   6 | Input/Output: [[-50 -78 -78 -78] -78]
Test Case:   7 | Input/Output: [[15 15 15 -74] -74]
Test Case:   8 | Input/Output: [[-94 -94 -94 -81] -94]
Test Case:   9 | Input/Output: [[-52 -52 -52 54] -52]
Test Case:  10 | Input/Output: [[100 100 100 -98] -98]
Test Case:  11 | Input/Output: [[-37 44 -37 -37] -37]
Test Case:  12 | Input/Output: [[-24 -24 -24 15] -24]
Test Case:  13 | Input/Output: [[84 84 84 -66] -66]
Test Case:  14 | Input/Output: [[-97 -2 -97 -97] -97]
Test Case:  15 | Input/Output: [[48 16 48 48] 16]
Test Case:  16 | Input/Output: [[72 72 72 79] 72]
Test Case:  17 | Input/Output: [[-5 -5 38 -5] -5]
Test Case:  18 | Input/Output: [[46 -97 46 46] -97]
Test Case:  19 | Input/Output: [[99 3 3 3] 3]
Test Case:  20 | Input/Output: [[16 16 16 67] 16]
Test Case:  21 | Input/Output: [[35 35 35 -50] -50]
Test Case:  22 | Input/Output: [[26 26 26 -71] -71]
Test Case:  23 | Input/Output: [[-1 28 28 28] -1]
Test Case:  24 | Input/Output: [[29 46 29 29] 29]
Test Case:  25 | Input/Output: [[-54 -96 -96 -96] -96]
Test Case:  26 | Input/Output: [[-74 29 29 29] -74]
Test Case:  27 | Input/Output: [[43 71 43 43] 43]
Test Case:  28 | Input/Output: [[-98 -98 25 -98] -98]
Test Case:  29 | Input/Output: [[-71 17 17 17] -71]
Test Case:  30 | Input/Output: [[28 28 28 97] 28]
Test Case:  31 | Input/Output: [[-66 -43 -66 -66] -66]
Test Case:  32 | Input/Output: [[-68 -68 -92 -68] -92]
Test Case:  33 | Input/Output: [[-16 -16 -16 -28] -28]
Test Case:  34 | Input/Output: [[-53 -53 -53 91] -53]
Test Case:  35 | Input/Output: [[20 20 -13 20] -13]
Test Case:  36 | Input/Output: [[79 16 16 16] 16]
Test Case:  37 | Input/Output: [[29 29 -61 29] -61]
Test Case:  38 | Input/Output: [[-83 0 -83 -83] -83]
Test Case:  39 | Input/Output: [[88 88 88 -96] -96]
Test Case:  40 | Input/Output: [[75 -44 -44 -44] -44]
Test Case:  41 | Input/Output: [[47 23 23 23] 23]
Test Case:  42 | Input/Output: [[-73 -73 -73 53] -73]
Test Case:  43 | Input/Output: [[81 81 81 10] 10]
Test Case:  44 | Input/Output: [[59 59 46 59] 46]
Test Case:  45 | Input/Output: [[-92 -92 -92 99] -92]
Test Case:  46 | Input/Output: [[87 87 87 41] 41]
Test Case:  47 | Input/Output: [[69 69 -46 69] -46]
Test Case:  48 | Input/Output: [[56 56 56 -17] -17]
Test Case:  49 | Input/Output: [[35 -54 35 35] -54]
Test Case:  50 | Input/Output: [[-25 -12 -25 -25] -25]
Test Case:  51 | Input/Output: [[86 86 86 81] 81]
Test Case:  52 | Input/Output: [[-19 -19 -19 -73] -73]
Test Case:  53 | Input/Output: [[66 -50 66 66] -50]
Test Case:  54 | Input/Output: [[80 80 90 80] 80]
Test Case:  55 | Input/Output: [[-31 50 50 50] -31]
Test Case:  56 | Input/Output: [[67 67 53 67] 53]
Test Case:  57 | Input/Output: [[-55 -55 -55 93] -55]
Test Case:  58 | Input/Output: [[1 1 -67 1] -67]
Test Case:  59 | Input/Output: [[27 -77 27 27] -77]
Test Case:  60 | Input/Output: [[-87 -87 -39 -87] -87]
Test Case:  61 | Input/Output: [[29 -69 -69 -69] -69]
Test Case:  62 | Input/Output: [[97 -99 -99 -99] -99]
Test Case:  63 | Input/Output: [[-53 -53 95 -53] -53]
Test Case:  64 | Input/Output: [[57 -55 -55 -55] -55]
Test Case:  65 | Input/Output: [[86 86 44 86] 44]
Test Case:  66 | Input/Output: [[72 72 6 72] 6]
Test Case:  67 | Input/Output: [[78 95 95 95] 78]
Test Case:  68 | Input/Output: [[-93 -93 -93 19] -93]
Test Case:  69 | Input/Output: [[21 21 29 21] 21]
Test Case:  70 | Input/Output: [[62 62 62 -43] -43]
Test Case:  71 | Input/Output: [[1 -29 1 1] -29]
Test Case:  72 | Input/Output: [[16 16 59 16] 16]
Test Case:  73 | Input/Output: [[66 66 66 -25] -25]
Test Case:  74 | Input/Output: [[95 -43 -43 -43] -43]
Test Case:  75 | Input/Output: [[32 -80 32 32] -80]
Test Case:  76 | Input/Output: [[-9 -9 -9 29] -9]
Test Case:  77 | Input/Output: [[-12 -12 -12 33] -12]
Test Case:  78 | Input/Output: [[-47 -47 -75 -47] -75]
Test Case:  79 | Input/Output: [[-32 -95 -32 -32] -95]
Test Case:  80 | Input/Output: [[-13 49 49 49] -13]
Test Case:  81 | Input/Output: [[29 29 29 -4] -4]
Test Case:  82 | Input/Output: [[22 24 24 24] 22]
Test Case:  83 | Input/Output: [[-25 -25 -70 -25] -70]
Test Case:  84 | Input/Output: [[74 74 22 74] 22]
Test Case:  85 | Input/Output: [[-75 -11 -75 -75] -75]
Test Case:  86 | Input/Output: [[-14 -14 -14 -14] -14]
Test Case:  87 | Input/Output: [[-3 -3 -3 -41] -41]
Test Case:  88 | Input/Output: [[19 19 19 -64] -64]
Test Case:  89 | Input/Output: [[-49 -49 -37 -49] -49]
Test Case:  90 | Input/Output: [[13 87 87 87] 13]
Test Case:  91 | Input/Output: [[59 14 59 59] 14]
Test Case:  92 | Input/Output: [[26 96 96 96] 26]
Test Case:  93 | Input/Output: [[-86 -86 -86 -65] -86]
Test Case:  94 | Input/Output: [[-29 -29 -29 -55] -55]
Test Case:  95 | Input/Output: [[-56 -56 -56 -58] -58]
Test Case:  96 | Input/Output: [[22 22 22 -32] -32]
Test Case:  97 | Input/Output: [[-28 27 -28 -28] -28]
Test Case:  98 | Input/Output: [[30 30 30 -27] -27]
Test Case:  99 | Input/Output: [[-76 -76 -76 -33] -76]
Test Case: 100 | Input/Output: [(94 94 94 94) 94]
Test Case: 101 | Input/Output: [(27 27 27 27) 27]
Test Case: 102 | Input/Output: [(94 94 94 94) 94]
Test Case: 103 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 104 | Input/Output: [(69 69 69 69) 69]
Test Case: 105 | Input/Output: [(55 55 55 55) 55]
Test Case: 106 | Input/Output: [(76 76 76 76) 76]
Test Case: 107 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 108 | Input/Output: [(65 65 65 65) 65]
Test Case: 109 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 110 | Input/Output: [(86 86 86 86) 86]
Test Case: 111 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 112 | Input/Output: [(89 89 89 89) 89]
Test Case: 113 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 114 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 115 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 116 | Input/Output: [(4 4 4 4) 4]
Test Case: 117 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 118 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 119 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 120 | Input/Output: [(86 86 86 86) 86]
Test Case: 121 | Input/Output: [(72 72 72 72) 72]
Test Case: 122 | Input/Output: [(68 68 68 68) 68]
Test Case: 123 | Input/Output: [(83 83 83 83) 83]
Test Case: 124 | Input/Output: [(85 85 85 85) 85]
Test Case: 125 | Input/Output: [(4 4 4 4) 4]
Test Case: 126 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 127 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 128 | Input/Output: [(64 64 64 64) 64]
Test Case: 129 | Input/Output: [(33 33 33 33) 33]
Test Case: 130 | Input/Output: [(32 32 32 32) 32]
Test Case: 131 | Input/Output: [(44 44 44 44) 44]
Test Case: 132 | Input/Output: [(51 51 51 51) 51]
Test Case: 133 | Input/Output: [(12 12 12 12) 12]
Test Case: 134 | Input/Output: [(55 55 55 55) 55]
Test Case: 135 | Input/Output: [(78 78 78 78) 78]
Test Case: 136 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 137 | Input/Output: [(45 45 45 45) 45]
Test Case: 138 | Input/Output: [(24 24 24 24) 24]
Test Case: 139 | Input/Output: [(29 29 29 29) 29]
Test Case: 140 | Input/Output: [(34 34 34 34) 34]
Test Case: 141 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 142 | Input/Output: [(16 16 16 16) 16]
Test Case: 143 | Input/Output: [(59 59 59 59) 59]
Test Case: 144 | Input/Output: [(72 72 72 72) 72]
Test Case: 145 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 146 | Input/Output: [(75 75 75 75) 75]
Test Case: 147 | Input/Output: [(16 16 16 16) 16]
Test Case: 148 | Input/Output: [(3 3 3 3) 3]
Test Case: 149 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 150 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 151 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 152 | Input/Output: [(52 52 52 52) 52]
Test Case: 153 | Input/Output: [(29 29 29 29) 29]
Test Case: 154 | Input/Output: [(59 59 59 59) 59]
Test Case: 155 | Input/Output: [(81 81 81 81) 81]
Test Case: 156 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 157 | Input/Output: [(4 4 4 4) 4]
Test Case: 158 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 159 | Input/Output: [(97 97 97 97) 97]
Test Case: 160 | Input/Output: [(77 77 77 77) 77]
Test Case: 161 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 162 | Input/Output: [(46 46 46 46) 46]
Test Case: 163 | Input/Output: [(48 48 48 48) 48]
Test Case: 164 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 165 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 166 | Input/Output: [(3 3 3 3) 3]
Test Case: 167 | Input/Output: [(81 81 81 81) 81]
Test Case: 168 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 169 | Input/Output: [(87 87 87 87) 87]
Test Case: 170 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 171 | Input/Output: [(4 4 4 4) 4]
Test Case: 172 | Input/Output: [(7 7 7 7) 7]
Test Case: 173 | Input/Output: [(33 33 33 33) 33]
Test Case: 174 | Input/Output: [(31 31 31 31) 31]
Test Case: 175 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 176 | Input/Output: [(35 35 35 35) 35]
Test Case: 177 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 178 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 179 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 180 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 181 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 182 | Input/Output: [(64 64 64 64) 64]
Test Case: 183 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 184 | Input/Output: [(95 95 95 95) 95]
Test Case: 185 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 186 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 187 | Input/Output: [(37 37 37 37) 37]
Test Case: 188 | Input/Output: [(88 88 88 88) 88]
Test Case: 189 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 190 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 191 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 192 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 193 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 194 | Input/Output: [(10 10 10 10) 10]
Test Case: 195 | Input/Output: [(87 87 87 87) 87]
Test Case: 196 | Input/Output: [(70 70 70 70) 70]
Test Case: 197 | Input/Output: [(3 3 3 3) 3]
Test Case: 198 | Input/Output: [(18 18 18 18) 18]
Test Case: 199 | Input/Output: [(58 58 58 58) 58]
Test Case: 200 | Input/Output: [(34 82 40 37) 34]
Test Case: 201 | Input/Output: [(21 80 94 0) 0]
Test Case: 202 | Input/Output: [(61 50 96 16) 16]
Test Case: 203 | Input/Output: [(44 82 89 65) 44]
Test Case: 204 | Input/Output: [(14 1 63 57) 1]
Test Case: 205 | Input/Output: [(23 68 36 15) 15]
Test Case: 206 | Input/Output: [(16 26 64 55) 16]
Test Case: 207 | Input/Output: [(50 90 69 69) 50]
Test Case: 208 | Input/Output: [(10 82 14 74) 10]
Test Case: 209 | Input/Output: [(80 89 22 75) 22]
Test Case: 210 | Input/Output: [(31 92 48 33) 31]
Test Case: 211 | Input/Output: [(99 20 100 36) 20]
Test Case: 212 | Input/Output: [(6 59 3 50) 3]
Test Case: 213 | Input/Output: [(7 76 12 73) 7]
Test Case: 214 | Input/Output: [(46 78 67 76) 46]
Test Case: 215 | Input/Output: [(8 39 41 24) 8]
Test Case: 216 | Input/Output: [(26 5 21 86) 5]
Test Case: 217 | Input/Output: [(63 47 78 17) 17]
Test Case: 218 | Input/Output: [(80 73 52 31) 31]
Test Case: 219 | Input/Output: [(1 80 96 7) 1]
Test Case: 220 | Input/Output: [(50 52 22 43) 22]
Test Case: 221 | Input/Output: [(98 51 55 60) 51]
Test Case: 222 | Input/Output: [(64 48 64 58) 48]
Test Case: 223 | Input/Output: [(100 38 18 23) 18]
Test Case: 224 | Input/Output: [(38 96 94 4) 4]
Test Case: 225 | Input/Output: [(76 34 100 98) 34]
Test Case: 226 | Input/Output: [(88 51 20 81) 20]
Test Case: 227 | Input/Output: [(35 94 59 60) 35]
Test Case: 228 | Input/Output: [(8 95 77 13) 8]
Test Case: 229 | Input/Output: [(96 92 96 26) 26]
Test Case: 230 | Input/Output: [(78 4 59 36) 4]
Test Case: 231 | Input/Output: [(75 83 13 12) 12]
Test Case: 232 | Input/Output: [(55 79 43 32) 32]
Test Case: 233 | Input/Output: [(34 15 59 23) 15]
Test Case: 234 | Input/Output: [(52 17 70 82) 17]
Test Case: 235 | Input/Output: [(76 86 0 82) 0]
Test Case: 236 | Input/Output: [(89 11 36 35) 11]
Test Case: 237 | Input/Output: [(75 60 59 21) 21]
Test Case: 238 | Input/Output: [(100 65 41 35) 35]
Test Case: 239 | Input/Output: [(46 5 0 96) 0]
Test Case: 240 | Input/Output: [(69 34 11 34) 11]
Test Case: 241 | Input/Output: [(65 58 34 96) 34]
Test Case: 242 | Input/Output: [(34 81 65 34) 34]
Test Case: 243 | Input/Output: [(29 95 25 76) 25]
Test Case: 244 | Input/Output: [(79 55 59 100) 55]
Test Case: 245 | Input/Output: [(76 41 39 85) 39]
Test Case: 246 | Input/Output: [(33 11 33 34) 11]
Test Case: 247 | Input/Output: [(8 71 93 85) 8]
Test Case: 248 | Input/Output: [(69 29 94 14) 14]
Test Case: 249 | Input/Output: [(29 75 79 21) 21]
Test Case: 250 | Input/Output: [(82 69 43 87) 43]
Test Case: 251 | Input/Output: [(7 73 54 24) 7]
Test Case: 252 | Input/Output: [(16 6 48 27) 6]
Test Case: 253 | Input/Output: [(30 32 77 77) 30]
Test Case: 254 | Input/Output: [(92 7 27 22) 7]
Test Case: 255 | Input/Output: [(49 68 7 2) 2]
Test Case: 256 | Input/Output: [(32 30 18 98) 18]
Test Case: 257 | Input/Output: [(33 60 44 45) 33]
Test Case: 258 | Input/Output: [(93 6 10 25) 6]
Test Case: 259 | Input/Output: [(81 86 48 24) 24]
Test Case: 260 | Input/Output: [(88 86 92 77) 77]
Test Case: 261 | Input/Output: [(1 12 64 43) 1]
Test Case: 262 | Input/Output: [(49 79 50 3) 3]
Test Case: 263 | Input/Output: [(53 85 18 7) 7]
Test Case: 264 | Input/Output: [(68 44 48 55) 44]
Test Case: 265 | Input/Output: [(42 3 31 96) 3]
Test Case: 266 | Input/Output: [(78 7 71 37) 7]
Test Case: 267 | Input/Output: [(95 93 9 5) 5]
Test Case: 268 | Input/Output: [(2 100 20 0) 0]
Test Case: 269 | Input/Output: [(97 98 71 1) 1]
Test Case: 270 | Input/Output: [(34 60 25 26) 25]
Test Case: 271 | Input/Output: [(25 48 80 34) 25]
Test Case: 272 | Input/Output: [(72 35 48 46) 35]
Test Case: 273 | Input/Output: [(71 55 31 57) 31]
Test Case: 274 | Input/Output: [(7 4 81 84) 4]
Test Case: 275 | Input/Output: [(37 98 58 42) 37]
Test Case: 276 | Input/Output: [(100 55 76 54) 54]
Test Case: 277 | Input/Output: [(92 96 92 51) 51]
Test Case: 278 | Input/Output: [(61 53 8 26) 8]
Test Case: 279 | Input/Output: [(97 55 73 31) 31]
Test Case: 280 | Input/Output: [(17 13 48 77) 13]
Test Case: 281 | Input/Output: [(32 47 10 89) 10]
Test Case: 282 | Input/Output: [(13 57 39 43) 13]
Test Case: 283 | Input/Output: [(80 36 50 87) 36]
Test Case: 284 | Input/Output: [(60 72 19 48) 19]
Test Case: 285 | Input/Output: [(2 41 98 32) 2]
Test Case: 286 | Input/Output: [(1 33 5 56) 1]
Test Case: 287 | Input/Output: [(93 41 41 14) 14]
Test Case: 288 | Input/Output: [(30 69 77 13) 13]
Test Case: 289 | Input/Output: [(11 23 53 19) 11]
Test Case: 290 | Input/Output: [(26 62 70 77) 26]
Test Case: 291 | Input/Output: [(42 36 83 78) 36]
Test Case: 292 | Input/Output: [(17 7 1 7) 1]
Test Case: 293 | Input/Output: [(26 9 46 73) 9]
Test Case: 294 | Input/Output: [(47 5 63 33) 5]
Test Case: 295 | Input/Output: [(33 47 15 30) 15]
Test Case: 296 | Input/Output: [(90 87 7 19) 7]
Test Case: 297 | Input/Output: [(13 6 66 79) 6]
Test Case: 298 | Input/Output: [(38 22 63 18) 18]
Test Case: 299 | Input/Output: [(26 23 73 75) 23]
Test Case: 300 | Input/Output: [(70 80 96 89) 70]
Test Case: 301 | Input/Output: [(71 31 56 28) 28]
Test Case: 302 | Input/Output: [(65 53 41 25) 25]
Test Case: 303 | Input/Output: [(57 50 13 88) 13]
Test Case: 304 | Input/Output: [(0 10 37 50) 0]
Test Case: 305 | Input/Output: [(45 82 26 36) 26]
Test Case: 306 | Input/Output: [(1 88 20 54) 1]
Test Case: 307 | Input/Output: [(60 62 100 6) 6]
Test Case: 308 | Input/Output: [(21 59 63 30) 21]
Test Case: 309 | Input/Output: [(19 23 79 12) 12]
Test Case: 310 | Input/Output: [(56 42 19 92) 19]
Test Case: 311 | Input/Output: [(58 86 95 83) 58]
Test Case: 312 | Input/Output: [(15 69 41 1) 1]
Test Case: 313 | Input/Output: [(87 93 19 60) 19]
Test Case: 314 | Input/Output: [(53 13 79 94) 13]
Test Case: 315 | Input/Output: [(65 90 64 9) 9]
Test Case: 316 | Input/Output: [(8 45 87 60) 8]
Test Case: 317 | Input/Output: [(2 50 49 12) 2]
Test Case: 318 | Input/Output: [(58 5 22 51) 5]
Test Case: 319 | Input/Output: [(20 18 42 59) 18]
Test Case: 320 | Input/Output: [(17 50 51 72) 17]
Test Case: 321 | Input/Output: [(31 73 31 100) 31]
Test Case: 322 | Input/Output: [(23 85 89 72) 23]
Test Case: 323 | Input/Output: [(32 37 66 69) 32]
Test Case: 324 | Input/Output: [(46 85 68 98) 46]
Test Case: 325 | Input/Output: [(29 25 5 2) 2]
Test Case: 326 | Input/Output: [(0 81 77 22) 0]
Test Case: 327 | Input/Output: [(38 51 99 17) 17]
Test Case: 328 | Input/Output: [(21 48 58 0) 0]
Test Case: 329 | Input/Output: [(52 22 8 3) 3]
Test Case: 330 | Input/Output: [(84 13 41 78) 13]
Test Case: 331 | Input/Output: [(40 9 60 64) 9]
Test Case: 332 | Input/Output: [(40 7 51 25) 7]
Test Case: 333 | Input/Output: [(24 1 51 31) 1]
Test Case: 334 | Input/Output: [(15 87 99 39) 15]
Test Case: 335 | Input/Output: [(58 30 27 47) 27]
Test Case: 336 | Input/Output: [(62 46 22 34) 22]
Test Case: 337 | Input/Output: [(49 82 100 97) 49]
Test Case: 338 | Input/Output: [(79 23 40 100) 23]
Test Case: 339 | Input/Output: [(27 87 37 33) 27]
Test Case: 340 | Input/Output: [(29 84 99 47) 29]
Test Case: 341 | Input/Output: [(23 35 56 76) 23]
Test Case: 342 | Input/Output: [(85 71 82 8) 8]
Test Case: 343 | Input/Output: [(93 66 52 46) 46]
Test Case: 344 | Input/Output: [(65 31 37 35) 31]
Test Case: 345 | Input/Output: [(51 45 90 85) 45]
Test Case: 346 | Input/Output: [(94 50 65 47) 47]
Test Case: 347 | Input/Output: [(22 36 24 73) 22]
Test Case: 348 | Input/Output: [(28 34 86 13) 13]
Test Case: 349 | Input/Output: [(34 71 3 83) 3]
Test Case: 350 | Input/Output: [(46 17 93 77) 17]
Test Case: 351 | Input/Output: [(80 50 9 26) 9]
Test Case: 352 | Input/Output: [(27 89 16 19) 16]
Test Case: 353 | Input/Output: [(0 65 70 40) 0]
Test Case: 354 | Input/Output: [(91 9 40 69) 9]
Test Case: 355 | Input/Output: [(100 5 74 45) 5]
Test Case: 356 | Input/Output: [(68 57 14 81) 14]
Test Case: 357 | Input/Output: [(91 8 54 76) 8]
Test Case: 358 | Input/Output: [(8 83 68 31) 8]
Test Case: 359 | Input/Output: [(88 54 79 95) 54]
Test Case: 360 | Input/Output: [(65 77 40 14) 14]
Test Case: 361 | Input/Output: [(38 8 22 44) 8]
Test Case: 362 | Input/Output: [(47 87 27 73) 27]
Test Case: 363 | Input/Output: [(92 37 62 66) 37]
Test Case: 364 | Input/Output: [(27 59 50 35) 27]
Test Case: 365 | Input/Output: [(50 83 4 86) 4]
Test Case: 366 | Input/Output: [(67 97 54 45) 45]
Test Case: 367 | Input/Output: [(97 78 0 100) 0]
Test Case: 368 | Input/Output: [(37 53 8 21) 8]
Test Case: 369 | Input/Output: [(61 10 59 40) 10]
Test Case: 370 | Input/Output: [(7 45 82 41) 7]
Test Case: 371 | Input/Output: [(37 18 28 14) 14]
Test Case: 372 | Input/Output: [(21 25 5 8) 5]
Test Case: 373 | Input/Output: [(9 57 28 92) 9]
Test Case: 374 | Input/Output: [(86 81 12 47) 12]
Test Case: 375 | Input/Output: [(27 76 96 80) 27]
Test Case: 376 | Input/Output: [(23 97 70 87) 23]
Test Case: 377 | Input/Output: [(45 67 33 33) 33]
Test Case: 378 | Input/Output: [(66 16 51 77) 16]
Test Case: 379 | Input/Output: [(21 34 38 64) 21]
Test Case: 380 | Input/Output: [(70 0 25 58) 0]
Test Case: 381 | Input/Output: [(6 73 94 42) 6]
Test Case: 382 | Input/Output: [(22 33 80 94) 22]
Test Case: 383 | Input/Output: [(53 71 3 64) 3]
Test Case: 384 | Input/Output: [(47 84 12 1) 1]
Test Case: 385 | Input/Output: [(28 75 39 18) 18]
Test Case: 386 | Input/Output: [(29 65 50 81) 29]
Test Case: 387 | Input/Output: [(76 29 69 51) 29]
Test Case: 388 | Input/Output: [(82 8 57 0) 0]
Test Case: 389 | Input/Output: [(13 35 88 5) 5]
Test Case: 390 | Input/Output: [(34 16 53 43) 16]
Test Case: 391 | Input/Output: [(15 80 80 0) 0]
Test Case: 392 | Input/Output: [(7 65 64 54) 7]
Test Case: 393 | Input/Output: [(8 96 6 36) 6]
Test Case: 394 | Input/Output: [(71 31 9 10) 9]
Test Case: 395 | Input/Output: [(32 17 79 71) 17]
Test Case: 396 | Input/Output: [(2 77 39 41) 2]
Test Case: 397 | Input/Output: [(94 51 45 70) 45]
Test Case: 398 | Input/Output: [(84 47 36 65) 36]
Test Case: 399 | Input/Output: [(45 42 91 29) 29]
Test Case: 400 | Input/Output: [(-35 27 -13 27) -35]
Test Case: 401 | Input/Output: [(-7 73 91 -70) -70]
Test Case: 402 | Input/Output: [(-18 20 -81 -66) -81]
Test Case: 403 | Input/Output: [(-93 13 -58 22) -93]
Test Case: 404 | Input/Output: [(-59 2 -81 88) -81]
Test Case: 405 | Input/Output: [(82 58 -86 66) -86]
Test Case: 406 | Input/Output: [(43 -92 -68 79) -92]
Test Case: 407 | Input/Output: [(-55 100 -45 52) -55]
Test Case: 408 | Input/Output: [(43 63 -10 53) -10]
Test Case: 409 | Input/Output: [(-74 11 95 -23) -74]
Test Case: 410 | Input/Output: [(-6 91 14 -9) -9]
Test Case: 411 | Input/Output: [(5 -41 -1 14) -41]
Test Case: 412 | Input/Output: [(-37 -84 62 83) -84]
Test Case: 413 | Input/Output: [(-28 57 -76 84) -76]
Test Case: 414 | Input/Output: [(48 58 -75 9) -75]
Test Case: 415 | Input/Output: [(-13 -12 63 -76) -76]
Test Case: 416 | Input/Output: [(-71 -33 68 -39) -71]
Test Case: 417 | Input/Output: [(-45 51 73 -3) -45]
Test Case: 418 | Input/Output: [(55 -35 0 -16) -35]
Test Case: 419 | Input/Output: [(-4 53 43 31) -4]
Test Case: 420 | Input/Output: [(16 -89 -54 -27) -89]
Test Case: 421 | Input/Output: [(62 56 -65 -73) -73]
Test Case: 422 | Input/Output: [(-83 -52 47 -63) -83]
Test Case: 423 | Input/Output: [(-22 -51 -41 48) -51]
Test Case: 424 | Input/Output: [(-47 -41 40 37) -47]
Test Case: 425 | Input/Output: [(-44 -67 60 22) -67]
Test Case: 426 | Input/Output: [(-81 -25 -97 2) -97]
Test Case: 427 | Input/Output: [(-84 -31 -29 -45) -84]
Test Case: 428 | Input/Output: [(-39 -50 63 -67) -67]
Test Case: 429 | Input/Output: [(-16 -98 9 -57) -98]
Test Case: 430 | Input/Output: [(7 -90 -41 -37) -90]
Test Case: 431 | Input/Output: [(16 50 -71 -86) -86]
Test Case: 432 | Input/Output: [(-29 26 -68 23) -68]
Test Case: 433 | Input/Output: [(48 34 21 -66) -66]
Test Case: 434 | Input/Output: [(-54 6 -74 -54) -74]
Test Case: 435 | Input/Output: [(51 43 19 -27) -27]
Test Case: 436 | Input/Output: [(1 -25 76 71) -25]
Test Case: 437 | Input/Output: [(-68 -83 63 -48) -83]
Test Case: 438 | Input/Output: [(23 17 69 11) 11]
Test Case: 439 | Input/Output: [(43 84 -59 -51) -59]
Test Case: 440 | Input/Output: [(-74 95 -44 -60) -74]
Test Case: 441 | Input/Output: [(-18 -89 -91 -62) -91]
Test Case: 442 | Input/Output: [(-94 23 -72 16) -94]
Test Case: 443 | Input/Output: [(-28 99 1 -39) -39]
Test Case: 444 | Input/Output: [(47 -50 44 34) -50]
Test Case: 445 | Input/Output: [(4 -38 24 73) -38]
Test Case: 446 | Input/Output: [(69 -10 -73 -91) -91]
Test Case: 447 | Input/Output: [(42 -50 3 -68) -68]
Test Case: 448 | Input/Output: [(27 26 67 -2) -2]
Test Case: 449 | Input/Output: [(-56 5 -39 -80) -80]
Test Case: 450 | Input/Output: [(-49 54 37 53) -49]
Test Case: 451 | Input/Output: [(91 -36 91 14) -36]
Test Case: 452 | Input/Output: [(45 -6 33 -14) -14]
Test Case: 453 | Input/Output: [(-91 -43 46 71) -91]
Test Case: 454 | Input/Output: [(9 60 57 0) 0]
Test Case: 455 | Input/Output: [(-76 32 98 89) -76]
Test Case: 456 | Input/Output: [(97 -59 -22 -22) -59]
Test Case: 457 | Input/Output: [(-91 8 18 92) -91]
Test Case: 458 | Input/Output: [(-66 12 -61 31) -66]
Test Case: 459 | Input/Output: [(56 57 -22 -81) -81]
Test Case: 460 | Input/Output: [(-70 61 13 64) -70]
Test Case: 461 | Input/Output: [(-48 -100 68 -93) -100]
Test Case: 462 | Input/Output: [(3 58 69 -85) -85]
Test Case: 463 | Input/Output: [(52 69 -25 -54) -54]
Test Case: 464 | Input/Output: [(-33 36 -55 95) -55]
Test Case: 465 | Input/Output: [(80 95 -12 -39) -39]
Test Case: 466 | Input/Output: [(88 84 -85 41) -85]
Test Case: 467 | Input/Output: [(82 7 87 -43) -43]
Test Case: 468 | Input/Output: [(-23 5 -63 25) -63]
Test Case: 469 | Input/Output: [(-63 -71 69 54) -71]
Test Case: 470 | Input/Output: [(-78 9 34 78) -78]
Test Case: 471 | Input/Output: [(63 -19 73 -68) -68]
Test Case: 472 | Input/Output: [(17 99 -11 -36) -36]
Test Case: 473 | Input/Output: [(-30 -60 -55 -20) -60]
Test Case: 474 | Input/Output: [(62 -97 -90 95) -97]
Test Case: 475 | Input/Output: [(-40 82 -20 -32) -40]
Test Case: 476 | Input/Output: [(52 -81 -44 16) -81]
Test Case: 477 | Input/Output: [(-84 -5 -28 51) -84]
Test Case: 478 | Input/Output: [(8 -100 -4 98) -100]
Test Case: 479 | Input/Output: [(66 68 91 81) 66]
Test Case: 480 | Input/Output: [(68 -54 -63 -38) -63]
Test Case: 481 | Input/Output: [(28 66 -22 -50) -50]
Test Case: 482 | Input/Output: [(66 -93 -8 4) -93]
Test Case: 483 | Input/Output: [(-76 21 -60 -90) -90]
Test Case: 484 | Input/Output: [(0 73 93 27) 0]
Test Case: 485 | Input/Output: [(83 -8 -18 -93) -93]
Test Case: 486 | Input/Output: [(41 54 -71 36) -71]
Test Case: 487 | Input/Output: [(-65 -66 -39 -46) -66]
Test Case: 488 | Input/Output: [(-85 11 -19 -57) -85]
Test Case: 489 | Input/Output: [(-76 -53 -78 66) -78]
Test Case: 490 | Input/Output: [(61 76 94 -19) -19]
Test Case: 491 | Input/Output: [(-73 -93 69 -6) -93]
Test Case: 492 | Input/Output: [(45 55 90 38) 38]
Test Case: 493 | Input/Output: [(-86 -64 35 72) -86]
Test Case: 494 | Input/Output: [(-97 -37 -90 49) -97]
Test Case: 495 | Input/Output: [(11 -45 -30 -65) -65]
Test Case: 496 | Input/Output: [(90 -100 1 37) -100]
Test Case: 497 | Input/Output: [(-70 -1 45 52) -70]
Test Case: 498 | Input/Output: [(-63 -40 34 -63) -63]
Test Case: 499 | Input/Output: [(22 37 67 48) 22]
Test Case: 500 | Input/Output: [(-33 34 35 -7) -33]
Test Case: 501 | Input/Output: [(-25 -13 18 -74) -74]
Test Case: 502 | Input/Output: [(48 -26 -20 -5) -26]
Test Case: 503 | Input/Output: [(-67 79 41 47) -67]
Test Case: 504 | Input/Output: [(-89 31 96 56) -89]
Test Case: 505 | Input/Output: [(-51 71 35 -12) -51]
Test Case: 506 | Input/Output: [(45 -81 -87 59) -87]
Test Case: 507 | Input/Output: [(-87 -29 -60 36) -87]
Test Case: 508 | Input/Output: [(-36 52 -34 -69) -69]
Test Case: 509 | Input/Output: [(-29 -80 -27 -28) -80]
Test Case: 510 | Input/Output: [(-3 36 -98 -91) -98]
Test Case: 511 | Input/Output: [(50 26 96 -32) -32]
Test Case: 512 | Input/Output: [(25 -47 -2 -65) -65]
Test Case: 513 | Input/Output: [(78 -25 -1 44) -25]
Test Case: 514 | Input/Output: [(-14 51 -43 -80) -80]
Test Case: 515 | Input/Output: [(-75 71 -16 -49) -75]
Test Case: 516 | Input/Output: [(48 -15 -11 96) -15]
Test Case: 517 | Input/Output: [(-83 -70 -96 37) -96]
Test Case: 518 | Input/Output: [(-50 -58 -31 68) -58]
Test Case: 519 | Input/Output: [(37 30 65 64) 30]
Test Case: 520 | Input/Output: [(63 -69 -75 23) -75]
Test Case: 521 | Input/Output: [(13 41 1 45) 1]
Test Case: 522 | Input/Output: [(17 43 7 40) 7]
Test Case: 523 | Input/Output: [(-50 13 -13 54) -50]
Test Case: 524 | Input/Output: [(7 -92 -30 -61) -92]
Test Case: 525 | Input/Output: [(-6 52 98 -93) -93]
Test Case: 526 | Input/Output: [(21 -20 60 42) -20]
Test Case: 527 | Input/Output: [(11 16 47 -4) -4]
Test Case: 528 | Input/Output: [(-91 -87 64 -49) -91]
Test Case: 529 | Input/Output: [(32 -70 -99 -87) -99]
Test Case: 530 | Input/Output: [(-22 44 10 -57) -57]
Test Case: 531 | Input/Output: [(-41 -55 -44 79) -55]
Test Case: 532 | Input/Output: [(-84 -91 -29 2) -91]
Test Case: 533 | Input/Output: [(51 -19 68 -17) -19]
Test Case: 534 | Input/Output: [(59 79 -59 -47) -59]
Test Case: 535 | Input/Output: [(-88 79 -13 81) -88]
Test Case: 536 | Input/Output: [(-80 44 4 3) -80]
Test Case: 537 | Input/Output: [(95 -16 82 -27) -27]
Test Case: 538 | Input/Output: [(31 79 50 -78) -78]
Test Case: 539 | Input/Output: [(69 -66 18 -95) -95]
Test Case: 540 | Input/Output: [(17 -56 38 -59) -59]
Test Case: 541 | Input/Output: [(10 1 -1 31) -1]
Test Case: 542 | Input/Output: [(-81 -1 69 45) -81]
Test Case: 543 | Input/Output: [(-38 -87 -1 -10) -87]
Test Case: 544 | Input/Output: [(51 -65 24 100) -65]
Test Case: 545 | Input/Output: [(81 -41 98 84) -41]
Test Case: 546 | Input/Output: [(-25 40 72 30) -25]
Test Case: 547 | Input/Output: [(55 14 22 -34) -34]
Test Case: 548 | Input/Output: [(68 -32 -23 37) -32]
Test Case: 549 | Input/Output: [(88 63 92 6) 6]
Test Case: 550 | Input/Output: [(49 -52 20 17) -52]
Test Case: 551 | Input/Output: [(-2 -86 96 8) -86]
Test Case: 552 | Input/Output: [(36 93 81 68) 36]
Test Case: 553 | Input/Output: [(-17 66 11 -73) -73]
Test Case: 554 | Input/Output: [(73 40 -99 64) -99]
Test Case: 555 | Input/Output: [(28 72 56 -10) -10]
Test Case: 556 | Input/Output: [(77 -4 -95 83) -95]
Test Case: 557 | Input/Output: [(10 -35 74 -55) -55]
Test Case: 558 | Input/Output: [(84 18 65 3) 3]
Test Case: 559 | Input/Output: [(6 -9 30 70) -9]
Test Case: 560 | Input/Output: [(97 -44 -94 -15) -94]
Test Case: 561 | Input/Output: [(29 25 -5 31) -5]
Test Case: 562 | Input/Output: [(64 50 91 -54) -54]
Test Case: 563 | Input/Output: [(-4 -12 -69 88) -69]
Test Case: 564 | Input/Output: [(1 -92 -78 1) -92]
Test Case: 565 | Input/Output: [(8 2 100 -77) -77]
Test Case: 566 | Input/Output: [(-87 -10 -6 -5) -87]
Test Case: 567 | Input/Output: [(63 1 -26 -92) -92]
Test Case: 568 | Input/Output: [(29 55 -27 -34) -34]
Test Case: 569 | Input/Output: [(32 5 32 -10) -10]
Test Case: 570 | Input/Output: [(55 -15 42 44) -15]
Test Case: 571 | Input/Output: [(32 -65 47 -60) -65]
Test Case: 572 | Input/Output: [(-20 39 -29 18) -29]
Test Case: 573 | Input/Output: [(-46 49 33 64) -46]
Test Case: 574 | Input/Output: [(-72 42 82 -45) -72]
Test Case: 575 | Input/Output: [(-63 -28 7 70) -63]
Test Case: 576 | Input/Output: [(33 11 -76 56) -76]
Test Case: 577 | Input/Output: [(-96 -21 -70 51) -96]
Test Case: 578 | Input/Output: [(85 32 -80 72) -80]
Test Case: 579 | Input/Output: [(89 22 52 32) 22]
Test Case: 580 | Input/Output: [(-19 68 -89 -12) -89]
Test Case: 581 | Input/Output: [(6 -8 40 53) -8]
Test Case: 582 | Input/Output: [(47 45 -45 1) -45]
Test Case: 583 | Input/Output: [(22 -90 -66 -9) -90]
Test Case: 584 | Input/Output: [(46 54 74 45) 45]
Test Case: 585 | Input/Output: [(19 -11 51 35) -11]
Test Case: 586 | Input/Output: [(60 84 50 26) 26]
Test Case: 587 | Input/Output: [(-43 0 -47 -39) -47]
Test Case: 588 | Input/Output: [(81 -46 63 48) -46]
Test Case: 589 | Input/Output: [(21 -28 -100 78) -100]
Test Case: 590 | Input/Output: [(23 56 -28 58) -28]
Test Case: 591 | Input/Output: [(28 12 -81 34) -81]
Test Case: 592 | Input/Output: [(14 61 47 -47) -47]
Test Case: 593 | Input/Output: [(-76 80 22 85) -76]
Test Case: 594 | Input/Output: [(-89 -55 -5 20) -89]
Test Case: 595 | Input/Output: [(89 13 -28 -70) -70]
Test Case: 596 | Input/Output: [(98 98 -90 -79) -90]
Test Case: 597 | Input/Output: [(11 37 13 -26) -26]
Test Case: 598 | Input/Output: [(-64 34 22 36) -64]
Test Case: 599 | Input/Output: [(-24 66 80 99) -24]
Test Case: 600 | Input/Output: [(-24 -86 -45 21) -86]
Test Case: 601 | Input/Output: [(-96 4 28 57) -96]
Test Case: 602 | Input/Output: [(-94 -18 53 -17) -94]
Test Case: 603 | Input/Output: [(-19 -17 75 -12) -19]
Test Case: 604 | Input/Output: [(-64 -11 70 -56) -64]
Test Case: 605 | Input/Output: [(64 74 66 -74) -74]
Test Case: 606 | Input/Output: [(15 82 64 85) 15]
Test Case: 607 | Input/Output: [(55 -59 78 -93) -93]
Test Case: 608 | Input/Output: [(12 -90 -69 10) -90]
Test Case: 609 | Input/Output: [(-63 53 -2 -6) -63]
Test Case: 610 | Input/Output: [(-100 -33 60 4) -100]
Test Case: 611 | Input/Output: [(-81 31 -93 98) -93]
Test Case: 612 | Input/Output: [(98 -71 91 87) -71]
Test Case: 613 | Input/Output: [(-55 -74 -59 -76) -76]
Test Case: 614 | Input/Output: [(11 -34 94 19) -34]
Test Case: 615 | Input/Output: [(-14 19 29 -38) -38]
Test Case: 616 | Input/Output: [(70 38 66 92) 38]
Test Case: 617 | Input/Output: [(-81 45 46 52) -81]
Test Case: 618 | Input/Output: [(-91 -6 48 -10) -91]
Test Case: 619 | Input/Output: [(31 82 26 -7) -7]
Test Case: 620 | Input/Output: [(-2 20 87 48) -2]
Test Case: 621 | Input/Output: [(-23 69 57 30) -23]
Test Case: 622 | Input/Output: [(-65 48 -54 -35) -65]
Test Case: 623 | Input/Output: [(40 -39 -39 -32) -39]
Test Case: 624 | Input/Output: [(86 100 -81 -31) -81]
Test Case: 625 | Input/Output: [(81 74 52 42) 42]
Test Case: 626 | Input/Output: [(85 9 15 -30) -30]
Test Case: 627 | Input/Output: [(93 29 -92 -93) -93]
Test Case: 628 | Input/Output: [(-36 93 97 -79) -79]
Test Case: 629 | Input/Output: [(55 82 -48 47) -48]
Test Case: 630 | Input/Output: [(29 -52 75 85) -52]
Test Case: 631 | Input/Output: [(-69 63 -38 -13) -69]
Test Case: 632 | Input/Output: [(90 -72 69 -86) -86]
Test Case: 633 | Input/Output: [(72 -85 -98 70) -98]
Test Case: 634 | Input/Output: [(-51 -73 39 -93) -93]
Test Case: 635 | Input/Output: [(32 73 58 -80) -80]
Test Case: 636 | Input/Output: [(-15 -88 -45 -2) -88]
Test Case: 637 | Input/Output: [(-39 54 53 59) -39]
Test Case: 638 | Input/Output: [(96 -97 -27 10) -97]
Test Case: 639 | Input/Output: [(17 8 93 26) 8]
Test Case: 640 | Input/Output: [(37 36 100 -21) -21]
Test Case: 641 | Input/Output: [(18 -50 -43 -93) -93]
Test Case: 642 | Input/Output: [(98 14 93 -11) -11]
Test Case: 643 | Input/Output: [(22 -91 82 -98) -98]
Test Case: 644 | Input/Output: [(-59 31 33 43) -59]
Test Case: 645 | Input/Output: [(-16 -8 -29 22) -29]
Test Case: 646 | Input/Output: [(-36 33 -8 5) -36]
Test Case: 647 | Input/Output: [(-6 -10 -36 96) -36]
Test Case: 648 | Input/Output: [(-11 4 -53 -1) -53]
Test Case: 649 | Input/Output: [(44 29 -31 -6) -31]
Test Case: 650 | Input/Output: [(73 -15 -54 -33) -54]
Test Case: 651 | Input/Output: [(-48 3 -5 -23) -48]
Test Case: 652 | Input/Output: [(38 -56 7 92) -56]
Test Case: 653 | Input/Output: [(-34 72 99 12) -34]
Test Case: 654 | Input/Output: [(66 -40 36 -52) -52]
Test Case: 655 | Input/Output: [(15 1 62 84) 1]
Test Case: 656 | Input/Output: [(-20 -23 -89 -55) -89]
Test Case: 657 | Input/Output: [(-87 -26 19 -87) -87]
Test Case: 658 | Input/Output: [(-65 -49 16 68) -65]
Test Case: 659 | Input/Output: [(-41 -63 84 90) -63]
Test Case: 660 | Input/Output: [(-55 67 -17 59) -55]
Test Case: 661 | Input/Output: [(14 75 70 48) 14]
Test Case: 662 | Input/Output: [(-64 -39 -52 33) -64]
Test Case: 663 | Input/Output: [(-91 8 -81 -22) -91]
Test Case: 664 | Input/Output: [(-27 -28 -15 71) -28]
Test Case: 665 | Input/Output: [(96 49 28 80) 28]
Test Case: 666 | Input/Output: [(64 -60 41 80) -60]
Test Case: 667 | Input/Output: [(-76 -51 68 48) -76]
Test Case: 668 | Input/Output: [(61 -44 30 15) -44]
Test Case: 669 | Input/Output: [(-35 -4 54 -89) -89]
Test Case: 670 | Input/Output: [(100 91 -90 59) -90]
Test Case: 671 | Input/Output: [(-48 -47 62 -32) -48]
Test Case: 672 | Input/Output: [(48 13 43 16) 13]
Test Case: 673 | Input/Output: [(80 -20 -54 86) -54]
Test Case: 674 | Input/Output: [(-97 62 -53 68) -97]
Test Case: 675 | Input/Output: [(-5 -42 -82 -28) -82]
Test Case: 676 | Input/Output: [(-96 -62 79 99) -96]
Test Case: 677 | Input/Output: [(30 3 82 -41) -41]
Test Case: 678 | Input/Output: [(25 -28 44 73) -28]
Test Case: 679 | Input/Output: [(71 -79 -53 -65) -79]
Test Case: 680 | Input/Output: [(-91 7 -90 44) -91]
Test Case: 681 | Input/Output: [(88 56 -39 69) -39]
Test Case: 682 | Input/Output: [(-19 -25 47 52) -25]
Test Case: 683 | Input/Output: [(60 11 42 -38) -38]
Test Case: 684 | Input/Output: [(-90 -4 92 -89) -90]
Test Case: 685 | Input/Output: [(-70 63 -44 -42) -70]
Test Case: 686 | Input/Output: [(-67 49 50 12) -67]
Test Case: 687 | Input/Output: [(1 92 85 -77) -77]
Test Case: 688 | Input/Output: [(-79 -60 -56 -48) -79]
Test Case: 689 | Input/Output: [(42 -18 69 -1) -18]
Test Case: 690 | Input/Output: [(32 11 80 65) 11]
Test Case: 691 | Input/Output: [(-99 75 -100 65) -100]
Test Case: 692 | Input/Output: [(4 -22 63 29) -22]
Test Case: 693 | Input/Output: [(-30 50 52 -40) -40]
Test Case: 694 | Input/Output: [(11 -83 7 -47) -83]
Test Case: 695 | Input/Output: [(54 -82 -67 97) -82]
Test Case: 696 | Input/Output: [(-85 41 -22 -51) -85]
Test Case: 697 | Input/Output: [(-44 -76 -94 16) -94]
Test Case: 698 | Input/Output: [(-94 -40 65 -89) -94]
Test Case: 699 | Input/Output: [(-29 7 -69 -16) -69]
Test Case: 700 | Input/Output: [(82 -93 32 22) -93]
Test Case: 701 | Input/Output: [(59 -23 -6 79) -23]
Test Case: 702 | Input/Output: [(-66 78 47 56) -66]
Test Case: 703 | Input/Output: [(96 -67 -6 -74) -74]
Test Case: 704 | Input/Output: [(-16 22 6 -66) -66]
Test Case: 705 | Input/Output: [(73 -65 61 -39) -65]
Test Case: 706 | Input/Output: [(5 -18 6 -5) -18]
Test Case: 707 | Input/Output: [(-11 -64 -75 34) -75]
Test Case: 708 | Input/Output: [(-8 24 -74 -86) -86]
Test Case: 709 | Input/Output: [(-77 23 84 30) -77]
Test Case: 710 | Input/Output: [(-33 8 -35 -77) -77]
Test Case: 711 | Input/Output: [(2 -72 -56 -34) -72]
Test Case: 712 | Input/Output: [(-33 -98 75 85) -98]
Test Case: 713 | Input/Output: [(2 -34 92 47) -34]
Test Case: 714 | Input/Output: [(93 -66 -4 61) -66]
Test Case: 715 | Input/Output: [(22 42 72 56) 22]
Test Case: 716 | Input/Output: [(70 15 -89 -29) -89]
Test Case: 717 | Input/Output: [(67 -41 -19 -20) -41]
Test Case: 718 | Input/Output: [(24 64 -92 63) -92]
Test Case: 719 | Input/Output: [(34 31 79 -28) -28]
Test Case: 720 | Input/Output: [(-58 -5 17 87) -58]
Test Case: 721 | Input/Output: [(98 48 47 -17) -17]
Test Case: 722 | Input/Output: [(16 -3 -57 69) -57]
Test Case: 723 | Input/Output: [(-94 -94 40 8) -94]
Test Case: 724 | Input/Output: [(0 -84 17 5) -84]
Test Case: 725 | Input/Output: [(-54 5 -26 54) -54]
Test Case: 726 | Input/Output: [(68 -31 25 38) -31]
Test Case: 727 | Input/Output: [(-36 -84 12 50) -84]
Test Case: 728 | Input/Output: [(-55 -7 50 -77) -77]
Test Case: 729 | Input/Output: [(97 -63 33 20) -63]
Test Case: 730 | Input/Output: [(76 21 59 -95) -95]
Test Case: 731 | Input/Output: [(-12 23 -88 -34) -88]
Test Case: 732 | Input/Output: [(81 60 -76 -22) -76]
Test Case: 733 | Input/Output: [(21 97 -61 -90) -90]
Test Case: 734 | Input/Output: [(37 -93 73 -54) -93]
Test Case: 735 | Input/Output: [(-47 36 74 -91) -91]
Test Case: 736 | Input/Output: [(-34 53 -10 -8) -34]
Test Case: 737 | Input/Output: [(8 -74 32 49) -74]
Test Case: 738 | Input/Output: [(-51 56 -14 33) -51]
Test Case: 739 | Input/Output: [(-80 57 28 24) -80]
Test Case: 740 | Input/Output: [(-35 -53 31 -46) -53]
Test Case: 741 | Input/Output: [(-19 32 -46 12) -46]
Test Case: 742 | Input/Output: [(-55 -60 -11 60) -60]
Test Case: 743 | Input/Output: [(-32 -60 30 -57) -60]
Test Case: 744 | Input/Output: [(84 -24 -54 83) -54]
Test Case: 745 | Input/Output: [(5 -76 -32 -1) -76]
Test Case: 746 | Input/Output: [(49 94 37 91) 37]
Test Case: 747 | Input/Output: [(-37 -41 -19 -82) -82]
Test Case: 748 | Input/Output: [(-41 19 -28 -82) -82]
Test Case: 749 | Input/Output: [(-88 -93 23 -74) -93]
Test Case: 750 | Input/Output: [(39 -4 -16 69) -16]
Test Case: 751 | Input/Output: [(-16 5 -65 -21) -65]
Test Case: 752 | Input/Output: [(-23 64 -9 91) -23]
Test Case: 753 | Input/Output: [(59 -70 87 -18) -70]
Test Case: 754 | Input/Output: [(-8 5 49 -93) -93]
Test Case: 755 | Input/Output: [(-72 84 83 27) -72]
Test Case: 756 | Input/Output: [(46 -38 -41 -21) -41]
Test Case: 757 | Input/Output: [(73 19 33 -74) -74]
Test Case: 758 | Input/Output: [(-48 -56 -42 -57) -57]
Test Case: 759 | Input/Output: [(-6 -34 -58 88) -58]
Test Case: 760 | Input/Output: [(67 28 75 -35) -35]
Test Case: 761 | Input/Output: [(-96 75 69 46) -96]
Test Case: 762 | Input/Output: [(30 -16 50 72) -16]
Test Case: 763 | Input/Output: [(-16 97 -26 -67) -67]
Test Case: 764 | Input/Output: [(58 -7 38 -5) -7]
Test Case: 765 | Input/Output: [(-58 26 56 78) -58]
Test Case: 766 | Input/Output: [(-63 -8 -82 38) -82]
Test Case: 767 | Input/Output: [(74 65 -71 -83) -83]
Test Case: 768 | Input/Output: [(94 -99 48 36) -99]
Test Case: 769 | Input/Output: [(-64 -31 40 -84) -84]
Test Case: 770 | Input/Output: [(-58 -46 38 -36) -58]
Test Case: 771 | Input/Output: [(72 13 -90 9) -90]
Test Case: 772 | Input/Output: [(-3 30 17 -22) -22]
Test Case: 773 | Input/Output: [(39 92 -70 35) -70]
Test Case: 774 | Input/Output: [(-66 -69 19 39) -69]
Test Case: 775 | Input/Output: [(-44 26 89 32) -44]
Test Case: 776 | Input/Output: [(36 -8 96 91) -8]
Test Case: 777 | Input/Output: [(-66 0 -85 94) -85]
Test Case: 778 | Input/Output: [(-24 4 93 -83) -83]
Test Case: 779 | Input/Output: [(19 55 -100 -82) -100]
Test Case: 780 | Input/Output: [(-6 -23 -24 -89) -89]
Test Case: 781 | Input/Output: [(92 -89 50 -27) -89]
Test Case: 782 | Input/Output: [(-27 43 12 6) -27]
Test Case: 783 | Input/Output: [(70 -12 91 48) -12]
Test Case: 784 | Input/Output: [(28 -11 88 3) -11]
Test Case: 785 | Input/Output: [(42 79 70 -52) -52]
Test Case: 786 | Input/Output: [(-32 -7 -36 -42) -42]
Test Case: 787 | Input/Output: [(-26 -57 42 48) -57]
Test Case: 788 | Input/Output: [(7 26 46 -39) -39]
Test Case: 789 | Input/Output: [(56 -22 48 -12) -22]
Test Case: 790 | Input/Output: [(-50 34 63 -59) -59]
Test Case: 791 | Input/Output: [(85 -33 -46 -62) -62]
Test Case: 792 | Input/Output: [(-56 53 -15 -12) -56]
Test Case: 793 | Input/Output: [(-76 75 -98 91) -98]
Test Case: 794 | Input/Output: [(33 79 -26 -20) -26]
Test Case: 795 | Input/Output: [(-95 -97 69 90) -97]
Test Case: 796 | Input/Output: [(1 -53 -24 52) -53]
Test Case: 797 | Input/Output: [(19 -99 -14 -32) -99]
Test Case: 798 | Input/Output: [(20 -86 -46 5) -86]
Test Case: 799 | Input/Output: [(-36 20 -32 85) -36]
Test Case: 800 | Input/Output: [(-7 -97 55 43) -97]
Test Case: 801 | Input/Output: [(-24 62 -41 -66) -66]
Test Case: 802 | Input/Output: [(-1 -12 100 3) -12]
Test Case: 803 | Input/Output: [(94 57 60 42) 42]
Test Case: 804 | Input/Output: [(12 19 84 -26) -26]
Test Case: 805 | Input/Output: [(-24 -14 -44 42) -44]
Test Case: 806 | Input/Output: [(95 -19 -54 -8) -54]
Test Case: 807 | Input/Output: [(-72 -90 -72 -15) -90]
Test Case: 808 | Input/Output: [(25 -53 -34 -23) -53]
Test Case: 809 | Input/Output: [(-19 40 87 91) -19]
Test Case: 810 | Input/Output: [(3 -27 -12 28) -27]
Test Case: 811 | Input/Output: [(-3 95 60 71) -3]
Test Case: 812 | Input/Output: [(0 -81 1 -5) -81]
Test Case: 813 | Input/Output: [(-9 33 -59 80) -59]
Test Case: 814 | Input/Output: [(-81 -75 -74 88) -81]
Test Case: 815 | Input/Output: [(77 -89 65 -10) -89]
Test Case: 816 | Input/Output: [(18 54 100 -69) -69]
Test Case: 817 | Input/Output: [(46 -28 80 -6) -28]
Test Case: 818 | Input/Output: [(18 19 3 -74) -74]
Test Case: 819 | Input/Output: [(-31 50 5 91) -31]
Test Case: 820 | Input/Output: [(-14 -90 2 20) -90]
Test Case: 821 | Input/Output: [(32 -46 -83 96) -83]
Test Case: 822 | Input/Output: [(-24 -62 54 71) -62]
Test Case: 823 | Input/Output: [(57 -91 -19 -48) -91]
Test Case: 824 | Input/Output: [(-85 -29 20 48) -85]
Test Case: 825 | Input/Output: [(57 96 97 38) 38]
Test Case: 826 | Input/Output: [(-65 -17 38 -44) -65]
Test Case: 827 | Input/Output: [(91 10 -56 20) -56]
Test Case: 828 | Input/Output: [(15 -83 69 61) -83]
Test Case: 829 | Input/Output: [(-96 46 -44 5) -96]
Test Case: 830 | Input/Output: [(-45 -81 99 -74) -81]
Test Case: 831 | Input/Output: [(-23 -39 11 34) -39]
Test Case: 832 | Input/Output: [(31 41 -56 89) -56]
Test Case: 833 | Input/Output: [(83 87 -9 -96) -96]
Test Case: 834 | Input/Output: [(-39 -97 -10 71) -97]
Test Case: 835 | Input/Output: [(-99 91 -67 -100) -100]
Test Case: 836 | Input/Output: [(20 -79 97 5) -79]
Test Case: 837 | Input/Output: [(-25 -15 7 -63) -63]
Test Case: 838 | Input/Output: [(-11 8 81 4) -11]
Test Case: 839 | Input/Output: [(-30 59 52 -69) -69]
Test Case: 840 | Input/Output: [(5 90 -100 66) -100]
Test Case: 841 | Input/Output: [(-84 -25 -33 16) -84]
Test Case: 842 | Input/Output: [(-55 89 -71 15) -71]
Test Case: 843 | Input/Output: [(-29 -88 26 82) -88]
Test Case: 844 | Input/Output: [(30 91 11 -3) -3]
Test Case: 845 | Input/Output: [(-75 43 74 -34) -75]
Test Case: 846 | Input/Output: [(-53 17 23 71) -53]
Test Case: 847 | Input/Output: [(-67 -27 -47 7) -67]
Test Case: 848 | Input/Output: [(-18 -94 -31 56) -94]
Test Case: 849 | Input/Output: [(98 49 79 98) 49]
Test Case: 850 | Input/Output: [(15 -87 -37 2) -87]
Test Case: 851 | Input/Output: [(94 -58 -27 -33) -58]
Test Case: 852 | Input/Output: [(-80 50 79 58) -80]
Test Case: 853 | Input/Output: [(-39 -96 63 -71) -96]
Test Case: 854 | Input/Output: [(-73 35 -66 -12) -73]
Test Case: 855 | Input/Output: [(63 61 -1 -38) -38]
Test Case: 856 | Input/Output: [(73 -14 11 79) -14]
Test Case: 857 | Input/Output: [(-8 95 -16 69) -16]
Test Case: 858 | Input/Output: [(-90 -64 -31 20) -90]
Test Case: 859 | Input/Output: [(-49 -19 4 49) -49]
Test Case: 860 | Input/Output: [(97 -27 91 -21) -27]
Test Case: 861 | Input/Output: [(80 97 -61 -11) -61]
Test Case: 862 | Input/Output: [(-19 67 -60 27) -60]
Test Case: 863 | Input/Output: [(90 -7 -23 24) -23]
Test Case: 864 | Input/Output: [(-75 -6 -31 6) -75]
Test Case: 865 | Input/Output: [(6 -1 -12 81) -12]
Test Case: 866 | Input/Output: [(47 -100 92 51) -100]
Test Case: 867 | Input/Output: [(-59 31 -42 32) -59]
Test Case: 868 | Input/Output: [(68 -65 3 -4) -65]
Test Case: 869 | Input/Output: [(24 70 59 -16) -16]
Test Case: 870 | Input/Output: [(100 28 -11 12) -11]
Test Case: 871 | Input/Output: [(-73 34 -8 -57) -73]
Test Case: 872 | Input/Output: [(-39 92 92 -9) -39]
Test Case: 873 | Input/Output: [(-63 17 -46 -93) -93]
Test Case: 874 | Input/Output: [(32 52 -69 -22) -69]
Test Case: 875 | Input/Output: [(87 -99 100 -71) -99]
Test Case: 876 | Input/Output: [(70 58 -12 -74) -74]
Test Case: 877 | Input/Output: [(-40 30 -83 98) -83]
Test Case: 878 | Input/Output: [(-38 13 -16 54) -38]
Test Case: 879 | Input/Output: [(-6 -53 33 -82) -82]
Test Case: 880 | Input/Output: [(29 59 -78 32) -78]
Test Case: 881 | Input/Output: [(59 -75 -11 -58) -75]
Test Case: 882 | Input/Output: [(70 -77 -26 -44) -77]
Test Case: 883 | Input/Output: [(-29 63 49 89) -29]
Test Case: 884 | Input/Output: [(8 40 18 -11) -11]
Test Case: 885 | Input/Output: [(-83 84 -3 29) -83]
Test Case: 886 | Input/Output: [(16 -42 -13 -63) -63]
Test Case: 887 | Input/Output: [(51 75 72 -10) -10]
Test Case: 888 | Input/Output: [(-26 -73 -35 68) -73]
Test Case: 889 | Input/Output: [(96 22 87 -32) -32]
Test Case: 890 | Input/Output: [(67 -74 57 59) -74]
Test Case: 891 | Input/Output: [(14 -13 -97 88) -97]
Test Case: 892 | Input/Output: [(34 -57 48 -100) -100]
Test Case: 893 | Input/Output: [(73 21 -97 -42) -97]
Test Case: 894 | Input/Output: [(-38 14 88 7) -38]
Test Case: 895 | Input/Output: [(28 -80 25 -76) -80]
Test Case: 896 | Input/Output: [(-76 -66 -72 -25) -76]
Test Case: 897 | Input/Output: [(-10 24 72 23) -10]
Test Case: 898 | Input/Output: [(-9 88 76 -31) -31]
Test Case: 899 | Input/Output: [(-17 -24 21 22) -24]
Test Case: 900 | Input/Output: [(-89 -74 -25 -22) -89]
Test Case: 901 | Input/Output: [(-33 4 -39 -95) -95]
Test Case: 902 | Input/Output: [(35 17 1 41) 1]
Test Case: 903 | Input/Output: [(56 86 -88 59) -88]
Test Case: 904 | Input/Output: [(-47 96 13 -1) -47]
Test Case: 905 | Input/Output: [(85 -12 92 21) -12]
Test Case: 906 | Input/Output: [(100 -13 -74 50) -74]
Test Case: 907 | Input/Output: [(77 -80 27 57) -80]
Test Case: 908 | Input/Output: [(-76 -92 62 16) -92]
Test Case: 909 | Input/Output: [(52 37 43 46) 37]
Test Case: 910 | Input/Output: [(55 33 -59 -95) -95]
Test Case: 911 | Input/Output: [(-32 -27 66 68) -32]
Test Case: 912 | Input/Output: [(-96 -67 9 33) -96]
Test Case: 913 | Input/Output: [(-89 -75 100 79) -89]
Test Case: 914 | Input/Output: [(-90 -85 -2 25) -90]
Test Case: 915 | Input/Output: [(8 -74 65 -65) -74]
Test Case: 916 | Input/Output: [(-44 -10 89 -33) -44]
Test Case: 917 | Input/Output: [(59 -6 9 -59) -59]
Test Case: 918 | Input/Output: [(-9 -92 58 -22) -92]
Test Case: 919 | Input/Output: [(-48 -96 -96 -49) -96]
Test Case: 920 | Input/Output: [(-60 22 45 -53) -60]
Test Case: 921 | Input/Output: [(-99 -64 26 -69) -99]
Test Case: 922 | Input/Output: [(-62 58 -58 -49) -62]
Test Case: 923 | Input/Output: [(-38 -36 90 5) -38]
Test Case: 924 | Input/Output: [(-24 94 70 -84) -84]
Test Case: 925 | Input/Output: [(-82 -89 -76 67) -89]
Test Case: 926 | Input/Output: [(-19 17 -15 9) -19]
Test Case: 927 | Input/Output: [(25 -13 52 7) -13]
Test Case: 928 | Input/Output: [(89 17 34 -53) -53]
Test Case: 929 | Input/Output: [(19 67 96 84) 19]
Test Case: 930 | Input/Output: [(-64 57 87 -5) -64]
Test Case: 931 | Input/Output: [(-56 -1 -75 -24) -75]
Test Case: 932 | Input/Output: [(-34 91 -8 -32) -34]
Test Case: 933 | Input/Output: [(-36 38 38 20) -36]
Test Case: 934 | Input/Output: [(43 -38 -19 37) -38]
Test Case: 935 | Input/Output: [(86 -28 25 91) -28]
Test Case: 936 | Input/Output: [(-21 -14 68 -96) -96]
Test Case: 937 | Input/Output: [(-25 -75 -30 90) -75]
Test Case: 938 | Input/Output: [(-57 5 2 -82) -82]
Test Case: 939 | Input/Output: [(-60 -12 0 -48) -60]
Test Case: 940 | Input/Output: [(84 -69 -25 -98) -98]
Test Case: 941 | Input/Output: [(38 -88 10 -39) -88]
Test Case: 942 | Input/Output: [(8 -56 -56 30) -56]
Test Case: 943 | Input/Output: [(76 89 94 -48) -48]
Test Case: 944 | Input/Output: [(85 -51 12 -11) -51]
Test Case: 945 | Input/Output: [(53 -29 81 -12) -29]
Test Case: 946 | Input/Output: [(-39 85 53 -39) -39]
Test Case: 947 | Input/Output: [(-75 -69 1 -36) -75]
Test Case: 948 | Input/Output: [(60 -75 91 1) -75]
Test Case: 949 | Input/Output: [(26 -23 28 -2) -23]
Test Case: 950 | Input/Output: [(21 -55 24 -31) -55]
Test Case: 951 | Input/Output: [(55 50 58 52) 50]
Test Case: 952 | Input/Output: [(-76 38 -40 -81) -81]
Test Case: 953 | Input/Output: [(8 9 96 -47) -47]
Test Case: 954 | Input/Output: [(23 25 59 -29) -29]
Test Case: 955 | Input/Output: [(56 -89 35 92) -89]
Test Case: 956 | Input/Output: [(-21 79 -46 79) -46]
Test Case: 957 | Input/Output: [(74 76 -59 82) -59]
Test Case: 958 | Input/Output: [(-62 73 71 -99) -99]
Test Case: 959 | Input/Output: [(-18 37 81 -46) -46]
Test Case: 960 | Input/Output: [(40 -85 84 -4) -85]
Test Case: 961 | Input/Output: [(73 90 -55 -43) -55]
Test Case: 962 | Input/Output: [(82 -40 45 55) -40]
Test Case: 963 | Input/Output: [(-78 -71 25 -64) -78]
Test Case: 964 | Input/Output: [(52 -30 -66 -21) -66]
Test Case: 965 | Input/Output: [(81 -11 -90 -59) -90]
Test Case: 966 | Input/Output: [(52 -67 -100 47) -100]
Test Case: 967 | Input/Output: [(-44 -87 -17 32) -87]
Test Case: 968 | Input/Output: [(-13 -32 -70 -6) -70]
Test Case: 969 | Input/Output: [(82 81 -78 27) -78]
Test Case: 970 | Input/Output: [(45 -11 -14 -5) -14]
Test Case: 971 | Input/Output: [(-30 65 25 -30) -30]
Test Case: 972 | Input/Output: [(55 82 88 -2) -2]
Test Case: 973 | Input/Output: [(74 -62 77 84) -62]
Test Case: 974 | Input/Output: [(32 -15 -52 13) -52]
Test Case: 975 | Input/Output: [(63 -59 -83 -17) -83]
Test Case: 976 | Input/Output: [(-11 59 -85 97) -85]
Test Case: 977 | Input/Output: [(-51 -74 -22 -31) -74]
Test Case: 978 | Input/Output: [(-46 50 -30 -75) -75]
Test Case: 979 | Input/Output: [(-41 -34 63 85) -41]
Test Case: 980 | Input/Output: [(-97 -64 69 34) -97]
Test Case: 981 | Input/Output: [(-19 -34 10 6) -34]
Test Case: 982 | Input/Output: [(-24 50 -91 -97) -97]
Test Case: 983 | Input/Output: [(-44 -38 -7 -43) -44]
Test Case: 984 | Input/Output: [(-86 -3 17 -48) -86]
Test Case: 985 | Input/Output: [(64 80 92 44) 44]
Test Case: 986 | Input/Output: [(-43 -74 60 -22) -74]
Test Case: 987 | Input/Output: [(18 85 6 -42) -42]
Test Case: 988 | Input/Output: [(100 -51 56 -39) -51]
Test Case: 989 | Input/Output: [(36 24 67 100) 24]
Test Case: 990 | Input/Output: [(40 -98 2 94) -98]
Test Case: 991 | Input/Output: [(-83 99 67 10) -83]
Test Case: 992 | Input/Output: [(-34 -84 -69 79) -84]
Test Case: 993 | Input/Output: [(-74 61 49 -38) -74]
Test Case: 994 | Input/Output: [(-85 -43 0 9) -85]
Test Case: 995 | Input/Output: [(-29 39 -89 -38) -89]
Test Case: 996 | Input/Output: [(-52 -69 -80 -99) -99]
Test Case: 997 | Input/Output: [(32 48 -92 28) -92]
Test Case: 998 | Input/Output: [(-90 -66 -51 -37) -90]
Test Case: 999 | Input/Output: [(-24 54 69 0) -24]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 71 97 19 -72 114 11 1 33 -13 11 5 59 -99 -128 22 18
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 -39 85 85] -39] [[96 96 -13 96] -13] [[10 -71 -71 -71] -71] [[75 75 75 -33] -33] [[65 65 65 -43] -43] [[17 -86 17 17] -86] [[-99 -99 -99 -59] -99] [[59 49 49 49] 49] [[55 84 84 84] 55] [[68 68 68 61] 61] [(-76 -76 -76 -76) -76] [(7 7 7 7) 7] [(10 10 10 10) 10] [(-91 -91 -91 -91) -91] [(-11 -11 -11 -11) -11] [(46 4 29 57) 4] [(22 89 46 31) 22] [(32 100 2 21) 2] [(35 40 35 87) 35] [(78 64 6 86) 6] [(79 7 0 76) 0] [(75 43 37 7) 7] [(40 59 46 28) 28] [(23 26 84 93) 23] [(3 32 62 93) 3] [(40 40 10 85) 10] [(93 63 55 24) 24] [(48 18 3 6) 3] [(13 89 95 55) 13] [(1 39 89 72) 1] [(34 89 15 26) 15] [(53 91 64 62) 53] [(69 51 85 23) 23] [(38 18 54 82) 18] [(57 21 18 29) 18] [(-20 -65 -25 -42) -65] [(68 -89 40 -50) -89] [(-88 -100 -69 84) -100] [(40 80 61 -8) -8] [(-25 -79 23 72) -79] [(-51 -40 -61 -84) -84] [(-14 -47 -12 44) -47] [(-3 -85 8 32) -85] [(53 -45 30 50) -45] [(82 -98 5 80) -98] [(-97 -7 87 67) -97] [(-24 95 22 -47) -47] [(31 74 -26 -59) -59] [(-28 -4 18 -63) -63] [(79 -24 -35 -55) -55] [(-71 31 80 -88) -88] [(88 12 -29 34) -29] [(-82 20 -72 -2) -82] [(7 96 27 96) 7] [(-89 38 56 100) -89] [(65 37 99 -22) -22] [(8 -16 -95 -54) -95] [(70 -79 -98 51) -98] [(-53 93 -56 10) -56] [(37 87 83 29) 29] [(-51 10 63 91) -51] [(-13 -6 -95 -100) -100] [(-72 -14 -92 -57) -92] [(85 -74 28 -44) -74] [(39 -9 39 -34) -34] [(-61 -73 -87 52) -87] [(-6 92 46 -68) -68] [(-7 -36 46 -28) -36] [(84 -37 -10 -53) -53] [(32 -83 83 49) -83] [(-94 -42 -19 -5) -94] [(2 -9 70 -97) -97] [(10 95 -96 75) -96] [(63 40 67 7) 7] [(34 -64 -43 88) -64] [(-99 92 15 75) -99] [(100 69 -92 20) -92] [(77 -82 4 -46) -82] [(63 -81 1 66) -81] [(-89 37 25 -41) -89] [(7 -7 -87 69) -87] [(74 13 28 -65) -65] [(-38 -18 -96 -21) -96] [(-74 99 -8 -54) -74] [(-22 -85 -5 -74) -85] [(-78 -66 -52 -69) -78] [(36 18 43 96) 18] [(85 -30 30 -99) -99] [(-6 33 -32 88) -32] [(-57 -33 18 72) -57] [(67 -1 -66 -8) -66] [(21 48 -60 -75) -75] [(42 -79 89 -32) -79] [(-32 -29 15 -68) -68] [(45 20 -31 18) -31])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: 85                 
Correct output: -13                 | Program output: 96                 
Correct output: -71                 | Program output: 10                 
Correct output: -33                 | Program output: 75                 
Correct output: -43                 | Program output: 65                 
Correct output: -86                 | Program output: 17                 
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 61                  | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: 2                   | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 78                 
Correct output: 0                   | Program output: 79                 
Correct output: 7                   | Program output: 75                 
Correct output: 28                  | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 40                 
Correct output: 24                  | Program output: 93                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 34                 
Correct output: 53                  | Program output: 53                 
Correct output: 23                  | Program output: 69                 
Correct output: 18                  | Program output: 38                 
Correct output: 18                  | Program output: 57                 
Correct output: -65                 | Program output: -20                
Correct output: -89                 | Program output: 68                 
Correct output: -100                | Program output: -88                
Correct output: -8                  | Program output: 40                 
Correct output: -79                 | Program output: -25                
Correct output: -84                 | Program output: -51                
Correct output: -47                 | Program output: -14                
Correct output: -85                 | Program output: -3                 
Correct output: -45                 | Program output: 53                 
Correct output: -98                 | Program output: 82                 
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: -24                
Correct output: -59                 | Program output: 31                 
Correct output: -63                 | Program output: -28                
Correct output: -55                 | Program output: 79                 
Correct output: -88                 | Program output: -71                
Correct output: -29                 | Program output: 88                 
Correct output: -82                 | Program output: -82                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: -22                 | Program output: 65                 
Correct output: -95                 | Program output: 8                  
Correct output: -98                 | Program output: 70                 
Correct output: -56                 | Program output: -53                
Correct output: 29                  | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -13                
Correct output: -92                 | Program output: -72                
Correct output: -74                 | Program output: 85                 
Correct output: -34                 | Program output: 39                 
Correct output: -87                 | Program output: -61                
Correct output: -68                 | Program output: -6                 
Correct output: -36                 | Program output: -7                 
Correct output: -53                 | Program output: 84                 
Correct output: -83                 | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 2                  
Correct output: -96                 | Program output: 10                 
Correct output: 7                   | Program output: 63                 
Correct output: -64                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 100                
Correct output: -82                 | Program output: 77                 
Correct output: -81                 | Program output: 63                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 7                  
Correct output: -65                 | Program output: 74                 
Correct output: -96                 | Program output: -38                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 36                 
Correct output: -99                 | Program output: 85                 
Correct output: -32                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: 67                 
Correct output: -75                 | Program output: 21                 
Correct output: -79                 | Program output: 42                 
Correct output: -68                 | Program output: -32                
Correct output: -31                 | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_326} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction tag_integer_755} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_dec boolean_shove boolean_pop exec_s_when_autoconstructing (boolean_frominteger) (integer_sub exec_rot (exec_s_when_autoconstructing (in1 exec_noop exec_empty exec_eq integer_gte) (integer_inc integer_yank exec_do*times () exec_k (integer_dup boolean_swap integer_flush) () integer_min tagged_326 boolean_and exec_do*range (exec_shove (boolean_yank exec_eq print_exec () in2) boolean_not exec_do*count (boolean_empty integer_eq boolean_pop exec_dup_items) exec_while () boolean_pop in2 exec_pop (exec_yankdup boolean_and integer_add) exec_flush integer_pop) tag_integer_755) (print_integer boolean_rot boolean_invert_first_then_and in2) integer_dec boolean_shove) (integer_dup_times exec_if (exec_k (exec_noop print_integer exec_do*times (print_newline integer_yank integer_dup)) ()) ()) ()) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_326} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction tag_integer_755} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_dec boolean_shove boolean_pop exec_s_when_autoconstructing (boolean_frominteger) (integer_sub exec_rot (exec_s_when_autoconstructing (in1 exec_noop exec_empty exec_eq integer_gte) (integer_inc integer_yank exec_do*times () exec_k (integer_dup boolean_swap integer_flush) () integer_min tagged_326 boolean_and exec_do*range (exec_shove (boolean_yank exec_eq print_exec () in2) boolean_not exec_do*count (boolean_empty integer_eq boolean_pop exec_dup_items) exec_while () boolean_pop in2 exec_pop (exec_yankdup boolean_and integer_add) exec_flush integer_pop) tag_integer_755) (print_integer boolean_rot boolean_invert_first_then_and in2) integer_dec boolean_shove) (integer_dup_times exec_if (exec_k (exec_noop print_integer exec_do*times (print_newline integer_yank integer_dup)) ()) ()) ()) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1 1 6 1 2 1 1 1 1)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (2 1 1 6 1 2 1 1 1 1)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_326} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction tag_integer_755} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup})
Best program: (integer_dec boolean_shove boolean_pop exec_s_when_autoconstructing (boolean_frominteger) (integer_sub exec_rot (exec_s_when_autoconstructing (in1 exec_noop exec_empty exec_eq integer_gte) (integer_inc integer_yank exec_do*times () exec_k (integer_dup boolean_swap integer_flush) () integer_min tagged_326 boolean_and exec_do*range (exec_shove (boolean_yank exec_eq print_exec () in2) boolean_not exec_do*count (boolean_empty integer_eq boolean_pop exec_dup_items) exec_while () boolean_pop in2 exec_pop (exec_yankdup boolean_and integer_add) exec_flush integer_pop) tag_integer_755) (print_integer boolean_rot boolean_invert_first_then_and in2) integer_dec boolean_shove) (integer_dup_times exec_if (exec_k (exec_noop print_integer exec_do*times (print_newline integer_yank integer_dup)) ()) ()) ()) ())
Errors: [1 0 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 84
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 9.983
Median total errors in population: 10
Error averages by case: (0.998 0.999 0.999 0.994 0.999 0.998 0.999 0.999 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.578
Average program size in population (points): 69.683
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477121
--- Timings ---
Current time: 1559594050069 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.6%
Fitness Testing:      1.8 seconds, 68.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: 75                 
Correct output: -43                 | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 84                 
Correct output: 61                  | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 37                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 26                 
Correct output: 3                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 89                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 53                  | Program output: 64                 
Correct output: 23                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -61                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: 22                 
Correct output: -59                 | Program output: -26                
Correct output: -63                 | Program output: -4                 
Correct output: -55                 | Program output: -35                
Correct output: -88                 | Program output: 31                 
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -72                
Correct output: 7                   | Program output: 27                 
Correct output: -89                 | Program output: 38                 
Correct output: -22                 | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 29                  | Program output: 83                 
Correct output: -51                 | Program output: 10                 
Correct output: -100                | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: 46                 
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -42                
Correct output: -97                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 7                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: 25                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -66                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -30                
Correct output: -32                 | Program output: -32                
Correct output: -57                 | Program output: -33                
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -60                
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -29                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Lexicase best program: (integer_stackdepth integer_add integer_flush boolean_dup_times exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) exec_rot (integer_min) () (integer_dup boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (exec_do*while (boolean_eq in3 print_newline)) (exec_when (exec_dup (integer_max boolean_dup_items in1 boolean_empty) integer_gt exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) integer_dec) print_integer exec_swap (exec_dup (exec_do*times ()) boolean_empty) () boolean_frominteger in1 boolean_stackdepth exec_swap (exec_yankdup boolean_dup_times boolean_or integer_empty) (boolean_dup_items exec_dup (exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ())) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Zero cases best program: (integer_stackdepth integer_add integer_flush boolean_dup_times exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) exec_rot (integer_min) () (integer_dup boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (exec_do*while (boolean_eq in3 print_newline)) (exec_when (exec_dup (integer_max boolean_dup_items in1 boolean_empty) integer_gt exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) integer_dec) print_integer exec_swap (exec_dup (exec_do*times ()) boolean_empty) () boolean_frominteger in1 boolean_stackdepth exec_swap (exec_yankdup boolean_dup_times boolean_or integer_empty) (boolean_dup_items exec_dup (exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ())) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 146 269 47 46 4 144 147 46 138)
Population mean number of elite cases: 1.13
Count of perfect (error zero) individuals by case: (138 146 269 47 46 4 144 147 46 138)
Population mean number of perfect (error zero) cases: 1.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Best program: (integer_stackdepth integer_add integer_flush boolean_dup_times exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) exec_rot (integer_min) () (integer_dup boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (exec_do*while (boolean_eq in3 print_newline)) (exec_when (exec_dup (integer_max boolean_dup_items in1 boolean_empty) integer_gt exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) integer_dec) print_integer exec_swap (exec_dup (exec_do*times ()) boolean_empty) () boolean_frominteger in1 boolean_stackdepth exec_swap (exec_yankdup boolean_dup_times boolean_or integer_empty) (boolean_dup_items exec_dup (exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ())) ())
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 71
Size: 98
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 8.875
Median total errors in population: 10
Error averages by case: (0.862 0.854 0.731 0.953 0.954 0.996 0.856 0.853 0.954 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.922
Average program size in population (points): 83.412
Average percent parens in population: 0.254
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1263663
--- Timings ---
Current time: 1559594053006 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.8 seconds, 35.1%
Fitness Testing:      2.9 seconds, 55.7%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 391
Test mean error for best: 0.39100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: 75                 
Correct output: -43                 | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: 61                  | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 2                   | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 64                 
Correct output: 0                   | Program output: 7                  
Correct output: 7                   | Program output: 43                 
Correct output: 28                  | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 40                 
Correct output: 24                  | Program output: 63                 
Correct output: 3                   | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 34                 
Correct output: 53                  | Program output: 53                 
Correct output: 23                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: 40                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: -24                
Correct output: -59                 | Program output: 31                 
Correct output: -63                 | Program output: -28                
Correct output: -55                 | Program output: -24                
Correct output: -88                 | Program output: -71                
Correct output: -29                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: -22                 | Program output: 37                 
Correct output: -95                 | Program output: -16                
Correct output: -98                 | Program output: -79                
Correct output: -56                 | Program output: -53                
Correct output: 29                  | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -13                
Correct output: -92                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -9                 
Correct output: -87                 | Program output: -73                
Correct output: -68                 | Program output: -6                 
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -9                 
Correct output: -96                 | Program output: 10                 
Correct output: 7                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 69                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -7                 
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -38                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -30                
Correct output: -32                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -1                 
Correct output: -75                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -32                
Correct output: -31                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Lexicase best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (integer_dup boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (exec_do*while (exec_do*count (boolean_eq in3 print_newline)) exec_when (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) (integer_dec) (print_integer exec_swap (exec_do*times ()) (boolean_empty)) boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_dup_times boolean_or integer_empty boolean_dup_items exec_dup (exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Zero cases best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (integer_dup boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (exec_do*while (exec_do*count (boolean_eq in3 print_newline)) exec_when (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) (integer_dec) (print_integer exec_swap (exec_do*times ()) (boolean_empty)) boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_dup_times boolean_or integer_empty boolean_dup_items exec_dup (exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 157 51 411 220 134 51 222 51 411)
Population mean number of elite cases: 1.93
Count of perfect (error zero) individuals by case: (222 157 51 411 220 134 51 222 51 411)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (integer_dup boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (exec_do*while (exec_do*count (boolean_eq in3 print_newline)) exec_when (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) (integer_dec) (print_integer exec_swap (exec_do*times ()) (boolean_empty)) boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_dup_times boolean_or integer_empty boolean_dup_items exec_dup (exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ())
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 69
Size: 93
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 8.07
Median total errors in population: 10
Error averages by case: (0.778 0.843 0.949 0.589 0.78 0.866 0.949 0.778 0.949 0.589)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.65
Average program size in population (points): 92.884
Average percent parens in population: 0.251
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2188593
--- Timings ---
Current time: 1559594056068 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.1 seconds, 37.3%
Fitness Testing:      4.0 seconds, 47.9%
Report:               1.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: 96                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 84                 
Correct output: 61                  | Program output: 61                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 31                 
Correct output: 2                   | Program output: 21                 
Correct output: 35                  | Program output: 40                 
Correct output: 6                   | Program output: 64                 
Correct output: 0                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 26                 
Correct output: 3                   | Program output: 32                 
Correct output: 10                  | Program output: 40                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 6                  
Correct output: 13                  | Program output: 55                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 26                 
Correct output: 53                  | Program output: 62                 
Correct output: 23                  | Program output: 23                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 12                 
Correct output: -82                 | Program output: -2                 
Correct output: 7                   | Program output: 96                 
Correct output: -89                 | Program output: 38                 
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: -54                
Correct output: -98                 | Program output: -79                
Correct output: -56                 | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: -51                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: 75                 
Correct output: -92                 | Program output: 20                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -41                
Correct output: -87                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -21                
Correct output: -74                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -32                 | Program output: 33                 
Correct output: -57                 | Program output: -33                
Correct output: -66                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: -31                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_stackdepth integer_add integer_flush boolean_xor exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_empty integer_swap in3) exec_rot (integer_min) () (in4 integer_dup boolean_empty boolean_or in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_rot integer_yank) integer_pop exec_s (integer_max exec_do*while (boolean_eq print_newline)) (exec_when (exec_dup (integer_max boolean_dup_items boolean_empty) integer_gt exec_y_when_autoconstructing (print_integer integer_flush boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_invert_first_then_and boolean_not boolean_rot) integer_dec) print_integer exec_dup (exec_do*times ()) boolean_empty) () boolean_frominteger in1 boolean_stackdepth exec_swap (integer_min exec_yankdup boolean_dup_times boolean_dup_items exec_dup (exec_noop) boolean_dup_items) ()))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_stackdepth integer_add integer_flush boolean_xor exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_empty integer_swap in3) exec_rot (integer_min) () (in4 integer_dup boolean_empty boolean_or in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_rot integer_yank) integer_pop exec_s (integer_max exec_do*while (boolean_eq print_newline)) (exec_when (exec_dup (integer_max boolean_dup_items boolean_empty) integer_gt exec_y_when_autoconstructing (print_integer integer_flush boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_invert_first_then_and boolean_not boolean_rot) integer_dec) print_integer exec_dup (exec_do*times ()) boolean_empty) () boolean_frominteger in1 boolean_stackdepth exec_swap (integer_min exec_yankdup boolean_dup_times boolean_dup_items exec_dup (exec_noop) boolean_dup_items) ()))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 142 92 589 91 93 251 249 142 144)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (91 142 92 589 91 93 251 249 142 144)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 2, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items})
Best program: (integer_stackdepth integer_add integer_flush boolean_dup_times exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty integer_swap integer_sub) exec_rot (integer_min) () (in4 integer_dup boolean_empty boolean_or exec_pop () in2 boolean_swap) print_integer integer_mult exec_y (in2 boolean_invert_second_then_and exec_y (integer_gte integer_yank) integer_sub) -72 exec_s (integer_max exec_do*while (boolean_eq print_newline)) (exec_when (exec_dup (boolean_stackdepth integer_max boolean_dup_items boolean_empty) integer_gt exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_not boolean_rot) integer_dec) print_integer exec_dup (exec_do*times ()) boolean_empty) () boolean_frominteger in1 boolean_stackdepth exec_swap (integer_empty exec_yankdup boolean_dup_times boolean_dup_items exec_dup (exec_s (exec_noop) (boolean_dup_items) ())) ())
Errors: [0 1 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 67
Size: 91
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 8.116
Median total errors in population: 9
Error averages by case: (0.909 0.858 0.908 0.411 0.909 0.907 0.749 0.751 0.858 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.787
Average program size in population (points): 93.09
Average percent parens in population: 0.260
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3420909
--- Timings ---
Current time: 1559594059288 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.3 seconds, 37.3%
Fitness Testing:      5.2 seconds, 45.4%
Report:               1.9 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: 75                 
Correct output: -43                 | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: 61                  | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 37                 
Correct output: 28                  | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 53                  | Program output: 53                 
Correct output: 23                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: 40                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -61                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: -24                
Correct output: -59                 | Program output: -26                
Correct output: -63                 | Program output: -28                
Correct output: -55                 | Program output: -35                
Correct output: -88                 | Program output: -71                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: -22                 | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 29                  | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -6                 
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 7                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -30                
Correct output: -32                 | Program output: -32                
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -60                
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -32                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction -72} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Lexicase best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_min boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (in4 boolean_or integer_yank) exec_pop () in2 integer_min boolean_swap print_integer exec_empty boolean_swap integer_mult exec_y (exec_rot (in2 boolean_invert_second_then_and exec_y (integer_yank) integer_sub) (exec_s (-72 in2 exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_rot) (integer_dec) print_boolean exec_swap (exec_do*times ()) (boolean_empty)) (boolean_frominteger in1 boolean_stackdepth exec_k_when_autoconstructing (exec_yankdup boolean_or integer_empty) (boolean_dup_items exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ()) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 103
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction -72} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Zero cases best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_min boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (in4 boolean_or integer_yank) exec_pop () in2 integer_min boolean_swap print_integer exec_empty boolean_swap integer_mult exec_y (exec_rot (in2 boolean_invert_second_then_and exec_y (integer_yank) integer_sub) (exec_s (-72 in2 exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_rot) (integer_dec) print_boolean exec_swap (exec_do*times ()) (boolean_empty)) (boolean_frominteger in1 boolean_stackdepth exec_k_when_autoconstructing (exec_yankdup boolean_or integer_empty) (boolean_dup_items exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ()) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 103
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 206 456 177 170 335 175 210 252 215)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (277 206 456 177 170 335 175 210 252 215)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction -72} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_min boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (in4 boolean_or integer_yank) exec_pop () in2 integer_min boolean_swap print_integer exec_empty boolean_swap integer_mult exec_y (exec_rot (in2 boolean_invert_second_then_and exec_y (integer_yank) integer_sub) (exec_s (-72 in2 exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_rot) (integer_dec) print_boolean exec_swap (exec_do*times ()) (boolean_empty)) (boolean_frominteger in1 boolean_stackdepth exec_k_when_autoconstructing (exec_yankdup boolean_or integer_empty) (boolean_dup_items exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ()) ()) ()))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 73
Size: 103
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.527
Median total errors in population: 8
Error averages by case: (0.723 0.794 0.544 0.823 0.83 0.665 0.825 0.79 0.748 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.271
Average program size in population (points): 93.507
Average percent parens in population: 0.268
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4603014
--- Timings ---
Current time: 1559594062437 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.5 seconds, 37.5%
Fitness Testing:      6.4 seconds, 43.7%
Report:               2.7 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: 75                 
Correct output: -43                 | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: 61                  | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 37                 
Correct output: 28                  | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 53                  | Program output: 53                 
Correct output: 23                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: 40                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -61                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
Correct output: -47                 | Program output: -24                
Correct output: -59                 | Program output: -26                
Correct output: -63                 | Program output: -28                
Correct output: -55                 | Program output: -35                
Correct output: -88                 | Program output: -71                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -82                
Correct output: 7                   | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: -22                 | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 29                  | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -100                | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -6                 
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 7                   | Program output: 40                 
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 13                 
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -30                
Correct output: -32                 | Program output: -32                
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -60                
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -32                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction -72} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Lexicase best program: (integer_stackdepth integer_flush exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_min boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 print_boolean exec_rot (integer_min) () (in4 boolean_or boolean_or integer_yank) exec_pop () in2 integer_min boolean_swap print_integer exec_empty boolean_swap integer_mult in3 exec_y (exec_rot (in2 boolean_invert_second_then_and exec_y (integer_yank) integer_sub) (exec_s (-72 in2 exec_s (boolean_rot exec_do*count (exec_dup (boolean_eq in3 print_newline)) exec_while (integer_max integer_sub) boolean_dup_items in1 boolean_empty) (integer_empty integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_rot) (integer_dec) print_boolean exec_swap (exec_do*times ()) (exec_dup_items boolean_empty)) (boolean_frominteger in1 boolean_stackdepth exec_k_when_autoconstructing (exec_yankdup boolean_or integer_gte integer_empty) (boolean_dup_items exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 112
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction -72} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Zero cases best program: (integer_stackdepth integer_flush exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (integer_min boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 print_boolean exec_rot (integer_min) () (in4 boolean_or boolean_or integer_yank) exec_pop () in2 integer_min boolean_swap print_integer exec_empty boolean_swap integer_mult in3 exec_y (exec_rot (in2 boolean_invert_second_then_and exec_y (integer_yank) integer_sub) (exec_s (-72 in2 exec_s (boolean_rot exec_do*count (exec_dup (boolean_eq in3 print_newline)) exec_while (integer_max integer_sub) boolean_dup_items in1 boolean_empty) (integer_empty integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_rot) (integer_dec) print_boolean exec_swap (exec_do*times ()) (exec_dup_items boolean_empty)) (boolean_frominteger in1 boolean_stackdepth exec_k_when_autoconstructing (exec_yankdup boolean_or integer_gte integer_empty) (boolean_dup_items exec_noop) boolean_dup_items exec_rot (boolean_eq integer_div) () ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 112
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 316 313 222 265 256 331 269 270 280)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (257 316 313 222 265 256 331 269 270 280)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -72} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank})
Best program: (integer_stackdepth boolean_dup_times exec_do*while () exec_do*while (boolean_dup_items) boolean_empty exec_do*range (boolean_not integer_empty in3 integer_swap exec_while () integer_sub) in1 exec_rot (integer_min) () (in4 boolean_or integer_yank) exec_pop () in2 integer_min boolean_swap print_integer exec_empty exec_empty boolean_swap integer_mult exec_y (exec_rot (in2 boolean_invert_second_then_and exec_y (integer_yank) integer_sub) (exec_s (boolean_dup_times -72 in2 exec_s (integer_fromboolean exec_do*count (boolean_eq in3 print_newline)) (exec_while (integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and boolean_flush integer_div integer_div boolean_rot) (integer_dec) print_boolean exec_swap (exec_do*times ()) (boolean_empty)) (boolean_frominteger in1 boolean_stackdepth exec_k_when_autoconstructing (exec_yankdup boolean_dup_times boolean_or integer_empty) (boolean_dup_items exec_noop) integer_yankdup) (boolean_dup_items exec_while (exec_rot (boolean_eq integer_div exec_yank) () ()))) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 78
Size: 109
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.221
Median total errors in population: 8
Error averages by case: (0.743 0.684 0.687 0.778 0.735 0.744 0.669 0.731 0.73 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.046
Average program size in population (points): 98.556
Average percent parens in population: 0.289
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5775442
--- Timings ---
Current time: 1559594065653 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         6.8 seconds, 37.7%
Fitness Testing:      7.7 seconds, 42.8%
Report:               3.4 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 84                 
Correct output: 61                  | Program output: 61                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 26                 
Correct output: 3                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 55                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 53                  | Program output: 62                 
Correct output: 23                  | Program output: 23                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -72                
Correct output: 7                   | Program output: 27                 
Correct output: -89                 | Program output: 38                 
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 29                  | Program output: 29                 
Correct output: -51                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: 7                   | Program output: 7                  
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -32                 | Program output: -32                
Correct output: -57                 | Program output: -33                
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div})
Lexicase best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 101
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div})
Zero cases best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 101
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 181 251 212 449 211 564 449 455 181)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (454 181 251 212 449 211 564 449 455 181)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction -72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div})
Best program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 73
Size: 101
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.593
Median total errors in population: 7
Error averages by case: (0.546 0.819 0.749 0.788 0.551 0.789 0.436 0.551 0.545 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.335
Average program size in population (points): 101.069
Average percent parens in population: 0.283
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6908629
--- Timings ---
Current time: 1559594068867 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.9 seconds, 37.7%
Fitness Testing:      8.9 seconds, 42.3%
Report:               4.1 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 101


Auto-simplifying with starting size: 101
step: 0
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 500
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 1000
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 1500
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 2000
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 2500
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 3000
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 3500
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 4000
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 4500
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 5000
program: (integer_stackdepth integer_flush boolean_dup_times exec_do*while () exec_do*while (integer_dup) boolean_dup_items exec_do*range (boolean_not integer_empty in3 integer_swap in3 boolean_shove integer_sub) exec_rot (integer_min integer_min) () (integer_rot boolean_swap in4 boolean_xor in2 boolean_swap) print_integer exec_while (exec_empty exec_y (in3 exec_stackdepth in2 boolean_invert_second_then_and exec_y (exec_pop (integer_yank) integer_sub) -72 boolean_yank exec_s (exec_s (exec_do*count (boolean_eq in3 print_newline)) (exec_while (exec_stackdepth boolean_shove integer_max boolean_dup_items in1 boolean_empty) integer_gt boolean_invert_first_then_and exec_dup_items integer_div integer_div exec_swap (integer_dec) (exec_while (exec_swap (exec_do*times ()) (boolean_frominteger in1 boolean_stackdepth exec_yankdup boolean_eq boolean_or integer_empty) boolean_dup_items exec_rot (boolean_eq exec_noop) (integer_div) ()))) ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: 49                  | Program output: 49                 
Correct output: 55                  | Program output: 84                 
Correct output: 61                  | Program output: 61                 
Correct output: -76                 | Program output: -76                
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 26                 
Correct output: 3                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 55                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 53                  | Program output: 62                 
Correct output: 23                  | Program output: 23                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -7                 
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: -29                
Correct output: -82                 | Program output: -72                
Correct output: 7                   | Program output: 27                 
Correct output: -89                 | Program output: 38                 
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: 29                  | Program output: 29                 
Correct output: -51                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: 7                   | Program output: 7                  
Correct output: -64                 | Program output: -64                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -74                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -78                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -32                 | Program output: -32                
Correct output: -57                 | Program output: -33                
Correct output: -66                 | Program output: -66                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: -31                 | Program output: -31                
;;******************************
