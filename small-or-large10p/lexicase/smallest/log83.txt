Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-41 -95 -41 -41] -95] [[-44 -44 -44 -21] -44] [[-45 -45 -45 16] -45] [[-13 58 -13 -13] -13] [[45 42 45 45] 42] [[87 99 87 87] 87] [[-35 27 27 27] -35] [[-18 -18 78 -18] -18] [[2 2 4 2] 2] [[43 55 55 55] 43] [(-33 -33 -33 -33) -33] [(29 29 29 29) 29] [(34 34 34 34) 34] [(-32 -32 -32 -32) -32] [(-83 -83 -83 -83) -83] [(49 20 71 72) 20] [(84 2 70 57) 2] [(46 88 58 60) 46] [(77 44 67 71) 44] [(74 20 27 16) 16] [(39 47 74 17) 17] [(77 70 85 53) 53] [(38 13 21 89) 13] [(42 1 1 60) 1] [(64 31 10 78) 10] [(74 90 3 78) 3] [(66 89 57 27) 27] [(33 53 37 42) 33] [(10 58 59 0) 0] [(3 20 38 93) 3] [(91 48 2 75) 2] [(46 70 4 15) 4] [(41 68 56 14) 14] [(70 4 66 25) 4] [(13 9 61 37) 9] [(12 -55 -43 38) -55] [(0 22 9 95) 0] [(-80 -18 -44 78) -80] [(6 -6 -26 -51) -51] [(-82 80 94 -88) -88] [(-90 -13 -95 -45) -95] [(39 -92 5 23) -92] [(-2 15 -2 -21) -21] [(-70 -37 49 -92) -92] [(60 8 -74 -41) -74] [(7 38 53 93) 7] [(19 17 5 49) 5] [(90 85 -32 -76) -76] [(5 32 -93 52) -93] [(87 -76 88 76) -76] [(0 -87 -70 66) -87] [(-44 -11 -100 11) -100] [(28 16 -36 27) -36] [(52 -24 -3 26) -24] [(30 1 49 -30) -30] [(87 -86 -24 -82) -86] [(32 -53 20 -49) -53] [(32 65 -14 58) -14] [(42 95 -75 65) -75] [(-100 80 -64 -48) -100] [(51 94 34 -43) -43] [(57 -16 79 -64) -64] [(11 -80 66 -71) -80] [(-81 32 3 40) -81] [(52 -88 -85 -78) -88] [(65 43 -10 43) -10] [(-70 -93 15 -80) -93] [(-93 39 69 93) -93] [(43 32 -14 11) -14] [(-2 6 -76 -88) -88] [(48 -50 52 -96) -96] [(4 -40 69 -22) -40] [(86 25 42 -50) -50] [(50 -98 -20 81) -98] [(5 -83 73 7) -83] [(29 -47 73 41) -47] [(50 -95 -93 -77) -95] [(-81 -6 3 96) -81] [(40 29 19 -49) -49] [(58 31 50 -71) -71] [(-54 -13 -41 15) -54] [(-33 80 58 -40) -40] [(73 23 -24 -62) -62] [(-73 47 22 6) -73] [(-15 65 80 56) -15] [(47 -69 -43 -58) -69] [(1 -34 75 -29) -34] [(-100 100 -87 -69) -100] [(75 -56 56 -9) -56] [(-19 -12 -82 -67) -82] [(-87 23 -62 1) -87] [(-43 -34 56 60) -43] [(36 35 92 -13) -13] [(-57 45 99 73) -57] [(-44 88 -63 68) -63])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-41 -95 -41 -41] -95]
Train Case:   6 | Input/Output: [[-44 -44 -44 -21] -44]
Train Case:   7 | Input/Output: [[-45 -45 -45 16] -45]
Train Case:   8 | Input/Output: [[-13 58 -13 -13] -13]
Train Case:   9 | Input/Output: [[45 42 45 45] 42]
Train Case:  10 | Input/Output: [[87 99 87 87] 87]
Train Case:  11 | Input/Output: [[-35 27 27 27] -35]
Train Case:  12 | Input/Output: [[-18 -18 78 -18] -18]
Train Case:  13 | Input/Output: [[2 2 4 2] 2]
Train Case:  14 | Input/Output: [[43 55 55 55] 43]
Train Case:  15 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  16 | Input/Output: [(29 29 29 29) 29]
Train Case:  17 | Input/Output: [(34 34 34 34) 34]
Train Case:  18 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  19 | Input/Output: [(-83 -83 -83 -83) -83]
Train Case:  20 | Input/Output: [(49 20 71 72) 20]
Train Case:  21 | Input/Output: [(84 2 70 57) 2]
Train Case:  22 | Input/Output: [(46 88 58 60) 46]
Train Case:  23 | Input/Output: [(77 44 67 71) 44]
Train Case:  24 | Input/Output: [(74 20 27 16) 16]
Train Case:  25 | Input/Output: [(39 47 74 17) 17]
Train Case:  26 | Input/Output: [(77 70 85 53) 53]
Train Case:  27 | Input/Output: [(38 13 21 89) 13]
Train Case:  28 | Input/Output: [(42 1 1 60) 1]
Train Case:  29 | Input/Output: [(64 31 10 78) 10]
Train Case:  30 | Input/Output: [(74 90 3 78) 3]
Train Case:  31 | Input/Output: [(66 89 57 27) 27]
Train Case:  32 | Input/Output: [(33 53 37 42) 33]
Train Case:  33 | Input/Output: [(10 58 59 0) 0]
Train Case:  34 | Input/Output: [(3 20 38 93) 3]
Train Case:  35 | Input/Output: [(91 48 2 75) 2]
Train Case:  36 | Input/Output: [(46 70 4 15) 4]
Train Case:  37 | Input/Output: [(41 68 56 14) 14]
Train Case:  38 | Input/Output: [(70 4 66 25) 4]
Train Case:  39 | Input/Output: [(13 9 61 37) 9]
Train Case:  40 | Input/Output: [(12 -55 -43 38) -55]
Train Case:  41 | Input/Output: [(0 22 9 95) 0]
Train Case:  42 | Input/Output: [(-80 -18 -44 78) -80]
Train Case:  43 | Input/Output: [(6 -6 -26 -51) -51]
Train Case:  44 | Input/Output: [(-82 80 94 -88) -88]
Train Case:  45 | Input/Output: [(-90 -13 -95 -45) -95]
Train Case:  46 | Input/Output: [(39 -92 5 23) -92]
Train Case:  47 | Input/Output: [(-2 15 -2 -21) -21]
Train Case:  48 | Input/Output: [(-70 -37 49 -92) -92]
Train Case:  49 | Input/Output: [(60 8 -74 -41) -74]
Train Case:  50 | Input/Output: [(7 38 53 93) 7]
Train Case:  51 | Input/Output: [(19 17 5 49) 5]
Train Case:  52 | Input/Output: [(90 85 -32 -76) -76]
Train Case:  53 | Input/Output: [(5 32 -93 52) -93]
Train Case:  54 | Input/Output: [(87 -76 88 76) -76]
Train Case:  55 | Input/Output: [(0 -87 -70 66) -87]
Train Case:  56 | Input/Output: [(-44 -11 -100 11) -100]
Train Case:  57 | Input/Output: [(28 16 -36 27) -36]
Train Case:  58 | Input/Output: [(52 -24 -3 26) -24]
Train Case:  59 | Input/Output: [(30 1 49 -30) -30]
Train Case:  60 | Input/Output: [(87 -86 -24 -82) -86]
Train Case:  61 | Input/Output: [(32 -53 20 -49) -53]
Train Case:  62 | Input/Output: [(32 65 -14 58) -14]
Train Case:  63 | Input/Output: [(42 95 -75 65) -75]
Train Case:  64 | Input/Output: [(-100 80 -64 -48) -100]
Train Case:  65 | Input/Output: [(51 94 34 -43) -43]
Train Case:  66 | Input/Output: [(57 -16 79 -64) -64]
Train Case:  67 | Input/Output: [(11 -80 66 -71) -80]
Train Case:  68 | Input/Output: [(-81 32 3 40) -81]
Train Case:  69 | Input/Output: [(52 -88 -85 -78) -88]
Train Case:  70 | Input/Output: [(65 43 -10 43) -10]
Train Case:  71 | Input/Output: [(-70 -93 15 -80) -93]
Train Case:  72 | Input/Output: [(-93 39 69 93) -93]
Train Case:  73 | Input/Output: [(43 32 -14 11) -14]
Train Case:  74 | Input/Output: [(-2 6 -76 -88) -88]
Train Case:  75 | Input/Output: [(48 -50 52 -96) -96]
Train Case:  76 | Input/Output: [(4 -40 69 -22) -40]
Train Case:  77 | Input/Output: [(86 25 42 -50) -50]
Train Case:  78 | Input/Output: [(50 -98 -20 81) -98]
Train Case:  79 | Input/Output: [(5 -83 73 7) -83]
Train Case:  80 | Input/Output: [(29 -47 73 41) -47]
Train Case:  81 | Input/Output: [(50 -95 -93 -77) -95]
Train Case:  82 | Input/Output: [(-81 -6 3 96) -81]
Train Case:  83 | Input/Output: [(40 29 19 -49) -49]
Train Case:  84 | Input/Output: [(58 31 50 -71) -71]
Train Case:  85 | Input/Output: [(-54 -13 -41 15) -54]
Train Case:  86 | Input/Output: [(-33 80 58 -40) -40]
Train Case:  87 | Input/Output: [(73 23 -24 -62) -62]
Train Case:  88 | Input/Output: [(-73 47 22 6) -73]
Train Case:  89 | Input/Output: [(-15 65 80 56) -15]
Train Case:  90 | Input/Output: [(47 -69 -43 -58) -69]
Train Case:  91 | Input/Output: [(1 -34 75 -29) -34]
Train Case:  92 | Input/Output: [(-100 100 -87 -69) -100]
Train Case:  93 | Input/Output: [(75 -56 56 -9) -56]
Train Case:  94 | Input/Output: [(-19 -12 -82 -67) -82]
Train Case:  95 | Input/Output: [(-87 23 -62 1) -87]
Train Case:  96 | Input/Output: [(-43 -34 56 60) -43]
Train Case:  97 | Input/Output: [(36 35 92 -13) -13]
Train Case:  98 | Input/Output: [(-57 45 99 73) -57]
Train Case:  99 | Input/Output: [(-44 88 -63 68) -63]
Test Case:   0 | Input/Output: [[-26 -26 -26 58] -26]
Test Case:   1 | Input/Output: [[2 2 2 33] 2]
Test Case:   2 | Input/Output: [[-53 63 -53 -53] -53]
Test Case:   3 | Input/Output: [[64 64 64 64] 64]
Test Case:   4 | Input/Output: [[-14 -78 -78 -78] -78]
Test Case:   5 | Input/Output: [[84 84 84 70] 70]
Test Case:   6 | Input/Output: [[44 44 86 44] 44]
Test Case:   7 | Input/Output: [[-1 -1 -1 -100] -100]
Test Case:   8 | Input/Output: [[-66 -66 -66 33] -66]
Test Case:   9 | Input/Output: [[-74 46 -74 -74] -74]
Test Case:  10 | Input/Output: [[-30 14 14 14] -30]
Test Case:  11 | Input/Output: [[-37 72 72 72] -37]
Test Case:  12 | Input/Output: [[10 11 10 10] 10]
Test Case:  13 | Input/Output: [[70 70 45 70] 45]
Test Case:  14 | Input/Output: [[58 58 52 58] 52]
Test Case:  15 | Input/Output: [[35 35 35 -50] -50]
Test Case:  16 | Input/Output: [[-40 -40 -58 -40] -58]
Test Case:  17 | Input/Output: [[-97 -97 93 -97] -97]
Test Case:  18 | Input/Output: [[-99 -80 -80 -80] -99]
Test Case:  19 | Input/Output: [[36 36 36 10] 10]
Test Case:  20 | Input/Output: [[-36 37 -36 -36] -36]
Test Case:  21 | Input/Output: [[-33 -83 -83 -83] -83]
Test Case:  22 | Input/Output: [[-97 -97 8 -97] -97]
Test Case:  23 | Input/Output: [[66 66 -57 66] -57]
Test Case:  24 | Input/Output: [[-45 -45 10 -45] -45]
Test Case:  25 | Input/Output: [[21 -59 21 21] -59]
Test Case:  26 | Input/Output: [[-43 -83 -83 -83] -83]
Test Case:  27 | Input/Output: [[14 -43 -43 -43] -43]
Test Case:  28 | Input/Output: [[82 82 82 -34] -34]
Test Case:  29 | Input/Output: [[19 20 20 20] 19]
Test Case:  30 | Input/Output: [[26 74 26 26] 26]
Test Case:  31 | Input/Output: [[-100 -100 -25 -100] -100]
Test Case:  32 | Input/Output: [[74 90 74 74] 74]
Test Case:  33 | Input/Output: [[-24 -47 -47 -47] -47]
Test Case:  34 | Input/Output: [[-12 14 14 14] -12]
Test Case:  35 | Input/Output: [[-60 -67 -67 -67] -67]
Test Case:  36 | Input/Output: [[-32 -32 -32 49] -32]
Test Case:  37 | Input/Output: [[48 48 -65 48] -65]
Test Case:  38 | Input/Output: [[75 41 75 75] 41]
Test Case:  39 | Input/Output: [[12 -72 12 12] -72]
Test Case:  40 | Input/Output: [[-73 -47 -47 -47] -73]
Test Case:  41 | Input/Output: [[-36 -79 -79 -79] -79]
Test Case:  42 | Input/Output: [[68 68 36 68] 36]
Test Case:  43 | Input/Output: [[4 30 30 30] 4]
Test Case:  44 | Input/Output: [[53 53 -99 53] -99]
Test Case:  45 | Input/Output: [[-1 -1 57 -1] -1]
Test Case:  46 | Input/Output: [[-5 -5 -5 90] -5]
Test Case:  47 | Input/Output: [[38 38 38 -12] -12]
Test Case:  48 | Input/Output: [[62 49 49 49] 49]
Test Case:  49 | Input/Output: [[-65 -65 -25 -65] -65]
Test Case:  50 | Input/Output: [[12 12 12 -47] -47]
Test Case:  51 | Input/Output: [[-72 -72 -72 -82] -82]
Test Case:  52 | Input/Output: [[88 88 88 48] 48]
Test Case:  53 | Input/Output: [[85 27 27 27] 27]
Test Case:  54 | Input/Output: [[-85 -55 -55 -55] -85]
Test Case:  55 | Input/Output: [[-20 90 -20 -20] -20]
Test Case:  56 | Input/Output: [[-64 -64 -64 15] -64]
Test Case:  57 | Input/Output: [[-98 -98 -98 -17] -98]
Test Case:  58 | Input/Output: [[51 51 -98 51] -98]
Test Case:  59 | Input/Output: [[-22 -5 -5 -5] -22]
Test Case:  60 | Input/Output: [[-61 89 89 89] -61]
Test Case:  61 | Input/Output: [[-3 -56 -3 -3] -56]
Test Case:  62 | Input/Output: [[-49 -49 -49 -92] -92]
Test Case:  63 | Input/Output: [[-52 -57 -57 -57] -57]
Test Case:  64 | Input/Output: [[-7 -7 7 -7] -7]
Test Case:  65 | Input/Output: [[28 28 -12 28] -12]
Test Case:  66 | Input/Output: [[90 -58 -58 -58] -58]
Test Case:  67 | Input/Output: [[29 29 29 59] 29]
Test Case:  68 | Input/Output: [[-83 -43 -83 -83] -83]
Test Case:  69 | Input/Output: [[10 10 10 30] 10]
Test Case:  70 | Input/Output: [[40 40 40 -31] -31]
Test Case:  71 | Input/Output: [[92 92 47 92] 47]
Test Case:  72 | Input/Output: [[94 15 94 94] 15]
Test Case:  73 | Input/Output: [[74 74 68 74] 68]
Test Case:  74 | Input/Output: [[-26 60 -26 -26] -26]
Test Case:  75 | Input/Output: [[68 -80 68 68] -80]
Test Case:  76 | Input/Output: [[60 60 60 88] 60]
Test Case:  77 | Input/Output: [[-56 -84 -84 -84] -84]
Test Case:  78 | Input/Output: [[-95 -95 -95 35] -95]
Test Case:  79 | Input/Output: [[-67 -58 -67 -67] -67]
Test Case:  80 | Input/Output: [[88 80 80 80] 80]
Test Case:  81 | Input/Output: [[-43 54 54 54] -43]
Test Case:  82 | Input/Output: [[-88 33 -88 -88] -88]
Test Case:  83 | Input/Output: [[73 73 -91 73] -91]
Test Case:  84 | Input/Output: [[17 17 -36 17] -36]
Test Case:  85 | Input/Output: [[-24 -24 76 -24] -24]
Test Case:  86 | Input/Output: [[77 -59 77 77] -59]
Test Case:  87 | Input/Output: [[23 23 23 -50] -50]
Test Case:  88 | Input/Output: [[-95 -50 -95 -95] -95]
Test Case:  89 | Input/Output: [[-30 46 -30 -30] -30]
Test Case:  90 | Input/Output: [[35 35 35 69] 35]
Test Case:  91 | Input/Output: [[-76 -23 -23 -23] -76]
Test Case:  92 | Input/Output: [[38 -45 -45 -45] -45]
Test Case:  93 | Input/Output: [[19 19 19 29] 19]
Test Case:  94 | Input/Output: [[-74 -74 7 -74] -74]
Test Case:  95 | Input/Output: [[-32 -32 -69 -32] -69]
Test Case:  96 | Input/Output: [[61 61 61 62] 61]
Test Case:  97 | Input/Output: [[-67 -67 41 -67] -67]
Test Case:  98 | Input/Output: [[-71 60 60 60] -71]
Test Case:  99 | Input/Output: [[-44 -44 -44 16] -44]
Test Case: 100 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 101 | Input/Output: [(60 60 60 60) 60]
Test Case: 102 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 103 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 104 | Input/Output: [(3 3 3 3) 3]
Test Case: 105 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 106 | Input/Output: [(100 100 100 100) 100]
Test Case: 107 | Input/Output: [(5 5 5 5) 5]
Test Case: 108 | Input/Output: [(26 26 26 26) 26]
Test Case: 109 | Input/Output: [(69 69 69 69) 69]
Test Case: 110 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 111 | Input/Output: [(64 64 64 64) 64]
Test Case: 112 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 113 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 114 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 115 | Input/Output: [(9 9 9 9) 9]
Test Case: 116 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 117 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 118 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 119 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 120 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 121 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 122 | Input/Output: [(61 61 61 61) 61]
Test Case: 123 | Input/Output: [(15 15 15 15) 15]
Test Case: 124 | Input/Output: [(16 16 16 16) 16]
Test Case: 125 | Input/Output: [(87 87 87 87) 87]
Test Case: 126 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 127 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 128 | Input/Output: [(81 81 81 81) 81]
Test Case: 129 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 130 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 131 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 132 | Input/Output: [(15 15 15 15) 15]
Test Case: 133 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 134 | Input/Output: [(100 100 100 100) 100]
Test Case: 135 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 136 | Input/Output: [(62 62 62 62) 62]
Test Case: 137 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 138 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 139 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 140 | Input/Output: [(37 37 37 37) 37]
Test Case: 141 | Input/Output: [(92 92 92 92) 92]
Test Case: 142 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 143 | Input/Output: [(30 30 30 30) 30]
Test Case: 144 | Input/Output: [(84 84 84 84) 84]
Test Case: 145 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 146 | Input/Output: [(1 1 1 1) 1]
Test Case: 147 | Input/Output: [(96 96 96 96) 96]
Test Case: 148 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 149 | Input/Output: [(60 60 60 60) 60]
Test Case: 150 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 151 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 152 | Input/Output: [(26 26 26 26) 26]
Test Case: 153 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 154 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 155 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 156 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 157 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 158 | Input/Output: [(45 45 45 45) 45]
Test Case: 159 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 160 | Input/Output: [(100 100 100 100) 100]
Test Case: 161 | Input/Output: [(84 84 84 84) 84]
Test Case: 162 | Input/Output: [(23 23 23 23) 23]
Test Case: 163 | Input/Output: [(74 74 74 74) 74]
Test Case: 164 | Input/Output: [(92 92 92 92) 92]
Test Case: 165 | Input/Output: [(84 84 84 84) 84]
Test Case: 166 | Input/Output: [(40 40 40 40) 40]
Test Case: 167 | Input/Output: [(7 7 7 7) 7]
Test Case: 168 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 169 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 170 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 171 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 172 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 173 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 174 | Input/Output: [(75 75 75 75) 75]
Test Case: 175 | Input/Output: [(52 52 52 52) 52]
Test Case: 176 | Input/Output: [(97 97 97 97) 97]
Test Case: 177 | Input/Output: [(47 47 47 47) 47]
Test Case: 178 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 179 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 180 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 181 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 182 | Input/Output: [(52 52 52 52) 52]
Test Case: 183 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 184 | Input/Output: [(58 58 58 58) 58]
Test Case: 185 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 186 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 187 | Input/Output: [(30 30 30 30) 30]
Test Case: 188 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 189 | Input/Output: [(82 82 82 82) 82]
Test Case: 190 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 191 | Input/Output: [(10 10 10 10) 10]
Test Case: 192 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 193 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 194 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 195 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 196 | Input/Output: [(3 3 3 3) 3]
Test Case: 197 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 198 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 199 | Input/Output: [(56 56 56 56) 56]
Test Case: 200 | Input/Output: [(73 11 21 5) 5]
Test Case: 201 | Input/Output: [(6 22 95 90) 6]
Test Case: 202 | Input/Output: [(25 52 22 54) 22]
Test Case: 203 | Input/Output: [(30 44 97 4) 4]
Test Case: 204 | Input/Output: [(20 46 79 70) 20]
Test Case: 205 | Input/Output: [(97 52 36 57) 36]
Test Case: 206 | Input/Output: [(93 46 98 41) 41]
Test Case: 207 | Input/Output: [(82 43 61 67) 43]
Test Case: 208 | Input/Output: [(73 25 75 41) 25]
Test Case: 209 | Input/Output: [(87 39 65 4) 4]
Test Case: 210 | Input/Output: [(28 13 82 4) 4]
Test Case: 211 | Input/Output: [(96 44 76 95) 44]
Test Case: 212 | Input/Output: [(93 28 40 41) 28]
Test Case: 213 | Input/Output: [(24 33 42 75) 24]
Test Case: 214 | Input/Output: [(90 60 78 25) 25]
Test Case: 215 | Input/Output: [(75 19 94 75) 19]
Test Case: 216 | Input/Output: [(2 3 39 43) 2]
Test Case: 217 | Input/Output: [(0 50 73 11) 0]
Test Case: 218 | Input/Output: [(31 15 47 4) 4]
Test Case: 219 | Input/Output: [(61 71 50 0) 0]
Test Case: 220 | Input/Output: [(98 90 74 30) 30]
Test Case: 221 | Input/Output: [(100 39 87 60) 39]
Test Case: 222 | Input/Output: [(87 88 7 96) 7]
Test Case: 223 | Input/Output: [(58 92 18 82) 18]
Test Case: 224 | Input/Output: [(1 56 26 33) 1]
Test Case: 225 | Input/Output: [(30 52 32 55) 30]
Test Case: 226 | Input/Output: [(95 66 29 34) 29]
Test Case: 227 | Input/Output: [(3 51 10 47) 3]
Test Case: 228 | Input/Output: [(81 17 49 28) 17]
Test Case: 229 | Input/Output: [(65 5 11 43) 5]
Test Case: 230 | Input/Output: [(62 13 98 93) 13]
Test Case: 231 | Input/Output: [(41 51 82 63) 41]
Test Case: 232 | Input/Output: [(76 5 36 86) 5]
Test Case: 233 | Input/Output: [(10 40 70 0) 0]
Test Case: 234 | Input/Output: [(22 100 72 82) 22]
Test Case: 235 | Input/Output: [(64 63 96 6) 6]
Test Case: 236 | Input/Output: [(68 41 55 36) 36]
Test Case: 237 | Input/Output: [(43 10 56 51) 10]
Test Case: 238 | Input/Output: [(46 50 6 9) 6]
Test Case: 239 | Input/Output: [(61 31 61 87) 31]
Test Case: 240 | Input/Output: [(0 36 1 26) 0]
Test Case: 241 | Input/Output: [(71 59 83 53) 53]
Test Case: 242 | Input/Output: [(57 76 66 97) 57]
Test Case: 243 | Input/Output: [(51 95 44 36) 36]
Test Case: 244 | Input/Output: [(43 32 26 17) 17]
Test Case: 245 | Input/Output: [(98 64 75 28) 28]
Test Case: 246 | Input/Output: [(56 1 19 67) 1]
Test Case: 247 | Input/Output: [(24 88 79 61) 24]
Test Case: 248 | Input/Output: [(50 29 98 100) 29]
Test Case: 249 | Input/Output: [(50 43 100 62) 43]
Test Case: 250 | Input/Output: [(86 43 78 79) 43]
Test Case: 251 | Input/Output: [(61 30 81 99) 30]
Test Case: 252 | Input/Output: [(82 21 29 35) 21]
Test Case: 253 | Input/Output: [(77 38 12 91) 12]
Test Case: 254 | Input/Output: [(55 17 69 24) 17]
Test Case: 255 | Input/Output: [(9 64 72 36) 9]
Test Case: 256 | Input/Output: [(0 7 44 32) 0]
Test Case: 257 | Input/Output: [(99 33 65 72) 33]
Test Case: 258 | Input/Output: [(67 4 3 6) 3]
Test Case: 259 | Input/Output: [(67 95 79 68) 67]
Test Case: 260 | Input/Output: [(11 57 2 37) 2]
Test Case: 261 | Input/Output: [(39 19 6 80) 6]
Test Case: 262 | Input/Output: [(44 6 30 20) 6]
Test Case: 263 | Input/Output: [(31 46 15 35) 15]
Test Case: 264 | Input/Output: [(22 29 74 26) 22]
Test Case: 265 | Input/Output: [(32 54 60 10) 10]
Test Case: 266 | Input/Output: [(86 56 14 72) 14]
Test Case: 267 | Input/Output: [(67 44 38 50) 38]
Test Case: 268 | Input/Output: [(63 14 79 97) 14]
Test Case: 269 | Input/Output: [(34 89 71 48) 34]
Test Case: 270 | Input/Output: [(0 4 27 36) 0]
Test Case: 271 | Input/Output: [(94 42 17 76) 17]
Test Case: 272 | Input/Output: [(78 24 79 41) 24]
Test Case: 273 | Input/Output: [(85 0 44 50) 0]
Test Case: 274 | Input/Output: [(43 93 74 38) 38]
Test Case: 275 | Input/Output: [(40 43 79 87) 40]
Test Case: 276 | Input/Output: [(61 32 59 94) 32]
Test Case: 277 | Input/Output: [(99 16 15 22) 15]
Test Case: 278 | Input/Output: [(92 51 16 13) 13]
Test Case: 279 | Input/Output: [(82 67 38 47) 38]
Test Case: 280 | Input/Output: [(30 61 15 8) 8]
Test Case: 281 | Input/Output: [(31 41 7 20) 7]
Test Case: 282 | Input/Output: [(86 26 58 33) 26]
Test Case: 283 | Input/Output: [(10 28 24 2) 2]
Test Case: 284 | Input/Output: [(9 11 100 13) 9]
Test Case: 285 | Input/Output: [(24 69 100 79) 24]
Test Case: 286 | Input/Output: [(89 88 84 73) 73]
Test Case: 287 | Input/Output: [(83 46 57 64) 46]
Test Case: 288 | Input/Output: [(93 81 12 24) 12]
Test Case: 289 | Input/Output: [(91 99 54 82) 54]
Test Case: 290 | Input/Output: [(11 4 76 43) 4]
Test Case: 291 | Input/Output: [(1 88 86 100) 1]
Test Case: 292 | Input/Output: [(26 37 59 42) 26]
Test Case: 293 | Input/Output: [(91 23 58 77) 23]
Test Case: 294 | Input/Output: [(60 65 42 37) 37]
Test Case: 295 | Input/Output: [(35 1 62 59) 1]
Test Case: 296 | Input/Output: [(58 91 12 71) 12]
Test Case: 297 | Input/Output: [(65 3 40 73) 3]
Test Case: 298 | Input/Output: [(30 26 27 71) 26]
Test Case: 299 | Input/Output: [(91 75 54 27) 27]
Test Case: 300 | Input/Output: [(63 19 34 57) 19]
Test Case: 301 | Input/Output: [(32 31 30 63) 30]
Test Case: 302 | Input/Output: [(90 22 59 80) 22]
Test Case: 303 | Input/Output: [(54 100 27 69) 27]
Test Case: 304 | Input/Output: [(38 43 15 10) 10]
Test Case: 305 | Input/Output: [(90 61 94 69) 61]
Test Case: 306 | Input/Output: [(5 17 82 13) 5]
Test Case: 307 | Input/Output: [(19 70 82 80) 19]
Test Case: 308 | Input/Output: [(80 85 81 25) 25]
Test Case: 309 | Input/Output: [(56 63 48 73) 48]
Test Case: 310 | Input/Output: [(4 77 98 38) 4]
Test Case: 311 | Input/Output: [(5 73 12 47) 5]
Test Case: 312 | Input/Output: [(5 96 99 94) 5]
Test Case: 313 | Input/Output: [(55 39 66 27) 27]
Test Case: 314 | Input/Output: [(48 18 68 3) 3]
Test Case: 315 | Input/Output: [(33 18 47 100) 18]
Test Case: 316 | Input/Output: [(33 91 96 52) 33]
Test Case: 317 | Input/Output: [(34 95 84 69) 34]
Test Case: 318 | Input/Output: [(29 77 93 64) 29]
Test Case: 319 | Input/Output: [(49 65 2 47) 2]
Test Case: 320 | Input/Output: [(91 48 61 99) 48]
Test Case: 321 | Input/Output: [(49 7 65 90) 7]
Test Case: 322 | Input/Output: [(92 29 4 3) 3]
Test Case: 323 | Input/Output: [(2 66 88 32) 2]
Test Case: 324 | Input/Output: [(20 15 30 2) 2]
Test Case: 325 | Input/Output: [(31 17 38 83) 17]
Test Case: 326 | Input/Output: [(42 2 34 36) 2]
Test Case: 327 | Input/Output: [(97 84 45 44) 44]
Test Case: 328 | Input/Output: [(36 16 98 22) 16]
Test Case: 329 | Input/Output: [(66 81 94 31) 31]
Test Case: 330 | Input/Output: [(48 79 15 0) 0]
Test Case: 331 | Input/Output: [(34 93 26 50) 26]
Test Case: 332 | Input/Output: [(80 39 13 52) 13]
Test Case: 333 | Input/Output: [(6 21 50 46) 6]
Test Case: 334 | Input/Output: [(42 21 75 0) 0]
Test Case: 335 | Input/Output: [(76 98 75 18) 18]
Test Case: 336 | Input/Output: [(24 23 39 16) 16]
Test Case: 337 | Input/Output: [(65 78 65 43) 43]
Test Case: 338 | Input/Output: [(30 97 99 77) 30]
Test Case: 339 | Input/Output: [(6 75 3 56) 3]
Test Case: 340 | Input/Output: [(0 50 96 4) 0]
Test Case: 341 | Input/Output: [(51 85 24 63) 24]
Test Case: 342 | Input/Output: [(99 22 52 36) 22]
Test Case: 343 | Input/Output: [(6 95 35 62) 6]
Test Case: 344 | Input/Output: [(52 78 9 7) 7]
Test Case: 345 | Input/Output: [(77 75 59 1) 1]
Test Case: 346 | Input/Output: [(99 27 42 33) 27]
Test Case: 347 | Input/Output: [(83 36 27 31) 27]
Test Case: 348 | Input/Output: [(81 27 1 31) 1]
Test Case: 349 | Input/Output: [(82 33 38 93) 33]
Test Case: 350 | Input/Output: [(10 28 92 100) 10]
Test Case: 351 | Input/Output: [(37 82 89 52) 37]
Test Case: 352 | Input/Output: [(47 0 78 98) 0]
Test Case: 353 | Input/Output: [(15 82 30 99) 15]
Test Case: 354 | Input/Output: [(14 12 4 3) 3]
Test Case: 355 | Input/Output: [(91 42 64 45) 42]
Test Case: 356 | Input/Output: [(7 97 64 76) 7]
Test Case: 357 | Input/Output: [(34 40 57 0) 0]
Test Case: 358 | Input/Output: [(1 86 58 2) 1]
Test Case: 359 | Input/Output: [(79 71 86 20) 20]
Test Case: 360 | Input/Output: [(49 40 33 90) 33]
Test Case: 361 | Input/Output: [(30 79 37 75) 30]
Test Case: 362 | Input/Output: [(67 95 93 81) 67]
Test Case: 363 | Input/Output: [(52 39 4 48) 4]
Test Case: 364 | Input/Output: [(5 12 82 90) 5]
Test Case: 365 | Input/Output: [(3 38 9 27) 3]
Test Case: 366 | Input/Output: [(51 49 57 83) 49]
Test Case: 367 | Input/Output: [(18 30 35 88) 18]
Test Case: 368 | Input/Output: [(24 82 14 96) 14]
Test Case: 369 | Input/Output: [(93 93 47 84) 47]
Test Case: 370 | Input/Output: [(75 50 76 87) 50]
Test Case: 371 | Input/Output: [(22 64 36 95) 22]
Test Case: 372 | Input/Output: [(1 37 2 64) 1]
Test Case: 373 | Input/Output: [(39 12 47 54) 12]
Test Case: 374 | Input/Output: [(28 60 8 38) 8]
Test Case: 375 | Input/Output: [(29 84 41 71) 29]
Test Case: 376 | Input/Output: [(68 92 64 53) 53]
Test Case: 377 | Input/Output: [(66 73 0 36) 0]
Test Case: 378 | Input/Output: [(41 15 74 72) 15]
Test Case: 379 | Input/Output: [(71 40 77 47) 40]
Test Case: 380 | Input/Output: [(76 91 92 65) 65]
Test Case: 381 | Input/Output: [(3 26 19 89) 3]
Test Case: 382 | Input/Output: [(53 11 53 62) 11]
Test Case: 383 | Input/Output: [(28 29 50 7) 7]
Test Case: 384 | Input/Output: [(100 39 76 76) 39]
Test Case: 385 | Input/Output: [(28 84 21 55) 21]
Test Case: 386 | Input/Output: [(61 21 37 38) 21]
Test Case: 387 | Input/Output: [(63 72 16 47) 16]
Test Case: 388 | Input/Output: [(63 45 43 96) 43]
Test Case: 389 | Input/Output: [(66 73 60 24) 24]
Test Case: 390 | Input/Output: [(35 1 30 68) 1]
Test Case: 391 | Input/Output: [(41 21 94 37) 21]
Test Case: 392 | Input/Output: [(99 7 18 3) 3]
Test Case: 393 | Input/Output: [(10 36 73 91) 10]
Test Case: 394 | Input/Output: [(68 71 94 49) 49]
Test Case: 395 | Input/Output: [(8 100 88 23) 8]
Test Case: 396 | Input/Output: [(23 14 79 68) 14]
Test Case: 397 | Input/Output: [(13 89 57 5) 5]
Test Case: 398 | Input/Output: [(57 87 2 36) 2]
Test Case: 399 | Input/Output: [(88 7 9 95) 7]
Test Case: 400 | Input/Output: [(-10 16 82 -6) -10]
Test Case: 401 | Input/Output: [(65 -60 -28 -92) -92]
Test Case: 402 | Input/Output: [(4 -7 -91 71) -91]
Test Case: 403 | Input/Output: [(67 -92 -48 -68) -92]
Test Case: 404 | Input/Output: [(96 46 3 54) 3]
Test Case: 405 | Input/Output: [(-38 -71 7 -2) -71]
Test Case: 406 | Input/Output: [(14 16 -43 -82) -82]
Test Case: 407 | Input/Output: [(1 68 22 1) 1]
Test Case: 408 | Input/Output: [(10 19 -56 -35) -56]
Test Case: 409 | Input/Output: [(12 59 61 -74) -74]
Test Case: 410 | Input/Output: [(0 42 79 35) 0]
Test Case: 411 | Input/Output: [(-52 53 -57 -10) -57]
Test Case: 412 | Input/Output: [(52 -81 47 -35) -81]
Test Case: 413 | Input/Output: [(82 93 61 -62) -62]
Test Case: 414 | Input/Output: [(-16 89 98 14) -16]
Test Case: 415 | Input/Output: [(-54 -50 -43 89) -54]
Test Case: 416 | Input/Output: [(51 -83 43 -10) -83]
Test Case: 417 | Input/Output: [(22 -85 41 -99) -99]
Test Case: 418 | Input/Output: [(49 91 -17 46) -17]
Test Case: 419 | Input/Output: [(-89 49 -5 8) -89]
Test Case: 420 | Input/Output: [(-62 32 -46 -82) -82]
Test Case: 421 | Input/Output: [(-72 -75 57 -15) -75]
Test Case: 422 | Input/Output: [(-22 78 -9 -38) -38]
Test Case: 423 | Input/Output: [(-86 -59 19 82) -86]
Test Case: 424 | Input/Output: [(17 44 33 -61) -61]
Test Case: 425 | Input/Output: [(46 -84 64 -84) -84]
Test Case: 426 | Input/Output: [(56 -45 -7 -81) -81]
Test Case: 427 | Input/Output: [(16 -10 -33 -79) -79]
Test Case: 428 | Input/Output: [(63 -86 -3 -15) -86]
Test Case: 429 | Input/Output: [(-33 -35 -10 -64) -64]
Test Case: 430 | Input/Output: [(-13 -32 -47 -22) -47]
Test Case: 431 | Input/Output: [(30 0 -82 -22) -82]
Test Case: 432 | Input/Output: [(83 -17 10 -11) -17]
Test Case: 433 | Input/Output: [(-49 41 -85 71) -85]
Test Case: 434 | Input/Output: [(59 89 6 -38) -38]
Test Case: 435 | Input/Output: [(47 -52 -24 -81) -81]
Test Case: 436 | Input/Output: [(-34 -11 -80 53) -80]
Test Case: 437 | Input/Output: [(64 -39 -75 40) -75]
Test Case: 438 | Input/Output: [(-44 -73 11 -40) -73]
Test Case: 439 | Input/Output: [(69 1 -27 -24) -27]
Test Case: 440 | Input/Output: [(-32 -46 -38 60) -46]
Test Case: 441 | Input/Output: [(-77 -34 78 -83) -83]
Test Case: 442 | Input/Output: [(-90 -8 -65 -99) -99]
Test Case: 443 | Input/Output: [(6 33 -94 -33) -94]
Test Case: 444 | Input/Output: [(70 88 -44 93) -44]
Test Case: 445 | Input/Output: [(73 -2 73 -12) -12]
Test Case: 446 | Input/Output: [(-81 -45 62 86) -81]
Test Case: 447 | Input/Output: [(-54 18 -100 38) -100]
Test Case: 448 | Input/Output: [(43 -98 -50 93) -98]
Test Case: 449 | Input/Output: [(-91 52 -64 96) -91]
Test Case: 450 | Input/Output: [(46 -45 58 -76) -76]
Test Case: 451 | Input/Output: [(66 -53 8 -51) -53]
Test Case: 452 | Input/Output: [(-32 -37 -76 -24) -76]
Test Case: 453 | Input/Output: [(-34 14 2 52) -34]
Test Case: 454 | Input/Output: [(14 -82 -32 -9) -82]
Test Case: 455 | Input/Output: [(-85 69 -80 -48) -85]
Test Case: 456 | Input/Output: [(58 -77 54 61) -77]
Test Case: 457 | Input/Output: [(41 96 75 48) 41]
Test Case: 458 | Input/Output: [(-60 58 88 37) -60]
Test Case: 459 | Input/Output: [(-91 -72 73 69) -91]
Test Case: 460 | Input/Output: [(-68 -15 97 11) -68]
Test Case: 461 | Input/Output: [(49 -85 53 -62) -85]
Test Case: 462 | Input/Output: [(-70 -37 -17 89) -70]
Test Case: 463 | Input/Output: [(44 -1 86 61) -1]
Test Case: 464 | Input/Output: [(95 -32 -60 -40) -60]
Test Case: 465 | Input/Output: [(-68 6 -37 69) -68]
Test Case: 466 | Input/Output: [(88 -20 53 -87) -87]
Test Case: 467 | Input/Output: [(-52 44 16 0) -52]
Test Case: 468 | Input/Output: [(55 26 24 13) 13]
Test Case: 469 | Input/Output: [(3 -5 89 -90) -90]
Test Case: 470 | Input/Output: [(-86 -88 76 -53) -88]
Test Case: 471 | Input/Output: [(28 -64 -87 15) -87]
Test Case: 472 | Input/Output: [(11 96 58 -94) -94]
Test Case: 473 | Input/Output: [(27 -41 66 79) -41]
Test Case: 474 | Input/Output: [(96 -93 98 38) -93]
Test Case: 475 | Input/Output: [(-7 38 49 -54) -54]
Test Case: 476 | Input/Output: [(27 -99 89 70) -99]
Test Case: 477 | Input/Output: [(74 -43 -19 45) -43]
Test Case: 478 | Input/Output: [(-80 -47 -55 25) -80]
Test Case: 479 | Input/Output: [(57 51 40 58) 40]
Test Case: 480 | Input/Output: [(4 -36 -3 72) -36]
Test Case: 481 | Input/Output: [(99 3 -71 -61) -71]
Test Case: 482 | Input/Output: [(15 17 -19 19) -19]
Test Case: 483 | Input/Output: [(96 67 -83 15) -83]
Test Case: 484 | Input/Output: [(34 -39 67 -18) -39]
Test Case: 485 | Input/Output: [(-6 41 77 -78) -78]
Test Case: 486 | Input/Output: [(64 -55 41 -60) -60]
Test Case: 487 | Input/Output: [(-6 90 64 -8) -8]
Test Case: 488 | Input/Output: [(44 -36 80 78) -36]
Test Case: 489 | Input/Output: [(29 -83 -5 77) -83]
Test Case: 490 | Input/Output: [(-23 57 78 17) -23]
Test Case: 491 | Input/Output: [(-79 12 -85 -74) -85]
Test Case: 492 | Input/Output: [(-7 2 30 56) -7]
Test Case: 493 | Input/Output: [(27 -79 -82 4) -82]
Test Case: 494 | Input/Output: [(-58 -38 19 20) -58]
Test Case: 495 | Input/Output: [(2 -87 59 -14) -87]
Test Case: 496 | Input/Output: [(15 76 97 -81) -81]
Test Case: 497 | Input/Output: [(17 -64 22 -64) -64]
Test Case: 498 | Input/Output: [(-98 8 -70 57) -98]
Test Case: 499 | Input/Output: [(61 25 -51 -6) -51]
Test Case: 500 | Input/Output: [(-90 -44 -70 55) -90]
Test Case: 501 | Input/Output: [(22 56 -25 54) -25]
Test Case: 502 | Input/Output: [(6 29 -98 22) -98]
Test Case: 503 | Input/Output: [(37 -49 -59 92) -59]
Test Case: 504 | Input/Output: [(25 -52 -48 -62) -62]
Test Case: 505 | Input/Output: [(-87 6 0 52) -87]
Test Case: 506 | Input/Output: [(-35 -92 -86 51) -92]
Test Case: 507 | Input/Output: [(4 63 -2 -42) -42]
Test Case: 508 | Input/Output: [(93 -31 90 62) -31]
Test Case: 509 | Input/Output: [(59 -21 59 34) -21]
Test Case: 510 | Input/Output: [(52 -15 -36 7) -36]
Test Case: 511 | Input/Output: [(-21 -11 -74 94) -74]
Test Case: 512 | Input/Output: [(-14 -72 41 82) -72]
Test Case: 513 | Input/Output: [(26 -35 20 -29) -35]
Test Case: 514 | Input/Output: [(-90 -86 98 -20) -90]
Test Case: 515 | Input/Output: [(-96 -1 -14 41) -96]
Test Case: 516 | Input/Output: [(73 88 30 -99) -99]
Test Case: 517 | Input/Output: [(18 0 64 -80) -80]
Test Case: 518 | Input/Output: [(34 89 20 84) 20]
Test Case: 519 | Input/Output: [(-23 -74 51 98) -74]
Test Case: 520 | Input/Output: [(-71 -79 78 20) -79]
Test Case: 521 | Input/Output: [(-27 79 -49 32) -49]
Test Case: 522 | Input/Output: [(67 29 -87 -72) -87]
Test Case: 523 | Input/Output: [(83 51 -11 -35) -35]
Test Case: 524 | Input/Output: [(-64 57 -48 -43) -64]
Test Case: 525 | Input/Output: [(-97 -42 -1 -60) -97]
Test Case: 526 | Input/Output: [(-36 86 79 -75) -75]
Test Case: 527 | Input/Output: [(-39 75 -80 -59) -80]
Test Case: 528 | Input/Output: [(25 9 -1 -5) -5]
Test Case: 529 | Input/Output: [(28 9 33 29) 9]
Test Case: 530 | Input/Output: [(-73 -61 99 7) -73]
Test Case: 531 | Input/Output: [(-44 48 -39 -53) -53]
Test Case: 532 | Input/Output: [(-65 66 3 98) -65]
Test Case: 533 | Input/Output: [(-57 -65 90 64) -65]
Test Case: 534 | Input/Output: [(-25 40 -73 -84) -84]
Test Case: 535 | Input/Output: [(26 5 -12 -99) -99]
Test Case: 536 | Input/Output: [(-7 -24 -93 36) -93]
Test Case: 537 | Input/Output: [(68 -34 -20 25) -34]
Test Case: 538 | Input/Output: [(-53 -28 44 46) -53]
Test Case: 539 | Input/Output: [(-65 -66 -51 -83) -83]
Test Case: 540 | Input/Output: [(-10 43 38 -51) -51]
Test Case: 541 | Input/Output: [(52 -79 -50 -39) -79]
Test Case: 542 | Input/Output: [(-63 -11 66 -46) -63]
Test Case: 543 | Input/Output: [(22 74 49 -22) -22]
Test Case: 544 | Input/Output: [(-96 -77 -78 84) -96]
Test Case: 545 | Input/Output: [(-68 -62 -34 -56) -68]
Test Case: 546 | Input/Output: [(-68 5 91 -1) -68]
Test Case: 547 | Input/Output: [(69 -6 86 -71) -71]
Test Case: 548 | Input/Output: [(-41 -28 79 -31) -41]
Test Case: 549 | Input/Output: [(-6 2 -59 -26) -59]
Test Case: 550 | Input/Output: [(34 62 -78 -39) -78]
Test Case: 551 | Input/Output: [(75 -50 -32 63) -50]
Test Case: 552 | Input/Output: [(78 39 -64 -69) -69]
Test Case: 553 | Input/Output: [(90 -62 92 -70) -70]
Test Case: 554 | Input/Output: [(39 -21 41 43) -21]
Test Case: 555 | Input/Output: [(74 -7 7 -27) -27]
Test Case: 556 | Input/Output: [(-32 34 -29 61) -32]
Test Case: 557 | Input/Output: [(-33 -46 -66 -49) -66]
Test Case: 558 | Input/Output: [(38 28 87 83) 28]
Test Case: 559 | Input/Output: [(89 43 88 15) 15]
Test Case: 560 | Input/Output: [(91 -76 21 28) -76]
Test Case: 561 | Input/Output: [(9 79 -2 1) -2]
Test Case: 562 | Input/Output: [(-1 92 86 71) -1]
Test Case: 563 | Input/Output: [(77 -26 -81 29) -81]
Test Case: 564 | Input/Output: [(8 47 -25 61) -25]
Test Case: 565 | Input/Output: [(18 -70 -31 24) -70]
Test Case: 566 | Input/Output: [(55 1 7 13) 1]
Test Case: 567 | Input/Output: [(-41 -58 -97 13) -97]
Test Case: 568 | Input/Output: [(80 70 -27 84) -27]
Test Case: 569 | Input/Output: [(-39 -76 39 -86) -86]
Test Case: 570 | Input/Output: [(-63 -60 -38 78) -63]
Test Case: 571 | Input/Output: [(33 98 48 -56) -56]
Test Case: 572 | Input/Output: [(-24 -74 75 -68) -74]
Test Case: 573 | Input/Output: [(-90 28 40 83) -90]
Test Case: 574 | Input/Output: [(22 -93 65 -13) -93]
Test Case: 575 | Input/Output: [(49 -92 14 -80) -92]
Test Case: 576 | Input/Output: [(43 51 62 58) 43]
Test Case: 577 | Input/Output: [(89 -81 34 1) -81]
Test Case: 578 | Input/Output: [(-97 53 -5 76) -97]
Test Case: 579 | Input/Output: [(-13 -57 42 -18) -57]
Test Case: 580 | Input/Output: [(-92 -43 -91 23) -92]
Test Case: 581 | Input/Output: [(44 43 -89 73) -89]
Test Case: 582 | Input/Output: [(50 -70 -43 2) -70]
Test Case: 583 | Input/Output: [(65 66 -3 -69) -69]
Test Case: 584 | Input/Output: [(14 -36 -9 30) -36]
Test Case: 585 | Input/Output: [(74 -20 80 8) -20]
Test Case: 586 | Input/Output: [(-1 58 11 63) -1]
Test Case: 587 | Input/Output: [(-84 -90 -84 27) -90]
Test Case: 588 | Input/Output: [(-30 56 91 -44) -44]
Test Case: 589 | Input/Output: [(68 -80 59 100) -80]
Test Case: 590 | Input/Output: [(-56 -70 -28 -59) -70]
Test Case: 591 | Input/Output: [(-64 27 59 -34) -64]
Test Case: 592 | Input/Output: [(85 61 17 -13) -13]
Test Case: 593 | Input/Output: [(22 42 15 -94) -94]
Test Case: 594 | Input/Output: [(-100 -59 52 -70) -100]
Test Case: 595 | Input/Output: [(-44 -83 98 -48) -83]
Test Case: 596 | Input/Output: [(4 -20 -100 36) -100]
Test Case: 597 | Input/Output: [(93 86 -54 -78) -78]
Test Case: 598 | Input/Output: [(-39 59 -20 38) -39]
Test Case: 599 | Input/Output: [(-49 -64 -55 -63) -64]
Test Case: 600 | Input/Output: [(-61 17 81 5) -61]
Test Case: 601 | Input/Output: [(1 66 16 56) 1]
Test Case: 602 | Input/Output: [(61 -76 -88 71) -88]
Test Case: 603 | Input/Output: [(65 -23 53 18) -23]
Test Case: 604 | Input/Output: [(21 -26 -20 -91) -91]
Test Case: 605 | Input/Output: [(-48 -39 38 26) -48]
Test Case: 606 | Input/Output: [(25 68 10 89) 10]
Test Case: 607 | Input/Output: [(-2 -25 81 97) -25]
Test Case: 608 | Input/Output: [(21 -73 -54 98) -73]
Test Case: 609 | Input/Output: [(-35 27 -93 2) -93]
Test Case: 610 | Input/Output: [(-22 51 14 -78) -78]
Test Case: 611 | Input/Output: [(-61 -25 81 71) -61]
Test Case: 612 | Input/Output: [(-2 48 22 20) -2]
Test Case: 613 | Input/Output: [(-99 49 57 -17) -99]
Test Case: 614 | Input/Output: [(13 -54 1 -13) -54]
Test Case: 615 | Input/Output: [(-69 -52 96 -62) -69]
Test Case: 616 | Input/Output: [(8 38 -44 2) -44]
Test Case: 617 | Input/Output: [(30 -32 68 9) -32]
Test Case: 618 | Input/Output: [(8 -56 -52 -96) -96]
Test Case: 619 | Input/Output: [(-84 -80 -64 54) -84]
Test Case: 620 | Input/Output: [(-53 47 21 76) -53]
Test Case: 621 | Input/Output: [(-91 -13 -68 -23) -91]
Test Case: 622 | Input/Output: [(-41 -88 19 -45) -88]
Test Case: 623 | Input/Output: [(94 63 15 -59) -59]
Test Case: 624 | Input/Output: [(-85 0 35 69) -85]
Test Case: 625 | Input/Output: [(-52 -50 62 55) -52]
Test Case: 626 | Input/Output: [(-45 88 49 -73) -73]
Test Case: 627 | Input/Output: [(-14 5 78 -16) -16]
Test Case: 628 | Input/Output: [(74 37 -31 -74) -74]
Test Case: 629 | Input/Output: [(48 63 100 7) 7]
Test Case: 630 | Input/Output: [(-100 13 -12 3) -100]
Test Case: 631 | Input/Output: [(36 84 92 -16) -16]
Test Case: 632 | Input/Output: [(4 3 -4 13) -4]
Test Case: 633 | Input/Output: [(-46 91 87 -3) -46]
Test Case: 634 | Input/Output: [(5 62 100 6) 5]
Test Case: 635 | Input/Output: [(-57 22 12 -61) -61]
Test Case: 636 | Input/Output: [(-13 5 -46 -19) -46]
Test Case: 637 | Input/Output: [(-4 25 18 92) -4]
Test Case: 638 | Input/Output: [(-53 -29 -46 82) -53]
Test Case: 639 | Input/Output: [(-97 84 2 -73) -97]
Test Case: 640 | Input/Output: [(14 82 -18 59) -18]
Test Case: 641 | Input/Output: [(-28 62 -25 32) -28]
Test Case: 642 | Input/Output: [(73 3 38 -68) -68]
Test Case: 643 | Input/Output: [(-70 32 26 -31) -70]
Test Case: 644 | Input/Output: [(-86 -50 77 -72) -86]
Test Case: 645 | Input/Output: [(22 -37 11 66) -37]
Test Case: 646 | Input/Output: [(28 -56 -53 15) -56]
Test Case: 647 | Input/Output: [(47 35 83 58) 35]
Test Case: 648 | Input/Output: [(56 9 -51 53) -51]
Test Case: 649 | Input/Output: [(-74 -89 66 -51) -89]
Test Case: 650 | Input/Output: [(36 28 -83 65) -83]
Test Case: 651 | Input/Output: [(-57 -98 75 -80) -98]
Test Case: 652 | Input/Output: [(37 -54 -56 76) -56]
Test Case: 653 | Input/Output: [(59 36 -10 -78) -78]
Test Case: 654 | Input/Output: [(-54 -2 58 -22) -54]
Test Case: 655 | Input/Output: [(-13 -79 -23 -64) -79]
Test Case: 656 | Input/Output: [(27 -9 24 21) -9]
Test Case: 657 | Input/Output: [(-77 -89 -43 47) -89]
Test Case: 658 | Input/Output: [(-30 -29 31 82) -30]
Test Case: 659 | Input/Output: [(21 26 -17 85) -17]
Test Case: 660 | Input/Output: [(17 78 -21 -55) -55]
Test Case: 661 | Input/Output: [(-91 -29 39 69) -91]
Test Case: 662 | Input/Output: [(51 -74 29 -34) -74]
Test Case: 663 | Input/Output: [(-6 38 -67 -40) -67]
Test Case: 664 | Input/Output: [(-20 67 -10 66) -20]
Test Case: 665 | Input/Output: [(-44 22 -61 47) -61]
Test Case: 666 | Input/Output: [(11 11 61 -18) -18]
Test Case: 667 | Input/Output: [(75 -61 36 59) -61]
Test Case: 668 | Input/Output: [(-32 68 50 -81) -81]
Test Case: 669 | Input/Output: [(12 21 48 85) 12]
Test Case: 670 | Input/Output: [(51 28 7 46) 7]
Test Case: 671 | Input/Output: [(-5 -39 96 76) -39]
Test Case: 672 | Input/Output: [(-32 -60 71 -34) -60]
Test Case: 673 | Input/Output: [(-16 24 6 -50) -50]
Test Case: 674 | Input/Output: [(-17 -1 89 15) -17]
Test Case: 675 | Input/Output: [(-57 98 64 -74) -74]
Test Case: 676 | Input/Output: [(67 75 -24 1) -24]
Test Case: 677 | Input/Output: [(36 6 96 -73) -73]
Test Case: 678 | Input/Output: [(-66 -66 -82 -20) -82]
Test Case: 679 | Input/Output: [(29 -98 22 69) -98]
Test Case: 680 | Input/Output: [(-64 60 3 19) -64]
Test Case: 681 | Input/Output: [(-35 74 -19 -79) -79]
Test Case: 682 | Input/Output: [(65 -85 -27 81) -85]
Test Case: 683 | Input/Output: [(50 57 -59 -16) -59]
Test Case: 684 | Input/Output: [(-12 46 -69 46) -69]
Test Case: 685 | Input/Output: [(54 59 -5 -39) -39]
Test Case: 686 | Input/Output: [(25 67 15 72) 15]
Test Case: 687 | Input/Output: [(59 22 -30 40) -30]
Test Case: 688 | Input/Output: [(-75 -63 35 16) -75]
Test Case: 689 | Input/Output: [(-81 -24 56 70) -81]
Test Case: 690 | Input/Output: [(-18 -19 -4 -30) -30]
Test Case: 691 | Input/Output: [(-60 -65 -63 -5) -65]
Test Case: 692 | Input/Output: [(-62 -73 -18 -2) -73]
Test Case: 693 | Input/Output: [(-13 58 90 24) -13]
Test Case: 694 | Input/Output: [(17 -44 -31 -90) -90]
Test Case: 695 | Input/Output: [(-68 58 47 53) -68]
Test Case: 696 | Input/Output: [(81 3 -99 -60) -99]
Test Case: 697 | Input/Output: [(29 -74 35 51) -74]
Test Case: 698 | Input/Output: [(12 -8 -55 99) -55]
Test Case: 699 | Input/Output: [(-49 36 -65 57) -65]
Test Case: 700 | Input/Output: [(-60 37 -1 66) -60]
Test Case: 701 | Input/Output: [(49 -82 -55 -6) -82]
Test Case: 702 | Input/Output: [(29 -44 12 35) -44]
Test Case: 703 | Input/Output: [(-22 -23 17 30) -23]
Test Case: 704 | Input/Output: [(60 -40 41 -29) -40]
Test Case: 705 | Input/Output: [(-3 -84 35 -84) -84]
Test Case: 706 | Input/Output: [(-69 82 77 17) -69]
Test Case: 707 | Input/Output: [(-8 89 -53 34) -53]
Test Case: 708 | Input/Output: [(77 18 -50 -9) -50]
Test Case: 709 | Input/Output: [(20 5 -20 -94) -94]
Test Case: 710 | Input/Output: [(-19 80 -82 -54) -82]
Test Case: 711 | Input/Output: [(-92 48 83 98) -92]
Test Case: 712 | Input/Output: [(-100 64 41 -72) -100]
Test Case: 713 | Input/Output: [(49 30 -30 -46) -46]
Test Case: 714 | Input/Output: [(-90 95 6 96) -90]
Test Case: 715 | Input/Output: [(-38 -37 -91 -50) -91]
Test Case: 716 | Input/Output: [(75 -34 67 -54) -54]
Test Case: 717 | Input/Output: [(60 4 56 -73) -73]
Test Case: 718 | Input/Output: [(41 -51 45 31) -51]
Test Case: 719 | Input/Output: [(-87 89 -22 -38) -87]
Test Case: 720 | Input/Output: [(-21 -48 54 -30) -48]
Test Case: 721 | Input/Output: [(62 72 55 19) 19]
Test Case: 722 | Input/Output: [(65 -22 33 -24) -24]
Test Case: 723 | Input/Output: [(35 -16 -16 14) -16]
Test Case: 724 | Input/Output: [(59 -51 -80 15) -80]
Test Case: 725 | Input/Output: [(-10 52 -44 45) -44]
Test Case: 726 | Input/Output: [(39 -29 22 26) -29]
Test Case: 727 | Input/Output: [(-82 -94 99 -7) -94]
Test Case: 728 | Input/Output: [(-25 -26 -100 90) -100]
Test Case: 729 | Input/Output: [(59 4 54 -35) -35]
Test Case: 730 | Input/Output: [(39 65 -42 94) -42]
Test Case: 731 | Input/Output: [(-3 -52 73 31) -52]
Test Case: 732 | Input/Output: [(-97 -70 99 64) -97]
Test Case: 733 | Input/Output: [(-58 -60 -60 -43) -60]
Test Case: 734 | Input/Output: [(12 74 -97 58) -97]
Test Case: 735 | Input/Output: [(-100 15 7 -7) -100]
Test Case: 736 | Input/Output: [(41 -24 35 74) -24]
Test Case: 737 | Input/Output: [(39 97 39 38) 38]
Test Case: 738 | Input/Output: [(70 -14 -38 98) -38]
Test Case: 739 | Input/Output: [(56 -10 -74 -51) -74]
Test Case: 740 | Input/Output: [(-17 33 -14 53) -17]
Test Case: 741 | Input/Output: [(-12 -79 86 13) -79]
Test Case: 742 | Input/Output: [(10 -55 -42 -60) -60]
Test Case: 743 | Input/Output: [(-51 2 -31 -94) -94]
Test Case: 744 | Input/Output: [(-55 1 28 -89) -89]
Test Case: 745 | Input/Output: [(-44 -94 -64 20) -94]
Test Case: 746 | Input/Output: [(-78 52 21 47) -78]
Test Case: 747 | Input/Output: [(34 -96 27 -93) -96]
Test Case: 748 | Input/Output: [(-85 -35 31 -45) -85]
Test Case: 749 | Input/Output: [(-35 81 61 -47) -47]
Test Case: 750 | Input/Output: [(-71 6 -26 83) -71]
Test Case: 751 | Input/Output: [(-81 -33 -57 55) -81]
Test Case: 752 | Input/Output: [(79 65 34 -13) -13]
Test Case: 753 | Input/Output: [(-11 -56 94 10) -56]
Test Case: 754 | Input/Output: [(-46 -77 13 42) -77]
Test Case: 755 | Input/Output: [(34 41 22 -36) -36]
Test Case: 756 | Input/Output: [(16 -97 92 -76) -97]
Test Case: 757 | Input/Output: [(97 -100 57 -53) -100]
Test Case: 758 | Input/Output: [(-40 4 13 -91) -91]
Test Case: 759 | Input/Output: [(38 12 -71 4) -71]
Test Case: 760 | Input/Output: [(19 -31 22 -23) -31]
Test Case: 761 | Input/Output: [(-32 26 16 68) -32]
Test Case: 762 | Input/Output: [(-22 -69 -72 -73) -73]
Test Case: 763 | Input/Output: [(17 22 -23 -41) -41]
Test Case: 764 | Input/Output: [(92 -55 -59 -72) -72]
Test Case: 765 | Input/Output: [(-40 -61 -53 76) -61]
Test Case: 766 | Input/Output: [(-80 56 6 -22) -80]
Test Case: 767 | Input/Output: [(-62 57 -14 2) -62]
Test Case: 768 | Input/Output: [(41 -17 -69 73) -69]
Test Case: 769 | Input/Output: [(92 67 -52 98) -52]
Test Case: 770 | Input/Output: [(20 -50 -48 -21) -50]
Test Case: 771 | Input/Output: [(39 -30 -36 90) -36]
Test Case: 772 | Input/Output: [(5 91 -2 40) -2]
Test Case: 773 | Input/Output: [(44 -12 6 87) -12]
Test Case: 774 | Input/Output: [(-95 -69 -63 -53) -95]
Test Case: 775 | Input/Output: [(89 33 78 53) 33]
Test Case: 776 | Input/Output: [(-11 41 -74 80) -74]
Test Case: 777 | Input/Output: [(-8 56 -64 -29) -64]
Test Case: 778 | Input/Output: [(-9 4 -40 62) -40]
Test Case: 779 | Input/Output: [(84 -49 -16 -36) -49]
Test Case: 780 | Input/Output: [(0 54 18 -64) -64]
Test Case: 781 | Input/Output: [(-36 71 -53 -81) -81]
Test Case: 782 | Input/Output: [(22 -46 -79 38) -79]
Test Case: 783 | Input/Output: [(29 99 -73 53) -73]
Test Case: 784 | Input/Output: [(54 -31 -46 -26) -46]
Test Case: 785 | Input/Output: [(14 91 74 -56) -56]
Test Case: 786 | Input/Output: [(100 67 87 -77) -77]
Test Case: 787 | Input/Output: [(13 20 95 -79) -79]
Test Case: 788 | Input/Output: [(1 29 29 -47) -47]
Test Case: 789 | Input/Output: [(37 50 -62 -99) -99]
Test Case: 790 | Input/Output: [(20 -82 84 -27) -82]
Test Case: 791 | Input/Output: [(49 -98 5 16) -98]
Test Case: 792 | Input/Output: [(-66 -38 72 -31) -66]
Test Case: 793 | Input/Output: [(61 -90 48 10) -90]
Test Case: 794 | Input/Output: [(28 6 85 34) 6]
Test Case: 795 | Input/Output: [(75 -70 66 66) -70]
Test Case: 796 | Input/Output: [(-96 -63 100 42) -96]
Test Case: 797 | Input/Output: [(33 -18 -83 90) -83]
Test Case: 798 | Input/Output: [(-93 -80 54 65) -93]
Test Case: 799 | Input/Output: [(76 53 -41 -79) -79]
Test Case: 800 | Input/Output: [(66 -94 -46 -42) -94]
Test Case: 801 | Input/Output: [(8 -68 -20 96) -68]
Test Case: 802 | Input/Output: [(38 -14 90 -96) -96]
Test Case: 803 | Input/Output: [(-35 84 -52 -90) -90]
Test Case: 804 | Input/Output: [(-5 -25 -74 71) -74]
Test Case: 805 | Input/Output: [(49 -38 18 91) -38]
Test Case: 806 | Input/Output: [(-36 56 83 -96) -96]
Test Case: 807 | Input/Output: [(51 38 -80 92) -80]
Test Case: 808 | Input/Output: [(41 39 -65 -93) -93]
Test Case: 809 | Input/Output: [(91 -67 45 -10) -67]
Test Case: 810 | Input/Output: [(78 45 -68 9) -68]
Test Case: 811 | Input/Output: [(-61 -84 -99 87) -99]
Test Case: 812 | Input/Output: [(-44 94 -50 30) -50]
Test Case: 813 | Input/Output: [(19 94 16 13) 13]
Test Case: 814 | Input/Output: [(59 -70 -72 5) -72]
Test Case: 815 | Input/Output: [(-31 -50 81 59) -50]
Test Case: 816 | Input/Output: [(67 -30 -9 -84) -84]
Test Case: 817 | Input/Output: [(73 -17 46 27) -17]
Test Case: 818 | Input/Output: [(21 17 61 -62) -62]
Test Case: 819 | Input/Output: [(-8 -95 -75 -22) -95]
Test Case: 820 | Input/Output: [(3 -99 69 -45) -99]
Test Case: 821 | Input/Output: [(-37 83 38 29) -37]
Test Case: 822 | Input/Output: [(-9 -65 100 44) -65]
Test Case: 823 | Input/Output: [(-58 -31 -73 -38) -73]
Test Case: 824 | Input/Output: [(51 -20 -37 -47) -47]
Test Case: 825 | Input/Output: [(-94 -46 -97 -56) -97]
Test Case: 826 | Input/Output: [(19 -76 -13 -47) -76]
Test Case: 827 | Input/Output: [(-75 -74 -43 -57) -75]
Test Case: 828 | Input/Output: [(2 72 -52 76) -52]
Test Case: 829 | Input/Output: [(15 6 -2 91) -2]
Test Case: 830 | Input/Output: [(-42 -89 -98 21) -98]
Test Case: 831 | Input/Output: [(9 62 -81 89) -81]
Test Case: 832 | Input/Output: [(15 83 -54 50) -54]
Test Case: 833 | Input/Output: [(75 -6 97 50) -6]
Test Case: 834 | Input/Output: [(-32 54 75 -59) -59]
Test Case: 835 | Input/Output: [(56 78 -64 49) -64]
Test Case: 836 | Input/Output: [(19 18 -71 -19) -71]
Test Case: 837 | Input/Output: [(41 96 -87 73) -87]
Test Case: 838 | Input/Output: [(29 -19 7 -71) -71]
Test Case: 839 | Input/Output: [(13 68 -71 -98) -98]
Test Case: 840 | Input/Output: [(-43 27 -52 59) -52]
Test Case: 841 | Input/Output: [(-29 89 0 -46) -46]
Test Case: 842 | Input/Output: [(29 -83 57 -10) -83]
Test Case: 843 | Input/Output: [(-8 34 38 55) -8]
Test Case: 844 | Input/Output: [(-72 82 -95 50) -95]
Test Case: 845 | Input/Output: [(-37 2 51 -74) -74]
Test Case: 846 | Input/Output: [(-53 -55 -17 16) -55]
Test Case: 847 | Input/Output: [(-60 -97 69 50) -97]
Test Case: 848 | Input/Output: [(92 -11 34 -91) -91]
Test Case: 849 | Input/Output: [(8 81 5 -66) -66]
Test Case: 850 | Input/Output: [(-65 -72 -75 -33) -75]
Test Case: 851 | Input/Output: [(-59 76 -100 71) -100]
Test Case: 852 | Input/Output: [(57 79 21 17) 17]
Test Case: 853 | Input/Output: [(-80 60 -65 23) -80]
Test Case: 854 | Input/Output: [(37 63 91 4) 4]
Test Case: 855 | Input/Output: [(-13 0 -48 -48) -48]
Test Case: 856 | Input/Output: [(55 62 31 82) 31]
Test Case: 857 | Input/Output: [(-87 -67 -60 27) -87]
Test Case: 858 | Input/Output: [(13 72 74 66) 13]
Test Case: 859 | Input/Output: [(-85 62 -59 -76) -85]
Test Case: 860 | Input/Output: [(-60 -97 41 81) -97]
Test Case: 861 | Input/Output: [(-64 8 5 -16) -64]
Test Case: 862 | Input/Output: [(78 -74 -71 98) -74]
Test Case: 863 | Input/Output: [(15 -61 -96 10) -96]
Test Case: 864 | Input/Output: [(9 93 -93 38) -93]
Test Case: 865 | Input/Output: [(-48 -82 25 38) -82]
Test Case: 866 | Input/Output: [(72 56 -47 -89) -89]
Test Case: 867 | Input/Output: [(-44 -99 -46 8) -99]
Test Case: 868 | Input/Output: [(-76 3 -21 -22) -76]
Test Case: 869 | Input/Output: [(75 -72 59 53) -72]
Test Case: 870 | Input/Output: [(-97 5 -98 0) -98]
Test Case: 871 | Input/Output: [(-43 73 -86 -84) -86]
Test Case: 872 | Input/Output: [(-22 44 87 55) -22]
Test Case: 873 | Input/Output: [(-83 -80 -62 -44) -83]
Test Case: 874 | Input/Output: [(5 75 81 -37) -37]
Test Case: 875 | Input/Output: [(-32 -3 -98 90) -98]
Test Case: 876 | Input/Output: [(71 -97 3 -97) -97]
Test Case: 877 | Input/Output: [(-73 -15 45 42) -73]
Test Case: 878 | Input/Output: [(22 -53 -70 -87) -87]
Test Case: 879 | Input/Output: [(-85 -63 -49 -86) -86]
Test Case: 880 | Input/Output: [(30 -51 -74 38) -74]
Test Case: 881 | Input/Output: [(-88 91 -52 -54) -88]
Test Case: 882 | Input/Output: [(52 21 68 85) 21]
Test Case: 883 | Input/Output: [(-36 72 53 -18) -36]
Test Case: 884 | Input/Output: [(-48 -48 56 -63) -63]
Test Case: 885 | Input/Output: [(-98 15 -14 -64) -98]
Test Case: 886 | Input/Output: [(-18 -34 96 -82) -82]
Test Case: 887 | Input/Output: [(48 16 95 74) 16]
Test Case: 888 | Input/Output: [(-39 40 57 -83) -83]
Test Case: 889 | Input/Output: [(40 -28 -77 -67) -77]
Test Case: 890 | Input/Output: [(-93 -31 31 36) -93]
Test Case: 891 | Input/Output: [(-28 10 26 25) -28]
Test Case: 892 | Input/Output: [(63 -38 71 -100) -100]
Test Case: 893 | Input/Output: [(83 -20 2 55) -20]
Test Case: 894 | Input/Output: [(-47 -52 -65 -84) -84]
Test Case: 895 | Input/Output: [(-92 57 -21 54) -92]
Test Case: 896 | Input/Output: [(-35 7 81 -37) -37]
Test Case: 897 | Input/Output: [(-34 46 -55 34) -55]
Test Case: 898 | Input/Output: [(-80 -61 -43 84) -80]
Test Case: 899 | Input/Output: [(-29 -4 3 49) -29]
Test Case: 900 | Input/Output: [(-75 52 -18 28) -75]
Test Case: 901 | Input/Output: [(-3 -93 53 40) -93]
Test Case: 902 | Input/Output: [(-76 93 82 33) -76]
Test Case: 903 | Input/Output: [(43 23 -13 20) -13]
Test Case: 904 | Input/Output: [(40 40 -65 72) -65]
Test Case: 905 | Input/Output: [(38 -75 -4 -88) -88]
Test Case: 906 | Input/Output: [(-62 71 71 38) -62]
Test Case: 907 | Input/Output: [(44 -84 -49 65) -84]
Test Case: 908 | Input/Output: [(73 -35 67 59) -35]
Test Case: 909 | Input/Output: [(41 -46 38 98) -46]
Test Case: 910 | Input/Output: [(25 65 8 40) 8]
Test Case: 911 | Input/Output: [(98 90 92 -91) -91]
Test Case: 912 | Input/Output: [(-32 -66 93 2) -66]
Test Case: 913 | Input/Output: [(-45 -24 -66 74) -66]
Test Case: 914 | Input/Output: [(83 23 89 -11) -11]
Test Case: 915 | Input/Output: [(28 -54 -31 -71) -71]
Test Case: 916 | Input/Output: [(-82 -52 -57 -26) -82]
Test Case: 917 | Input/Output: [(-23 -77 -20 65) -77]
Test Case: 918 | Input/Output: [(-61 -93 -48 -33) -93]
Test Case: 919 | Input/Output: [(97 61 29 64) 29]
Test Case: 920 | Input/Output: [(80 -94 33 74) -94]
Test Case: 921 | Input/Output: [(-76 88 -40 -82) -82]
Test Case: 922 | Input/Output: [(14 98 12 97) 12]
Test Case: 923 | Input/Output: [(83 -27 -65 -30) -65]
Test Case: 924 | Input/Output: [(-97 -17 -23 59) -97]
Test Case: 925 | Input/Output: [(-68 -5 -98 89) -98]
Test Case: 926 | Input/Output: [(-2 18 2 11) -2]
Test Case: 927 | Input/Output: [(9 66 6 -91) -91]
Test Case: 928 | Input/Output: [(96 73 9 -25) -25]
Test Case: 929 | Input/Output: [(66 82 -93 -75) -93]
Test Case: 930 | Input/Output: [(-97 -28 68 64) -97]
Test Case: 931 | Input/Output: [(-85 -27 -4 -37) -85]
Test Case: 932 | Input/Output: [(-69 95 -44 -48) -69]
Test Case: 933 | Input/Output: [(55 71 -18 -79) -79]
Test Case: 934 | Input/Output: [(48 -83 -91 93) -91]
Test Case: 935 | Input/Output: [(-27 -39 -23 -91) -91]
Test Case: 936 | Input/Output: [(9 65 60 -35) -35]
Test Case: 937 | Input/Output: [(-47 84 -91 58) -91]
Test Case: 938 | Input/Output: [(-37 18 -4 66) -37]
Test Case: 939 | Input/Output: [(-40 -45 88 -86) -86]
Test Case: 940 | Input/Output: [(16 -7 -26 58) -26]
Test Case: 941 | Input/Output: [(-48 -9 -56 -38) -56]
Test Case: 942 | Input/Output: [(-65 74 53 23) -65]
Test Case: 943 | Input/Output: [(-25 -2 63 62) -25]
Test Case: 944 | Input/Output: [(97 -87 -21 37) -87]
Test Case: 945 | Input/Output: [(-82 -54 -5 -57) -82]
Test Case: 946 | Input/Output: [(38 -17 96 -85) -85]
Test Case: 947 | Input/Output: [(-18 -31 -85 71) -85]
Test Case: 948 | Input/Output: [(-88 -34 -20 -92) -92]
Test Case: 949 | Input/Output: [(29 -77 -22 -23) -77]
Test Case: 950 | Input/Output: [(16 100 -89 -53) -89]
Test Case: 951 | Input/Output: [(7 6 -26 -95) -95]
Test Case: 952 | Input/Output: [(58 -14 37 -87) -87]
Test Case: 953 | Input/Output: [(-26 79 -16 84) -26]
Test Case: 954 | Input/Output: [(-63 71 22 -68) -68]
Test Case: 955 | Input/Output: [(-100 31 41 41) -100]
Test Case: 956 | Input/Output: [(23 86 28 12) 12]
Test Case: 957 | Input/Output: [(61 -54 -71 84) -71]
Test Case: 958 | Input/Output: [(-30 44 59 -29) -30]
Test Case: 959 | Input/Output: [(-65 15 50 -89) -89]
Test Case: 960 | Input/Output: [(69 -9 -34 24) -34]
Test Case: 961 | Input/Output: [(-99 33 87 54) -99]
Test Case: 962 | Input/Output: [(7 52 -6 -53) -53]
Test Case: 963 | Input/Output: [(87 94 99 -34) -34]
Test Case: 964 | Input/Output: [(-90 -32 -17 37) -90]
Test Case: 965 | Input/Output: [(73 85 32 -50) -50]
Test Case: 966 | Input/Output: [(1 7 60 48) 1]
Test Case: 967 | Input/Output: [(-10 18 72 -47) -47]
Test Case: 968 | Input/Output: [(57 58 46 -29) -29]
Test Case: 969 | Input/Output: [(-57 98 -63 -50) -63]
Test Case: 970 | Input/Output: [(-78 -57 61 -30) -78]
Test Case: 971 | Input/Output: [(-56 -14 -63 93) -63]
Test Case: 972 | Input/Output: [(87 -29 2 -12) -29]
Test Case: 973 | Input/Output: [(54 -51 46 -55) -55]
Test Case: 974 | Input/Output: [(-96 -12 15 62) -96]
Test Case: 975 | Input/Output: [(-45 74 44 75) -45]
Test Case: 976 | Input/Output: [(34 -87 25 96) -87]
Test Case: 977 | Input/Output: [(-87 -48 -24 38) -87]
Test Case: 978 | Input/Output: [(0 -1 -100 1) -100]
Test Case: 979 | Input/Output: [(23 60 -74 -37) -74]
Test Case: 980 | Input/Output: [(94 34 9 11) 9]
Test Case: 981 | Input/Output: [(-28 -35 99 50) -35]
Test Case: 982 | Input/Output: [(10 -24 -82 19) -82]
Test Case: 983 | Input/Output: [(-21 83 -47 -58) -58]
Test Case: 984 | Input/Output: [(-3 6 23 -26) -26]
Test Case: 985 | Input/Output: [(-36 -51 -7 74) -51]
Test Case: 986 | Input/Output: [(75 -12 20 58) -12]
Test Case: 987 | Input/Output: [(3 -83 -59 30) -83]
Test Case: 988 | Input/Output: [(22 -94 54 99) -94]
Test Case: 989 | Input/Output: [(-30 -37 39 -91) -91]
Test Case: 990 | Input/Output: [(36 13 36 14) 13]
Test Case: 991 | Input/Output: [(26 48 66 33) 26]
Test Case: 992 | Input/Output: [(88 98 95 46) 46]
Test Case: 993 | Input/Output: [(-19 3 84 -36) -36]
Test Case: 994 | Input/Output: [(17 -75 -88 -63) -88]
Test Case: 995 | Input/Output: [(62 72 -48 57) -48]
Test Case: 996 | Input/Output: [(11 -28 53 -95) -95]
Test Case: 997 | Input/Output: [(5 -95 -14 -36) -95]
Test Case: 998 | Input/Output: [(-55 38 -74 73) -74]
Test Case: 999 | Input/Output: [(62 53 -21 78) -21]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -97 -110 -64 -52 56 -38 36 -13 88 -108 49 -27 -70 -59 -44 100
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-41 -95 -41 -41] -95] [[-44 -44 -44 -21] -44] [[-45 -45 -45 16] -45] [[-13 58 -13 -13] -13] [[45 42 45 45] 42] [[87 99 87 87] 87] [[-35 27 27 27] -35] [[-18 -18 78 -18] -18] [[2 2 4 2] 2] [[43 55 55 55] 43] [(-33 -33 -33 -33) -33] [(29 29 29 29) 29] [(34 34 34 34) 34] [(-32 -32 -32 -32) -32] [(-83 -83 -83 -83) -83] [(49 20 71 72) 20] [(84 2 70 57) 2] [(46 88 58 60) 46] [(77 44 67 71) 44] [(74 20 27 16) 16] [(39 47 74 17) 17] [(77 70 85 53) 53] [(38 13 21 89) 13] [(42 1 1 60) 1] [(64 31 10 78) 10] [(74 90 3 78) 3] [(66 89 57 27) 27] [(33 53 37 42) 33] [(10 58 59 0) 0] [(3 20 38 93) 3] [(91 48 2 75) 2] [(46 70 4 15) 4] [(41 68 56 14) 14] [(70 4 66 25) 4] [(13 9 61 37) 9] [(12 -55 -43 38) -55] [(0 22 9 95) 0] [(-80 -18 -44 78) -80] [(6 -6 -26 -51) -51] [(-82 80 94 -88) -88] [(-90 -13 -95 -45) -95] [(39 -92 5 23) -92] [(-2 15 -2 -21) -21] [(-70 -37 49 -92) -92] [(60 8 -74 -41) -74] [(7 38 53 93) 7] [(19 17 5 49) 5] [(90 85 -32 -76) -76] [(5 32 -93 52) -93] [(87 -76 88 76) -76] [(0 -87 -70 66) -87] [(-44 -11 -100 11) -100] [(28 16 -36 27) -36] [(52 -24 -3 26) -24] [(30 1 49 -30) -30] [(87 -86 -24 -82) -86] [(32 -53 20 -49) -53] [(32 65 -14 58) -14] [(42 95 -75 65) -75] [(-100 80 -64 -48) -100] [(51 94 34 -43) -43] [(57 -16 79 -64) -64] [(11 -80 66 -71) -80] [(-81 32 3 40) -81] [(52 -88 -85 -78) -88] [(65 43 -10 43) -10] [(-70 -93 15 -80) -93] [(-93 39 69 93) -93] [(43 32 -14 11) -14] [(-2 6 -76 -88) -88] [(48 -50 52 -96) -96] [(4 -40 69 -22) -40] [(86 25 42 -50) -50] [(50 -98 -20 81) -98] [(5 -83 73 7) -83] [(29 -47 73 41) -47] [(50 -95 -93 -77) -95] [(-81 -6 3 96) -81] [(40 29 19 -49) -49] [(58 31 50 -71) -71] [(-54 -13 -41 15) -54] [(-33 80 58 -40) -40] [(73 23 -24 -62) -62] [(-73 47 22 6) -73] [(-15 65 80 56) -15] [(47 -69 -43 -58) -69] [(1 -34 75 -29) -34] [(-100 100 -87 -69) -100] [(75 -56 56 -9) -56] [(-19 -12 -82 -67) -82] [(-87 23 -62 1) -87] [(-43 -34 56 60) -43] [(36 35 92 -13) -13] [(-57 45 99 73) -57] [(-44 88 -63 68) -63])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: 58                 
Correct output: 42                  | Program output: 42                 
Correct output: 87                  | Program output: 99                 
Correct output: -35                 | Program output: 27                 
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 46                  | Program output: 88                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 20                 
Correct output: 17                  | Program output: 47                 
Correct output: 53                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 90                 
Correct output: 27                  | Program output: 89                 
Correct output: 33                  | Program output: 53                 
Correct output: 0                   | Program output: 58                 
Correct output: 3                   | Program output: 20                 
Correct output: 2                   | Program output: 48                 
Correct output: 4                   | Program output: 70                 
Correct output: 14                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 22                 
Correct output: -80                 | Program output: -18                
Correct output: -51                 | Program output: -6                 
Correct output: -88                 | Program output: 80                 
Correct output: -95                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 15                 
Correct output: -92                 | Program output: -37                
Correct output: -74                 | Program output: 8                  
Correct output: 7                   | Program output: 38                 
Correct output: 5                   | Program output: 17                 
Correct output: -76                 | Program output: 85                 
Correct output: -93                 | Program output: 32                 
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -11                
Correct output: -36                 | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: -30                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: 65                 
Correct output: -75                 | Program output: 95                 
Correct output: -100                | Program output: 80                 
Correct output: -43                 | Program output: 94                 
Correct output: -64                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: 32                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: 39                 
Correct output: -14                 | Program output: 32                 
Correct output: -88                 | Program output: 6                  
Correct output: -96                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -6                 
Correct output: -49                 | Program output: 29                 
Correct output: -71                 | Program output: 31                 
Correct output: -54                 | Program output: -13                
Correct output: -40                 | Program output: 80                 
Correct output: -62                 | Program output: 23                 
Correct output: -73                 | Program output: 47                 
Correct output: -15                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: 100                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -12                
Correct output: -87                 | Program output: 23                 
Correct output: -43                 | Program output: -34                
Correct output: -13                 | Program output: 35                 
Correct output: -57                 | Program output: 45                 
Correct output: -63                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_565} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_134} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction print_boolean} {:close 0, :instruction tag_exec_370} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_98} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*while})
Lexicase best program: (tagged_565 exec_yankdup boolean_not boolean_frominteger boolean_shove boolean_flush exec_yank exec_dup () boolean_flush in4 print_integer boolean_dup_items exec_k_when_autoconstructing () (exec_y (exec_y_when_autoconstructing () exec_empty) exec_k_when_autoconstructing () (in3 boolean_shove integer_max print_boolean boolean_xor exec_yank integer_swap integer_empty integer_yankdup boolean_shove boolean_not integer_lt) in1) integer_sub boolean_empty boolean_rot tagged_134 integer_dup integer_yankdup print_newline print_boolean tag_exec_370 (exec_yankdup integer_div integer_min boolean_flush integer_gt) in4 integer_rot exec_yankdup tagged_98 boolean_stackdepth exec_yank in4 integer_lt exec_noop integer_dup_items boolean_eq exec_dup_items print_newline integer_div integer_dec boolean_swap exec_s (exec_do*while ()) () ())
Lexicase best errors: [0 0 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_565} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_134} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction print_boolean} {:close 0, :instruction tag_exec_370} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_98} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*while})
Zero cases best program: (tagged_565 exec_yankdup boolean_not boolean_frominteger boolean_shove boolean_flush exec_yank exec_dup () boolean_flush in4 print_integer boolean_dup_items exec_k_when_autoconstructing () (exec_y (exec_y_when_autoconstructing () exec_empty) exec_k_when_autoconstructing () (in3 boolean_shove integer_max print_boolean boolean_xor exec_yank integer_swap integer_empty integer_yankdup boolean_shove boolean_not integer_lt) in1) integer_sub boolean_empty boolean_rot tagged_134 integer_dup integer_yankdup print_newline print_boolean tag_exec_370 (exec_yankdup integer_div integer_min boolean_flush integer_gt) in4 integer_rot exec_yankdup tagged_98 boolean_stackdepth exec_yank in4 integer_lt exec_noop integer_dup_items boolean_eq exec_dup_items print_newline integer_div integer_dec boolean_swap exec_s (exec_do*while ()) () ())
Zero cases best errors: [0 0 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 4 2 6 2 2 2 3 4)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 2 4 2 6 2 2 2 3 4)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction tagged_275} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_boolean_889} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction 70} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_add} {:close 0, :instruction tag_integer_449} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup})
Best program: (exec_k (tagged_275 integer_dup boolean_eq integer_dup_items integer_dup_times tag_boolean_889) (exec_pop (boolean_flush integer_gt print_boolean print_boolean exec_dup () boolean_yankdup) integer_eq) integer_sub boolean_invert_first_then_and integer_stackdepth in1 exec_swap (print_integer boolean_dup_items integer_max integer_gte exec_dup_items in2 in2 integer_stackdepth exec_noop print_boolean integer_gte integer_gte boolean_eq) (in2 boolean_not) exec_do*while () exec_dup () boolean_rot exec_yank boolean_flush integer_add 70 integer_yank boolean_swap integer_sub boolean_pop exec_swap (exec_y_when_autoconstructing (in3) integer_dup_times integer_pop integer_mod exec_rot (exec_y_when_autoconstructing () boolean_flush) () (exec_dup_times (boolean_stackdepth exec_do*times (boolean_dup_times integer_yank exec_pop () integer_add) tag_integer_449 boolean_xor exec_dup_items exec_dup ()))) ())
Errors: [1 1 1 0 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 66
Size: 86
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.996 0.998 0.994 0.998 0.998 0.998 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.685
Average program size in population (points): 69.638
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 503647
--- Timings ---
Current time: 1559594105814 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 27.7%
Fitness Testing:      1.9 seconds, 68.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: -41                
Correct output: -44                 | Program output: -21                
Correct output: -45                 | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 45                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: 27                 
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 72                 
Correct output: 2                   | Program output: 57                 
Correct output: 46                  | Program output: 60                 
Correct output: 44                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 53                  | Program output: 53                 
Correct output: 13                  | Program output: 89                 
Correct output: 1                   | Program output: 60                 
Correct output: 10                  | Program output: 78                 
Correct output: 3                   | Program output: 78                 
Correct output: 27                  | Program output: 27                 
Correct output: 33                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 93                 
Correct output: 2                   | Program output: 75                 
Correct output: 4                   | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: -55                 | Program output: 38                 
Correct output: 0                   | Program output: 95                 
Correct output: -80                 | Program output: 78                 
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -45                
Correct output: -92                 | Program output: 23                 
Correct output: -21                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -41                
Correct output: 7                   | Program output: 93                 
Correct output: 5                   | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 52                 
Correct output: -76                 | Program output: 76                 
Correct output: -87                 | Program output: 66                 
Correct output: -100                | Program output: 11                 
Correct output: -36                 | Program output: 27                 
Correct output: -24                 | Program output: 26                 
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -82                
Correct output: -53                 | Program output: -49                
Correct output: -14                 | Program output: 58                 
Correct output: -75                 | Program output: 65                 
Correct output: -100                | Program output: -48                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -71                
Correct output: -81                 | Program output: 40                 
Correct output: -88                 | Program output: -78                
Correct output: -10                 | Program output: 43                 
Correct output: -93                 | Program output: -80                
Correct output: -93                 | Program output: 93                 
Correct output: -14                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -22                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 81                 
Correct output: -83                 | Program output: 7                  
Correct output: -47                 | Program output: 41                 
Correct output: -95                 | Program output: -77                
Correct output: -81                 | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -54                 | Program output: 15                 
Correct output: -40                 | Program output: -40                
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: 6                  
Correct output: -15                 | Program output: 56                 
Correct output: -69                 | Program output: -58                
Correct output: -34                 | Program output: -29                
Correct output: -100                | Program output: -69                
Correct output: -56                 | Program output: -9                 
Correct output: -82                 | Program output: -67                
Correct output: -87                 | Program output: 1                  
Correct output: -43                 | Program output: 60                 
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: 73                 
Correct output: -63                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -85} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_232} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_421} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_k_when_autoconstructing () (exec_do*times (-85 boolean_and integer_mult in3) print_boolean) integer_lte tagged_232 boolean_and boolean_dup in4 integer_mod integer_mod print_integer integer_stackdepth boolean_invert_first_then_and exec_swap (integer_eq boolean_dup_items) () exec_swap (exec_yank exec_k (integer_inc exec_swap () (boolean_invert_first_then_and boolean_yankdup exec_y (integer_yankdup exec_do*times (boolean_dup_items in1 tag_boolean_421 integer_mod exec_dup_items boolean_and boolean_stackdepth boolean_swap in3 boolean_dup_times exec_k (boolean_eq) (exec_dup_times (integer_rot in4 exec_noop integer_sub) exec_yankdup) in2) boolean_pop exec_dup (exec_when (boolean_not boolean_invert_first_then_and integer_flush) integer_flush exec_stackdepth exec_y_when_autoconstructing () exec_if () (exec_noop integer_dup) boolean_swap) integer_eq exec_k (exec_y (exec_noop exec_noop boolean_invert_second_then_and integer_dec integer_add integer_yankdup)) ()))) ()) ())
Lexicase best errors: [1 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 96
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -85} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_232} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_421} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_k_when_autoconstructing () (exec_do*times (-85 boolean_and integer_mult in3) print_boolean) integer_lte tagged_232 boolean_and boolean_dup in4 integer_mod integer_mod print_integer integer_stackdepth boolean_invert_first_then_and exec_swap (integer_eq boolean_dup_items) () exec_swap (exec_yank exec_k (integer_inc exec_swap () (boolean_invert_first_then_and boolean_yankdup exec_y (integer_yankdup exec_do*times (boolean_dup_items in1 tag_boolean_421 integer_mod exec_dup_items boolean_and boolean_stackdepth boolean_swap in3 boolean_dup_times exec_k (boolean_eq) (exec_dup_times (integer_rot in4 exec_noop integer_sub) exec_yankdup) in2) boolean_pop exec_dup (exec_when (boolean_not boolean_invert_first_then_and integer_flush) integer_flush exec_stackdepth exec_y_when_autoconstructing () exec_if () (exec_noop integer_dup) boolean_swap) integer_eq exec_k (exec_y (exec_noop exec_noop boolean_invert_second_then_and integer_dec integer_add integer_yankdup)) ()))) ()) ())
Zero cases best errors: [1 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 96
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 35 193 392 22 119 221 22 224 221)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (138 35 193 392 22 119 221 22 224 221)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -85} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_232} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_421} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup})
Best program: (exec_k_when_autoconstructing () (exec_do*times (-85 in1 boolean_and integer_mult in3) print_boolean) integer_lte tagged_232 boolean_and boolean_dup in4 integer_mod print_integer integer_stackdepth exec_when () exec_swap (boolean_stackdepth exec_yankdup) (integer_eq boolean_dup_items) exec_swap (exec_yank exec_k (integer_inc integer_shove exec_swap () (boolean_invert_first_then_and exec_y (integer_yankdup exec_do*times (boolean_dup_items in1 tag_boolean_421 exec_s_when_autoconstructing (integer_mod exec_dup_items boolean_and boolean_stackdepth boolean_swap in3 boolean_dup_times exec_k (boolean_yankdup boolean_eq) (exec_dup_times (integer_rot exec_dup (integer_sub) integer_swap) in2) boolean_invert_second_then_and exec_dup (exec_when (boolean_not boolean_invert_first_then_and integer_flush) integer_flush exec_y_when_autoconstructing () exec_if () (in4 integer_dup) exec_k (boolean_swap) (integer_eq exec_k (exec_y (integer_div exec_noop exec_noop integer_add integer_yankdup)) ()))) () ())))) ()) ())
Errors: [1 1 1 0 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 73
Size: 105
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 8.413
Median total errors in population: 9
Error averages by case: (0.862 0.965 0.807 0.608 0.978 0.881 0.779 0.978 0.776 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.582
Average program size in population (points): 79.562
Average percent parens in population: 0.249
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1364791
--- Timings ---
Current time: 1559594108946 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         1.8 seconds, 32.7%
Fitness Testing:      3.1 seconds, 55.0%
Report:               0.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 45                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: -35                
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 49                 
Correct output: 2                   | Program output: 84                 
Correct output: 46                  | Program output: 46                 
Correct output: 44                  | Program output: 77                 
Correct output: 16                  | Program output: 74                 
Correct output: 17                  | Program output: 39                 
Correct output: 53                  | Program output: 77                 
Correct output: 13                  | Program output: 38                 
Correct output: 1                   | Program output: 42                 
Correct output: 10                  | Program output: 64                 
Correct output: 3                   | Program output: 74                 
Correct output: 27                  | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 0                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 91                 
Correct output: 4                   | Program output: 46                 
Correct output: 14                  | Program output: 41                 
Correct output: 4                   | Program output: 70                 
Correct output: 9                   | Program output: 13                 
Correct output: -55                 | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 6                  
Correct output: -88                 | Program output: -82                
Correct output: -95                 | Program output: -90                
Correct output: -92                 | Program output: 39                 
Correct output: -21                 | Program output: -2                 
Correct output: -92                 | Program output: -70                
Correct output: -74                 | Program output: 60                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 19                 
Correct output: -76                 | Program output: 90                 
Correct output: -93                 | Program output: 5                  
Correct output: -76                 | Program output: 87                 
Correct output: -87                 | Program output: 0                  
Correct output: -100                | Program output: -44                
Correct output: -36                 | Program output: 28                 
Correct output: -24                 | Program output: 52                 
Correct output: -30                 | Program output: 30                 
Correct output: -86                 | Program output: 87                 
Correct output: -53                 | Program output: 32                 
Correct output: -14                 | Program output: 32                 
Correct output: -75                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 51                 
Correct output: -64                 | Program output: 57                 
Correct output: -80                 | Program output: 11                 
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: 52                 
Correct output: -10                 | Program output: 65                 
Correct output: -93                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: -2                 
Correct output: -96                 | Program output: 48                 
Correct output: -40                 | Program output: 4                  
Correct output: -50                 | Program output: 86                 
Correct output: -98                 | Program output: 50                 
Correct output: -83                 | Program output: 5                  
Correct output: -47                 | Program output: 29                 
Correct output: -95                 | Program output: 50                 
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 40                 
Correct output: -71                 | Program output: 58                 
Correct output: -54                 | Program output: -54                
Correct output: -40                 | Program output: -33                
Correct output: -62                 | Program output: 73                 
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: 47                 
Correct output: -34                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: 75                 
Correct output: -82                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: 36                 
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -44} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_xor exec_s_when_autoconstructing (integer_mod integer_swap integer_empty) (exec_shove () integer_gte) (in1 print_integer in4) integer_inc integer_swap exec_y (boolean_yank integer_stackdepth) integer_rot integer_mult integer_gt boolean_stackdepth exec_k (print_integer) (print_exec (exec_yankdup) exec_shove () exec_dup_items -44 exec_noop integer_lt boolean_not integer_pop integer_gte boolean_flush boolean_xor integer_dec exec_shove () exec_s (boolean_invert_second_then_and exec_do*count (exec_dup_items) exec_do*while (exec_do*times (boolean_invert_first_then_and) exec_do*times (integer_dec integer_swap exec_while (integer_yankdup exec_yankdup exec_y (integer_swap exec_s_when_autoconstructing (exec_noop boolean_eq in4) (integer_mod in3 exec_do*range (integer_dup boolean_swap exec_s_when_autoconstructing () (integer_empty exec_dup_times (integer_lt) boolean_stackdepth boolean_dup integer_flush exec_dup_items) () boolean_invert_second_then_and) integer_yank boolean_invert_second_then_and exec_do*times (integer_fromboolean exec_k (integer_div exec_flush boolean_dup integer_dec exec_do*while (boolean_shove exec_noop exec_flush exec_do*times ()) integer_yankdup exec_dup_times ()) ())) ()))))) () ()))
Lexicase best errors: [1 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -44} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_xor exec_s_when_autoconstructing (integer_mod integer_swap integer_empty) (exec_shove () integer_gte) (in1 print_integer in4) integer_inc integer_swap exec_y (boolean_yank integer_stackdepth) integer_rot integer_mult integer_gt boolean_stackdepth exec_k (print_integer) (print_exec (exec_yankdup) exec_shove () exec_dup_items -44 exec_noop integer_lt boolean_not integer_pop integer_gte boolean_flush boolean_xor integer_dec exec_shove () exec_s (boolean_invert_second_then_and exec_do*count (exec_dup_items) exec_do*while (exec_do*times (boolean_invert_first_then_and) exec_do*times (integer_dec integer_swap exec_while (integer_yankdup exec_yankdup exec_y (integer_swap exec_s_when_autoconstructing (exec_noop boolean_eq in4) (integer_mod in3 exec_do*range (integer_dup boolean_swap exec_s_when_autoconstructing () (integer_empty exec_dup_times (integer_lt) boolean_stackdepth boolean_dup integer_flush exec_dup_items) () boolean_invert_second_then_and) integer_yank boolean_invert_second_then_and exec_do*times (integer_fromboolean exec_k (integer_div exec_flush boolean_dup integer_dec exec_do*while (boolean_shove exec_noop exec_flush exec_do*times ()) integer_yankdup exec_dup_times ()) ())) ()))))) () ()))
Zero cases best errors: [1 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (37 544 21 136 135 186 245 385 221 141)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (37 544 21 136 135 186 245 385 221 141)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction tag_boolean_385} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction -46} {:close 0, :instruction -44} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction 39} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times})
Best program: (boolean_xor exec_eq exec_dup () integer_mod integer_empty exec_shove () exec_s_when_autoconstructing (in1 print_integer integer_gte in4) (integer_inc integer_swap) (tag_boolean_385 exec_y (integer_stackdepth) integer_rot) integer_mult integer_gt in1 boolean_pop boolean_stackdepth integer_mult exec_k (print_boolean exec_flush) (integer_gte print_integer) print_exec (exec_yankdup) exec_dup_items print_exec (-46) -44 boolean_stackdepth boolean_yankdup integer_lt in2 boolean_not integer_pop integer_gte boolean_flush boolean_xor boolean_yankdup integer_dec exec_shove () exec_s (boolean_invert_second_then_and exec_do*count (exec_dup_items) in1 exec_do*while (exec_do*times (boolean_rot exec_do*times (integer_yankdup exec_y (integer_swap exec_s_when_autoconstructing (boolean_eq integer_mod integer_lt in3 exec_do*range (integer_add boolean_swap exec_dup_times (integer_lt) boolean_dup integer_flush exec_dup_items)) (exec_do*times (exec_k (39 boolean_dup exec_do*while (integer_fromboolean boolean_shove exec_noop exec_flush integer_yankdup exec_dup_times ())) ())) ()))))) () ())
Errors: [1 0 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 82
Size: 112
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.949
Median total errors in population: 7
Error averages by case: (0.963 0.456 0.979 0.864 0.865 0.814 0.755 0.615 0.779 0.859)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.423
Average program size in population (points): 74.022
Average percent parens in population: 0.247
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2178796
--- Timings ---
Current time: 1559594111801 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.1 seconds, 35.7%
Fitness Testing:      4.0 seconds, 46.1%
Report:               1.5 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: -41                
Correct output: -44                 | Program output: -21                
Correct output: -45                 | Program output: 16                 
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 45                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: 27                 
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 72                 
Correct output: 2                   | Program output: 57                 
Correct output: 46                  | Program output: 60                 
Correct output: 44                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 53                  | Program output: 53                 
Correct output: 13                  | Program output: 89                 
Correct output: 1                   | Program output: 60                 
Correct output: 10                  | Program output: 78                 
Correct output: 3                   | Program output: 78                 
Correct output: 27                  | Program output: 27                 
Correct output: 33                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 93                 
Correct output: 2                   | Program output: 75                 
Correct output: 4                   | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: -55                 | Program output: 38                 
Correct output: 0                   | Program output: 95                 
Correct output: -80                 | Program output: 78                 
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -45                
Correct output: -92                 | Program output: 23                 
Correct output: -21                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -41                
Correct output: 7                   | Program output: 93                 
Correct output: 5                   | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 52                 
Correct output: -76                 | Program output: 76                 
Correct output: -87                 | Program output: 66                 
Correct output: -100                | Program output: 11                 
Correct output: -36                 | Program output: 27                 
Correct output: -24                 | Program output: 26                 
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -82                
Correct output: -53                 | Program output: -49                
Correct output: -14                 | Program output: 58                 
Correct output: -75                 | Program output: 65                 
Correct output: -100                | Program output: -48                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -71                
Correct output: -81                 | Program output: 40                 
Correct output: -88                 | Program output: -78                
Correct output: -10                 | Program output: 43                 
Correct output: -93                 | Program output: -80                
Correct output: -93                 | Program output: 93                 
Correct output: -14                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -22                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 81                 
Correct output: -83                 | Program output: 7                  
Correct output: -47                 | Program output: 41                 
Correct output: -95                 | Program output: -77                
Correct output: -81                 | Program output: 96                 
Correct output: -49                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -54                 | Program output: 15                 
Correct output: -40                 | Program output: -40                
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: 6                  
Correct output: -15                 | Program output: 56                 
Correct output: -69                 | Program output: -58                
Correct output: -34                 | Program output: -29                
Correct output: -100                | Program output: -69                
Correct output: -56                 | Program output: -9                 
Correct output: -82                 | Program output: -67                
Correct output: -87                 | Program output: 1                  
Correct output: -43                 | Program output: 60                 
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: 73                 
Correct output: -63                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -85} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_232} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_421} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_195} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_k_when_autoconstructing () (exec_do*times (-85 boolean_and integer_mult in3) print_boolean) integer_lte integer_swap tagged_232 exec_empty boolean_and boolean_dup in4 integer_mod print_integer integer_stackdepth exec_noop exec_swap (exec_k (boolean_stackdepth integer_eq boolean_dup_items) () exec_swap (integer_inc integer_shove exec_swap () (exec_y (integer_yankdup exec_do*times (boolean_dup_items in1 tag_boolean_421 boolean_and boolean_stackdepth integer_shove exec_flush boolean_swap in3 boolean_dup_times print_integer) boolean_xor boolean_yankdup boolean_eq) integer_rot integer_inc in4 exec_noop exec_flush integer_sub) exec_yankdup) (in2) boolean_invert_second_then_and tagged_195 exec_yank integer_pop exec_when (boolean_not boolean_invert_first_then_and boolean_invert_first_then_and integer_flush) integer_flush integer_shove exec_stackdepth exec_y_when_autoconstructing () exec_if () (integer_dup) exec_k (boolean_swap) (integer_eq exec_k (exec_y (exec_noop exec_noop boolean_invert_second_then_and integer_add integer_yankdup)) ())) ())
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction -85} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_232} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_421} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_195} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_k_when_autoconstructing () (exec_do*times (-85 boolean_and integer_mult in3) print_boolean) integer_lte integer_swap tagged_232 exec_empty boolean_and boolean_dup in4 integer_mod print_integer integer_stackdepth exec_noop exec_swap (exec_k (boolean_stackdepth integer_eq boolean_dup_items) () exec_swap (integer_inc integer_shove exec_swap () (exec_y (integer_yankdup exec_do*times (boolean_dup_items in1 tag_boolean_421 boolean_and boolean_stackdepth integer_shove exec_flush boolean_swap in3 boolean_dup_times print_integer) boolean_xor boolean_yankdup boolean_eq) integer_rot integer_inc in4 exec_noop exec_flush integer_sub) exec_yankdup) (in2) boolean_invert_second_then_and tagged_195 exec_yank integer_pop exec_when (boolean_not boolean_invert_first_then_and boolean_invert_first_then_and integer_flush) integer_flush integer_shove exec_stackdepth exec_y_when_autoconstructing () exec_if () (integer_dup) exec_k (boolean_swap) (integer_eq exec_k (exec_y (exec_noop exec_noop boolean_invert_second_then_and integer_add integer_yankdup)) ())) ())
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 89 53 210 81 643 526 65 65 95)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (200 89 53 210 81 643 526 65 65 95)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -85} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_421} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup})
Best program: (-85 boolean_and integer_mult in3 print_boolean integer_lte boolean_and boolean_dup in4 print_integer integer_stackdepth exec_swap (boolean_invert_first_then_and integer_eq boolean_dup_items) () boolean_rot exec_yank exec_k (integer_inc integer_shove exec_swap () (boolean_invert_first_then_and exec_while (boolean_yankdup exec_y (exec_do*times (boolean_swap) boolean_dup_items in1 tag_boolean_421 exec_dup_items in2 boolean_and integer_dup boolean_stackdepth exec_k (boolean_swap in3 boolean_yankdup boolean_eq) (exec_dup_times (integer_pop print_boolean integer_rot in4 integer_min boolean_eq exec_noop integer_sub) exec_yankdup) exec_dup (boolean_not boolean_invert_first_then_and integer_flush) integer_flush boolean_dup exec_stackdepth exec_y_when_autoconstructing () exec_if () (integer_dup) boolean_xor integer_eq exec_noop exec_noop boolean_invert_second_then_and integer_yankdup)))) ())
Errors: [1 0 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 83
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.973
Median total errors in population: 7
Error averages by case: (0.8 0.911 0.947 0.79 0.919 0.357 0.474 0.935 0.935 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.166
Average program size in population (points): 71.97
Average percent parens in population: 0.257
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2849522
--- Timings ---
Current time: 1559594114037 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.3 seconds, 38.1%
Fitness Testing:      4.7 seconds, 41.7%
Report:               2.2 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 45                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: -35                
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 49                 
Correct output: 2                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 44                  | Program output: 67                 
Correct output: 16                  | Program output: 27                 
Correct output: 17                  | Program output: 39                 
Correct output: 53                  | Program output: 77                 
Correct output: 13                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: 0                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 41                 
Correct output: 4                   | Program output: 66                 
Correct output: 9                   | Program output: 13                 
Correct output: -55                 | Program output: -43                
Correct output: 0                   | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -26                
Correct output: -88                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: 5                  
Correct output: -21                 | Program output: -2                 
Correct output: -92                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: -76                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: 87                 
Correct output: -87                 | Program output: -70                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -24                 | Program output: -3                 
Correct output: -30                 | Program output: 30                 
Correct output: -86                 | Program output: -24                
Correct output: -53                 | Program output: 20                 
Correct output: -14                 | Program output: -14                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 34                 
Correct output: -64                 | Program output: 57                 
Correct output: -80                 | Program output: 11                 
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -76                
Correct output: -96                 | Program output: 48                 
Correct output: -40                 | Program output: 4                  
Correct output: -50                 | Program output: 42                 
Correct output: -98                 | Program output: -20                
Correct output: -83                 | Program output: 5                  
Correct output: -47                 | Program output: 29                 
Correct output: -95                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 19                 
Correct output: -71                 | Program output: 50                 
Correct output: -54                 | Program output: -54                
Correct output: -40                 | Program output: -33                
Correct output: -62                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -43                
Correct output: -34                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: 56                 
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: 36                 
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction in1})
Lexicase best program: (exec_dup_items exec_when (exec_yank integer_mult) exec_empty boolean_eq boolean_eq exec_pop (exec_do*while (integer_lt) exec_do*count (boolean_stackdepth) integer_dup exec_eq exec_yank exec_shove (boolean_dup_items exec_pop (boolean_dup)) integer_stackdepth integer_dup_items) exec_dup () exec_pop () exec_shove (exec_if () (integer_yank) exec_yankdup exec_yank integer_rot boolean_dup boolean_dup_times boolean_dup_times) integer_flush integer_fromboolean exec_do*count (exec_yank in3 boolean_eq in1) boolean_not exec_k_when_autoconstructing (boolean_flush integer_rot) (exec_swap (integer_min boolean_empty) (boolean_dup exec_do*while (boolean_not)) boolean_empty boolean_flush integer_add integer_sub print_integer) boolean_dup exec_empty exec_k () (in1))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction in1})
Zero cases best program: (exec_dup_items exec_when (exec_yank integer_mult) exec_empty boolean_eq boolean_eq exec_pop (exec_do*while (integer_lt) exec_do*count (boolean_stackdepth) integer_dup exec_eq exec_yank exec_shove (boolean_dup_items exec_pop (boolean_dup)) integer_stackdepth integer_dup_items) exec_dup () exec_pop () exec_shove (exec_if () (integer_yank) exec_yankdup exec_yank integer_rot boolean_dup boolean_dup_times boolean_dup_times) integer_flush integer_fromboolean exec_do*count (exec_yank in3 boolean_eq in1) boolean_not exec_k_when_autoconstructing (boolean_flush integer_rot) (exec_swap (integer_min boolean_empty) (boolean_dup exec_do*while (boolean_not)) boolean_empty boolean_flush integer_add integer_sub print_integer) boolean_dup exec_empty exec_k () (in1))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 117 85 119 122 83 117 118 134 581)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (157 117 85 119 122 83 117 118 134 581)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction in1})
Best program: (exec_dup_items exec_when (exec_yank integer_mult) exec_empty boolean_eq boolean_eq exec_pop (exec_do*while (integer_lt) exec_do*count (boolean_stackdepth) integer_dup exec_eq exec_yank exec_shove (boolean_dup_items exec_pop (boolean_dup)) integer_stackdepth integer_dup_items) exec_dup () exec_pop () exec_shove (exec_if () (integer_yank) exec_yankdup exec_yank integer_rot boolean_dup boolean_dup_times boolean_dup_times) integer_flush integer_fromboolean exec_do*count (exec_yank in3 boolean_eq in1) boolean_not exec_k_when_autoconstructing (boolean_flush integer_rot) (exec_swap (integer_min boolean_empty) (boolean_dup exec_do*while (boolean_not)) boolean_empty boolean_flush integer_add integer_sub print_integer) boolean_dup exec_empty exec_k () (in1))
Errors: [1 0 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.367
Median total errors in population: 17/2
Error averages by case: (0.843 0.883 0.915 0.881 0.878 0.917 0.883 0.882 0.866 0.419)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.413
Average program size in population (points): 70.102
Average percent parens in population: 0.251
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3562385
--- Timings ---
Current time: 1559594116310 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.5 seconds, 40.8%
Fitness Testing:      5.5 seconds, 40.4%
Report:               2.4 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 45                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: -35                
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 49                 
Correct output: 2                   | Program output: 57                 
Correct output: 46                  | Program output: 46                 
Correct output: 44                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 53                  | Program output: 53                 
Correct output: 13                  | Program output: 38                 
Correct output: 1                   | Program output: 42                 
Correct output: 10                  | Program output: 64                 
Correct output: 3                   | Program output: 74                 
Correct output: 27                  | Program output: 27                 
Correct output: 33                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 75                 
Correct output: 4                   | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 25                 
Correct output: 9                   | Program output: 13                 
Correct output: -55                 | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -90                
Correct output: -92                 | Program output: 23                 
Correct output: -21                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 19                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 5                  
Correct output: -76                 | Program output: 76                 
Correct output: -87                 | Program output: 0                  
Correct output: -100                | Program output: -44                
Correct output: -36                 | Program output: 27                 
Correct output: -24                 | Program output: 26                 
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -82                
Correct output: -53                 | Program output: -49                
Correct output: -14                 | Program output: 32                 
Correct output: -75                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -78                
Correct output: -10                 | Program output: 43                 
Correct output: -93                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -22                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 50                 
Correct output: -83                 | Program output: 5                  
Correct output: -47                 | Program output: 29                 
Correct output: -95                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -54                 | Program output: -54                
Correct output: -40                 | Program output: -40                
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -58                
Correct output: -34                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -9                 
Correct output: -82                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1})
Lexicase best program: (exec_do*while () boolean_dup boolean_rot in3 in4 boolean_pop in1 tagged_858 integer_stackdepth exec_rot (integer_dup_items) (integer_gt boolean_eq) (exec_noop integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup integer_lt integer_max exec_dup () integer_gt exec_when () exec_y (boolean_invert_second_then_and) integer_min integer_stackdepth exec_swap (boolean_stackdepth in1 in1) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1})
Zero cases best program: (exec_do*while () boolean_dup boolean_rot in3 in4 boolean_pop in1 tagged_858 integer_stackdepth exec_rot (integer_dup_items) (integer_gt boolean_eq) (exec_noop integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup integer_lt integer_max exec_dup () integer_gt exec_when () exec_y (boolean_invert_second_then_and) integer_min integer_stackdepth exec_swap (boolean_stackdepth in1 in1) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 59 182 217 237 143 11 173 47 11)
Population mean number of elite cases: 1.22
Count of perfect (error zero) individuals by case: (142 59 182 217 237 143 11 173 47 11)
Population mean number of perfect (error zero) cases: 1.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1})
Best program: (exec_do*while () boolean_dup boolean_rot in4 boolean_pop in1 tagged_858 exec_rot (integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_lt integer_max exec_dup () integer_gt boolean_frominteger exec_when () exec_y (integer_min) boolean_stackdepth exec_y_when_autoconstructing () in1)
Errors: [0 0 1 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 8.778
Median total errors in population: 9
Error averages by case: (0.858 0.941 0.818 0.783 0.763 0.857 0.989 0.827 0.953 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.047
Average program size in population (points): 66.127
Average percent parens in population: 0.256
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4167801
--- Timings ---
Current time: 1559594118742 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.7 seconds, 43.0%
Fitness Testing:      6.1 seconds, 38.7%
Report:               2.8 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 42                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: 27                 
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 46                  | Program output: 58                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 53                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 33                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 9                  
Correct output: -80                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: 7                   | Program output: 38                 
Correct output: 5                   | Program output: 5                  
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -24                 | Program output: -24                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -64                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: 39                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -6                 
Correct output: -49                 | Program output: -49                
Correct output: -71                 | Program output: -71                
Correct output: -54                 | Program output: -41                
Correct output: -40                 | Program output: -40                
Correct output: -62                 | Program output: -62                
Correct output: -73                 | Program output: 6                  
Correct output: -15                 | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -62                
Correct output: -43                 | Program output: -34                
Correct output: -13                 | Program output: -13                
Correct output: -57                 | Program output: 45                 
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction in1})
Lexicase best program: (exec_do*while () boolean_dup in3 in4 boolean_dup in2 integer_min in1 tagged_858 exec_rot (integer_dup_items) (integer_gt boolean_eq) (integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup boolean_empty integer_lt integer_max exec_dup () integer_gt exec_when () integer_min boolean_stackdepth integer_max in1)
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction in1})
Zero cases best program: (exec_do*while () boolean_dup in3 in4 boolean_dup in2 integer_min in1 tagged_858 exec_rot (integer_dup_items) (integer_gt boolean_eq) (integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup boolean_empty integer_lt integer_max exec_dup () integer_gt exec_when () integer_min boolean_stackdepth integer_max in1)
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 176 515 176 299 69 121 127 311 206)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (323 176 515 176 299 69 121 127 311 206)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction in1})
Best program: (exec_do*while () boolean_dup in3 in4 boolean_dup in2 integer_min in1 tagged_858 exec_rot (integer_dup_items) (integer_gt boolean_eq) (integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup boolean_empty integer_lt integer_max exec_dup () integer_gt exec_when () integer_min boolean_stackdepth integer_max in1)
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 31
Size: 38
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 7.677
Median total errors in population: 8
Error averages by case: (0.677 0.824 0.485 0.824 0.701 0.931 0.879 0.873 0.689 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.596
Average program size in population (points): 50.209
Average percent parens in population: 0.245
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5089568
--- Timings ---
Current time: 1559594121109 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.9 seconds, 43.0%
Fitness Testing:      7.0 seconds, 38.0%
Report:               3.4 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 217
Test mean error for best: 0.21700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 42                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: -35                
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 46                  | Program output: 46                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 20                 
Correct output: 17                  | Program output: 39                 
Correct output: 53                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: 0                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -26                
Correct output: -88                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -2                 
Correct output: -92                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: -76                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -24                 | Program output: -24                
Correct output: -30                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 34                 
Correct output: -64                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -76                
Correct output: -96                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 19                 
Correct output: -71                 | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -40                 | Program output: -33                
Correct output: -62                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: 35                 
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction in1})
Lexicase best program: (exec_rot (boolean_dup in3 boolean_dup in2) (integer_min in1 tagged_858 exec_s_when_autoconstructing (exec_rot (integer_dup_items) (integer_gt boolean_eq) (integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup) (boolean_empty) (integer_lt integer_max exec_dup () integer_gt exec_when () integer_min)) (boolean_stackdepth integer_max integer_min in1))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction in1})
Zero cases best program: (exec_rot (boolean_dup in3 boolean_dup in2) (integer_min in1 tagged_858 exec_s_when_autoconstructing (exec_rot (integer_dup_items) (integer_gt boolean_eq) (integer_dup integer_fromboolean boolean_frominteger integer_pop boolean_eq integer_min print_integer) boolean_yankdup) (boolean_empty) (integer_lt integer_max exec_dup () integer_gt exec_when () integer_min)) (boolean_stackdepth integer_max integer_min in1))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 223 254 222 290 288 245 290 471 392)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (214 223 254 222 290 288 245 290 471 392)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_858} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 7.111
Median total errors in population: 9
Error averages by case: (0.786 0.777 0.746 0.778 0.71 0.712 0.755 0.71 0.529 0.608)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.794
Average program size in population (points): 47.402
Average percent parens in population: 0.217
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5734574
--- Timings ---
Current time: 1559594123629 milliseconds
Total Time:          20.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.1 seconds, 44.5%
Fitness Testing:      7.7 seconds, 37.3%
Report:               3.6 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 41


Auto-simplifying with starting size: 41
step: 0
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 500
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1000
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1500
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2000
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2500
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3000
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3500
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4000
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4500
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 5000
program: (exec_do*while () boolean_dup boolean_rot in4 in2 boolean_pop in3 in1 tagged_858 exec_rot (exec_yankdup integer_dup_items) (integer_gt boolean_eq) (integer_min integer_dup integer_fromboolean boolean_frominteger boolean_eq integer_min print_integer) boolean_yankdup integer_max exec_dup () integer_gt boolean_frominteger exec_stackdepth exec_y (exec_eq boolean_stackdepth exec_y_when_autoconstructing ()) in1 boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 217
Test mean error for best: 0.21700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: 42                  | Program output: 42                 
Correct output: 87                  | Program output: 87                 
Correct output: -35                 | Program output: -35                
Correct output: -18                 | Program output: -18                
Correct output: 2                   | Program output: 2                  
Correct output: 43                  | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 34                  | Program output: 34                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 46                  | Program output: 46                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 20                 
Correct output: 17                  | Program output: 39                 
Correct output: 53                  | Program output: 70                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: 0                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 41                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -26                
Correct output: -88                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -2                 
Correct output: -92                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: -76                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -24                 | Program output: -24                
Correct output: -30                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 34                 
Correct output: -64                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -76                
Correct output: -96                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: 19                 
Correct output: -71                 | Program output: 31                 
Correct output: -54                 | Program output: -54                
Correct output: -40                 | Program output: -33                
Correct output: -62                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: 35                 
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -63                
;;******************************
