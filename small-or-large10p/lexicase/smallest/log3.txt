Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-13 -13 -22 -13] -22] [[1 1 1 88] 1] [[12 12 49 12] 12] [[78 78 78 -24] -24] [[-79 -79 -79 -88] -88] [[90 90 24 90] 24] [[98 98 98 -21] -21] [[-31 -18 -31 -31] -31] [[-77 -77 75 -77] -77] [[-13 -13 -13 -23] -23] [(49 49 49 49) 49] [(-57 -57 -57 -57) -57] [(16 16 16 16) 16] [(8 8 8 8) 8] [(-72 -72 -72 -72) -72] [(67 91 10 27) 10] [(29 77 20 37) 20] [(46 3 72 11) 3] [(74 79 53 16) 16] [(100 85 65 73) 65] [(3 10 94 25) 3] [(37 70 61 88) 37] [(86 32 1 33) 1] [(11 68 17 0) 0] [(58 24 81 43) 24] [(93 55 88 47) 47] [(57 78 64 64) 57] [(89 4 40 27) 4] [(90 82 52 75) 52] [(60 92 61 56) 56] [(80 88 16 20) 16] [(30 61 43 22) 22] [(89 57 51 63) 51] [(42 27 40 48) 27] [(71 71 72 49) 49] [(40 53 -25 91) -25] [(-25 42 -23 41) -25] [(88 87 69 -94) -94] [(87 51 -13 28) -13] [(47 -86 -80 -26) -86] [(-29 -91 54 -79) -91] [(23 89 65 46) 23] [(-64 18 -86 -33) -86] [(21 -97 -25 -64) -97] [(-38 -55 26 -29) -55] [(-15 19 0 -49) -49] [(6 58 -6 8) -6] [(95 7 -95 -57) -95] [(-56 -20 8 -22) -56] [(-56 2 25 17) -56] [(-22 3 54 5) -22] [(65 68 20 55) 20] [(70 83 -89 -10) -89] [(-16 5 -35 -20) -35] [(23 -42 -61 -56) -61] [(60 -14 -86 -49) -86] [(70 61 -97 -42) -97] [(88 51 -86 -3) -86] [(16 -14 62 91) -14] [(74 33 46 64) 33] [(22 70 -48 8) -48] [(22 -83 48 33) -83] [(78 89 -21 75) -21] [(-85 -33 95 22) -85] [(-70 20 21 24) -70] [(-65 30 83 -76) -76] [(-63 -32 20 19) -63] [(-91 57 -6 100) -91] [(63 -57 24 -62) -62] [(-49 -38 -80 -81) -81] [(-5 -98 93 66) -98] [(-9 34 17 -52) -52] [(-8 42 -16 -75) -75] [(-43 -89 11 17) -89] [(24 -46 41 -77) -77] [(74 -46 -76 -83) -83] [(-77 -96 -26 98) -96] [(-55 94 3 29) -55] [(-1 1 -31 77) -31] [(-17 -87 83 -26) -87] [(-38 31 -43 58) -43] [(-37 -47 48 82) -47] [(77 -99 -73 9) -99] [(14 74 45 53) 14] [(0 87 83 -26) -26] [(-72 -39 -98 91) -98] [(-18 97 -95 -19) -95] [(49 -35 -90 -23) -90] [(28 44 -11 -24) -24] [(-20 -42 55 -56) -56] [(60 -2 -2 71) -2] [(98 -100 42 45) -100] [(-13 -90 -26 65) -90] [(-64 49 -100 25) -100] [(7 74 -95 23) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-13 -13 -22 -13] -22]
Train Case:   6 | Input/Output: [[1 1 1 88] 1]
Train Case:   7 | Input/Output: [[12 12 49 12] 12]
Train Case:   8 | Input/Output: [[78 78 78 -24] -24]
Train Case:   9 | Input/Output: [[-79 -79 -79 -88] -88]
Train Case:  10 | Input/Output: [[90 90 24 90] 24]
Train Case:  11 | Input/Output: [[98 98 98 -21] -21]
Train Case:  12 | Input/Output: [[-31 -18 -31 -31] -31]
Train Case:  13 | Input/Output: [[-77 -77 75 -77] -77]
Train Case:  14 | Input/Output: [[-13 -13 -13 -23] -23]
Train Case:  15 | Input/Output: [(49 49 49 49) 49]
Train Case:  16 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  17 | Input/Output: [(16 16 16 16) 16]
Train Case:  18 | Input/Output: [(8 8 8 8) 8]
Train Case:  19 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  20 | Input/Output: [(67 91 10 27) 10]
Train Case:  21 | Input/Output: [(29 77 20 37) 20]
Train Case:  22 | Input/Output: [(46 3 72 11) 3]
Train Case:  23 | Input/Output: [(74 79 53 16) 16]
Train Case:  24 | Input/Output: [(100 85 65 73) 65]
Train Case:  25 | Input/Output: [(3 10 94 25) 3]
Train Case:  26 | Input/Output: [(37 70 61 88) 37]
Train Case:  27 | Input/Output: [(86 32 1 33) 1]
Train Case:  28 | Input/Output: [(11 68 17 0) 0]
Train Case:  29 | Input/Output: [(58 24 81 43) 24]
Train Case:  30 | Input/Output: [(93 55 88 47) 47]
Train Case:  31 | Input/Output: [(57 78 64 64) 57]
Train Case:  32 | Input/Output: [(89 4 40 27) 4]
Train Case:  33 | Input/Output: [(90 82 52 75) 52]
Train Case:  34 | Input/Output: [(60 92 61 56) 56]
Train Case:  35 | Input/Output: [(80 88 16 20) 16]
Train Case:  36 | Input/Output: [(30 61 43 22) 22]
Train Case:  37 | Input/Output: [(89 57 51 63) 51]
Train Case:  38 | Input/Output: [(42 27 40 48) 27]
Train Case:  39 | Input/Output: [(71 71 72 49) 49]
Train Case:  40 | Input/Output: [(40 53 -25 91) -25]
Train Case:  41 | Input/Output: [(-25 42 -23 41) -25]
Train Case:  42 | Input/Output: [(88 87 69 -94) -94]
Train Case:  43 | Input/Output: [(87 51 -13 28) -13]
Train Case:  44 | Input/Output: [(47 -86 -80 -26) -86]
Train Case:  45 | Input/Output: [(-29 -91 54 -79) -91]
Train Case:  46 | Input/Output: [(23 89 65 46) 23]
Train Case:  47 | Input/Output: [(-64 18 -86 -33) -86]
Train Case:  48 | Input/Output: [(21 -97 -25 -64) -97]
Train Case:  49 | Input/Output: [(-38 -55 26 -29) -55]
Train Case:  50 | Input/Output: [(-15 19 0 -49) -49]
Train Case:  51 | Input/Output: [(6 58 -6 8) -6]
Train Case:  52 | Input/Output: [(95 7 -95 -57) -95]
Train Case:  53 | Input/Output: [(-56 -20 8 -22) -56]
Train Case:  54 | Input/Output: [(-56 2 25 17) -56]
Train Case:  55 | Input/Output: [(-22 3 54 5) -22]
Train Case:  56 | Input/Output: [(65 68 20 55) 20]
Train Case:  57 | Input/Output: [(70 83 -89 -10) -89]
Train Case:  58 | Input/Output: [(-16 5 -35 -20) -35]
Train Case:  59 | Input/Output: [(23 -42 -61 -56) -61]
Train Case:  60 | Input/Output: [(60 -14 -86 -49) -86]
Train Case:  61 | Input/Output: [(70 61 -97 -42) -97]
Train Case:  62 | Input/Output: [(88 51 -86 -3) -86]
Train Case:  63 | Input/Output: [(16 -14 62 91) -14]
Train Case:  64 | Input/Output: [(74 33 46 64) 33]
Train Case:  65 | Input/Output: [(22 70 -48 8) -48]
Train Case:  66 | Input/Output: [(22 -83 48 33) -83]
Train Case:  67 | Input/Output: [(78 89 -21 75) -21]
Train Case:  68 | Input/Output: [(-85 -33 95 22) -85]
Train Case:  69 | Input/Output: [(-70 20 21 24) -70]
Train Case:  70 | Input/Output: [(-65 30 83 -76) -76]
Train Case:  71 | Input/Output: [(-63 -32 20 19) -63]
Train Case:  72 | Input/Output: [(-91 57 -6 100) -91]
Train Case:  73 | Input/Output: [(63 -57 24 -62) -62]
Train Case:  74 | Input/Output: [(-49 -38 -80 -81) -81]
Train Case:  75 | Input/Output: [(-5 -98 93 66) -98]
Train Case:  76 | Input/Output: [(-9 34 17 -52) -52]
Train Case:  77 | Input/Output: [(-8 42 -16 -75) -75]
Train Case:  78 | Input/Output: [(-43 -89 11 17) -89]
Train Case:  79 | Input/Output: [(24 -46 41 -77) -77]
Train Case:  80 | Input/Output: [(74 -46 -76 -83) -83]
Train Case:  81 | Input/Output: [(-77 -96 -26 98) -96]
Train Case:  82 | Input/Output: [(-55 94 3 29) -55]
Train Case:  83 | Input/Output: [(-1 1 -31 77) -31]
Train Case:  84 | Input/Output: [(-17 -87 83 -26) -87]
Train Case:  85 | Input/Output: [(-38 31 -43 58) -43]
Train Case:  86 | Input/Output: [(-37 -47 48 82) -47]
Train Case:  87 | Input/Output: [(77 -99 -73 9) -99]
Train Case:  88 | Input/Output: [(14 74 45 53) 14]
Train Case:  89 | Input/Output: [(0 87 83 -26) -26]
Train Case:  90 | Input/Output: [(-72 -39 -98 91) -98]
Train Case:  91 | Input/Output: [(-18 97 -95 -19) -95]
Train Case:  92 | Input/Output: [(49 -35 -90 -23) -90]
Train Case:  93 | Input/Output: [(28 44 -11 -24) -24]
Train Case:  94 | Input/Output: [(-20 -42 55 -56) -56]
Train Case:  95 | Input/Output: [(60 -2 -2 71) -2]
Train Case:  96 | Input/Output: [(98 -100 42 45) -100]
Train Case:  97 | Input/Output: [(-13 -90 -26 65) -90]
Train Case:  98 | Input/Output: [(-64 49 -100 25) -100]
Train Case:  99 | Input/Output: [(7 74 -95 23) -95]
Test Case:   0 | Input/Output: [[-88 71 71 71] -88]
Test Case:   1 | Input/Output: [[16 6 16 16] 6]
Test Case:   2 | Input/Output: [[73 -46 -46 -46] -46]
Test Case:   3 | Input/Output: [[87 50 87 87] 50]
Test Case:   4 | Input/Output: [[74 18 18 18] 18]
Test Case:   5 | Input/Output: [[-100 7 7 7] -100]
Test Case:   6 | Input/Output: [[-46 -99 -46 -46] -99]
Test Case:   7 | Input/Output: [[-18 -18 -18 -2] -18]
Test Case:   8 | Input/Output: [[33 33 33 -48] -48]
Test Case:   9 | Input/Output: [[53 53 -90 53] -90]
Test Case:  10 | Input/Output: [[-82 -82 -82 31] -82]
Test Case:  11 | Input/Output: [[21 21 5 21] 5]
Test Case:  12 | Input/Output: [[92 92 92 -55] -55]
Test Case:  13 | Input/Output: [[31 31 31 44] 31]
Test Case:  14 | Input/Output: [[-68 43 -68 -68] -68]
Test Case:  15 | Input/Output: [[-100 -100 -100 -29] -100]
Test Case:  16 | Input/Output: [[-67 -67 5 -67] -67]
Test Case:  17 | Input/Output: [[94 81 81 81] 81]
Test Case:  18 | Input/Output: [[37 37 37 90] 37]
Test Case:  19 | Input/Output: [[54 -5 54 54] -5]
Test Case:  20 | Input/Output: [[44 44 40 44] 40]
Test Case:  21 | Input/Output: [[37 39 39 39] 37]
Test Case:  22 | Input/Output: [[14 14 -60 14] -60]
Test Case:  23 | Input/Output: [[83 47 83 83] 47]
Test Case:  24 | Input/Output: [[73 -44 -44 -44] -44]
Test Case:  25 | Input/Output: [[58 58 -36 58] -36]
Test Case:  26 | Input/Output: [[-17 -57 -17 -17] -57]
Test Case:  27 | Input/Output: [[73 73 73 -74] -74]
Test Case:  28 | Input/Output: [[-17 -84 -17 -17] -84]
Test Case:  29 | Input/Output: [[79 79 78 79] 78]
Test Case:  30 | Input/Output: [[-95 -94 -95 -95] -95]
Test Case:  31 | Input/Output: [[77 77 77 31] 31]
Test Case:  32 | Input/Output: [[45 96 96 96] 45]
Test Case:  33 | Input/Output: [[51 51 -71 51] -71]
Test Case:  34 | Input/Output: [[-49 20 -49 -49] -49]
Test Case:  35 | Input/Output: [[-70 -70 -22 -70] -70]
Test Case:  36 | Input/Output: [[60 60 52 60] 52]
Test Case:  37 | Input/Output: [[89 89 89 -99] -99]
Test Case:  38 | Input/Output: [[1 1 1 16] 1]
Test Case:  39 | Input/Output: [[23 -10 -10 -10] -10]
Test Case:  40 | Input/Output: [[31 31 22 31] 22]
Test Case:  41 | Input/Output: [[-37 11 11 11] -37]
Test Case:  42 | Input/Output: [[18 -77 18 18] -77]
Test Case:  43 | Input/Output: [[33 33 33 -52] -52]
Test Case:  44 | Input/Output: [[45 45 45 -36] -36]
Test Case:  45 | Input/Output: [[34 34 -76 34] -76]
Test Case:  46 | Input/Output: [[-94 -94 -2 -94] -94]
Test Case:  47 | Input/Output: [[-8 -8 76 -8] -8]
Test Case:  48 | Input/Output: [[0 0 0 -57] -57]
Test Case:  49 | Input/Output: [[-97 -97 -97 -76] -97]
Test Case:  50 | Input/Output: [[39 69 69 69] 39]
Test Case:  51 | Input/Output: [[-53 1 -53 -53] -53]
Test Case:  52 | Input/Output: [[-66 -66 -66 -97] -97]
Test Case:  53 | Input/Output: [[-34 -34 -34 29] -34]
Test Case:  54 | Input/Output: [[-99 14 14 14] -99]
Test Case:  55 | Input/Output: [[32 -22 -22 -22] -22]
Test Case:  56 | Input/Output: [[-88 -88 -88 43] -88]
Test Case:  57 | Input/Output: [[9 15 9 9] 9]
Test Case:  58 | Input/Output: [[39 -6 -6 -6] -6]
Test Case:  59 | Input/Output: [[-86 13 -86 -86] -86]
Test Case:  60 | Input/Output: [[8 -28 8 8] -28]
Test Case:  61 | Input/Output: [[-78 -78 -78 14] -78]
Test Case:  62 | Input/Output: [[-67 7 -67 -67] -67]
Test Case:  63 | Input/Output: [[25 29 25 25] 25]
Test Case:  64 | Input/Output: [[49 49 49 49] 49]
Test Case:  65 | Input/Output: [[-7 59 -7 -7] -7]
Test Case:  66 | Input/Output: [[-5 -93 -93 -93] -93]
Test Case:  67 | Input/Output: [[-60 -60 -83 -60] -83]
Test Case:  68 | Input/Output: [[-50 -50 38 -50] -50]
Test Case:  69 | Input/Output: [[38 38 22 38] 22]
Test Case:  70 | Input/Output: [[96 -69 96 96] -69]
Test Case:  71 | Input/Output: [[-41 15 15 15] -41]
Test Case:  72 | Input/Output: [[-59 -59 -59 98] -59]
Test Case:  73 | Input/Output: [[19 21 19 19] 19]
Test Case:  74 | Input/Output: [[-95 -5 -95 -95] -95]
Test Case:  75 | Input/Output: [[-88 15 -88 -88] -88]
Test Case:  76 | Input/Output: [[-17 -17 76 -17] -17]
Test Case:  77 | Input/Output: [[-49 -49 93 -49] -49]
Test Case:  78 | Input/Output: [[-20 -20 -20 37] -20]
Test Case:  79 | Input/Output: [[99 70 70 70] 70]
Test Case:  80 | Input/Output: [[9 9 9 75] 9]
Test Case:  81 | Input/Output: [[-80 -54 -80 -80] -80]
Test Case:  82 | Input/Output: [[-47 -11 -47 -47] -47]
Test Case:  83 | Input/Output: [[42 42 -97 42] -97]
Test Case:  84 | Input/Output: [[-23 -23 -79 -23] -79]
Test Case:  85 | Input/Output: [[97 -9 97 97] -9]
Test Case:  86 | Input/Output: [[-90 -90 90 -90] -90]
Test Case:  87 | Input/Output: [[-97 -69 -69 -69] -97]
Test Case:  88 | Input/Output: [[78 -56 -56 -56] -56]
Test Case:  89 | Input/Output: [[-2 -61 -61 -61] -61]
Test Case:  90 | Input/Output: [[-76 -76 -76 34] -76]
Test Case:  91 | Input/Output: [[23 -10 23 23] -10]
Test Case:  92 | Input/Output: [[-61 62 62 62] -61]
Test Case:  93 | Input/Output: [[94 -54 -54 -54] -54]
Test Case:  94 | Input/Output: [[-25 -25 -25 -3] -25]
Test Case:  95 | Input/Output: [[86 -61 -61 -61] -61]
Test Case:  96 | Input/Output: [[-96 -96 76 -96] -96]
Test Case:  97 | Input/Output: [[91 91 46 91] 46]
Test Case:  98 | Input/Output: [[-90 -90 -90 -99] -99]
Test Case:  99 | Input/Output: [[-39 -39 21 -39] -39]
Test Case: 100 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 101 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 102 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 103 | Input/Output: [(94 94 94 94) 94]
Test Case: 104 | Input/Output: [(42 42 42 42) 42]
Test Case: 105 | Input/Output: [(62 62 62 62) 62]
Test Case: 106 | Input/Output: [(46 46 46 46) 46]
Test Case: 107 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 108 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 109 | Input/Output: [(73 73 73 73) 73]
Test Case: 110 | Input/Output: [(22 22 22 22) 22]
Test Case: 111 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 112 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 113 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 114 | Input/Output: [(34 34 34 34) 34]
Test Case: 115 | Input/Output: [(15 15 15 15) 15]
Test Case: 116 | Input/Output: [(92 92 92 92) 92]
Test Case: 117 | Input/Output: [(11 11 11 11) 11]
Test Case: 118 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 119 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 120 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 121 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 122 | Input/Output: [(90 90 90 90) 90]
Test Case: 123 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 124 | Input/Output: [(66 66 66 66) 66]
Test Case: 125 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 126 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 127 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 128 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 129 | Input/Output: [(72 72 72 72) 72]
Test Case: 130 | Input/Output: [(19 19 19 19) 19]
Test Case: 131 | Input/Output: [(16 16 16 16) 16]
Test Case: 132 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 133 | Input/Output: [(53 53 53 53) 53]
Test Case: 134 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 135 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 136 | Input/Output: [(72 72 72 72) 72]
Test Case: 137 | Input/Output: [(81 81 81 81) 81]
Test Case: 138 | Input/Output: [(69 69 69 69) 69]
Test Case: 139 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 140 | Input/Output: [(25 25 25 25) 25]
Test Case: 141 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 142 | Input/Output: [(25 25 25 25) 25]
Test Case: 143 | Input/Output: [(64 64 64 64) 64]
Test Case: 144 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 145 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 146 | Input/Output: [(66 66 66 66) 66]
Test Case: 147 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 148 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 149 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 150 | Input/Output: [(36 36 36 36) 36]
Test Case: 151 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 152 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 153 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 154 | Input/Output: [(61 61 61 61) 61]
Test Case: 155 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 156 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 157 | Input/Output: [(55 55 55 55) 55]
Test Case: 158 | Input/Output: [(30 30 30 30) 30]
Test Case: 159 | Input/Output: [(82 82 82 82) 82]
Test Case: 160 | Input/Output: [(77 77 77 77) 77]
Test Case: 161 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 162 | Input/Output: [(49 49 49 49) 49]
Test Case: 163 | Input/Output: [(89 89 89 89) 89]
Test Case: 164 | Input/Output: [(42 42 42 42) 42]
Test Case: 165 | Input/Output: [(38 38 38 38) 38]
Test Case: 166 | Input/Output: [(97 97 97 97) 97]
Test Case: 167 | Input/Output: [(35 35 35 35) 35]
Test Case: 168 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 169 | Input/Output: [(6 6 6 6) 6]
Test Case: 170 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 171 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 172 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 173 | Input/Output: [(22 22 22 22) 22]
Test Case: 174 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 175 | Input/Output: [(62 62 62 62) 62]
Test Case: 176 | Input/Output: [(64 64 64 64) 64]
Test Case: 177 | Input/Output: [(19 19 19 19) 19]
Test Case: 178 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 179 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 180 | Input/Output: [(43 43 43 43) 43]
Test Case: 181 | Input/Output: [(52 52 52 52) 52]
Test Case: 182 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 183 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 184 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 185 | Input/Output: [(9 9 9 9) 9]
Test Case: 186 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 187 | Input/Output: [(97 97 97 97) 97]
Test Case: 188 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 189 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 190 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 191 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 192 | Input/Output: [(67 67 67 67) 67]
Test Case: 193 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 194 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 195 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 196 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 197 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 198 | Input/Output: [(79 79 79 79) 79]
Test Case: 199 | Input/Output: [(8 8 8 8) 8]
Test Case: 200 | Input/Output: [(100 21 22 98) 21]
Test Case: 201 | Input/Output: [(61 53 19 49) 19]
Test Case: 202 | Input/Output: [(23 80 78 38) 23]
Test Case: 203 | Input/Output: [(89 75 7 9) 7]
Test Case: 204 | Input/Output: [(96 33 24 53) 24]
Test Case: 205 | Input/Output: [(9 51 51 59) 9]
Test Case: 206 | Input/Output: [(88 84 12 83) 12]
Test Case: 207 | Input/Output: [(10 47 28 10) 10]
Test Case: 208 | Input/Output: [(67 6 4 48) 4]
Test Case: 209 | Input/Output: [(10 49 21 83) 10]
Test Case: 210 | Input/Output: [(68 2 57 59) 2]
Test Case: 211 | Input/Output: [(61 38 27 41) 27]
Test Case: 212 | Input/Output: [(11 3 95 12) 3]
Test Case: 213 | Input/Output: [(69 7 4 91) 4]
Test Case: 214 | Input/Output: [(18 47 15 62) 15]
Test Case: 215 | Input/Output: [(83 77 61 5) 5]
Test Case: 216 | Input/Output: [(10 39 38 28) 10]
Test Case: 217 | Input/Output: [(28 15 13 28) 13]
Test Case: 218 | Input/Output: [(96 37 49 54) 37]
Test Case: 219 | Input/Output: [(39 69 89 30) 30]
Test Case: 220 | Input/Output: [(78 21 81 58) 21]
Test Case: 221 | Input/Output: [(1 71 42 10) 1]
Test Case: 222 | Input/Output: [(40 76 72 39) 39]
Test Case: 223 | Input/Output: [(62 18 51 78) 18]
Test Case: 224 | Input/Output: [(100 90 83 46) 46]
Test Case: 225 | Input/Output: [(83 99 27 87) 27]
Test Case: 226 | Input/Output: [(25 40 1 96) 1]
Test Case: 227 | Input/Output: [(46 41 59 49) 41]
Test Case: 228 | Input/Output: [(10 19 46 17) 10]
Test Case: 229 | Input/Output: [(46 14 90 95) 14]
Test Case: 230 | Input/Output: [(3 100 73 73) 3]
Test Case: 231 | Input/Output: [(97 29 37 2) 2]
Test Case: 232 | Input/Output: [(90 57 47 62) 47]
Test Case: 233 | Input/Output: [(5 67 25 31) 5]
Test Case: 234 | Input/Output: [(97 4 83 22) 4]
Test Case: 235 | Input/Output: [(43 90 26 93) 26]
Test Case: 236 | Input/Output: [(85 41 50 12) 12]
Test Case: 237 | Input/Output: [(5 7 95 64) 5]
Test Case: 238 | Input/Output: [(98 100 72 16) 16]
Test Case: 239 | Input/Output: [(0 48 45 50) 0]
Test Case: 240 | Input/Output: [(99 56 98 33) 33]
Test Case: 241 | Input/Output: [(6 86 7 13) 6]
Test Case: 242 | Input/Output: [(23 100 82 55) 23]
Test Case: 243 | Input/Output: [(93 0 78 13) 0]
Test Case: 244 | Input/Output: [(94 43 83 78) 43]
Test Case: 245 | Input/Output: [(4 31 83 72) 4]
Test Case: 246 | Input/Output: [(48 41 22 27) 22]
Test Case: 247 | Input/Output: [(27 37 24 16) 16]
Test Case: 248 | Input/Output: [(73 86 2 14) 2]
Test Case: 249 | Input/Output: [(15 7 51 10) 7]
Test Case: 250 | Input/Output: [(25 55 94 18) 18]
Test Case: 251 | Input/Output: [(5 0 28 65) 0]
Test Case: 252 | Input/Output: [(7 84 83 34) 7]
Test Case: 253 | Input/Output: [(83 19 94 99) 19]
Test Case: 254 | Input/Output: [(22 49 89 18) 18]
Test Case: 255 | Input/Output: [(6 17 56 56) 6]
Test Case: 256 | Input/Output: [(75 75 6 27) 6]
Test Case: 257 | Input/Output: [(60 58 87 36) 36]
Test Case: 258 | Input/Output: [(75 83 52 75) 52]
Test Case: 259 | Input/Output: [(75 63 10 45) 10]
Test Case: 260 | Input/Output: [(2 24 36 86) 2]
Test Case: 261 | Input/Output: [(16 3 97 77) 3]
Test Case: 262 | Input/Output: [(81 13 20 25) 13]
Test Case: 263 | Input/Output: [(89 57 18 12) 12]
Test Case: 264 | Input/Output: [(6 22 89 60) 6]
Test Case: 265 | Input/Output: [(73 90 92 31) 31]
Test Case: 266 | Input/Output: [(50 57 2 52) 2]
Test Case: 267 | Input/Output: [(7 4 69 69) 4]
Test Case: 268 | Input/Output: [(0 83 56 89) 0]
Test Case: 269 | Input/Output: [(33 37 85 69) 33]
Test Case: 270 | Input/Output: [(30 93 29 24) 24]
Test Case: 271 | Input/Output: [(34 22 25 37) 22]
Test Case: 272 | Input/Output: [(57 77 71 39) 39]
Test Case: 273 | Input/Output: [(89 15 57 28) 15]
Test Case: 274 | Input/Output: [(65 14 52 36) 14]
Test Case: 275 | Input/Output: [(53 19 3 100) 3]
Test Case: 276 | Input/Output: [(33 27 32 68) 27]
Test Case: 277 | Input/Output: [(94 72 35 92) 35]
Test Case: 278 | Input/Output: [(98 97 21 38) 21]
Test Case: 279 | Input/Output: [(100 81 15 42) 15]
Test Case: 280 | Input/Output: [(67 60 15 79) 15]
Test Case: 281 | Input/Output: [(18 37 63 43) 18]
Test Case: 282 | Input/Output: [(26 84 48 62) 26]
Test Case: 283 | Input/Output: [(54 90 20 91) 20]
Test Case: 284 | Input/Output: [(45 77 32 51) 32]
Test Case: 285 | Input/Output: [(10 70 28 84) 10]
Test Case: 286 | Input/Output: [(85 36 98 41) 36]
Test Case: 287 | Input/Output: [(12 97 94 52) 12]
Test Case: 288 | Input/Output: [(73 87 44 78) 44]
Test Case: 289 | Input/Output: [(78 68 95 43) 43]
Test Case: 290 | Input/Output: [(51 25 76 4) 4]
Test Case: 291 | Input/Output: [(92 18 11 80) 11]
Test Case: 292 | Input/Output: [(7 60 78 91) 7]
Test Case: 293 | Input/Output: [(5 18 24 80) 5]
Test Case: 294 | Input/Output: [(62 48 64 6) 6]
Test Case: 295 | Input/Output: [(51 58 81 74) 51]
Test Case: 296 | Input/Output: [(78 53 50 95) 50]
Test Case: 297 | Input/Output: [(47 8 89 33) 8]
Test Case: 298 | Input/Output: [(48 42 75 13) 13]
Test Case: 299 | Input/Output: [(31 12 64 58) 12]
Test Case: 300 | Input/Output: [(84 60 11 16) 11]
Test Case: 301 | Input/Output: [(89 97 4 27) 4]
Test Case: 302 | Input/Output: [(43 32 32 88) 32]
Test Case: 303 | Input/Output: [(24 41 98 7) 7]
Test Case: 304 | Input/Output: [(92 63 56 38) 38]
Test Case: 305 | Input/Output: [(32 12 100 51) 12]
Test Case: 306 | Input/Output: [(3 29 51 70) 3]
Test Case: 307 | Input/Output: [(40 29 76 42) 29]
Test Case: 308 | Input/Output: [(11 70 92 35) 11]
Test Case: 309 | Input/Output: [(35 43 29 56) 29]
Test Case: 310 | Input/Output: [(16 73 28 20) 16]
Test Case: 311 | Input/Output: [(4 88 14 23) 4]
Test Case: 312 | Input/Output: [(91 48 20 75) 20]
Test Case: 313 | Input/Output: [(38 59 26 10) 10]
Test Case: 314 | Input/Output: [(16 88 72 0) 0]
Test Case: 315 | Input/Output: [(80 7 30 83) 7]
Test Case: 316 | Input/Output: [(11 98 28 13) 11]
Test Case: 317 | Input/Output: [(27 91 100 61) 27]
Test Case: 318 | Input/Output: [(58 35 12 61) 12]
Test Case: 319 | Input/Output: [(27 16 68 90) 16]
Test Case: 320 | Input/Output: [(37 16 54 74) 16]
Test Case: 321 | Input/Output: [(48 6 69 44) 6]
Test Case: 322 | Input/Output: [(91 89 70 8) 8]
Test Case: 323 | Input/Output: [(25 70 79 90) 25]
Test Case: 324 | Input/Output: [(12 52 15 31) 12]
Test Case: 325 | Input/Output: [(81 55 81 19) 19]
Test Case: 326 | Input/Output: [(57 29 30 45) 29]
Test Case: 327 | Input/Output: [(79 21 89 38) 21]
Test Case: 328 | Input/Output: [(29 66 90 30) 29]
Test Case: 329 | Input/Output: [(54 66 25 95) 25]
Test Case: 330 | Input/Output: [(52 27 52 58) 27]
Test Case: 331 | Input/Output: [(8 96 71 42) 8]
Test Case: 332 | Input/Output: [(8 31 65 14) 8]
Test Case: 333 | Input/Output: [(42 69 100 52) 42]
Test Case: 334 | Input/Output: [(89 13 11 44) 11]
Test Case: 335 | Input/Output: [(50 36 16 62) 16]
Test Case: 336 | Input/Output: [(20 33 67 74) 20]
Test Case: 337 | Input/Output: [(69 64 34 56) 34]
Test Case: 338 | Input/Output: [(77 55 21 29) 21]
Test Case: 339 | Input/Output: [(62 72 11 6) 6]
Test Case: 340 | Input/Output: [(28 53 40 5) 5]
Test Case: 341 | Input/Output: [(89 78 41 37) 37]
Test Case: 342 | Input/Output: [(59 44 80 27) 27]
Test Case: 343 | Input/Output: [(7 37 78 80) 7]
Test Case: 344 | Input/Output: [(20 19 75 82) 19]
Test Case: 345 | Input/Output: [(20 84 6 28) 6]
Test Case: 346 | Input/Output: [(31 87 80 13) 13]
Test Case: 347 | Input/Output: [(89 11 22 36) 11]
Test Case: 348 | Input/Output: [(85 1 13 47) 1]
Test Case: 349 | Input/Output: [(6 71 97 53) 6]
Test Case: 350 | Input/Output: [(31 30 88 52) 30]
Test Case: 351 | Input/Output: [(92 37 67 9) 9]
Test Case: 352 | Input/Output: [(86 76 85 75) 75]
Test Case: 353 | Input/Output: [(17 38 62 89) 17]
Test Case: 354 | Input/Output: [(97 77 49 81) 49]
Test Case: 355 | Input/Output: [(79 20 54 0) 0]
Test Case: 356 | Input/Output: [(7 18 80 76) 7]
Test Case: 357 | Input/Output: [(44 11 78 40) 11]
Test Case: 358 | Input/Output: [(81 1 20 60) 1]
Test Case: 359 | Input/Output: [(4 53 73 16) 4]
Test Case: 360 | Input/Output: [(26 85 31 81) 26]
Test Case: 361 | Input/Output: [(100 32 16 18) 16]
Test Case: 362 | Input/Output: [(53 82 14 23) 14]
Test Case: 363 | Input/Output: [(8 54 32 40) 8]
Test Case: 364 | Input/Output: [(34 18 12 13) 12]
Test Case: 365 | Input/Output: [(45 66 21 25) 21]
Test Case: 366 | Input/Output: [(75 98 37 54) 37]
Test Case: 367 | Input/Output: [(96 7 15 33) 7]
Test Case: 368 | Input/Output: [(6 93 82 32) 6]
Test Case: 369 | Input/Output: [(81 21 43 40) 21]
Test Case: 370 | Input/Output: [(94 3 10 8) 3]
Test Case: 371 | Input/Output: [(22 60 35 74) 22]
Test Case: 372 | Input/Output: [(7 43 88 66) 7]
Test Case: 373 | Input/Output: [(65 17 11 90) 11]
Test Case: 374 | Input/Output: [(74 49 73 86) 49]
Test Case: 375 | Input/Output: [(18 70 77 41) 18]
Test Case: 376 | Input/Output: [(59 29 50 97) 29]
Test Case: 377 | Input/Output: [(84 46 10 96) 10]
Test Case: 378 | Input/Output: [(61 3 41 58) 3]
Test Case: 379 | Input/Output: [(27 47 67 9) 9]
Test Case: 380 | Input/Output: [(27 51 82 40) 27]
Test Case: 381 | Input/Output: [(63 43 11 16) 11]
Test Case: 382 | Input/Output: [(93 44 36 23) 23]
Test Case: 383 | Input/Output: [(40 49 52 84) 40]
Test Case: 384 | Input/Output: [(35 81 93 70) 35]
Test Case: 385 | Input/Output: [(76 89 63 30) 30]
Test Case: 386 | Input/Output: [(11 71 26 82) 11]
Test Case: 387 | Input/Output: [(26 30 53 42) 26]
Test Case: 388 | Input/Output: [(3 70 62 18) 3]
Test Case: 389 | Input/Output: [(31 32 83 61) 31]
Test Case: 390 | Input/Output: [(97 40 63 13) 13]
Test Case: 391 | Input/Output: [(14 26 13 10) 10]
Test Case: 392 | Input/Output: [(70 0 66 23) 0]
Test Case: 393 | Input/Output: [(41 9 71 11) 9]
Test Case: 394 | Input/Output: [(72 35 20 25) 20]
Test Case: 395 | Input/Output: [(26 64 78 76) 26]
Test Case: 396 | Input/Output: [(41 40 63 90) 40]
Test Case: 397 | Input/Output: [(67 32 1 34) 1]
Test Case: 398 | Input/Output: [(18 82 12 40) 12]
Test Case: 399 | Input/Output: [(53 3 49 40) 3]
Test Case: 400 | Input/Output: [(2 -52 -23 15) -52]
Test Case: 401 | Input/Output: [(-70 -53 -9 24) -70]
Test Case: 402 | Input/Output: [(-80 97 -96 -23) -96]
Test Case: 403 | Input/Output: [(1 -3 -67 82) -67]
Test Case: 404 | Input/Output: [(23 -90 -63 44) -90]
Test Case: 405 | Input/Output: [(27 72 17 37) 17]
Test Case: 406 | Input/Output: [(21 85 -96 -57) -96]
Test Case: 407 | Input/Output: [(-75 -36 64 2) -75]
Test Case: 408 | Input/Output: [(57 29 64 15) 15]
Test Case: 409 | Input/Output: [(-90 -65 -54 -69) -90]
Test Case: 410 | Input/Output: [(-70 74 -52 16) -70]
Test Case: 411 | Input/Output: [(58 23 38 -11) -11]
Test Case: 412 | Input/Output: [(-35 19 -57 23) -57]
Test Case: 413 | Input/Output: [(38 12 -72 -23) -72]
Test Case: 414 | Input/Output: [(-9 79 -32 -13) -32]
Test Case: 415 | Input/Output: [(-38 34 -40 88) -40]
Test Case: 416 | Input/Output: [(-90 59 -25 64) -90]
Test Case: 417 | Input/Output: [(-88 -40 -32 70) -88]
Test Case: 418 | Input/Output: [(-81 -4 10 -84) -84]
Test Case: 419 | Input/Output: [(69 -55 70 13) -55]
Test Case: 420 | Input/Output: [(36 -63 -25 -74) -74]
Test Case: 421 | Input/Output: [(-86 54 86 -53) -86]
Test Case: 422 | Input/Output: [(-52 -58 -78 -19) -78]
Test Case: 423 | Input/Output: [(54 2 79 76) 2]
Test Case: 424 | Input/Output: [(82 99 -19 97) -19]
Test Case: 425 | Input/Output: [(74 12 -98 -4) -98]
Test Case: 426 | Input/Output: [(40 20 -72 24) -72]
Test Case: 427 | Input/Output: [(76 57 -6 -5) -6]
Test Case: 428 | Input/Output: [(-44 69 -47 -42) -47]
Test Case: 429 | Input/Output: [(-95 54 26 -91) -95]
Test Case: 430 | Input/Output: [(-55 51 82 -54) -55]
Test Case: 431 | Input/Output: [(-61 0 -56 83) -61]
Test Case: 432 | Input/Output: [(-71 -96 -51 -12) -96]
Test Case: 433 | Input/Output: [(-83 67 -23 -83) -83]
Test Case: 434 | Input/Output: [(-59 -68 22 72) -68]
Test Case: 435 | Input/Output: [(24 42 -82 20) -82]
Test Case: 436 | Input/Output: [(35 -88 -59 30) -88]
Test Case: 437 | Input/Output: [(57 98 -13 51) -13]
Test Case: 438 | Input/Output: [(-2 78 50 75) -2]
Test Case: 439 | Input/Output: [(25 -8 83 0) -8]
Test Case: 440 | Input/Output: [(0 89 -25 98) -25]
Test Case: 441 | Input/Output: [(-65 -83 -33 90) -83]
Test Case: 442 | Input/Output: [(-60 -15 64 -66) -66]
Test Case: 443 | Input/Output: [(-90 53 20 -23) -90]
Test Case: 444 | Input/Output: [(-86 67 -2 -28) -86]
Test Case: 445 | Input/Output: [(-79 83 77 15) -79]
Test Case: 446 | Input/Output: [(-77 15 -41 33) -77]
Test Case: 447 | Input/Output: [(-56 -9 -77 -86) -86]
Test Case: 448 | Input/Output: [(23 49 -70 -88) -88]
Test Case: 449 | Input/Output: [(42 -94 37 73) -94]
Test Case: 450 | Input/Output: [(-100 -17 -66 -88) -100]
Test Case: 451 | Input/Output: [(62 -49 -4 43) -49]
Test Case: 452 | Input/Output: [(93 -45 57 -73) -73]
Test Case: 453 | Input/Output: [(-62 24 -61 71) -62]
Test Case: 454 | Input/Output: [(60 -2 -61 1) -61]
Test Case: 455 | Input/Output: [(-29 -67 90 50) -67]
Test Case: 456 | Input/Output: [(-2 19 -64 12) -64]
Test Case: 457 | Input/Output: [(12 -9 -25 51) -25]
Test Case: 458 | Input/Output: [(-64 -11 83 47) -64]
Test Case: 459 | Input/Output: [(33 98 -20 -11) -20]
Test Case: 460 | Input/Output: [(3 -52 -84 -83) -84]
Test Case: 461 | Input/Output: [(-45 58 39 48) -45]
Test Case: 462 | Input/Output: [(70 78 -6 -59) -59]
Test Case: 463 | Input/Output: [(-79 -59 -22 -23) -79]
Test Case: 464 | Input/Output: [(-7 -10 -8 -48) -48]
Test Case: 465 | Input/Output: [(39 69 43 -99) -99]
Test Case: 466 | Input/Output: [(-21 24 12 -60) -60]
Test Case: 467 | Input/Output: [(78 48 78 41) 41]
Test Case: 468 | Input/Output: [(37 -17 57 -10) -17]
Test Case: 469 | Input/Output: [(2 -25 13 60) -25]
Test Case: 470 | Input/Output: [(-87 58 -61 -75) -87]
Test Case: 471 | Input/Output: [(-59 -26 49 92) -59]
Test Case: 472 | Input/Output: [(10 98 -97 15) -97]
Test Case: 473 | Input/Output: [(77 22 -37 -69) -69]
Test Case: 474 | Input/Output: [(55 -11 82 22) -11]
Test Case: 475 | Input/Output: [(87 47 98 -66) -66]
Test Case: 476 | Input/Output: [(50 61 60 -36) -36]
Test Case: 477 | Input/Output: [(45 51 -20 9) -20]
Test Case: 478 | Input/Output: [(-97 -22 -14 45) -97]
Test Case: 479 | Input/Output: [(79 -58 -62 -20) -62]
Test Case: 480 | Input/Output: [(98 -36 53 69) -36]
Test Case: 481 | Input/Output: [(-77 -19 12 -42) -77]
Test Case: 482 | Input/Output: [(61 47 -71 29) -71]
Test Case: 483 | Input/Output: [(46 42 10 -36) -36]
Test Case: 484 | Input/Output: [(-80 -48 15 83) -80]
Test Case: 485 | Input/Output: [(52 13 -78 18) -78]
Test Case: 486 | Input/Output: [(95 -11 6 78) -11]
Test Case: 487 | Input/Output: [(-7 -88 -86 -41) -88]
Test Case: 488 | Input/Output: [(-98 -6 -89 82) -98]
Test Case: 489 | Input/Output: [(53 54 40 97) 40]
Test Case: 490 | Input/Output: [(-36 -53 -79 57) -79]
Test Case: 491 | Input/Output: [(96 54 79 -64) -64]
Test Case: 492 | Input/Output: [(98 -64 -57 -93) -93]
Test Case: 493 | Input/Output: [(-82 -64 34 3) -82]
Test Case: 494 | Input/Output: [(-51 -73 71 -56) -73]
Test Case: 495 | Input/Output: [(-37 -90 56 -29) -90]
Test Case: 496 | Input/Output: [(-70 -55 14 20) -70]
Test Case: 497 | Input/Output: [(-34 -87 -49 -28) -87]
Test Case: 498 | Input/Output: [(-47 70 77 5) -47]
Test Case: 499 | Input/Output: [(80 8 15 -47) -47]
Test Case: 500 | Input/Output: [(76 18 -36 88) -36]
Test Case: 501 | Input/Output: [(42 87 42 96) 42]
Test Case: 502 | Input/Output: [(36 18 -88 24) -88]
Test Case: 503 | Input/Output: [(26 -63 2 -58) -63]
Test Case: 504 | Input/Output: [(-92 -60 -50 56) -92]
Test Case: 505 | Input/Output: [(18 -79 -49 -82) -82]
Test Case: 506 | Input/Output: [(-98 -48 -64 -21) -98]
Test Case: 507 | Input/Output: [(-27 -5 -67 82) -67]
Test Case: 508 | Input/Output: [(-39 44 44 -53) -53]
Test Case: 509 | Input/Output: [(30 -65 22 49) -65]
Test Case: 510 | Input/Output: [(-41 -48 -74 94) -74]
Test Case: 511 | Input/Output: [(37 -66 99 -45) -66]
Test Case: 512 | Input/Output: [(-67 -57 10 -67) -67]
Test Case: 513 | Input/Output: [(-48 7 71 83) -48]
Test Case: 514 | Input/Output: [(30 22 -54 56) -54]
Test Case: 515 | Input/Output: [(45 94 -41 -74) -74]
Test Case: 516 | Input/Output: [(98 -5 -79 96) -79]
Test Case: 517 | Input/Output: [(46 -45 97 -3) -45]
Test Case: 518 | Input/Output: [(-83 67 51 100) -83]
Test Case: 519 | Input/Output: [(-88 -92 -73 18) -92]
Test Case: 520 | Input/Output: [(28 37 76 -94) -94]
Test Case: 521 | Input/Output: [(-84 97 -18 79) -84]
Test Case: 522 | Input/Output: [(18 -32 38 46) -32]
Test Case: 523 | Input/Output: [(83 3 19 90) 3]
Test Case: 524 | Input/Output: [(-72 96 -6 93) -72]
Test Case: 525 | Input/Output: [(-93 -67 -17 7) -93]
Test Case: 526 | Input/Output: [(-90 63 -23 25) -90]
Test Case: 527 | Input/Output: [(-91 -81 0 -26) -91]
Test Case: 528 | Input/Output: [(-29 -86 79 52) -86]
Test Case: 529 | Input/Output: [(-14 22 0 -22) -22]
Test Case: 530 | Input/Output: [(39 98 52 73) 39]
Test Case: 531 | Input/Output: [(45 -70 44 -52) -70]
Test Case: 532 | Input/Output: [(-36 47 -67 18) -67]
Test Case: 533 | Input/Output: [(2 -36 34 -13) -36]
Test Case: 534 | Input/Output: [(21 30 -30 94) -30]
Test Case: 535 | Input/Output: [(82 37 30 -97) -97]
Test Case: 536 | Input/Output: [(-88 42 -41 38) -88]
Test Case: 537 | Input/Output: [(32 -79 -77 -10) -79]
Test Case: 538 | Input/Output: [(-22 63 25 -27) -27]
Test Case: 539 | Input/Output: [(60 -96 -32 25) -96]
Test Case: 540 | Input/Output: [(-56 -45 -25 -63) -63]
Test Case: 541 | Input/Output: [(-29 -15 -39 37) -39]
Test Case: 542 | Input/Output: [(87 -43 -5 -66) -66]
Test Case: 543 | Input/Output: [(-13 -41 4 -82) -82]
Test Case: 544 | Input/Output: [(-34 35 -73 26) -73]
Test Case: 545 | Input/Output: [(83 97 -27 -90) -90]
Test Case: 546 | Input/Output: [(31 -68 38 99) -68]
Test Case: 547 | Input/Output: [(63 -68 27 -12) -68]
Test Case: 548 | Input/Output: [(37 -53 37 -36) -53]
Test Case: 549 | Input/Output: [(56 70 -24 -67) -67]
Test Case: 550 | Input/Output: [(-100 -17 -68 34) -100]
Test Case: 551 | Input/Output: [(-55 -45 81 55) -55]
Test Case: 552 | Input/Output: [(18 -29 -23 47) -29]
Test Case: 553 | Input/Output: [(-85 61 75 -17) -85]
Test Case: 554 | Input/Output: [(-48 13 14 29) -48]
Test Case: 555 | Input/Output: [(-64 39 -59 -42) -64]
Test Case: 556 | Input/Output: [(-61 79 41 12) -61]
Test Case: 557 | Input/Output: [(49 38 -37 -61) -61]
Test Case: 558 | Input/Output: [(-16 43 -49 -19) -49]
Test Case: 559 | Input/Output: [(24 22 90 -46) -46]
Test Case: 560 | Input/Output: [(-26 2 74 48) -26]
Test Case: 561 | Input/Output: [(-43 63 -62 -93) -93]
Test Case: 562 | Input/Output: [(-64 13 -14 -27) -64]
Test Case: 563 | Input/Output: [(88 51 -2 76) -2]
Test Case: 564 | Input/Output: [(-28 32 28 -11) -28]
Test Case: 565 | Input/Output: [(-75 -87 46 21) -87]
Test Case: 566 | Input/Output: [(94 -73 78 -52) -73]
Test Case: 567 | Input/Output: [(94 6 11 -83) -83]
Test Case: 568 | Input/Output: [(-31 100 68 43) -31]
Test Case: 569 | Input/Output: [(54 9 84 30) 9]
Test Case: 570 | Input/Output: [(40 -23 -82 -99) -99]
Test Case: 571 | Input/Output: [(28 -99 9 62) -99]
Test Case: 572 | Input/Output: [(-70 43 22 80) -70]
Test Case: 573 | Input/Output: [(73 -20 73 97) -20]
Test Case: 574 | Input/Output: [(-61 38 51 48) -61]
Test Case: 575 | Input/Output: [(-24 -22 -71 -15) -71]
Test Case: 576 | Input/Output: [(-41 65 0 34) -41]
Test Case: 577 | Input/Output: [(-73 31 -75 -13) -75]
Test Case: 578 | Input/Output: [(-20 58 -60 -71) -71]
Test Case: 579 | Input/Output: [(57 -46 -68 -64) -68]
Test Case: 580 | Input/Output: [(64 40 86 40) 40]
Test Case: 581 | Input/Output: [(-4 -87 -55 -3) -87]
Test Case: 582 | Input/Output: [(-77 -28 61 -94) -94]
Test Case: 583 | Input/Output: [(-15 -36 -31 -58) -58]
Test Case: 584 | Input/Output: [(-82 42 40 16) -82]
Test Case: 585 | Input/Output: [(54 -90 -96 62) -96]
Test Case: 586 | Input/Output: [(31 -14 -73 -33) -73]
Test Case: 587 | Input/Output: [(-91 -54 -29 80) -91]
Test Case: 588 | Input/Output: [(66 -84 -28 7) -84]
Test Case: 589 | Input/Output: [(-32 94 -49 37) -49]
Test Case: 590 | Input/Output: [(54 -83 -20 -87) -87]
Test Case: 591 | Input/Output: [(5 -87 -34 -74) -87]
Test Case: 592 | Input/Output: [(-64 -33 15 21) -64]
Test Case: 593 | Input/Output: [(74 -42 -85 20) -85]
Test Case: 594 | Input/Output: [(78 86 66 -26) -26]
Test Case: 595 | Input/Output: [(-72 -17 61 -28) -72]
Test Case: 596 | Input/Output: [(1 64 -31 82) -31]
Test Case: 597 | Input/Output: [(-88 -17 -64 87) -88]
Test Case: 598 | Input/Output: [(-62 82 12 -7) -62]
Test Case: 599 | Input/Output: [(82 58 -26 48) -26]
Test Case: 600 | Input/Output: [(-2 89 -27 -3) -27]
Test Case: 601 | Input/Output: [(-36 57 -82 -59) -82]
Test Case: 602 | Input/Output: [(-98 81 26 -86) -98]
Test Case: 603 | Input/Output: [(-87 63 -9 -70) -87]
Test Case: 604 | Input/Output: [(65 -32 2 -59) -59]
Test Case: 605 | Input/Output: [(80 -22 -44 27) -44]
Test Case: 606 | Input/Output: [(22 -79 87 19) -79]
Test Case: 607 | Input/Output: [(-8 61 61 44) -8]
Test Case: 608 | Input/Output: [(-89 24 -15 -50) -89]
Test Case: 609 | Input/Output: [(-79 -36 4 43) -79]
Test Case: 610 | Input/Output: [(46 -97 48 -91) -97]
Test Case: 611 | Input/Output: [(-87 97 73 59) -87]
Test Case: 612 | Input/Output: [(-58 -76 -92 -18) -92]
Test Case: 613 | Input/Output: [(-91 -11 -80 -58) -91]
Test Case: 614 | Input/Output: [(28 -64 -12 35) -64]
Test Case: 615 | Input/Output: [(-91 -13 -27 -90) -91]
Test Case: 616 | Input/Output: [(-15 20 -12 93) -15]
Test Case: 617 | Input/Output: [(74 -91 -42 -35) -91]
Test Case: 618 | Input/Output: [(-7 8 49 69) -7]
Test Case: 619 | Input/Output: [(-5 -71 -13 12) -71]
Test Case: 620 | Input/Output: [(45 -4 -29 -38) -38]
Test Case: 621 | Input/Output: [(21 37 -68 -85) -85]
Test Case: 622 | Input/Output: [(20 -23 16 -73) -73]
Test Case: 623 | Input/Output: [(-76 -42 -85 60) -85]
Test Case: 624 | Input/Output: [(-89 83 -54 -10) -89]
Test Case: 625 | Input/Output: [(28 98 71 15) 15]
Test Case: 626 | Input/Output: [(-57 -74 50 -20) -74]
Test Case: 627 | Input/Output: [(-8 41 -47 34) -47]
Test Case: 628 | Input/Output: [(5 72 -34 76) -34]
Test Case: 629 | Input/Output: [(91 -95 -21 89) -95]
Test Case: 630 | Input/Output: [(62 -53 -22 -89) -89]
Test Case: 631 | Input/Output: [(-94 60 -89 76) -94]
Test Case: 632 | Input/Output: [(93 -46 -35 -51) -51]
Test Case: 633 | Input/Output: [(-53 18 15 13) -53]
Test Case: 634 | Input/Output: [(-57 -93 -44 -76) -93]
Test Case: 635 | Input/Output: [(-97 18 87 -98) -98]
Test Case: 636 | Input/Output: [(-80 1 10 -51) -80]
Test Case: 637 | Input/Output: [(84 -85 -26 34) -85]
Test Case: 638 | Input/Output: [(44 -58 -28 63) -58]
Test Case: 639 | Input/Output: [(-18 -17 81 -52) -52]
Test Case: 640 | Input/Output: [(-68 -99 87 -35) -99]
Test Case: 641 | Input/Output: [(56 44 88 5) 5]
Test Case: 642 | Input/Output: [(27 -94 -70 -92) -94]
Test Case: 643 | Input/Output: [(-62 -37 69 -58) -62]
Test Case: 644 | Input/Output: [(-14 -84 -56 24) -84]
Test Case: 645 | Input/Output: [(-90 69 75 83) -90]
Test Case: 646 | Input/Output: [(11 1 -93 -98) -98]
Test Case: 647 | Input/Output: [(-43 -48 -48 95) -48]
Test Case: 648 | Input/Output: [(-88 -55 -100 54) -100]
Test Case: 649 | Input/Output: [(14 -12 -70 79) -70]
Test Case: 650 | Input/Output: [(50 -23 3 12) -23]
Test Case: 651 | Input/Output: [(72 0 -18 35) -18]
Test Case: 652 | Input/Output: [(-82 -89 94 67) -89]
Test Case: 653 | Input/Output: [(-50 87 76 61) -50]
Test Case: 654 | Input/Output: [(-94 -33 6 -58) -94]
Test Case: 655 | Input/Output: [(0 -3 -65 -76) -76]
Test Case: 656 | Input/Output: [(13 -88 47 -1) -88]
Test Case: 657 | Input/Output: [(79 54 9 -84) -84]
Test Case: 658 | Input/Output: [(-44 76 94 -73) -73]
Test Case: 659 | Input/Output: [(76 -60 81 41) -60]
Test Case: 660 | Input/Output: [(-15 -100 -17 -76) -100]
Test Case: 661 | Input/Output: [(20 -70 25 12) -70]
Test Case: 662 | Input/Output: [(-40 53 97 -42) -42]
Test Case: 663 | Input/Output: [(-44 100 -59 -4) -59]
Test Case: 664 | Input/Output: [(-92 -33 -47 -16) -92]
Test Case: 665 | Input/Output: [(60 98 100 38) 38]
Test Case: 666 | Input/Output: [(-93 96 -6 -46) -93]
Test Case: 667 | Input/Output: [(13 7 -89 -72) -89]
Test Case: 668 | Input/Output: [(12 -15 38 -92) -92]
Test Case: 669 | Input/Output: [(10 12 -67 40) -67]
Test Case: 670 | Input/Output: [(-33 -2 47 -65) -65]
Test Case: 671 | Input/Output: [(83 -29 -71 96) -71]
Test Case: 672 | Input/Output: [(94 -20 57 93) -20]
Test Case: 673 | Input/Output: [(65 100 -80 92) -80]
Test Case: 674 | Input/Output: [(9 0 -70 -23) -70]
Test Case: 675 | Input/Output: [(-59 -41 34 -4) -59]
Test Case: 676 | Input/Output: [(-36 63 33 43) -36]
Test Case: 677 | Input/Output: [(25 30 -85 41) -85]
Test Case: 678 | Input/Output: [(-59 15 -83 55) -83]
Test Case: 679 | Input/Output: [(-78 -88 -53 -73) -88]
Test Case: 680 | Input/Output: [(-34 -36 -34 15) -36]
Test Case: 681 | Input/Output: [(-51 43 -41 77) -51]
Test Case: 682 | Input/Output: [(49 62 85 71) 49]
Test Case: 683 | Input/Output: [(-28 40 -100 -89) -100]
Test Case: 684 | Input/Output: [(-22 -1 78 92) -22]
Test Case: 685 | Input/Output: [(-76 36 44 -8) -76]
Test Case: 686 | Input/Output: [(91 54 -67 22) -67]
Test Case: 687 | Input/Output: [(-68 -81 -84 48) -84]
Test Case: 688 | Input/Output: [(-27 -28 -78 -38) -78]
Test Case: 689 | Input/Output: [(-81 -27 55 51) -81]
Test Case: 690 | Input/Output: [(25 77 -89 -16) -89]
Test Case: 691 | Input/Output: [(-20 -8 8 0) -20]
Test Case: 692 | Input/Output: [(54 -30 17 74) -30]
Test Case: 693 | Input/Output: [(-43 34 97 -25) -43]
Test Case: 694 | Input/Output: [(-18 -27 14 96) -27]
Test Case: 695 | Input/Output: [(-18 -43 82 -16) -43]
Test Case: 696 | Input/Output: [(62 11 -52 -72) -72]
Test Case: 697 | Input/Output: [(69 55 -43 77) -43]
Test Case: 698 | Input/Output: [(-8 55 20 -82) -82]
Test Case: 699 | Input/Output: [(37 28 13 34) 13]
Test Case: 700 | Input/Output: [(67 25 56 14) 14]
Test Case: 701 | Input/Output: [(11 -67 71 -29) -67]
Test Case: 702 | Input/Output: [(62 -96 -8 93) -96]
Test Case: 703 | Input/Output: [(-11 74 100 21) -11]
Test Case: 704 | Input/Output: [(-20 -28 11 29) -28]
Test Case: 705 | Input/Output: [(-9 -94 -59 90) -94]
Test Case: 706 | Input/Output: [(20 84 14 -95) -95]
Test Case: 707 | Input/Output: [(32 82 34 79) 32]
Test Case: 708 | Input/Output: [(87 -25 -32 -51) -51]
Test Case: 709 | Input/Output: [(77 -67 80 72) -67]
Test Case: 710 | Input/Output: [(-36 5 -74 45) -74]
Test Case: 711 | Input/Output: [(-77 -4 45 6) -77]
Test Case: 712 | Input/Output: [(57 -83 -23 -1) -83]
Test Case: 713 | Input/Output: [(-10 -49 -93 76) -93]
Test Case: 714 | Input/Output: [(-58 2 -60 -83) -83]
Test Case: 715 | Input/Output: [(-72 52 12 -49) -72]
Test Case: 716 | Input/Output: [(29 -1 -17 -82) -82]
Test Case: 717 | Input/Output: [(28 91 -48 -4) -48]
Test Case: 718 | Input/Output: [(-11 -86 -90 -75) -90]
Test Case: 719 | Input/Output: [(79 -16 -45 -39) -45]
Test Case: 720 | Input/Output: [(89 -22 62 47) -22]
Test Case: 721 | Input/Output: [(37 93 -86 57) -86]
Test Case: 722 | Input/Output: [(-100 63 95 -47) -100]
Test Case: 723 | Input/Output: [(-21 -78 -29 -68) -78]
Test Case: 724 | Input/Output: [(-66 50 14 -29) -66]
Test Case: 725 | Input/Output: [(-59 49 -34 22) -59]
Test Case: 726 | Input/Output: [(-39 -68 91 4) -68]
Test Case: 727 | Input/Output: [(18 99 -39 -22) -39]
Test Case: 728 | Input/Output: [(-35 79 -98 -35) -98]
Test Case: 729 | Input/Output: [(-52 -9 98 -25) -52]
Test Case: 730 | Input/Output: [(-99 -66 -82 23) -99]
Test Case: 731 | Input/Output: [(-68 34 39 -68) -68]
Test Case: 732 | Input/Output: [(84 23 -10 64) -10]
Test Case: 733 | Input/Output: [(47 49 -9 -13) -13]
Test Case: 734 | Input/Output: [(1 -7 -33 51) -33]
Test Case: 735 | Input/Output: [(13 65 48 -91) -91]
Test Case: 736 | Input/Output: [(-18 42 54 87) -18]
Test Case: 737 | Input/Output: [(-64 -88 -23 -29) -88]
Test Case: 738 | Input/Output: [(15 -2 -3 -60) -60]
Test Case: 739 | Input/Output: [(-81 84 48 -83) -83]
Test Case: 740 | Input/Output: [(11 -55 99 -24) -55]
Test Case: 741 | Input/Output: [(60 54 96 -62) -62]
Test Case: 742 | Input/Output: [(5 19 38 -74) -74]
Test Case: 743 | Input/Output: [(-52 -9 -59 -71) -71]
Test Case: 744 | Input/Output: [(23 70 35 -100) -100]
Test Case: 745 | Input/Output: [(80 -21 58 83) -21]
Test Case: 746 | Input/Output: [(-14 35 81 16) -14]
Test Case: 747 | Input/Output: [(71 30 100 62) 30]
Test Case: 748 | Input/Output: [(7 -42 78 -26) -42]
Test Case: 749 | Input/Output: [(84 93 31 -31) -31]
Test Case: 750 | Input/Output: [(49 33 -14 -44) -44]
Test Case: 751 | Input/Output: [(25 67 -9 94) -9]
Test Case: 752 | Input/Output: [(-77 71 -90 8) -90]
Test Case: 753 | Input/Output: [(52 45 45 -30) -30]
Test Case: 754 | Input/Output: [(-46 71 -24 -99) -99]
Test Case: 755 | Input/Output: [(65 70 -24 70) -24]
Test Case: 756 | Input/Output: [(27 -27 48 66) -27]
Test Case: 757 | Input/Output: [(25 -21 -84 42) -84]
Test Case: 758 | Input/Output: [(-82 26 -28 74) -82]
Test Case: 759 | Input/Output: [(-90 98 92 19) -90]
Test Case: 760 | Input/Output: [(83 -10 2 -81) -81]
Test Case: 761 | Input/Output: [(-26 -1 -3 15) -26]
Test Case: 762 | Input/Output: [(13 -38 -26 6) -38]
Test Case: 763 | Input/Output: [(60 80 40 -43) -43]
Test Case: 764 | Input/Output: [(64 44 -67 -51) -67]
Test Case: 765 | Input/Output: [(-49 54 43 -44) -49]
Test Case: 766 | Input/Output: [(37 39 -44 88) -44]
Test Case: 767 | Input/Output: [(-56 -100 -85 -77) -100]
Test Case: 768 | Input/Output: [(-71 -38 44 -75) -75]
Test Case: 769 | Input/Output: [(-42 -38 31 -83) -83]
Test Case: 770 | Input/Output: [(5 60 -2 12) -2]
Test Case: 771 | Input/Output: [(6 28 6 0) 0]
Test Case: 772 | Input/Output: [(98 36 91 -52) -52]
Test Case: 773 | Input/Output: [(51 -37 95 15) -37]
Test Case: 774 | Input/Output: [(-58 97 -74 -35) -74]
Test Case: 775 | Input/Output: [(-4 33 76 34) -4]
Test Case: 776 | Input/Output: [(42 -75 41 46) -75]
Test Case: 777 | Input/Output: [(12 -58 26 9) -58]
Test Case: 778 | Input/Output: [(65 55 -57 60) -57]
Test Case: 779 | Input/Output: [(28 48 -23 -76) -76]
Test Case: 780 | Input/Output: [(27 83 -86 83) -86]
Test Case: 781 | Input/Output: [(36 -25 -24 -64) -64]
Test Case: 782 | Input/Output: [(-48 53 -46 38) -48]
Test Case: 783 | Input/Output: [(0 -10 -45 -97) -97]
Test Case: 784 | Input/Output: [(50 59 -91 -3) -91]
Test Case: 785 | Input/Output: [(-58 27 -76 -32) -76]
Test Case: 786 | Input/Output: [(73 -72 78 59) -72]
Test Case: 787 | Input/Output: [(-97 24 -75 23) -97]
Test Case: 788 | Input/Output: [(38 18 4 -75) -75]
Test Case: 789 | Input/Output: [(-67 55 -92 59) -92]
Test Case: 790 | Input/Output: [(-65 -93 -18 -85) -93]
Test Case: 791 | Input/Output: [(-27 -56 -48 -28) -56]
Test Case: 792 | Input/Output: [(-88 -49 -95 -57) -95]
Test Case: 793 | Input/Output: [(-74 28 94 96) -74]
Test Case: 794 | Input/Output: [(-35 -85 -26 -42) -85]
Test Case: 795 | Input/Output: [(33 -68 1 8) -68]
Test Case: 796 | Input/Output: [(13 33 15 -58) -58]
Test Case: 797 | Input/Output: [(-75 62 -25 56) -75]
Test Case: 798 | Input/Output: [(69 -34 -30 -58) -58]
Test Case: 799 | Input/Output: [(-64 -84 15 -74) -84]
Test Case: 800 | Input/Output: [(13 70 78 32) 13]
Test Case: 801 | Input/Output: [(-31 -9 -56 83) -56]
Test Case: 802 | Input/Output: [(43 88 13 -32) -32]
Test Case: 803 | Input/Output: [(79 -73 -34 -45) -73]
Test Case: 804 | Input/Output: [(-74 70 -15 -65) -74]
Test Case: 805 | Input/Output: [(-67 70 12 81) -67]
Test Case: 806 | Input/Output: [(5 -35 22 2) -35]
Test Case: 807 | Input/Output: [(83 43 98 -77) -77]
Test Case: 808 | Input/Output: [(-48 -47 35 -5) -48]
Test Case: 809 | Input/Output: [(-82 -81 -34 -21) -82]
Test Case: 810 | Input/Output: [(-13 -15 59 16) -15]
Test Case: 811 | Input/Output: [(41 -45 -47 26) -47]
Test Case: 812 | Input/Output: [(42 9 17 30) 9]
Test Case: 813 | Input/Output: [(14 -36 54 71) -36]
Test Case: 814 | Input/Output: [(40 30 -70 -22) -70]
Test Case: 815 | Input/Output: [(12 26 23 31) 12]
Test Case: 816 | Input/Output: [(-33 -77 -72 27) -77]
Test Case: 817 | Input/Output: [(86 76 -37 13) -37]
Test Case: 818 | Input/Output: [(77 -51 24 -79) -79]
Test Case: 819 | Input/Output: [(97 65 -17 15) -17]
Test Case: 820 | Input/Output: [(65 -86 72 32) -86]
Test Case: 821 | Input/Output: [(98 -80 -61 -40) -80]
Test Case: 822 | Input/Output: [(77 67 -86 67) -86]
Test Case: 823 | Input/Output: [(-25 36 23 -27) -27]
Test Case: 824 | Input/Output: [(5 90 -100 60) -100]
Test Case: 825 | Input/Output: [(-34 95 -7 -54) -54]
Test Case: 826 | Input/Output: [(-16 86 -46 -43) -46]
Test Case: 827 | Input/Output: [(-60 -79 33 -20) -79]
Test Case: 828 | Input/Output: [(4 85 -64 -55) -64]
Test Case: 829 | Input/Output: [(-98 -2 11 -97) -98]
Test Case: 830 | Input/Output: [(-17 -78 98 3) -78]
Test Case: 831 | Input/Output: [(-93 80 -72 -99) -99]
Test Case: 832 | Input/Output: [(86 -23 -56 18) -56]
Test Case: 833 | Input/Output: [(19 0 -68 -63) -68]
Test Case: 834 | Input/Output: [(48 -96 -28 -57) -96]
Test Case: 835 | Input/Output: [(23 39 45 -19) -19]
Test Case: 836 | Input/Output: [(-68 -5 -4 -12) -68]
Test Case: 837 | Input/Output: [(-67 38 9 -99) -99]
Test Case: 838 | Input/Output: [(80 93 -11 87) -11]
Test Case: 839 | Input/Output: [(50 -71 59 -76) -76]
Test Case: 840 | Input/Output: [(-70 78 6 -16) -70]
Test Case: 841 | Input/Output: [(-26 23 10 -4) -26]
Test Case: 842 | Input/Output: [(-67 -17 -7 98) -67]
Test Case: 843 | Input/Output: [(-5 2 -4 -80) -80]
Test Case: 844 | Input/Output: [(58 -65 64 -88) -88]
Test Case: 845 | Input/Output: [(-68 94 -70 -8) -70]
Test Case: 846 | Input/Output: [(91 -88 93 -7) -88]
Test Case: 847 | Input/Output: [(92 8 -38 6) -38]
Test Case: 848 | Input/Output: [(76 -19 13 -3) -19]
Test Case: 849 | Input/Output: [(-68 -52 67 -80) -80]
Test Case: 850 | Input/Output: [(48 63 80 27) 27]
Test Case: 851 | Input/Output: [(-31 12 -29 40) -31]
Test Case: 852 | Input/Output: [(97 -95 69 -31) -95]
Test Case: 853 | Input/Output: [(-20 0 -74 68) -74]
Test Case: 854 | Input/Output: [(-67 -5 59 65) -67]
Test Case: 855 | Input/Output: [(61 -41 58 -36) -41]
Test Case: 856 | Input/Output: [(32 57 30 7) 7]
Test Case: 857 | Input/Output: [(12 -46 -68 96) -68]
Test Case: 858 | Input/Output: [(80 -35 -69 71) -69]
Test Case: 859 | Input/Output: [(-26 -43 39 49) -43]
Test Case: 860 | Input/Output: [(23 92 -56 -23) -56]
Test Case: 861 | Input/Output: [(-69 41 32 77) -69]
Test Case: 862 | Input/Output: [(66 66 37 81) 37]
Test Case: 863 | Input/Output: [(-57 60 -59 -36) -59]
Test Case: 864 | Input/Output: [(-37 60 67 14) -37]
Test Case: 865 | Input/Output: [(-56 75 8 -22) -56]
Test Case: 866 | Input/Output: [(58 -20 -98 -55) -98]
Test Case: 867 | Input/Output: [(-7 97 -69 -54) -69]
Test Case: 868 | Input/Output: [(33 64 -89 -59) -89]
Test Case: 869 | Input/Output: [(-12 -20 -44 -26) -44]
Test Case: 870 | Input/Output: [(29 -99 66 -37) -99]
Test Case: 871 | Input/Output: [(-45 -75 96 -57) -75]
Test Case: 872 | Input/Output: [(13 5 8 -1) -1]
Test Case: 873 | Input/Output: [(-49 48 80 49) -49]
Test Case: 874 | Input/Output: [(36 -98 -57 0) -98]
Test Case: 875 | Input/Output: [(81 73 -28 -76) -76]
Test Case: 876 | Input/Output: [(-20 16 -100 -48) -100]
Test Case: 877 | Input/Output: [(-50 14 59 18) -50]
Test Case: 878 | Input/Output: [(79 -80 89 9) -80]
Test Case: 879 | Input/Output: [(94 -83 86 57) -83]
Test Case: 880 | Input/Output: [(-83 88 47 -7) -83]
Test Case: 881 | Input/Output: [(-100 -28 -10 -64) -100]
Test Case: 882 | Input/Output: [(34 4 81 15) 4]
Test Case: 883 | Input/Output: [(11 -24 97 -26) -26]
Test Case: 884 | Input/Output: [(-49 -28 -54 18) -54]
Test Case: 885 | Input/Output: [(46 -57 88 -97) -97]
Test Case: 886 | Input/Output: [(-19 -15 -26 -11) -26]
Test Case: 887 | Input/Output: [(48 0 12 79) 0]
Test Case: 888 | Input/Output: [(-73 -70 -66 2) -73]
Test Case: 889 | Input/Output: [(82 -85 -93 -55) -93]
Test Case: 890 | Input/Output: [(-42 39 -85 85) -85]
Test Case: 891 | Input/Output: [(-71 34 -83 -7) -83]
Test Case: 892 | Input/Output: [(70 31 30 55) 30]
Test Case: 893 | Input/Output: [(-48 36 -17 91) -48]
Test Case: 894 | Input/Output: [(-98 44 -68 5) -98]
Test Case: 895 | Input/Output: [(-93 -6 55 -85) -93]
Test Case: 896 | Input/Output: [(78 -8 -71 -17) -71]
Test Case: 897 | Input/Output: [(41 41 -19 -4) -19]
Test Case: 898 | Input/Output: [(92 21 49 -47) -47]
Test Case: 899 | Input/Output: [(13 -63 -92 -88) -92]
Test Case: 900 | Input/Output: [(-51 11 98 -49) -51]
Test Case: 901 | Input/Output: [(-78 33 70 -21) -78]
Test Case: 902 | Input/Output: [(-87 90 -24 95) -87]
Test Case: 903 | Input/Output: [(97 24 -85 -44) -85]
Test Case: 904 | Input/Output: [(40 5 74 38) 5]
Test Case: 905 | Input/Output: [(44 -23 11 -10) -23]
Test Case: 906 | Input/Output: [(69 9 -98 96) -98]
Test Case: 907 | Input/Output: [(61 78 -79 9) -79]
Test Case: 908 | Input/Output: [(78 78 -62 -30) -62]
Test Case: 909 | Input/Output: [(75 -92 -72 1) -92]
Test Case: 910 | Input/Output: [(99 92 -89 94) -89]
Test Case: 911 | Input/Output: [(-9 -52 73 -11) -52]
Test Case: 912 | Input/Output: [(65 16 64 -11) -11]
Test Case: 913 | Input/Output: [(66 -16 -3 55) -16]
Test Case: 914 | Input/Output: [(-53 9 28 39) -53]
Test Case: 915 | Input/Output: [(59 56 29 47) 29]
Test Case: 916 | Input/Output: [(-54 -4 45 -32) -54]
Test Case: 917 | Input/Output: [(-67 -35 -68 -48) -68]
Test Case: 918 | Input/Output: [(-92 53 67 -2) -92]
Test Case: 919 | Input/Output: [(8 0 63 65) 0]
Test Case: 920 | Input/Output: [(-63 -24 62 98) -63]
Test Case: 921 | Input/Output: [(14 -22 -74 69) -74]
Test Case: 922 | Input/Output: [(84 -71 11 99) -71]
Test Case: 923 | Input/Output: [(96 80 -47 -43) -47]
Test Case: 924 | Input/Output: [(-72 36 -97 -15) -97]
Test Case: 925 | Input/Output: [(-74 -61 -54 -100) -100]
Test Case: 926 | Input/Output: [(52 84 47 -14) -14]
Test Case: 927 | Input/Output: [(96 90 -70 -18) -70]
Test Case: 928 | Input/Output: [(80 -11 90 64) -11]
Test Case: 929 | Input/Output: [(-16 -56 21 96) -56]
Test Case: 930 | Input/Output: [(-52 6 -4 40) -52]
Test Case: 931 | Input/Output: [(35 -49 -23 83) -49]
Test Case: 932 | Input/Output: [(-30 -94 -49 18) -94]
Test Case: 933 | Input/Output: [(18 46 5 -1) -1]
Test Case: 934 | Input/Output: [(-98 84 71 -44) -98]
Test Case: 935 | Input/Output: [(-89 35 55 -56) -89]
Test Case: 936 | Input/Output: [(45 85 82 -83) -83]
Test Case: 937 | Input/Output: [(-36 4 -32 -57) -57]
Test Case: 938 | Input/Output: [(59 -79 18 48) -79]
Test Case: 939 | Input/Output: [(-65 95 36 58) -65]
Test Case: 940 | Input/Output: [(-1 43 84 31) -1]
Test Case: 941 | Input/Output: [(94 -73 -56 -24) -73]
Test Case: 942 | Input/Output: [(8 90 -79 -6) -79]
Test Case: 943 | Input/Output: [(96 -28 -57 -90) -90]
Test Case: 944 | Input/Output: [(-4 73 -69 96) -69]
Test Case: 945 | Input/Output: [(67 98 -77 14) -77]
Test Case: 946 | Input/Output: [(-29 66 -26 34) -29]
Test Case: 947 | Input/Output: [(4 83 -94 81) -94]
Test Case: 948 | Input/Output: [(86 -48 82 -9) -48]
Test Case: 949 | Input/Output: [(-14 -32 31 85) -32]
Test Case: 950 | Input/Output: [(-94 -48 -37 -71) -94]
Test Case: 951 | Input/Output: [(-23 -46 -96 -32) -96]
Test Case: 952 | Input/Output: [(52 65 47 -28) -28]
Test Case: 953 | Input/Output: [(-71 -11 64 0) -71]
Test Case: 954 | Input/Output: [(22 45 -10 30) -10]
Test Case: 955 | Input/Output: [(-93 -32 79 -9) -93]
Test Case: 956 | Input/Output: [(23 86 -60 -18) -60]
Test Case: 957 | Input/Output: [(76 53 -44 82) -44]
Test Case: 958 | Input/Output: [(-49 70 12 68) -49]
Test Case: 959 | Input/Output: [(69 92 33 44) 33]
Test Case: 960 | Input/Output: [(4 74 18 -28) -28]
Test Case: 961 | Input/Output: [(56 -84 83 -81) -84]
Test Case: 962 | Input/Output: [(86 -72 -5 29) -72]
Test Case: 963 | Input/Output: [(17 -56 -79 46) -79]
Test Case: 964 | Input/Output: [(-57 93 -23 45) -57]
Test Case: 965 | Input/Output: [(-28 49 -22 -98) -98]
Test Case: 966 | Input/Output: [(-80 -45 7 -75) -80]
Test Case: 967 | Input/Output: [(45 23 -95 -3) -95]
Test Case: 968 | Input/Output: [(-38 94 -92 63) -92]
Test Case: 969 | Input/Output: [(-23 -42 91 53) -42]
Test Case: 970 | Input/Output: [(12 -44 11 83) -44]
Test Case: 971 | Input/Output: [(7 10 99 -19) -19]
Test Case: 972 | Input/Output: [(-70 79 -91 -58) -91]
Test Case: 973 | Input/Output: [(-55 -5 -32 65) -55]
Test Case: 974 | Input/Output: [(-74 -66 33 96) -74]
Test Case: 975 | Input/Output: [(42 -41 40 6) -41]
Test Case: 976 | Input/Output: [(3 73 -61 74) -61]
Test Case: 977 | Input/Output: [(-12 22 -51 58) -51]
Test Case: 978 | Input/Output: [(-25 -18 54 35) -25]
Test Case: 979 | Input/Output: [(4 67 24 91) 4]
Test Case: 980 | Input/Output: [(83 -94 -93 -63) -94]
Test Case: 981 | Input/Output: [(-33 -85 50 93) -85]
Test Case: 982 | Input/Output: [(-8 -78 -77 -45) -78]
Test Case: 983 | Input/Output: [(-54 60 -4 63) -54]
Test Case: 984 | Input/Output: [(31 -75 25 100) -75]
Test Case: 985 | Input/Output: [(-20 53 77 -44) -44]
Test Case: 986 | Input/Output: [(97 -40 -25 74) -40]
Test Case: 987 | Input/Output: [(47 -82 73 -43) -82]
Test Case: 988 | Input/Output: [(75 59 -99 80) -99]
Test Case: 989 | Input/Output: [(-51 -24 -12 92) -51]
Test Case: 990 | Input/Output: [(0 49 37 39) 0]
Test Case: 991 | Input/Output: [(-58 -4 65 95) -58]
Test Case: 992 | Input/Output: [(53 48 22 33) 22]
Test Case: 993 | Input/Output: [(49 -18 83 -64) -64]
Test Case: 994 | Input/Output: [(57 -1 -67 -53) -67]
Test Case: 995 | Input/Output: [(-58 -37 -19 -64) -64]
Test Case: 996 | Input/Output: [(-33 -96 97 30) -96]
Test Case: 997 | Input/Output: [(54 49 -73 79) -73]
Test Case: 998 | Input/Output: [(22 -51 -89 91) -89]
Test Case: 999 | Input/Output: [(-17 38 -39 78) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -90 69 -58 -67 -122 85 -10 -62 -23 96 -109 -60 -65 -116 34 -11
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-13 -13 -22 -13] -22] [[1 1 1 88] 1] [[12 12 49 12] 12] [[78 78 78 -24] -24] [[-79 -79 -79 -88] -88] [[90 90 24 90] 24] [[98 98 98 -21] -21] [[-31 -18 -31 -31] -31] [[-77 -77 75 -77] -77] [[-13 -13 -13 -23] -23] [(49 49 49 49) 49] [(-57 -57 -57 -57) -57] [(16 16 16 16) 16] [(8 8 8 8) 8] [(-72 -72 -72 -72) -72] [(67 91 10 27) 10] [(29 77 20 37) 20] [(46 3 72 11) 3] [(74 79 53 16) 16] [(100 85 65 73) 65] [(3 10 94 25) 3] [(37 70 61 88) 37] [(86 32 1 33) 1] [(11 68 17 0) 0] [(58 24 81 43) 24] [(93 55 88 47) 47] [(57 78 64 64) 57] [(89 4 40 27) 4] [(90 82 52 75) 52] [(60 92 61 56) 56] [(80 88 16 20) 16] [(30 61 43 22) 22] [(89 57 51 63) 51] [(42 27 40 48) 27] [(71 71 72 49) 49] [(40 53 -25 91) -25] [(-25 42 -23 41) -25] [(88 87 69 -94) -94] [(87 51 -13 28) -13] [(47 -86 -80 -26) -86] [(-29 -91 54 -79) -91] [(23 89 65 46) 23] [(-64 18 -86 -33) -86] [(21 -97 -25 -64) -97] [(-38 -55 26 -29) -55] [(-15 19 0 -49) -49] [(6 58 -6 8) -6] [(95 7 -95 -57) -95] [(-56 -20 8 -22) -56] [(-56 2 25 17) -56] [(-22 3 54 5) -22] [(65 68 20 55) 20] [(70 83 -89 -10) -89] [(-16 5 -35 -20) -35] [(23 -42 -61 -56) -61] [(60 -14 -86 -49) -86] [(70 61 -97 -42) -97] [(88 51 -86 -3) -86] [(16 -14 62 91) -14] [(74 33 46 64) 33] [(22 70 -48 8) -48] [(22 -83 48 33) -83] [(78 89 -21 75) -21] [(-85 -33 95 22) -85] [(-70 20 21 24) -70] [(-65 30 83 -76) -76] [(-63 -32 20 19) -63] [(-91 57 -6 100) -91] [(63 -57 24 -62) -62] [(-49 -38 -80 -81) -81] [(-5 -98 93 66) -98] [(-9 34 17 -52) -52] [(-8 42 -16 -75) -75] [(-43 -89 11 17) -89] [(24 -46 41 -77) -77] [(74 -46 -76 -83) -83] [(-77 -96 -26 98) -96] [(-55 94 3 29) -55] [(-1 1 -31 77) -31] [(-17 -87 83 -26) -87] [(-38 31 -43 58) -43] [(-37 -47 48 82) -47] [(77 -99 -73 9) -99] [(14 74 45 53) 14] [(0 87 83 -26) -26] [(-72 -39 -98 91) -98] [(-18 97 -95 -19) -95] [(49 -35 -90 -23) -90] [(28 44 -11 -24) -24] [(-20 -42 55 -56) -56] [(60 -2 -2 71) -2] [(98 -100 42 45) -100] [(-13 -90 -26 65) -90] [(-64 49 -100 25) -100] [(7 74 -95 23) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap})
Lexicase best program: (in3 print_integer integer_lte exec_dup () integer_lte integer_flush exec_s_when_autoconstructing (boolean_flush exec_swap () ()) () ())
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.438
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap})
Zero cases best program: (in3 print_integer integer_lte exec_dup () integer_lte integer_flush exec_s_when_autoconstructing (boolean_flush exec_swap () ()) () ())
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.438
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 3 3 5 5 1 5 5 9 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (6 3 3 5 5 1 5 5 9 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_337} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times})
Best program: (exec_do*while (integer_empty boolean_swap in3 print_integer boolean_flush boolean_shove exec_if (boolean_and) (tagged_337 integer_flush print_integer boolean_yank exec_swap (exec_stackdepth integer_mod) (integer_mod exec_when (exec_dup_times ())))))
Errors: [1 1 1 0 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.994 0.997 0.997 0.995 0.995 0.999 0.995 0.995 0.991 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.719
Average program size in population (points): 69.916
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 492691
--- Timings ---
Current time: 1559593734752 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 29.0%
Fitness Testing:      1.7 seconds, 67.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_320} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_integer_611} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 2, :instruction 53} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_flush boolean_dup_items tag_integer_320 integer_swap boolean_not boolean_yank exec_do*count (exec_yankdup integer_dup integer_stackdepth boolean_xor boolean_stackdepth integer_flush tag_integer_611 exec_rot (exec_k (boolean_not integer_lte integer_dup_items integer_gte in4 exec_empty print_integer boolean_empty exec_do*count (boolean_dup integer_mult exec_do*range () exec_yank exec_eq exec_k_when_autoconstructing (integer_dup exec_do*count (53)) (exec_swap (integer_gte integer_inc) (exec_flush) boolean_frominteger) boolean_dup_items)) ()) () ()))
Lexicase best errors: [1 1 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 54
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_320} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_integer_611} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 2, :instruction 53} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_flush boolean_dup_items tag_integer_320 integer_swap boolean_not boolean_yank exec_do*count (exec_yankdup integer_dup integer_stackdepth boolean_xor boolean_stackdepth integer_flush tag_integer_611 exec_rot (exec_k (boolean_not integer_lte integer_dup_items integer_gte in4 exec_empty print_integer boolean_empty exec_do*count (boolean_dup integer_mult exec_do*range () exec_yank exec_eq exec_k_when_autoconstructing (integer_dup exec_do*count (53)) (exec_swap (integer_gte integer_inc) (exec_flush) boolean_frominteger) boolean_dup_items)) ()) () ()))
Zero cases best errors: [1 1 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 54
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 211 97 342 114 455 113 342 113 112)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (97 211 97 342 114 455 113 342 113 112)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 1, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_boolean_26} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup})
Best program: (boolean_shove boolean_frominteger exec_dup_items integer_eq in3 boolean_and exec_do*while (exec_y (print_integer) exec_if () (integer_div integer_dup integer_mod integer_shove exec_y (boolean_and) tag_boolean_26 exec_stackdepth) integer_yank exec_stackdepth boolean_pop) integer_dec exec_rot (exec_flush exec_when () boolean_empty integer_empty print_exec () boolean_dup_times integer_eq exec_dup ()) () ())
Errors: [1 1 1 0 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 8.004
Median total errors in population: 7
Error averages by case: (0.903 0.789 0.903 0.658 0.886 0.545 0.887 0.658 0.887 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.156
Average program size in population (points): 51.15
Average percent parens in population: 0.320
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 972509
--- Timings ---
Current time: 1559593737216 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.8 seconds, 37.1%
Fitness Testing:      2.5 seconds, 52.9%
Report:               0.4 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_flush exec_dup_times (in3) print_integer boolean_dup)
Lexicase best errors: [1 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 7
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_flush exec_dup_times (in3) print_integer boolean_dup)
Zero cases best errors: [1 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 7
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 163 179 163 164 491 163 169 163 144)
Population mean number of elite cases: 1.98
Count of perfect (error zero) individuals by case: (180 163 179 163 164 491 163 169 163 144)
Population mean number of perfect (error zero) cases: 1.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_337} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (integer_empty boolean_swap in3 print_integer boolean_rot boolean_shove exec_if (boolean_and) (tagged_337 integer_flush print_integer boolean_yank boolean_eq exec_swap (exec_stackdepth integer_mod exec_when (exec_while ())) ()))
Errors: [1 0 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 8.021
Median total errors in population: 8
Error averages by case: (0.82 0.837 0.821 0.837 0.836 0.509 0.837 0.831 0.837 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.979
Average program size in population (points): 65.561
Average percent parens in population: 0.302
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.966
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.966
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1499197
--- Timings ---
Current time: 1559593739416 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.1 seconds, 41.6%
Fitness Testing:      3.2 seconds, 43.7%
Report:               1.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if})
Lexicase best program: (integer_dec in3 integer_max print_integer boolean_dup exec_if () ())
Lexicase best errors: [0 1 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 9
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if})
Zero cases best program: (integer_dec in3 integer_max print_integer boolean_dup exec_if () ())
Zero cases best errors: [0 1 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 9
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (692 96 342 343 75 342 177 178 694 96)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (692 96 342 343 75 342 177 178 694 96)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2})
Best program: (in3 print_integer exec_dup () integer_flush exec_s_when_autoconstructing (boolean_flush in2) () ())
Errors: [0 1 0 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 7
Size: 12
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 6.965
Median total errors in population: 6
Error averages by case: (0.308 0.904 0.658 0.657 0.925 0.658 0.823 0.822 0.306 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.454
Average program size in population (points): 56.654
Average percent parens in population: 0.310
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1937336
--- Timings ---
Current time: 1559593741679 milliseconds
Total Time:           9.7 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 47.9%
Fitness Testing:      3.8 seconds, 39.1%
Report:               1.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -13                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 90                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 67                 
Correct output: 20                  | Program output: 29                 
Correct output: 3                   | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 65                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 11                 
Correct output: 24                  | Program output: 58                 
Correct output: 47                  | Program output: 93                 
Correct output: 57                  | Program output: 57                 
Correct output: 4                   | Program output: 89                 
Correct output: 52                  | Program output: 90                 
Correct output: 56                  | Program output: 60                 
Correct output: 16                  | Program output: 80                 
Correct output: 22                  | Program output: 30                 
Correct output: 51                  | Program output: 89                 
Correct output: 27                  | Program output: 42                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: 88                 
Correct output: -13                 | Program output: 87                 
Correct output: -86                 | Program output: 47                 
Correct output: -91                 | Program output: -29                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -64                
Correct output: -97                 | Program output: 21                 
Correct output: -55                 | Program output: -38                
Correct output: -49                 | Program output: -15                
Correct output: -6                  | Program output: 6                  
Correct output: -95                 | Program output: 95                 
Correct output: -56                 | Program output: -56                
Correct output: -56                 | Program output: -56                
Correct output: -22                 | Program output: -22                
Correct output: 20                  | Program output: 65                 
Correct output: -89                 | Program output: 70                 
Correct output: -35                 | Program output: -16                
Correct output: -61                 | Program output: 23                 
Correct output: -86                 | Program output: 60                 
Correct output: -97                 | Program output: 70                 
Correct output: -86                 | Program output: 88                 
Correct output: -14                 | Program output: 16                 
Correct output: 33                  | Program output: 74                 
Correct output: -48                 | Program output: 22                 
Correct output: -83                 | Program output: 22                 
Correct output: -21                 | Program output: 78                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -62                 | Program output: 63                 
Correct output: -81                 | Program output: -49                
Correct output: -98                 | Program output: -5                 
Correct output: -52                 | Program output: -9                 
Correct output: -75                 | Program output: -8                 
Correct output: -89                 | Program output: -43                
Correct output: -77                 | Program output: 24                 
Correct output: -83                 | Program output: 74                 
Correct output: -96                 | Program output: -77                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -1                 
Correct output: -87                 | Program output: -17                
Correct output: -43                 | Program output: -38                
Correct output: -47                 | Program output: -37                
Correct output: -99                 | Program output: 77                 
Correct output: 14                  | Program output: 14                 
Correct output: -26                 | Program output: 0                  
Correct output: -98                 | Program output: -72                
Correct output: -95                 | Program output: -18                
Correct output: -90                 | Program output: 49                 
Correct output: -24                 | Program output: 28                 
Correct output: -56                 | Program output: -20                
Correct output: -2                  | Program output: 60                 
Correct output: -100                | Program output: 98                 
Correct output: -90                 | Program output: -13                
Correct output: -100                | Program output: -64                
Correct output: -95                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_453} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_672} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction -35} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_893} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_empty integer_shove in1 integer_yankdup tagged_453 print_integer boolean_empty boolean_swap boolean_invert_second_then_and boolean_flush exec_yankdup integer_gt boolean_invert_first_then_and boolean_flush integer_gt integer_yankdup exec_dup () integer_div exec_do*while (integer_fromboolean exec_yankdup exec_dup (integer_rot in2 exec_y_when_autoconstructing (exec_y () exec_y_when_autoconstructing (integer_flush integer_stackdepth integer_dec tag_boolean_672 boolean_xor exec_eq exec_dup_times (exec_when () integer_max boolean_invert_second_then_and integer_div integer_mult) integer_max integer_min in2) boolean_dup) exec_swap (integer_stackdepth in3 integer_lt boolean_pop integer_yank) (boolean_rot exec_y () boolean_yankdup print_integer in2 -35 boolean_pop exec_when () integer_yankdup exec_do*range (exec_rot (boolean_dup_items integer_inc exec_s_when_autoconstructing () (boolean_yank in1) (integer_fromboolean integer_fromboolean boolean_flush in2) exec_y () integer_rot boolean_and) (exec_if (tagged_893 exec_shove (exec_dup_items boolean_eq) boolean_xor exec_s (integer_dup integer_min exec_shove (boolean_rot integer_lt boolean_not exec_dup_times () exec_yank exec_empty) print_integer exec_dup_times (print_newline)) (integer_dec) (exec_if (boolean_frominteger boolean_pop integer_max integer_gt integer_lte exec_do*times (exec_swap (exec_flush boolean_dup) (exec_s_when_autoconstructing () (exec_yankdup integer_mod boolean_eq integer_mult) () print_newline exec_shove (exec_noop)))) ())) ()) ())))))
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 149
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_453} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_672} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction -35} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_893} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_empty integer_shove in1 integer_yankdup tagged_453 print_integer boolean_empty boolean_swap boolean_invert_second_then_and boolean_flush exec_yankdup integer_gt boolean_invert_first_then_and boolean_flush integer_gt integer_yankdup exec_dup () integer_div exec_do*while (integer_fromboolean exec_yankdup exec_dup (integer_rot in2 exec_y_when_autoconstructing (exec_y () exec_y_when_autoconstructing (integer_flush integer_stackdepth integer_dec tag_boolean_672 boolean_xor exec_eq exec_dup_times (exec_when () integer_max boolean_invert_second_then_and integer_div integer_mult) integer_max integer_min in2) boolean_dup) exec_swap (integer_stackdepth in3 integer_lt boolean_pop integer_yank) (boolean_rot exec_y () boolean_yankdup print_integer in2 -35 boolean_pop exec_when () integer_yankdup exec_do*range (exec_rot (boolean_dup_items integer_inc exec_s_when_autoconstructing () (boolean_yank in1) (integer_fromboolean integer_fromboolean boolean_flush in2) exec_y () integer_rot boolean_and) (exec_if (tagged_893 exec_shove (exec_dup_items boolean_eq) boolean_xor exec_s (integer_dup integer_min exec_shove (boolean_rot integer_lt boolean_not exec_dup_times () exec_yank exec_empty) print_integer exec_dup_times (print_newline)) (integer_dec) (exec_if (boolean_frominteger boolean_pop integer_max integer_gt integer_lte exec_do*times (exec_swap (exec_flush boolean_dup) (exec_s_when_autoconstructing () (exec_yankdup integer_mod boolean_eq integer_mult) () print_newline exec_shove (exec_noop)))) ())) ()) ())))))
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 149
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 70 279 715 278 279 189 180 435 180)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (180 70 279 715 278 279 189 180 435 180)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_integer_943} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (tag_integer_943 exec_eq exec_dup_items exec_do*times (boolean_not integer_pop) exec_do*range () integer_flush exec_shove (in1 print_integer))
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 15
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.215
Median total errors in population: 7
Error averages by case: (0.82 0.93 0.721 0.285 0.722 0.721 0.811 0.82 0.565 0.82)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.701
Average program size in population (points): 61.075
Average percent parens in population: 0.303
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2393126
--- Timings ---
Current time: 1559593743636 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.9 seconds, 50.4%
Fitness Testing:      4.3 seconds, 37.3%
Report:               1.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub})
Lexicase best program: (boolean_swap in3 print_integer integer_empty boolean_shove exec_if (boolean_and) (exec_dup_items integer_flush print_integer boolean_pop boolean_yank exec_swap (exec_stackdepth integer_mod) (exec_yank)) exec_when (integer_sub))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub})
Zero cases best program: (boolean_swap in3 print_integer integer_empty boolean_shove exec_if (boolean_and) (exec_dup_items integer_flush print_integer boolean_pop boolean_yank exec_swap (exec_stackdepth integer_mod) (exec_yank)) exec_when (integer_sub))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 251 248 72 288 251 92 249 92 703)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (91 251 248 72 288 251 92 249 92 703)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if})
Best program: (in3 integer_max print_integer exec_if () ())
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 4
Size: 7
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 7.663
Median total errors in population: 8
Error averages by case: (0.909 0.749 0.752 0.928 0.712 0.749 0.908 0.751 0.908 0.297)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.107
Average program size in population (points): 56.227
Average percent parens in population: 0.305
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2805622
--- Timings ---
Current time: 1559593745704 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.2 seconds, 52.8%
Fitness Testing:      4.9 seconds, 35.6%
Report:               1.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -13                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 90                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 67                 
Correct output: 20                  | Program output: 29                 
Correct output: 3                   | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 65                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 11                 
Correct output: 24                  | Program output: 58                 
Correct output: 47                  | Program output: 93                 
Correct output: 57                  | Program output: 57                 
Correct output: 4                   | Program output: 89                 
Correct output: 52                  | Program output: 90                 
Correct output: 56                  | Program output: 60                 
Correct output: 16                  | Program output: 80                 
Correct output: 22                  | Program output: 30                 
Correct output: 51                  | Program output: 89                 
Correct output: 27                  | Program output: 42                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: 88                 
Correct output: -13                 | Program output: 87                 
Correct output: -86                 | Program output: 47                 
Correct output: -91                 | Program output: -29                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -64                
Correct output: -97                 | Program output: 21                 
Correct output: -55                 | Program output: -38                
Correct output: -49                 | Program output: -15                
Correct output: -6                  | Program output: 6                  
Correct output: -95                 | Program output: 95                 
Correct output: -56                 | Program output: -56                
Correct output: -56                 | Program output: -56                
Correct output: -22                 | Program output: -22                
Correct output: 20                  | Program output: 65                 
Correct output: -89                 | Program output: 70                 
Correct output: -35                 | Program output: -16                
Correct output: -61                 | Program output: 23                 
Correct output: -86                 | Program output: 60                 
Correct output: -97                 | Program output: 70                 
Correct output: -86                 | Program output: 88                 
Correct output: -14                 | Program output: 16                 
Correct output: 33                  | Program output: 74                 
Correct output: -48                 | Program output: 22                 
Correct output: -83                 | Program output: 22                 
Correct output: -21                 | Program output: 78                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -62                 | Program output: 63                 
Correct output: -81                 | Program output: -49                
Correct output: -98                 | Program output: -5                 
Correct output: -52                 | Program output: -9                 
Correct output: -75                 | Program output: -8                 
Correct output: -89                 | Program output: -43                
Correct output: -77                 | Program output: 24                 
Correct output: -83                 | Program output: 74                 
Correct output: -96                 | Program output: -77                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -1                 
Correct output: -87                 | Program output: -17                
Correct output: -43                 | Program output: -38                
Correct output: -47                 | Program output: -37                
Correct output: -99                 | Program output: 77                 
Correct output: 14                  | Program output: 14                 
Correct output: -26                 | Program output: 0                  
Correct output: -98                 | Program output: -72                
Correct output: -95                 | Program output: -18                
Correct output: -90                 | Program output: 49                 
Correct output: -24                 | Program output: 28                 
Correct output: -56                 | Program output: -20                
Correct output: -2                  | Program output: 60                 
Correct output: -100                | Program output: 98                 
Correct output: -90                 | Program output: -13                
Correct output: -100                | Program output: -64                
Correct output: -95                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tag_integer_943} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (tag_integer_943 integer_gt integer_empty exec_dup_items boolean_swap integer_gte exec_do*times () integer_pop exec_shove (exec_s (integer_mod print_integer in1 print_integer) () ()))
Lexicase best errors: [1 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tag_integer_943} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (tag_integer_943 integer_gt integer_empty exec_dup_items boolean_swap integer_gte exec_do*times () integer_pop exec_shove (exec_s (integer_mod print_integer in1 print_integer) () ()))
Zero cases best errors: [1 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 82 82 68 82 325 68 241 242 715)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (326 82 82 68 82 325 68 241 242 715)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_943} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_shove (tag_integer_943 integer_empty exec_eq) boolean_not integer_pop integer_flush in1 exec_s (print_integer) () ())
Errors: [1 0 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.769
Median total errors in population: 7
Error averages by case: (0.674 0.918 0.918 0.932 0.918 0.675 0.932 0.759 0.758 0.285)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.116
Average program size in population (points): 62.888
Average percent parens in population: 0.302
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3306489
--- Timings ---
Current time: 1559593747768 milliseconds
Total Time:          15.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 54.2%
Fitness Testing:      5.5 seconds, 34.7%
Report:               1.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -13                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 90                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 67                 
Correct output: 20                  | Program output: 29                 
Correct output: 3                   | Program output: 46                 
Correct output: 16                  | Program output: 74                 
Correct output: 65                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 11                 
Correct output: 24                  | Program output: 58                 
Correct output: 47                  | Program output: 93                 
Correct output: 57                  | Program output: 57                 
Correct output: 4                   | Program output: 89                 
Correct output: 52                  | Program output: 90                 
Correct output: 56                  | Program output: 60                 
Correct output: 16                  | Program output: 80                 
Correct output: 22                  | Program output: 30                 
Correct output: 51                  | Program output: 89                 
Correct output: 27                  | Program output: 42                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: 88                 
Correct output: -13                 | Program output: 87                 
Correct output: -86                 | Program output: 47                 
Correct output: -91                 | Program output: -29                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -64                
Correct output: -97                 | Program output: 21                 
Correct output: -55                 | Program output: -38                
Correct output: -49                 | Program output: -15                
Correct output: -6                  | Program output: 6                  
Correct output: -95                 | Program output: 95                 
Correct output: -56                 | Program output: -56                
Correct output: -56                 | Program output: -56                
Correct output: -22                 | Program output: -22                
Correct output: 20                  | Program output: 65                 
Correct output: -89                 | Program output: 70                 
Correct output: -35                 | Program output: -16                
Correct output: -61                 | Program output: 23                 
Correct output: -86                 | Program output: 60                 
Correct output: -97                 | Program output: 70                 
Correct output: -86                 | Program output: 88                 
Correct output: -14                 | Program output: 16                 
Correct output: 33                  | Program output: 74                 
Correct output: -48                 | Program output: 22                 
Correct output: -83                 | Program output: 22                 
Correct output: -21                 | Program output: 78                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -62                 | Program output: 63                 
Correct output: -81                 | Program output: -49                
Correct output: -98                 | Program output: -5                 
Correct output: -52                 | Program output: -9                 
Correct output: -75                 | Program output: -8                 
Correct output: -89                 | Program output: -43                
Correct output: -77                 | Program output: 24                 
Correct output: -83                 | Program output: 74                 
Correct output: -96                 | Program output: -77                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -1                 
Correct output: -87                 | Program output: -17                
Correct output: -43                 | Program output: -38                
Correct output: -47                 | Program output: -37                
Correct output: -99                 | Program output: 77                 
Correct output: 14                  | Program output: 14                 
Correct output: -26                 | Program output: 0                  
Correct output: -98                 | Program output: -72                
Correct output: -95                 | Program output: -18                
Correct output: -90                 | Program output: 49                 
Correct output: -24                 | Program output: 28                 
Correct output: -56                 | Program output: -20                
Correct output: -2                  | Program output: 60                 
Correct output: -100                | Program output: 98                 
Correct output: -90                 | Program output: -13                
Correct output: -100                | Program output: -64                
Correct output: -95                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_mult})
Lexicase best program: (in1 integer_yankdup print_integer boolean_flush exec_do*count (exec_yankdup exec_rot (integer_div exec_do*while (integer_fromboolean integer_dup_items boolean_eq in2 exec_y_when_autoconstructing (exec_y () integer_fromboolean boolean_invert_first_then_and boolean_stackdepth) print_integer exec_k (exec_yank exec_y_when_autoconstructing (integer_stackdepth integer_dec boolean_or integer_max) exec_if (in4) (boolean_xor integer_stackdepth exec_when () boolean_invert_second_then_and integer_div integer_mult) in2) (integer_lte in1 integer_stackdepth exec_yank) print_newline integer_dup_times boolean_eq boolean_xor) integer_dup_times exec_s () (boolean_rot integer_shove integer_yank) (exec_yankdup boolean_rot exec_y () exec_if (exec_pop (boolean_yankdup boolean_pop boolean_yank) exec_yankdup integer_stackdepth exec_flush) (exec_k (exec_when () in4 boolean_pop) (in3 exec_when (print_integer) exec_s_when_autoconstructing () (exec_do*times (exec_do*while (boolean_yankdup boolean_yankdup exec_while (exec_swap (boolean_pop boolean_stackdepth) (boolean_yank in2) exec_dup (exec_yankdup exec_eq exec_dup_times () boolean_rot exec_s (exec_do*times () integer_lt boolean_yank integer_swap) (exec_yank boolean_frominteger) (exec_do*times (integer_gte) integer_dec) exec_dup (exec_if (boolean_stackdepth exec_y_when_autoconstructing (boolean_pop integer_dec integer_min integer_lt integer_yankdup integer_gt boolean_rot boolean_dup_times exec_swap (integer_mod) (integer_mod exec_yankdup) boolean_eq print_exec (exec_dup_items integer_mult))) ())))))) ())))) () ()))
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 159
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_mult})
Zero cases best program: (in1 integer_yankdup print_integer boolean_flush exec_do*count (exec_yankdup exec_rot (integer_div exec_do*while (integer_fromboolean integer_dup_items boolean_eq in2 exec_y_when_autoconstructing (exec_y () integer_fromboolean boolean_invert_first_then_and boolean_stackdepth) print_integer exec_k (exec_yank exec_y_when_autoconstructing (integer_stackdepth integer_dec boolean_or integer_max) exec_if (in4) (boolean_xor integer_stackdepth exec_when () boolean_invert_second_then_and integer_div integer_mult) in2) (integer_lte in1 integer_stackdepth exec_yank) print_newline integer_dup_times boolean_eq boolean_xor) integer_dup_times exec_s () (boolean_rot integer_shove integer_yank) (exec_yankdup boolean_rot exec_y () exec_if (exec_pop (boolean_yankdup boolean_pop boolean_yank) exec_yankdup integer_stackdepth exec_flush) (exec_k (exec_when () in4 boolean_pop) (in3 exec_when (print_integer) exec_s_when_autoconstructing () (exec_do*times (exec_do*while (boolean_yankdup boolean_yankdup exec_while (exec_swap (boolean_pop boolean_stackdepth) (boolean_yank in2) exec_dup (exec_yankdup exec_eq exec_dup_times () boolean_rot exec_s (exec_do*times () integer_lt boolean_yank integer_swap) (exec_yank boolean_frominteger) (exec_do*times (integer_gte) integer_dec) exec_dup (exec_if (boolean_stackdepth exec_y_when_autoconstructing (boolean_pop integer_dec integer_min integer_lt integer_yankdup integer_gt boolean_rot boolean_dup_times exec_swap (integer_mod) (integer_mod exec_yankdup) boolean_eq print_exec (exec_dup_items integer_mult))) ())))))) ())))) () ()))
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 159
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 243 157 155 244 706 169 242 244 143)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (157 243 157 155 244 706 169 242 244 143)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_943} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer})
Best program: (exec_shove (tag_integer_943 integer_empty exec_eq) boolean_not integer_pop integer_flush in1 exec_s (print_integer) () ())
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.54
Median total errors in population: 8
Error averages by case: (0.843 0.757 0.843 0.845 0.756 0.294 0.831 0.758 0.756 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.59
Average program size in population (points): 62.101
Average percent parens in population: 0.294
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3768022
--- Timings ---
Current time: 1559593749733 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 55.1%
Fitness Testing:      6.0 seconds, 34.0%
Report:               1.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap})
Lexicase best program: (in3 print_integer integer_lte exec_dup () integer_lte integer_flush exec_while () print_boolean boolean_shove integer_yankdup exec_swap () ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap})
Zero cases best program: (in3 print_integer integer_lte exec_dup () integer_lte integer_flush exec_while () print_boolean boolean_shove integer_yankdup exec_swap () ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 63 744 254 254 345 67 65 493 254)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (255 63 744 254 254 345 67 65 493 254)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup})
Best program: (exec_dup_times (integer_eq in3) integer_max print_integer boolean_dup)
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 6
Size: 8
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.206
Median total errors in population: 7
Error averages by case: (0.745 0.937 0.256 0.746 0.746 0.655 0.933 0.935 0.507 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.308
Average program size in population (points): 48.406
Average percent parens in population: 0.306
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4132523
--- Timings ---
Current time: 1559593751595 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 56.2%
Fitness Testing:      6.5 seconds, 33.0%
Report:               2.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 684
Test mean error for best: 0.68400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -13                
Correct output: 1                   | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: 24                  | Program output: 90                 
Correct output: -21                 | Program output: -21                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -23                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 27                 
Correct output: 20                  | Program output: 37                 
Correct output: 3                   | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 65                  | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 37                  | Program output: 88                 
Correct output: 1                   | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 43                 
Correct output: 47                  | Program output: 47                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 27                 
Correct output: 52                  | Program output: 75                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 20                 
Correct output: 22                  | Program output: 22                 
Correct output: 51                  | Program output: 63                 
Correct output: 27                  | Program output: 48                 
Correct output: 49                  | Program output: 49                 
Correct output: -25                 | Program output: 91                 
Correct output: -25                 | Program output: 41                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 28                 
Correct output: -86                 | Program output: -26                
Correct output: -91                 | Program output: -79                
Correct output: 23                  | Program output: 46                 
Correct output: -86                 | Program output: -33                
Correct output: -97                 | Program output: -64                
Correct output: -55                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: 8                  
Correct output: -95                 | Program output: -57                
Correct output: -56                 | Program output: -22                
Correct output: -56                 | Program output: 17                 
Correct output: -22                 | Program output: 5                  
Correct output: 20                  | Program output: 55                 
Correct output: -89                 | Program output: -10                
Correct output: -35                 | Program output: -20                
Correct output: -61                 | Program output: -56                
Correct output: -86                 | Program output: -49                
Correct output: -97                 | Program output: -42                
Correct output: -86                 | Program output: -3                 
Correct output: -14                 | Program output: 91                 
Correct output: 33                  | Program output: 64                 
Correct output: -48                 | Program output: 8                  
Correct output: -83                 | Program output: 33                 
Correct output: -21                 | Program output: 75                 
Correct output: -85                 | Program output: 22                 
Correct output: -70                 | Program output: 24                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: 19                 
Correct output: -91                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: 98                 
Correct output: -55                 | Program output: 29                 
Correct output: -31                 | Program output: 77                 
Correct output: -87                 | Program output: -26                
Correct output: -43                 | Program output: 58                 
Correct output: -47                 | Program output: 82                 
Correct output: -99                 | Program output: 9                  
Correct output: 14                  | Program output: 53                 
Correct output: -26                 | Program output: -26                
Correct output: -98                 | Program output: 91                 
Correct output: -95                 | Program output: -19                
Correct output: -90                 | Program output: -23                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -2                  | Program output: 71                 
Correct output: -100                | Program output: 45                 
Correct output: -90                 | Program output: 65                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count})
Lexicase best program: (boolean_dup_items boolean_not exec_s (exec_eq exec_yankdup in4 exec_k () (integer_dup integer_min) boolean_xor boolean_shove integer_flush exec_k (exec_yank boolean_flush boolean_not integer_flush boolean_and boolean_pop integer_dup_items integer_gte in4 exec_empty print_integer exec_k (boolean_pop) (integer_mult exec_k (integer_dup exec_k () (exec_do*range (integer_add exec_k_when_autoconstructing (integer_yank integer_empty) (boolean_frominteger) exec_while (exec_do*count (integer_inc) exec_yankdup exec_flush) boolean_dup_items exec_do*count ()))) ())) ()) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count})
Zero cases best program: (boolean_dup_items boolean_not exec_s (exec_eq exec_yankdup in4 exec_k () (integer_dup integer_min) boolean_xor boolean_shove integer_flush exec_k (exec_yank boolean_flush boolean_not integer_flush boolean_and boolean_pop integer_dup_items integer_gte in4 exec_empty print_integer exec_k (boolean_pop) (integer_mult exec_k (integer_dup exec_k () (exec_do*range (integer_add exec_k_when_autoconstructing (integer_yank integer_empty) (boolean_frominteger) exec_while (exec_do*count (integer_inc) exec_yankdup exec_flush) boolean_dup_items exec_do*count ()))) ())) ()) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 379 328 330 96 328 376 280 279 329)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (283 379 328 330 96 328 376 280 279 329)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_320} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_611} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_dup_items tag_integer_320 boolean_yank exec_yankdup boolean_and integer_stackdepth exec_while () boolean_xor boolean_stackdepth integer_fromboolean tag_integer_611 exec_rot (exec_k (boolean_not in4 print_integer exec_y (integer_mult exec_yank integer_empty exec_eq exec_do*count (integer_gte boolean_swap exec_stackdepth) integer_inc) exec_flush) (boolean_dup_items)) () ())
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.992
Median total errors in population: 6
Error averages by case: (0.717 0.621 0.672 0.67 0.904 0.672 0.624 0.72 0.721 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.287
Average program size in population (points): 40.509
Average percent parens in population: 0.288
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4561497
--- Timings ---
Current time: 1559593753989 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.1 seconds, 56.8%
Fitness Testing:      7.0 seconds, 32.6%
Report:               2.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_231} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap})
Lexicase best program: (in3 print_integer exec_dup_items integer_lte exec_while () exec_do*while (print_boolean boolean_shove boolean_flush boolean_yank tag_exec_231 (exec_swap (exec_swap () ()) ())))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_231} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap})
Zero cases best program: (in3 print_integer exec_dup_items integer_lte exec_while () exec_do*while (print_boolean boolean_shove boolean_flush boolean_yank tag_exec_231 (exec_swap (exec_swap () ()) ())))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 247 234 493 747 351 243 357 421 339)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (242 247 234 493 747 351 243 357 421 339)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap})
Best program: (in3 exec_when (integer_mult) exec_if (print_integer integer_lte integer_sub boolean_stackdepth boolean_dup) (in2) exec_s_when_autoconstructing (exec_swap () ()) () ())
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 12
Size: 21
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 6.326
Median total errors in population: 6
Error averages by case: (0.758 0.753 0.766 0.507 0.253 0.649 0.757 0.643 0.579 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.048
Average program size in population (points): 35.819
Average percent parens in population: 0.326
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5024417
--- Timings ---
Current time: 1559593755781 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 55.9%
Fitness Testing:      7.4 seconds, 31.2%
Report:               3.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: 75                 
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 81                 
Correct output: 47                  | Program output: 88                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 72                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: 54                 
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -25                
Correct output: -55                 | Program output: 26                 
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: 8                  
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 48                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: 83                 
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: 24                 
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: 93                 
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: 41                 
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: 83                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: 55                 
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_add in3 integer_lte exec_yank integer_stackdepth boolean_shove in1 in3 print_integer exec_flush exec_shove (integer_shove boolean_flush boolean_and) integer_eq exec_do*range () exec_when () integer_sub boolean_flush boolean_pop integer_flush integer_swap boolean_yank exec_stackdepth exec_yankdup integer_mod exec_dup_times ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_add in3 integer_lte exec_yank integer_stackdepth boolean_shove in1 in3 print_integer exec_flush exec_shove (integer_shove boolean_flush boolean_and) integer_eq exec_do*range () exec_when () integer_sub boolean_flush boolean_pop integer_flush integer_swap boolean_yank exec_stackdepth exec_yankdup integer_mod exec_dup_times ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 478 497 474 259 497 479 42 43 1000)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (693 478 497 474 259 497 479 42 43 0)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_times})
Best program: (integer_add in3 integer_lte exec_yank integer_stackdepth boolean_shove in1 in3 print_integer exec_flush exec_shove (integer_shove boolean_flush boolean_and) integer_eq exec_do*range () exec_when () integer_sub boolean_flush boolean_pop integer_flush integer_swap boolean_yank exec_stackdepth exec_yankdup integer_mod exec_dup_times ())
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 27
Size: 32
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 6.538
Median total errors in population: 8
Error averages by case: (0.307 0.522 0.503 0.526 0.741 0.503 0.521 0.958 0.957 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 16.964
Average program size in population (points): 25.473
Average percent parens in population: 0.346
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5431418
--- Timings ---
Current time: 1559593757397 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.4 seconds, 56.6%
Fitness Testing:      7.8 seconds, 30.8%
Report:               3.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 721
Test mean error for best: 0.72100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -22                 | Program output: -13                
Correct output: 1                   | Program output:                    
Correct output: 12                  | Program output: 49                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: 24                  | Program output:                    
Correct output: -21                 | Program output: -21                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -23                
Correct output: 49                  | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output:                    
Correct output: 3                   | Program output: 72                 
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output:                    
Correct output: 3                   | Program output: 94                 
Correct output: 37                  | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output:                    
Correct output: 47                  | Program output:                    
Correct output: 57                  | Program output:                    
Correct output: 4                   | Program output: 40                 
Correct output: 52                  | Program output:                    
Correct output: 56                  | Program output:                    
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output:                    
Correct output: 27                  | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -26                
Correct output: -91                 | Program output: -79                
Correct output: 23                  | Program output:                    
Correct output: -86                 | Program output: -33                
Correct output: -97                 | Program output: -64                
Correct output: -55                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -57                
Correct output: -56                 | Program output: -22                
Correct output: -56                 | Program output: 25                 
Correct output: -22                 | Program output: 54                 
Correct output: 20                  | Program output:                    
Correct output: -89                 | Program output: -10                
Correct output: -35                 | Program output: -20                
Correct output: -61                 | Program output: -56                
Correct output: -86                 | Program output: -49                
Correct output: -97                 | Program output: -42                
Correct output: -86                 | Program output: -3                 
Correct output: -14                 | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output:                    
Correct output: -21                 | Program output:                    
Correct output: -85                 | Program output: 95                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: 20                 
Correct output: -91                 | Program output:                    
Correct output: -62                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output:                    
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output:                    
Correct output: -87                 | Program output: -26                
Correct output: -43                 | Program output:                    
Correct output: -47                 | Program output:                    
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output:                    
Correct output: -26                 | Program output: -26                
Correct output: -98                 | Program output:                    
Correct output: -95                 | Program output: -19                
Correct output: -90                 | Program output: -23                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -2                  | Program output:                    
Correct output: -100                | Program output:                    
Correct output: -90                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_287} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in3 in4 print_integer boolean_eq boolean_yankdup tag_exec_626 () exec_dup () exec_yank tag_boolean_287 exec_s_when_autoconstructing () () ())
Lexicase best errors: [0 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_287} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in3 in4 print_integer boolean_eq boolean_yankdup tag_exec_626 () exec_dup () exec_yank tag_boolean_287 exec_s_when_autoconstructing () () ())
Zero cases best errors: [0 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 578 104 1000 1 104 576 110 141 1000)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (104 578 104 0 1 104 576 110 141 0)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_626} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 in4 exec_do*times () print_integer tag_exec_626 () boolean_dup_items exec_yank exec_s (integer_div boolean_pop exec_s_when_autoconstructing () () ()) () ())
Errors: [0 1 0 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 11
Size: 20
Percent parens: 0.450
--- Population Statistics ---
Average total errors in population: 8.282
Median total errors in population: 8
Error averages by case: (0.896 0.422 0.896 1.0 0.999 0.896 0.424 0.89 0.859 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 29.487
Average program size in population (points): 37.88
Average percent parens in population: 0.218
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5648140
--- Timings ---
Current time: 1559593759093 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 57.6%
Fitness Testing:      8.1 seconds, 30.0%
Report:               3.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 588
Test mean error for best: 0.58800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: -24                 | Program output:                    
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output:                    
Correct output: -21                 | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 65                  | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 37                  | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 24                  | Program output:                    
Correct output: 47                  | Program output:                    
Correct output: 57                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 52                  | Program output:                    
Correct output: 56                  | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 22                  | Program output:                    
Correct output: 51                  | Program output:                    
Correct output: 27                  | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: 23                  | Program output:                    
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -20                
Correct output: -56                 | Program output:                    
Correct output: -22                 | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: -14                
Correct output: 33                  | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -33                
Correct output: -70                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -63                 | Program output: -32                
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: -57                
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output:                    
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -46                
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: 14                  | Program output:                    
Correct output: -26                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: -42                
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in3 in2 integer_min exec_do*times () print_integer boolean_yankdup tag_exec_626 () exec_dup () integer_max exec_yank exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ()) () ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.500
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in3 in2 integer_min exec_do*times () print_integer boolean_yankdup tag_exec_626 () exec_dup () integer_max exec_yank exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ()) () ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.500
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 224 106 165 141 165 168 258 424 375)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (252 224 106 165 141 165 168 258 424 375)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Best program: (in3 in2 integer_min exec_do*times () print_integer boolean_yankdup tag_exec_626 () exec_dup () integer_max exec_yank exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ()) () ())
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 18
Size: 36
Percent parens: 0.500
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 8
Error averages by case: (0.748 0.776 0.894 0.835 0.859 0.835 0.832 0.742 0.576 0.625)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.996
Average program size in population (points): 26.383
Average percent parens in population: 0.333
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6079276
--- Timings ---
Current time: 1559593760838 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 57.7%
Fitness Testing:      8.5 seconds, 29.5%
Report:               3.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 10                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 24                 
Correct output: 47                  | Program output: 55                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -20                
Correct output: -56                 | Program output: 2                  
Correct output: -22                 | Program output: 3                  
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: -14                
Correct output: 33                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -33                
Correct output: -70                 | Program output: 20                 
Correct output: -76                 | Program output: 30                 
Correct output: -63                 | Program output: -32                
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: -57                
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -46                
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: -42                
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in3 in2 integer_min print_integer boolean_yankdup tag_exec_626 () exec_dup () integer_max exec_yank exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_mult print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) ()) () ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in3 in2 integer_min print_integer boolean_yankdup tag_exec_626 () exec_dup () integer_max exec_yank exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_mult print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) ()) () ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 403 98 522 402 438 522 227 384 533)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (207 403 98 522 402 438 522 227 384 533)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup})
Best program: (in3 in2 integer_min print_integer boolean_yankdup tag_exec_626 () exec_dup () integer_max exec_do*while (exec_yank exec_k_when_autoconstructing (integer_mult exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_dup) ()) () ()) ()))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 15
Size: 27
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 6.264
Median total errors in population: 6
Error averages by case: (0.793 0.597 0.902 0.478 0.598 0.562 0.478 0.773 0.616 0.467)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.026
Average program size in population (points): 28.772
Average percent parens in population: 0.384
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6459361
--- Timings ---
Current time: 1559593762461 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.6 seconds, 57.9%
Fitness Testing:      8.9 seconds, 29.1%
Report:               3.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: -21                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -23                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 25                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 43                 
Correct output: 47                  | Program output: 47                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 27                 
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 40                 
Correct output: 49                  | Program output: 49                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -80                
Correct output: -91                 | Program output: -79                
Correct output: 23                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -64                
Correct output: -55                 | Program output: -29                
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -22                
Correct output: -56                 | Program output: 17                 
Correct output: -22                 | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: 62                 
Correct output: 33                  | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 33                 
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: 22                 
Correct output: -70                 | Program output: 21                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: 19                 
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: -62                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: 66                 
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: 11                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: -96                 | Program output: -26                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -26                
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: 48                 
Correct output: -99                 | Program output: -73                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: 42                 
Correct output: -90                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_626} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_yank in3 in4 integer_min integer_dup_times print_integer boolean_yankdup integer_gt tag_exec_626 () exec_dup (exec_yank integer_dup))
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_626} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_yank in3 in4 integer_min integer_dup_times print_integer boolean_yankdup integer_gt tag_exec_626 () exec_dup (exec_yank integer_dup))
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (537 567 15 201 398 567 201 193 495 569)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (537 567 15 201 398 567 201 193 495 569)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_626} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup})
Best program: (in3 in4 integer_min print_integer exec_stackdepth boolean_yankdup integer_gt tag_exec_626 () exec_yank boolean_xor integer_dup)
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 11
Size: 13
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 6.257
Median total errors in population: 6
Error averages by case: (0.463 0.433 0.985 0.799 0.602 0.433 0.799 0.807 0.505 0.431)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.419
Average program size in population (points): 27.337
Average percent parens in population: 0.403
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6766099
--- Timings ---
Current time: 1559593764017 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 58.4%
Fitness Testing:      9.2 seconds, 28.7%
Report:               4.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 10                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 24                 
Correct output: 47                  | Program output: 55                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -20                
Correct output: -56                 | Program output: 2                  
Correct output: -22                 | Program output: 3                  
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: -14                
Correct output: 33                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -33                
Correct output: -70                 | Program output: 20                 
Correct output: -76                 | Program output: 30                 
Correct output: -63                 | Program output: -32                
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: -57                
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -46                
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: -42                
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_625} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in3 in2 integer_min print_integer tag_exec_626 () exec_dup () integer_max exec_yank exec_do*range () exec_k_when_autoconstructing (tagged_625 integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ())
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.469
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_625} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in3 in2 integer_min print_integer tag_exec_626 () exec_dup () integer_max exec_yank exec_do*range () exec_k_when_autoconstructing (tagged_625 integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ())
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.469
--- Lexicase Population Statistics ---
Count of elite individuals by case: (599 357 265 807 599 597 191 425 360 264)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (599 357 265 807 599 597 191 425 360 264)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_s_when_autoconstructing})
Best program: (in3 in2 integer_empty integer_min print_integer boolean_yankdup tag_exec_626 () exec_dup () exec_s_when_autoconstructing (integer_dup integer_div exec_k_when_autoconstructing (boolean_or integer_mult integer_min) (exec_s_when_autoconstructing (print_integer integer_dup boolean_dup_items exec_s_when_autoconstructing () () ()) () ())) () ())
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 34
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 5.536
Median total errors in population: 4
Error averages by case: (0.401 0.643 0.735 0.193 0.401 0.403 0.809 0.575 0.64 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.739
Average program size in population (points): 22.61
Average percent parens in population: 0.340
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6943864
--- Timings ---
Current time: 1559593765502 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 59.1%
Fitness Testing:      9.4 seconds, 28.2%
Report:               4.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 404
Test mean error for best: 0.40400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 10                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 24                 
Correct output: 47                  | Program output: 55                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -20                
Correct output: -56                 | Program output: 2                  
Correct output: -22                 | Program output: 3                  
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: -14                
Correct output: 33                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -33                
Correct output: -70                 | Program output: 20                 
Correct output: -76                 | Program output: 30                 
Correct output: -63                 | Program output: -32                
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: -57                
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -46                
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: -42                
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_625} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in4 in3 in2 integer_min print_integer tag_exec_626 () exec_dup () integer_max exec_yank exec_do*range () exec_k_when_autoconstructing (tagged_625 integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 33
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_626} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_625} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in4 in3 in2 integer_min print_integer tag_exec_626 () exec_dup () integer_max exec_yank exec_do*range () exec_k_when_autoconstructing (tagged_625 integer_mult exec_s_when_autoconstructing (print_integer exec_s_when_autoconstructing () (integer_dup exec_s_when_autoconstructing () () ()) ()) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 33
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 464 462 810 464 462 464 387 462 658)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (462 464 462 810 464 462 464 387 462 658)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing})
Best program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 21
Size: 40
Percent parens: 0.475
--- Population Statistics ---
Average total errors in population: 4.905
Median total errors in population: 7
Error averages by case: (0.538 0.536 0.538 0.19 0.536 0.538 0.536 0.613 0.538 0.342)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.028
Average program size in population (points): 22.656
Average percent parens in population: 0.329
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.01
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7113600
--- Timings ---
Current time: 1559593767009 milliseconds
Total Time:          35.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.9 seconds, 59.6%
Fitness Testing:      9.7 seconds, 27.7%
Report:               4.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 40


Auto-simplifying with starting size: 40
step: 0
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 500
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 1000
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 1500
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 2000
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 2500
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 3000
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 3500
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 4000
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 4500
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 5000
program: (in3 in2 integer_min print_integer boolean_yankdup integer_div exec_dup () integer_max exec_yank exec_k_when_autoconstructing (exec_s (boolean_dup integer_mult in1 exec_s_when_autoconstructing (exec_rot (integer_mod exec_s_when_autoconstructing () (integer_dup boolean_invert_first_then_and exec_s_when_autoconstructing () () ()) ()) () ()) () ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 404
Test mean error for best: 0.40400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: -24                 | Program output: 78                 
Correct output: -88                 | Program output: -79                
Correct output: 24                  | Program output: 24                 
Correct output: -21                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -23                 | Program output: -13                
Correct output: 49                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: 10                  | Program output: 10                 
Correct output: 20                  | Program output: 20                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 53                 
Correct output: 65                  | Program output: 65                 
Correct output: 3                   | Program output: 10                 
Correct output: 37                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 17                 
Correct output: 24                  | Program output: 24                 
Correct output: 47                  | Program output: 55                 
Correct output: 57                  | Program output: 64                 
Correct output: 4                   | Program output: 4                  
Correct output: 52                  | Program output: 52                 
Correct output: 56                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 43                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 49                  | Program output: 71                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -23                
Correct output: -94                 | Program output: 69                 
Correct output: -13                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: 23                  | Program output: 65                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -49                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -20                
Correct output: -56                 | Program output: 2                  
Correct output: -22                 | Program output: 3                  
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -14                 | Program output: -14                
Correct output: 33                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -33                
Correct output: -70                 | Program output: 20                 
Correct output: -76                 | Program output: 30                 
Correct output: -63                 | Program output: -32                
Correct output: -91                 | Program output: -6                 
Correct output: -62                 | Program output: -57                
Correct output: -81                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 17                 
Correct output: -75                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -46                
Correct output: -83                 | Program output: -76                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: 14                  | Program output: 45                 
Correct output: -26                 | Program output: 83                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -24                 | Program output: -11                
Correct output: -56                 | Program output: -42                
Correct output: -2                  | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
