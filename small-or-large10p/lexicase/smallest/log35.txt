Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-60 -60 -17 -60] -60] [[-34 -1 -1 -1] -34] [[42 42 42 32] 32] [[-60 -60 83 -60] -60] [[-98 92 92 92] -98] [[-75 -75 -75 -32] -75] [[36 36 -38 36] -38] [[28 28 28 92] 28] [[8 8 8 90] 8] [[-42 -42 -42 58] -42] [(-27 -27 -27 -27) -27] [(46 46 46 46) 46] [(90 90 90 90) 90] [(94 94 94 94) 94] [(-58 -58 -58 -58) -58] [(94 34 77 78) 34] [(64 2 51 21) 2] [(56 2 77 25) 2] [(90 71 94 38) 38] [(78 98 4 88) 4] [(6 7 80 11) 6] [(39 33 25 77) 25] [(100 61 39 60) 39] [(69 72 27 79) 27] [(84 13 12 50) 12] [(53 34 19 34) 19] [(50 67 34 93) 34] [(60 18 18 49) 18] [(85 21 45 90) 21] [(11 64 57 75) 11] [(90 16 22 88) 16] [(68 89 41 94) 41] [(63 28 94 100) 28] [(52 76 96 88) 52] [(10 73 86 64) 10] [(-14 -20 -84 -25) -84] [(-28 9 22 -61) -61] [(87 25 -43 -100) -100] [(3 70 26 -65) -65] [(-64 -40 57 74) -64] [(80 63 -37 -42) -42] [(59 67 53 -32) -32] [(-11 93 81 -20) -20] [(-96 62 -17 36) -96] [(5 -53 -58 9) -58] [(85 54 57 13) 13] [(-73 -21 54 38) -73] [(58 14 -10 -68) -68] [(38 17 -34 20) -34] [(-38 -34 -3 100) -38] [(-96 89 -77 -43) -96] [(-88 -90 42 -24) -90] [(-83 78 -28 17) -83] [(-48 94 -91 -66) -91] [(-41 13 -61 49) -61] [(77 -45 78 52) -45] [(-85 -22 -13 -97) -97] [(70 -87 57 -56) -87] [(12 -37 -59 72) -59] [(-40 99 -89 -35) -89] [(-76 -29 -35 -14) -76] [(-73 -58 -45 74) -73] [(67 58 29 -64) -64] [(82 -61 -98 100) -98] [(-81 -67 83 41) -81] [(-72 59 76 -50) -72] [(-87 -74 -90 -2) -90] [(35 -77 -94 -54) -94] [(20 57 45 -8) -8] [(75 -31 48 -77) -77] [(-35 12 55 -54) -54] [(71 -2 -47 -64) -64] [(-42 58 81 84) -42] [(-50 -100 -42 91) -100] [(-64 -77 93 -4) -77] [(-19 27 -56 -53) -56] [(91 56 -23 76) -23] [(-65 53 50 -100) -100] [(-34 -5 -62 -90) -90] [(69 38 86 31) 31] [(92 -19 22 42) -19] [(-37 -18 -7 26) -37] [(20 18 -26 23) -26] [(-87 -1 -80 -60) -87] [(95 -96 29 97) -96] [(-22 -80 99 -91) -91] [(-48 -62 20 37) -62] [(-10 19 -33 -98) -98] [(-58 -96 -18 -66) -96] [(-89 -87 74 -89) -89] [(-17 -88 -57 -24) -88] [(-15 -24 84 31) -24] [(-70 3 -37 -90) -90] [(64 -18 77 -72) -72] [(100 23 98 -4) -4])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-60 -60 -17 -60] -60]
Train Case:   6 | Input/Output: [[-34 -1 -1 -1] -34]
Train Case:   7 | Input/Output: [[42 42 42 32] 32]
Train Case:   8 | Input/Output: [[-60 -60 83 -60] -60]
Train Case:   9 | Input/Output: [[-98 92 92 92] -98]
Train Case:  10 | Input/Output: [[-75 -75 -75 -32] -75]
Train Case:  11 | Input/Output: [[36 36 -38 36] -38]
Train Case:  12 | Input/Output: [[28 28 28 92] 28]
Train Case:  13 | Input/Output: [[8 8 8 90] 8]
Train Case:  14 | Input/Output: [[-42 -42 -42 58] -42]
Train Case:  15 | Input/Output: [(-27 -27 -27 -27) -27]
Train Case:  16 | Input/Output: [(46 46 46 46) 46]
Train Case:  17 | Input/Output: [(90 90 90 90) 90]
Train Case:  18 | Input/Output: [(94 94 94 94) 94]
Train Case:  19 | Input/Output: [(-58 -58 -58 -58) -58]
Train Case:  20 | Input/Output: [(94 34 77 78) 34]
Train Case:  21 | Input/Output: [(64 2 51 21) 2]
Train Case:  22 | Input/Output: [(56 2 77 25) 2]
Train Case:  23 | Input/Output: [(90 71 94 38) 38]
Train Case:  24 | Input/Output: [(78 98 4 88) 4]
Train Case:  25 | Input/Output: [(6 7 80 11) 6]
Train Case:  26 | Input/Output: [(39 33 25 77) 25]
Train Case:  27 | Input/Output: [(100 61 39 60) 39]
Train Case:  28 | Input/Output: [(69 72 27 79) 27]
Train Case:  29 | Input/Output: [(84 13 12 50) 12]
Train Case:  30 | Input/Output: [(53 34 19 34) 19]
Train Case:  31 | Input/Output: [(50 67 34 93) 34]
Train Case:  32 | Input/Output: [(60 18 18 49) 18]
Train Case:  33 | Input/Output: [(85 21 45 90) 21]
Train Case:  34 | Input/Output: [(11 64 57 75) 11]
Train Case:  35 | Input/Output: [(90 16 22 88) 16]
Train Case:  36 | Input/Output: [(68 89 41 94) 41]
Train Case:  37 | Input/Output: [(63 28 94 100) 28]
Train Case:  38 | Input/Output: [(52 76 96 88) 52]
Train Case:  39 | Input/Output: [(10 73 86 64) 10]
Train Case:  40 | Input/Output: [(-14 -20 -84 -25) -84]
Train Case:  41 | Input/Output: [(-28 9 22 -61) -61]
Train Case:  42 | Input/Output: [(87 25 -43 -100) -100]
Train Case:  43 | Input/Output: [(3 70 26 -65) -65]
Train Case:  44 | Input/Output: [(-64 -40 57 74) -64]
Train Case:  45 | Input/Output: [(80 63 -37 -42) -42]
Train Case:  46 | Input/Output: [(59 67 53 -32) -32]
Train Case:  47 | Input/Output: [(-11 93 81 -20) -20]
Train Case:  48 | Input/Output: [(-96 62 -17 36) -96]
Train Case:  49 | Input/Output: [(5 -53 -58 9) -58]
Train Case:  50 | Input/Output: [(85 54 57 13) 13]
Train Case:  51 | Input/Output: [(-73 -21 54 38) -73]
Train Case:  52 | Input/Output: [(58 14 -10 -68) -68]
Train Case:  53 | Input/Output: [(38 17 -34 20) -34]
Train Case:  54 | Input/Output: [(-38 -34 -3 100) -38]
Train Case:  55 | Input/Output: [(-96 89 -77 -43) -96]
Train Case:  56 | Input/Output: [(-88 -90 42 -24) -90]
Train Case:  57 | Input/Output: [(-83 78 -28 17) -83]
Train Case:  58 | Input/Output: [(-48 94 -91 -66) -91]
Train Case:  59 | Input/Output: [(-41 13 -61 49) -61]
Train Case:  60 | Input/Output: [(77 -45 78 52) -45]
Train Case:  61 | Input/Output: [(-85 -22 -13 -97) -97]
Train Case:  62 | Input/Output: [(70 -87 57 -56) -87]
Train Case:  63 | Input/Output: [(12 -37 -59 72) -59]
Train Case:  64 | Input/Output: [(-40 99 -89 -35) -89]
Train Case:  65 | Input/Output: [(-76 -29 -35 -14) -76]
Train Case:  66 | Input/Output: [(-73 -58 -45 74) -73]
Train Case:  67 | Input/Output: [(67 58 29 -64) -64]
Train Case:  68 | Input/Output: [(82 -61 -98 100) -98]
Train Case:  69 | Input/Output: [(-81 -67 83 41) -81]
Train Case:  70 | Input/Output: [(-72 59 76 -50) -72]
Train Case:  71 | Input/Output: [(-87 -74 -90 -2) -90]
Train Case:  72 | Input/Output: [(35 -77 -94 -54) -94]
Train Case:  73 | Input/Output: [(20 57 45 -8) -8]
Train Case:  74 | Input/Output: [(75 -31 48 -77) -77]
Train Case:  75 | Input/Output: [(-35 12 55 -54) -54]
Train Case:  76 | Input/Output: [(71 -2 -47 -64) -64]
Train Case:  77 | Input/Output: [(-42 58 81 84) -42]
Train Case:  78 | Input/Output: [(-50 -100 -42 91) -100]
Train Case:  79 | Input/Output: [(-64 -77 93 -4) -77]
Train Case:  80 | Input/Output: [(-19 27 -56 -53) -56]
Train Case:  81 | Input/Output: [(91 56 -23 76) -23]
Train Case:  82 | Input/Output: [(-65 53 50 -100) -100]
Train Case:  83 | Input/Output: [(-34 -5 -62 -90) -90]
Train Case:  84 | Input/Output: [(69 38 86 31) 31]
Train Case:  85 | Input/Output: [(92 -19 22 42) -19]
Train Case:  86 | Input/Output: [(-37 -18 -7 26) -37]
Train Case:  87 | Input/Output: [(20 18 -26 23) -26]
Train Case:  88 | Input/Output: [(-87 -1 -80 -60) -87]
Train Case:  89 | Input/Output: [(95 -96 29 97) -96]
Train Case:  90 | Input/Output: [(-22 -80 99 -91) -91]
Train Case:  91 | Input/Output: [(-48 -62 20 37) -62]
Train Case:  92 | Input/Output: [(-10 19 -33 -98) -98]
Train Case:  93 | Input/Output: [(-58 -96 -18 -66) -96]
Train Case:  94 | Input/Output: [(-89 -87 74 -89) -89]
Train Case:  95 | Input/Output: [(-17 -88 -57 -24) -88]
Train Case:  96 | Input/Output: [(-15 -24 84 31) -24]
Train Case:  97 | Input/Output: [(-70 3 -37 -90) -90]
Train Case:  98 | Input/Output: [(64 -18 77 -72) -72]
Train Case:  99 | Input/Output: [(100 23 98 -4) -4]
Test Case:   0 | Input/Output: [[11 59 11 11] 11]
Test Case:   1 | Input/Output: [[-78 -78 -78 -97] -97]
Test Case:   2 | Input/Output: [[-1 77 -1 -1] -1]
Test Case:   3 | Input/Output: [[56 56 -68 56] -68]
Test Case:   4 | Input/Output: [[15 38 15 15] 15]
Test Case:   5 | Input/Output: [[-52 -52 23 -52] -52]
Test Case:   6 | Input/Output: [[81 81 -33 81] -33]
Test Case:   7 | Input/Output: [[45 45 45 -48] -48]
Test Case:   8 | Input/Output: [[63 -12 -12 -12] -12]
Test Case:   9 | Input/Output: [[95 95 90 95] 90]
Test Case:  10 | Input/Output: [[-12 -12 -86 -12] -86]
Test Case:  11 | Input/Output: [[89 0 89 89] 0]
Test Case:  12 | Input/Output: [[36 -91 36 36] -91]
Test Case:  13 | Input/Output: [[21 21 -71 21] -71]
Test Case:  14 | Input/Output: [[76 96 76 76] 76]
Test Case:  15 | Input/Output: [[67 67 -31 67] -31]
Test Case:  16 | Input/Output: [[92 79 79 79] 79]
Test Case:  17 | Input/Output: [[-38 71 -38 -38] -38]
Test Case:  18 | Input/Output: [[-11 -11 -11 -82] -82]
Test Case:  19 | Input/Output: [[-44 -44 29 -44] -44]
Test Case:  20 | Input/Output: [[-89 90 90 90] -89]
Test Case:  21 | Input/Output: [[27 58 58 58] 27]
Test Case:  22 | Input/Output: [[-40 50 50 50] -40]
Test Case:  23 | Input/Output: [[77 77 1 77] 1]
Test Case:  24 | Input/Output: [[-67 69 69 69] -67]
Test Case:  25 | Input/Output: [[-62 -62 7 -62] -62]
Test Case:  26 | Input/Output: [[-75 -75 -75 -37] -75]
Test Case:  27 | Input/Output: [[-78 -78 -78 90] -78]
Test Case:  28 | Input/Output: [[-99 -99 95 -99] -99]
Test Case:  29 | Input/Output: [[38 38 5 38] 5]
Test Case:  30 | Input/Output: [[-54 -96 -54 -54] -96]
Test Case:  31 | Input/Output: [[-1 -27 -1 -1] -27]
Test Case:  32 | Input/Output: [[-87 -87 -87 -20] -87]
Test Case:  33 | Input/Output: [[-89 -89 -99 -89] -99]
Test Case:  34 | Input/Output: [[69 69 46 69] 46]
Test Case:  35 | Input/Output: [[-41 14 -41 -41] -41]
Test Case:  36 | Input/Output: [[35 35 -84 35] -84]
Test Case:  37 | Input/Output: [[83 -94 -94 -94] -94]
Test Case:  38 | Input/Output: [[-47 -47 -47 86] -47]
Test Case:  39 | Input/Output: [[-15 86 -15 -15] -15]
Test Case:  40 | Input/Output: [[-18 -46 -46 -46] -46]
Test Case:  41 | Input/Output: [[92 -32 -32 -32] -32]
Test Case:  42 | Input/Output: [[100 8 100 100] 8]
Test Case:  43 | Input/Output: [[67 41 67 67] 41]
Test Case:  44 | Input/Output: [[0 -91 -91 -91] -91]
Test Case:  45 | Input/Output: [[-13 69 -13 -13] -13]
Test Case:  46 | Input/Output: [[31 31 -63 31] -63]
Test Case:  47 | Input/Output: [[-16 -16 -16 -34] -34]
Test Case:  48 | Input/Output: [[85 85 85 -2] -2]
Test Case:  49 | Input/Output: [[-16 -16 98 -16] -16]
Test Case:  50 | Input/Output: [[-39 6 -39 -39] -39]
Test Case:  51 | Input/Output: [[-100 -100 -100 -55] -100]
Test Case:  52 | Input/Output: [[59 59 59 -93] -93]
Test Case:  53 | Input/Output: [[-78 48 -78 -78] -78]
Test Case:  54 | Input/Output: [[-63 -63 -63 79] -63]
Test Case:  55 | Input/Output: [[-6 -42 -42 -42] -42]
Test Case:  56 | Input/Output: [[84 33 33 33] 33]
Test Case:  57 | Input/Output: [[-93 -93 -66 -93] -93]
Test Case:  58 | Input/Output: [[4 -73 -73 -73] -73]
Test Case:  59 | Input/Output: [[-12 -12 -12 -8] -12]
Test Case:  60 | Input/Output: [[-75 -75 -75 -45] -75]
Test Case:  61 | Input/Output: [[49 49 -37 49] -37]
Test Case:  62 | Input/Output: [[-6 -6 -6 -58] -58]
Test Case:  63 | Input/Output: [[88 -74 -74 -74] -74]
Test Case:  64 | Input/Output: [[3 3 7 3] 3]
Test Case:  65 | Input/Output: [[55 90 55 55] 55]
Test Case:  66 | Input/Output: [[86 14 86 86] 14]
Test Case:  67 | Input/Output: [[-2 42 42 42] -2]
Test Case:  68 | Input/Output: [[24 -69 -69 -69] -69]
Test Case:  69 | Input/Output: [[86 -95 -95 -95] -95]
Test Case:  70 | Input/Output: [[-55 41 41 41] -55]
Test Case:  71 | Input/Output: [[-99 -99 -99 58] -99]
Test Case:  72 | Input/Output: [[-81 -49 -49 -49] -81]
Test Case:  73 | Input/Output: [[-36 42 42 42] -36]
Test Case:  74 | Input/Output: [[68 -5 68 68] -5]
Test Case:  75 | Input/Output: [[57 4 4 4] 4]
Test Case:  76 | Input/Output: [[-8 -8 20 -8] -8]
Test Case:  77 | Input/Output: [[34 34 59 34] 34]
Test Case:  78 | Input/Output: [[-34 -34 -34 65] -34]
Test Case:  79 | Input/Output: [[19 19 19 -68] -68]
Test Case:  80 | Input/Output: [[-29 -41 -29 -29] -41]
Test Case:  81 | Input/Output: [[-80 -80 -80 -81] -81]
Test Case:  82 | Input/Output: [[-70 -70 58 -70] -70]
Test Case:  83 | Input/Output: [[-46 20 -46 -46] -46]
Test Case:  84 | Input/Output: [[-81 -81 -69 -81] -81]
Test Case:  85 | Input/Output: [[-90 25 -90 -90] -90]
Test Case:  86 | Input/Output: [[-74 -95 -95 -95] -95]
Test Case:  87 | Input/Output: [[93 -22 -22 -22] -22]
Test Case:  88 | Input/Output: [[-67 -67 -67 -28] -67]
Test Case:  89 | Input/Output: [[-15 -76 -15 -15] -76]
Test Case:  90 | Input/Output: [[-99 -39 -39 -39] -99]
Test Case:  91 | Input/Output: [[-48 -48 -48 -30] -48]
Test Case:  92 | Input/Output: [[99 95 99 99] 95]
Test Case:  93 | Input/Output: [[64 -5 -5 -5] -5]
Test Case:  94 | Input/Output: [[-83 -83 -89 -83] -89]
Test Case:  95 | Input/Output: [[-97 72 -97 -97] -97]
Test Case:  96 | Input/Output: [[-55 -55 -38 -55] -55]
Test Case:  97 | Input/Output: [[5 -30 -30 -30] -30]
Test Case:  98 | Input/Output: [[-77 -77 -12 -77] -77]
Test Case:  99 | Input/Output: [[-72 -72 -44 -72] -72]
Test Case: 100 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 101 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 102 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 103 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 104 | Input/Output: [(57 57 57 57) 57]
Test Case: 105 | Input/Output: [(83 83 83 83) 83]
Test Case: 106 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 107 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 108 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 109 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 110 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 111 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 112 | Input/Output: [(89 89 89 89) 89]
Test Case: 113 | Input/Output: [(54 54 54 54) 54]
Test Case: 114 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 115 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 116 | Input/Output: [(87 87 87 87) 87]
Test Case: 117 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 118 | Input/Output: [(83 83 83 83) 83]
Test Case: 119 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 120 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 121 | Input/Output: [(72 72 72 72) 72]
Test Case: 122 | Input/Output: [(96 96 96 96) 96]
Test Case: 123 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 126 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 127 | Input/Output: [(44 44 44 44) 44]
Test Case: 128 | Input/Output: [(87 87 87 87) 87]
Test Case: 129 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 130 | Input/Output: [(75 75 75 75) 75]
Test Case: 131 | Input/Output: [(5 5 5 5) 5]
Test Case: 132 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 133 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 134 | Input/Output: [(14 14 14 14) 14]
Test Case: 135 | Input/Output: [(98 98 98 98) 98]
Test Case: 136 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 137 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 138 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 139 | Input/Output: [(68 68 68 68) 68]
Test Case: 140 | Input/Output: [(72 72 72 72) 72]
Test Case: 141 | Input/Output: [(78 78 78 78) 78]
Test Case: 142 | Input/Output: [(17 17 17 17) 17]
Test Case: 143 | Input/Output: [(78 78 78 78) 78]
Test Case: 144 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 145 | Input/Output: [(26 26 26 26) 26]
Test Case: 146 | Input/Output: [(9 9 9 9) 9]
Test Case: 147 | Input/Output: [(2 2 2 2) 2]
Test Case: 148 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 149 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 150 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 151 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 152 | Input/Output: [(71 71 71 71) 71]
Test Case: 153 | Input/Output: [(63 63 63 63) 63]
Test Case: 154 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 155 | Input/Output: [(0 0 0 0) 0]
Test Case: 156 | Input/Output: [(53 53 53 53) 53]
Test Case: 157 | Input/Output: [(3 3 3 3) 3]
Test Case: 158 | Input/Output: [(12 12 12 12) 12]
Test Case: 159 | Input/Output: [(78 78 78 78) 78]
Test Case: 160 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 161 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 162 | Input/Output: [(78 78 78 78) 78]
Test Case: 163 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 164 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 165 | Input/Output: [(50 50 50 50) 50]
Test Case: 166 | Input/Output: [(2 2 2 2) 2]
Test Case: 167 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 168 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 169 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 170 | Input/Output: [(56 56 56 56) 56]
Test Case: 171 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 172 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 173 | Input/Output: [(29 29 29 29) 29]
Test Case: 174 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 175 | Input/Output: [(17 17 17 17) 17]
Test Case: 176 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 177 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 178 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 179 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 180 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 181 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 182 | Input/Output: [(97 97 97 97) 97]
Test Case: 183 | Input/Output: [(20 20 20 20) 20]
Test Case: 184 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 185 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 186 | Input/Output: [(35 35 35 35) 35]
Test Case: 187 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 188 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 189 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 190 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 191 | Input/Output: [(97 97 97 97) 97]
Test Case: 192 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 193 | Input/Output: [(90 90 90 90) 90]
Test Case: 194 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 195 | Input/Output: [(94 94 94 94) 94]
Test Case: 196 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 197 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 198 | Input/Output: [(88 88 88 88) 88]
Test Case: 199 | Input/Output: [(61 61 61 61) 61]
Test Case: 200 | Input/Output: [(59 25 80 20) 20]
Test Case: 201 | Input/Output: [(24 82 40 79) 24]
Test Case: 202 | Input/Output: [(18 12 47 82) 12]
Test Case: 203 | Input/Output: [(85 34 23 60) 23]
Test Case: 204 | Input/Output: [(59 31 23 33) 23]
Test Case: 205 | Input/Output: [(73 5 18 76) 5]
Test Case: 206 | Input/Output: [(16 32 52 89) 16]
Test Case: 207 | Input/Output: [(33 73 20 47) 20]
Test Case: 208 | Input/Output: [(19 30 91 69) 19]
Test Case: 209 | Input/Output: [(99 67 27 41) 27]
Test Case: 210 | Input/Output: [(5 53 45 1) 1]
Test Case: 211 | Input/Output: [(42 64 6 26) 6]
Test Case: 212 | Input/Output: [(20 100 72 91) 20]
Test Case: 213 | Input/Output: [(88 44 62 27) 27]
Test Case: 214 | Input/Output: [(94 4 33 7) 4]
Test Case: 215 | Input/Output: [(14 60 26 49) 14]
Test Case: 216 | Input/Output: [(51 28 70 19) 19]
Test Case: 217 | Input/Output: [(12 16 56 91) 12]
Test Case: 218 | Input/Output: [(18 69 94 75) 18]
Test Case: 219 | Input/Output: [(22 34 51 55) 22]
Test Case: 220 | Input/Output: [(53 37 83 23) 23]
Test Case: 221 | Input/Output: [(87 97 59 37) 37]
Test Case: 222 | Input/Output: [(97 41 19 51) 19]
Test Case: 223 | Input/Output: [(89 89 9 26) 9]
Test Case: 224 | Input/Output: [(61 75 19 39) 19]
Test Case: 225 | Input/Output: [(95 35 56 23) 23]
Test Case: 226 | Input/Output: [(0 10 70 86) 0]
Test Case: 227 | Input/Output: [(12 66 8 25) 8]
Test Case: 228 | Input/Output: [(44 38 94 25) 25]
Test Case: 229 | Input/Output: [(71 5 44 65) 5]
Test Case: 230 | Input/Output: [(6 27 21 26) 6]
Test Case: 231 | Input/Output: [(24 69 54 94) 24]
Test Case: 232 | Input/Output: [(38 81 24 44) 24]
Test Case: 233 | Input/Output: [(64 78 50 100) 50]
Test Case: 234 | Input/Output: [(7 72 77 35) 7]
Test Case: 235 | Input/Output: [(18 92 80 68) 18]
Test Case: 236 | Input/Output: [(51 45 74 37) 37]
Test Case: 237 | Input/Output: [(49 0 61 48) 0]
Test Case: 238 | Input/Output: [(96 65 46 51) 46]
Test Case: 239 | Input/Output: [(20 1 72 62) 1]
Test Case: 240 | Input/Output: [(45 38 92 80) 38]
Test Case: 241 | Input/Output: [(23 30 21 96) 21]
Test Case: 242 | Input/Output: [(78 90 70 60) 60]
Test Case: 243 | Input/Output: [(69 67 27 96) 27]
Test Case: 244 | Input/Output: [(51 57 31 41) 31]
Test Case: 245 | Input/Output: [(24 30 99 65) 24]
Test Case: 246 | Input/Output: [(80 37 66 16) 16]
Test Case: 247 | Input/Output: [(5 91 61 41) 5]
Test Case: 248 | Input/Output: [(94 23 52 80) 23]
Test Case: 249 | Input/Output: [(51 96 40 53) 40]
Test Case: 250 | Input/Output: [(69 0 16 59) 0]
Test Case: 251 | Input/Output: [(73 74 60 24) 24]
Test Case: 252 | Input/Output: [(72 69 95 83) 69]
Test Case: 253 | Input/Output: [(42 35 12 27) 12]
Test Case: 254 | Input/Output: [(85 61 77 11) 11]
Test Case: 255 | Input/Output: [(73 49 25 26) 25]
Test Case: 256 | Input/Output: [(66 96 93 81) 66]
Test Case: 257 | Input/Output: [(48 33 20 58) 20]
Test Case: 258 | Input/Output: [(97 76 4 19) 4]
Test Case: 259 | Input/Output: [(48 61 98 48) 48]
Test Case: 260 | Input/Output: [(37 90 99 40) 37]
Test Case: 261 | Input/Output: [(87 61 6 45) 6]
Test Case: 262 | Input/Output: [(19 19 31 16) 16]
Test Case: 263 | Input/Output: [(98 55 10 87) 10]
Test Case: 264 | Input/Output: [(81 68 29 70) 29]
Test Case: 265 | Input/Output: [(97 34 34 6) 6]
Test Case: 266 | Input/Output: [(1 51 8 59) 1]
Test Case: 267 | Input/Output: [(9 20 39 18) 9]
Test Case: 268 | Input/Output: [(98 40 20 20) 20]
Test Case: 269 | Input/Output: [(82 74 87 58) 58]
Test Case: 270 | Input/Output: [(5 10 52 21) 5]
Test Case: 271 | Input/Output: [(59 60 23 35) 23]
Test Case: 272 | Input/Output: [(44 71 52 61) 44]
Test Case: 273 | Input/Output: [(64 79 15 30) 15]
Test Case: 274 | Input/Output: [(41 31 0 84) 0]
Test Case: 275 | Input/Output: [(61 100 72 100) 61]
Test Case: 276 | Input/Output: [(41 100 60 14) 14]
Test Case: 277 | Input/Output: [(87 42 80 27) 27]
Test Case: 278 | Input/Output: [(44 84 86 83) 44]
Test Case: 279 | Input/Output: [(87 51 60 53) 51]
Test Case: 280 | Input/Output: [(14 81 19 51) 14]
Test Case: 281 | Input/Output: [(25 50 11 12) 11]
Test Case: 282 | Input/Output: [(65 86 53 92) 53]
Test Case: 283 | Input/Output: [(71 44 14 82) 14]
Test Case: 284 | Input/Output: [(57 16 79 75) 16]
Test Case: 285 | Input/Output: [(70 45 67 15) 15]
Test Case: 286 | Input/Output: [(57 79 24 97) 24]
Test Case: 287 | Input/Output: [(97 33 46 39) 33]
Test Case: 288 | Input/Output: [(48 10 73 51) 10]
Test Case: 289 | Input/Output: [(0 52 27 38) 0]
Test Case: 290 | Input/Output: [(88 6 56 24) 6]
Test Case: 291 | Input/Output: [(81 61 81 90) 61]
Test Case: 292 | Input/Output: [(8 62 36 68) 8]
Test Case: 293 | Input/Output: [(20 98 99 1) 1]
Test Case: 294 | Input/Output: [(27 35 73 80) 27]
Test Case: 295 | Input/Output: [(14 92 38 5) 5]
Test Case: 296 | Input/Output: [(53 91 27 6) 6]
Test Case: 297 | Input/Output: [(73 31 57 82) 31]
Test Case: 298 | Input/Output: [(35 27 21 95) 21]
Test Case: 299 | Input/Output: [(5 57 99 93) 5]
Test Case: 300 | Input/Output: [(68 18 39 86) 18]
Test Case: 301 | Input/Output: [(61 42 58 82) 42]
Test Case: 302 | Input/Output: [(25 87 84 92) 25]
Test Case: 303 | Input/Output: [(7 5 44 17) 5]
Test Case: 304 | Input/Output: [(43 73 4 92) 4]
Test Case: 305 | Input/Output: [(30 46 58 5) 5]
Test Case: 306 | Input/Output: [(73 36 1 50) 1]
Test Case: 307 | Input/Output: [(54 4 56 93) 4]
Test Case: 308 | Input/Output: [(96 1 92 100) 1]
Test Case: 309 | Input/Output: [(27 20 70 97) 20]
Test Case: 310 | Input/Output: [(71 49 87 91) 49]
Test Case: 311 | Input/Output: [(71 29 65 30) 29]
Test Case: 312 | Input/Output: [(17 59 24 28) 17]
Test Case: 313 | Input/Output: [(30 59 48 5) 5]
Test Case: 314 | Input/Output: [(46 51 89 37) 37]
Test Case: 315 | Input/Output: [(34 15 36 38) 15]
Test Case: 316 | Input/Output: [(74 14 62 2) 2]
Test Case: 317 | Input/Output: [(57 13 43 42) 13]
Test Case: 318 | Input/Output: [(96 75 69 8) 8]
Test Case: 319 | Input/Output: [(3 25 47 33) 3]
Test Case: 320 | Input/Output: [(40 5 56 8) 5]
Test Case: 321 | Input/Output: [(45 72 35 6) 6]
Test Case: 322 | Input/Output: [(93 88 57 31) 31]
Test Case: 323 | Input/Output: [(88 37 39 51) 37]
Test Case: 324 | Input/Output: [(24 37 20 52) 20]
Test Case: 325 | Input/Output: [(64 12 55 21) 12]
Test Case: 326 | Input/Output: [(80 94 46 79) 46]
Test Case: 327 | Input/Output: [(81 32 75 28) 28]
Test Case: 328 | Input/Output: [(35 52 58 29) 29]
Test Case: 329 | Input/Output: [(96 75 41 24) 24]
Test Case: 330 | Input/Output: [(71 63 35 24) 24]
Test Case: 331 | Input/Output: [(89 55 36 99) 36]
Test Case: 332 | Input/Output: [(53 87 94 38) 38]
Test Case: 333 | Input/Output: [(28 11 41 76) 11]
Test Case: 334 | Input/Output: [(71 46 82 26) 26]
Test Case: 335 | Input/Output: [(6 33 40 52) 6]
Test Case: 336 | Input/Output: [(78 16 72 52) 16]
Test Case: 337 | Input/Output: [(96 33 10 25) 10]
Test Case: 338 | Input/Output: [(85 24 54 28) 24]
Test Case: 339 | Input/Output: [(72 68 35 30) 30]
Test Case: 340 | Input/Output: [(44 4 44 75) 4]
Test Case: 341 | Input/Output: [(55 43 70 31) 31]
Test Case: 342 | Input/Output: [(80 10 27 67) 10]
Test Case: 343 | Input/Output: [(53 26 77 39) 26]
Test Case: 344 | Input/Output: [(52 58 13 9) 9]
Test Case: 345 | Input/Output: [(25 28 32 30) 25]
Test Case: 346 | Input/Output: [(77 56 73 41) 41]
Test Case: 347 | Input/Output: [(78 8 85 35) 8]
Test Case: 348 | Input/Output: [(31 60 96 70) 31]
Test Case: 349 | Input/Output: [(31 88 75 32) 31]
Test Case: 350 | Input/Output: [(33 98 13 95) 13]
Test Case: 351 | Input/Output: [(61 60 97 22) 22]
Test Case: 352 | Input/Output: [(25 68 44 54) 25]
Test Case: 353 | Input/Output: [(29 86 49 54) 29]
Test Case: 354 | Input/Output: [(36 91 98 26) 26]
Test Case: 355 | Input/Output: [(71 83 89 41) 41]
Test Case: 356 | Input/Output: [(47 18 31 69) 18]
Test Case: 357 | Input/Output: [(53 85 2 77) 2]
Test Case: 358 | Input/Output: [(27 86 73 22) 22]
Test Case: 359 | Input/Output: [(22 98 71 90) 22]
Test Case: 360 | Input/Output: [(86 37 98 69) 37]
Test Case: 361 | Input/Output: [(5 80 6 30) 5]
Test Case: 362 | Input/Output: [(12 10 68 37) 10]
Test Case: 363 | Input/Output: [(73 79 78 97) 73]
Test Case: 364 | Input/Output: [(48 58 21 94) 21]
Test Case: 365 | Input/Output: [(72 75 54 68) 54]
Test Case: 366 | Input/Output: [(18 93 58 52) 18]
Test Case: 367 | Input/Output: [(52 4 20 20) 4]
Test Case: 368 | Input/Output: [(67 68 95 37) 37]
Test Case: 369 | Input/Output: [(69 1 75 30) 1]
Test Case: 370 | Input/Output: [(10 88 92 30) 10]
Test Case: 371 | Input/Output: [(51 93 99 82) 51]
Test Case: 372 | Input/Output: [(28 5 22 20) 5]
Test Case: 373 | Input/Output: [(50 58 70 17) 17]
Test Case: 374 | Input/Output: [(43 63 48 21) 21]
Test Case: 375 | Input/Output: [(73 78 51 99) 51]
Test Case: 376 | Input/Output: [(15 96 46 90) 15]
Test Case: 377 | Input/Output: [(69 71 99 88) 69]
Test Case: 378 | Input/Output: [(32 2 58 20) 2]
Test Case: 379 | Input/Output: [(19 75 21 6) 6]
Test Case: 380 | Input/Output: [(86 83 79 68) 68]
Test Case: 381 | Input/Output: [(12 37 55 86) 12]
Test Case: 382 | Input/Output: [(13 72 99 38) 13]
Test Case: 383 | Input/Output: [(22 49 52 100) 22]
Test Case: 384 | Input/Output: [(42 58 7 64) 7]
Test Case: 385 | Input/Output: [(73 83 9 7) 7]
Test Case: 386 | Input/Output: [(31 28 9 86) 9]
Test Case: 387 | Input/Output: [(77 31 7 14) 7]
Test Case: 388 | Input/Output: [(59 16 82 11) 11]
Test Case: 389 | Input/Output: [(41 67 41 14) 14]
Test Case: 390 | Input/Output: [(87 98 14 7) 7]
Test Case: 391 | Input/Output: [(74 22 26 44) 22]
Test Case: 392 | Input/Output: [(26 21 97 5) 5]
Test Case: 393 | Input/Output: [(99 86 86 28) 28]
Test Case: 394 | Input/Output: [(33 78 12 6) 6]
Test Case: 395 | Input/Output: [(76 0 93 69) 0]
Test Case: 396 | Input/Output: [(24 11 18 100) 11]
Test Case: 397 | Input/Output: [(17 58 75 14) 14]
Test Case: 398 | Input/Output: [(54 60 6 55) 6]
Test Case: 399 | Input/Output: [(98 57 53 59) 53]
Test Case: 400 | Input/Output: [(67 -29 -36 47) -36]
Test Case: 401 | Input/Output: [(-50 80 7 -87) -87]
Test Case: 402 | Input/Output: [(60 47 16 -19) -19]
Test Case: 403 | Input/Output: [(-91 60 40 -84) -91]
Test Case: 404 | Input/Output: [(-23 -58 85 -50) -58]
Test Case: 405 | Input/Output: [(-30 -92 -26 -4) -92]
Test Case: 406 | Input/Output: [(2 2 44 -51) -51]
Test Case: 407 | Input/Output: [(79 -33 86 50) -33]
Test Case: 408 | Input/Output: [(7 77 93 -55) -55]
Test Case: 409 | Input/Output: [(33 0 -51 20) -51]
Test Case: 410 | Input/Output: [(21 73 15 -26) -26]
Test Case: 411 | Input/Output: [(-34 -49 26 82) -49]
Test Case: 412 | Input/Output: [(-12 39 34 39) -12]
Test Case: 413 | Input/Output: [(-39 -28 -71 40) -71]
Test Case: 414 | Input/Output: [(-88 7 -82 59) -88]
Test Case: 415 | Input/Output: [(82 74 3 -92) -92]
Test Case: 416 | Input/Output: [(64 92 35 6) 6]
Test Case: 417 | Input/Output: [(-92 10 -74 -34) -92]
Test Case: 418 | Input/Output: [(-30 76 69 -54) -54]
Test Case: 419 | Input/Output: [(-35 47 92 80) -35]
Test Case: 420 | Input/Output: [(-2 56 53 -20) -20]
Test Case: 421 | Input/Output: [(-49 -18 66 -13) -49]
Test Case: 422 | Input/Output: [(-8 -64 65 83) -64]
Test Case: 423 | Input/Output: [(67 -13 72 6) -13]
Test Case: 424 | Input/Output: [(4 -17 -19 87) -19]
Test Case: 425 | Input/Output: [(-32 6 -13 -66) -66]
Test Case: 426 | Input/Output: [(-24 -74 95 -12) -74]
Test Case: 427 | Input/Output: [(-54 64 3 11) -54]
Test Case: 428 | Input/Output: [(-29 -47 -15 -20) -47]
Test Case: 429 | Input/Output: [(-73 5 -7 90) -73]
Test Case: 430 | Input/Output: [(-88 97 -91 -25) -91]
Test Case: 431 | Input/Output: [(25 -6 -95 60) -95]
Test Case: 432 | Input/Output: [(-6 -50 74 -7) -50]
Test Case: 433 | Input/Output: [(-13 40 -98 92) -98]
Test Case: 434 | Input/Output: [(21 -52 -68 9) -68]
Test Case: 435 | Input/Output: [(-59 18 76 44) -59]
Test Case: 436 | Input/Output: [(-72 -1 -62 27) -72]
Test Case: 437 | Input/Output: [(45 72 4 4) 4]
Test Case: 438 | Input/Output: [(48 -16 -97 59) -97]
Test Case: 439 | Input/Output: [(-48 45 84 92) -48]
Test Case: 440 | Input/Output: [(71 38 70 -12) -12]
Test Case: 441 | Input/Output: [(70 -54 -74 33) -74]
Test Case: 442 | Input/Output: [(75 -83 -72 9) -83]
Test Case: 443 | Input/Output: [(81 3 -64 -4) -64]
Test Case: 444 | Input/Output: [(65 -38 -56 13) -56]
Test Case: 445 | Input/Output: [(62 -33 -72 37) -72]
Test Case: 446 | Input/Output: [(15 72 47 31) 15]
Test Case: 447 | Input/Output: [(55 83 94 -65) -65]
Test Case: 448 | Input/Output: [(62 84 -23 27) -23]
Test Case: 449 | Input/Output: [(93 -87 -24 -34) -87]
Test Case: 450 | Input/Output: [(62 -44 95 -72) -72]
Test Case: 451 | Input/Output: [(-71 51 75 -65) -71]
Test Case: 452 | Input/Output: [(-53 55 -10 19) -53]
Test Case: 453 | Input/Output: [(92 67 -79 40) -79]
Test Case: 454 | Input/Output: [(-75 48 46 -5) -75]
Test Case: 455 | Input/Output: [(83 -26 -57 71) -57]
Test Case: 456 | Input/Output: [(-51 92 0 -82) -82]
Test Case: 457 | Input/Output: [(-49 -25 -99 79) -99]
Test Case: 458 | Input/Output: [(97 -32 -51 17) -51]
Test Case: 459 | Input/Output: [(88 -78 68 -62) -78]
Test Case: 460 | Input/Output: [(-85 63 -29 -64) -85]
Test Case: 461 | Input/Output: [(-42 15 -22 2) -42]
Test Case: 462 | Input/Output: [(-44 1 37 -32) -44]
Test Case: 463 | Input/Output: [(-38 -42 34 43) -42]
Test Case: 464 | Input/Output: [(83 36 81 -79) -79]
Test Case: 465 | Input/Output: [(-47 2 -53 4) -53]
Test Case: 466 | Input/Output: [(65 93 61 -86) -86]
Test Case: 467 | Input/Output: [(56 -8 80 17) -8]
Test Case: 468 | Input/Output: [(28 54 -27 86) -27]
Test Case: 469 | Input/Output: [(-8 -69 55 38) -69]
Test Case: 470 | Input/Output: [(-25 32 -72 -89) -89]
Test Case: 471 | Input/Output: [(61 -83 88 3) -83]
Test Case: 472 | Input/Output: [(2 -42 97 15) -42]
Test Case: 473 | Input/Output: [(12 67 -94 -8) -94]
Test Case: 474 | Input/Output: [(65 -18 -26 29) -26]
Test Case: 475 | Input/Output: [(32 -57 61 85) -57]
Test Case: 476 | Input/Output: [(49 62 87 -75) -75]
Test Case: 477 | Input/Output: [(-93 27 -36 -88) -93]
Test Case: 478 | Input/Output: [(-43 97 42 -11) -43]
Test Case: 479 | Input/Output: [(-16 47 -81 -7) -81]
Test Case: 480 | Input/Output: [(10 53 -37 46) -37]
Test Case: 481 | Input/Output: [(-28 96 -2 32) -28]
Test Case: 482 | Input/Output: [(15 -34 -42 -39) -42]
Test Case: 483 | Input/Output: [(64 -36 93 70) -36]
Test Case: 484 | Input/Output: [(-63 -42 -78 46) -78]
Test Case: 485 | Input/Output: [(-64 -68 6 -17) -68]
Test Case: 486 | Input/Output: [(-24 -13 -62 -64) -64]
Test Case: 487 | Input/Output: [(11 24 -69 29) -69]
Test Case: 488 | Input/Output: [(74 -31 -81 -86) -86]
Test Case: 489 | Input/Output: [(-72 81 -12 -40) -72]
Test Case: 490 | Input/Output: [(47 -33 31 -40) -40]
Test Case: 491 | Input/Output: [(-7 -69 91 24) -69]
Test Case: 492 | Input/Output: [(-33 16 20 65) -33]
Test Case: 493 | Input/Output: [(-90 69 -46 33) -90]
Test Case: 494 | Input/Output: [(96 -78 -77 -21) -78]
Test Case: 495 | Input/Output: [(-100 -92 -52 -28) -100]
Test Case: 496 | Input/Output: [(-16 5 -19 -56) -56]
Test Case: 497 | Input/Output: [(-87 1 -99 -14) -99]
Test Case: 498 | Input/Output: [(100 -82 65 -65) -82]
Test Case: 499 | Input/Output: [(84 -53 -49 -67) -67]
Test Case: 500 | Input/Output: [(-77 17 58 -95) -95]
Test Case: 501 | Input/Output: [(-86 -91 44 -40) -91]
Test Case: 502 | Input/Output: [(58 67 6 -19) -19]
Test Case: 503 | Input/Output: [(-17 41 -29 68) -29]
Test Case: 504 | Input/Output: [(-96 51 -28 -51) -96]
Test Case: 505 | Input/Output: [(-51 32 -14 100) -51]
Test Case: 506 | Input/Output: [(40 -88 -89 -37) -89]
Test Case: 507 | Input/Output: [(59 -40 93 16) -40]
Test Case: 508 | Input/Output: [(-79 -84 33 -16) -84]
Test Case: 509 | Input/Output: [(-58 27 2 -58) -58]
Test Case: 510 | Input/Output: [(-29 71 -98 30) -98]
Test Case: 511 | Input/Output: [(-81 -30 -24 -78) -81]
Test Case: 512 | Input/Output: [(20 -94 67 -43) -94]
Test Case: 513 | Input/Output: [(-84 -86 33 -14) -86]
Test Case: 514 | Input/Output: [(38 60 -13 -51) -51]
Test Case: 515 | Input/Output: [(85 -87 -58 -88) -88]
Test Case: 516 | Input/Output: [(25 -45 -55 54) -55]
Test Case: 517 | Input/Output: [(14 85 -82 -46) -82]
Test Case: 518 | Input/Output: [(-82 27 68 20) -82]
Test Case: 519 | Input/Output: [(-85 -91 -70 -85) -91]
Test Case: 520 | Input/Output: [(12 -8 -99 -73) -99]
Test Case: 521 | Input/Output: [(-14 11 36 -42) -42]
Test Case: 522 | Input/Output: [(-65 61 -68 93) -68]
Test Case: 523 | Input/Output: [(55 -4 50 49) -4]
Test Case: 524 | Input/Output: [(36 -99 -91 6) -99]
Test Case: 525 | Input/Output: [(-97 -61 -23 -14) -97]
Test Case: 526 | Input/Output: [(20 -39 72 -80) -80]
Test Case: 527 | Input/Output: [(-42 71 37 -10) -42]
Test Case: 528 | Input/Output: [(64 -43 -85 -16) -85]
Test Case: 529 | Input/Output: [(-73 79 97 3) -73]
Test Case: 530 | Input/Output: [(-25 -36 39 -25) -36]
Test Case: 531 | Input/Output: [(-48 -75 63 -43) -75]
Test Case: 532 | Input/Output: [(-52 42 97 27) -52]
Test Case: 533 | Input/Output: [(13 88 -59 -83) -83]
Test Case: 534 | Input/Output: [(-39 -37 81 -65) -65]
Test Case: 535 | Input/Output: [(82 -67 -30 -23) -67]
Test Case: 536 | Input/Output: [(34 6 2 58) 2]
Test Case: 537 | Input/Output: [(52 -75 35 0) -75]
Test Case: 538 | Input/Output: [(62 -69 -99 62) -99]
Test Case: 539 | Input/Output: [(-89 -7 -75 71) -89]
Test Case: 540 | Input/Output: [(0 56 40 98) 0]
Test Case: 541 | Input/Output: [(53 -74 29 79) -74]
Test Case: 542 | Input/Output: [(56 -78 -92 78) -92]
Test Case: 543 | Input/Output: [(100 -14 8 -72) -72]
Test Case: 544 | Input/Output: [(60 -6 49 -83) -83]
Test Case: 545 | Input/Output: [(-99 11 -29 20) -99]
Test Case: 546 | Input/Output: [(31 -73 -100 6) -100]
Test Case: 547 | Input/Output: [(21 -6 -20 41) -20]
Test Case: 548 | Input/Output: [(-3 72 -91 20) -91]
Test Case: 549 | Input/Output: [(-31 45 -19 67) -31]
Test Case: 550 | Input/Output: [(70 83 -49 -100) -100]
Test Case: 551 | Input/Output: [(54 -77 15 -18) -77]
Test Case: 552 | Input/Output: [(45 28 56 -26) -26]
Test Case: 553 | Input/Output: [(25 46 -79 69) -79]
Test Case: 554 | Input/Output: [(57 -44 -59 22) -59]
Test Case: 555 | Input/Output: [(-21 58 22 97) -21]
Test Case: 556 | Input/Output: [(-47 100 -29 45) -47]
Test Case: 557 | Input/Output: [(-12 -17 91 94) -17]
Test Case: 558 | Input/Output: [(-75 4 39 5) -75]
Test Case: 559 | Input/Output: [(-97 15 13 94) -97]
Test Case: 560 | Input/Output: [(-77 -93 37 50) -93]
Test Case: 561 | Input/Output: [(-51 39 -30 -87) -87]
Test Case: 562 | Input/Output: [(80 -68 41 93) -68]
Test Case: 563 | Input/Output: [(75 82 -11 -15) -15]
Test Case: 564 | Input/Output: [(17 16 -21 16) -21]
Test Case: 565 | Input/Output: [(-37 23 -65 20) -65]
Test Case: 566 | Input/Output: [(-13 -92 41 -1) -92]
Test Case: 567 | Input/Output: [(-12 10 -16 -91) -91]
Test Case: 568 | Input/Output: [(74 -3 -43 91) -43]
Test Case: 569 | Input/Output: [(-15 -54 -80 -4) -80]
Test Case: 570 | Input/Output: [(-22 -14 -75 -44) -75]
Test Case: 571 | Input/Output: [(44 -28 95 -80) -80]
Test Case: 572 | Input/Output: [(67 96 7 68) 7]
Test Case: 573 | Input/Output: [(38 -81 63 -21) -81]
Test Case: 574 | Input/Output: [(-27 -87 42 9) -87]
Test Case: 575 | Input/Output: [(95 94 61 56) 56]
Test Case: 576 | Input/Output: [(60 -57 -100 -66) -100]
Test Case: 577 | Input/Output: [(48 46 65 -36) -36]
Test Case: 578 | Input/Output: [(-46 20 50 -97) -97]
Test Case: 579 | Input/Output: [(33 -28 46 41) -28]
Test Case: 580 | Input/Output: [(37 -71 1 -37) -71]
Test Case: 581 | Input/Output: [(38 37 -50 38) -50]
Test Case: 582 | Input/Output: [(36 14 95 51) 14]
Test Case: 583 | Input/Output: [(-31 2 -95 63) -95]
Test Case: 584 | Input/Output: [(-84 83 1 -1) -84]
Test Case: 585 | Input/Output: [(16 -4 -58 14) -58]
Test Case: 586 | Input/Output: [(66 17 -1 46) -1]
Test Case: 587 | Input/Output: [(14 45 12 -77) -77]
Test Case: 588 | Input/Output: [(8 97 -28 23) -28]
Test Case: 589 | Input/Output: [(99 7 -14 80) -14]
Test Case: 590 | Input/Output: [(15 33 -54 85) -54]
Test Case: 591 | Input/Output: [(-15 46 -90 60) -90]
Test Case: 592 | Input/Output: [(-41 34 -24 -21) -41]
Test Case: 593 | Input/Output: [(68 91 10 41) 10]
Test Case: 594 | Input/Output: [(86 -75 86 10) -75]
Test Case: 595 | Input/Output: [(-94 40 23 71) -94]
Test Case: 596 | Input/Output: [(77 -22 -12 5) -22]
Test Case: 597 | Input/Output: [(73 15 -5 63) -5]
Test Case: 598 | Input/Output: [(46 62 83 65) 46]
Test Case: 599 | Input/Output: [(80 59 -78 -37) -78]
Test Case: 600 | Input/Output: [(-12 -19 44 58) -19]
Test Case: 601 | Input/Output: [(-10 -3 -20 -1) -20]
Test Case: 602 | Input/Output: [(-98 -95 86 -9) -98]
Test Case: 603 | Input/Output: [(-66 51 -86 -83) -86]
Test Case: 604 | Input/Output: [(-38 -78 21 36) -78]
Test Case: 605 | Input/Output: [(93 60 -13 46) -13]
Test Case: 606 | Input/Output: [(89 -20 39 -19) -20]
Test Case: 607 | Input/Output: [(-45 -60 30 15) -60]
Test Case: 608 | Input/Output: [(62 -14 -90 -86) -90]
Test Case: 609 | Input/Output: [(12 18 73 -63) -63]
Test Case: 610 | Input/Output: [(80 42 -12 24) -12]
Test Case: 611 | Input/Output: [(-51 -59 46 -5) -59]
Test Case: 612 | Input/Output: [(74 -98 -59 -77) -98]
Test Case: 613 | Input/Output: [(47 2 -41 59) -41]
Test Case: 614 | Input/Output: [(-39 -54 26 13) -54]
Test Case: 615 | Input/Output: [(-49 -29 2 -84) -84]
Test Case: 616 | Input/Output: [(-14 49 -62 88) -62]
Test Case: 617 | Input/Output: [(-29 82 -40 -56) -56]
Test Case: 618 | Input/Output: [(-59 16 100 -8) -59]
Test Case: 619 | Input/Output: [(80 -29 80 51) -29]
Test Case: 620 | Input/Output: [(-1 -95 -62 25) -95]
Test Case: 621 | Input/Output: [(-95 -13 -91 -42) -95]
Test Case: 622 | Input/Output: [(-30 77 -4 -30) -30]
Test Case: 623 | Input/Output: [(-44 -52 -71 30) -71]
Test Case: 624 | Input/Output: [(27 -77 -81 -80) -81]
Test Case: 625 | Input/Output: [(43 22 -30 -32) -32]
Test Case: 626 | Input/Output: [(22 -56 -89 -75) -89]
Test Case: 627 | Input/Output: [(-75 32 90 60) -75]
Test Case: 628 | Input/Output: [(20 -71 -81 34) -81]
Test Case: 629 | Input/Output: [(-42 -32 -48 -80) -80]
Test Case: 630 | Input/Output: [(-34 -79 -24 56) -79]
Test Case: 631 | Input/Output: [(33 -45 7 -1) -45]
Test Case: 632 | Input/Output: [(23 79 -98 -4) -98]
Test Case: 633 | Input/Output: [(52 59 90 97) 52]
Test Case: 634 | Input/Output: [(54 -63 -52 81) -63]
Test Case: 635 | Input/Output: [(-88 7 -81 -64) -88]
Test Case: 636 | Input/Output: [(-28 94 55 79) -28]
Test Case: 637 | Input/Output: [(11 27 30 90) 11]
Test Case: 638 | Input/Output: [(100 30 34 38) 30]
Test Case: 639 | Input/Output: [(92 33 40 -96) -96]
Test Case: 640 | Input/Output: [(-77 9 -39 -64) -77]
Test Case: 641 | Input/Output: [(85 93 18 -58) -58]
Test Case: 642 | Input/Output: [(-8 18 23 -58) -58]
Test Case: 643 | Input/Output: [(-47 18 0 -26) -47]
Test Case: 644 | Input/Output: [(-30 -72 -29 -33) -72]
Test Case: 645 | Input/Output: [(-11 55 38 -65) -65]
Test Case: 646 | Input/Output: [(-13 -99 69 95) -99]
Test Case: 647 | Input/Output: [(-15 70 -37 71) -37]
Test Case: 648 | Input/Output: [(95 -75 68 -12) -75]
Test Case: 649 | Input/Output: [(-83 79 60 -33) -83]
Test Case: 650 | Input/Output: [(-19 71 69 45) -19]
Test Case: 651 | Input/Output: [(-100 -65 -71 -99) -100]
Test Case: 652 | Input/Output: [(-62 78 -100 -19) -100]
Test Case: 653 | Input/Output: [(63 24 -83 -3) -83]
Test Case: 654 | Input/Output: [(14 18 -60 -71) -71]
Test Case: 655 | Input/Output: [(-58 -90 -80 85) -90]
Test Case: 656 | Input/Output: [(-46 34 41 52) -46]
Test Case: 657 | Input/Output: [(0 -66 -91 81) -91]
Test Case: 658 | Input/Output: [(-28 59 -84 -65) -84]
Test Case: 659 | Input/Output: [(92 44 -87 -62) -87]
Test Case: 660 | Input/Output: [(-21 -48 -46 -1) -48]
Test Case: 661 | Input/Output: [(19 -79 -83 35) -83]
Test Case: 662 | Input/Output: [(-70 39 69 57) -70]
Test Case: 663 | Input/Output: [(11 -68 -63 -92) -92]
Test Case: 664 | Input/Output: [(-95 7 41 -9) -95]
Test Case: 665 | Input/Output: [(64 17 -23 30) -23]
Test Case: 666 | Input/Output: [(26 13 34 -72) -72]
Test Case: 667 | Input/Output: [(10 -57 1 -73) -73]
Test Case: 668 | Input/Output: [(-39 38 86 -68) -68]
Test Case: 669 | Input/Output: [(65 -12 -43 24) -43]
Test Case: 670 | Input/Output: [(-10 51 -81 24) -81]
Test Case: 671 | Input/Output: [(-1 -92 69 55) -92]
Test Case: 672 | Input/Output: [(94 86 -18 64) -18]
Test Case: 673 | Input/Output: [(-19 -95 30 23) -95]
Test Case: 674 | Input/Output: [(-7 -75 -75 12) -75]
Test Case: 675 | Input/Output: [(58 -19 20 -13) -19]
Test Case: 676 | Input/Output: [(89 75 -26 -73) -73]
Test Case: 677 | Input/Output: [(-57 -32 -76 5) -76]
Test Case: 678 | Input/Output: [(-25 0 -93 53) -93]
Test Case: 679 | Input/Output: [(-44 -68 -79 -4) -79]
Test Case: 680 | Input/Output: [(-39 8 56 56) -39]
Test Case: 681 | Input/Output: [(26 -2 32 87) -2]
Test Case: 682 | Input/Output: [(-60 -90 -72 -53) -90]
Test Case: 683 | Input/Output: [(-67 -4 -69 58) -69]
Test Case: 684 | Input/Output: [(88 86 -79 -19) -79]
Test Case: 685 | Input/Output: [(35 -56 -73 -31) -73]
Test Case: 686 | Input/Output: [(-65 0 -60 -5) -65]
Test Case: 687 | Input/Output: [(-52 -19 33 91) -52]
Test Case: 688 | Input/Output: [(63 98 -28 49) -28]
Test Case: 689 | Input/Output: [(7 -25 37 97) -25]
Test Case: 690 | Input/Output: [(-97 87 -2 -10) -97]
Test Case: 691 | Input/Output: [(-13 -92 79 -35) -92]
Test Case: 692 | Input/Output: [(-54 -76 36 -19) -76]
Test Case: 693 | Input/Output: [(58 18 49 41) 18]
Test Case: 694 | Input/Output: [(0 -33 46 -85) -85]
Test Case: 695 | Input/Output: [(7 95 73 -80) -80]
Test Case: 696 | Input/Output: [(-63 -63 89 59) -63]
Test Case: 697 | Input/Output: [(25 -64 18 62) -64]
Test Case: 698 | Input/Output: [(66 -100 26 18) -100]
Test Case: 699 | Input/Output: [(-21 85 33 81) -21]
Test Case: 700 | Input/Output: [(-82 -77 14 66) -82]
Test Case: 701 | Input/Output: [(39 70 30 0) 0]
Test Case: 702 | Input/Output: [(-9 60 -8 2) -9]
Test Case: 703 | Input/Output: [(94 16 79 -67) -67]
Test Case: 704 | Input/Output: [(-14 -74 58 -55) -74]
Test Case: 705 | Input/Output: [(82 -11 47 -13) -13]
Test Case: 706 | Input/Output: [(49 -18 59 -68) -68]
Test Case: 707 | Input/Output: [(-46 50 26 -66) -66]
Test Case: 708 | Input/Output: [(9 -13 -39 18) -39]
Test Case: 709 | Input/Output: [(62 33 13 98) 13]
Test Case: 710 | Input/Output: [(-76 -78 -52 -14) -78]
Test Case: 711 | Input/Output: [(-59 31 11 -9) -59]
Test Case: 712 | Input/Output: [(-93 -84 2 -34) -93]
Test Case: 713 | Input/Output: [(49 -72 -15 55) -72]
Test Case: 714 | Input/Output: [(-70 32 -19 42) -70]
Test Case: 715 | Input/Output: [(68 57 -22 8) -22]
Test Case: 716 | Input/Output: [(94 50 -6 3) -6]
Test Case: 717 | Input/Output: [(-15 -10 -78 92) -78]
Test Case: 718 | Input/Output: [(45 -19 82 -54) -54]
Test Case: 719 | Input/Output: [(99 -92 -5 -90) -92]
Test Case: 720 | Input/Output: [(-22 61 -16 20) -22]
Test Case: 721 | Input/Output: [(-21 -33 79 70) -33]
Test Case: 722 | Input/Output: [(81 -8 28 73) -8]
Test Case: 723 | Input/Output: [(-92 -96 94 94) -96]
Test Case: 724 | Input/Output: [(100 55 -24 97) -24]
Test Case: 725 | Input/Output: [(85 -78 -24 64) -78]
Test Case: 726 | Input/Output: [(15 76 78 21) 15]
Test Case: 727 | Input/Output: [(-89 1 -77 72) -89]
Test Case: 728 | Input/Output: [(18 -4 -33 -12) -33]
Test Case: 729 | Input/Output: [(-72 26 -58 -19) -72]
Test Case: 730 | Input/Output: [(51 -91 -51 77) -91]
Test Case: 731 | Input/Output: [(-99 74 -38 -39) -99]
Test Case: 732 | Input/Output: [(25 -92 -32 -21) -92]
Test Case: 733 | Input/Output: [(87 98 45 -91) -91]
Test Case: 734 | Input/Output: [(90 -88 -10 -87) -88]
Test Case: 735 | Input/Output: [(78 34 -46 53) -46]
Test Case: 736 | Input/Output: [(-4 -20 92 15) -20]
Test Case: 737 | Input/Output: [(-93 -8 83 47) -93]
Test Case: 738 | Input/Output: [(-56 42 -46 -39) -56]
Test Case: 739 | Input/Output: [(31 -9 -91 90) -91]
Test Case: 740 | Input/Output: [(60 1 -20 51) -20]
Test Case: 741 | Input/Output: [(69 56 37 99) 37]
Test Case: 742 | Input/Output: [(84 -96 3 52) -96]
Test Case: 743 | Input/Output: [(33 1 -43 35) -43]
Test Case: 744 | Input/Output: [(54 -47 -48 -95) -95]
Test Case: 745 | Input/Output: [(-88 24 -91 -41) -91]
Test Case: 746 | Input/Output: [(85 -5 67 54) -5]
Test Case: 747 | Input/Output: [(-9 -28 -8 88) -28]
Test Case: 748 | Input/Output: [(93 -77 -86 -90) -90]
Test Case: 749 | Input/Output: [(-16 10 84 -49) -49]
Test Case: 750 | Input/Output: [(-50 35 82 -73) -73]
Test Case: 751 | Input/Output: [(-46 6 -9 96) -46]
Test Case: 752 | Input/Output: [(72 87 -28 65) -28]
Test Case: 753 | Input/Output: [(97 84 -60 46) -60]
Test Case: 754 | Input/Output: [(-2 74 91 25) -2]
Test Case: 755 | Input/Output: [(-45 -24 92 -2) -45]
Test Case: 756 | Input/Output: [(-11 99 -12 44) -12]
Test Case: 757 | Input/Output: [(-98 15 2 72) -98]
Test Case: 758 | Input/Output: [(37 52 -13 -45) -45]
Test Case: 759 | Input/Output: [(99 -88 -87 90) -88]
Test Case: 760 | Input/Output: [(-44 99 93 56) -44]
Test Case: 761 | Input/Output: [(-46 -54 49 52) -54]
Test Case: 762 | Input/Output: [(-92 -66 -70 15) -92]
Test Case: 763 | Input/Output: [(74 -82 64 -89) -89]
Test Case: 764 | Input/Output: [(54 -71 -28 83) -71]
Test Case: 765 | Input/Output: [(35 70 -94 -66) -94]
Test Case: 766 | Input/Output: [(-14 -38 -16 -71) -71]
Test Case: 767 | Input/Output: [(81 -43 4 4) -43]
Test Case: 768 | Input/Output: [(-40 -43 69 16) -43]
Test Case: 769 | Input/Output: [(-66 18 51 68) -66]
Test Case: 770 | Input/Output: [(58 37 -49 -60) -60]
Test Case: 771 | Input/Output: [(-85 -51 -74 -96) -96]
Test Case: 772 | Input/Output: [(86 68 -32 -96) -96]
Test Case: 773 | Input/Output: [(78 -67 -88 -27) -88]
Test Case: 774 | Input/Output: [(-14 -66 73 82) -66]
Test Case: 775 | Input/Output: [(71 -83 1 74) -83]
Test Case: 776 | Input/Output: [(91 -57 10 -32) -57]
Test Case: 777 | Input/Output: [(16 68 12 -7) -7]
Test Case: 778 | Input/Output: [(-57 -59 -82 77) -82]
Test Case: 779 | Input/Output: [(27 -91 -71 -59) -91]
Test Case: 780 | Input/Output: [(67 81 -67 -64) -67]
Test Case: 781 | Input/Output: [(-80 -46 8 -73) -80]
Test Case: 782 | Input/Output: [(-29 -14 -97 -5) -97]
Test Case: 783 | Input/Output: [(-57 -84 -82 -65) -84]
Test Case: 784 | Input/Output: [(1 -100 -20 21) -100]
Test Case: 785 | Input/Output: [(62 87 38 69) 38]
Test Case: 786 | Input/Output: [(-98 51 -23 15) -98]
Test Case: 787 | Input/Output: [(75 -69 61 -52) -69]
Test Case: 788 | Input/Output: [(98 -28 95 30) -28]
Test Case: 789 | Input/Output: [(29 100 89 -74) -74]
Test Case: 790 | Input/Output: [(88 -6 -53 -13) -53]
Test Case: 791 | Input/Output: [(-93 -96 28 72) -96]
Test Case: 792 | Input/Output: [(40 77 75 -82) -82]
Test Case: 793 | Input/Output: [(-89 -69 55 45) -89]
Test Case: 794 | Input/Output: [(-52 -79 -80 -46) -80]
Test Case: 795 | Input/Output: [(-6 86 24 -76) -76]
Test Case: 796 | Input/Output: [(-87 -90 -1 -57) -90]
Test Case: 797 | Input/Output: [(80 -89 49 -57) -89]
Test Case: 798 | Input/Output: [(77 5 13 -17) -17]
Test Case: 799 | Input/Output: [(-25 27 85 -7) -25]
Test Case: 800 | Input/Output: [(-92 -95 -50 6) -95]
Test Case: 801 | Input/Output: [(19 94 45 54) 19]
Test Case: 802 | Input/Output: [(-32 37 -30 50) -32]
Test Case: 803 | Input/Output: [(93 -15 64 41) -15]
Test Case: 804 | Input/Output: [(-89 -30 81 95) -89]
Test Case: 805 | Input/Output: [(41 97 73 14) 14]
Test Case: 806 | Input/Output: [(-38 -46 -64 -60) -64]
Test Case: 807 | Input/Output: [(78 86 -73 -37) -73]
Test Case: 808 | Input/Output: [(35 -97 31 -37) -97]
Test Case: 809 | Input/Output: [(-70 -6 -80 -32) -80]
Test Case: 810 | Input/Output: [(-42 98 100 13) -42]
Test Case: 811 | Input/Output: [(15 40 18 -5) -5]
Test Case: 812 | Input/Output: [(86 -38 5 82) -38]
Test Case: 813 | Input/Output: [(91 -55 50 -11) -55]
Test Case: 814 | Input/Output: [(7 -99 -10 -1) -99]
Test Case: 815 | Input/Output: [(-87 -47 -40 -61) -87]
Test Case: 816 | Input/Output: [(-49 -47 64 94) -49]
Test Case: 817 | Input/Output: [(99 48 100 -97) -97]
Test Case: 818 | Input/Output: [(78 -80 77 -69) -80]
Test Case: 819 | Input/Output: [(98 -32 -31 85) -32]
Test Case: 820 | Input/Output: [(-24 -6 -55 4) -55]
Test Case: 821 | Input/Output: [(-32 -85 -81 -44) -85]
Test Case: 822 | Input/Output: [(-2 -37 -1 -53) -53]
Test Case: 823 | Input/Output: [(-44 85 -76 -31) -76]
Test Case: 824 | Input/Output: [(-11 90 -66 -41) -66]
Test Case: 825 | Input/Output: [(-86 -42 -97 -7) -97]
Test Case: 826 | Input/Output: [(-8 -98 -72 76) -98]
Test Case: 827 | Input/Output: [(-89 9 -58 76) -89]
Test Case: 828 | Input/Output: [(-58 -48 -26 52) -58]
Test Case: 829 | Input/Output: [(-10 40 -62 -39) -62]
Test Case: 830 | Input/Output: [(-58 -22 79 -40) -58]
Test Case: 831 | Input/Output: [(36 -91 39 20) -91]
Test Case: 832 | Input/Output: [(27 -75 -91 92) -91]
Test Case: 833 | Input/Output: [(86 -25 43 96) -25]
Test Case: 834 | Input/Output: [(30 -38 -34 -20) -38]
Test Case: 835 | Input/Output: [(35 -23 -36 24) -36]
Test Case: 836 | Input/Output: [(-56 46 95 -9) -56]
Test Case: 837 | Input/Output: [(56 -2 97 -33) -33]
Test Case: 838 | Input/Output: [(-97 -91 47 -30) -97]
Test Case: 839 | Input/Output: [(73 57 48 83) 48]
Test Case: 840 | Input/Output: [(-63 53 97 -43) -63]
Test Case: 841 | Input/Output: [(30 33 -69 -5) -69]
Test Case: 842 | Input/Output: [(8 21 70 26) 8]
Test Case: 843 | Input/Output: [(-81 -92 52 72) -92]
Test Case: 844 | Input/Output: [(-33 77 1 81) -33]
Test Case: 845 | Input/Output: [(-56 -73 -66 -73) -73]
Test Case: 846 | Input/Output: [(4 -95 35 -84) -95]
Test Case: 847 | Input/Output: [(-27 53 20 96) -27]
Test Case: 848 | Input/Output: [(95 -13 65 -54) -54]
Test Case: 849 | Input/Output: [(79 -87 -21 94) -87]
Test Case: 850 | Input/Output: [(43 -94 43 -85) -94]
Test Case: 851 | Input/Output: [(-32 -68 85 -32) -68]
Test Case: 852 | Input/Output: [(-53 -38 89 42) -53]
Test Case: 853 | Input/Output: [(84 55 35 -69) -69]
Test Case: 854 | Input/Output: [(21 98 60 53) 21]
Test Case: 855 | Input/Output: [(5 89 -82 -89) -89]
Test Case: 856 | Input/Output: [(-7 -29 50 -78) -78]
Test Case: 857 | Input/Output: [(-27 -68 -55 -63) -68]
Test Case: 858 | Input/Output: [(11 -42 -32 10) -42]
Test Case: 859 | Input/Output: [(-44 -52 45 51) -52]
Test Case: 860 | Input/Output: [(31 -15 -88 6) -88]
Test Case: 861 | Input/Output: [(19 33 97 55) 19]
Test Case: 862 | Input/Output: [(-30 -87 -6 41) -87]
Test Case: 863 | Input/Output: [(-84 -19 -26 -75) -84]
Test Case: 864 | Input/Output: [(24 -31 -95 -47) -95]
Test Case: 865 | Input/Output: [(9 -33 95 3) -33]
Test Case: 866 | Input/Output: [(-17 95 6 -90) -90]
Test Case: 867 | Input/Output: [(-47 -39 -47 -40) -47]
Test Case: 868 | Input/Output: [(-95 70 -97 16) -97]
Test Case: 869 | Input/Output: [(-9 85 -21 -88) -88]
Test Case: 870 | Input/Output: [(-58 -99 96 14) -99]
Test Case: 871 | Input/Output: [(-73 30 94 -12) -73]
Test Case: 872 | Input/Output: [(40 -29 83 81) -29]
Test Case: 873 | Input/Output: [(73 -87 -16 62) -87]
Test Case: 874 | Input/Output: [(-52 -95 54 88) -95]
Test Case: 875 | Input/Output: [(-9 -61 39 -16) -61]
Test Case: 876 | Input/Output: [(70 26 95 -80) -80]
Test Case: 877 | Input/Output: [(69 -80 -84 -8) -84]
Test Case: 878 | Input/Output: [(-89 -32 82 36) -89]
Test Case: 879 | Input/Output: [(43 -53 -5 -88) -88]
Test Case: 880 | Input/Output: [(-26 -37 97 -3) -37]
Test Case: 881 | Input/Output: [(58 12 -98 82) -98]
Test Case: 882 | Input/Output: [(-98 -15 -68 27) -98]
Test Case: 883 | Input/Output: [(-67 60 -67 -9) -67]
Test Case: 884 | Input/Output: [(-34 -44 40 -37) -44]
Test Case: 885 | Input/Output: [(-6 59 -30 91) -30]
Test Case: 886 | Input/Output: [(-81 54 11 56) -81]
Test Case: 887 | Input/Output: [(-100 74 27 -30) -100]
Test Case: 888 | Input/Output: [(32 61 -2 -4) -4]
Test Case: 889 | Input/Output: [(-64 18 88 -67) -67]
Test Case: 890 | Input/Output: [(4 -36 -69 -21) -69]
Test Case: 891 | Input/Output: [(67 88 37 -47) -47]
Test Case: 892 | Input/Output: [(5 -37 -25 -68) -68]
Test Case: 893 | Input/Output: [(26 -26 -26 22) -26]
Test Case: 894 | Input/Output: [(74 -84 -98 -19) -98]
Test Case: 895 | Input/Output: [(28 -76 0 87) -76]
Test Case: 896 | Input/Output: [(-44 -94 39 100) -94]
Test Case: 897 | Input/Output: [(70 -9 -84 97) -84]
Test Case: 898 | Input/Output: [(-12 -100 -58 18) -100]
Test Case: 899 | Input/Output: [(41 61 84 -75) -75]
Test Case: 900 | Input/Output: [(-93 -47 -87 21) -93]
Test Case: 901 | Input/Output: [(-88 53 -13 58) -88]
Test Case: 902 | Input/Output: [(-15 -46 -33 -5) -46]
Test Case: 903 | Input/Output: [(65 -87 -29 67) -87]
Test Case: 904 | Input/Output: [(35 96 -95 83) -95]
Test Case: 905 | Input/Output: [(81 85 15 -47) -47]
Test Case: 906 | Input/Output: [(35 75 -12 60) -12]
Test Case: 907 | Input/Output: [(34 -46 60 25) -46]
Test Case: 908 | Input/Output: [(-95 -12 -62 -30) -95]
Test Case: 909 | Input/Output: [(-73 -13 -14 -15) -73]
Test Case: 910 | Input/Output: [(67 -23 91 36) -23]
Test Case: 911 | Input/Output: [(-66 -76 -75 -7) -76]
Test Case: 912 | Input/Output: [(-42 62 31 19) -42]
Test Case: 913 | Input/Output: [(-9 -51 -34 32) -51]
Test Case: 914 | Input/Output: [(-32 -91 -18 -20) -91]
Test Case: 915 | Input/Output: [(3 62 -1 25) -1]
Test Case: 916 | Input/Output: [(-11 79 34 -89) -89]
Test Case: 917 | Input/Output: [(-77 8 30 -86) -86]
Test Case: 918 | Input/Output: [(46 -100 18 58) -100]
Test Case: 919 | Input/Output: [(68 49 -26 39) -26]
Test Case: 920 | Input/Output: [(-57 6 -8 -94) -94]
Test Case: 921 | Input/Output: [(99 52 -58 -39) -58]
Test Case: 922 | Input/Output: [(-77 71 -77 -37) -77]
Test Case: 923 | Input/Output: [(-21 -12 -13 -25) -25]
Test Case: 924 | Input/Output: [(-72 97 -17 44) -72]
Test Case: 925 | Input/Output: [(10 -58 4 -61) -61]
Test Case: 926 | Input/Output: [(45 -78 -53 74) -78]
Test Case: 927 | Input/Output: [(94 -50 -13 -18) -50]
Test Case: 928 | Input/Output: [(-58 12 97 -16) -58]
Test Case: 929 | Input/Output: [(21 43 39 -82) -82]
Test Case: 930 | Input/Output: [(-77 30 -7 -9) -77]
Test Case: 931 | Input/Output: [(60 55 -37 5) -37]
Test Case: 932 | Input/Output: [(-92 46 43 -49) -92]
Test Case: 933 | Input/Output: [(-36 85 -100 -13) -100]
Test Case: 934 | Input/Output: [(64 18 -76 -55) -76]
Test Case: 935 | Input/Output: [(80 -46 42 1) -46]
Test Case: 936 | Input/Output: [(-22 -27 22 13) -27]
Test Case: 937 | Input/Output: [(15 40 20 -45) -45]
Test Case: 938 | Input/Output: [(92 97 95 0) 0]
Test Case: 939 | Input/Output: [(56 0 10 -58) -58]
Test Case: 940 | Input/Output: [(-40 92 89 60) -40]
Test Case: 941 | Input/Output: [(62 -7 -65 22) -65]
Test Case: 942 | Input/Output: [(-30 -100 -18 1) -100]
Test Case: 943 | Input/Output: [(40 9 -32 -72) -72]
Test Case: 944 | Input/Output: [(3 0 -16 70) -16]
Test Case: 945 | Input/Output: [(75 34 -41 -86) -86]
Test Case: 946 | Input/Output: [(84 -45 65 49) -45]
Test Case: 947 | Input/Output: [(38 -95 -34 -21) -95]
Test Case: 948 | Input/Output: [(31 72 -53 38) -53]
Test Case: 949 | Input/Output: [(10 67 80 5) 5]
Test Case: 950 | Input/Output: [(1 -42 36 30) -42]
Test Case: 951 | Input/Output: [(98 -44 21 37) -44]
Test Case: 952 | Input/Output: [(11 -77 -5 38) -77]
Test Case: 953 | Input/Output: [(-92 23 66 -32) -92]
Test Case: 954 | Input/Output: [(27 -14 -95 -25) -95]
Test Case: 955 | Input/Output: [(-33 14 7 42) -33]
Test Case: 956 | Input/Output: [(-19 40 82 -9) -19]
Test Case: 957 | Input/Output: [(-9 -60 73 -5) -60]
Test Case: 958 | Input/Output: [(91 61 25 20) 20]
Test Case: 959 | Input/Output: [(31 94 -88 8) -88]
Test Case: 960 | Input/Output: [(-94 -86 68 21) -94]
Test Case: 961 | Input/Output: [(-73 38 -4 -55) -73]
Test Case: 962 | Input/Output: [(52 -96 -81 8) -96]
Test Case: 963 | Input/Output: [(38 -79 -39 -94) -94]
Test Case: 964 | Input/Output: [(-10 40 -84 -26) -84]
Test Case: 965 | Input/Output: [(95 -53 20 -99) -99]
Test Case: 966 | Input/Output: [(-34 85 68 0) -34]
Test Case: 967 | Input/Output: [(15 -7 -23 -5) -23]
Test Case: 968 | Input/Output: [(-91 -38 9 -13) -91]
Test Case: 969 | Input/Output: [(-1 -5 54 -13) -13]
Test Case: 970 | Input/Output: [(36 37 -18 -81) -81]
Test Case: 971 | Input/Output: [(-84 31 63 -28) -84]
Test Case: 972 | Input/Output: [(41 97 35 30) 30]
Test Case: 973 | Input/Output: [(90 -60 69 86) -60]
Test Case: 974 | Input/Output: [(17 -99 -57 -98) -99]
Test Case: 975 | Input/Output: [(72 68 -19 62) -19]
Test Case: 976 | Input/Output: [(6 53 88 69) 6]
Test Case: 977 | Input/Output: [(-31 33 80 -31) -31]
Test Case: 978 | Input/Output: [(62 -42 -14 -43) -43]
Test Case: 979 | Input/Output: [(26 -3 -97 89) -97]
Test Case: 980 | Input/Output: [(9 -62 0 -41) -62]
Test Case: 981 | Input/Output: [(82 -45 -87 43) -87]
Test Case: 982 | Input/Output: [(3 -51 97 -92) -92]
Test Case: 983 | Input/Output: [(-90 16 20 9) -90]
Test Case: 984 | Input/Output: [(90 33 -88 -7) -88]
Test Case: 985 | Input/Output: [(40 -22 41 3) -22]
Test Case: 986 | Input/Output: [(34 61 -60 93) -60]
Test Case: 987 | Input/Output: [(-45 95 25 -57) -57]
Test Case: 988 | Input/Output: [(-14 38 63 -68) -68]
Test Case: 989 | Input/Output: [(82 -87 -49 74) -87]
Test Case: 990 | Input/Output: [(-77 35 61 79) -77]
Test Case: 991 | Input/Output: [(-99 79 -25 -69) -99]
Test Case: 992 | Input/Output: [(97 62 82 33) 33]
Test Case: 993 | Input/Output: [(-48 32 56 79) -48]
Test Case: 994 | Input/Output: [(-62 24 -92 -43) -92]
Test Case: 995 | Input/Output: [(36 -9 59 -10) -10]
Test Case: 996 | Input/Output: [(-52 52 -64 -62) -64]
Test Case: 997 | Input/Output: [(-85 -27 61 5) -85]
Test Case: 998 | Input/Output: [(67 1 -2 -37) -37]
Test Case: 999 | Input/Output: [(30 -80 21 89) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 103 -117 -67 -41 -21 120 103 -90 124 -36 -33 -103 60 -51 115 109
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-60 -60 -17 -60] -60] [[-34 -1 -1 -1] -34] [[42 42 42 32] 32] [[-60 -60 83 -60] -60] [[-98 92 92 92] -98] [[-75 -75 -75 -32] -75] [[36 36 -38 36] -38] [[28 28 28 92] 28] [[8 8 8 90] 8] [[-42 -42 -42 58] -42] [(-27 -27 -27 -27) -27] [(46 46 46 46) 46] [(90 90 90 90) 90] [(94 94 94 94) 94] [(-58 -58 -58 -58) -58] [(94 34 77 78) 34] [(64 2 51 21) 2] [(56 2 77 25) 2] [(90 71 94 38) 38] [(78 98 4 88) 4] [(6 7 80 11) 6] [(39 33 25 77) 25] [(100 61 39 60) 39] [(69 72 27 79) 27] [(84 13 12 50) 12] [(53 34 19 34) 19] [(50 67 34 93) 34] [(60 18 18 49) 18] [(85 21 45 90) 21] [(11 64 57 75) 11] [(90 16 22 88) 16] [(68 89 41 94) 41] [(63 28 94 100) 28] [(52 76 96 88) 52] [(10 73 86 64) 10] [(-14 -20 -84 -25) -84] [(-28 9 22 -61) -61] [(87 25 -43 -100) -100] [(3 70 26 -65) -65] [(-64 -40 57 74) -64] [(80 63 -37 -42) -42] [(59 67 53 -32) -32] [(-11 93 81 -20) -20] [(-96 62 -17 36) -96] [(5 -53 -58 9) -58] [(85 54 57 13) 13] [(-73 -21 54 38) -73] [(58 14 -10 -68) -68] [(38 17 -34 20) -34] [(-38 -34 -3 100) -38] [(-96 89 -77 -43) -96] [(-88 -90 42 -24) -90] [(-83 78 -28 17) -83] [(-48 94 -91 -66) -91] [(-41 13 -61 49) -61] [(77 -45 78 52) -45] [(-85 -22 -13 -97) -97] [(70 -87 57 -56) -87] [(12 -37 -59 72) -59] [(-40 99 -89 -35) -89] [(-76 -29 -35 -14) -76] [(-73 -58 -45 74) -73] [(67 58 29 -64) -64] [(82 -61 -98 100) -98] [(-81 -67 83 41) -81] [(-72 59 76 -50) -72] [(-87 -74 -90 -2) -90] [(35 -77 -94 -54) -94] [(20 57 45 -8) -8] [(75 -31 48 -77) -77] [(-35 12 55 -54) -54] [(71 -2 -47 -64) -64] [(-42 58 81 84) -42] [(-50 -100 -42 91) -100] [(-64 -77 93 -4) -77] [(-19 27 -56 -53) -56] [(91 56 -23 76) -23] [(-65 53 50 -100) -100] [(-34 -5 -62 -90) -90] [(69 38 86 31) 31] [(92 -19 22 42) -19] [(-37 -18 -7 26) -37] [(20 18 -26 23) -26] [(-87 -1 -80 -60) -87] [(95 -96 29 97) -96] [(-22 -80 99 -91) -91] [(-48 -62 20 37) -62] [(-10 19 -33 -98) -98] [(-58 -96 -18 -66) -96] [(-89 -87 74 -89) -89] [(-17 -88 -57 -24) -88] [(-15 -24 84 31) -24] [(-70 3 -37 -90) -90] [(64 -18 77 -72) -72] [(100 23 98 -4) -4])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -17                
Correct output: -34                 | Program output: -1                 
Correct output: 32                  | Program output: 42                 
Correct output: -60                 | Program output: 83                 
Correct output: -98                 | Program output: 92                 
Correct output: -75                 | Program output: -75                
Correct output: -38                 | Program output: -38                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -42                 | Program output: -42                
Correct output: -27                 | Program output: -27                
Correct output: 46                  | Program output: 46                 
Correct output: 90                  | Program output: 90                 
Correct output: 94                  | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 77                 
Correct output: 2                   | Program output: 51                 
Correct output: 2                   | Program output: 77                 
Correct output: 38                  | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 80                 
Correct output: 25                  | Program output: 25                 
Correct output: 39                  | Program output: 39                 
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 45                 
Correct output: 11                  | Program output: 57                 
Correct output: 16                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 28                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 10                  | Program output: 86                 
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: 22                 
Correct output: -100                | Program output: -43                
Correct output: -65                 | Program output: 26                 
Correct output: -64                 | Program output: 57                 
Correct output: -42                 | Program output: -37                
Correct output: -32                 | Program output: 53                 
Correct output: -20                 | Program output: 81                 
Correct output: -96                 | Program output: -17                
Correct output: -58                 | Program output: -58                
Correct output: 13                  | Program output: 57                 
Correct output: -73                 | Program output: 54                 
Correct output: -68                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -3                 
Correct output: -96                 | Program output: -77                
Correct output: -90                 | Program output: 42                 
Correct output: -83                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -45                 | Program output: 78                 
Correct output: -97                 | Program output: -13                
Correct output: -87                 | Program output: 57                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -35                
Correct output: -73                 | Program output: -45                
Correct output: -64                 | Program output: 29                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: 83                 
Correct output: -72                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 45                 
Correct output: -77                 | Program output: 48                 
Correct output: -54                 | Program output: 55                 
Correct output: -64                 | Program output: -47                
Correct output: -42                 | Program output: 81                 
Correct output: -100                | Program output: -42                
Correct output: -77                 | Program output: 93                 
Correct output: -56                 | Program output: -56                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: 50                 
Correct output: -90                 | Program output: -62                
Correct output: 31                  | Program output: 86                 
Correct output: -19                 | Program output: 22                 
Correct output: -37                 | Program output: -7                 
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -80                
Correct output: -96                 | Program output: 29                 
Correct output: -91                 | Program output: 99                 
Correct output: -62                 | Program output: 20                 
Correct output: -98                 | Program output: -33                
Correct output: -96                 | Program output: -18                
Correct output: -89                 | Program output: 74                 
Correct output: -88                 | Program output: -57                
Correct output: -24                 | Program output: 84                 
Correct output: -90                 | Program output: -37                
Correct output: -72                 | Program output: 77                 
Correct output: -4                  | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_108} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_dec exec_dup_items exec_k_when_autoconstructing (integer_add integer_gt) (boolean_invert_second_then_and) in3 exec_y_when_autoconstructing (in2 integer_yankdup print_integer tag_exec_108 () boolean_eq boolean_not boolean_and integer_stackdepth integer_sub exec_y_when_autoconstructing () integer_dup_times integer_dup) integer_gte)
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_108} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_dec exec_dup_items exec_k_when_autoconstructing (integer_add integer_gt) (boolean_invert_second_then_and) in3 exec_y_when_autoconstructing (in2 integer_yankdup print_integer tag_exec_108 () boolean_eq boolean_not boolean_and integer_stackdepth integer_sub exec_y_when_autoconstructing () integer_dup_times integer_dup) integer_gte)
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 3 7 7 3 3 3 1 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (6 3 7 7 3 3 3 1 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction -33} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 40} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_boolean_242} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count})
Best program: (exec_shove (boolean_dup_times boolean_flush integer_dup_items integer_eq exec_do*times (integer_mod) boolean_swap exec_empty boolean_dup_items) integer_mod in4 integer_mod boolean_pop in3 boolean_shove print_integer integer_flush print_integer integer_add exec_flush boolean_yank in3 exec_k_when_autoconstructing (exec_while (exec_do*times () in1 integer_dup boolean_yankdup integer_rot -33 boolean_pop) integer_lt boolean_or exec_yank exec_while (exec_k (in1 exec_k (exec_do*times (exec_shove () exec_y_when_autoconstructing (integer_flush boolean_dup exec_dup_times (40) integer_lte print_boolean integer_min in1) integer_dup_times integer_gte exec_s_when_autoconstructing (tag_boolean_242) (exec_while (boolean_swap) integer_empty print_boolean exec_while (integer_gt integer_pop integer_gte integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove exec_y_when_autoconstructing (boolean_rot boolean_or boolean_dup print_boolean integer_rot) boolean_not integer_yankdup) (integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_shove integer_eq exec_y_when_autoconstructing () boolean_frominteger) in1 boolean_empty exec_s_when_autoconstructing () (integer_div exec_do*count ()) ()) ()) ())) ())
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 90
Size: 118
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 9.961
Median total errors in population: 10
Error averages by case: (0.994 0.997 0.993 0.993 0.997 0.997 0.997 0.999 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.452
Average program size in population (points): 69.298
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 461414
--- Timings ---
Current time: 1559593871795 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 26.9%
Fitness Testing:      1.8 seconds, 69.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: 32                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -38                 | Program output: 36                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -42                 | Program output: -42                
Correct output: -27                 | Program output: -27                
Correct output: 46                  | Program output: 46                 
Correct output: 90                  | Program output: 90                 
Correct output: 94                  | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 94                 
Correct output: 2                   | Program output: 64                 
Correct output: 2                   | Program output: 56                 
Correct output: 38                  | Program output: 90                 
Correct output: 4                   | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 39                 
Correct output: 39                  | Program output: 100                
Correct output: 27                  | Program output: 69                 
Correct output: 12                  | Program output: 84                 
Correct output: 19                  | Program output: 53                 
Correct output: 34                  | Program output: 50                 
Correct output: 18                  | Program output: 60                 
Correct output: 21                  | Program output: 85                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 90                 
Correct output: 41                  | Program output: 68                 
Correct output: 28                  | Program output: 63                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: -84                 | Program output: -14                
Correct output: -61                 | Program output: -28                
Correct output: -100                | Program output: 87                 
Correct output: -65                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: 80                 
Correct output: -32                 | Program output: 59                 
Correct output: -20                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: 5                  
Correct output: 13                  | Program output: 85                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: 58                 
Correct output: -34                 | Program output: 38                 
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -91                 | Program output: -48                
Correct output: -61                 | Program output: -41                
Correct output: -45                 | Program output: 77                 
Correct output: -97                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -59                 | Program output: 12                 
Correct output: -89                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 67                 
Correct output: -98                 | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -87                
Correct output: -94                 | Program output: 35                 
Correct output: -8                  | Program output: 20                 
Correct output: -77                 | Program output: 75                 
Correct output: -54                 | Program output: -35                
Correct output: -64                 | Program output: 71                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -50                
Correct output: -77                 | Program output: -64                
Correct output: -56                 | Program output: -19                
Correct output: -23                 | Program output: 91                 
Correct output: -100                | Program output: -65                
Correct output: -90                 | Program output: -34                
Correct output: 31                  | Program output: 69                 
Correct output: -19                 | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -26                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 95                 
Correct output: -91                 | Program output: -22                
Correct output: -62                 | Program output: -48                
Correct output: -98                 | Program output: -10                
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -17                
Correct output: -24                 | Program output: -15                
Correct output: -90                 | Program output: -70                
Correct output: -72                 | Program output: 64                 
Correct output: -4                  | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_416} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_590} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction -41} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_yankdup boolean_or boolean_swap exec_pop () integer_rot in1 boolean_eq exec_pop () integer_swap print_integer integer_stackdepth integer_max exec_yank exec_dup (integer_dup) tag_exec_694 (exec_yankdup) boolean_empty exec_y () integer_mult integer_lt integer_yank exec_swap (integer_eq integer_max tagged_416 in1) (print_exec (exec_shove (boolean_dup_items exec_do*count (in4 boolean_empty exec_k (tag_exec_590 () integer_dup_items integer_div exec_swap (exec_swap (exec_when () integer_dec) (integer_stackdepth boolean_or boolean_dup boolean_dup_times print_boolean) boolean_eq exec_y () boolean_dup_times) (boolean_and integer_lte print_exec () boolean_invert_first_then_and integer_swap integer_rot integer_gt integer_shove) exec_dup (integer_min) exec_do*range (integer_inc -41) exec_yank print_integer boolean_or integer_empty boolean_yankdup boolean_stackdepth boolean_dup exec_pop (boolean_invert_second_then_and exec_noop) boolean_yankdup boolean_flush exec_k (boolean_not boolean_swap exec_y_when_autoconstructing (integer_stackdepth boolean_not integer_empty integer_add) boolean_yankdup) (exec_k_when_autoconstructing () (boolean_swap exec_noop exec_yank integer_pop)) print_newline exec_shove (print_exec (integer_add) exec_s (exec_eq boolean_yankdup) () ())) ())))))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 129
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_416} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_590} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction -41} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_yankdup boolean_or boolean_swap exec_pop () integer_rot in1 boolean_eq exec_pop () integer_swap print_integer integer_stackdepth integer_max exec_yank exec_dup (integer_dup) tag_exec_694 (exec_yankdup) boolean_empty exec_y () integer_mult integer_lt integer_yank exec_swap (integer_eq integer_max tagged_416 in1) (print_exec (exec_shove (boolean_dup_items exec_do*count (in4 boolean_empty exec_k (tag_exec_590 () integer_dup_items integer_div exec_swap (exec_swap (exec_when () integer_dec) (integer_stackdepth boolean_or boolean_dup boolean_dup_times print_boolean) boolean_eq exec_y () boolean_dup_times) (boolean_and integer_lte print_exec () boolean_invert_first_then_and integer_swap integer_rot integer_gt integer_shove) exec_dup (integer_min) exec_do*range (integer_inc -41) exec_yank print_integer boolean_or integer_empty boolean_yankdup boolean_stackdepth boolean_dup exec_pop (boolean_invert_second_then_and exec_noop) boolean_yankdup boolean_flush exec_k (boolean_not boolean_swap exec_y_when_autoconstructing (integer_stackdepth boolean_not integer_empty integer_add) boolean_yankdup) (exec_k_when_autoconstructing () (boolean_swap exec_noop exec_yank integer_pop)) print_newline exec_shove (print_exec (integer_add) exec_s (exec_eq boolean_yankdup) () ())) ())))))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 129
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (611 291 74 291 67 67 69 84 297 67)
Population mean number of elite cases: 1.92
Count of perfect (error zero) individuals by case: (611 291 74 291 67 67 69 84 297 67)
Population mean number of perfect (error zero) cases: 1.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_416} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_590} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction -41} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup})
Best program: (exec_yankdup exec_pop () integer_rot in1 boolean_eq integer_swap print_integer exec_dup (integer_dup) tag_exec_694 (boolean_invert_first_then_and exec_yankdup) boolean_empty in1 exec_y () integer_mult exec_s_when_autoconstructing () (integer_lt integer_yank) (exec_swap (integer_eq tagged_416 in1) (print_exec (exec_shove (exec_do*count (in4 exec_k (tag_exec_590 () integer_dup_items integer_div exec_swap (integer_dup_times exec_when () integer_dec) (integer_stackdepth exec_when (boolean_or boolean_dup print_boolean) boolean_frominteger boolean_eq exec_y () boolean_dup integer_lte boolean_dup_times) boolean_and integer_lte print_exec () boolean_invert_first_then_and integer_rot integer_gt integer_shove) (exec_dup_items exec_do*range (integer_inc exec_yank -41) exec_yank print_integer boolean_or boolean_yankdup boolean_stackdepth boolean_dup exec_pop (integer_dup_times boolean_invert_second_then_and exec_noop) boolean_yankdup boolean_flush exec_k (boolean_swap exec_y_when_autoconstructing (boolean_and) exec_do*count () integer_empty integer_sub boolean_not integer_empty boolean_yankdup) (exec_k_when_autoconstructing () (boolean_swap exec_noop integer_pop)) print_newline exec_shove (print_exec (integer_add) exec_s (exec_eq print_exec (boolean_yankdup)) () ()))))))))
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 92
Size: 128
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 8.082
Median total errors in population: 9
Error averages by case: (0.389 0.709 0.926 0.709 0.933 0.933 0.931 0.916 0.703 0.933)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.707
Average program size in population (points): 64.122
Average percent parens in population: 0.229
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.991
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.991
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 905157
--- Timings ---
Current time: 1559593874480 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.1 seconds, 41.2%
Fitness Testing:      2.5 seconds, 49.7%
Report:               0.4 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: 32                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -38                 | Program output: 36                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -42                 | Program output: -42                
Correct output: -27                 | Program output: -27                
Correct output: 46                  | Program output: 46                 
Correct output: 90                  | Program output: 90                 
Correct output: 94                  | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 94                 
Correct output: 2                   | Program output: 64                 
Correct output: 2                   | Program output: 56                 
Correct output: 38                  | Program output: 90                 
Correct output: 4                   | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 39                 
Correct output: 39                  | Program output: 100                
Correct output: 27                  | Program output: 69                 
Correct output: 12                  | Program output: 84                 
Correct output: 19                  | Program output: 53                 
Correct output: 34                  | Program output: 50                 
Correct output: 18                  | Program output: 60                 
Correct output: 21                  | Program output: 85                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 90                 
Correct output: 41                  | Program output: 68                 
Correct output: 28                  | Program output: 63                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: -84                 | Program output: -14                
Correct output: -61                 | Program output: -28                
Correct output: -100                | Program output: 87                 
Correct output: -65                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: 80                 
Correct output: -32                 | Program output: 59                 
Correct output: -20                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: 5                  
Correct output: 13                  | Program output: 85                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: 58                 
Correct output: -34                 | Program output: 38                 
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -91                 | Program output: -48                
Correct output: -61                 | Program output: -41                
Correct output: -45                 | Program output: 77                 
Correct output: -97                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -59                 | Program output: 12                 
Correct output: -89                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 67                 
Correct output: -98                 | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -87                
Correct output: -94                 | Program output: 35                 
Correct output: -8                  | Program output: 20                 
Correct output: -77                 | Program output: 75                 
Correct output: -54                 | Program output: -35                
Correct output: -64                 | Program output: 71                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -50                
Correct output: -77                 | Program output: -64                
Correct output: -56                 | Program output: -19                
Correct output: -23                 | Program output: 91                 
Correct output: -100                | Program output: -65                
Correct output: -90                 | Program output: -34                
Correct output: 31                  | Program output: 69                 
Correct output: -19                 | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -26                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 95                 
Correct output: -91                 | Program output: -22                
Correct output: -62                 | Program output: -48                
Correct output: -98                 | Program output: -10                
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -17                
Correct output: -24                 | Program output: -15                
Correct output: -90                 | Program output: -70                
Correct output: -72                 | Program output: 64                 
Correct output: -4                  | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_416} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction -41} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_yankdup boolean_swap exec_pop () integer_rot in1 boolean_eq exec_pop () integer_swap print_integer integer_stackdepth integer_max exec_yank exec_dup (integer_dup) tag_exec_694 (boolean_invert_first_then_and exec_yankdup) exec_y () exec_s_when_autoconstructing () (integer_lt exec_swap (integer_eq tagged_416 in1) (print_exec (exec_shove (exec_do*count (in4 integer_dup_items integer_flush integer_div exec_swap (exec_when () integer_dec) (integer_stackdepth exec_when (boolean_or boolean_dup boolean_dup_times boolean_frominteger in4 boolean_eq exec_when (exec_y () boolean_dup integer_lte boolean_dup_times) exec_empty boolean_and integer_lte print_exec () boolean_invert_first_then_and integer_rot integer_gt integer_shove) exec_dup_items integer_flush exec_do*range (integer_inc -41) boolean_invert_second_then_and) exec_yank print_integer boolean_or boolean_yankdup boolean_stackdepth integer_empty boolean_dup exec_pop (boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) integer_stackdepth exec_do*count () boolean_rot integer_sub exec_dup_items boolean_flush boolean_not integer_empty integer_add) boolean_yankdup) exec_k_when_autoconstructing () (exec_when () exec_while (boolean_swap print_boolean exec_yank print_newline exec_shove (boolean_flush integer_add) exec_s (boolean_stackdepth) (exec_eq boolean_yankdup) ()))))) ())
Lexicase best errors: [1 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 129
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_416} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction -41} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_yankdup boolean_swap exec_pop () integer_rot in1 boolean_eq exec_pop () integer_swap print_integer integer_stackdepth integer_max exec_yank exec_dup (integer_dup) tag_exec_694 (boolean_invert_first_then_and exec_yankdup) exec_y () exec_s_when_autoconstructing () (integer_lt exec_swap (integer_eq tagged_416 in1) (print_exec (exec_shove (exec_do*count (in4 integer_dup_items integer_flush integer_div exec_swap (exec_when () integer_dec) (integer_stackdepth exec_when (boolean_or boolean_dup boolean_dup_times boolean_frominteger in4 boolean_eq exec_when (exec_y () boolean_dup integer_lte boolean_dup_times) exec_empty boolean_and integer_lte print_exec () boolean_invert_first_then_and integer_rot integer_gt integer_shove) exec_dup_items integer_flush exec_do*range (integer_inc -41) boolean_invert_second_then_and) exec_yank print_integer boolean_or boolean_yankdup boolean_stackdepth integer_empty boolean_dup exec_pop (boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) integer_stackdepth exec_do*count () boolean_rot integer_sub exec_dup_items boolean_flush boolean_not integer_empty integer_add) boolean_yankdup) exec_k_when_autoconstructing () (exec_when () exec_while (boolean_swap print_boolean exec_yank print_newline exec_shove (boolean_flush integer_add) exec_s (boolean_stackdepth) (exec_eq boolean_yankdup) ()))))) ())
Zero cases best errors: [1 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 129
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 702 665 243 208 37 437 324 294 436)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (106 702 665 243 208 37 437 324 294 436)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_590} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction -41} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction tag_integer_276} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup})
Best program: (exec_yankdup boolean_swap integer_pop exec_pop () integer_dup_items integer_rot in1 boolean_yank boolean_eq exec_pop () integer_swap print_integer integer_stackdepth integer_max exec_yank exec_dup_items exec_dup (integer_dup) tag_exec_694 (boolean_invert_first_then_and exec_yankdup) boolean_empty exec_y () integer_mult integer_flush exec_s_when_autoconstructing () (integer_flush) (integer_yank) exec_swap (integer_eq boolean_rot in1) (print_boolean exec_shove (exec_do*count (in4 exec_k (boolean_or tag_exec_590 () integer_dup_items integer_div integer_lte) () exec_swap (integer_dup_times exec_when () integer_dec) (integer_stackdepth exec_when (exec_eq integer_flush boolean_dup_times integer_sub boolean_frominteger boolean_eq exec_y () integer_mod integer_lte exec_dup_times (boolean_dup_times) boolean_and integer_lte exec_s () (boolean_invert_first_then_and integer_dup_times in1 integer_rot integer_gt integer_shove) (exec_dup_items integer_inc -41) integer_swap exec_yank print_integer boolean_or boolean_yankdup exec_noop boolean_dup exec_pop (boolean_invert_second_then_and exec_noop) boolean_xor boolean_yankdup boolean_flush exec_k (boolean_swap exec_y_when_autoconstructing (boolean_and) integer_stackdepth exec_do*count () tag_integer_276 integer_empty exec_y_when_autoconstructing (integer_sub boolean_not integer_empty integer_lte integer_add) boolean_eq boolean_yankdup) (exec_k_when_autoconstructing () (boolean_swap exec_noop exec_yank exec_stackdepth integer_pop)) print_newline exec_shove (print_exec (integer_add) exec_s (boolean_yankdup) () ())))))))
Errors: [1 0 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 112
Size: 150
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 6.548
Median total errors in population: 6
Error averages by case: (0.894 0.298 0.335 0.757 0.792 0.963 0.563 0.676 0.706 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.036
Average program size in population (points): 92.767
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1353684
--- Timings ---
Current time: 1559593877000 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.3 seconds, 43.7%
Fitness Testing:      3.1 seconds, 41.5%
Report:               1.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: 32                  | Program output: 32                 
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -38                 | Program output: 36                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -42                 | Program output: -42                
Correct output: -27                 | Program output: -27                
Correct output: 46                  | Program output: 46                 
Correct output: 90                  | Program output: 90                 
Correct output: 94                  | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 78                 
Correct output: 2                   | Program output: 21                 
Correct output: 2                   | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 39                 
Correct output: 39                  | Program output: 60                 
Correct output: 27                  | Program output: 69                 
Correct output: 12                  | Program output: 50                 
Correct output: 19                  | Program output: 34                 
Correct output: 34                  | Program output: 50                 
Correct output: 18                  | Program output: 49                 
Correct output: 21                  | Program output: 85                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 88                 
Correct output: 41                  | Program output: 68                 
Correct output: 28                  | Program output: 63                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: -84                 | Program output: -25                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: -32                
Correct output: -20                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -34                 | Program output: 20                 
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -91                 | Program output: -66                
Correct output: -61                 | Program output: -41                
Correct output: -45                 | Program output: 52                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -56                
Correct output: -59                 | Program output: 12                 
Correct output: -89                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -87                
Correct output: -94                 | Program output: -54                
Correct output: -8                  | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -50                
Correct output: -77                 | Program output: -64                
Correct output: -56                 | Program output: -53                
Correct output: -23                 | Program output: 76                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 31                  | Program output: 31                 
Correct output: -19                 | Program output: 42                 
Correct output: -37                 | Program output: -37                
Correct output: -26                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
Correct output: -62                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -24                
Correct output: -24                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -4                  | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_108} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup})
Lexicase best program: (in4 exec_s () (exec_k_when_autoconstructing (integer_add boolean_invert_second_then_and) (in3 in1 in2 integer_yankdup print_integer tag_exec_108 () boolean_not integer_stackdepth integer_sub integer_dup_times integer_dup) integer_gte exec_yankdup) ())
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_108} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup})
Zero cases best program: (in4 exec_s () (exec_k_when_autoconstructing (integer_add boolean_invert_second_then_and) (in3 in1 in2 integer_yankdup print_integer tag_exec_108 () boolean_not integer_stackdepth integer_sub integer_dup_times integer_dup) integer_gte exec_yankdup) ())
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 195 162 248 196 102 695 354 246 104)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (246 195 162 248 196 102 695 354 246 104)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_704} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_416} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_590} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_431} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_401} {:close 0, :instruction boolean_and} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_752} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_when} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup})
Best program: (exec_yankdup exec_pop () integer_rot tagged_704 in1 boolean_eq in4 exec_pop () integer_swap integer_min print_integer integer_stackdepth boolean_swap exec_yank integer_fromboolean integer_dup tag_exec_694 (boolean_invert_first_then_and exec_yankdup) boolean_empty exec_y () integer_pop integer_mult exec_s_when_autoconstructing () (integer_lt integer_yank) (integer_lte tagged_416 integer_gte in1) print_exec (exec_shove (exec_do*count (in4 exec_do*times (exec_k (tag_exec_590 () integer_yankdup boolean_stackdepth) (integer_flush integer_div exec_when () integer_stackdepth in1 exec_when (boolean_or boolean_dup boolean_eq exec_flush tag_exec_431 (exec_y () boolean_dup integer_lte integer_swap boolean_dup_times) tagged_401) boolean_and print_exec () integer_rot integer_gt integer_shove) exec_dup_items integer_inc exec_yank print_boolean) exec_empty print_integer print_exec (tagged_752 boolean_yankdup in1 exec_do*times () boolean_stackdepth boolean_dup exec_eq integer_shove) boolean_invert_second_then_and boolean_flush integer_gt exec_k (exec_y_when_autoconstructing (exec_yank integer_stackdepth integer_yankdup integer_empty integer_sub boolean_stackdepth boolean_not integer_empty integer_add) boolean_dup_items) () boolean_yankdup) exec_k_when_autoconstructing () (boolean_swap exec_yank integer_pop)) print_newline exec_do*times (exec_shove (print_exec (exec_do*times (exec_when () integer_add) exec_s (exec_eq boolean_yankdup) () ())))))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 106
Size: 141
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 7.452
Median total errors in population: 7
Error averages by case: (0.754 0.805 0.838 0.752 0.804 0.898 0.305 0.646 0.754 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.609
Average program size in population (points): 57.43
Average percent parens in population: 0.251
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1671737
--- Timings ---
Current time: 1559593879190 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 45.4%
Fitness Testing:      3.6 seconds, 36.5%
Report:               1.7 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 417
Test mean error for best: 0.41700
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: 32                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -38                 | Program output: -38                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -42                 | Program output: -42                
Correct output: -27                 | Program output: -27                
Correct output: 46                  | Program output: 46                 
Correct output: 90                  | Program output: 90                 
Correct output: 94                  | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 77                 
Correct output: 2                   | Program output: 51                 
Correct output: 2                   | Program output: 56                 
Correct output: 38                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 39                  | Program output: 39                 
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 28                  | Program output: 63                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -28                
Correct output: -100                | Program output: -43                
Correct output: -65                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -37                
Correct output: -32                 | Program output: 53                 
Correct output: -20                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 13                  | Program output: 57                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -45                 | Program output: 77                 
Correct output: -97                 | Program output: -85                
Correct output: -87                 | Program output: 57                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 29                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 20                 
Correct output: -77                 | Program output: 48                 
Correct output: -54                 | Program output: -35                
Correct output: -64                 | Program output: -47                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -50                
Correct output: -77                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: -65                
Correct output: -90                 | Program output: -62                
Correct output: 31                  | Program output: 69                 
Correct output: -19                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 29                 
Correct output: -91                 | Program output: -22                
Correct output: -62                 | Program output: -48                
Correct output: -98                 | Program output: -33                
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -57                
Correct output: -24                 | Program output: -15                
Correct output: -90                 | Program output: -70                
Correct output: -72                 | Program output: 64                 
Correct output: -4                  | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_704} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_431} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_401} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_964} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_when} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_pop () in3 integer_rot tagged_704 in1 boolean_eq integer_min print_integer integer_stackdepth boolean_swap exec_yank integer_fromboolean integer_dup tag_exec_694 (boolean_invert_first_then_and exec_yankdup) boolean_empty exec_y () integer_pop integer_mult exec_s_when_autoconstructing () (integer_lt integer_yank) (integer_lte in1) boolean_yankdup print_exec (exec_shove (exec_do*count (in4 exec_do*times (exec_k (integer_yankdup boolean_stackdepth) (integer_flush integer_div exec_when () integer_stackdepth in1 exec_when (boolean_or boolean_dup boolean_eq integer_stackdepth tag_exec_431 (exec_y () boolean_dup integer_lte integer_swap exec_if () () boolean_dup_times) tagged_401) boolean_and integer_gte print_exec () integer_rot integer_gt integer_shove) exec_dup_items exec_yank print_boolean) exec_empty print_integer tag_exec_964 () print_exec (boolean_yankdup in1 exec_do*times () boolean_stackdepth boolean_dup exec_eq integer_shove) boolean_invert_second_then_and boolean_flush integer_gt exec_k (exec_y_when_autoconstructing (exec_yank integer_stackdepth integer_yankdup exec_flush integer_empty integer_sub integer_mod boolean_stackdepth boolean_not integer_empty integer_add) exec_dup_times (boolean_dup_items)) (boolean_yankdup) exec_k_when_autoconstructing () (boolean_swap exec_yank integer_dec integer_pop)) print_newline exec_do*times (exec_shove (print_exec (exec_do*times (exec_when () integer_add) exec_s (exec_eq) () ()))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 142
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_704} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_694} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_431} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_401} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_964} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_when} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_pop () in3 integer_rot tagged_704 in1 boolean_eq integer_min print_integer integer_stackdepth boolean_swap exec_yank integer_fromboolean integer_dup tag_exec_694 (boolean_invert_first_then_and exec_yankdup) boolean_empty exec_y () integer_pop integer_mult exec_s_when_autoconstructing () (integer_lt integer_yank) (integer_lte in1) boolean_yankdup print_exec (exec_shove (exec_do*count (in4 exec_do*times (exec_k (integer_yankdup boolean_stackdepth) (integer_flush integer_div exec_when () integer_stackdepth in1 exec_when (boolean_or boolean_dup boolean_eq integer_stackdepth tag_exec_431 (exec_y () boolean_dup integer_lte integer_swap exec_if () () boolean_dup_times) tagged_401) boolean_and integer_gte print_exec () integer_rot integer_gt integer_shove) exec_dup_items exec_yank print_boolean) exec_empty print_integer tag_exec_964 () print_exec (boolean_yankdup in1 exec_do*times () boolean_stackdepth boolean_dup exec_eq integer_shove) boolean_invert_second_then_and boolean_flush integer_gt exec_k (exec_y_when_autoconstructing (exec_yank integer_stackdepth integer_yankdup exec_flush integer_empty integer_sub integer_mod boolean_stackdepth boolean_not integer_empty integer_add) exec_dup_times (boolean_dup_items)) (boolean_yankdup) exec_k_when_autoconstructing () (boolean_swap exec_yank integer_dec integer_pop)) print_newline exec_do*times (exec_shove (print_exec (exec_do*times (exec_when () integer_add) exec_s (exec_eq) () ()))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 142
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 694 141 416 692 289 299 289 135 135)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (405 694 141 416 692 289 299 289 135 135)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction -33} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 40} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_boolean_242} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush})
Best program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 82
Size: 104
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.505
Median total errors in population: 6
Error averages by case: (0.595 0.306 0.859 0.584 0.308 0.711 0.701 0.711 0.865 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.566
Average program size in population (points): 62.771
Average percent parens in population: 0.227
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2069203
--- Timings ---
Current time: 1559593881084 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.6 seconds, 46.7%
Fitness Testing:      4.1 seconds, 33.8%
Report:               2.2 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 4
Successful program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 104


Auto-simplifying with starting size: 104
step: 0
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 500
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 1000
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 1500
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 2000
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 2500
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 3000
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 3500
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 4000
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 4500
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 5000
program: (boolean_dup_times exec_when () integer_dup_items integer_eq integer_mod integer_max exec_when (boolean_swap exec_empty integer_mod in4) in3 in1 integer_min print_integer boolean_yank in3 exec_while (exec_y (exec_do*times () in1 integer_empty integer_dup boolean_yankdup exec_while (-33 boolean_pop) integer_lt boolean_stackdepth boolean_or exec_k (exec_k (exec_do*times (integer_lte) exec_y_when_autoconstructing (integer_flush boolean_or) exec_dup_times (40) in2 integer_lte print_boolean integer_min integer_lte exec_do*while (in1) integer_dup_times boolean_xor tag_boolean_242) (boolean_and exec_while (boolean_swap) exec_y_when_autoconstructing (print_boolean exec_while (integer_fromboolean exec_yank) exec_dup_times (boolean_dup_items) boolean_yankdup boolean_shove boolean_or boolean_stackdepth boolean_dup print_exec (print_boolean integer_div) exec_shove () integer_sub integer_sub integer_empty) exec_dup_items integer_max integer_eq boolean_frominteger) in1 boolean_empty integer_gt integer_div exec_do*count (integer_eq integer_flush)) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 417
Test mean error for best: 0.41700
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: 32                  | Program output: 42                 
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -38                 | Program output: -38                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -42                 | Program output: -42                
Correct output: -27                 | Program output: -27                
Correct output: 46                  | Program output: 46                 
Correct output: 90                  | Program output: 90                 
Correct output: 94                  | Program output: 94                 
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 77                 
Correct output: 2                   | Program output: 51                 
Correct output: 2                   | Program output: 56                 
Correct output: 38                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 39                  | Program output: 39                 
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 34                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 28                  | Program output: 63                 
Correct output: 52                  | Program output: 52                 
Correct output: 10                  | Program output: 10                 
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -28                
Correct output: -100                | Program output: -43                
Correct output: -65                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -37                
Correct output: -32                 | Program output: 53                 
Correct output: -20                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 13                  | Program output: 57                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -45                 | Program output: 77                 
Correct output: -97                 | Program output: -85                
Correct output: -87                 | Program output: 57                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 29                 
Correct output: -98                 | Program output: -98                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 20                 
Correct output: -77                 | Program output: 48                 
Correct output: -54                 | Program output: -35                
Correct output: -64                 | Program output: -47                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -50                
Correct output: -77                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: -65                
Correct output: -90                 | Program output: -62                
Correct output: 31                  | Program output: 69                 
Correct output: -19                 | Program output: 22                 
Correct output: -37                 | Program output: -37                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 29                 
Correct output: -91                 | Program output: -22                
Correct output: -62                 | Program output: -48                
Correct output: -98                 | Program output: -33                
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -57                
Correct output: -24                 | Program output: -15                
Correct output: -90                 | Program output: -70                
Correct output: -72                 | Program output: 64                 
Correct output: -4                  | Program output: 98                 
;;******************************
