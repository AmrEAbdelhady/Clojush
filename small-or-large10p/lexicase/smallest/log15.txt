Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[69 -23 -23 -23] -23] [[-61 -98 -98 -98] -98] [[-21 -21 -21 94] -21] [[18 13 13 13] 13] [[-90 -38 -90 -90] -90] [[-26 -26 -26 93] -26] [[-21 23 23 23] -21] [[62 49 49 49] 49] [[-40 -40 -40 43] -40] [[-75 -75 -97 -75] -97] [(94 94 94 94) 94] [(6 6 6 6) 6] [(94 94 94 94) 94] [(80 80 80 80) 80] [(-38 -38 -38 -38) -38] [(31 5 2 85) 2] [(6 35 48 52) 6] [(68 11 54 36) 11] [(66 29 12 15) 12] [(20 92 92 72) 20] [(72 63 8 31) 8] [(18 0 73 69) 0] [(39 80 79 57) 39] [(45 80 43 80) 43] [(95 81 97 84) 81] [(94 22 2 82) 2] [(39 34 71 33) 33] [(68 49 81 94) 49] [(82 42 88 5) 5] [(53 87 7 49) 7] [(87 98 70 11) 11] [(21 28 49 96) 21] [(1 97 35 0) 0] [(73 88 88 38) 38] [(28 21 68 83) 21] [(41 43 -36 -24) -36] [(58 63 68 -98) -98] [(-86 93 46 -66) -86] [(-41 45 33 7) -41] [(46 96 3 84) 3] [(-72 -27 15 -41) -72] [(83 -58 -3 -55) -58] [(60 35 45 -52) -52] [(82 -85 100 94) -85] [(100 -77 54 93) -77] [(15 41 -72 65) -72] [(23 83 39 -83) -83] [(-38 -26 -69 50) -69] [(-86 -92 -52 -59) -92] [(99 -51 -19 -4) -51] [(-59 -36 57 32) -59] [(13 -61 18 -66) -66] [(-76 69 9 -90) -90] [(93 -1 -48 -88) -88] [(70 -29 -84 -24) -84] [(7 -20 -50 30) -50] [(-50 73 21 98) -50] [(96 82 98 89) 82] [(64 71 90 6) 6] [(-99 -42 -92 -27) -99] [(6 46 15 0) 0] [(39 30 62 -33) -33] [(-55 6 73 34) -55] [(100 -28 57 11) -28] [(14 84 28 -37) -37] [(-71 -83 61 -76) -83] [(-6 -79 -97 51) -97] [(94 -91 86 -17) -91] [(-85 45 -69 -2) -85] [(37 69 78 19) 19] [(-36 72 -67 -73) -73] [(23 4 41 -72) -72] [(26 -24 -69 -32) -69] [(-3 47 -21 24) -21] [(87 -27 39 89) -27] [(-46 29 -17 -49) -49] [(-87 53 -17 85) -87] [(-56 54 33 86) -56] [(-6 31 -30 -68) -68] [(-52 72 -78 20) -78] [(-15 -54 69 35) -54] [(-14 -49 55 41) -49] [(99 -78 -77 89) -78] [(-97 -64 73 -84) -97] [(-87 89 -48 -24) -87] [(8 -67 62 -86) -86] [(-70 -56 27 31) -70] [(-40 76 -25 37) -40] [(86 72 -77 -29) -77] [(-24 35 -100 100) -100] [(6 -58 -7 -73) -73] [(76 -47 -75 -24) -75] [(75 -33 -23 -14) -33] [(22 68 -20 70) -20] [(90 -66 61 31) -66])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[69 -23 -23 -23] -23]
Train Case:   6 | Input/Output: [[-61 -98 -98 -98] -98]
Train Case:   7 | Input/Output: [[-21 -21 -21 94] -21]
Train Case:   8 | Input/Output: [[18 13 13 13] 13]
Train Case:   9 | Input/Output: [[-90 -38 -90 -90] -90]
Train Case:  10 | Input/Output: [[-26 -26 -26 93] -26]
Train Case:  11 | Input/Output: [[-21 23 23 23] -21]
Train Case:  12 | Input/Output: [[62 49 49 49] 49]
Train Case:  13 | Input/Output: [[-40 -40 -40 43] -40]
Train Case:  14 | Input/Output: [[-75 -75 -97 -75] -97]
Train Case:  15 | Input/Output: [(94 94 94 94) 94]
Train Case:  16 | Input/Output: [(6 6 6 6) 6]
Train Case:  17 | Input/Output: [(94 94 94 94) 94]
Train Case:  18 | Input/Output: [(80 80 80 80) 80]
Train Case:  19 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  20 | Input/Output: [(31 5 2 85) 2]
Train Case:  21 | Input/Output: [(6 35 48 52) 6]
Train Case:  22 | Input/Output: [(68 11 54 36) 11]
Train Case:  23 | Input/Output: [(66 29 12 15) 12]
Train Case:  24 | Input/Output: [(20 92 92 72) 20]
Train Case:  25 | Input/Output: [(72 63 8 31) 8]
Train Case:  26 | Input/Output: [(18 0 73 69) 0]
Train Case:  27 | Input/Output: [(39 80 79 57) 39]
Train Case:  28 | Input/Output: [(45 80 43 80) 43]
Train Case:  29 | Input/Output: [(95 81 97 84) 81]
Train Case:  30 | Input/Output: [(94 22 2 82) 2]
Train Case:  31 | Input/Output: [(39 34 71 33) 33]
Train Case:  32 | Input/Output: [(68 49 81 94) 49]
Train Case:  33 | Input/Output: [(82 42 88 5) 5]
Train Case:  34 | Input/Output: [(53 87 7 49) 7]
Train Case:  35 | Input/Output: [(87 98 70 11) 11]
Train Case:  36 | Input/Output: [(21 28 49 96) 21]
Train Case:  37 | Input/Output: [(1 97 35 0) 0]
Train Case:  38 | Input/Output: [(73 88 88 38) 38]
Train Case:  39 | Input/Output: [(28 21 68 83) 21]
Train Case:  40 | Input/Output: [(41 43 -36 -24) -36]
Train Case:  41 | Input/Output: [(58 63 68 -98) -98]
Train Case:  42 | Input/Output: [(-86 93 46 -66) -86]
Train Case:  43 | Input/Output: [(-41 45 33 7) -41]
Train Case:  44 | Input/Output: [(46 96 3 84) 3]
Train Case:  45 | Input/Output: [(-72 -27 15 -41) -72]
Train Case:  46 | Input/Output: [(83 -58 -3 -55) -58]
Train Case:  47 | Input/Output: [(60 35 45 -52) -52]
Train Case:  48 | Input/Output: [(82 -85 100 94) -85]
Train Case:  49 | Input/Output: [(100 -77 54 93) -77]
Train Case:  50 | Input/Output: [(15 41 -72 65) -72]
Train Case:  51 | Input/Output: [(23 83 39 -83) -83]
Train Case:  52 | Input/Output: [(-38 -26 -69 50) -69]
Train Case:  53 | Input/Output: [(-86 -92 -52 -59) -92]
Train Case:  54 | Input/Output: [(99 -51 -19 -4) -51]
Train Case:  55 | Input/Output: [(-59 -36 57 32) -59]
Train Case:  56 | Input/Output: [(13 -61 18 -66) -66]
Train Case:  57 | Input/Output: [(-76 69 9 -90) -90]
Train Case:  58 | Input/Output: [(93 -1 -48 -88) -88]
Train Case:  59 | Input/Output: [(70 -29 -84 -24) -84]
Train Case:  60 | Input/Output: [(7 -20 -50 30) -50]
Train Case:  61 | Input/Output: [(-50 73 21 98) -50]
Train Case:  62 | Input/Output: [(96 82 98 89) 82]
Train Case:  63 | Input/Output: [(64 71 90 6) 6]
Train Case:  64 | Input/Output: [(-99 -42 -92 -27) -99]
Train Case:  65 | Input/Output: [(6 46 15 0) 0]
Train Case:  66 | Input/Output: [(39 30 62 -33) -33]
Train Case:  67 | Input/Output: [(-55 6 73 34) -55]
Train Case:  68 | Input/Output: [(100 -28 57 11) -28]
Train Case:  69 | Input/Output: [(14 84 28 -37) -37]
Train Case:  70 | Input/Output: [(-71 -83 61 -76) -83]
Train Case:  71 | Input/Output: [(-6 -79 -97 51) -97]
Train Case:  72 | Input/Output: [(94 -91 86 -17) -91]
Train Case:  73 | Input/Output: [(-85 45 -69 -2) -85]
Train Case:  74 | Input/Output: [(37 69 78 19) 19]
Train Case:  75 | Input/Output: [(-36 72 -67 -73) -73]
Train Case:  76 | Input/Output: [(23 4 41 -72) -72]
Train Case:  77 | Input/Output: [(26 -24 -69 -32) -69]
Train Case:  78 | Input/Output: [(-3 47 -21 24) -21]
Train Case:  79 | Input/Output: [(87 -27 39 89) -27]
Train Case:  80 | Input/Output: [(-46 29 -17 -49) -49]
Train Case:  81 | Input/Output: [(-87 53 -17 85) -87]
Train Case:  82 | Input/Output: [(-56 54 33 86) -56]
Train Case:  83 | Input/Output: [(-6 31 -30 -68) -68]
Train Case:  84 | Input/Output: [(-52 72 -78 20) -78]
Train Case:  85 | Input/Output: [(-15 -54 69 35) -54]
Train Case:  86 | Input/Output: [(-14 -49 55 41) -49]
Train Case:  87 | Input/Output: [(99 -78 -77 89) -78]
Train Case:  88 | Input/Output: [(-97 -64 73 -84) -97]
Train Case:  89 | Input/Output: [(-87 89 -48 -24) -87]
Train Case:  90 | Input/Output: [(8 -67 62 -86) -86]
Train Case:  91 | Input/Output: [(-70 -56 27 31) -70]
Train Case:  92 | Input/Output: [(-40 76 -25 37) -40]
Train Case:  93 | Input/Output: [(86 72 -77 -29) -77]
Train Case:  94 | Input/Output: [(-24 35 -100 100) -100]
Train Case:  95 | Input/Output: [(6 -58 -7 -73) -73]
Train Case:  96 | Input/Output: [(76 -47 -75 -24) -75]
Train Case:  97 | Input/Output: [(75 -33 -23 -14) -33]
Train Case:  98 | Input/Output: [(22 68 -20 70) -20]
Train Case:  99 | Input/Output: [(90 -66 61 31) -66]
Test Case:   0 | Input/Output: [[22 22 5 22] 5]
Test Case:   1 | Input/Output: [[-19 -62 -62 -62] -62]
Test Case:   2 | Input/Output: [[30 30 30 10] 10]
Test Case:   3 | Input/Output: [[43 43 8 43] 8]
Test Case:   4 | Input/Output: [[83 9 9 9] 9]
Test Case:   5 | Input/Output: [[72 -78 72 72] -78]
Test Case:   6 | Input/Output: [[92 92 -76 92] -76]
Test Case:   7 | Input/Output: [[-34 -34 -34 -78] -78]
Test Case:   8 | Input/Output: [[51 51 -50 51] -50]
Test Case:   9 | Input/Output: [[13 13 -11 13] -11]
Test Case:  10 | Input/Output: [[3 85 3 3] 3]
Test Case:  11 | Input/Output: [[-11 -49 -49 -49] -49]
Test Case:  12 | Input/Output: [[-14 31 -14 -14] -14]
Test Case:  13 | Input/Output: [[64 64 64 -51] -51]
Test Case:  14 | Input/Output: [[78 42 42 42] 42]
Test Case:  15 | Input/Output: [[87 87 87 -78] -78]
Test Case:  16 | Input/Output: [[-61 33 -61 -61] -61]
Test Case:  17 | Input/Output: [[-72 -72 -19 -72] -72]
Test Case:  18 | Input/Output: [[-56 79 79 79] -56]
Test Case:  19 | Input/Output: [[-37 -37 -34 -37] -37]
Test Case:  20 | Input/Output: [[71 71 71 27] 27]
Test Case:  21 | Input/Output: [[7 6 7 7] 6]
Test Case:  22 | Input/Output: [[-33 48 48 48] -33]
Test Case:  23 | Input/Output: [[1 1 52 1] 1]
Test Case:  24 | Input/Output: [[-60 -60 -60 99] -60]
Test Case:  25 | Input/Output: [[79 -57 79 79] -57]
Test Case:  26 | Input/Output: [[-36 -36 41 -36] -36]
Test Case:  27 | Input/Output: [[6 49 49 49] 6]
Test Case:  28 | Input/Output: [[-97 -97 38 -97] -97]
Test Case:  29 | Input/Output: [[-75 -75 83 -75] -75]
Test Case:  30 | Input/Output: [[-16 -16 59 -16] -16]
Test Case:  31 | Input/Output: [[-27 -27 -27 25] -27]
Test Case:  32 | Input/Output: [[35 -39 -39 -39] -39]
Test Case:  33 | Input/Output: [[37 73 37 37] 37]
Test Case:  34 | Input/Output: [[48 48 48 -74] -74]
Test Case:  35 | Input/Output: [[23 40 40 40] 23]
Test Case:  36 | Input/Output: [[-13 -63 -13 -13] -63]
Test Case:  37 | Input/Output: [[55 -55 -55 -55] -55]
Test Case:  38 | Input/Output: [[92 92 67 92] 67]
Test Case:  39 | Input/Output: [[-79 71 71 71] -79]
Test Case:  40 | Input/Output: [[-9 -9 -9 -94] -94]
Test Case:  41 | Input/Output: [[-2 -2 -2 -79] -79]
Test Case:  42 | Input/Output: [[-15 -4 -15 -15] -15]
Test Case:  43 | Input/Output: [[-10 -10 -10 32] -10]
Test Case:  44 | Input/Output: [[-75 -75 26 -75] -75]
Test Case:  45 | Input/Output: [[-19 -19 -11 -19] -19]
Test Case:  46 | Input/Output: [[84 84 84 81] 81]
Test Case:  47 | Input/Output: [[2 2 3 2] 2]
Test Case:  48 | Input/Output: [[41 -72 -72 -72] -72]
Test Case:  49 | Input/Output: [[41 41 -2 41] -2]
Test Case:  50 | Input/Output: [[-91 -63 -91 -91] -91]
Test Case:  51 | Input/Output: [[67 -33 67 67] -33]
Test Case:  52 | Input/Output: [[56 56 90 56] 56]
Test Case:  53 | Input/Output: [[43 43 43 -30] -30]
Test Case:  54 | Input/Output: [[83 83 83 82] 82]
Test Case:  55 | Input/Output: [[71 71 71 -83] -83]
Test Case:  56 | Input/Output: [[14 14 14 -15] -15]
Test Case:  57 | Input/Output: [[-64 -20 -64 -64] -64]
Test Case:  58 | Input/Output: [[87 87 -77 87] -77]
Test Case:  59 | Input/Output: [[-78 -78 56 -78] -78]
Test Case:  60 | Input/Output: [[-60 70 -60 -60] -60]
Test Case:  61 | Input/Output: [[83 19 19 19] 19]
Test Case:  62 | Input/Output: [[0 -50 -50 -50] -50]
Test Case:  63 | Input/Output: [[-83 56 -83 -83] -83]
Test Case:  64 | Input/Output: [[14 14 100 14] 14]
Test Case:  65 | Input/Output: [[-12 -7 -12 -12] -12]
Test Case:  66 | Input/Output: [[-57 73 73 73] -57]
Test Case:  67 | Input/Output: [[-19 -19 -19 -92] -92]
Test Case:  68 | Input/Output: [[-36 49 49 49] -36]
Test Case:  69 | Input/Output: [[-75 -75 51 -75] -75]
Test Case:  70 | Input/Output: [[32 77 77 77] 32]
Test Case:  71 | Input/Output: [[85 -96 -96 -96] -96]
Test Case:  72 | Input/Output: [[-83 2 -83 -83] -83]
Test Case:  73 | Input/Output: [[-96 -96 -96 14] -96]
Test Case:  74 | Input/Output: [[-68 -68 4 -68] -68]
Test Case:  75 | Input/Output: [[7 7 -37 7] -37]
Test Case:  76 | Input/Output: [[-3 -3 93 -3] -3]
Test Case:  77 | Input/Output: [[-9 -77 -77 -77] -77]
Test Case:  78 | Input/Output: [[-62 26 26 26] -62]
Test Case:  79 | Input/Output: [[-46 -58 -46 -46] -58]
Test Case:  80 | Input/Output: [[-7 -7 12 -7] -7]
Test Case:  81 | Input/Output: [[-33 -33 93 -33] -33]
Test Case:  82 | Input/Output: [[5 98 98 98] 5]
Test Case:  83 | Input/Output: [[52 52 52 -42] -42]
Test Case:  84 | Input/Output: [[92 92 92 -67] -67]
Test Case:  85 | Input/Output: [[51 -29 -29 -29] -29]
Test Case:  86 | Input/Output: [[-99 -99 -99 87] -99]
Test Case:  87 | Input/Output: [[91 97 97 97] 91]
Test Case:  88 | Input/Output: [[17 60 17 17] 17]
Test Case:  89 | Input/Output: [[17 -30 -30 -30] -30]
Test Case:  90 | Input/Output: [[70 70 -66 70] -66]
Test Case:  91 | Input/Output: [[-76 -76 -89 -76] -89]
Test Case:  92 | Input/Output: [[55 -9 55 55] -9]
Test Case:  93 | Input/Output: [[38 -13 -13 -13] -13]
Test Case:  94 | Input/Output: [[-47 -47 96 -47] -47]
Test Case:  95 | Input/Output: [[2 2 19 2] 2]
Test Case:  96 | Input/Output: [[81 81 81 27] 27]
Test Case:  97 | Input/Output: [[-19 -19 -71 -19] -71]
Test Case:  98 | Input/Output: [[-29 94 -29 -29] -29]
Test Case:  99 | Input/Output: [[42 21 21 21] 21]
Test Case: 100 | Input/Output: [(25 25 25 25) 25]
Test Case: 101 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 102 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 103 | Input/Output: [(44 44 44 44) 44]
Test Case: 104 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 105 | Input/Output: [(24 24 24 24) 24]
Test Case: 106 | Input/Output: [(90 90 90 90) 90]
Test Case: 107 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 108 | Input/Output: [(88 88 88 88) 88]
Test Case: 109 | Input/Output: [(84 84 84 84) 84]
Test Case: 110 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 111 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 112 | Input/Output: [(7 7 7 7) 7]
Test Case: 113 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 114 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 115 | Input/Output: [(79 79 79 79) 79]
Test Case: 116 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 117 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 118 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 119 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 120 | Input/Output: [(47 47 47 47) 47]
Test Case: 121 | Input/Output: [(58 58 58 58) 58]
Test Case: 122 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 123 | Input/Output: [(51 51 51 51) 51]
Test Case: 124 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 125 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 126 | Input/Output: [(20 20 20 20) 20]
Test Case: 127 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 128 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 129 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 130 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 131 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 132 | Input/Output: [(25 25 25 25) 25]
Test Case: 133 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 134 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 135 | Input/Output: [(93 93 93 93) 93]
Test Case: 136 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 137 | Input/Output: [(88 88 88 88) 88]
Test Case: 138 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 139 | Input/Output: [(17 17 17 17) 17]
Test Case: 140 | Input/Output: [(48 48 48 48) 48]
Test Case: 141 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 142 | Input/Output: [(51 51 51 51) 51]
Test Case: 143 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 144 | Input/Output: [(53 53 53 53) 53]
Test Case: 145 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 146 | Input/Output: [(43 43 43 43) 43]
Test Case: 147 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 148 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 149 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 150 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 151 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 152 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 153 | Input/Output: [(41 41 41 41) 41]
Test Case: 154 | Input/Output: [(88 88 88 88) 88]
Test Case: 155 | Input/Output: [(94 94 94 94) 94]
Test Case: 156 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 157 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 158 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 159 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 160 | Input/Output: [(93 93 93 93) 93]
Test Case: 161 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 162 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 163 | Input/Output: [(71 71 71 71) 71]
Test Case: 164 | Input/Output: [(24 24 24 24) 24]
Test Case: 165 | Input/Output: [(28 28 28 28) 28]
Test Case: 166 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 167 | Input/Output: [(51 51 51 51) 51]
Test Case: 168 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 169 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 170 | Input/Output: [(41 41 41 41) 41]
Test Case: 171 | Input/Output: [(39 39 39 39) 39]
Test Case: 172 | Input/Output: [(61 61 61 61) 61]
Test Case: 173 | Input/Output: [(58 58 58 58) 58]
Test Case: 174 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 175 | Input/Output: [(71 71 71 71) 71]
Test Case: 176 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 177 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 178 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 179 | Input/Output: [(34 34 34 34) 34]
Test Case: 180 | Input/Output: [(35 35 35 35) 35]
Test Case: 181 | Input/Output: [(75 75 75 75) 75]
Test Case: 182 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 183 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 184 | Input/Output: [(13 13 13 13) 13]
Test Case: 185 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 186 | Input/Output: [(40 40 40 40) 40]
Test Case: 187 | Input/Output: [(69 69 69 69) 69]
Test Case: 188 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 189 | Input/Output: [(56 56 56 56) 56]
Test Case: 190 | Input/Output: [(87 87 87 87) 87]
Test Case: 191 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 192 | Input/Output: [(43 43 43 43) 43]
Test Case: 193 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 194 | Input/Output: [(88 88 88 88) 88]
Test Case: 195 | Input/Output: [(76 76 76 76) 76]
Test Case: 196 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 197 | Input/Output: [(21 21 21 21) 21]
Test Case: 198 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 199 | Input/Output: [(43 43 43 43) 43]
Test Case: 200 | Input/Output: [(66 98 22 63) 22]
Test Case: 201 | Input/Output: [(26 57 38 98) 26]
Test Case: 202 | Input/Output: [(86 32 60 77) 32]
Test Case: 203 | Input/Output: [(7 15 86 64) 7]
Test Case: 204 | Input/Output: [(63 46 57 70) 46]
Test Case: 205 | Input/Output: [(25 56 97 2) 2]
Test Case: 206 | Input/Output: [(70 68 97 46) 46]
Test Case: 207 | Input/Output: [(77 89 95 68) 68]
Test Case: 208 | Input/Output: [(30 51 70 16) 16]
Test Case: 209 | Input/Output: [(21 15 63 81) 15]
Test Case: 210 | Input/Output: [(65 74 84 69) 65]
Test Case: 211 | Input/Output: [(54 26 53 98) 26]
Test Case: 212 | Input/Output: [(87 90 68 95) 68]
Test Case: 213 | Input/Output: [(10 8 48 6) 6]
Test Case: 214 | Input/Output: [(58 24 29 24) 24]
Test Case: 215 | Input/Output: [(94 78 8 20) 8]
Test Case: 216 | Input/Output: [(87 33 88 53) 33]
Test Case: 217 | Input/Output: [(50 88 32 88) 32]
Test Case: 218 | Input/Output: [(95 76 24 32) 24]
Test Case: 219 | Input/Output: [(66 48 12 95) 12]
Test Case: 220 | Input/Output: [(29 81 95 30) 29]
Test Case: 221 | Input/Output: [(50 77 47 46) 46]
Test Case: 222 | Input/Output: [(58 88 71 15) 15]
Test Case: 223 | Input/Output: [(40 98 38 16) 16]
Test Case: 224 | Input/Output: [(54 4 48 38) 4]
Test Case: 225 | Input/Output: [(59 99 21 5) 5]
Test Case: 226 | Input/Output: [(11 62 77 34) 11]
Test Case: 227 | Input/Output: [(64 91 2 43) 2]
Test Case: 228 | Input/Output: [(86 82 55 42) 42]
Test Case: 229 | Input/Output: [(7 93 68 62) 7]
Test Case: 230 | Input/Output: [(99 27 15 65) 15]
Test Case: 231 | Input/Output: [(89 10 4 0) 0]
Test Case: 232 | Input/Output: [(85 33 71 2) 2]
Test Case: 233 | Input/Output: [(16 21 44 13) 13]
Test Case: 234 | Input/Output: [(63 52 35 47) 35]
Test Case: 235 | Input/Output: [(48 68 79 44) 44]
Test Case: 236 | Input/Output: [(28 68 84 85) 28]
Test Case: 237 | Input/Output: [(8 40 41 59) 8]
Test Case: 238 | Input/Output: [(33 84 21 70) 21]
Test Case: 239 | Input/Output: [(84 45 22 40) 22]
Test Case: 240 | Input/Output: [(3 62 84 2) 2]
Test Case: 241 | Input/Output: [(38 79 9 83) 9]
Test Case: 242 | Input/Output: [(22 91 29 10) 10]
Test Case: 243 | Input/Output: [(47 79 1 35) 1]
Test Case: 244 | Input/Output: [(64 73 49 60) 49]
Test Case: 245 | Input/Output: [(0 35 60 85) 0]
Test Case: 246 | Input/Output: [(72 42 66 60) 42]
Test Case: 247 | Input/Output: [(95 79 43 48) 43]
Test Case: 248 | Input/Output: [(31 11 92 12) 11]
Test Case: 249 | Input/Output: [(15 2 72 17) 2]
Test Case: 250 | Input/Output: [(70 48 95 83) 48]
Test Case: 251 | Input/Output: [(4 86 1 33) 1]
Test Case: 252 | Input/Output: [(45 98 74 6) 6]
Test Case: 253 | Input/Output: [(44 33 77 0) 0]
Test Case: 254 | Input/Output: [(79 68 25 4) 4]
Test Case: 255 | Input/Output: [(79 81 91 22) 22]
Test Case: 256 | Input/Output: [(6 26 59 7) 6]
Test Case: 257 | Input/Output: [(1 58 2 23) 1]
Test Case: 258 | Input/Output: [(58 91 29 24) 24]
Test Case: 259 | Input/Output: [(51 6 10 30) 6]
Test Case: 260 | Input/Output: [(94 99 29 43) 29]
Test Case: 261 | Input/Output: [(38 72 39 38) 38]
Test Case: 262 | Input/Output: [(21 98 67 66) 21]
Test Case: 263 | Input/Output: [(99 59 69 61) 59]
Test Case: 264 | Input/Output: [(0 90 84 7) 0]
Test Case: 265 | Input/Output: [(46 24 96 94) 24]
Test Case: 266 | Input/Output: [(19 13 30 35) 13]
Test Case: 267 | Input/Output: [(65 48 77 61) 48]
Test Case: 268 | Input/Output: [(82 25 58 57) 25]
Test Case: 269 | Input/Output: [(86 94 10 7) 7]
Test Case: 270 | Input/Output: [(66 45 18 34) 18]
Test Case: 271 | Input/Output: [(95 54 85 45) 45]
Test Case: 272 | Input/Output: [(16 5 39 81) 5]
Test Case: 273 | Input/Output: [(91 20 91 19) 19]
Test Case: 274 | Input/Output: [(87 25 94 35) 25]
Test Case: 275 | Input/Output: [(23 78 90 50) 23]
Test Case: 276 | Input/Output: [(89 33 37 27) 27]
Test Case: 277 | Input/Output: [(93 67 7 21) 7]
Test Case: 278 | Input/Output: [(3 20 97 17) 3]
Test Case: 279 | Input/Output: [(59 22 24 53) 22]
Test Case: 280 | Input/Output: [(40 57 98 30) 30]
Test Case: 281 | Input/Output: [(49 46 23 89) 23]
Test Case: 282 | Input/Output: [(29 83 13 56) 13]
Test Case: 283 | Input/Output: [(30 58 20 60) 20]
Test Case: 284 | Input/Output: [(2 43 8 43) 2]
Test Case: 285 | Input/Output: [(72 78 64 28) 28]
Test Case: 286 | Input/Output: [(17 59 36 62) 17]
Test Case: 287 | Input/Output: [(52 95 10 75) 10]
Test Case: 288 | Input/Output: [(68 56 56 23) 23]
Test Case: 289 | Input/Output: [(97 93 64 22) 22]
Test Case: 290 | Input/Output: [(36 72 10 0) 0]
Test Case: 291 | Input/Output: [(54 9 38 76) 9]
Test Case: 292 | Input/Output: [(2 90 11 68) 2]
Test Case: 293 | Input/Output: [(34 3 50 46) 3]
Test Case: 294 | Input/Output: [(83 63 64 73) 63]
Test Case: 295 | Input/Output: [(76 51 17 32) 17]
Test Case: 296 | Input/Output: [(11 34 99 79) 11]
Test Case: 297 | Input/Output: [(42 78 66 4) 4]
Test Case: 298 | Input/Output: [(61 66 35 27) 27]
Test Case: 299 | Input/Output: [(1 44 94 77) 1]
Test Case: 300 | Input/Output: [(65 83 49 43) 43]
Test Case: 301 | Input/Output: [(57 31 65 79) 31]
Test Case: 302 | Input/Output: [(26 45 91 85) 26]
Test Case: 303 | Input/Output: [(77 78 5 29) 5]
Test Case: 304 | Input/Output: [(30 86 40 16) 16]
Test Case: 305 | Input/Output: [(23 17 63 48) 17]
Test Case: 306 | Input/Output: [(62 87 34 85) 34]
Test Case: 307 | Input/Output: [(65 80 33 12) 12]
Test Case: 308 | Input/Output: [(67 75 30 97) 30]
Test Case: 309 | Input/Output: [(30 4 75 74) 4]
Test Case: 310 | Input/Output: [(1 12 51 99) 1]
Test Case: 311 | Input/Output: [(59 1 51 30) 1]
Test Case: 312 | Input/Output: [(18 79 94 76) 18]
Test Case: 313 | Input/Output: [(0 79 67 91) 0]
Test Case: 314 | Input/Output: [(99 10 16 93) 10]
Test Case: 315 | Input/Output: [(25 26 80 75) 25]
Test Case: 316 | Input/Output: [(5 3 64 62) 3]
Test Case: 317 | Input/Output: [(77 50 67 44) 44]
Test Case: 318 | Input/Output: [(68 85 5 89) 5]
Test Case: 319 | Input/Output: [(21 14 10 93) 10]
Test Case: 320 | Input/Output: [(81 90 51 47) 47]
Test Case: 321 | Input/Output: [(58 92 99 68) 58]
Test Case: 322 | Input/Output: [(66 60 43 75) 43]
Test Case: 323 | Input/Output: [(10 67 54 78) 10]
Test Case: 324 | Input/Output: [(6 25 100 49) 6]
Test Case: 325 | Input/Output: [(9 69 64 13) 9]
Test Case: 326 | Input/Output: [(0 2 7 56) 0]
Test Case: 327 | Input/Output: [(73 65 85 92) 65]
Test Case: 328 | Input/Output: [(60 28 40 76) 28]
Test Case: 329 | Input/Output: [(40 70 56 35) 35]
Test Case: 330 | Input/Output: [(32 80 45 22) 22]
Test Case: 331 | Input/Output: [(98 58 46 61) 46]
Test Case: 332 | Input/Output: [(85 43 37 74) 37]
Test Case: 333 | Input/Output: [(50 90 36 8) 8]
Test Case: 334 | Input/Output: [(15 61 41 53) 15]
Test Case: 335 | Input/Output: [(44 85 99 54) 44]
Test Case: 336 | Input/Output: [(69 30 49 89) 30]
Test Case: 337 | Input/Output: [(82 52 26 29) 26]
Test Case: 338 | Input/Output: [(3 87 85 95) 3]
Test Case: 339 | Input/Output: [(96 12 96 37) 12]
Test Case: 340 | Input/Output: [(51 53 68 43) 43]
Test Case: 341 | Input/Output: [(34 36 49 89) 34]
Test Case: 342 | Input/Output: [(36 1 5 14) 1]
Test Case: 343 | Input/Output: [(34 20 40 57) 20]
Test Case: 344 | Input/Output: [(17 36 67 17) 17]
Test Case: 345 | Input/Output: [(61 95 2 92) 2]
Test Case: 346 | Input/Output: [(88 24 87 95) 24]
Test Case: 347 | Input/Output: [(71 57 76 97) 57]
Test Case: 348 | Input/Output: [(50 98 69 27) 27]
Test Case: 349 | Input/Output: [(47 30 60 61) 30]
Test Case: 350 | Input/Output: [(79 76 58 44) 44]
Test Case: 351 | Input/Output: [(26 69 86 6) 6]
Test Case: 352 | Input/Output: [(35 26 91 80) 26]
Test Case: 353 | Input/Output: [(14 40 95 53) 14]
Test Case: 354 | Input/Output: [(17 52 86 71) 17]
Test Case: 355 | Input/Output: [(38 30 11 87) 11]
Test Case: 356 | Input/Output: [(63 94 28 59) 28]
Test Case: 357 | Input/Output: [(54 60 59 83) 54]
Test Case: 358 | Input/Output: [(33 98 83 74) 33]
Test Case: 359 | Input/Output: [(9 36 54 5) 5]
Test Case: 360 | Input/Output: [(100 64 51 42) 42]
Test Case: 361 | Input/Output: [(23 25 26 56) 23]
Test Case: 362 | Input/Output: [(90 23 62 43) 23]
Test Case: 363 | Input/Output: [(66 38 57 45) 38]
Test Case: 364 | Input/Output: [(79 6 39 44) 6]
Test Case: 365 | Input/Output: [(30 41 68 27) 27]
Test Case: 366 | Input/Output: [(58 74 33 44) 33]
Test Case: 367 | Input/Output: [(38 14 85 55) 14]
Test Case: 368 | Input/Output: [(2 13 3 94) 2]
Test Case: 369 | Input/Output: [(46 42 13 38) 13]
Test Case: 370 | Input/Output: [(71 53 27 60) 27]
Test Case: 371 | Input/Output: [(48 41 60 84) 41]
Test Case: 372 | Input/Output: [(10 58 17 70) 10]
Test Case: 373 | Input/Output: [(5 1 38 34) 1]
Test Case: 374 | Input/Output: [(8 40 30 68) 8]
Test Case: 375 | Input/Output: [(96 6 75 17) 6]
Test Case: 376 | Input/Output: [(17 38 76 94) 17]
Test Case: 377 | Input/Output: [(41 65 47 92) 41]
Test Case: 378 | Input/Output: [(20 76 36 12) 12]
Test Case: 379 | Input/Output: [(27 76 28 16) 16]
Test Case: 380 | Input/Output: [(96 71 40 65) 40]
Test Case: 381 | Input/Output: [(29 62 40 30) 29]
Test Case: 382 | Input/Output: [(50 52 33 89) 33]
Test Case: 383 | Input/Output: [(79 87 19 86) 19]
Test Case: 384 | Input/Output: [(77 99 67 5) 5]
Test Case: 385 | Input/Output: [(58 26 97 13) 13]
Test Case: 386 | Input/Output: [(94 38 49 28) 28]
Test Case: 387 | Input/Output: [(2 17 13 36) 2]
Test Case: 388 | Input/Output: [(66 20 47 25) 20]
Test Case: 389 | Input/Output: [(86 90 6 95) 6]
Test Case: 390 | Input/Output: [(28 70 74 69) 28]
Test Case: 391 | Input/Output: [(80 58 2 47) 2]
Test Case: 392 | Input/Output: [(10 64 87 48) 10]
Test Case: 393 | Input/Output: [(96 18 66 98) 18]
Test Case: 394 | Input/Output: [(73 81 72 59) 59]
Test Case: 395 | Input/Output: [(16 48 44 28) 16]
Test Case: 396 | Input/Output: [(68 79 76 66) 66]
Test Case: 397 | Input/Output: [(26 33 25 52) 25]
Test Case: 398 | Input/Output: [(38 96 19 98) 19]
Test Case: 399 | Input/Output: [(74 79 63 60) 60]
Test Case: 400 | Input/Output: [(69 12 70 -55) -55]
Test Case: 401 | Input/Output: [(-24 -95 100 16) -95]
Test Case: 402 | Input/Output: [(-80 -20 56 -34) -80]
Test Case: 403 | Input/Output: [(48 37 -19 -96) -96]
Test Case: 404 | Input/Output: [(20 18 57 -38) -38]
Test Case: 405 | Input/Output: [(-54 44 -42 41) -54]
Test Case: 406 | Input/Output: [(52 -77 2 86) -77]
Test Case: 407 | Input/Output: [(16 -53 -13 -27) -53]
Test Case: 408 | Input/Output: [(-91 -16 30 -80) -91]
Test Case: 409 | Input/Output: [(-63 70 44 92) -63]
Test Case: 410 | Input/Output: [(14 97 77 7) 7]
Test Case: 411 | Input/Output: [(63 -94 -85 -90) -94]
Test Case: 412 | Input/Output: [(68 56 49 -75) -75]
Test Case: 413 | Input/Output: [(-90 84 -95 29) -95]
Test Case: 414 | Input/Output: [(-82 54 78 22) -82]
Test Case: 415 | Input/Output: [(-53 -34 -92 -17) -92]
Test Case: 416 | Input/Output: [(26 14 -26 98) -26]
Test Case: 417 | Input/Output: [(-96 20 -94 4) -96]
Test Case: 418 | Input/Output: [(83 -27 -45 33) -45]
Test Case: 419 | Input/Output: [(23 -10 71 -59) -59]
Test Case: 420 | Input/Output: [(-6 60 -48 -84) -84]
Test Case: 421 | Input/Output: [(-88 -39 -21 9) -88]
Test Case: 422 | Input/Output: [(94 -95 71 50) -95]
Test Case: 423 | Input/Output: [(9 10 17 94) 9]
Test Case: 424 | Input/Output: [(-61 -20 18 -94) -94]
Test Case: 425 | Input/Output: [(7 -80 -72 46) -80]
Test Case: 426 | Input/Output: [(21 58 24 -37) -37]
Test Case: 427 | Input/Output: [(1 93 -94 69) -94]
Test Case: 428 | Input/Output: [(-22 -88 52 22) -88]
Test Case: 429 | Input/Output: [(0 -74 -46 -64) -74]
Test Case: 430 | Input/Output: [(-73 28 -25 10) -73]
Test Case: 431 | Input/Output: [(-51 6 -35 -81) -81]
Test Case: 432 | Input/Output: [(75 25 23 27) 23]
Test Case: 433 | Input/Output: [(-46 7 -87 -72) -87]
Test Case: 434 | Input/Output: [(-73 23 -94 36) -94]
Test Case: 435 | Input/Output: [(35 37 -13 99) -13]
Test Case: 436 | Input/Output: [(-37 -18 17 -46) -46]
Test Case: 437 | Input/Output: [(-76 -81 -27 19) -81]
Test Case: 438 | Input/Output: [(-24 -93 34 79) -93]
Test Case: 439 | Input/Output: [(-15 10 50 16) -15]
Test Case: 440 | Input/Output: [(-64 -15 -71 64) -71]
Test Case: 441 | Input/Output: [(-62 -34 79 -58) -62]
Test Case: 442 | Input/Output: [(-62 -50 -17 85) -62]
Test Case: 443 | Input/Output: [(-11 86 37 -60) -60]
Test Case: 444 | Input/Output: [(27 9 -29 96) -29]
Test Case: 445 | Input/Output: [(-10 99 -69 37) -69]
Test Case: 446 | Input/Output: [(-61 -56 73 -30) -61]
Test Case: 447 | Input/Output: [(81 -99 1 42) -99]
Test Case: 448 | Input/Output: [(-64 74 0 -62) -64]
Test Case: 449 | Input/Output: [(11 94 -99 13) -99]
Test Case: 450 | Input/Output: [(18 -3 29 97) -3]
Test Case: 451 | Input/Output: [(-91 -97 -92 -5) -97]
Test Case: 452 | Input/Output: [(-6 46 71 -50) -50]
Test Case: 453 | Input/Output: [(52 -13 -83 6) -83]
Test Case: 454 | Input/Output: [(58 93 44 -84) -84]
Test Case: 455 | Input/Output: [(96 -8 -96 44) -96]
Test Case: 456 | Input/Output: [(-92 -45 -2 65) -92]
Test Case: 457 | Input/Output: [(-10 31 -57 41) -57]
Test Case: 458 | Input/Output: [(-78 4 -74 -76) -78]
Test Case: 459 | Input/Output: [(-55 -33 -59 80) -59]
Test Case: 460 | Input/Output: [(59 72 32 -19) -19]
Test Case: 461 | Input/Output: [(-40 55 49 -44) -44]
Test Case: 462 | Input/Output: [(6 13 58 -8) -8]
Test Case: 463 | Input/Output: [(1 8 31 -19) -19]
Test Case: 464 | Input/Output: [(18 -71 87 72) -71]
Test Case: 465 | Input/Output: [(87 -4 -87 -36) -87]
Test Case: 466 | Input/Output: [(-21 56 -86 64) -86]
Test Case: 467 | Input/Output: [(-96 80 -84 97) -96]
Test Case: 468 | Input/Output: [(-21 23 -61 81) -61]
Test Case: 469 | Input/Output: [(88 12 90 -62) -62]
Test Case: 470 | Input/Output: [(-72 56 89 31) -72]
Test Case: 471 | Input/Output: [(-16 28 92 -35) -35]
Test Case: 472 | Input/Output: [(50 -48 -30 53) -48]
Test Case: 473 | Input/Output: [(-56 -26 -33 18) -56]
Test Case: 474 | Input/Output: [(-36 3 50 70) -36]
Test Case: 475 | Input/Output: [(2 97 20 94) 2]
Test Case: 476 | Input/Output: [(-40 99 -73 70) -73]
Test Case: 477 | Input/Output: [(-90 -39 -50 -36) -90]
Test Case: 478 | Input/Output: [(61 -51 32 14) -51]
Test Case: 479 | Input/Output: [(60 37 15 -47) -47]
Test Case: 480 | Input/Output: [(-73 75 -60 -29) -73]
Test Case: 481 | Input/Output: [(-32 -14 36 -33) -33]
Test Case: 482 | Input/Output: [(-28 74 35 -76) -76]
Test Case: 483 | Input/Output: [(92 0 33 -78) -78]
Test Case: 484 | Input/Output: [(22 0 -97 -61) -97]
Test Case: 485 | Input/Output: [(-51 -99 -30 -7) -99]
Test Case: 486 | Input/Output: [(100 73 77 35) 35]
Test Case: 487 | Input/Output: [(47 20 27 47) 20]
Test Case: 488 | Input/Output: [(-17 -98 -6 -5) -98]
Test Case: 489 | Input/Output: [(-67 -29 -4 -15) -67]
Test Case: 490 | Input/Output: [(-50 97 71 -17) -50]
Test Case: 491 | Input/Output: [(73 -51 -7 -70) -70]
Test Case: 492 | Input/Output: [(71 -14 4 62) -14]
Test Case: 493 | Input/Output: [(-2 69 -62 -82) -82]
Test Case: 494 | Input/Output: [(5 -85 19 3) -85]
Test Case: 495 | Input/Output: [(49 73 -26 -36) -36]
Test Case: 496 | Input/Output: [(40 -61 1 51) -61]
Test Case: 497 | Input/Output: [(28 -18 -82 -58) -82]
Test Case: 498 | Input/Output: [(-52 4 -86 72) -86]
Test Case: 499 | Input/Output: [(-58 -80 -60 -60) -80]
Test Case: 500 | Input/Output: [(-18 82 -20 -14) -20]
Test Case: 501 | Input/Output: [(-6 59 41 -53) -53]
Test Case: 502 | Input/Output: [(-2 -69 -51 95) -69]
Test Case: 503 | Input/Output: [(46 79 99 90) 46]
Test Case: 504 | Input/Output: [(-68 0 -53 -67) -68]
Test Case: 505 | Input/Output: [(-22 38 -46 -48) -48]
Test Case: 506 | Input/Output: [(13 56 51 48) 13]
Test Case: 507 | Input/Output: [(78 16 31 -49) -49]
Test Case: 508 | Input/Output: [(-84 13 7 -73) -84]
Test Case: 509 | Input/Output: [(86 24 26 69) 24]
Test Case: 510 | Input/Output: [(-3 63 -34 26) -34]
Test Case: 511 | Input/Output: [(-6 -13 -37 -62) -62]
Test Case: 512 | Input/Output: [(-57 41 -83 -46) -83]
Test Case: 513 | Input/Output: [(-83 -24 -47 75) -83]
Test Case: 514 | Input/Output: [(-57 4 -8 -3) -57]
Test Case: 515 | Input/Output: [(51 65 -25 57) -25]
Test Case: 516 | Input/Output: [(-50 -74 -61 51) -74]
Test Case: 517 | Input/Output: [(62 2 -84 -31) -84]
Test Case: 518 | Input/Output: [(41 -81 37 62) -81]
Test Case: 519 | Input/Output: [(71 -42 7 34) -42]
Test Case: 520 | Input/Output: [(-33 28 49 -81) -81]
Test Case: 521 | Input/Output: [(-30 -90 -72 -74) -90]
Test Case: 522 | Input/Output: [(77 37 -84 15) -84]
Test Case: 523 | Input/Output: [(37 -34 -37 58) -37]
Test Case: 524 | Input/Output: [(29 -62 -16 -61) -62]
Test Case: 525 | Input/Output: [(30 -88 24 -78) -88]
Test Case: 526 | Input/Output: [(-32 -63 -8 68) -63]
Test Case: 527 | Input/Output: [(20 64 -59 -2) -59]
Test Case: 528 | Input/Output: [(12 -75 -39 92) -75]
Test Case: 529 | Input/Output: [(-75 25 -40 50) -75]
Test Case: 530 | Input/Output: [(17 -72 60 -27) -72]
Test Case: 531 | Input/Output: [(-74 85 57 60) -74]
Test Case: 532 | Input/Output: [(-57 95 24 -26) -57]
Test Case: 533 | Input/Output: [(-83 13 -82 -64) -83]
Test Case: 534 | Input/Output: [(9 -64 -88 -54) -88]
Test Case: 535 | Input/Output: [(6 -41 76 -71) -71]
Test Case: 536 | Input/Output: [(1 -12 -93 -38) -93]
Test Case: 537 | Input/Output: [(96 -30 -78 -64) -78]
Test Case: 538 | Input/Output: [(96 -28 -90 -14) -90]
Test Case: 539 | Input/Output: [(2 33 79 98) 2]
Test Case: 540 | Input/Output: [(79 19 79 -71) -71]
Test Case: 541 | Input/Output: [(-47 -43 92 -80) -80]
Test Case: 542 | Input/Output: [(69 -61 81 100) -61]
Test Case: 543 | Input/Output: [(93 -90 29 40) -90]
Test Case: 544 | Input/Output: [(10 -41 -81 -60) -81]
Test Case: 545 | Input/Output: [(-39 -31 56 33) -39]
Test Case: 546 | Input/Output: [(-85 -12 54 81) -85]
Test Case: 547 | Input/Output: [(-81 -32 4 -54) -81]
Test Case: 548 | Input/Output: [(-46 35 96 13) -46]
Test Case: 549 | Input/Output: [(1 14 29 94) 1]
Test Case: 550 | Input/Output: [(33 -28 56 5) -28]
Test Case: 551 | Input/Output: [(25 -28 56 59) -28]
Test Case: 552 | Input/Output: [(-61 76 6 -97) -97]
Test Case: 553 | Input/Output: [(-22 5 28 -5) -22]
Test Case: 554 | Input/Output: [(89 -18 96 -9) -18]
Test Case: 555 | Input/Output: [(-31 -8 62 -75) -75]
Test Case: 556 | Input/Output: [(91 -86 -100 -59) -100]
Test Case: 557 | Input/Output: [(70 -5 -65 -72) -72]
Test Case: 558 | Input/Output: [(41 73 12 -34) -34]
Test Case: 559 | Input/Output: [(-81 39 25 97) -81]
Test Case: 560 | Input/Output: [(25 46 88 31) 25]
Test Case: 561 | Input/Output: [(8 -46 62 -10) -46]
Test Case: 562 | Input/Output: [(63 71 50 37) 37]
Test Case: 563 | Input/Output: [(-49 -92 93 100) -92]
Test Case: 564 | Input/Output: [(37 -65 63 11) -65]
Test Case: 565 | Input/Output: [(-45 46 37 -97) -97]
Test Case: 566 | Input/Output: [(73 -60 -73 91) -73]
Test Case: 567 | Input/Output: [(81 -71 57 92) -71]
Test Case: 568 | Input/Output: [(-36 32 90 -47) -47]
Test Case: 569 | Input/Output: [(-33 -17 -16 -67) -67]
Test Case: 570 | Input/Output: [(-25 -95 -46 56) -95]
Test Case: 571 | Input/Output: [(-10 4 15 12) -10]
Test Case: 572 | Input/Output: [(45 51 -48 9) -48]
Test Case: 573 | Input/Output: [(61 -43 79 80) -43]
Test Case: 574 | Input/Output: [(-24 41 10 80) -24]
Test Case: 575 | Input/Output: [(9 18 -54 20) -54]
Test Case: 576 | Input/Output: [(44 -5 -51 11) -51]
Test Case: 577 | Input/Output: [(-24 12 45 21) -24]
Test Case: 578 | Input/Output: [(-76 19 61 28) -76]
Test Case: 579 | Input/Output: [(33 -2 -89 37) -89]
Test Case: 580 | Input/Output: [(92 -73 37 96) -73]
Test Case: 581 | Input/Output: [(61 29 -92 -24) -92]
Test Case: 582 | Input/Output: [(76 -55 48 -88) -88]
Test Case: 583 | Input/Output: [(-48 -9 -17 74) -48]
Test Case: 584 | Input/Output: [(85 -95 28 63) -95]
Test Case: 585 | Input/Output: [(47 -79 5 -2) -79]
Test Case: 586 | Input/Output: [(82 86 80 -78) -78]
Test Case: 587 | Input/Output: [(55 -28 -75 6) -75]
Test Case: 588 | Input/Output: [(10 -75 -38 -7) -75]
Test Case: 589 | Input/Output: [(-13 6 82 -6) -13]
Test Case: 590 | Input/Output: [(-94 77 -37 86) -94]
Test Case: 591 | Input/Output: [(-49 16 -66 -61) -66]
Test Case: 592 | Input/Output: [(-86 -53 71 39) -86]
Test Case: 593 | Input/Output: [(41 -57 -36 -48) -57]
Test Case: 594 | Input/Output: [(-89 -30 -7 15) -89]
Test Case: 595 | Input/Output: [(-90 63 42 58) -90]
Test Case: 596 | Input/Output: [(17 -41 40 -48) -48]
Test Case: 597 | Input/Output: [(6 18 -98 -62) -98]
Test Case: 598 | Input/Output: [(82 -42 13 50) -42]
Test Case: 599 | Input/Output: [(-40 3 88 -55) -55]
Test Case: 600 | Input/Output: [(97 63 -60 89) -60]
Test Case: 601 | Input/Output: [(-12 19 64 -73) -73]
Test Case: 602 | Input/Output: [(-59 25 41 95) -59]
Test Case: 603 | Input/Output: [(0 -76 -67 -86) -86]
Test Case: 604 | Input/Output: [(11 8 -67 53) -67]
Test Case: 605 | Input/Output: [(-76 -87 -75 50) -87]
Test Case: 606 | Input/Output: [(4 -89 -12 98) -89]
Test Case: 607 | Input/Output: [(-51 19 20 -51) -51]
Test Case: 608 | Input/Output: [(90 -9 -1 92) -9]
Test Case: 609 | Input/Output: [(46 32 -70 18) -70]
Test Case: 610 | Input/Output: [(-18 83 97 -2) -18]
Test Case: 611 | Input/Output: [(34 82 -81 -73) -81]
Test Case: 612 | Input/Output: [(32 18 11 72) 11]
Test Case: 613 | Input/Output: [(78 24 76 -88) -88]
Test Case: 614 | Input/Output: [(18 59 54 -91) -91]
Test Case: 615 | Input/Output: [(0 68 0 7) 0]
Test Case: 616 | Input/Output: [(-2 71 -21 11) -21]
Test Case: 617 | Input/Output: [(41 -57 -13 15) -57]
Test Case: 618 | Input/Output: [(17 -7 -14 83) -14]
Test Case: 619 | Input/Output: [(41 98 68 -40) -40]
Test Case: 620 | Input/Output: [(85 -58 -17 71) -58]
Test Case: 621 | Input/Output: [(-64 -35 -49 61) -64]
Test Case: 622 | Input/Output: [(8 33 36 -36) -36]
Test Case: 623 | Input/Output: [(23 7 -98 -23) -98]
Test Case: 624 | Input/Output: [(-62 -4 37 -71) -71]
Test Case: 625 | Input/Output: [(-12 12 -37 -79) -79]
Test Case: 626 | Input/Output: [(-2 50 44 65) -2]
Test Case: 627 | Input/Output: [(100 -100 24 84) -100]
Test Case: 628 | Input/Output: [(85 37 90 -10) -10]
Test Case: 629 | Input/Output: [(85 -39 -36 -92) -92]
Test Case: 630 | Input/Output: [(26 -54 6 76) -54]
Test Case: 631 | Input/Output: [(-93 -44 -14 -69) -93]
Test Case: 632 | Input/Output: [(-17 -93 84 -57) -93]
Test Case: 633 | Input/Output: [(69 24 92 -54) -54]
Test Case: 634 | Input/Output: [(-90 -11 67 87) -90]
Test Case: 635 | Input/Output: [(81 -46 -65 46) -65]
Test Case: 636 | Input/Output: [(-74 -74 19 92) -74]
Test Case: 637 | Input/Output: [(-33 -38 -74 90) -74]
Test Case: 638 | Input/Output: [(85 -4 -9 22) -9]
Test Case: 639 | Input/Output: [(-8 -19 79 -100) -100]
Test Case: 640 | Input/Output: [(-5 -55 -57 -26) -57]
Test Case: 641 | Input/Output: [(-22 55 27 -35) -35]
Test Case: 642 | Input/Output: [(-10 -51 76 55) -51]
Test Case: 643 | Input/Output: [(70 75 -2 -30) -30]
Test Case: 644 | Input/Output: [(-84 -27 -22 3) -84]
Test Case: 645 | Input/Output: [(42 10 55 -56) -56]
Test Case: 646 | Input/Output: [(72 69 81 77) 69]
Test Case: 647 | Input/Output: [(33 76 -84 -84) -84]
Test Case: 648 | Input/Output: [(99 -64 10 29) -64]
Test Case: 649 | Input/Output: [(25 77 95 26) 25]
Test Case: 650 | Input/Output: [(69 26 3 -91) -91]
Test Case: 651 | Input/Output: [(4 -77 94 2) -77]
Test Case: 652 | Input/Output: [(45 -51 54 74) -51]
Test Case: 653 | Input/Output: [(-36 -65 66 91) -65]
Test Case: 654 | Input/Output: [(5 -4 -12 64) -12]
Test Case: 655 | Input/Output: [(42 -33 -37 -16) -37]
Test Case: 656 | Input/Output: [(-52 -55 26 11) -55]
Test Case: 657 | Input/Output: [(86 -61 -38 31) -61]
Test Case: 658 | Input/Output: [(91 -94 50 -94) -94]
Test Case: 659 | Input/Output: [(54 -93 46 -66) -93]
Test Case: 660 | Input/Output: [(-54 -93 -42 20) -93]
Test Case: 661 | Input/Output: [(35 51 19 -18) -18]
Test Case: 662 | Input/Output: [(55 54 -50 55) -50]
Test Case: 663 | Input/Output: [(81 33 15 2) 2]
Test Case: 664 | Input/Output: [(-100 -45 -32 65) -100]
Test Case: 665 | Input/Output: [(-3 -56 7 -83) -83]
Test Case: 666 | Input/Output: [(58 -74 -32 -65) -74]
Test Case: 667 | Input/Output: [(-10 -74 60 -1) -74]
Test Case: 668 | Input/Output: [(100 -59 28 -89) -89]
Test Case: 669 | Input/Output: [(-7 -26 5 -46) -46]
Test Case: 670 | Input/Output: [(94 -87 -70 -8) -87]
Test Case: 671 | Input/Output: [(-85 -20 -15 -19) -85]
Test Case: 672 | Input/Output: [(45 -80 79 -43) -80]
Test Case: 673 | Input/Output: [(-37 20 71 24) -37]
Test Case: 674 | Input/Output: [(-19 -40 90 27) -40]
Test Case: 675 | Input/Output: [(74 -57 8 -47) -57]
Test Case: 676 | Input/Output: [(-65 65 56 80) -65]
Test Case: 677 | Input/Output: [(56 -25 -76 -96) -96]
Test Case: 678 | Input/Output: [(-26 -33 94 7) -33]
Test Case: 679 | Input/Output: [(-71 -42 40 -86) -86]
Test Case: 680 | Input/Output: [(-18 -10 -83 -11) -83]
Test Case: 681 | Input/Output: [(3 -87 -1 -38) -87]
Test Case: 682 | Input/Output: [(-79 -12 -17 -94) -94]
Test Case: 683 | Input/Output: [(49 -51 -54 -66) -66]
Test Case: 684 | Input/Output: [(-80 -68 -18 13) -80]
Test Case: 685 | Input/Output: [(80 57 -52 98) -52]
Test Case: 686 | Input/Output: [(97 -95 44 -25) -95]
Test Case: 687 | Input/Output: [(8 53 -43 -36) -43]
Test Case: 688 | Input/Output: [(-26 -9 -92 -91) -92]
Test Case: 689 | Input/Output: [(2 8 -83 -72) -83]
Test Case: 690 | Input/Output: [(-93 78 -57 80) -93]
Test Case: 691 | Input/Output: [(-18 82 -81 -43) -81]
Test Case: 692 | Input/Output: [(-83 77 -63 -96) -96]
Test Case: 693 | Input/Output: [(54 -89 42 -86) -89]
Test Case: 694 | Input/Output: [(-55 72 41 78) -55]
Test Case: 695 | Input/Output: [(-43 -82 18 0) -82]
Test Case: 696 | Input/Output: [(4 -53 -89 -20) -89]
Test Case: 697 | Input/Output: [(9 -48 34 71) -48]
Test Case: 698 | Input/Output: [(79 55 95 -73) -73]
Test Case: 699 | Input/Output: [(-44 -97 90 -38) -97]
Test Case: 700 | Input/Output: [(-17 90 -47 96) -47]
Test Case: 701 | Input/Output: [(-45 78 40 72) -45]
Test Case: 702 | Input/Output: [(-11 -40 68 54) -40]
Test Case: 703 | Input/Output: [(-85 -69 -71 -71) -85]
Test Case: 704 | Input/Output: [(17 81 56 -67) -67]
Test Case: 705 | Input/Output: [(-89 4 55 9) -89]
Test Case: 706 | Input/Output: [(22 77 -64 -50) -64]
Test Case: 707 | Input/Output: [(49 92 4 -75) -75]
Test Case: 708 | Input/Output: [(-100 41 -6 -89) -100]
Test Case: 709 | Input/Output: [(4 -96 20 21) -96]
Test Case: 710 | Input/Output: [(-50 -60 5 16) -60]
Test Case: 711 | Input/Output: [(-22 -55 25 62) -55]
Test Case: 712 | Input/Output: [(-98 2 4 -22) -98]
Test Case: 713 | Input/Output: [(-72 84 26 39) -72]
Test Case: 714 | Input/Output: [(5 98 17 27) 5]
Test Case: 715 | Input/Output: [(59 -44 17 -84) -84]
Test Case: 716 | Input/Output: [(52 77 -97 -70) -97]
Test Case: 717 | Input/Output: [(-88 10 56 89) -88]
Test Case: 718 | Input/Output: [(-59 29 -68 49) -68]
Test Case: 719 | Input/Output: [(-42 -57 35 45) -57]
Test Case: 720 | Input/Output: [(56 21 -36 -83) -83]
Test Case: 721 | Input/Output: [(30 -65 11 21) -65]
Test Case: 722 | Input/Output: [(-30 -55 33 -16) -55]
Test Case: 723 | Input/Output: [(-21 -35 95 6) -35]
Test Case: 724 | Input/Output: [(45 89 -56 67) -56]
Test Case: 725 | Input/Output: [(-29 -29 -42 -88) -88]
Test Case: 726 | Input/Output: [(16 -58 35 97) -58]
Test Case: 727 | Input/Output: [(30 -74 93 74) -74]
Test Case: 728 | Input/Output: [(83 53 -81 -36) -81]
Test Case: 729 | Input/Output: [(75 -53 -22 -73) -73]
Test Case: 730 | Input/Output: [(-73 -36 29 79) -73]
Test Case: 731 | Input/Output: [(63 66 -66 65) -66]
Test Case: 732 | Input/Output: [(-24 48 29 24) -24]
Test Case: 733 | Input/Output: [(-26 -33 -74 -66) -74]
Test Case: 734 | Input/Output: [(32 38 83 74) 32]
Test Case: 735 | Input/Output: [(84 -37 98 82) -37]
Test Case: 736 | Input/Output: [(-44 -30 -66 87) -66]
Test Case: 737 | Input/Output: [(-81 -79 -15 62) -81]
Test Case: 738 | Input/Output: [(-96 -44 -33 18) -96]
Test Case: 739 | Input/Output: [(-76 32 -83 -56) -83]
Test Case: 740 | Input/Output: [(-89 -55 -30 -25) -89]
Test Case: 741 | Input/Output: [(63 68 76 59) 59]
Test Case: 742 | Input/Output: [(-20 -76 70 21) -76]
Test Case: 743 | Input/Output: [(63 -2 26 68) -2]
Test Case: 744 | Input/Output: [(60 -22 -92 48) -92]
Test Case: 745 | Input/Output: [(-25 100 -64 94) -64]
Test Case: 746 | Input/Output: [(-75 18 80 71) -75]
Test Case: 747 | Input/Output: [(-24 0 28 53) -24]
Test Case: 748 | Input/Output: [(33 4 52 -96) -96]
Test Case: 749 | Input/Output: [(-37 47 -79 94) -79]
Test Case: 750 | Input/Output: [(-46 66 76 69) -46]
Test Case: 751 | Input/Output: [(43 -69 -71 -7) -71]
Test Case: 752 | Input/Output: [(-13 -87 13 12) -87]
Test Case: 753 | Input/Output: [(4 -3 -85 -71) -85]
Test Case: 754 | Input/Output: [(-63 -39 -52 56) -63]
Test Case: 755 | Input/Output: [(49 -29 -2 -56) -56]
Test Case: 756 | Input/Output: [(-14 32 97 0) -14]
Test Case: 757 | Input/Output: [(-90 -71 8 35) -90]
Test Case: 758 | Input/Output: [(-18 -13 76 71) -18]
Test Case: 759 | Input/Output: [(100 0 21 62) 0]
Test Case: 760 | Input/Output: [(78 38 95 -99) -99]
Test Case: 761 | Input/Output: [(12 45 -7 84) -7]
Test Case: 762 | Input/Output: [(95 -69 0 78) -69]
Test Case: 763 | Input/Output: [(-52 -92 5 9) -92]
Test Case: 764 | Input/Output: [(-37 93 51 -53) -53]
Test Case: 765 | Input/Output: [(34 29 -40 74) -40]
Test Case: 766 | Input/Output: [(88 23 10 93) 10]
Test Case: 767 | Input/Output: [(-78 58 20 -21) -78]
Test Case: 768 | Input/Output: [(-94 39 -16 95) -94]
Test Case: 769 | Input/Output: [(58 86 7 69) 7]
Test Case: 770 | Input/Output: [(-97 14 75 56) -97]
Test Case: 771 | Input/Output: [(55 74 -88 -67) -88]
Test Case: 772 | Input/Output: [(60 -33 -26 -61) -61]
Test Case: 773 | Input/Output: [(16 -14 71 68) -14]
Test Case: 774 | Input/Output: [(28 -89 83 -53) -89]
Test Case: 775 | Input/Output: [(42 100 41 -55) -55]
Test Case: 776 | Input/Output: [(-49 69 -39 -83) -83]
Test Case: 777 | Input/Output: [(65 -8 -57 6) -57]
Test Case: 778 | Input/Output: [(33 46 6 -21) -21]
Test Case: 779 | Input/Output: [(-91 86 63 46) -91]
Test Case: 780 | Input/Output: [(-79 0 -32 -79) -79]
Test Case: 781 | Input/Output: [(41 55 -34 -45) -45]
Test Case: 782 | Input/Output: [(25 -6 -95 28) -95]
Test Case: 783 | Input/Output: [(-97 -33 -66 -60) -97]
Test Case: 784 | Input/Output: [(-42 -66 50 -80) -80]
Test Case: 785 | Input/Output: [(-24 -7 -62 35) -62]
Test Case: 786 | Input/Output: [(32 -32 55 15) -32]
Test Case: 787 | Input/Output: [(75 -43 -62 -19) -62]
Test Case: 788 | Input/Output: [(66 -10 -47 -90) -90]
Test Case: 789 | Input/Output: [(43 -38 64 23) -38]
Test Case: 790 | Input/Output: [(-70 -2 14 -22) -70]
Test Case: 791 | Input/Output: [(30 -32 -7 89) -32]
Test Case: 792 | Input/Output: [(71 -4 -44 41) -44]
Test Case: 793 | Input/Output: [(-79 -37 63 -64) -79]
Test Case: 794 | Input/Output: [(20 20 -62 -25) -62]
Test Case: 795 | Input/Output: [(54 80 74 -6) -6]
Test Case: 796 | Input/Output: [(-5 -72 -69 27) -72]
Test Case: 797 | Input/Output: [(87 69 -49 18) -49]
Test Case: 798 | Input/Output: [(35 55 -67 -85) -85]
Test Case: 799 | Input/Output: [(92 24 39 16) 16]
Test Case: 800 | Input/Output: [(44 -62 -11 -90) -90]
Test Case: 801 | Input/Output: [(25 45 21 5) 5]
Test Case: 802 | Input/Output: [(18 73 39 93) 18]
Test Case: 803 | Input/Output: [(-37 5 -78 -34) -78]
Test Case: 804 | Input/Output: [(-29 -7 41 81) -29]
Test Case: 805 | Input/Output: [(94 11 -75 93) -75]
Test Case: 806 | Input/Output: [(-64 35 -17 -26) -64]
Test Case: 807 | Input/Output: [(90 93 -41 53) -41]
Test Case: 808 | Input/Output: [(82 70 -35 94) -35]
Test Case: 809 | Input/Output: [(96 -52 6 -79) -79]
Test Case: 810 | Input/Output: [(82 53 38 57) 38]
Test Case: 811 | Input/Output: [(-23 -80 -79 4) -80]
Test Case: 812 | Input/Output: [(-90 89 -1 92) -90]
Test Case: 813 | Input/Output: [(-40 47 97 -93) -93]
Test Case: 814 | Input/Output: [(4 -56 -61 -48) -61]
Test Case: 815 | Input/Output: [(-68 -31 37 20) -68]
Test Case: 816 | Input/Output: [(-57 28 -22 62) -57]
Test Case: 817 | Input/Output: [(-100 58 13 -100) -100]
Test Case: 818 | Input/Output: [(-87 44 14 -77) -87]
Test Case: 819 | Input/Output: [(-19 -13 -47 -2) -47]
Test Case: 820 | Input/Output: [(82 -67 -18 45) -67]
Test Case: 821 | Input/Output: [(-61 86 -72 49) -72]
Test Case: 822 | Input/Output: [(75 -33 -50 -56) -56]
Test Case: 823 | Input/Output: [(5 69 91 -57) -57]
Test Case: 824 | Input/Output: [(-39 -64 97 51) -64]
Test Case: 825 | Input/Output: [(16 -87 29 4) -87]
Test Case: 826 | Input/Output: [(-3 -81 -22 91) -81]
Test Case: 827 | Input/Output: [(84 54 -60 -25) -60]
Test Case: 828 | Input/Output: [(61 39 44 89) 39]
Test Case: 829 | Input/Output: [(-69 -19 25 -50) -69]
Test Case: 830 | Input/Output: [(-58 -73 82 -7) -73]
Test Case: 831 | Input/Output: [(-14 -84 -17 4) -84]
Test Case: 832 | Input/Output: [(37 7 -97 35) -97]
Test Case: 833 | Input/Output: [(-19 94 -24 26) -24]
Test Case: 834 | Input/Output: [(71 93 88 -13) -13]
Test Case: 835 | Input/Output: [(15 86 56 35) 15]
Test Case: 836 | Input/Output: [(64 -87 36 -19) -87]
Test Case: 837 | Input/Output: [(69 -94 -44 -23) -94]
Test Case: 838 | Input/Output: [(56 -2 76 -50) -50]
Test Case: 839 | Input/Output: [(90 77 24 -66) -66]
Test Case: 840 | Input/Output: [(8 8 31 25) 8]
Test Case: 841 | Input/Output: [(0 -29 44 48) -29]
Test Case: 842 | Input/Output: [(65 -45 -58 25) -58]
Test Case: 843 | Input/Output: [(-4 30 14 48) -4]
Test Case: 844 | Input/Output: [(26 19 75 100) 19]
Test Case: 845 | Input/Output: [(39 -53 93 -50) -53]
Test Case: 846 | Input/Output: [(-72 -8 -81 73) -81]
Test Case: 847 | Input/Output: [(96 -46 -50 -8) -50]
Test Case: 848 | Input/Output: [(17 0 -35 -32) -35]
Test Case: 849 | Input/Output: [(-90 79 24 -72) -90]
Test Case: 850 | Input/Output: [(23 -66 41 -44) -66]
Test Case: 851 | Input/Output: [(58 44 94 -65) -65]
Test Case: 852 | Input/Output: [(-50 57 -64 42) -64]
Test Case: 853 | Input/Output: [(-45 -93 77 -10) -93]
Test Case: 854 | Input/Output: [(-32 11 92 80) -32]
Test Case: 855 | Input/Output: [(15 -96 -20 33) -96]
Test Case: 856 | Input/Output: [(-37 -56 -70 9) -70]
Test Case: 857 | Input/Output: [(-59 1 21 21) -59]
Test Case: 858 | Input/Output: [(-88 -56 14 -61) -88]
Test Case: 859 | Input/Output: [(-42 84 -9 8) -42]
Test Case: 860 | Input/Output: [(16 -100 -4 55) -100]
Test Case: 861 | Input/Output: [(-52 7 70 61) -52]
Test Case: 862 | Input/Output: [(-100 19 94 -75) -100]
Test Case: 863 | Input/Output: [(5 -43 16 -27) -43]
Test Case: 864 | Input/Output: [(89 27 65 21) 21]
Test Case: 865 | Input/Output: [(8 75 -70 74) -70]
Test Case: 866 | Input/Output: [(-22 6 56 -38) -38]
Test Case: 867 | Input/Output: [(0 57 -67 79) -67]
Test Case: 868 | Input/Output: [(-60 -65 90 -81) -81]
Test Case: 869 | Input/Output: [(6 52 -99 78) -99]
Test Case: 870 | Input/Output: [(-93 35 -27 -81) -93]
Test Case: 871 | Input/Output: [(65 -17 -21 -2) -21]
Test Case: 872 | Input/Output: [(-9 56 -9 -3) -9]
Test Case: 873 | Input/Output: [(-28 -96 13 -36) -96]
Test Case: 874 | Input/Output: [(-2 50 -57 33) -57]
Test Case: 875 | Input/Output: [(-63 95 -69 -85) -85]
Test Case: 876 | Input/Output: [(37 -83 80 92) -83]
Test Case: 877 | Input/Output: [(28 -74 94 -17) -74]
Test Case: 878 | Input/Output: [(11 -17 -22 3) -22]
Test Case: 879 | Input/Output: [(93 7 -73 76) -73]
Test Case: 880 | Input/Output: [(-27 -11 -19 -96) -96]
Test Case: 881 | Input/Output: [(70 -5 69 11) -5]
Test Case: 882 | Input/Output: [(-61 -28 -77 78) -77]
Test Case: 883 | Input/Output: [(-5 76 13 77) -5]
Test Case: 884 | Input/Output: [(87 18 20 -81) -81]
Test Case: 885 | Input/Output: [(-82 -34 76 -70) -82]
Test Case: 886 | Input/Output: [(26 92 43 19) 19]
Test Case: 887 | Input/Output: [(47 49 -57 -50) -57]
Test Case: 888 | Input/Output: [(91 -80 -12 -54) -80]
Test Case: 889 | Input/Output: [(4 38 24 -75) -75]
Test Case: 890 | Input/Output: [(-8 -14 67 12) -14]
Test Case: 891 | Input/Output: [(98 -74 83 11) -74]
Test Case: 892 | Input/Output: [(38 32 53 62) 32]
Test Case: 893 | Input/Output: [(96 -61 -61 92) -61]
Test Case: 894 | Input/Output: [(-59 67 -94 92) -94]
Test Case: 895 | Input/Output: [(-99 100 -41 -97) -99]
Test Case: 896 | Input/Output: [(-4 -62 -12 -81) -81]
Test Case: 897 | Input/Output: [(21 -79 -12 -91) -91]
Test Case: 898 | Input/Output: [(23 31 -5 -93) -93]
Test Case: 899 | Input/Output: [(-45 68 88 68) -45]
Test Case: 900 | Input/Output: [(3 61 62 95) 3]
Test Case: 901 | Input/Output: [(-42 -10 -77 11) -77]
Test Case: 902 | Input/Output: [(40 -64 -49 -4) -64]
Test Case: 903 | Input/Output: [(31 34 -65 -31) -65]
Test Case: 904 | Input/Output: [(-12 -1 -63 -9) -63]
Test Case: 905 | Input/Output: [(88 -20 74 -24) -24]
Test Case: 906 | Input/Output: [(56 -30 0 -99) -99]
Test Case: 907 | Input/Output: [(-23 3 47 3) -23]
Test Case: 908 | Input/Output: [(-75 7 75 83) -75]
Test Case: 909 | Input/Output: [(-7 99 -78 -67) -78]
Test Case: 910 | Input/Output: [(37 -10 14 -56) -56]
Test Case: 911 | Input/Output: [(56 60 22 -78) -78]
Test Case: 912 | Input/Output: [(33 58 97 -17) -17]
Test Case: 913 | Input/Output: [(81 -34 37 -55) -55]
Test Case: 914 | Input/Output: [(-89 -7 -38 -59) -89]
Test Case: 915 | Input/Output: [(53 -97 72 25) -97]
Test Case: 916 | Input/Output: [(-49 -17 49 -85) -85]
Test Case: 917 | Input/Output: [(73 72 -22 8) -22]
Test Case: 918 | Input/Output: [(-29 100 61 -52) -52]
Test Case: 919 | Input/Output: [(41 82 11 72) 11]
Test Case: 920 | Input/Output: [(-96 84 46 72) -96]
Test Case: 921 | Input/Output: [(-42 -26 36 -3) -42]
Test Case: 922 | Input/Output: [(-79 -60 -60 -96) -96]
Test Case: 923 | Input/Output: [(46 -32 -93 57) -93]
Test Case: 924 | Input/Output: [(98 14 52 -83) -83]
Test Case: 925 | Input/Output: [(-56 -58 -42 92) -58]
Test Case: 926 | Input/Output: [(58 -89 62 85) -89]
Test Case: 927 | Input/Output: [(-80 31 -25 11) -80]
Test Case: 928 | Input/Output: [(96 39 49 59) 39]
Test Case: 929 | Input/Output: [(4 42 -53 87) -53]
Test Case: 930 | Input/Output: [(-22 59 79 71) -22]
Test Case: 931 | Input/Output: [(-88 -52 -64 -100) -100]
Test Case: 932 | Input/Output: [(15 -46 96 -54) -54]
Test Case: 933 | Input/Output: [(44 26 82 -50) -50]
Test Case: 934 | Input/Output: [(47 -16 -84 -62) -84]
Test Case: 935 | Input/Output: [(2 -33 96 -29) -33]
Test Case: 936 | Input/Output: [(-83 69 -35 25) -83]
Test Case: 937 | Input/Output: [(82 -39 25 88) -39]
Test Case: 938 | Input/Output: [(-44 -69 -18 -90) -90]
Test Case: 939 | Input/Output: [(-59 53 24 56) -59]
Test Case: 940 | Input/Output: [(-55 -24 10 63) -55]
Test Case: 941 | Input/Output: [(-55 72 -66 -13) -66]
Test Case: 942 | Input/Output: [(-47 -36 -9 -9) -47]
Test Case: 943 | Input/Output: [(-60 -56 -59 26) -60]
Test Case: 944 | Input/Output: [(-7 6 0 -49) -49]
Test Case: 945 | Input/Output: [(64 10 -96 97) -96]
Test Case: 946 | Input/Output: [(-1 92 -87 -61) -87]
Test Case: 947 | Input/Output: [(52 -21 47 16) -21]
Test Case: 948 | Input/Output: [(96 44 89 -63) -63]
Test Case: 949 | Input/Output: [(45 -70 -55 94) -70]
Test Case: 950 | Input/Output: [(90 63 71 -13) -13]
Test Case: 951 | Input/Output: [(-97 33 -10 -60) -97]
Test Case: 952 | Input/Output: [(100 -51 -87 -82) -87]
Test Case: 953 | Input/Output: [(8 85 -71 53) -71]
Test Case: 954 | Input/Output: [(-51 -1 -62 -7) -62]
Test Case: 955 | Input/Output: [(48 25 94 -1) -1]
Test Case: 956 | Input/Output: [(-77 -96 -37 97) -96]
Test Case: 957 | Input/Output: [(77 57 -38 57) -38]
Test Case: 958 | Input/Output: [(-12 -6 47 0) -12]
Test Case: 959 | Input/Output: [(32 -51 -77 18) -77]
Test Case: 960 | Input/Output: [(-67 7 81 80) -67]
Test Case: 961 | Input/Output: [(-55 72 57 -62) -62]
Test Case: 962 | Input/Output: [(66 -65 58 -41) -65]
Test Case: 963 | Input/Output: [(-24 5 -76 -19) -76]
Test Case: 964 | Input/Output: [(-78 54 34 22) -78]
Test Case: 965 | Input/Output: [(-99 -6 -74 -44) -99]
Test Case: 966 | Input/Output: [(-64 -20 -40 -49) -64]
Test Case: 967 | Input/Output: [(-80 51 81 57) -80]
Test Case: 968 | Input/Output: [(5 -95 -75 -71) -95]
Test Case: 969 | Input/Output: [(85 6 -44 100) -44]
Test Case: 970 | Input/Output: [(-79 46 29 -87) -87]
Test Case: 971 | Input/Output: [(93 68 35 80) 35]
Test Case: 972 | Input/Output: [(-93 -75 42 -27) -93]
Test Case: 973 | Input/Output: [(-90 -93 -51 -97) -97]
Test Case: 974 | Input/Output: [(-1 -53 24 48) -53]
Test Case: 975 | Input/Output: [(86 75 48 -21) -21]
Test Case: 976 | Input/Output: [(72 -4 -2 79) -4]
Test Case: 977 | Input/Output: [(-86 50 -95 83) -95]
Test Case: 978 | Input/Output: [(-81 -47 -5 -92) -92]
Test Case: 979 | Input/Output: [(12 -31 -27 -76) -76]
Test Case: 980 | Input/Output: [(71 83 -51 -65) -65]
Test Case: 981 | Input/Output: [(97 -57 87 -92) -92]
Test Case: 982 | Input/Output: [(-80 -73 -62 -8) -80]
Test Case: 983 | Input/Output: [(-48 -94 -98 41) -98]
Test Case: 984 | Input/Output: [(16 82 47 -73) -73]
Test Case: 985 | Input/Output: [(-75 -11 13 -45) -75]
Test Case: 986 | Input/Output: [(-55 72 72 -19) -55]
Test Case: 987 | Input/Output: [(99 79 21 -84) -84]
Test Case: 988 | Input/Output: [(38 -1 43 31) -1]
Test Case: 989 | Input/Output: [(-40 -57 -25 22) -57]
Test Case: 990 | Input/Output: [(25 51 -6 17) -6]
Test Case: 991 | Input/Output: [(66 -37 -16 -44) -44]
Test Case: 992 | Input/Output: [(-70 33 -37 63) -70]
Test Case: 993 | Input/Output: [(58 53 -86 81) -86]
Test Case: 994 | Input/Output: [(57 25 35 -50) -50]
Test Case: 995 | Input/Output: [(33 -97 -96 37) -97]
Test Case: 996 | Input/Output: [(-39 -50 43 -32) -50]
Test Case: 997 | Input/Output: [(93 31 74 -27) -27]
Test Case: 998 | Input/Output: [(58 87 -34 -46) -46]
Test Case: 999 | Input/Output: [(-80 19 -34 -50) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -10 126 49 -26 -127 -55 102 -113 109 -43 -24 78 -14 -70 48 120
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[69 -23 -23 -23] -23] [[-61 -98 -98 -98] -98] [[-21 -21 -21 94] -21] [[18 13 13 13] 13] [[-90 -38 -90 -90] -90] [[-26 -26 -26 93] -26] [[-21 23 23 23] -21] [[62 49 49 49] 49] [[-40 -40 -40 43] -40] [[-75 -75 -97 -75] -97] [(94 94 94 94) 94] [(6 6 6 6) 6] [(94 94 94 94) 94] [(80 80 80 80) 80] [(-38 -38 -38 -38) -38] [(31 5 2 85) 2] [(6 35 48 52) 6] [(68 11 54 36) 11] [(66 29 12 15) 12] [(20 92 92 72) 20] [(72 63 8 31) 8] [(18 0 73 69) 0] [(39 80 79 57) 39] [(45 80 43 80) 43] [(95 81 97 84) 81] [(94 22 2 82) 2] [(39 34 71 33) 33] [(68 49 81 94) 49] [(82 42 88 5) 5] [(53 87 7 49) 7] [(87 98 70 11) 11] [(21 28 49 96) 21] [(1 97 35 0) 0] [(73 88 88 38) 38] [(28 21 68 83) 21] [(41 43 -36 -24) -36] [(58 63 68 -98) -98] [(-86 93 46 -66) -86] [(-41 45 33 7) -41] [(46 96 3 84) 3] [(-72 -27 15 -41) -72] [(83 -58 -3 -55) -58] [(60 35 45 -52) -52] [(82 -85 100 94) -85] [(100 -77 54 93) -77] [(15 41 -72 65) -72] [(23 83 39 -83) -83] [(-38 -26 -69 50) -69] [(-86 -92 -52 -59) -92] [(99 -51 -19 -4) -51] [(-59 -36 57 32) -59] [(13 -61 18 -66) -66] [(-76 69 9 -90) -90] [(93 -1 -48 -88) -88] [(70 -29 -84 -24) -84] [(7 -20 -50 30) -50] [(-50 73 21 98) -50] [(96 82 98 89) 82] [(64 71 90 6) 6] [(-99 -42 -92 -27) -99] [(6 46 15 0) 0] [(39 30 62 -33) -33] [(-55 6 73 34) -55] [(100 -28 57 11) -28] [(14 84 28 -37) -37] [(-71 -83 61 -76) -83] [(-6 -79 -97 51) -97] [(94 -91 86 -17) -91] [(-85 45 -69 -2) -85] [(37 69 78 19) 19] [(-36 72 -67 -73) -73] [(23 4 41 -72) -72] [(26 -24 -69 -32) -69] [(-3 47 -21 24) -21] [(87 -27 39 89) -27] [(-46 29 -17 -49) -49] [(-87 53 -17 85) -87] [(-56 54 33 86) -56] [(-6 31 -30 -68) -68] [(-52 72 -78 20) -78] [(-15 -54 69 35) -54] [(-14 -49 55 41) -49] [(99 -78 -77 89) -78] [(-97 -64 73 -84) -97] [(-87 89 -48 -24) -87] [(8 -67 62 -86) -86] [(-70 -56 27 31) -70] [(-40 76 -25 37) -40] [(86 72 -77 -29) -77] [(-24 35 -100 100) -100] [(6 -58 -7 -73) -73] [(76 -47 -75 -24) -75] [(75 -33 -23 -14) -33] [(22 68 -20 70) -20] [(90 -66 61 31) -66])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_33} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 79} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_yank boolean_dup boolean_not in3 boolean_flush integer_lte tagged_33 print_integer integer_eq exec_s_when_autoconstructing (boolean_shove boolean_swap exec_swap (integer_gt) (print_integer boolean_dup boolean_dup_times) boolean_stackdepth integer_dup_items 79 boolean_flush integer_eq exec_k () (boolean_pop exec_eq exec_k () (integer_eq exec_flush exec_yankdup integer_mod boolean_yankdup boolean_dup exec_yank) boolean_flush in1 integer_sub integer_dup_items in1 boolean_empty exec_when (print_newline integer_div boolean_flush exec_k (exec_do*count (print_exec (exec_empty boolean_pop exec_swap (integer_lte integer_gte boolean_swap boolean_and boolean_rot exec_noop exec_shove (exec_when (exec_do*times (exec_k (integer_pop) ())))) ()))) ()))) () ())
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_33} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 79} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_yank boolean_dup boolean_not in3 boolean_flush integer_lte tagged_33 print_integer integer_eq exec_s_when_autoconstructing (boolean_shove boolean_swap exec_swap (integer_gt) (print_integer boolean_dup boolean_dup_times) boolean_stackdepth integer_dup_items 79 boolean_flush integer_eq exec_k () (boolean_pop exec_eq exec_k () (integer_eq exec_flush exec_yankdup integer_mod boolean_yankdup boolean_dup exec_yank) boolean_flush in1 integer_sub integer_dup_items in1 boolean_empty exec_when (print_newline integer_div boolean_flush exec_k (exec_do*count (print_exec (exec_empty boolean_pop exec_swap (integer_lte integer_gte boolean_swap boolean_and boolean_rot exec_noop exec_shove (exec_when (exec_do*times (exec_k (integer_pop) ())))) ()))) ()))) () ())
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 3 3 1 7 9 2 13 3 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 3 3 1 7 9 2 13 3 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 3, :instruction tag_integer_891} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_344} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction tagged_764} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup})
Best program: (exec_s (in3 boolean_pop boolean_invert_first_then_and print_integer exec_rot () (boolean_and tag_integer_891) ()) (integer_pop exec_swap (exec_s_when_autoconstructing () (boolean_not integer_lt exec_do*times (integer_sub exec_dup (in2 integer_gt boolean_and exec_if () (integer_dup_items boolean_yankdup boolean_invert_first_then_and boolean_pop exec_k (tagged_344 integer_rot) (integer_eq exec_if (integer_swap integer_yank exec_flush exec_y_when_autoconstructing (integer_stackdepth integer_rot integer_yank boolean_pop) integer_shove in2 in1 exec_empty exec_while () exec_do*times (exec_do*range () exec_rot (exec_pop (in1) integer_gte) (exec_do*range () exec_if (print_boolean exec_stackdepth) (exec_dup_items exec_do*while (exec_swap () (exec_dup_times (integer_dup_items boolean_yankdup) print_exec (integer_inc exec_dup_items in1) boolean_yank integer_gt exec_empty integer_inc) integer_empty exec_k_when_autoconstructing (in1 tagged_764 boolean_rot integer_shove integer_lte) (integer_swap boolean_shove integer_add integer_inc exec_flush integer_add boolean_empty exec_do*count (boolean_pop integer_mod exec_y (boolean_stackdepth exec_s_when_autoconstructing () (integer_inc) (integer_mult integer_stackdepth exec_rot () (boolean_rot integer_lte) (exec_yank) boolean_yankdup))))))) ())) ()))))) ()) ()) ())
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 94
Size: 140
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 9.951
Median total errors in population: 10
Error averages by case: (0.994 0.997 0.997 0.999 0.993 0.991 0.998 0.987 0.997 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.707
Average program size in population (points): 69.599
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 497794
--- Timings ---
Current time: 1559593792375 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.9 seconds, 32.8%
Fitness Testing:      1.7 seconds, 63.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction -43} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop})
Lexicase best program: (exec_dup_times (boolean_dup_times) boolean_dup in1 exec_noop integer_sub print_integer in4 boolean_swap boolean_invert_first_then_and integer_inc exec_noop boolean_stackdepth integer_fromboolean boolean_flush boolean_and exec_flush exec_flush boolean_eq in3 exec_swap (integer_yank integer_add boolean_flush exec_if () (exec_dup_times (integer_stackdepth exec_pop (boolean_pop) integer_swap in2 boolean_invert_first_then_and) integer_dup_items integer_dup_times exec_yank exec_pop (integer_lte integer_mod integer_lt integer_add boolean_or exec_eq in2 boolean_yankdup integer_shove boolean_shove exec_dup_times (boolean_not boolean_dup_times exec_flush exec_noop -43 exec_while (exec_yankdup integer_dup exec_swap () () integer_yankdup boolean_xor exec_swap () (exec_k_when_autoconstructing (boolean_dup_items) (integer_flush integer_swap) boolean_xor) integer_gt boolean_swap integer_dup_items integer_dup exec_yankdup boolean_swap integer_div)) exec_do*range (exec_shove ()) integer_pop) integer_sub integer_rot exec_eq exec_dup_times (exec_while (integer_add print_boolean integer_dup_times integer_inc exec_noop)))) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 105
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction -43} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop})
Zero cases best program: (exec_dup_times (boolean_dup_times) boolean_dup in1 exec_noop integer_sub print_integer in4 boolean_swap boolean_invert_first_then_and integer_inc exec_noop boolean_stackdepth integer_fromboolean boolean_flush boolean_and exec_flush exec_flush boolean_eq in3 exec_swap (integer_yank integer_add boolean_flush exec_if () (exec_dup_times (integer_stackdepth exec_pop (boolean_pop) integer_swap in2 boolean_invert_first_then_and) integer_dup_items integer_dup_times exec_yank exec_pop (integer_lte integer_mod integer_lt integer_add boolean_or exec_eq in2 boolean_yankdup integer_shove boolean_shove exec_dup_times (boolean_not boolean_dup_times exec_flush exec_noop -43 exec_while (exec_yankdup integer_dup exec_swap () () integer_yankdup boolean_xor exec_swap () (exec_k_when_autoconstructing (boolean_dup_items) (integer_flush integer_swap) boolean_xor) integer_gt boolean_swap integer_dup_items integer_dup exec_yankdup boolean_swap integer_div)) exec_do*range (exec_shove ()) integer_pop) integer_sub integer_rot exec_eq exec_dup_times (exec_while (integer_add print_boolean integer_dup_times integer_inc exec_noop)))) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 105
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 133 300 112 113 132 114 78 113 82)
Population mean number of elite cases: 1.31
Count of perfect (error zero) individuals by case: (133 133 300 112 113 132 114 78 113 82)
Population mean number of perfect (error zero) cases: 1.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 2, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction 56} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction -5} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_add})
Best program: (exec_pop (print_integer in2) boolean_yank boolean_and exec_while (print_boolean) integer_mult boolean_frominteger exec_if (in1) () integer_lt exec_while (exec_shove (in3) exec_noop exec_flush in4) integer_lte print_integer integer_dup_times exec_s (exec_swap (boolean_invert_second_then_and) (exec_noop) integer_gt exec_s_when_autoconstructing (integer_fromboolean exec_pop (exec_when () integer_gt exec_empty exec_dup () exec_rot (boolean_invert_second_then_and) (integer_max integer_empty integer_min exec_do*range (boolean_rot integer_pop integer_lte integer_add boolean_eq boolean_or) in1 integer_lt boolean_dup_times) (integer_dec) integer_lte 56 exec_do*times (exec_flush integer_max) integer_sub exec_dup (boolean_empty) -5 integer_dec in1 boolean_not integer_gte) exec_flush print_boolean) (boolean_invert_first_then_and exec_pop (boolean_and print_integer) integer_gt integer_gt integer_inc integer_swap print_boolean boolean_rot boolean_yankdup) (integer_add)) () ())
Errors: [1 1 1 0 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 101
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 8.69
Median total errors in population: 9
Error averages by case: (0.867 0.867 0.7 0.888 0.887 0.868 0.886 0.922 0.887 0.918)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.767
Average program size in population (points): 82.354
Average percent parens in population: 0.269
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 919300
--- Timings ---
Current time: 1559593794140 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         1.8 seconds, 38.8%
Fitness Testing:      2.2 seconds, 46.4%
Report:               0.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_s})
Lexicase best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop tag_boolean_405) (integer_min) () integer_eq boolean_or integer_gt integer_swap in4 integer_pop boolean_flush in4 boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) (exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq boolean_or exec_eq tag_boolean_444) exec_eq in3) print_integer boolean_or integer_dec exec_y () integer_inc integer_yank exec_do*range (integer_flush) boolean_and integer_max integer_mult integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () exec_do*times (tag_exec_622 () boolean_frominteger integer_swap integer_add) exec_shove (exec_pop (exec_noop integer_stackdepth boolean_and) integer_min) integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) integer_yank in2 print_integer integer_max exec_yank exec_s () () ())
Lexicase best errors: [0 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 131
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_s})
Zero cases best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop tag_boolean_405) (integer_min) () integer_eq boolean_or integer_gt integer_swap in4 integer_pop boolean_flush in4 boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) (exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq boolean_or exec_eq tag_boolean_444) exec_eq in3) print_integer boolean_or integer_dec exec_y () integer_inc integer_yank exec_do*range (integer_flush) boolean_and integer_max integer_mult integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () exec_do*times (tag_exec_622 () boolean_frominteger integer_swap integer_add) exec_shove (exec_pop (exec_noop integer_stackdepth boolean_and) integer_min) integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) integer_yank in2 print_integer integer_max exec_yank exec_s () () ())
Zero cases best errors: [0 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 131
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (35 393 37 257 261 86 42 310 80 86)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (35 393 37 257 261 86 42 310 80 86)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_s})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop tag_boolean_405) (integer_min) () integer_eq boolean_or integer_gt integer_swap in4 integer_pop boolean_flush in4 boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) (exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq boolean_or exec_eq tag_boolean_444) exec_eq in3) print_integer boolean_or integer_dec exec_y () integer_inc integer_yank exec_do*range (integer_flush) boolean_and integer_max integer_mult integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () exec_do*times (tag_exec_622 () boolean_frominteger integer_swap integer_add) exec_shove (exec_pop (exec_noop integer_stackdepth boolean_and) integer_min) integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) integer_yank in2 print_integer integer_max exec_yank exec_s () () ())
Errors: [0 0 0 1 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 95
Size: 131
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 8.413
Median total errors in population: 10
Error averages by case: (0.965 0.607 0.963 0.743 0.739 0.914 0.958 0.69 0.92 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.074
Average program size in population (points): 97.2
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1434228
--- Timings ---
Current time: 1559593796655 milliseconds
Total Time:           6.8 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.0 seconds, 44.6%
Fitness Testing:      2.7 seconds, 40.3%
Report:               0.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop tag_boolean_405) (integer_min) () in1 integer_eq boolean_or integer_gt integer_swap in4 boolean_flush in4 boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq boolean_or exec_eq tag_boolean_444) exec_eq in3) (integer_yankdup print_integer integer_dec exec_y () integer_inc exec_do*range (integer_flush) boolean_and integer_max integer_mult integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () print_boolean exec_do*times (tag_exec_622 () boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_noop integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) exec_when (integer_yank) integer_max exec_yank))))
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 132
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop tag_boolean_405) (integer_min) () in1 integer_eq boolean_or integer_gt integer_swap in4 boolean_flush in4 boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq boolean_or exec_eq tag_boolean_444) exec_eq in3) (integer_yankdup print_integer integer_dec exec_y () integer_inc exec_do*range (integer_flush) boolean_and integer_max integer_mult integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () print_boolean exec_do*times (tag_exec_622 () boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_noop integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) exec_when (integer_yank) integer_max exec_yank))))
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 132
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 67 67 76 173 80 129 302 75 67)
Population mean number of elite cases: 1.21
Count of perfect (error zero) individuals by case: (173 67 67 76 173 80 129 302 75 67)
Population mean number of perfect (error zero) cases: 1.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_s} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop boolean_dup tag_boolean_405) (integer_min) () integer_eq boolean_or integer_swap in4 integer_pop exec_dup (boolean_flush boolean_xor) exec_do*times (boolean_and exec_noop exec_s (boolean_pop exec_while (boolean_empty) in1) (in2 boolean_dup) (boolean_dup) integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) integer_dup boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq integer_min boolean_or exec_eq tag_boolean_444) in3 print_integer boolean_or integer_dec integer_dup_times integer_inc integer_yank exec_do*range (integer_flush) boolean_and integer_max integer_mult integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () exec_do*times (tag_exec_622 () boolean_frominteger integer_swap integer_add) exec_shove (exec_pop (exec_noop boolean_and) exec_dup_times (integer_min) integer_gte boolean_xor integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) integer_yank) exec_yank exec_s () () (in4))
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 97
Size: 133
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 8.791
Median total errors in population: 10
Error averages by case: (0.827 0.933 0.933 0.924 0.827 0.92 0.871 0.698 0.925 0.933)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.528
Average program size in population (points): 122.506
Average percent parens in population: 0.258
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2167392
--- Timings ---
Current time: 1559593799160 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.1 seconds, 44.0%
Fitness Testing:      3.5 seconds, 37.0%
Report:               1.7 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_405) (integer_min) () integer_yankdup in1 boolean_or integer_gt integer_swap in4 boolean_flush boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (boolean_eq exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_do*times (exec_swap () (in2) exec_flush boolean_eq print_integer) boolean_eq boolean_or tag_boolean_444) (exec_eq in3) integer_min print_integer integer_dec exec_y () integer_inc exec_do*range (integer_flush) boolean_and integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () print_boolean tag_exec_622 () boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_noop boolean_yank integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (boolean_frominteger integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) exec_eq exec_when (integer_yank) integer_max exec_yank))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 128
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_405) (integer_min) () integer_yankdup in1 boolean_or integer_gt integer_swap in4 boolean_flush boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (boolean_eq exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_do*times (exec_swap () (in2) exec_flush boolean_eq print_integer) boolean_eq boolean_or tag_boolean_444) (exec_eq in3) integer_min print_integer integer_dec exec_y () integer_inc exec_do*range (integer_flush) boolean_and integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () print_boolean tag_exec_622 () boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_noop boolean_yank integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (boolean_frominteger integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) exec_eq exec_when (integer_yank) integer_max exec_yank))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 128
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 360 93 105 123 76 96 149 96 124)
Population mean number of elite cases: 1.35
Count of perfect (error zero) individuals by case: (123 360 93 105 123 76 96 149 96 124)
Population mean number of perfect (error zero) cases: 1.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_405) (integer_min) () integer_yankdup in1 boolean_or integer_gt integer_swap in4 boolean_flush boolean_and exec_noop exec_s (boolean_pop exec_while (exec_swap (boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove boolean_stackdepth exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (boolean_eq exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_do*times (exec_swap () (in2) exec_flush boolean_eq print_integer) boolean_eq boolean_or tag_boolean_444) (exec_eq in3) integer_min print_integer integer_dec exec_y () integer_inc exec_do*range (integer_flush) boolean_and integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () print_boolean tag_exec_622 () boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_noop boolean_yank integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) integer_flush exec_s () (boolean_frominteger integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) exec_eq exec_when (integer_yank) integer_max exec_yank))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 92
Size: 128
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 8.655
Median total errors in population: 10
Error averages by case: (0.877 0.64 0.907 0.895 0.877 0.924 0.904 0.851 0.904 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.576
Average program size in population (points): 131.571
Average percent parens in population: 0.272
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3038006
--- Timings ---
Current time: 1559593801892 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 43.9%
Fitness Testing:      4.3 seconds, 35.7%
Report:               2.3 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 91} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_s})
Lexicase best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_yankdup integer_pop boolean_pop) (tag_boolean_405) (integer_min) integer_eq boolean_or integer_swap in4 exec_if (integer_pop boolean_flush in4 boolean_and integer_empty) (exec_s (boolean_pop integer_dup exec_while (boolean_empty) in1) (boolean_dup) (boolean_dup) integer_dup boolean_shove boolean_stackdepth integer_fromboolean boolean_yank exec_shove (boolean_yankdup) exec_while (integer_empty exec_pop () boolean_or integer_shove) boolean_pop) exec_swap () (in2) exec_while (boolean_eq boolean_not boolean_eq exec_eq tag_boolean_444) boolean_frominteger in3 exec_do*times (print_integer integer_dec exec_y () integer_yank integer_max integer_mult boolean_yankdup exec_k () (exec_k_when_autoconstructing (exec_when (boolean_invert_first_then_and)) (exec_do*range () exec_do*times (tag_exec_622 () boolean_frominteger integer_add) exec_k_when_autoconstructing () (exec_shove (exec_noop boolean_or) boolean_yankdup boolean_and) print_integer integer_div integer_gte integer_shove tag_integer_551 exec_k (boolean_yank exec_s () (integer_add exec_do*count (integer_add) exec_empty boolean_not) (integer_yank) in2 exec_y_when_autoconstructing () 91 print_integer integer_max exec_yank) (exec_s () () ())))))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 131
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 91} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_s})
Zero cases best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_yankdup integer_pop boolean_pop) (tag_boolean_405) (integer_min) integer_eq boolean_or integer_swap in4 exec_if (integer_pop boolean_flush in4 boolean_and integer_empty) (exec_s (boolean_pop integer_dup exec_while (boolean_empty) in1) (boolean_dup) (boolean_dup) integer_dup boolean_shove boolean_stackdepth integer_fromboolean boolean_yank exec_shove (boolean_yankdup) exec_while (integer_empty exec_pop () boolean_or integer_shove) boolean_pop) exec_swap () (in2) exec_while (boolean_eq boolean_not boolean_eq exec_eq tag_boolean_444) boolean_frominteger in3 exec_do*times (print_integer integer_dec exec_y () integer_yank integer_max integer_mult boolean_yankdup exec_k () (exec_k_when_autoconstructing (exec_when (boolean_invert_first_then_and)) (exec_do*range () exec_do*times (tag_exec_622 () boolean_frominteger integer_add) exec_k_when_autoconstructing () (exec_shove (exec_noop boolean_or) boolean_yankdup boolean_and) print_integer integer_div integer_gte integer_shove tag_integer_551 exec_k (boolean_yank exec_s () (integer_add exec_do*count (integer_add) exec_empty boolean_not) (integer_yank) in2 exec_y_when_autoconstructing () 91 print_integer integer_max exec_yank) (exec_s () () ())))))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 131
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 366 131 104 75 136 121 138 101 89)
Population mean number of elite cases: 1.35
Count of perfect (error zero) individuals by case: (89 366 131 104 75 136 121 138 101 89)
Population mean number of perfect (error zero) cases: 1.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_405} {:close 2, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction tagged_991} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_exec_622} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_s})
Best program: (integer_gt boolean_invert_second_then_and exec_s_when_autoconstructing (integer_pop boolean_pop) (tag_boolean_405) (integer_min) integer_eq boolean_or integer_gt integer_swap exec_do*count (exec_if (integer_pop in4 boolean_and integer_empty) (exec_noop exec_s (boolean_pop integer_dup exec_while (boolean_empty) in1) (tagged_991) (boolean_dup) boolean_dup) integer_dup boolean_not boolean_shove boolean_stackdepth integer_fromboolean boolean_eq) boolean_yank exec_y_when_autoconstructing () exec_shove (boolean_yankdup) exec_while (boolean_or integer_shove) exec_swap () (boolean_invert_second_then_and in2) exec_while (boolean_eq boolean_eq boolean_or exec_eq tag_boolean_444) boolean_frominteger in3 exec_do*times (print_integer boolean_or integer_dec exec_y () integer_inc integer_flush) integer_max integer_mult integer_pop exec_k_when_autoconstructing (in4 boolean_invert_first_then_and) () exec_do*while (exec_do*range () exec_do*times (tag_exec_622 () integer_fromboolean) exec_dup_times (boolean_frominteger integer_swap integer_add) exec_shove (exec_pop (integer_stackdepth boolean_or) boolean_and) integer_min) integer_shove tag_integer_551 exec_k (exec_empty) (integer_flush boolean_yank exec_s () (exec_do*count (integer_add) exec_eq in3) (exec_do*times (boolean_not) integer_yank) in2 exec_y_when_autoconstructing () print_integer integer_max exec_yank) exec_shove (exec_s () () ()))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 100
Size: 140
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 8.65
Median total errors in population: 10
Error averages by case: (0.911 0.634 0.869 0.896 0.925 0.864 0.879 0.862 0.899 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.557
Average program size in population (points): 131.162
Average percent parens in population: 0.279
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3757627
--- Timings ---
Current time: 1559593804544 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 43.6%
Fitness Testing:      5.0 seconds, 34.2%
Report:               3.1 seconds, 21.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 2, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_622} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_pop integer_min in1 boolean_or integer_gt integer_swap in4 boolean_flush in4 boolean_and in1 exec_noop boolean_pop exec_while (boolean_empty) in1 boolean_dup boolean_dup integer_dup boolean_shove exec_pop (integer_yank integer_yankdup integer_fromboolean boolean_eq) exec_k () (boolean_yank boolean_dup_items integer_dec exec_shove (exec_while (boolean_swap)) exec_pop () boolean_or print_exec () integer_shove) exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq exec_eq tag_boolean_444) exec_eq integer_yankdup boolean_and print_integer integer_dec exec_y () exec_do*range (integer_flush) integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () boolean_stackdepth exec_do*range () print_boolean exec_do*times (exec_if (tag_exec_622 () integer_swap exec_s (integer_add) (boolean_dup_times exec_swap (exec_shove (exec_noop exec_dup (boolean_and) integer_min) boolean_dup integer_gte integer_shove tag_integer_551 exec_empty) (exec_s () (integer_add exec_flush exec_do*count (integer_add) boolean_and) (exec_eq boolean_dup_times in3) boolean_not) exec_when (boolean_dup integer_max exec_yank) integer_eq) ()) ())))
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 130
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 2, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 1, :instruction tag_exec_622} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_pop integer_min in1 boolean_or integer_gt integer_swap in4 boolean_flush in4 boolean_and in1 exec_noop boolean_pop exec_while (boolean_empty) in1 boolean_dup boolean_dup integer_dup boolean_shove exec_pop (integer_yank integer_yankdup integer_fromboolean boolean_eq) exec_k () (boolean_yank boolean_dup_items integer_dec exec_shove (exec_while (boolean_swap)) exec_pop () boolean_or print_exec () integer_shove) exec_do*times (exec_swap () (in2) exec_while (boolean_eq print_integer) boolean_eq exec_eq tag_boolean_444) exec_eq integer_yankdup boolean_and print_integer integer_dec exec_y () exec_do*range (integer_flush) integer_pop exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () boolean_stackdepth exec_do*range () print_boolean exec_do*times (exec_if (tag_exec_622 () integer_swap exec_s (integer_add) (boolean_dup_times exec_swap (exec_shove (exec_noop exec_dup (boolean_and) integer_min) boolean_dup integer_gte integer_shove tag_integer_551 exec_empty) (exec_s () (integer_add exec_flush exec_do*count (integer_add) boolean_and) (exec_eq boolean_dup_times in3) boolean_not) exec_when (boolean_dup integer_max exec_yank) integer_eq) ()) ())))
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 130
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 394 227 55 100 122 94 117 125 405)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (142 394 227 55 100 122 94 117 125 405)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_89} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_473} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_while} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and integer_pop tag_boolean_405 in1 boolean_or integer_swap in4 boolean_flush in4 boolean_and in1 boolean_pop exec_while (exec_swap (boolean_empty) (integer_dup in1) boolean_yankdup boolean_dup) boolean_dup boolean_shove exec_pop (integer_dec integer_yankdup integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (exec_while (boolean_swap)) integer_empty exec_pop () integer_shove boolean_or integer_shove) exec_do*times (tagged_89 exec_swap () (in2) exec_while (tagged_473 integer_yank boolean_eq print_integer) boolean_eq boolean_or exec_eq tag_boolean_444) exec_eq integer_yankdup boolean_and print_integer exec_y () exec_do*range (exec_s_when_autoconstructing (integer_flush) (integer_max exec_do*count (integer_pop integer_lte exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () boolean_stackdepth exec_do*range () print_boolean exec_do*times (exec_if (boolean_empty tag_exec_622 () boolean_frominteger integer_swap exec_s (integer_add) (boolean_stackdepth exec_noop exec_stackdepth exec_dup (integer_stackdepth boolean_and) integer_min) (integer_gte print_integer integer_shove exec_empty) integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) exec_when (exec_eq integer_yank) boolean_dup integer_max exec_while () exec_yank))) ()))
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 99
Size: 133
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.219
Median total errors in population: 10
Error averages by case: (0.858 0.606 0.773 0.945 0.9 0.878 0.906 0.883 0.875 0.595)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.911
Average program size in population (points): 130.752
Average percent parens in population: 0.281
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4554938
--- Timings ---
Current time: 1559593807236 milliseconds
Total Time:          17.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.5 seconds, 43.3%
Fitness Testing:      5.8 seconds, 33.3%
Report:               4.0 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction tag_boolean_405} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 76} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_896} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max})
Lexicase best program: (exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_lt tag_boolean_405) (in3 integer_min)) (integer_yankdup boolean_or integer_gt integer_swap in4) (boolean_and exec_noop exec_s (exec_while (exec_swap (integer_max boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove integer_yankdup exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (boolean_eq exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_swap () (in2) exec_flush boolean_eq boolean_swap boolean_or 76 tag_boolean_444) (exec_eq in3) integer_min print_integer integer_dec exec_y () in3) integer_inc integer_flush boolean_and integer_pop exec_k () (in2 exec_k_when_autoconstructing (boolean_flush integer_lte boolean_invert_first_then_and) () exec_do*range () print_boolean integer_mod tag_exec_622 () boolean_frominteger integer_swap exec_s (tag_integer_896 exec_shove (boolean_yank boolean_xor integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) (integer_flush exec_eq exec_s () (integer_sub boolean_frominteger integer_add exec_do*count (integer_add) exec_eq exec_y () boolean_not) (exec_eq exec_when (integer_max)))))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 131
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction tag_boolean_405} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction 76} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_896} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max})
Zero cases best program: (exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_lt tag_boolean_405) (in3 integer_min)) (integer_yankdup boolean_or integer_gt integer_swap in4) (boolean_and exec_noop exec_s (exec_while (exec_swap (integer_max boolean_empty) (in1) boolean_dup) boolean_dup) (integer_dup boolean_shove integer_yankdup exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank exec_shove (boolean_eq exec_while (boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) exec_swap () (in2) exec_flush boolean_eq boolean_swap boolean_or 76 tag_boolean_444) (exec_eq in3) integer_min print_integer integer_dec exec_y () in3) integer_inc integer_flush boolean_and integer_pop exec_k () (in2 exec_k_when_autoconstructing (boolean_flush integer_lte boolean_invert_first_then_and) () exec_do*range () print_boolean integer_mod tag_exec_622 () boolean_frominteger integer_swap exec_s (tag_integer_896 exec_shove (boolean_yank boolean_xor integer_stackdepth boolean_and) integer_min) (integer_gte integer_shove tag_integer_551 exec_empty) (integer_flush exec_eq exec_s () (integer_sub boolean_frominteger integer_add exec_do*count (integer_add) exec_eq exec_y () boolean_not) (exec_eq exec_when (integer_max)))))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 131
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 67 68 79 97 124 85 287 72 141)
Population mean number of elite cases: 1.16
Count of perfect (error zero) individuals by case: (143 67 68 79 97 124 85 287 72 141)
Population mean number of perfect (error zero) cases: 1.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 3, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (tag_boolean_405) (in1) (boolean_or exec_k_when_autoconstructing (integer_gt exec_s (integer_swap boolean_shove in4) (boolean_flush exec_noop exec_s (boolean_pop exec_while (exec_swap (exec_do*times (boolean_empty) in1) (boolean_dup) exec_rot () () () boolean_shove boolean_stackdepth exec_pop (exec_noop integer_fromboolean boolean_eq) exec_k () (integer_dup exec_shove (boolean_eq integer_dup exec_while (integer_flush) integer_empty exec_yankdup integer_inc exec_pop () boolean_or exec_do*while ()) integer_dup integer_shove) boolean_dup exec_do*times (exec_swap () (in2) boolean_eq print_integer) boolean_eq boolean_or tag_boolean_444) in3) (integer_min boolean_rot print_integer exec_y () integer_inc exec_do*range (integer_flush) boolean_and integer_swap integer_eq exec_k () (exec_k_when_autoconstructing (boolean_flush boolean_invert_first_then_and) () exec_do*range () in2 print_boolean integer_dup tag_exec_622 () print_integer integer_swap exec_s (integer_sub) (in2 boolean_yank boolean_and) (integer_min) integer_gte integer_shove tag_integer_551 exec_empty) exec_s () (boolean_xor boolean_frominteger boolean_xor exec_do*count (integer_add) exec_eq in3) (exec_eq exec_when (integer_yank) integer_max)) ()) ()) ()))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 96
Size: 141
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 8.837
Median total errors in population: 10
Error averages by case: (0.857 0.933 0.932 0.921 0.903 0.876 0.915 0.713 0.928 0.859)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.122
Average program size in population (points): 133.47
Average percent parens in population: 0.279
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5325619
--- Timings ---
Current time: 1559593809959 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.7 seconds, 43.3%
Fitness Testing:      6.5 seconds, 32.5%
Report:               4.7 seconds, 23.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_455} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 14} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_invert_second_then_and integer_rot exec_s_when_autoconstructing (exec_do*count (exec_s_when_autoconstructing (tagged_455) (integer_min) () integer_yankdup in1) boolean_rot integer_gt exec_eq) (integer_dup_items boolean_and integer_div exec_noop boolean_pop exec_swap (boolean_empty) (in1) boolean_dup) (integer_dup integer_yank boolean_shove exec_y_when_autoconstructing (boolean_stackdepth integer_fromboolean 14 boolean_eq) boolean_yank exec_shove (exec_while (print_boolean boolean_swap)) integer_empty exec_pop () integer_sub boolean_or exec_swap () (boolean_shove integer_rot in2) boolean_eq boolean_eq in4 boolean_or tag_boolean_444) in3 integer_min print_integer integer_empty integer_dec exec_y () in1 integer_mult integer_inc exec_do*range (integer_flush) integer_pop exec_k () (exec_k_when_autoconstructing (boolean_invert_first_then_and) () exec_do*range (exec_do*range () print_boolean tag_exec_622 () print_boolean boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_do*count ()) in3 exec_noop exec_y (integer_empty boolean_yank integer_stackdepth boolean_and) integer_min) (boolean_frominteger integer_gte integer_shove integer_flush exec_s () (integer_eq boolean_frominteger integer_stackdepth integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) boolean_empty exec_when (exec_when () boolean_pop integer_max)))))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 137
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_455} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 14} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_invert_second_then_and integer_rot exec_s_when_autoconstructing (exec_do*count (exec_s_when_autoconstructing (tagged_455) (integer_min) () integer_yankdup in1) boolean_rot integer_gt exec_eq) (integer_dup_items boolean_and integer_div exec_noop boolean_pop exec_swap (boolean_empty) (in1) boolean_dup) (integer_dup integer_yank boolean_shove exec_y_when_autoconstructing (boolean_stackdepth integer_fromboolean 14 boolean_eq) boolean_yank exec_shove (exec_while (print_boolean boolean_swap)) integer_empty exec_pop () integer_sub boolean_or exec_swap () (boolean_shove integer_rot in2) boolean_eq boolean_eq in4 boolean_or tag_boolean_444) in3 integer_min print_integer integer_empty integer_dec exec_y () in1 integer_mult integer_inc exec_do*range (integer_flush) integer_pop exec_k () (exec_k_when_autoconstructing (boolean_invert_first_then_and) () exec_do*range (exec_do*range () print_boolean tag_exec_622 () print_boolean boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_do*count ()) in3 exec_noop exec_y (integer_empty boolean_yank integer_stackdepth boolean_and) integer_min) (boolean_frominteger integer_gte integer_shove integer_flush exec_s () (integer_eq boolean_frominteger integer_stackdepth integer_add exec_do*count (integer_add) exec_eq in3) (boolean_not) boolean_empty exec_when (exec_when () boolean_pop integer_max)))))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 137
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 77 168 116 150 313 146 117 60 75)
Population mean number of elite cases: 1.55
Count of perfect (error zero) individuals by case: (326 77 168 116 150 313 146 117 60 75)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 14} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (integer_yankdup boolean_dup in1) boolean_rot boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_noop boolean_pop exec_swap (boolean_empty) (boolean_xor boolean_dup) integer_dup integer_yank boolean_shove exec_y_when_autoconstructing (boolean_stackdepth 14 boolean_eq) exec_shove (exec_while (print_boolean boolean_swap)) exec_pop () boolean_or integer_shove) (exec_swap () (boolean_shove integer_rot in2) boolean_eq boolean_eq in4 boolean_or tag_boolean_444) in3 integer_min print_integer integer_empty integer_dec exec_y () in1 exec_do*range (integer_dup) integer_flush integer_pop exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (tag_exec_622 () print_boolean boolean_yankdup boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (in3 exec_noop integer_empty exec_noop boolean_yank integer_stackdepth boolean_and) integer_min) (boolean_frominteger integer_gte integer_shove integer_flush exec_s () (integer_eq boolean_frominteger integer_stackdepth integer_add exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_div exec_when (exec_when () integer_max)) ())))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 92
Size: 125
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 8.452
Median total errors in population: 10
Error averages by case: (0.674 0.923 0.832 0.884 0.85 0.687 0.854 0.883 0.94 0.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.999
Average program size in population (points): 134.437
Average percent parens in population: 0.285
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6037281
--- Timings ---
Current time: 1559593812525 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 43.1%
Fitness Testing:      7.2 seconds, 31.8%
Report:               5.6 seconds, 24.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_250} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_boolean_551} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (boolean_invert_second_then_and exec_s (exec_do*range (exec_s_when_autoconstructing (boolean_or) (exec_shove (in1) boolean_or integer_gt integer_swap exec_s (boolean_pop in4) (boolean_flush exec_yank) (exec_noop exec_s (exec_when (exec_while (exec_swap (in1) (integer_mod print_boolean boolean_dup) boolean_dup) integer_dup boolean_shove boolean_empty boolean_dup exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank in4) boolean_eq exec_while (boolean_swap)) integer_empty boolean_or integer_shove) (boolean_dup_items print_exec (boolean_yank exec_swap () (in2) integer_inc) boolean_or boolean_or boolean_flush tag_boolean_444) (in3 exec_eq in3) in1 integer_min print_integer exec_y () integer_inc exec_do*range (integer_flush) integer_pop exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_flush boolean_dup_times in3 boolean_invert_first_then_and) () integer_rot) exec_do*range () print_boolean tag_exec_622 () integer_swap exec_dup_items) exec_s (exec_swap (integer_add) (exec_shove (exec_noop boolean_yank exec_noop integer_stackdepth boolean_and) integer_gte in3 integer_shove tag_integer_551 exec_empty) exec_s () (integer_add exec_do*count (tag_exec_250 (integer_add) exec_s_when_autoconstructing (exec_eq in3) (boolean_not) (tag_boolean_551 exec_eq exec_when (exec_flush integer_yank) integer_max exec_noop boolean_dup_times))) ()) () ()) ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 153
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_250} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_boolean_551} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (boolean_invert_second_then_and exec_s (exec_do*range (exec_s_when_autoconstructing (boolean_or) (exec_shove (in1) boolean_or integer_gt integer_swap exec_s (boolean_pop in4) (boolean_flush exec_yank) (exec_noop exec_s (exec_when (exec_while (exec_swap (in1) (integer_mod print_boolean boolean_dup) boolean_dup) integer_dup boolean_shove boolean_empty boolean_dup exec_pop (integer_fromboolean boolean_eq) exec_k () (boolean_yank in4) boolean_eq exec_while (boolean_swap)) integer_empty boolean_or integer_shove) (boolean_dup_items print_exec (boolean_yank exec_swap () (in2) integer_inc) boolean_or boolean_or boolean_flush tag_boolean_444) (in3 exec_eq in3) in1 integer_min print_integer exec_y () integer_inc exec_do*range (integer_flush) integer_pop exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_flush boolean_dup_times in3 boolean_invert_first_then_and) () integer_rot) exec_do*range () print_boolean tag_exec_622 () integer_swap exec_dup_items) exec_s (exec_swap (integer_add) (exec_shove (exec_noop boolean_yank exec_noop integer_stackdepth boolean_and) integer_gte in3 integer_shove tag_integer_551 exec_empty) exec_s () (integer_add exec_do*count (tag_exec_250 (integer_add) exec_s_when_autoconstructing (exec_eq in3) (boolean_not) (tag_boolean_551 exec_eq exec_when (exec_flush integer_yank) integer_max exec_noop boolean_dup_times))) ()) () ()) ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 153
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 119 251 118 385 120 105 312 342 103)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (252 119 251 118 385 120 105 312 342 103)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_min} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 14} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add})
Best program: (integer_empty exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_swap integer_min) () (exec_noop) exec_do*times (integer_yankdup boolean_rot integer_lt boolean_or integer_gt exec_eq) integer_dup_items integer_dec) (in4) (boolean_and integer_fromboolean exec_noop boolean_pop exec_swap (boolean_empty) (in1) boolean_dup) integer_dup in4 integer_yank boolean_shove boolean_stackdepth integer_fromboolean 14 exec_if (exec_shove (exec_while (exec_noop print_boolean boolean_swap)) integer_empty exec_pop () boolean_or integer_shove) (exec_swap () (integer_stackdepth) boolean_shove integer_rot boolean_eq boolean_eq integer_dup in4 boolean_or tag_boolean_444) in3 integer_min print_integer in3 integer_empty integer_dec boolean_invert_second_then_and exec_y () in1 exec_do*range (integer_flush) integer_pop integer_sub exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range () print_boolean tag_exec_622 () print_integer boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (exec_noop in2 integer_empty boolean_yank boolean_not integer_stackdepth integer_min) boolean_frominteger integer_gte integer_shove tag_integer_551 integer_flush integer_mod) (exec_s () (boolean_yank integer_eq boolean_frominteger integer_stackdepth boolean_dup_times integer_add integer_add) (integer_pop integer_fromboolean boolean_not) exec_when () integer_max integer_add))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 103
Size: 134
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.893
Median total errors in population: 10
Error averages by case: (0.748 0.881 0.749 0.882 0.615 0.88 0.895 0.688 0.658 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.239
Average program size in population (points): 133.541
Average percent parens in population: 0.277
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.366
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6807614
--- Timings ---
Current time: 1559593815220 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.9 seconds, 43.0%
Fitness Testing:      8.0 seconds, 31.6%
Report:               6.3 seconds, 25.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_622} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_yankdup integer_lte tag_boolean_405 in1 boolean_or integer_div integer_fromboolean integer_swap in4 exec_rot (integer_fromboolean exec_s (boolean_pop exec_while (integer_gt boolean_empty) in1) (boolean_dup) (print_boolean boolean_dup) integer_dup_items tagged_509 integer_dup boolean_shove integer_sub exec_pop (boolean_dup_times boolean_eq exec_while (integer_div boolean_swap)) integer_empty boolean_yank boolean_or integer_shove) (in2) (boolean_eq boolean_or tag_boolean_444) integer_min print_integer exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup integer_swap exec_k () (print_exec (boolean_invert_first_then_and)) boolean_shove print_boolean in2 exec_s (tag_exec_622 () integer_pop) (integer_swap exec_s (exec_noop boolean_yank integer_stackdepth boolean_and) (integer_shove exec_do*range (integer_sub boolean_yankdup tag_integer_551 exec_empty) exec_s () (integer_add exec_do*count (exec_eq integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_do*times (exec_yank) exec_do*while ()))) ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 111
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_622} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_yankdup integer_lte tag_boolean_405 in1 boolean_or integer_div integer_fromboolean integer_swap in4 exec_rot (integer_fromboolean exec_s (boolean_pop exec_while (integer_gt boolean_empty) in1) (boolean_dup) (print_boolean boolean_dup) integer_dup_items tagged_509 integer_dup boolean_shove integer_sub exec_pop (boolean_dup_times boolean_eq exec_while (integer_div boolean_swap)) integer_empty boolean_yank boolean_or integer_shove) (in2) (boolean_eq boolean_or tag_boolean_444) integer_min print_integer exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup integer_swap exec_k () (print_exec (boolean_invert_first_then_and)) boolean_shove print_boolean in2 exec_s (tag_exec_622 () integer_pop) (integer_swap exec_s (exec_noop boolean_yank integer_stackdepth boolean_and) (integer_shove exec_do*range (integer_sub boolean_yankdup tag_integer_551 exec_empty) exec_s () (integer_add exec_do*count (exec_eq integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_do*times (exec_yank) exec_do*while ()))) ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 111
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 107 443 177 107 159 230 125 193 348)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (177 107 443 177 107 159 230 125 193 348)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while})
Best program: (exec_yankdup integer_lte tag_boolean_405 in1 integer_mult boolean_or integer_div integer_fromboolean integer_swap in4 exec_rot (boolean_and integer_fromboolean boolean_pop exec_while (integer_gt boolean_empty) in1) (boolean_stackdepth boolean_dup) (print_boolean boolean_dup) tagged_509 exec_yank integer_dup boolean_shove integer_sub exec_pop (boolean_yank boolean_dup_times exec_flush boolean_eq exec_while (boolean_swap)) integer_fromboolean integer_empty boolean_yank boolean_or integer_shove in2 boolean_eq boolean_eq boolean_or boolean_rot tag_boolean_444 integer_min boolean_invert_second_then_and print_integer exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup exec_k () (exec_dup_times (print_exec (boolean_invert_first_then_and)) print_boolean in2 exec_s (integer_swap tag_exec_622 () integer_pop) (integer_swap exec_s (exec_noop boolean_yank integer_stackdepth boolean_and) (integer_shove integer_sub in1 tag_integer_551 exec_empty) (exec_s () (integer_add exec_do*count (exec_eq integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_do*times (exec_yank) integer_dec exec_do*while ()))) ())) ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 87
Size: 115
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.934
Median total errors in population: 10
Error averages by case: (0.823 0.893 0.557 0.823 0.893 0.841 0.77 0.875 0.807 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.842
Average program size in population (points): 127.148
Average percent parens in population: 0.275
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7614582
--- Timings ---
Current time: 1559593817894 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.0 seconds, 42.7%
Fitness Testing:      8.8 seconds, 31.3%
Report:               7.2 seconds, 25.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_yankdup integer_lte tag_boolean_405 in1 integer_div integer_fromboolean integer_swap in4 exec_rot (boolean_and integer_fromboolean boolean_empty) (in1) (boolean_dup) boolean_dup tagged_509 integer_dup boolean_shove exec_pop (boolean_yank boolean_dup_times boolean_eq exec_while (integer_div integer_dec boolean_swap)) integer_empty boolean_yank boolean_or in2 boolean_eq boolean_eq integer_min print_integer exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup exec_k () (in4) in3) boolean_invert_first_then_and print_boolean in2 exec_s (integer_swap tag_exec_622 () exec_dup_times (integer_pop) integer_swap exec_s (exec_noop exec_yank boolean_yank boolean_and) (integer_sub in1 tag_integer_551 exec_empty) (exec_s () (integer_add exec_do*count (exec_eq integer_swap boolean_not) integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_noop exec_do*times (exec_yank) exec_do*while ())) ())) () ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 101
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_yankdup integer_lte tag_boolean_405 in1 integer_div integer_fromboolean integer_swap in4 exec_rot (boolean_and integer_fromboolean boolean_empty) (in1) (boolean_dup) boolean_dup tagged_509 integer_dup boolean_shove exec_pop (boolean_yank boolean_dup_times boolean_eq exec_while (integer_div integer_dec boolean_swap)) integer_empty boolean_yank boolean_or in2 boolean_eq boolean_eq integer_min print_integer exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup exec_k () (in4) in3) boolean_invert_first_then_and print_boolean in2 exec_s (integer_swap tag_exec_622 () exec_dup_times (integer_pop) integer_swap exec_s (exec_noop exec_yank boolean_yank boolean_and) (integer_sub in1 tag_integer_551 exec_empty) (exec_s () (integer_add exec_do*count (exec_eq integer_swap boolean_not) integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_noop exec_do*times (exec_yank) exec_do*while ())) ())) () ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 101
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 141 448 58 165 224 194 45 109 52)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (218 141 448 58 165 224 194 45 109 52)
Population mean number of perfect (error zero) cases: 1.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_yankdup integer_lte tag_boolean_405 in1 boolean_or integer_div integer_fromboolean integer_swap exec_swap (in4) (exec_rot (integer_fromboolean boolean_pop exec_while (integer_inc integer_gt exec_while (in1) boolean_dup) print_boolean boolean_dup) (integer_yank) (integer_dup_items tagged_509 integer_dup boolean_not)) boolean_shove integer_sub exec_pop (boolean_dup_times boolean_eq integer_rot) exec_while (integer_div boolean_swap) boolean_yank boolean_or integer_shove integer_dup_times in2 boolean_eq print_boolean boolean_or tag_boolean_444 integer_min print_integer exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup integer_swap exec_k () (print_exec (boolean_invert_first_then_and)) boolean_shove print_boolean exec_s (tag_exec_622 () boolean_dup integer_pop) (integer_swap exec_s (exec_noop boolean_yank integer_stackdepth boolean_and) (integer_shove exec_do*range (integer_sub tag_integer_551 exec_empty) exec_s () (integer_add exec_do*count (exec_eq exec_do*times (integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_do*times (exec_yank) boolean_stackdepth)))) ()) ()) ()))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 85
Size: 116
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 8.346
Median total errors in population: 9
Error averages by case: (0.782 0.859 0.552 0.942 0.835 0.776 0.806 0.955 0.891 0.948)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 85.792
Average program size in population (points): 118.035
Average percent parens in population: 0.272
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.45
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8469037
--- Timings ---
Current time: 1559593820582 milliseconds
Total Time:          30.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.1 seconds, 42.5%
Fitness Testing:      9.6 seconds, 31.2%
Report:               8.0 seconds, 25.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 325
Test mean error for best: 0.32500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max})
Lexicase best program: (exec_s_when_autoconstructing (integer_min) () (in1) exec_do*range (exec_if (integer_gt exec_k_when_autoconstructing (exec_eq) (integer_dup_items boolean_frominteger) integer_flush in4) (exec_noop exec_swap (integer_swap in1) (boolean_xor exec_if () (boolean_dup) integer_dup boolean_shove boolean_stackdepth integer_fromboolean integer_yank) integer_shove boolean_and) exec_while (print_boolean boolean_swap)) integer_empty exec_pop () boolean_yankdup exec_s_when_autoconstructing (integer_shove) (boolean_invert_first_then_and) (exec_swap () (exec_while (integer_flush integer_rot boolean_eq boolean_eq boolean_or tag_boolean_444) in3) integer_min exec_dup () print_integer integer_empty exec_y () in1) integer_gte integer_inc exec_do*range (integer_pop print_newline) exec_k_when_autoconstructing (integer_add print_boolean tag_exec_622 () print_boolean boolean_frominteger exec_s (integer_add) (exec_dup_items boolean_dup_items) (in3 exec_noop boolean_dup integer_stackdepth) integer_empty exec_s_when_autoconstructing () (boolean_dup exec_do*times (integer_stackdepth boolean_and) boolean_xor integer_gte integer_shove tag_integer_551 exec_s (exec_s () (exec_when (boolean_frominteger integer_stackdepth integer_add 72 integer_add) exec_eq in3) (boolean_dup boolean_not) integer_dec exec_when () integer_max) () ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 136
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_551} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction 72} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max})
Zero cases best program: (exec_s_when_autoconstructing (integer_min) () (in1) exec_do*range (exec_if (integer_gt exec_k_when_autoconstructing (exec_eq) (integer_dup_items boolean_frominteger) integer_flush in4) (exec_noop exec_swap (integer_swap in1) (boolean_xor exec_if () (boolean_dup) integer_dup boolean_shove boolean_stackdepth integer_fromboolean integer_yank) integer_shove boolean_and) exec_while (print_boolean boolean_swap)) integer_empty exec_pop () boolean_yankdup exec_s_when_autoconstructing (integer_shove) (boolean_invert_first_then_and) (exec_swap () (exec_while (integer_flush integer_rot boolean_eq boolean_eq boolean_or tag_boolean_444) in3) integer_min exec_dup () print_integer integer_empty exec_y () in1) integer_gte integer_inc exec_do*range (integer_pop print_newline) exec_k_when_autoconstructing (integer_add print_boolean tag_exec_622 () print_boolean boolean_frominteger exec_s (integer_add) (exec_dup_items boolean_dup_items) (in3 exec_noop boolean_dup integer_stackdepth) integer_empty exec_s_when_autoconstructing () (boolean_dup exec_do*times (integer_stackdepth boolean_and) boolean_xor integer_gte integer_shove tag_integer_551 exec_s (exec_s () (exec_when (boolean_frominteger integer_stackdepth integer_add 72 integer_add) exec_eq in3) (boolean_dup boolean_not) integer_dec exec_when () integer_max) () ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 136
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 155 156 84 225 417 506 84 175 205)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (80 155 156 84 225 417 506 84 175 205)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while})
Best program: (exec_yankdup tag_boolean_405 in1 integer_div integer_fromboolean integer_swap in4 exec_rot (integer_fromboolean boolean_empty) (in1) (boolean_dup) boolean_dup tagged_509 integer_dup_times integer_dup exec_pop (integer_shove boolean_yank boolean_dup_times boolean_eq integer_div integer_dec boolean_swap) integer_empty boolean_yank boolean_or in2 boolean_eq boolean_eq integer_min print_integer boolean_yank exec_y () integer_inc exec_do*range (integer_pop boolean_yankdup in4) in3 boolean_invert_first_then_and in2 exec_s (integer_swap tag_exec_622 () boolean_empty exec_dup_times (integer_pop) integer_swap exec_s (exec_noop exec_yank boolean_yank boolean_and) (integer_sub in1 integer_gt tag_integer_551 exec_empty) (exec_s () (integer_add exec_do*count (exec_eq integer_swap boolean_not) integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_noop exec_do*times (exec_yank) exec_empty exec_do*while ())) ())) () ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 75
Size: 98
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.913
Median total errors in population: 9
Error averages by case: (0.92 0.845 0.844 0.916 0.775 0.583 0.494 0.916 0.825 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.653
Average program size in population (points): 119.321
Average percent parens in population: 0.272
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9295176
--- Timings ---
Current time: 1559593823259 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.2 seconds, 42.4%
Fitness Testing:     10.4 seconds, 31.2%
Report:               8.7 seconds, 26.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_yankdup tag_boolean_405 in1 integer_div integer_fromboolean integer_swap in4 exec_rot (integer_fromboolean boolean_empty) (in1) (boolean_dup) boolean_dup tagged_509 integer_dup exec_pop (boolean_empty integer_shove boolean_yank boolean_dup_times boolean_eq integer_div integer_dec boolean_swap) integer_empty boolean_yank boolean_or in2 boolean_eq integer_min boolean_eq integer_min print_integer boolean_yank exec_y () integer_inc integer_pop boolean_yankdup in4 in3 in2 exec_s (integer_swap tag_exec_622 () boolean_empty exec_dup_times (integer_pop) integer_swap exec_s (exec_noop exec_yank boolean_yank boolean_and) (in1 integer_gt tag_integer_551 exec_empty) (exec_do*count (boolean_eq exec_eq integer_swap boolean_not) integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_noop exec_do*times (exec_yank) exec_empty exec_do*while ()))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 91
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_yankdup tag_boolean_405 in1 integer_div integer_fromboolean integer_swap in4 exec_rot (integer_fromboolean boolean_empty) (in1) (boolean_dup) boolean_dup tagged_509 integer_dup exec_pop (boolean_empty integer_shove boolean_yank boolean_dup_times boolean_eq integer_div integer_dec boolean_swap) integer_empty boolean_yank boolean_or in2 boolean_eq integer_min boolean_eq integer_min print_integer boolean_yank exec_y () integer_inc integer_pop boolean_yankdup in4 in3 in2 exec_s (integer_swap tag_exec_622 () boolean_empty exec_dup_times (integer_pop) integer_swap exec_s (exec_noop exec_yank boolean_yank boolean_and) (in1 integer_gt tag_integer_551 exec_empty) (exec_do*count (boolean_eq exec_eq integer_swap boolean_not) integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_noop exec_do*times (exec_yank) exec_empty exec_do*while ()))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 91
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 461 251 225 220 174 449 206 155 188)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (462 461 251 225 220 174 449 206 155 188)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_boolean_405} {:close 1, :instruction in1} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_509} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_551} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while})
Best program: (exec_yankdup tag_boolean_405 in1 integer_div integer_fromboolean integer_swap in4 exec_rot (integer_fromboolean boolean_empty) (in1) (boolean_dup) boolean_dup tagged_509 integer_dup exec_pop (boolean_empty integer_shove boolean_yank boolean_dup_times boolean_eq integer_div integer_dec boolean_swap) integer_empty boolean_yank boolean_or in2 boolean_eq integer_min boolean_eq integer_min print_integer boolean_yank exec_y () integer_inc integer_pop boolean_yankdup in4 in3 in2 exec_s (integer_swap tag_exec_622 () boolean_empty exec_dup_times (integer_pop) integer_swap exec_s (exec_noop exec_yank boolean_yank boolean_and) (in1 integer_gt tag_integer_551 exec_empty) (exec_do*count (boolean_eq exec_eq integer_swap boolean_not) integer_div exec_k_when_autoconstructing (boolean_not) (exec_eq integer_max exec_noop exec_do*times (exec_yank) exec_empty exec_do*while ()))) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 72
Size: 91
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 7.209
Median total errors in population: 8
Error averages by case: (0.538 0.539 0.749 0.775 0.78 0.826 0.551 0.794 0.845 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.646
Average program size in population (points): 120.533
Average percent parens in population: 0.278
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.366
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10120378
--- Timings ---
Current time: 1559593825937 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.3 seconds, 42.3%
Fitness Testing:     11.3 seconds, 31.1%
Report:               9.5 seconds, 26.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 410
Test mean error for best: 0.41000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_455} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -56} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction tagged_751} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty})
Lexicase best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_455) (integer_min) () boolean_yank integer_mult exec_k_when_autoconstructing (exec_eq) (integer_dup_items boolean_frominteger) integer_flush exec_yankdup in4 exec_noop boolean_pop exec_swap (boolean_empty) (in1) boolean_yank boolean_xor exec_k () () integer_dup in1 exec_while (exec_shove () print_boolean boolean_swap) integer_empty exec_pop () boolean_yankdup integer_shove exec_while (integer_rot in2) boolean_or tag_boolean_444 in3 integer_min integer_fromboolean boolean_or print_integer exec_y () integer_dup_items in1 integer_gte exec_do*range (integer_flush) integer_pop print_newline exec_s (exec_shove (exec_k_when_autoconstructing (exec_do*range (print_boolean tag_exec_622 () print_boolean boolean_invert_first_then_and boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (boolean_dup_items) -56) (boolean_flush) integer_empty boolean_dup integer_stackdepth boolean_and) integer_gte integer_shove exec_s () (boolean_frominteger integer_stackdepth integer_pop integer_add boolean_invert_second_then_and) (in4 exec_do*count (integer_add) tagged_751 in3) exec_when (exec_when () integer_empty)) ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 119
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_455} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_exec_622} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -56} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction tagged_751} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty})
Zero cases best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_455) (integer_min) () boolean_yank integer_mult exec_k_when_autoconstructing (exec_eq) (integer_dup_items boolean_frominteger) integer_flush exec_yankdup in4 exec_noop boolean_pop exec_swap (boolean_empty) (in1) boolean_yank boolean_xor exec_k () () integer_dup in1 exec_while (exec_shove () print_boolean boolean_swap) integer_empty exec_pop () boolean_yankdup integer_shove exec_while (integer_rot in2) boolean_or tag_boolean_444 in3 integer_min integer_fromboolean boolean_or print_integer exec_y () integer_dup_items in1 integer_gte exec_do*range (integer_flush) integer_pop print_newline exec_s (exec_shove (exec_k_when_autoconstructing (exec_do*range (print_boolean tag_exec_622 () print_boolean boolean_invert_first_then_and boolean_frominteger integer_swap exec_s (integer_add) (exec_shove (boolean_dup_items) -56) (boolean_flush) integer_empty boolean_dup integer_stackdepth boolean_and) integer_gte integer_shove exec_s () (boolean_frominteger integer_stackdepth integer_pop integer_add boolean_invert_second_then_and) (in4 exec_do*count (integer_add) tagged_751 in3) exec_when (exec_when () integer_empty)) ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 119
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 535 205 571 593 215 218 194 550 217)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (235 535 205 571 593 215 218 194 550 217)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 14} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction -13} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_exec_622} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 1, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 93
Size: 126
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.467
Median total errors in population: 6
Error averages by case: (0.765 0.465 0.795 0.429 0.407 0.785 0.782 0.806 0.45 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.294
Average program size in population (points): 111.482
Average percent parens in population: 0.254
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10965960
--- Timings ---
Current time: 1559593828636 milliseconds
Total Time:          38.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 42.2%
Fitness Testing:     12.1 seconds, 31.2%
Report:              10.2 seconds, 26.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 126


Auto-simplifying with starting size: 126
step: 0
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 500
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 1000
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 1500
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 2000
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 2500
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 3000
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 3500
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 4000
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 4500
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

step: 5000
program: (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_min) () (boolean_dup in1) integer_mod) (boolean_or integer_gt exec_eq) (integer_dup_items boolean_and exec_k (exec_do*range () exec_flush boolean_pop exec_swap (boolean_frominteger boolean_empty) (boolean_dup) integer_yank boolean_shove integer_min exec_flush exec_y_when_autoconstructing (14 boolean_eq) exec_eq exec_do*range () -13 print_boolean exec_pop () integer_shove) (integer_dup_times) boolean_invert_first_then_and) boolean_eq in4 boolean_pop boolean_or tag_boolean_444 in3 integer_min print_integer integer_empty integer_fromboolean integer_dec exec_y () in1 exec_do*range (integer_flush) integer_pop exec_eq exec_k () (boolean_flush boolean_invert_first_then_and) exec_do*range (boolean_or exec_yank exec_if (boolean_xor tag_exec_622 () boolean_frominteger integer_gt integer_swap exec_s (integer_add) (integer_sub) (print_newline) in3 exec_do*range () boolean_yank boolean_or integer_stackdepth boolean_and) (boolean_frominteger integer_mult) integer_gte integer_flush boolean_frominteger integer_stackdepth integer_add integer_pop exec_k () (exec_do*count (exec_if (integer_add) (exec_eq in3) boolean_not) integer_pop exec_when () integer_dup_items integer_max)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 126

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 410
Test mean error for best: 0.41000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 31                 
;;******************************
