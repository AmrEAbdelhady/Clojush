Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[94 96 96 96] 94] [[91 91 -83 91] -83] [[10 -30 -30 -30] -30] [[-78 -78 -78 1] -78] [[94 94 94 -55] -55] [[-32 -45 -45 -45] -45] [[-15 -15 97 -15] -15] [[-8 10 -8 -8] -8] [[-83 -83 -4 -83] -83] [[33 33 33 12] 12] [(-49 -49 -49 -49) -49] [(-67 -67 -67 -67) -67] [(12 12 12 12) 12] [(23 23 23 23) 23] [(90 90 90 90) 90] [(5 58 13 29) 5] [(37 27 62 7) 7] [(34 69 96 40) 34] [(79 3 7 95) 3] [(30 87 80 73) 30] [(23 26 7 8) 7] [(60 3 16 14) 3] [(70 81 90 41) 41] [(35 44 67 34) 34] [(8 2 25 16) 2] [(92 11 23 76) 11] [(60 57 7 10) 7] [(3 41 68 36) 3] [(79 49 63 71) 49] [(11 74 91 20) 11] [(42 32 58 79) 32] [(49 80 38 90) 38] [(9 94 63 44) 9] [(24 7 31 42) 7] [(9 14 31 86) 9] [(35 19 30 -9) -9] [(84 78 63 -79) -79] [(64 -19 28 14) -19] [(-54 99 -70 -3) -70] [(-96 85 -50 51) -96] [(20 5 13 49) 5] [(-57 10 17 -63) -63] [(77 67 -93 85) -93] [(-95 -5 -54 49) -95] [(41 95 -80 20) -80] [(-41 62 37 35) -41] [(-22 49 44 -68) -68] [(-7 -64 98 40) -64] [(-42 72 -8 76) -42] [(16 -9 -40 64) -40] [(-53 0 41 -75) -75] [(52 35 -59 -13) -59] [(-79 49 83 70) -79] [(-76 -86 38 81) -86] [(-33 -93 -41 15) -93] [(23 -24 -59 -3) -59] [(-24 0 70 19) -24] [(-31 86 -79 92) -79] [(81 -21 59 16) -21] [(-88 -53 -99 14) -99] [(18 -47 -51 -65) -65] [(-78 -50 -29 -31) -78] [(88 -73 -61 62) -73] [(-26 -67 88 -73) -73] [(-26 21 -3 -7) -26] [(47 68 -17 45) -17] [(-47 -58 -66 -16) -66] [(99 6 -91 66) -91] [(-83 -10 -15 86) -83] [(0 51 17 -93) -93] [(-98 29 -72 -35) -98] [(49 -34 29 -48) -48] [(-71 92 85 45) -71] [(55 70 97 -60) -60] [(-93 71 24 9) -93] [(-56 -99 -16 -34) -99] [(53 -84 -7 -47) -84] [(34 -82 70 46) -82] [(-24 75 -42 47) -42] [(-49 -15 -58 65) -58] [(6 100 87 55) 6] [(77 99 37 -26) -26] [(60 -20 27 58) -20] [(-77 9 49 43) -77] [(86 -100 -42 9) -100] [(78 49 16 75) 16] [(-24 -86 26 49) -86] [(-97 -29 -49 95) -97] [(-41 70 18 25) -41] [(40 -1 -89 -91) -91] [(92 48 45 81) 45] [(-77 5 -72 86) -77] [(88 77 -57 -57) -57] [(-52 -91 42 -13) -91] [(73 -82 75 -28) -82])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[94 96 96 96] 94]
Train Case:   6 | Input/Output: [[91 91 -83 91] -83]
Train Case:   7 | Input/Output: [[10 -30 -30 -30] -30]
Train Case:   8 | Input/Output: [[-78 -78 -78 1] -78]
Train Case:   9 | Input/Output: [[94 94 94 -55] -55]
Train Case:  10 | Input/Output: [[-32 -45 -45 -45] -45]
Train Case:  11 | Input/Output: [[-15 -15 97 -15] -15]
Train Case:  12 | Input/Output: [[-8 10 -8 -8] -8]
Train Case:  13 | Input/Output: [[-83 -83 -4 -83] -83]
Train Case:  14 | Input/Output: [[33 33 33 12] 12]
Train Case:  15 | Input/Output: [(-49 -49 -49 -49) -49]
Train Case:  16 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  17 | Input/Output: [(12 12 12 12) 12]
Train Case:  18 | Input/Output: [(23 23 23 23) 23]
Train Case:  19 | Input/Output: [(90 90 90 90) 90]
Train Case:  20 | Input/Output: [(5 58 13 29) 5]
Train Case:  21 | Input/Output: [(37 27 62 7) 7]
Train Case:  22 | Input/Output: [(34 69 96 40) 34]
Train Case:  23 | Input/Output: [(79 3 7 95) 3]
Train Case:  24 | Input/Output: [(30 87 80 73) 30]
Train Case:  25 | Input/Output: [(23 26 7 8) 7]
Train Case:  26 | Input/Output: [(60 3 16 14) 3]
Train Case:  27 | Input/Output: [(70 81 90 41) 41]
Train Case:  28 | Input/Output: [(35 44 67 34) 34]
Train Case:  29 | Input/Output: [(8 2 25 16) 2]
Train Case:  30 | Input/Output: [(92 11 23 76) 11]
Train Case:  31 | Input/Output: [(60 57 7 10) 7]
Train Case:  32 | Input/Output: [(3 41 68 36) 3]
Train Case:  33 | Input/Output: [(79 49 63 71) 49]
Train Case:  34 | Input/Output: [(11 74 91 20) 11]
Train Case:  35 | Input/Output: [(42 32 58 79) 32]
Train Case:  36 | Input/Output: [(49 80 38 90) 38]
Train Case:  37 | Input/Output: [(9 94 63 44) 9]
Train Case:  38 | Input/Output: [(24 7 31 42) 7]
Train Case:  39 | Input/Output: [(9 14 31 86) 9]
Train Case:  40 | Input/Output: [(35 19 30 -9) -9]
Train Case:  41 | Input/Output: [(84 78 63 -79) -79]
Train Case:  42 | Input/Output: [(64 -19 28 14) -19]
Train Case:  43 | Input/Output: [(-54 99 -70 -3) -70]
Train Case:  44 | Input/Output: [(-96 85 -50 51) -96]
Train Case:  45 | Input/Output: [(20 5 13 49) 5]
Train Case:  46 | Input/Output: [(-57 10 17 -63) -63]
Train Case:  47 | Input/Output: [(77 67 -93 85) -93]
Train Case:  48 | Input/Output: [(-95 -5 -54 49) -95]
Train Case:  49 | Input/Output: [(41 95 -80 20) -80]
Train Case:  50 | Input/Output: [(-41 62 37 35) -41]
Train Case:  51 | Input/Output: [(-22 49 44 -68) -68]
Train Case:  52 | Input/Output: [(-7 -64 98 40) -64]
Train Case:  53 | Input/Output: [(-42 72 -8 76) -42]
Train Case:  54 | Input/Output: [(16 -9 -40 64) -40]
Train Case:  55 | Input/Output: [(-53 0 41 -75) -75]
Train Case:  56 | Input/Output: [(52 35 -59 -13) -59]
Train Case:  57 | Input/Output: [(-79 49 83 70) -79]
Train Case:  58 | Input/Output: [(-76 -86 38 81) -86]
Train Case:  59 | Input/Output: [(-33 -93 -41 15) -93]
Train Case:  60 | Input/Output: [(23 -24 -59 -3) -59]
Train Case:  61 | Input/Output: [(-24 0 70 19) -24]
Train Case:  62 | Input/Output: [(-31 86 -79 92) -79]
Train Case:  63 | Input/Output: [(81 -21 59 16) -21]
Train Case:  64 | Input/Output: [(-88 -53 -99 14) -99]
Train Case:  65 | Input/Output: [(18 -47 -51 -65) -65]
Train Case:  66 | Input/Output: [(-78 -50 -29 -31) -78]
Train Case:  67 | Input/Output: [(88 -73 -61 62) -73]
Train Case:  68 | Input/Output: [(-26 -67 88 -73) -73]
Train Case:  69 | Input/Output: [(-26 21 -3 -7) -26]
Train Case:  70 | Input/Output: [(47 68 -17 45) -17]
Train Case:  71 | Input/Output: [(-47 -58 -66 -16) -66]
Train Case:  72 | Input/Output: [(99 6 -91 66) -91]
Train Case:  73 | Input/Output: [(-83 -10 -15 86) -83]
Train Case:  74 | Input/Output: [(0 51 17 -93) -93]
Train Case:  75 | Input/Output: [(-98 29 -72 -35) -98]
Train Case:  76 | Input/Output: [(49 -34 29 -48) -48]
Train Case:  77 | Input/Output: [(-71 92 85 45) -71]
Train Case:  78 | Input/Output: [(55 70 97 -60) -60]
Train Case:  79 | Input/Output: [(-93 71 24 9) -93]
Train Case:  80 | Input/Output: [(-56 -99 -16 -34) -99]
Train Case:  81 | Input/Output: [(53 -84 -7 -47) -84]
Train Case:  82 | Input/Output: [(34 -82 70 46) -82]
Train Case:  83 | Input/Output: [(-24 75 -42 47) -42]
Train Case:  84 | Input/Output: [(-49 -15 -58 65) -58]
Train Case:  85 | Input/Output: [(6 100 87 55) 6]
Train Case:  86 | Input/Output: [(77 99 37 -26) -26]
Train Case:  87 | Input/Output: [(60 -20 27 58) -20]
Train Case:  88 | Input/Output: [(-77 9 49 43) -77]
Train Case:  89 | Input/Output: [(86 -100 -42 9) -100]
Train Case:  90 | Input/Output: [(78 49 16 75) 16]
Train Case:  91 | Input/Output: [(-24 -86 26 49) -86]
Train Case:  92 | Input/Output: [(-97 -29 -49 95) -97]
Train Case:  93 | Input/Output: [(-41 70 18 25) -41]
Train Case:  94 | Input/Output: [(40 -1 -89 -91) -91]
Train Case:  95 | Input/Output: [(92 48 45 81) 45]
Train Case:  96 | Input/Output: [(-77 5 -72 86) -77]
Train Case:  97 | Input/Output: [(88 77 -57 -57) -57]
Train Case:  98 | Input/Output: [(-52 -91 42 -13) -91]
Train Case:  99 | Input/Output: [(73 -82 75 -28) -82]
Test Case:   0 | Input/Output: [[-16 -16 65 -16] -16]
Test Case:   1 | Input/Output: [[12 18 18 18] 12]
Test Case:   2 | Input/Output: [[68 -50 68 68] -50]
Test Case:   3 | Input/Output: [[-12 -66 -66 -66] -66]
Test Case:   4 | Input/Output: [[-97 -97 -97 -97] -97]
Test Case:   5 | Input/Output: [[89 3 89 89] 3]
Test Case:   6 | Input/Output: [[55 55 55 32] 32]
Test Case:   7 | Input/Output: [[-11 -11 44 -11] -11]
Test Case:   8 | Input/Output: [[52 52 52 -4] -4]
Test Case:   9 | Input/Output: [[11 11 -24 11] -24]
Test Case:  10 | Input/Output: [[25 6 25 25] 6]
Test Case:  11 | Input/Output: [[43 -31 -31 -31] -31]
Test Case:  12 | Input/Output: [[-97 -97 -97 -66] -97]
Test Case:  13 | Input/Output: [[57 57 57 8] 8]
Test Case:  14 | Input/Output: [[14 72 14 14] 14]
Test Case:  15 | Input/Output: [[-6 -62 -6 -6] -62]
Test Case:  16 | Input/Output: [[-5 -5 91 -5] -5]
Test Case:  17 | Input/Output: [[92 92 2 92] 2]
Test Case:  18 | Input/Output: [[-75 -9 -75 -75] -75]
Test Case:  19 | Input/Output: [[66 66 66 -57] -57]
Test Case:  20 | Input/Output: [[31 -54 -54 -54] -54]
Test Case:  21 | Input/Output: [[9 48 9 9] 9]
Test Case:  22 | Input/Output: [[85 69 85 85] 69]
Test Case:  23 | Input/Output: [[-21 41 41 41] -21]
Test Case:  24 | Input/Output: [[-76 -76 -76 69] -76]
Test Case:  25 | Input/Output: [[-86 -46 -46 -46] -86]
Test Case:  26 | Input/Output: [[24 -1 -1 -1] -1]
Test Case:  27 | Input/Output: [[65 38 65 65] 38]
Test Case:  28 | Input/Output: [[42 42 78 42] 42]
Test Case:  29 | Input/Output: [[55 55 45 55] 45]
Test Case:  30 | Input/Output: [[-56 85 -56 -56] -56]
Test Case:  31 | Input/Output: [[-51 -51 64 -51] -51]
Test Case:  32 | Input/Output: [[-56 -56 -56 -63] -63]
Test Case:  33 | Input/Output: [[-37 -26 -26 -26] -37]
Test Case:  34 | Input/Output: [[-72 27 27 27] -72]
Test Case:  35 | Input/Output: [[-67 -37 -37 -37] -67]
Test Case:  36 | Input/Output: [[-92 -92 -92 33] -92]
Test Case:  37 | Input/Output: [[-9 2 2 2] -9]
Test Case:  38 | Input/Output: [[-68 -68 -68 -42] -68]
Test Case:  39 | Input/Output: [[-1 47 -1 -1] -1]
Test Case:  40 | Input/Output: [[-33 -33 -33 -57] -57]
Test Case:  41 | Input/Output: [[64 97 97 97] 64]
Test Case:  42 | Input/Output: [[-16 -16 -16 44] -16]
Test Case:  43 | Input/Output: [[66 66 66 -29] -29]
Test Case:  44 | Input/Output: [[-58 -58 8 -58] -58]
Test Case:  45 | Input/Output: [[21 22 21 21] 21]
Test Case:  46 | Input/Output: [[23 -44 -44 -44] -44]
Test Case:  47 | Input/Output: [[-54 -54 86 -54] -54]
Test Case:  48 | Input/Output: [[-89 -89 -32 -89] -89]
Test Case:  49 | Input/Output: [[66 66 -14 66] -14]
Test Case:  50 | Input/Output: [[10 10 60 10] 10]
Test Case:  51 | Input/Output: [[52 52 7 52] 7]
Test Case:  52 | Input/Output: [[-41 -69 -69 -69] -69]
Test Case:  53 | Input/Output: [[-74 -74 -74 -30] -74]
Test Case:  54 | Input/Output: [[60 -38 -38 -38] -38]
Test Case:  55 | Input/Output: [[-65 -65 2 -65] -65]
Test Case:  56 | Input/Output: [[-85 -85 -87 -85] -87]
Test Case:  57 | Input/Output: [[11 -87 11 11] -87]
Test Case:  58 | Input/Output: [[-55 -55 -55 52] -55]
Test Case:  59 | Input/Output: [[67 -49 67 67] -49]
Test Case:  60 | Input/Output: [[-42 -42 17 -42] -42]
Test Case:  61 | Input/Output: [[-98 -98 -99 -98] -99]
Test Case:  62 | Input/Output: [[59 -27 59 59] -27]
Test Case:  63 | Input/Output: [[-86 -41 -86 -86] -86]
Test Case:  64 | Input/Output: [[-65 -65 -65 -27] -65]
Test Case:  65 | Input/Output: [[-10 -10 -10 63] -10]
Test Case:  66 | Input/Output: [[48 48 37 48] 37]
Test Case:  67 | Input/Output: [[91 -96 -96 -96] -96]
Test Case:  68 | Input/Output: [[87 -13 -13 -13] -13]
Test Case:  69 | Input/Output: [[-48 -48 -48 56] -48]
Test Case:  70 | Input/Output: [[8 -14 8 8] -14]
Test Case:  71 | Input/Output: [[48 -100 48 48] -100]
Test Case:  72 | Input/Output: [[18 18 52 18] 18]
Test Case:  73 | Input/Output: [[71 71 1 71] 1]
Test Case:  74 | Input/Output: [[-68 61 -68 -68] -68]
Test Case:  75 | Input/Output: [[57 15 57 57] 15]
Test Case:  76 | Input/Output: [[65 65 65 -29] -29]
Test Case:  77 | Input/Output: [[-26 -26 -26 -38] -38]
Test Case:  78 | Input/Output: [[7 7 -81 7] -81]
Test Case:  79 | Input/Output: [[-10 -6 -6 -6] -10]
Test Case:  80 | Input/Output: [[-99 -51 -99 -99] -99]
Test Case:  81 | Input/Output: [[-75 -75 -75 82] -75]
Test Case:  82 | Input/Output: [[-63 -40 -40 -40] -63]
Test Case:  83 | Input/Output: [[-23 1 -23 -23] -23]
Test Case:  84 | Input/Output: [[17 62 62 62] 17]
Test Case:  85 | Input/Output: [[-59 -59 -81 -59] -81]
Test Case:  86 | Input/Output: [[-12 -12 -12 -87] -87]
Test Case:  87 | Input/Output: [[28 -98 -98 -98] -98]
Test Case:  88 | Input/Output: [[-19 14 -19 -19] -19]
Test Case:  89 | Input/Output: [[-49 -49 -36 -49] -49]
Test Case:  90 | Input/Output: [[72 72 72 -35] -35]
Test Case:  91 | Input/Output: [[94 94 94 1] 1]
Test Case:  92 | Input/Output: [[-85 -85 -85 -10] -85]
Test Case:  93 | Input/Output: [[96 -77 96 96] -77]
Test Case:  94 | Input/Output: [[76 -83 76 76] -83]
Test Case:  95 | Input/Output: [[-76 -98 -98 -98] -98]
Test Case:  96 | Input/Output: [[-84 -24 -24 -24] -84]
Test Case:  97 | Input/Output: [[27 -12 -12 -12] -12]
Test Case:  98 | Input/Output: [[63 15 63 63] 15]
Test Case:  99 | Input/Output: [[96 96 -57 96] -57]
Test Case: 100 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 101 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 102 | Input/Output: [(75 75 75 75) 75]
Test Case: 103 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 104 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 105 | Input/Output: [(76 76 76 76) 76]
Test Case: 106 | Input/Output: [(40 40 40 40) 40]
Test Case: 107 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 108 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 109 | Input/Output: [(27 27 27 27) 27]
Test Case: 110 | Input/Output: [(61 61 61 61) 61]
Test Case: 111 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 112 | Input/Output: [(0 0 0 0) 0]
Test Case: 113 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 114 | Input/Output: [(41 41 41 41) 41]
Test Case: 115 | Input/Output: [(33 33 33 33) 33]
Test Case: 116 | Input/Output: [(25 25 25 25) 25]
Test Case: 117 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 118 | Input/Output: [(89 89 89 89) 89]
Test Case: 119 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 120 | Input/Output: [(49 49 49 49) 49]
Test Case: 121 | Input/Output: [(71 71 71 71) 71]
Test Case: 122 | Input/Output: [(54 54 54 54) 54]
Test Case: 123 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 124 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 125 | Input/Output: [(59 59 59 59) 59]
Test Case: 126 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 127 | Input/Output: [(29 29 29 29) 29]
Test Case: 128 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 129 | Input/Output: [(83 83 83 83) 83]
Test Case: 130 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 131 | Input/Output: [(37 37 37 37) 37]
Test Case: 132 | Input/Output: [(25 25 25 25) 25]
Test Case: 133 | Input/Output: [(77 77 77 77) 77]
Test Case: 134 | Input/Output: [(100 100 100 100) 100]
Test Case: 135 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 136 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 137 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 138 | Input/Output: [(23 23 23 23) 23]
Test Case: 139 | Input/Output: [(62 62 62 62) 62]
Test Case: 140 | Input/Output: [(17 17 17 17) 17]
Test Case: 141 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 142 | Input/Output: [(67 67 67 67) 67]
Test Case: 143 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 144 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 145 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 146 | Input/Output: [(95 95 95 95) 95]
Test Case: 147 | Input/Output: [(3 3 3 3) 3]
Test Case: 148 | Input/Output: [(81 81 81 81) 81]
Test Case: 149 | Input/Output: [(24 24 24 24) 24]
Test Case: 150 | Input/Output: [(20 20 20 20) 20]
Test Case: 151 | Input/Output: [(26 26 26 26) 26]
Test Case: 152 | Input/Output: [(76 76 76 76) 76]
Test Case: 153 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 154 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 155 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 156 | Input/Output: [(99 99 99 99) 99]
Test Case: 157 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 158 | Input/Output: [(13 13 13 13) 13]
Test Case: 159 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 160 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 161 | Input/Output: [(48 48 48 48) 48]
Test Case: 162 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 163 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 164 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 165 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 166 | Input/Output: [(51 51 51 51) 51]
Test Case: 167 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 168 | Input/Output: [(77 77 77 77) 77]
Test Case: 169 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 170 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 171 | Input/Output: [(67 67 67 67) 67]
Test Case: 172 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 173 | Input/Output: [(14 14 14 14) 14]
Test Case: 174 | Input/Output: [(89 89 89 89) 89]
Test Case: 175 | Input/Output: [(11 11 11 11) 11]
Test Case: 176 | Input/Output: [(82 82 82 82) 82]
Test Case: 177 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 178 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 179 | Input/Output: [(51 51 51 51) 51]
Test Case: 180 | Input/Output: [(71 71 71 71) 71]
Test Case: 181 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 182 | Input/Output: [(57 57 57 57) 57]
Test Case: 183 | Input/Output: [(32 32 32 32) 32]
Test Case: 184 | Input/Output: [(51 51 51 51) 51]
Test Case: 185 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 186 | Input/Output: [(96 96 96 96) 96]
Test Case: 187 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 188 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 189 | Input/Output: [(21 21 21 21) 21]
Test Case: 190 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 191 | Input/Output: [(54 54 54 54) 54]
Test Case: 192 | Input/Output: [(70 70 70 70) 70]
Test Case: 193 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 194 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 195 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 196 | Input/Output: [(51 51 51 51) 51]
Test Case: 197 | Input/Output: [(12 12 12 12) 12]
Test Case: 198 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 199 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 200 | Input/Output: [(37 30 94 24) 24]
Test Case: 201 | Input/Output: [(21 17 45 78) 17]
Test Case: 202 | Input/Output: [(68 69 66 17) 17]
Test Case: 203 | Input/Output: [(60 20 64 85) 20]
Test Case: 204 | Input/Output: [(51 15 94 30) 15]
Test Case: 205 | Input/Output: [(92 89 48 11) 11]
Test Case: 206 | Input/Output: [(74 71 45 49) 45]
Test Case: 207 | Input/Output: [(30 81 25 67) 25]
Test Case: 208 | Input/Output: [(0 74 15 14) 0]
Test Case: 209 | Input/Output: [(84 86 72 30) 30]
Test Case: 210 | Input/Output: [(68 63 79 62) 62]
Test Case: 211 | Input/Output: [(86 14 0 25) 0]
Test Case: 212 | Input/Output: [(18 2 22 23) 2]
Test Case: 213 | Input/Output: [(59 73 57 86) 57]
Test Case: 214 | Input/Output: [(83 13 39 6) 6]
Test Case: 215 | Input/Output: [(96 9 88 60) 9]
Test Case: 216 | Input/Output: [(26 26 42 52) 26]
Test Case: 217 | Input/Output: [(85 89 35 95) 35]
Test Case: 218 | Input/Output: [(31 88 25 66) 25]
Test Case: 219 | Input/Output: [(99 90 8 35) 8]
Test Case: 220 | Input/Output: [(39 89 17 64) 17]
Test Case: 221 | Input/Output: [(87 18 17 75) 17]
Test Case: 222 | Input/Output: [(63 61 62 93) 61]
Test Case: 223 | Input/Output: [(27 40 47 31) 27]
Test Case: 224 | Input/Output: [(85 23 69 67) 23]
Test Case: 225 | Input/Output: [(9 64 59 39) 9]
Test Case: 226 | Input/Output: [(31 7 0 83) 0]
Test Case: 227 | Input/Output: [(48 48 52 69) 48]
Test Case: 228 | Input/Output: [(83 55 7 96) 7]
Test Case: 229 | Input/Output: [(33 32 96 41) 32]
Test Case: 230 | Input/Output: [(57 46 24 92) 24]
Test Case: 231 | Input/Output: [(39 42 65 95) 39]
Test Case: 232 | Input/Output: [(62 62 51 11) 11]
Test Case: 233 | Input/Output: [(6 82 61 73) 6]
Test Case: 234 | Input/Output: [(60 1 42 23) 1]
Test Case: 235 | Input/Output: [(14 9 23 22) 9]
Test Case: 236 | Input/Output: [(6 79 69 47) 6]
Test Case: 237 | Input/Output: [(78 4 54 59) 4]
Test Case: 238 | Input/Output: [(11 92 43 12) 11]
Test Case: 239 | Input/Output: [(74 3 71 3) 3]
Test Case: 240 | Input/Output: [(43 12 6 53) 6]
Test Case: 241 | Input/Output: [(85 16 4 38) 4]
Test Case: 242 | Input/Output: [(43 49 100 15) 15]
Test Case: 243 | Input/Output: [(54 81 79 23) 23]
Test Case: 244 | Input/Output: [(81 37 57 92) 37]
Test Case: 245 | Input/Output: [(8 42 73 6) 6]
Test Case: 246 | Input/Output: [(54 92 39 82) 39]
Test Case: 247 | Input/Output: [(28 91 60 36) 28]
Test Case: 248 | Input/Output: [(93 36 61 52) 36]
Test Case: 249 | Input/Output: [(5 43 15 88) 5]
Test Case: 250 | Input/Output: [(4 51 82 100) 4]
Test Case: 251 | Input/Output: [(90 0 46 23) 0]
Test Case: 252 | Input/Output: [(69 33 40 93) 33]
Test Case: 253 | Input/Output: [(4 36 17 75) 4]
Test Case: 254 | Input/Output: [(28 7 60 4) 4]
Test Case: 255 | Input/Output: [(14 27 67 16) 14]
Test Case: 256 | Input/Output: [(95 83 48 95) 48]
Test Case: 257 | Input/Output: [(72 62 38 81) 38]
Test Case: 258 | Input/Output: [(83 35 39 33) 33]
Test Case: 259 | Input/Output: [(69 20 85 45) 20]
Test Case: 260 | Input/Output: [(71 31 66 62) 31]
Test Case: 261 | Input/Output: [(49 90 8 70) 8]
Test Case: 262 | Input/Output: [(17 16 79 83) 16]
Test Case: 263 | Input/Output: [(94 69 33 83) 33]
Test Case: 264 | Input/Output: [(96 11 95 73) 11]
Test Case: 265 | Input/Output: [(7 12 85 92) 7]
Test Case: 266 | Input/Output: [(20 75 40 82) 20]
Test Case: 267 | Input/Output: [(99 70 55 10) 10]
Test Case: 268 | Input/Output: [(64 70 70 15) 15]
Test Case: 269 | Input/Output: [(84 71 28 46) 28]
Test Case: 270 | Input/Output: [(80 60 43 50) 43]
Test Case: 271 | Input/Output: [(70 40 78 58) 40]
Test Case: 272 | Input/Output: [(89 42 78 67) 42]
Test Case: 273 | Input/Output: [(16 57 55 40) 16]
Test Case: 274 | Input/Output: [(48 91 89 45) 45]
Test Case: 275 | Input/Output: [(88 5 38 49) 5]
Test Case: 276 | Input/Output: [(90 9 79 29) 9]
Test Case: 277 | Input/Output: [(95 94 25 56) 25]
Test Case: 278 | Input/Output: [(69 2 71 3) 2]
Test Case: 279 | Input/Output: [(52 89 60 60) 52]
Test Case: 280 | Input/Output: [(53 63 65 25) 25]
Test Case: 281 | Input/Output: [(42 92 79 82) 42]
Test Case: 282 | Input/Output: [(89 12 87 0) 0]
Test Case: 283 | Input/Output: [(4 76 75 66) 4]
Test Case: 284 | Input/Output: [(89 15 81 68) 15]
Test Case: 285 | Input/Output: [(1 63 96 2) 1]
Test Case: 286 | Input/Output: [(44 50 87 10) 10]
Test Case: 287 | Input/Output: [(26 8 21 46) 8]
Test Case: 288 | Input/Output: [(68 93 93 86) 68]
Test Case: 289 | Input/Output: [(64 99 96 29) 29]
Test Case: 290 | Input/Output: [(78 66 52 98) 52]
Test Case: 291 | Input/Output: [(83 17 2 20) 2]
Test Case: 292 | Input/Output: [(85 99 27 6) 6]
Test Case: 293 | Input/Output: [(51 20 64 42) 20]
Test Case: 294 | Input/Output: [(95 14 29 36) 14]
Test Case: 295 | Input/Output: [(37 58 20 7) 7]
Test Case: 296 | Input/Output: [(75 37 39 35) 35]
Test Case: 297 | Input/Output: [(41 68 53 43) 41]
Test Case: 298 | Input/Output: [(47 75 26 16) 16]
Test Case: 299 | Input/Output: [(94 64 63 100) 63]
Test Case: 300 | Input/Output: [(0 100 58 50) 0]
Test Case: 301 | Input/Output: [(75 92 0 87) 0]
Test Case: 302 | Input/Output: [(21 84 84 13) 13]
Test Case: 303 | Input/Output: [(67 41 82 0) 0]
Test Case: 304 | Input/Output: [(0 22 9 94) 0]
Test Case: 305 | Input/Output: [(5 85 68 7) 5]
Test Case: 306 | Input/Output: [(54 45 83 57) 45]
Test Case: 307 | Input/Output: [(92 25 4 25) 4]
Test Case: 308 | Input/Output: [(31 80 27 77) 27]
Test Case: 309 | Input/Output: [(1 43 18 62) 1]
Test Case: 310 | Input/Output: [(96 50 6 94) 6]
Test Case: 311 | Input/Output: [(99 71 79 67) 67]
Test Case: 312 | Input/Output: [(96 12 18 63) 12]
Test Case: 313 | Input/Output: [(0 28 75 71) 0]
Test Case: 314 | Input/Output: [(1 89 30 29) 1]
Test Case: 315 | Input/Output: [(70 79 31 11) 11]
Test Case: 316 | Input/Output: [(31 44 92 50) 31]
Test Case: 317 | Input/Output: [(68 49 44 53) 44]
Test Case: 318 | Input/Output: [(70 76 50 85) 50]
Test Case: 319 | Input/Output: [(95 31 88 96) 31]
Test Case: 320 | Input/Output: [(9 24 5 38) 5]
Test Case: 321 | Input/Output: [(87 11 5 27) 5]
Test Case: 322 | Input/Output: [(40 3 24 45) 3]
Test Case: 323 | Input/Output: [(90 98 80 24) 24]
Test Case: 324 | Input/Output: [(61 72 59 7) 7]
Test Case: 325 | Input/Output: [(8 57 13 63) 8]
Test Case: 326 | Input/Output: [(72 35 5 16) 5]
Test Case: 327 | Input/Output: [(14 76 38 70) 14]
Test Case: 328 | Input/Output: [(99 39 41 53) 39]
Test Case: 329 | Input/Output: [(96 98 17 58) 17]
Test Case: 330 | Input/Output: [(65 2 13 48) 2]
Test Case: 331 | Input/Output: [(96 22 15 35) 15]
Test Case: 332 | Input/Output: [(7 98 60 83) 7]
Test Case: 333 | Input/Output: [(8 91 64 20) 8]
Test Case: 334 | Input/Output: [(84 6 17 97) 6]
Test Case: 335 | Input/Output: [(46 4 10 36) 4]
Test Case: 336 | Input/Output: [(13 4 30 11) 4]
Test Case: 337 | Input/Output: [(98 82 57 56) 56]
Test Case: 338 | Input/Output: [(44 37 86 71) 37]
Test Case: 339 | Input/Output: [(94 78 87 72) 72]
Test Case: 340 | Input/Output: [(42 57 41 24) 24]
Test Case: 341 | Input/Output: [(77 85 76 6) 6]
Test Case: 342 | Input/Output: [(34 32 80 21) 21]
Test Case: 343 | Input/Output: [(41 68 15 47) 15]
Test Case: 344 | Input/Output: [(91 47 46 10) 10]
Test Case: 345 | Input/Output: [(68 12 37 48) 12]
Test Case: 346 | Input/Output: [(15 18 18 22) 15]
Test Case: 347 | Input/Output: [(19 87 49 71) 19]
Test Case: 348 | Input/Output: [(74 69 63 88) 63]
Test Case: 349 | Input/Output: [(74 35 86 82) 35]
Test Case: 350 | Input/Output: [(82 15 63 0) 0]
Test Case: 351 | Input/Output: [(8 99 80 86) 8]
Test Case: 352 | Input/Output: [(45 67 71 69) 45]
Test Case: 353 | Input/Output: [(34 16 35 10) 10]
Test Case: 354 | Input/Output: [(44 63 6 66) 6]
Test Case: 355 | Input/Output: [(71 95 28 60) 28]
Test Case: 356 | Input/Output: [(6 85 14 39) 6]
Test Case: 357 | Input/Output: [(32 56 24 24) 24]
Test Case: 358 | Input/Output: [(78 44 66 82) 44]
Test Case: 359 | Input/Output: [(10 24 22 98) 10]
Test Case: 360 | Input/Output: [(91 22 76 25) 22]
Test Case: 361 | Input/Output: [(27 9 85 5) 5]
Test Case: 362 | Input/Output: [(44 63 58 76) 44]
Test Case: 363 | Input/Output: [(52 23 62 71) 23]
Test Case: 364 | Input/Output: [(45 26 98 11) 11]
Test Case: 365 | Input/Output: [(18 72 76 25) 18]
Test Case: 366 | Input/Output: [(43 36 87 3) 3]
Test Case: 367 | Input/Output: [(58 50 71 62) 50]
Test Case: 368 | Input/Output: [(9 4 31 14) 4]
Test Case: 369 | Input/Output: [(49 23 40 40) 23]
Test Case: 370 | Input/Output: [(59 39 24 83) 24]
Test Case: 371 | Input/Output: [(30 10 83 90) 10]
Test Case: 372 | Input/Output: [(9 37 86 27) 9]
Test Case: 373 | Input/Output: [(7 77 76 91) 7]
Test Case: 374 | Input/Output: [(97 13 25 72) 13]
Test Case: 375 | Input/Output: [(86 87 70 58) 58]
Test Case: 376 | Input/Output: [(0 67 9 47) 0]
Test Case: 377 | Input/Output: [(80 57 13 48) 13]
Test Case: 378 | Input/Output: [(72 42 11 75) 11]
Test Case: 379 | Input/Output: [(60 56 61 38) 38]
Test Case: 380 | Input/Output: [(86 48 55 91) 48]
Test Case: 381 | Input/Output: [(7 17 44 33) 7]
Test Case: 382 | Input/Output: [(52 38 73 90) 38]
Test Case: 383 | Input/Output: [(46 35 48 2) 2]
Test Case: 384 | Input/Output: [(21 55 92 26) 21]
Test Case: 385 | Input/Output: [(20 91 49 68) 20]
Test Case: 386 | Input/Output: [(39 11 4 22) 4]
Test Case: 387 | Input/Output: [(4 94 75 66) 4]
Test Case: 388 | Input/Output: [(32 66 89 23) 23]
Test Case: 389 | Input/Output: [(64 6 87 66) 6]
Test Case: 390 | Input/Output: [(96 69 80 65) 65]
Test Case: 391 | Input/Output: [(30 19 76 68) 19]
Test Case: 392 | Input/Output: [(84 38 58 9) 9]
Test Case: 393 | Input/Output: [(22 51 10 12) 10]
Test Case: 394 | Input/Output: [(75 1 55 97) 1]
Test Case: 395 | Input/Output: [(14 46 92 22) 14]
Test Case: 396 | Input/Output: [(56 14 100 0) 0]
Test Case: 397 | Input/Output: [(70 84 32 52) 32]
Test Case: 398 | Input/Output: [(99 9 27 42) 9]
Test Case: 399 | Input/Output: [(91 11 11 91) 11]
Test Case: 400 | Input/Output: [(-99 -76 -4 44) -99]
Test Case: 401 | Input/Output: [(83 -65 -84 -2) -84]
Test Case: 402 | Input/Output: [(43 10 -31 -94) -94]
Test Case: 403 | Input/Output: [(-63 -44 72 76) -63]
Test Case: 404 | Input/Output: [(-73 93 -43 -67) -73]
Test Case: 405 | Input/Output: [(-57 100 -45 86) -57]
Test Case: 406 | Input/Output: [(-16 96 84 27) -16]
Test Case: 407 | Input/Output: [(-1 -10 77 53) -10]
Test Case: 408 | Input/Output: [(-3 -43 88 22) -43]
Test Case: 409 | Input/Output: [(-23 -12 47 36) -23]
Test Case: 410 | Input/Output: [(-1 -47 63 71) -47]
Test Case: 411 | Input/Output: [(71 59 -48 13) -48]
Test Case: 412 | Input/Output: [(-86 -39 61 95) -86]
Test Case: 413 | Input/Output: [(81 -8 -47 55) -47]
Test Case: 414 | Input/Output: [(91 75 98 -19) -19]
Test Case: 415 | Input/Output: [(-47 24 -60 -13) -60]
Test Case: 416 | Input/Output: [(41 -88 84 85) -88]
Test Case: 417 | Input/Output: [(-5 -52 -30 -44) -52]
Test Case: 418 | Input/Output: [(75 42 9 90) 9]
Test Case: 419 | Input/Output: [(-2 53 -21 98) -21]
Test Case: 420 | Input/Output: [(45 90 21 70) 21]
Test Case: 421 | Input/Output: [(16 -30 -99 -65) -99]
Test Case: 422 | Input/Output: [(-5 56 24 1) -5]
Test Case: 423 | Input/Output: [(-9 49 -42 -89) -89]
Test Case: 424 | Input/Output: [(59 31 -56 -57) -57]
Test Case: 425 | Input/Output: [(83 -59 36 34) -59]
Test Case: 426 | Input/Output: [(13 -27 -61 28) -61]
Test Case: 427 | Input/Output: [(55 -64 -28 -21) -64]
Test Case: 428 | Input/Output: [(-9 27 -5 -16) -16]
Test Case: 429 | Input/Output: [(-56 -12 -95 -41) -95]
Test Case: 430 | Input/Output: [(76 52 4 31) 4]
Test Case: 431 | Input/Output: [(-64 95 -12 41) -64]
Test Case: 432 | Input/Output: [(-74 75 64 57) -74]
Test Case: 433 | Input/Output: [(-33 -48 -6 -3) -48]
Test Case: 434 | Input/Output: [(46 25 27 -19) -19]
Test Case: 435 | Input/Output: [(-3 -60 72 -81) -81]
Test Case: 436 | Input/Output: [(28 71 39 64) 28]
Test Case: 437 | Input/Output: [(-85 43 76 9) -85]
Test Case: 438 | Input/Output: [(4 -71 -22 -97) -97]
Test Case: 439 | Input/Output: [(2 -63 -67 72) -67]
Test Case: 440 | Input/Output: [(40 -84 79 30) -84]
Test Case: 441 | Input/Output: [(-39 80 36 34) -39]
Test Case: 442 | Input/Output: [(69 -67 -81 -70) -81]
Test Case: 443 | Input/Output: [(-86 97 -35 -93) -93]
Test Case: 444 | Input/Output: [(-5 5 -95 61) -95]
Test Case: 445 | Input/Output: [(22 81 15 27) 15]
Test Case: 446 | Input/Output: [(67 60 39 59) 39]
Test Case: 447 | Input/Output: [(-61 -98 -47 -56) -98]
Test Case: 448 | Input/Output: [(3 73 24 55) 3]
Test Case: 449 | Input/Output: [(-12 48 88 -57) -57]
Test Case: 450 | Input/Output: [(13 13 45 64) 13]
Test Case: 451 | Input/Output: [(22 3 -48 87) -48]
Test Case: 452 | Input/Output: [(-59 -51 -67 82) -67]
Test Case: 453 | Input/Output: [(-23 75 61 -12) -23]
Test Case: 454 | Input/Output: [(79 14 64 -14) -14]
Test Case: 455 | Input/Output: [(-10 86 81 -74) -74]
Test Case: 456 | Input/Output: [(87 88 93 27) 27]
Test Case: 457 | Input/Output: [(13 63 61 84) 13]
Test Case: 458 | Input/Output: [(-66 26 -74 -50) -74]
Test Case: 459 | Input/Output: [(-62 -58 5 15) -62]
Test Case: 460 | Input/Output: [(-18 -75 27 -87) -87]
Test Case: 461 | Input/Output: [(25 92 27 100) 25]
Test Case: 462 | Input/Output: [(20 0 -54 39) -54]
Test Case: 463 | Input/Output: [(6 51 -56 91) -56]
Test Case: 464 | Input/Output: [(-88 87 89 22) -88]
Test Case: 465 | Input/Output: [(96 -19 16 7) -19]
Test Case: 466 | Input/Output: [(43 42 -68 -14) -68]
Test Case: 467 | Input/Output: [(3 96 -82 -100) -100]
Test Case: 468 | Input/Output: [(-86 -5 -33 -25) -86]
Test Case: 469 | Input/Output: [(19 -13 -34 -66) -66]
Test Case: 470 | Input/Output: [(-9 -79 70 -52) -79]
Test Case: 471 | Input/Output: [(32 23 -32 71) -32]
Test Case: 472 | Input/Output: [(-62 13 77 -59) -62]
Test Case: 473 | Input/Output: [(48 -69 -23 -35) -69]
Test Case: 474 | Input/Output: [(-98 8 35 -64) -98]
Test Case: 475 | Input/Output: [(18 -60 72 72) -60]
Test Case: 476 | Input/Output: [(4 83 93 -38) -38]
Test Case: 477 | Input/Output: [(79 -51 5 21) -51]
Test Case: 478 | Input/Output: [(-16 64 70 -79) -79]
Test Case: 479 | Input/Output: [(-41 -53 30 -56) -56]
Test Case: 480 | Input/Output: [(3 14 72 -92) -92]
Test Case: 481 | Input/Output: [(6 42 47 -52) -52]
Test Case: 482 | Input/Output: [(43 -22 -83 81) -83]
Test Case: 483 | Input/Output: [(92 97 -65 70) -65]
Test Case: 484 | Input/Output: [(61 70 41 -65) -65]
Test Case: 485 | Input/Output: [(24 -62 74 71) -62]
Test Case: 486 | Input/Output: [(15 -32 79 -1) -32]
Test Case: 487 | Input/Output: [(28 23 20 49) 20]
Test Case: 488 | Input/Output: [(-82 -73 73 -42) -82]
Test Case: 489 | Input/Output: [(-44 95 -10 31) -44]
Test Case: 490 | Input/Output: [(7 -35 -86 -64) -86]
Test Case: 491 | Input/Output: [(-39 58 -44 39) -44]
Test Case: 492 | Input/Output: [(-42 26 -10 73) -42]
Test Case: 493 | Input/Output: [(80 41 -40 -59) -59]
Test Case: 494 | Input/Output: [(35 -33 4 71) -33]
Test Case: 495 | Input/Output: [(-1 5 57 15) -1]
Test Case: 496 | Input/Output: [(43 -68 17 64) -68]
Test Case: 497 | Input/Output: [(-74 76 27 -43) -74]
Test Case: 498 | Input/Output: [(-38 80 98 29) -38]
Test Case: 499 | Input/Output: [(-16 48 -21 -34) -34]
Test Case: 500 | Input/Output: [(62 49 -70 92) -70]
Test Case: 501 | Input/Output: [(-22 -31 -3 -83) -83]
Test Case: 502 | Input/Output: [(11 -2 34 38) -2]
Test Case: 503 | Input/Output: [(45 2 -85 92) -85]
Test Case: 504 | Input/Output: [(-37 37 -86 -48) -86]
Test Case: 505 | Input/Output: [(9 -21 -57 -100) -100]
Test Case: 506 | Input/Output: [(-42 7 -77 -48) -77]
Test Case: 507 | Input/Output: [(100 39 -53 -65) -65]
Test Case: 508 | Input/Output: [(-71 43 -57 -42) -71]
Test Case: 509 | Input/Output: [(-12 100 -61 27) -61]
Test Case: 510 | Input/Output: [(-61 -97 -97 38) -97]
Test Case: 511 | Input/Output: [(-54 94 97 48) -54]
Test Case: 512 | Input/Output: [(-94 61 -19 0) -94]
Test Case: 513 | Input/Output: [(68 71 37 89) 37]
Test Case: 514 | Input/Output: [(-77 54 62 -74) -77]
Test Case: 515 | Input/Output: [(-16 -17 3 61) -17]
Test Case: 516 | Input/Output: [(80 -43 2 38) -43]
Test Case: 517 | Input/Output: [(84 -71 8 -68) -71]
Test Case: 518 | Input/Output: [(27 70 -85 -94) -94]
Test Case: 519 | Input/Output: [(55 -90 -66 -68) -90]
Test Case: 520 | Input/Output: [(55 -16 -64 13) -64]
Test Case: 521 | Input/Output: [(-55 6 -88 20) -88]
Test Case: 522 | Input/Output: [(53 -38 62 20) -38]
Test Case: 523 | Input/Output: [(-54 52 78 89) -54]
Test Case: 524 | Input/Output: [(-47 70 21 -20) -47]
Test Case: 525 | Input/Output: [(-98 -73 24 36) -98]
Test Case: 526 | Input/Output: [(2 35 -97 57) -97]
Test Case: 527 | Input/Output: [(-35 -44 22 54) -44]
Test Case: 528 | Input/Output: [(-47 95 82 -54) -54]
Test Case: 529 | Input/Output: [(-50 -63 -42 64) -63]
Test Case: 530 | Input/Output: [(-85 44 -31 -26) -85]
Test Case: 531 | Input/Output: [(-51 -48 49 -81) -81]
Test Case: 532 | Input/Output: [(-26 -34 18 28) -34]
Test Case: 533 | Input/Output: [(-73 -12 57 -74) -74]
Test Case: 534 | Input/Output: [(-67 76 3 -39) -67]
Test Case: 535 | Input/Output: [(0 24 -1 75) -1]
Test Case: 536 | Input/Output: [(-36 -94 39 50) -94]
Test Case: 537 | Input/Output: [(15 -81 0 -50) -81]
Test Case: 538 | Input/Output: [(14 92 54 24) 14]
Test Case: 539 | Input/Output: [(-16 -53 -58 77) -58]
Test Case: 540 | Input/Output: [(35 9 -46 -12) -46]
Test Case: 541 | Input/Output: [(-8 9 -19 52) -19]
Test Case: 542 | Input/Output: [(72 64 39 48) 39]
Test Case: 543 | Input/Output: [(17 -41 8 -52) -52]
Test Case: 544 | Input/Output: [(42 -22 -77 57) -77]
Test Case: 545 | Input/Output: [(92 12 -11 73) -11]
Test Case: 546 | Input/Output: [(-99 -11 -97 -82) -99]
Test Case: 547 | Input/Output: [(-78 -87 -98 100) -98]
Test Case: 548 | Input/Output: [(-31 37 -87 54) -87]
Test Case: 549 | Input/Output: [(-87 64 81 -9) -87]
Test Case: 550 | Input/Output: [(84 68 60 40) 40]
Test Case: 551 | Input/Output: [(67 -52 -14 -6) -52]
Test Case: 552 | Input/Output: [(33 -11 -10 12) -11]
Test Case: 553 | Input/Output: [(76 43 44 65) 43]
Test Case: 554 | Input/Output: [(-48 64 30 -55) -55]
Test Case: 555 | Input/Output: [(-2 63 -15 15) -15]
Test Case: 556 | Input/Output: [(72 -100 89 65) -100]
Test Case: 557 | Input/Output: [(-18 -58 -38 20) -58]
Test Case: 558 | Input/Output: [(-90 29 0 64) -90]
Test Case: 559 | Input/Output: [(-20 28 7 79) -20]
Test Case: 560 | Input/Output: [(-92 -39 66 94) -92]
Test Case: 561 | Input/Output: [(-27 21 65 76) -27]
Test Case: 562 | Input/Output: [(-29 76 -7 57) -29]
Test Case: 563 | Input/Output: [(-93 73 10 23) -93]
Test Case: 564 | Input/Output: [(99 -87 -16 53) -87]
Test Case: 565 | Input/Output: [(-88 37 15 -53) -88]
Test Case: 566 | Input/Output: [(-48 -4 12 14) -48]
Test Case: 567 | Input/Output: [(25 30 -26 34) -26]
Test Case: 568 | Input/Output: [(40 -45 -11 52) -45]
Test Case: 569 | Input/Output: [(-56 79 -93 -13) -93]
Test Case: 570 | Input/Output: [(94 -91 93 62) -91]
Test Case: 571 | Input/Output: [(-61 -69 -86 -81) -86]
Test Case: 572 | Input/Output: [(-17 12 59 62) -17]
Test Case: 573 | Input/Output: [(64 54 90 65) 54]
Test Case: 574 | Input/Output: [(48 98 -82 -77) -82]
Test Case: 575 | Input/Output: [(-64 51 -67 54) -67]
Test Case: 576 | Input/Output: [(12 -97 -78 -1) -97]
Test Case: 577 | Input/Output: [(50 -16 85 -95) -95]
Test Case: 578 | Input/Output: [(-30 -64 -48 -78) -78]
Test Case: 579 | Input/Output: [(90 -7 -74 -37) -74]
Test Case: 580 | Input/Output: [(61 -89 -64 -78) -89]
Test Case: 581 | Input/Output: [(-29 -97 19 -47) -97]
Test Case: 582 | Input/Output: [(-27 -8 -13 -21) -27]
Test Case: 583 | Input/Output: [(70 7 -76 -61) -76]
Test Case: 584 | Input/Output: [(2 95 68 45) 2]
Test Case: 585 | Input/Output: [(98 15 42 90) 15]
Test Case: 586 | Input/Output: [(93 -70 -88 92) -88]
Test Case: 587 | Input/Output: [(-45 -78 -15 55) -78]
Test Case: 588 | Input/Output: [(22 -38 15 97) -38]
Test Case: 589 | Input/Output: [(-14 -84 32 -2) -84]
Test Case: 590 | Input/Output: [(91 20 65 -18) -18]
Test Case: 591 | Input/Output: [(52 -54 3 32) -54]
Test Case: 592 | Input/Output: [(12 67 -60 -28) -60]
Test Case: 593 | Input/Output: [(-47 -7 -80 -51) -80]
Test Case: 594 | Input/Output: [(-96 67 -63 -88) -96]
Test Case: 595 | Input/Output: [(-38 96 -30 -37) -38]
Test Case: 596 | Input/Output: [(-65 -9 35 50) -65]
Test Case: 597 | Input/Output: [(69 -87 -86 -98) -98]
Test Case: 598 | Input/Output: [(93 20 60 -67) -67]
Test Case: 599 | Input/Output: [(0 66 79 -70) -70]
Test Case: 600 | Input/Output: [(-97 92 72 -15) -97]
Test Case: 601 | Input/Output: [(9 66 -50 67) -50]
Test Case: 602 | Input/Output: [(51 -1 94 -17) -17]
Test Case: 603 | Input/Output: [(39 -58 34 -53) -58]
Test Case: 604 | Input/Output: [(-69 0 51 19) -69]
Test Case: 605 | Input/Output: [(8 -73 6 -41) -73]
Test Case: 606 | Input/Output: [(76 -99 24 -92) -99]
Test Case: 607 | Input/Output: [(-11 -96 46 94) -96]
Test Case: 608 | Input/Output: [(82 -68 -24 -43) -68]
Test Case: 609 | Input/Output: [(50 48 -77 -97) -97]
Test Case: 610 | Input/Output: [(91 60 -36 -54) -54]
Test Case: 611 | Input/Output: [(65 54 -6 94) -6]
Test Case: 612 | Input/Output: [(88 -52 -35 64) -52]
Test Case: 613 | Input/Output: [(-28 43 -1 51) -28]
Test Case: 614 | Input/Output: [(-11 -9 70 -38) -38]
Test Case: 615 | Input/Output: [(94 26 92 -16) -16]
Test Case: 616 | Input/Output: [(44 56 -60 62) -60]
Test Case: 617 | Input/Output: [(-97 -1 8 63) -97]
Test Case: 618 | Input/Output: [(-5 42 72 -70) -70]
Test Case: 619 | Input/Output: [(-3 98 90 -53) -53]
Test Case: 620 | Input/Output: [(-87 79 99 51) -87]
Test Case: 621 | Input/Output: [(20 -66 73 81) -66]
Test Case: 622 | Input/Output: [(58 -87 64 -47) -87]
Test Case: 623 | Input/Output: [(-49 -51 -57 7) -57]
Test Case: 624 | Input/Output: [(-13 -82 84 54) -82]
Test Case: 625 | Input/Output: [(27 -97 -7 83) -97]
Test Case: 626 | Input/Output: [(-11 -9 -34 -41) -41]
Test Case: 627 | Input/Output: [(7 8 16 72) 7]
Test Case: 628 | Input/Output: [(59 -2 -88 89) -88]
Test Case: 629 | Input/Output: [(-2 -97 26 -93) -97]
Test Case: 630 | Input/Output: [(-35 94 89 66) -35]
Test Case: 631 | Input/Output: [(-25 -15 66 -45) -45]
Test Case: 632 | Input/Output: [(-10 55 67 -19) -19]
Test Case: 633 | Input/Output: [(85 30 -98 -97) -98]
Test Case: 634 | Input/Output: [(-58 33 18 31) -58]
Test Case: 635 | Input/Output: [(-32 35 -66 -8) -66]
Test Case: 636 | Input/Output: [(-8 -60 -95 66) -95]
Test Case: 637 | Input/Output: [(-17 -49 -44 32) -49]
Test Case: 638 | Input/Output: [(-64 -10 80 -33) -64]
Test Case: 639 | Input/Output: [(-44 68 34 16) -44]
Test Case: 640 | Input/Output: [(49 46 -83 -34) -83]
Test Case: 641 | Input/Output: [(-61 -5 9 7) -61]
Test Case: 642 | Input/Output: [(-73 -79 -90 -62) -90]
Test Case: 643 | Input/Output: [(69 39 22 -15) -15]
Test Case: 644 | Input/Output: [(-7 -92 -39 -27) -92]
Test Case: 645 | Input/Output: [(22 -4 20 93) -4]
Test Case: 646 | Input/Output: [(-43 82 -85 -95) -95]
Test Case: 647 | Input/Output: [(-87 25 52 20) -87]
Test Case: 648 | Input/Output: [(-71 44 95 100) -71]
Test Case: 649 | Input/Output: [(-93 -41 -45 20) -93]
Test Case: 650 | Input/Output: [(80 83 -55 45) -55]
Test Case: 651 | Input/Output: [(-28 -98 -42 59) -98]
Test Case: 652 | Input/Output: [(21 -2 15 68) -2]
Test Case: 653 | Input/Output: [(4 -17 -98 72) -98]
Test Case: 654 | Input/Output: [(39 34 -55 15) -55]
Test Case: 655 | Input/Output: [(20 -30 -5 97) -30]
Test Case: 656 | Input/Output: [(-3 -32 38 -86) -86]
Test Case: 657 | Input/Output: [(-48 77 -59 23) -59]
Test Case: 658 | Input/Output: [(51 -81 60 47) -81]
Test Case: 659 | Input/Output: [(-9 4 31 63) -9]
Test Case: 660 | Input/Output: [(-5 -58 4 16) -58]
Test Case: 661 | Input/Output: [(-17 -58 -34 -20) -58]
Test Case: 662 | Input/Output: [(55 51 -72 67) -72]
Test Case: 663 | Input/Output: [(63 -44 26 -75) -75]
Test Case: 664 | Input/Output: [(-54 67 98 25) -54]
Test Case: 665 | Input/Output: [(18 -95 -51 -28) -95]
Test Case: 666 | Input/Output: [(-13 -63 90 35) -63]
Test Case: 667 | Input/Output: [(15 -52 -7 37) -52]
Test Case: 668 | Input/Output: [(76 28 99 93) 28]
Test Case: 669 | Input/Output: [(62 -29 -13 -47) -47]
Test Case: 670 | Input/Output: [(-40 20 -22 95) -40]
Test Case: 671 | Input/Output: [(-28 74 42 55) -28]
Test Case: 672 | Input/Output: [(16 68 93 -33) -33]
Test Case: 673 | Input/Output: [(29 -53 -28 62) -53]
Test Case: 674 | Input/Output: [(-35 -51 -7 -94) -94]
Test Case: 675 | Input/Output: [(-35 -75 8 -5) -75]
Test Case: 676 | Input/Output: [(-86 -41 63 65) -86]
Test Case: 677 | Input/Output: [(55 -29 66 -10) -29]
Test Case: 678 | Input/Output: [(-2 74 39 -67) -67]
Test Case: 679 | Input/Output: [(63 21 74 59) 21]
Test Case: 680 | Input/Output: [(8 -2 -1 -8) -8]
Test Case: 681 | Input/Output: [(-13 75 -47 31) -47]
Test Case: 682 | Input/Output: [(73 -31 20 -62) -62]
Test Case: 683 | Input/Output: [(-19 60 49 -25) -25]
Test Case: 684 | Input/Output: [(-75 -1 7 -26) -75]
Test Case: 685 | Input/Output: [(97 13 38 -90) -90]
Test Case: 686 | Input/Output: [(-54 -27 98 -82) -82]
Test Case: 687 | Input/Output: [(-56 -94 -44 62) -94]
Test Case: 688 | Input/Output: [(7 -52 97 -82) -82]
Test Case: 689 | Input/Output: [(-52 -5 21 -76) -76]
Test Case: 690 | Input/Output: [(91 -22 -53 85) -53]
Test Case: 691 | Input/Output: [(77 81 -75 -59) -75]
Test Case: 692 | Input/Output: [(91 -86 -66 -79) -86]
Test Case: 693 | Input/Output: [(-14 -97 -57 -80) -97]
Test Case: 694 | Input/Output: [(-66 -17 21 51) -66]
Test Case: 695 | Input/Output: [(-60 66 41 54) -60]
Test Case: 696 | Input/Output: [(-27 100 24 -81) -81]
Test Case: 697 | Input/Output: [(-41 -85 71 83) -85]
Test Case: 698 | Input/Output: [(49 18 -71 -9) -71]
Test Case: 699 | Input/Output: [(-64 83 -18 71) -64]
Test Case: 700 | Input/Output: [(-56 78 -99 1) -99]
Test Case: 701 | Input/Output: [(27 7 7 55) 7]
Test Case: 702 | Input/Output: [(-3 92 -21 61) -21]
Test Case: 703 | Input/Output: [(-75 9 66 30) -75]
Test Case: 704 | Input/Output: [(-28 44 47 -71) -71]
Test Case: 705 | Input/Output: [(-79 31 70 38) -79]
Test Case: 706 | Input/Output: [(-2 -86 -92 72) -92]
Test Case: 707 | Input/Output: [(-69 -25 85 82) -69]
Test Case: 708 | Input/Output: [(-14 33 9 33) -14]
Test Case: 709 | Input/Output: [(47 23 12 33) 12]
Test Case: 710 | Input/Output: [(-95 -96 -60 -20) -96]
Test Case: 711 | Input/Output: [(51 82 59 -7) -7]
Test Case: 712 | Input/Output: [(85 -39 -6 -4) -39]
Test Case: 713 | Input/Output: [(-77 36 67 32) -77]
Test Case: 714 | Input/Output: [(3 64 0 74) 0]
Test Case: 715 | Input/Output: [(35 25 28 -99) -99]
Test Case: 716 | Input/Output: [(21 15 72 99) 15]
Test Case: 717 | Input/Output: [(-12 -23 -26 62) -26]
Test Case: 718 | Input/Output: [(-13 68 34 53) -13]
Test Case: 719 | Input/Output: [(54 -8 -39 -54) -54]
Test Case: 720 | Input/Output: [(3 -41 77 87) -41]
Test Case: 721 | Input/Output: [(-57 63 28 -76) -76]
Test Case: 722 | Input/Output: [(-16 -75 78 28) -75]
Test Case: 723 | Input/Output: [(-10 -32 -3 61) -32]
Test Case: 724 | Input/Output: [(71 9 -95 -85) -95]
Test Case: 725 | Input/Output: [(-66 69 94 -85) -85]
Test Case: 726 | Input/Output: [(-4 81 -27 -14) -27]
Test Case: 727 | Input/Output: [(100 73 42 -2) -2]
Test Case: 728 | Input/Output: [(-11 -21 49 -89) -89]
Test Case: 729 | Input/Output: [(70 32 35 -73) -73]
Test Case: 730 | Input/Output: [(-24 43 -12 55) -24]
Test Case: 731 | Input/Output: [(39 -68 -26 66) -68]
Test Case: 732 | Input/Output: [(-23 97 -55 78) -55]
Test Case: 733 | Input/Output: [(-66 -1 -41 34) -66]
Test Case: 734 | Input/Output: [(-20 87 -2 36) -20]
Test Case: 735 | Input/Output: [(31 47 -96 -38) -96]
Test Case: 736 | Input/Output: [(-79 11 74 3) -79]
Test Case: 737 | Input/Output: [(-88 12 -60 46) -88]
Test Case: 738 | Input/Output: [(24 99 -2 -40) -40]
Test Case: 739 | Input/Output: [(-5 21 48 88) -5]
Test Case: 740 | Input/Output: [(-100 -81 90 52) -100]
Test Case: 741 | Input/Output: [(41 -49 4 87) -49]
Test Case: 742 | Input/Output: [(57 55 92 -85) -85]
Test Case: 743 | Input/Output: [(-70 96 -12 97) -70]
Test Case: 744 | Input/Output: [(-86 -50 -47 -42) -86]
Test Case: 745 | Input/Output: [(90 -31 39 -37) -37]
Test Case: 746 | Input/Output: [(69 -47 -48 -55) -55]
Test Case: 747 | Input/Output: [(86 2 -40 -24) -40]
Test Case: 748 | Input/Output: [(64 81 87 -31) -31]
Test Case: 749 | Input/Output: [(-83 -71 -44 -87) -87]
Test Case: 750 | Input/Output: [(-65 37 54 85) -65]
Test Case: 751 | Input/Output: [(23 49 -35 68) -35]
Test Case: 752 | Input/Output: [(23 71 -23 -11) -23]
Test Case: 753 | Input/Output: [(22 19 -72 -15) -72]
Test Case: 754 | Input/Output: [(-45 93 -2 90) -45]
Test Case: 755 | Input/Output: [(43 -78 0 67) -78]
Test Case: 756 | Input/Output: [(10 -90 72 -16) -90]
Test Case: 757 | Input/Output: [(-24 -25 60 57) -25]
Test Case: 758 | Input/Output: [(-58 -35 94 -54) -58]
Test Case: 759 | Input/Output: [(-75 -83 73 -56) -83]
Test Case: 760 | Input/Output: [(-75 -45 -43 100) -75]
Test Case: 761 | Input/Output: [(-89 81 26 83) -89]
Test Case: 762 | Input/Output: [(-90 -89 -90 22) -90]
Test Case: 763 | Input/Output: [(96 75 82 91) 75]
Test Case: 764 | Input/Output: [(65 55 -35 31) -35]
Test Case: 765 | Input/Output: [(18 34 3 37) 3]
Test Case: 766 | Input/Output: [(21 -82 93 -8) -82]
Test Case: 767 | Input/Output: [(-77 -22 10 -29) -77]
Test Case: 768 | Input/Output: [(-46 -6 -25 -94) -94]
Test Case: 769 | Input/Output: [(-28 -99 -67 -36) -99]
Test Case: 770 | Input/Output: [(25 -83 82 34) -83]
Test Case: 771 | Input/Output: [(-91 75 91 -88) -91]
Test Case: 772 | Input/Output: [(97 91 -37 55) -37]
Test Case: 773 | Input/Output: [(-72 29 -54 -99) -99]
Test Case: 774 | Input/Output: [(43 48 -25 -20) -25]
Test Case: 775 | Input/Output: [(-90 60 -33 -29) -90]
Test Case: 776 | Input/Output: [(-22 51 -91 -20) -91]
Test Case: 777 | Input/Output: [(58 44 64 -7) -7]
Test Case: 778 | Input/Output: [(69 42 65 5) 5]
Test Case: 779 | Input/Output: [(67 -91 36 27) -91]
Test Case: 780 | Input/Output: [(-53 62 51 -76) -76]
Test Case: 781 | Input/Output: [(86 31 81 -28) -28]
Test Case: 782 | Input/Output: [(27 37 73 -46) -46]
Test Case: 783 | Input/Output: [(81 -68 -70 74) -70]
Test Case: 784 | Input/Output: [(-1 -86 -15 -34) -86]
Test Case: 785 | Input/Output: [(52 -100 44 72) -100]
Test Case: 786 | Input/Output: [(-9 -50 -24 9) -50]
Test Case: 787 | Input/Output: [(-34 -80 68 48) -80]
Test Case: 788 | Input/Output: [(-88 -10 32 78) -88]
Test Case: 789 | Input/Output: [(41 55 98 65) 41]
Test Case: 790 | Input/Output: [(-59 33 39 52) -59]
Test Case: 791 | Input/Output: [(-65 6 32 86) -65]
Test Case: 792 | Input/Output: [(6 85 4 36) 4]
Test Case: 793 | Input/Output: [(-6 -5 -54 -43) -54]
Test Case: 794 | Input/Output: [(-38 -42 -51 41) -51]
Test Case: 795 | Input/Output: [(-89 -83 -51 29) -89]
Test Case: 796 | Input/Output: [(-8 -97 -7 -8) -97]
Test Case: 797 | Input/Output: [(41 35 24 83) 24]
Test Case: 798 | Input/Output: [(-62 77 12 72) -62]
Test Case: 799 | Input/Output: [(12 26 -9 -19) -19]
Test Case: 800 | Input/Output: [(57 -61 -49 -26) -61]
Test Case: 801 | Input/Output: [(74 -50 -55 13) -55]
Test Case: 802 | Input/Output: [(14 73 44 43) 14]
Test Case: 803 | Input/Output: [(-59 31 32 40) -59]
Test Case: 804 | Input/Output: [(-86 -25 -75 10) -86]
Test Case: 805 | Input/Output: [(16 67 35 2) 2]
Test Case: 806 | Input/Output: [(-8 -93 -90 -14) -93]
Test Case: 807 | Input/Output: [(45 95 92 -89) -89]
Test Case: 808 | Input/Output: [(-53 72 31 4) -53]
Test Case: 809 | Input/Output: [(-60 97 -40 -18) -60]
Test Case: 810 | Input/Output: [(61 34 14 -31) -31]
Test Case: 811 | Input/Output: [(92 -6 -66 -20) -66]
Test Case: 812 | Input/Output: [(48 36 75 -8) -8]
Test Case: 813 | Input/Output: [(-46 -36 -40 -56) -56]
Test Case: 814 | Input/Output: [(-2 -89 79 52) -89]
Test Case: 815 | Input/Output: [(96 -84 7 69) -84]
Test Case: 816 | Input/Output: [(-46 -54 -91 -63) -91]
Test Case: 817 | Input/Output: [(-23 -8 85 30) -23]
Test Case: 818 | Input/Output: [(-93 92 -44 -18) -93]
Test Case: 819 | Input/Output: [(42 -25 83 -32) -32]
Test Case: 820 | Input/Output: [(-2 -6 -49 8) -49]
Test Case: 821 | Input/Output: [(68 100 86 -68) -68]
Test Case: 822 | Input/Output: [(87 21 -2 66) -2]
Test Case: 823 | Input/Output: [(-14 -44 -2 -59) -59]
Test Case: 824 | Input/Output: [(-77 43 38 64) -77]
Test Case: 825 | Input/Output: [(29 -79 -48 70) -79]
Test Case: 826 | Input/Output: [(-41 -96 -52 -70) -96]
Test Case: 827 | Input/Output: [(74 58 23 -100) -100]
Test Case: 828 | Input/Output: [(-100 54 -1 -39) -100]
Test Case: 829 | Input/Output: [(-37 -7 -42 31) -42]
Test Case: 830 | Input/Output: [(93 -56 -60 86) -60]
Test Case: 831 | Input/Output: [(65 -99 -33 -45) -99]
Test Case: 832 | Input/Output: [(25 86 39 55) 25]
Test Case: 833 | Input/Output: [(24 -5 41 37) -5]
Test Case: 834 | Input/Output: [(52 -3 43 6) -3]
Test Case: 835 | Input/Output: [(-32 -9 -36 95) -36]
Test Case: 836 | Input/Output: [(-58 -97 -29 -68) -97]
Test Case: 837 | Input/Output: [(-71 52 14 10) -71]
Test Case: 838 | Input/Output: [(-60 -26 68 -73) -73]
Test Case: 839 | Input/Output: [(50 74 -55 34) -55]
Test Case: 840 | Input/Output: [(10 21 -15 20) -15]
Test Case: 841 | Input/Output: [(15 18 64 21) 15]
Test Case: 842 | Input/Output: [(30 97 -72 46) -72]
Test Case: 843 | Input/Output: [(79 0 -59 -77) -77]
Test Case: 844 | Input/Output: [(-73 -68 69 -28) -73]
Test Case: 845 | Input/Output: [(7 -75 -32 -46) -75]
Test Case: 846 | Input/Output: [(-8 -14 -75 -11) -75]
Test Case: 847 | Input/Output: [(95 28 63 62) 28]
Test Case: 848 | Input/Output: [(21 -46 -43 -71) -71]
Test Case: 849 | Input/Output: [(89 -35 -28 76) -35]
Test Case: 850 | Input/Output: [(73 86 56 68) 56]
Test Case: 851 | Input/Output: [(-29 62 -71 30) -71]
Test Case: 852 | Input/Output: [(-51 87 72 -69) -69]
Test Case: 853 | Input/Output: [(-35 -13 -46 69) -46]
Test Case: 854 | Input/Output: [(-63 -69 -84 86) -84]
Test Case: 855 | Input/Output: [(-35 41 -79 -57) -79]
Test Case: 856 | Input/Output: [(49 30 61 96) 30]
Test Case: 857 | Input/Output: [(22 -8 57 89) -8]
Test Case: 858 | Input/Output: [(-38 -19 -21 -41) -41]
Test Case: 859 | Input/Output: [(-57 30 -47 16) -57]
Test Case: 860 | Input/Output: [(99 28 -16 79) -16]
Test Case: 861 | Input/Output: [(71 -91 88 -22) -91]
Test Case: 862 | Input/Output: [(-22 21 36 80) -22]
Test Case: 863 | Input/Output: [(-89 90 -91 -54) -91]
Test Case: 864 | Input/Output: [(-89 -41 29 75) -89]
Test Case: 865 | Input/Output: [(-37 33 -84 36) -84]
Test Case: 866 | Input/Output: [(-94 -89 18 56) -94]
Test Case: 867 | Input/Output: [(-15 39 21 44) -15]
Test Case: 868 | Input/Output: [(-35 57 -15 8) -35]
Test Case: 869 | Input/Output: [(86 -43 -56 -78) -78]
Test Case: 870 | Input/Output: [(71 -34 82 99) -34]
Test Case: 871 | Input/Output: [(36 84 21 -9) -9]
Test Case: 872 | Input/Output: [(-93 12 -88 87) -93]
Test Case: 873 | Input/Output: [(-86 -67 14 90) -86]
Test Case: 874 | Input/Output: [(-6 92 54 -62) -62]
Test Case: 875 | Input/Output: [(-37 -30 -39 -38) -39]
Test Case: 876 | Input/Output: [(-80 -85 43 -53) -85]
Test Case: 877 | Input/Output: [(41 -78 61 -68) -78]
Test Case: 878 | Input/Output: [(-70 88 22 8) -70]
Test Case: 879 | Input/Output: [(-18 44 56 -65) -65]
Test Case: 880 | Input/Output: [(-81 -32 -82 61) -82]
Test Case: 881 | Input/Output: [(-99 -86 47 -40) -99]
Test Case: 882 | Input/Output: [(98 -31 -82 59) -82]
Test Case: 883 | Input/Output: [(-24 1 -22 3) -24]
Test Case: 884 | Input/Output: [(43 -70 -17 20) -70]
Test Case: 885 | Input/Output: [(-18 19 33 -83) -83]
Test Case: 886 | Input/Output: [(72 47 -2 -92) -92]
Test Case: 887 | Input/Output: [(-42 -12 99 28) -42]
Test Case: 888 | Input/Output: [(-92 83 -71 42) -92]
Test Case: 889 | Input/Output: [(54 98 -45 -57) -57]
Test Case: 890 | Input/Output: [(8 55 -44 60) -44]
Test Case: 891 | Input/Output: [(-80 54 -89 -67) -89]
Test Case: 892 | Input/Output: [(-59 8 90 -81) -81]
Test Case: 893 | Input/Output: [(-100 -46 -6 -41) -100]
Test Case: 894 | Input/Output: [(-35 -9 -64 -69) -69]
Test Case: 895 | Input/Output: [(-26 7 60 -26) -26]
Test Case: 896 | Input/Output: [(-50 59 10 97) -50]
Test Case: 897 | Input/Output: [(-45 -5 -18 76) -45]
Test Case: 898 | Input/Output: [(-59 -99 -65 -96) -99]
Test Case: 899 | Input/Output: [(90 92 -85 51) -85]
Test Case: 900 | Input/Output: [(22 60 49 -24) -24]
Test Case: 901 | Input/Output: [(79 85 69 22) 22]
Test Case: 902 | Input/Output: [(-31 -1 36 -93) -93]
Test Case: 903 | Input/Output: [(54 -42 18 85) -42]
Test Case: 904 | Input/Output: [(73 -91 19 31) -91]
Test Case: 905 | Input/Output: [(58 -13 5 -32) -32]
Test Case: 906 | Input/Output: [(-15 99 -70 45) -70]
Test Case: 907 | Input/Output: [(16 -3 44 -7) -7]
Test Case: 908 | Input/Output: [(25 -78 41 -33) -78]
Test Case: 909 | Input/Output: [(-100 60 -79 56) -100]
Test Case: 910 | Input/Output: [(-75 -54 -33 -83) -83]
Test Case: 911 | Input/Output: [(-37 -44 41 -83) -83]
Test Case: 912 | Input/Output: [(71 81 -72 47) -72]
Test Case: 913 | Input/Output: [(-74 -71 92 72) -74]
Test Case: 914 | Input/Output: [(-27 75 88 -79) -79]
Test Case: 915 | Input/Output: [(63 -65 -19 21) -65]
Test Case: 916 | Input/Output: [(-86 46 -96 52) -96]
Test Case: 917 | Input/Output: [(50 38 54 -78) -78]
Test Case: 918 | Input/Output: [(-22 -34 58 -73) -73]
Test Case: 919 | Input/Output: [(-5 20 70 66) -5]
Test Case: 920 | Input/Output: [(-34 40 55 82) -34]
Test Case: 921 | Input/Output: [(-50 -58 46 60) -58]
Test Case: 922 | Input/Output: [(-95 6 -20 -47) -95]
Test Case: 923 | Input/Output: [(94 -23 -76 77) -76]
Test Case: 924 | Input/Output: [(-30 -13 45 -98) -98]
Test Case: 925 | Input/Output: [(52 -54 65 81) -54]
Test Case: 926 | Input/Output: [(-42 35 29 -46) -46]
Test Case: 927 | Input/Output: [(-38 -59 100 -56) -59]
Test Case: 928 | Input/Output: [(-77 -78 -63 67) -78]
Test Case: 929 | Input/Output: [(-22 0 -15 -45) -45]
Test Case: 930 | Input/Output: [(34 94 -87 -53) -87]
Test Case: 931 | Input/Output: [(50 55 76 46) 46]
Test Case: 932 | Input/Output: [(81 23 -50 -59) -59]
Test Case: 933 | Input/Output: [(-49 36 -67 -19) -67]
Test Case: 934 | Input/Output: [(-4 -57 -90 -70) -90]
Test Case: 935 | Input/Output: [(36 67 85 -12) -12]
Test Case: 936 | Input/Output: [(89 -48 -29 -70) -70]
Test Case: 937 | Input/Output: [(33 -42 36 -97) -97]
Test Case: 938 | Input/Output: [(68 -49 -56 58) -56]
Test Case: 939 | Input/Output: [(-46 80 58 -32) -46]
Test Case: 940 | Input/Output: [(-9 97 -16 -29) -29]
Test Case: 941 | Input/Output: [(-43 -69 45 -23) -69]
Test Case: 942 | Input/Output: [(6 20 41 -56) -56]
Test Case: 943 | Input/Output: [(65 -55 66 59) -55]
Test Case: 944 | Input/Output: [(95 -82 22 -76) -82]
Test Case: 945 | Input/Output: [(-41 -63 -29 53) -63]
Test Case: 946 | Input/Output: [(-37 -58 22 -70) -70]
Test Case: 947 | Input/Output: [(-97 -81 -80 79) -97]
Test Case: 948 | Input/Output: [(14 -49 -46 -53) -53]
Test Case: 949 | Input/Output: [(62 -35 -88 -1) -88]
Test Case: 950 | Input/Output: [(-56 -12 -2 -9) -56]
Test Case: 951 | Input/Output: [(-52 -33 79 -75) -75]
Test Case: 952 | Input/Output: [(10 5 -61 9) -61]
Test Case: 953 | Input/Output: [(75 -11 -56 -46) -56]
Test Case: 954 | Input/Output: [(-56 33 59 -24) -56]
Test Case: 955 | Input/Output: [(11 -1 6 19) -1]
Test Case: 956 | Input/Output: [(-61 -15 0 94) -61]
Test Case: 957 | Input/Output: [(-88 36 84 48) -88]
Test Case: 958 | Input/Output: [(79 -36 -25 -47) -47]
Test Case: 959 | Input/Output: [(-63 -76 96 80) -76]
Test Case: 960 | Input/Output: [(-68 46 -75 49) -75]
Test Case: 961 | Input/Output: [(34 15 72 -17) -17]
Test Case: 962 | Input/Output: [(-56 -99 12 47) -99]
Test Case: 963 | Input/Output: [(-100 60 5 80) -100]
Test Case: 964 | Input/Output: [(92 31 22 6) 6]
Test Case: 965 | Input/Output: [(60 -49 11 -39) -49]
Test Case: 966 | Input/Output: [(-85 -13 -96 -92) -96]
Test Case: 967 | Input/Output: [(17 -66 70 58) -66]
Test Case: 968 | Input/Output: [(-95 -57 86 32) -95]
Test Case: 969 | Input/Output: [(-77 54 62 -17) -77]
Test Case: 970 | Input/Output: [(57 -88 50 78) -88]
Test Case: 971 | Input/Output: [(83 -20 -86 -76) -86]
Test Case: 972 | Input/Output: [(95 -24 3 -92) -92]
Test Case: 973 | Input/Output: [(-1 25 61 -52) -52]
Test Case: 974 | Input/Output: [(98 87 85 79) 79]
Test Case: 975 | Input/Output: [(33 -7 11 93) -7]
Test Case: 976 | Input/Output: [(61 66 50 51) 50]
Test Case: 977 | Input/Output: [(-46 48 -9 -49) -49]
Test Case: 978 | Input/Output: [(-84 37 46 -52) -84]
Test Case: 979 | Input/Output: [(10 -91 48 80) -91]
Test Case: 980 | Input/Output: [(-14 -37 95 17) -37]
Test Case: 981 | Input/Output: [(-57 66 89 42) -57]
Test Case: 982 | Input/Output: [(30 -35 22 90) -35]
Test Case: 983 | Input/Output: [(31 -15 73 -93) -93]
Test Case: 984 | Input/Output: [(80 27 -13 -100) -100]
Test Case: 985 | Input/Output: [(91 31 -57 -34) -57]
Test Case: 986 | Input/Output: [(-69 31 65 -29) -69]
Test Case: 987 | Input/Output: [(84 50 -6 -31) -31]
Test Case: 988 | Input/Output: [(-51 -65 -70 -19) -70]
Test Case: 989 | Input/Output: [(28 45 3 -44) -44]
Test Case: 990 | Input/Output: [(91 -91 -60 62) -91]
Test Case: 991 | Input/Output: [(37 79 -18 82) -18]
Test Case: 992 | Input/Output: [(-41 2 29 -49) -49]
Test Case: 993 | Input/Output: [(-61 -2 -53 19) -61]
Test Case: 994 | Input/Output: [(7 28 55 -54) -54]
Test Case: 995 | Input/Output: [(16 -90 86 -30) -90]
Test Case: 996 | Input/Output: [(-50 73 30 -11) -50]
Test Case: 997 | Input/Output: [(-8 -83 28 -48) -83]
Test Case: 998 | Input/Output: [(11 19 72 -14) -14]
Test Case: 999 | Input/Output: [(58 97 12 33) 12]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -113 -105 -90 -40 109 5 32 4 -70 37 51 48 42 -61 -31 14
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[94 96 96 96] 94] [[91 91 -83 91] -83] [[10 -30 -30 -30] -30] [[-78 -78 -78 1] -78] [[94 94 94 -55] -55] [[-32 -45 -45 -45] -45] [[-15 -15 97 -15] -15] [[-8 10 -8 -8] -8] [[-83 -83 -4 -83] -83] [[33 33 33 12] 12] [(-49 -49 -49 -49) -49] [(-67 -67 -67 -67) -67] [(12 12 12 12) 12] [(23 23 23 23) 23] [(90 90 90 90) 90] [(5 58 13 29) 5] [(37 27 62 7) 7] [(34 69 96 40) 34] [(79 3 7 95) 3] [(30 87 80 73) 30] [(23 26 7 8) 7] [(60 3 16 14) 3] [(70 81 90 41) 41] [(35 44 67 34) 34] [(8 2 25 16) 2] [(92 11 23 76) 11] [(60 57 7 10) 7] [(3 41 68 36) 3] [(79 49 63 71) 49] [(11 74 91 20) 11] [(42 32 58 79) 32] [(49 80 38 90) 38] [(9 94 63 44) 9] [(24 7 31 42) 7] [(9 14 31 86) 9] [(35 19 30 -9) -9] [(84 78 63 -79) -79] [(64 -19 28 14) -19] [(-54 99 -70 -3) -70] [(-96 85 -50 51) -96] [(20 5 13 49) 5] [(-57 10 17 -63) -63] [(77 67 -93 85) -93] [(-95 -5 -54 49) -95] [(41 95 -80 20) -80] [(-41 62 37 35) -41] [(-22 49 44 -68) -68] [(-7 -64 98 40) -64] [(-42 72 -8 76) -42] [(16 -9 -40 64) -40] [(-53 0 41 -75) -75] [(52 35 -59 -13) -59] [(-79 49 83 70) -79] [(-76 -86 38 81) -86] [(-33 -93 -41 15) -93] [(23 -24 -59 -3) -59] [(-24 0 70 19) -24] [(-31 86 -79 92) -79] [(81 -21 59 16) -21] [(-88 -53 -99 14) -99] [(18 -47 -51 -65) -65] [(-78 -50 -29 -31) -78] [(88 -73 -61 62) -73] [(-26 -67 88 -73) -73] [(-26 21 -3 -7) -26] [(47 68 -17 45) -17] [(-47 -58 -66 -16) -66] [(99 6 -91 66) -91] [(-83 -10 -15 86) -83] [(0 51 17 -93) -93] [(-98 29 -72 -35) -98] [(49 -34 29 -48) -48] [(-71 92 85 45) -71] [(55 70 97 -60) -60] [(-93 71 24 9) -93] [(-56 -99 -16 -34) -99] [(53 -84 -7 -47) -84] [(34 -82 70 46) -82] [(-24 75 -42 47) -42] [(-49 -15 -58 65) -58] [(6 100 87 55) 6] [(77 99 37 -26) -26] [(60 -20 27 58) -20] [(-77 9 49 43) -77] [(86 -100 -42 9) -100] [(78 49 16 75) 16] [(-24 -86 26 49) -86] [(-97 -29 -49 95) -97] [(-41 70 18 25) -41] [(40 -1 -89 -91) -91] [(92 48 45 81) 45] [(-77 5 -72 86) -77] [(88 77 -57 -57) -57] [(-52 -91 42 -13) -91] [(73 -82 75 -28) -82])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: 97                 
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -4                 
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 13                 
Correct output: 7                   | Program output: 62                 
Correct output: 34                  | Program output: 96                 
Correct output: 3                   | Program output: 7                  
Correct output: 30                  | Program output: 80                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 16                 
Correct output: 41                  | Program output: 90                 
Correct output: 34                  | Program output: 67                 
Correct output: 2                   | Program output: 25                 
Correct output: 11                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 68                 
Correct output: 49                  | Program output: 63                 
Correct output: 11                  | Program output: 91                 
Correct output: 32                  | Program output: 58                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 63                 
Correct output: 7                   | Program output: 31                 
Correct output: 9                   | Program output: 31                 
Correct output: -9                  | Program output: 30                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -50                
Correct output: 5                   | Program output: 13                 
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -54                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: 37                 
Correct output: -68                 | Program output: 44                 
Correct output: -64                 | Program output: 98                 
Correct output: -42                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: 41                 
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: 83                 
Correct output: -86                 | Program output: 38                 
Correct output: -93                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 70                 
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -29                
Correct output: -73                 | Program output: -61                
Correct output: -73                 | Program output: 88                 
Correct output: -26                 | Program output: -3                 
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -15                
Correct output: -93                 | Program output: 17                 
Correct output: -98                 | Program output: -72                
Correct output: -48                 | Program output: 29                 
Correct output: -71                 | Program output: 85                 
Correct output: -60                 | Program output: 97                 
Correct output: -93                 | Program output: 24                 
Correct output: -99                 | Program output: -16                
Correct output: -84                 | Program output: -7                 
Correct output: -82                 | Program output: 70                 
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 87                 
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: 27                 
Correct output: -77                 | Program output: 49                 
Correct output: -100                | Program output: -42                
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: 26                 
Correct output: -97                 | Program output: -49                
Correct output: -41                 | Program output: 18                 
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: 42                 
Correct output: -82                 | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction tagged_982} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_487} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_add in3 exec_do*range (exec_do*range (boolean_xor) integer_shove) boolean_dup boolean_flush print_integer boolean_frominteger exec_do*while (exec_do*count (exec_pop (exec_when (exec_flush boolean_stackdepth integer_rot boolean_eq exec_s (integer_gte in4 exec_pop (integer_dup_items exec_yank boolean_flush) exec_dup_items exec_yankdup integer_gt exec_rot () (in2 print_newline integer_add boolean_or integer_div) (tagged_982) boolean_xor print_exec (integer_lt) integer_dup_items boolean_swap) (boolean_and exec_k () (boolean_pop boolean_shove boolean_dup_times print_exec (integer_flush tagged_487 exec_k_when_autoconstructing () (integer_add) exec_if (exec_eq integer_flush exec_dup_times (integer_lte boolean_eq boolean_xor integer_mod exec_do*times (boolean_dup_items boolean_invert_second_then_and exec_do*times (boolean_dup_items)))) ()))) ())))))
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction tagged_982} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_487} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_add in3 exec_do*range (exec_do*range (boolean_xor) integer_shove) boolean_dup boolean_flush print_integer boolean_frominteger exec_do*while (exec_do*count (exec_pop (exec_when (exec_flush boolean_stackdepth integer_rot boolean_eq exec_s (integer_gte in4 exec_pop (integer_dup_items exec_yank boolean_flush) exec_dup_items exec_yankdup integer_gt exec_rot () (in2 print_newline integer_add boolean_or integer_div) (tagged_982) boolean_xor print_exec (integer_lt) integer_dup_items boolean_swap) (boolean_and exec_k () (boolean_pop boolean_shove boolean_dup_times print_exec (integer_flush tagged_487 exec_k_when_autoconstructing () (integer_add) exec_if (exec_eq integer_flush exec_dup_times (integer_lte boolean_eq boolean_xor integer_mod exec_do*times (boolean_dup_items boolean_invert_second_then_and exec_do*times (boolean_dup_items)))) ()))) ())))))
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 2 4 1 4 6 11 1 3 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (12 2 4 1 4 6 11 1 3 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction tagged_982} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_487} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items})
Best program: (integer_add in3 exec_do*range (exec_do*range (boolean_xor) integer_shove) boolean_dup boolean_flush print_integer boolean_frominteger exec_do*while (exec_do*count (exec_pop (exec_when (exec_flush boolean_stackdepth integer_rot boolean_eq exec_s (integer_gte in4 exec_pop (integer_dup_items exec_yank boolean_flush) exec_dup_items exec_yankdup integer_gt exec_rot () (in2 print_newline integer_add boolean_or integer_div) (tagged_982) boolean_xor print_exec (integer_lt) integer_dup_items boolean_swap) (boolean_and exec_k () (boolean_pop boolean_shove boolean_dup_times print_exec (integer_flush tagged_487 exec_k_when_autoconstructing () (integer_add) exec_if (exec_eq integer_flush exec_dup_times (integer_lte boolean_eq boolean_xor integer_mod exec_do*times (boolean_dup_items boolean_invert_second_then_and exec_do*times (boolean_dup_items)))) ()))) ())))))
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 88
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 9.953
Median total errors in population: 10
Error averages by case: (0.988 0.998 0.996 0.999 0.996 0.994 0.989 0.999 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.288
Average program size in population (points): 71.845
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 478515
--- Timings ---
Current time: 1559593886575 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 31.3%
Fitness Testing:      1.7 seconds, 64.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: 91                 
Correct output: -30                 | Program output: 10                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -32                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 79                 
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 23                 
Correct output: 3                   | Program output: 60                 
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 8                  
Correct output: 11                  | Program output: 92                 
Correct output: 7                   | Program output: 60                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 42                 
Correct output: 38                  | Program output: 49                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 35                 
Correct output: -79                 | Program output: 84                 
Correct output: -19                 | Program output: 64                 
Correct output: -70                 | Program output: -54                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 20                 
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: 77                 
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 41                 
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 16                 
Correct output: -75                 | Program output: -53                
Correct output: -59                 | Program output: 52                 
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -76                
Correct output: -93                 | Program output: -33                
Correct output: -59                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -31                
Correct output: -21                 | Program output: 81                 
Correct output: -99                 | Program output: -88                
Correct output: -65                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: 88                 
Correct output: -73                 | Program output: -26                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: 47                 
Correct output: -66                 | Program output: -47                
Correct output: -91                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -56                
Correct output: -84                 | Program output: 53                 
Correct output: -82                 | Program output: 34                 
Correct output: -42                 | Program output: -24                
Correct output: -58                 | Program output: -49                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 77                 
Correct output: -20                 | Program output: 60                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: 86                 
Correct output: 16                  | Program output: 78                 
Correct output: -86                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: 40                 
Correct output: 45                  | Program output: 92                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: 88                 
Correct output: -91                 | Program output: -52                
Correct output: -82                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not})
Lexicase best program: (in1 in1 print_integer exec_yank boolean_dup_items boolean_swap exec_y (boolean_yankdup integer_yank integer_dup integer_div print_boolean exec_swap (integer_gt) (boolean_not)))
Lexicase best errors: [0 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not})
Zero cases best program: (in1 in1 print_integer exec_yank boolean_dup_items boolean_swap exec_y (boolean_yankdup integer_yank integer_dup integer_div print_boolean exec_swap (integer_gt) (boolean_not)))
Zero cases best errors: [0 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 135 26 126 184 442 27 126 220 184)
Population mean number of elite cases: 1.72
Count of perfect (error zero) individuals by case: (250 135 26 126 184 442 27 126 220 184)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (boolean_or exec_do*range (exec_rot (exec_empty in1 exec_empty integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (integer_div boolean_yankdup boolean_invert_first_then_and boolean_flush integer_lte) integer_fromboolean exec_swap (boolean_stackdepth) (integer_yank exec_noop integer_yank print_exec (exec_noop integer_stackdepth exec_s (exec_yank boolean_dup_items boolean_swap integer_fromboolean exec_yank exec_dup (exec_y_when_autoconstructing (print_exec (exec_empty boolean_shove boolean_invert_second_then_and) exec_pop () exec_pop (boolean_dup) boolean_flush exec_rot (exec_s () (exec_yank exec_eq) (boolean_shove integer_mult integer_max boolean_stackdepth boolean_pop boolean_or exec_rot (exec_when (integer_gte boolean_shove boolean_shove exec_noop) boolean_invert_first_then_and boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max integer_shove)) (exec_swap () (integer_dup_times print_boolean) boolean_and exec_do*count (print_boolean boolean_dup boolean_yankdup boolean_swap boolean_not print_integer) exec_do*range () integer_empty exec_do*while (print_newline integer_eq exec_pop (integer_lte exec_shove (integer_pop) exec_swap (exec_y_when_autoconstructing (exec_dup () integer_yankdup integer_eq integer_fromboolean integer_rot integer_inc boolean_empty boolean_frominteger exec_yank integer_sub exec_yank integer_pop integer_yank) integer_swap integer_dec) ()))) ())) () ()))) () ())))) () ()))
Errors: [0 0 1 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 101
Size: 141
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 8.28
Median total errors in population: 10
Error averages by case: (0.75 0.865 0.974 0.874 0.816 0.558 0.973 0.874 0.78 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.903
Average program size in population (points): 74.32
Average percent parens in population: 0.246
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.965
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.965
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 937420
--- Timings ---
Current time: 1559593888577 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.9 seconds, 40.8%
Fitness Testing:      2.3 seconds, 50.7%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 16                 
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 8                  
Correct output: 11                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 42                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 30                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 13                 
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -76                
Correct output: -93                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -61                
Correct output: -73                 | Program output: -26                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -56                
Correct output: -84                 | Program output: -7                 
Correct output: -82                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -42                
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -52                
Correct output: -82                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_or exec_do*range (exec_empty in1 exec_empty in3 integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (integer_div exec_yankdup exec_s_when_autoconstructing (boolean_and boolean_invert_first_then_and boolean_flush integer_lte) (in3 integer_fromboolean exec_swap (integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_yankdup exec_s (exec_yank boolean_dup_items boolean_frominteger boolean_swap exec_do*times (integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (boolean_dup boolean_shove boolean_invert_second_then_and) exec_pop () exec_pop (exec_rot (exec_s () (exec_yank exec_eq) (boolean_shove integer_mult integer_max boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times exec_do*count (print_boolean boolean_dup boolean_yankdup exec_rot (boolean_swap exec_k () (print_integer) integer_empty integer_lte exec_do*while (exec_noop) print_newline boolean_yankdup) (integer_eq integer_lte integer_pop) (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_fromboolean integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)))))) ())) () ())))) () ())) ()) ()))))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 140
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_or exec_do*range (exec_empty in1 exec_empty in3 integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (integer_div exec_yankdup exec_s_when_autoconstructing (boolean_and boolean_invert_first_then_and boolean_flush integer_lte) (in3 integer_fromboolean exec_swap (integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_yankdup exec_s (exec_yank boolean_dup_items boolean_frominteger boolean_swap exec_do*times (integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (boolean_dup boolean_shove boolean_invert_second_then_and) exec_pop () exec_pop (exec_rot (exec_s () (exec_yank exec_eq) (boolean_shove integer_mult integer_max boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times exec_do*count (print_boolean boolean_dup boolean_yankdup exec_rot (boolean_swap exec_k () (print_integer) integer_empty integer_lte exec_do*while (exec_noop) print_newline boolean_yankdup) (integer_eq integer_lte integer_pop) (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_fromboolean integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)))))) ())) () ())))) () ())) ()) ()))))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 140
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 357 625 150 271 150 366 150 625 5)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (363 357 625 150 271 150 366 150 625 5)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction -17} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup})
Best program: (boolean_or exec_rot (exec_empty in1 exec_empty in3 integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (integer_div exec_yankdup boolean_invert_first_then_and exec_s_when_autoconstructing (boolean_invert_first_then_and exec_y_when_autoconstructing (boolean_flush in4 integer_lte) integer_fromboolean exec_swap (integer_yank integer_yank print_exec (exec_noop integer_stackdepth exec_yankdup exec_s (exec_yank boolean_dup_items boolean_swap exec_do*times (integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (boolean_dup -17 boolean_invert_second_then_and) exec_pop () exec_pop (exec_rot (exec_s () (exec_yank exec_eq) (boolean_shove boolean_pop boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and boolean_invert_first_then_and exec_do*while (integer_max integer_max exec_swap () (integer_dup_times boolean_and exec_do*count (print_boolean boolean_dup boolean_yankdup exec_rot (boolean_swap exec_k () (print_integer) integer_empty integer_lte exec_do*while (exec_noop) print_newline integer_eq integer_lte integer_pop) (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_rot boolean_dup_items boolean_not boolean_empty boolean_frominteger exec_yank integer_sub integer_pop print_integer exec_yank integer_mult) integer_yank) (integer_swap integer_dec exec_yankdup))))) ())) () ())))) () ())) ()) () ()))) () ())
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 96
Size: 139
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 6.938
Median total errors in population: 5
Error averages by case: (0.637 0.643 0.375 0.85 0.729 0.85 0.634 0.85 0.375 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.803
Average program size in population (points): 77.816
Average percent parens in population: 0.236
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1541653
--- Timings ---
Current time: 1559593890655 milliseconds
Total Time:           6.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.0 seconds, 44.8%
Fitness Testing:      3.1 seconds, 45.9%
Report:               0.5 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 16                 
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 8                  
Correct output: 11                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 42                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 30                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 13                 
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -76                
Correct output: -93                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -61                
Correct output: -73                 | Program output: -26                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -56                
Correct output: -84                 | Program output: -7                 
Correct output: -82                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -42                
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -52                
Correct output: -82                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction -17} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction tag_exec_717} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_or exec_rot (exec_empty in1 in3 integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (integer_div exec_yankdup boolean_invert_first_then_and boolean_or exec_s_when_autoconstructing (boolean_invert_first_then_and in4 integer_lte) (integer_fromboolean exec_swap (integer_yank integer_yank print_exec (exec_noop integer_stackdepth exec_dup_items)) (exec_yankdup exec_s (exec_yank boolean_dup_items boolean_swap exec_do*times (integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (boolean_dup -17 boolean_invert_second_then_and) exec_pop () exec_pop (exec_rot (exec_s () (exec_yank boolean_shove boolean_pop boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and exec_do*while (integer_max integer_max exec_swap () (integer_dup_times boolean_and exec_do*count (print_boolean boolean_dup boolean_yankdup boolean_swap print_integer) integer_lte exec_do*while (exec_noop) print_boolean print_newline integer_eq integer_lte integer_flush) integer_pop) exec_swap (exec_y_when_autoconstructing (integer_pop)) (tag_exec_717 (integer_eq integer_rot boolean_not in1 boolean_empty boolean_and boolean_frominteger exec_yank integer_sub integer_pop print_integer integer_shove exec_yank integer_mult) integer_yank) integer_swap integer_dec) ()) ()) () ())))) () ())) ()))) () ())
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 132
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction -17} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction tag_exec_717} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_or exec_rot (exec_empty in1 in3 integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (integer_div exec_yankdup boolean_invert_first_then_and boolean_or exec_s_when_autoconstructing (boolean_invert_first_then_and in4 integer_lte) (integer_fromboolean exec_swap (integer_yank integer_yank print_exec (exec_noop integer_stackdepth exec_dup_items)) (exec_yankdup exec_s (exec_yank boolean_dup_items boolean_swap exec_do*times (integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (boolean_dup -17 boolean_invert_second_then_and) exec_pop () exec_pop (exec_rot (exec_s () (exec_yank boolean_shove boolean_pop boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and exec_do*while (integer_max integer_max exec_swap () (integer_dup_times boolean_and exec_do*count (print_boolean boolean_dup boolean_yankdup boolean_swap print_integer) integer_lte exec_do*while (exec_noop) print_boolean print_newline integer_eq integer_lte integer_flush) integer_pop) exec_swap (exec_y_when_autoconstructing (integer_pop)) (tag_exec_717 (integer_eq integer_rot boolean_not in1 boolean_empty boolean_and boolean_frominteger exec_yank integer_sub integer_pop print_integer integer_shove exec_yank integer_mult) integer_yank) integer_swap integer_dec) ()) ()) () ())))) () ())) ()))) () ())
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 132
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 361 305 448 764 362 8 8 430 426)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (361 361 305 448 764 362 8 8 430 426)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction -17} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction 61} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup})
Best program: (boolean_or exec_rot (exec_empty in1 in1 exec_empty in3 integer_min print_integer exec_when (boolean_invert_first_then_and exec_pop (exec_yankdup exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_invert_second_then_and in4 integer_lte) (integer_fromboolean exec_swap (integer_yank print_exec (exec_noop integer_stackdepth exec_yankdup exec_s (boolean_dup_items boolean_swap exec_do*times (exec_yank exec_y_when_autoconstructing (print_exec (boolean_dup -17 boolean_invert_second_then_and) exec_pop () exec_pop (exec_rot (exec_s () (exec_yank exec_eq) (boolean_shove boolean_pop boolean_or exec_rot (61 exec_noop) (boolean_invert_first_then_and boolean_dup) (boolean_invert_first_then_and exec_do*while (integer_max integer_max exec_swap () (integer_dup_times boolean_and exec_do*count (print_boolean boolean_dup boolean_yankdup exec_rot (boolean_swap print_integer) (integer_empty integer_lte exec_do*while (exec_noop) print_newline integer_eq integer_lte integer_pop) (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq boolean_empty integer_rot boolean_dup_items boolean_not boolean_frominteger exec_yank integer_stackdepth integer_sub integer_pop print_integer integer_mult) integer_yank) integer_swap integer_dec exec_yankdup)))))) () ())))) () ())) ()) ()))) () ())
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 91
Size: 131
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 6.527
Median total errors in population: 8
Error averages by case: (0.639 0.639 0.695 0.552 0.236 0.638 0.992 0.992 0.57 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.095
Average program size in population (points): 94.978
Average percent parens in population: 0.290
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1839045
--- Timings ---
Current time: 1559593892468 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.2 seconds, 49.0%
Fitness Testing:      3.5 seconds, 41.3%
Report:               0.7 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 329
Test mean error for best: 0.32900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 16                 
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 8                  
Correct output: 11                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 42                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 30                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: -19                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 13                 
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -54                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -50                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -15                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -49                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_do*range (exec_empty in1 exec_empty in2) in2 integer_yankdup in3 integer_min print_integer boolean_invert_first_then_and exec_pop (integer_div exec_yankdup exec_s_when_autoconstructing (boolean_and boolean_flush in3 integer_fromboolean integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_s (boolean_dup boolean_dup_items boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () exec_rot (exec_pop (integer_flush exec_rot (exec_s () (exec_eq) (boolean_empty integer_mult integer_max boolean_yank boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times exec_do*count (boolean_swap) print_boolean boolean_dup exec_rot (boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) (print_newline integer_dup_items boolean_yankdup) (integer_eq integer_lte integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_fromboolean integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)) ()))) ())) () ())) () ()))) () ())) () ()))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 137
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_do*range (exec_empty in1 exec_empty in2) in2 integer_yankdup in3 integer_min print_integer boolean_invert_first_then_and exec_pop (integer_div exec_yankdup exec_s_when_autoconstructing (boolean_and boolean_flush in3 integer_fromboolean integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_s (boolean_dup boolean_dup_items boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () exec_rot (exec_pop (integer_flush exec_rot (exec_s () (exec_eq) (boolean_empty integer_mult integer_max boolean_yank boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times exec_do*count (boolean_swap) print_boolean boolean_dup exec_rot (boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) (print_newline integer_dup_items boolean_yankdup) (integer_eq integer_lte integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_fromboolean integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)) ()))) ())) () ())) () ()))) () ())) () ()))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 137
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 705 173 175 704 100 633 633 358 359)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (99 705 173 175 704 100 633 633 358 359)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (exec_do*range (exec_empty in1 exec_empty in2) in2 integer_yankdup in3 integer_min print_integer boolean_invert_first_then_and exec_pop (integer_div exec_yankdup exec_s_when_autoconstructing (boolean_and boolean_flush in3 integer_fromboolean integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_s (boolean_dup boolean_dup_items boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () exec_rot (exec_pop (integer_flush exec_rot (exec_s () (exec_eq) (boolean_empty integer_mult integer_max boolean_yank boolean_or exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times exec_do*count (boolean_swap) print_boolean boolean_dup exec_rot (boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) (print_newline integer_dup_items boolean_yankdup) (integer_eq integer_lte integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_fromboolean integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)) ()))) ())) () ())) () ()))) () ())) () ()))
Errors: [1 0 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 94
Size: 137
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.061
Median total errors in population: 4
Error averages by case: (0.901 0.295 0.827 0.825 0.296 0.9 0.367 0.367 0.642 0.641)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.864
Average program size in population (points): 138.327
Average percent parens in population: 0.307
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1983089
--- Timings ---
Current time: 1559593894405 milliseconds
Total Time:          10.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.5 seconds, 53.3%
Fitness Testing:      3.7 seconds, 36.3%
Report:               1.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 329
Test mean error for best: 0.32900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 37                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 16                 
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 8                  
Correct output: 11                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 42                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 30                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: -19                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 13                 
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -54                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -50                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -15                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -49                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction 19} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_do*range (exec_empty in1 exec_empty in2) in2 integer_yankdup in3 integer_min print_integer boolean_invert_first_then_and exec_pop (integer_div exec_yankdup integer_gt boolean_and boolean_flush in3 integer_fromboolean integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_s (boolean_dup boolean_dup_items boolean_pop boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt exec_pop () exec_rot (integer_shove exec_pop (boolean_and integer_flush exec_rot (exec_s () (exec_eq) (boolean_empty integer_mult integer_max boolean_yank boolean_or boolean_rot exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and boolean_pop integer_max exec_swap () (exec_do*count (boolean_swap) print_boolean boolean_dup exec_rot (boolean_yankdup exec_k () (print_integer) integer_empty exec_noop) (print_newline integer_dup_items integer_swap boolean_yankdup) (integer_eq integer_lte 19) integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (print_boolean)) (integer_eq integer_fromboolean exec_s (integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_mult) (integer_yank) (integer_swap integer_dec)) () ())) ()) ())) () ())) () ()))) () ())))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 136
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction 19} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_do*range (exec_empty in1 exec_empty in2) in2 integer_yankdup in3 integer_min print_integer boolean_invert_first_then_and exec_pop (integer_div exec_yankdup integer_gt boolean_and boolean_flush in3 integer_fromboolean integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth exec_s (boolean_dup boolean_dup_items boolean_pop boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt exec_pop () exec_rot (integer_shove exec_pop (boolean_and integer_flush exec_rot (exec_s () (exec_eq) (boolean_empty integer_mult integer_max boolean_yank boolean_or boolean_rot exec_rot (integer_gte boolean_shove exec_noop) (boolean_invert_first_then_and boolean_pop integer_max exec_swap () (exec_do*count (boolean_swap) print_boolean boolean_dup exec_rot (boolean_yankdup exec_k () (print_integer) integer_empty exec_noop) (print_newline integer_dup_items integer_swap boolean_yankdup) (integer_eq integer_lte 19) integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (print_boolean)) (integer_eq integer_fromboolean exec_s (integer_rot boolean_dup_items boolean_frominteger exec_s (integer_sub print_integer exec_yank integer_mult) (integer_yank) (integer_swap integer_dec)) () ())) ()) ())) () ())) () ()))) () ())))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 136
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 386 280 344 384 260 417 714 409 341)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (707 386 280 344 384 260 417 714 409 341)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 1, :instruction integer_div} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (exec_do*range (boolean_invert_second_then_and exec_empty in1 exec_empty in2) in2 integer_yankdup in3 integer_min print_integer boolean_invert_first_then_and exec_pop (integer_div integer_fromboolean exec_yankdup print_integer exec_s_when_autoconstructing (boolean_and boolean_flush in3 integer_fromboolean boolean_invert_first_then_and integer_yank integer_yank print_exec (boolean_not exec_noop integer_stackdepth integer_fromboolean exec_s (boolean_dup boolean_dup_items boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () exec_yankdup exec_rot (exec_pop (integer_flush exec_rot (exec_s () (integer_div) (exec_eq) boolean_empty integer_mult integer_max boolean_yank boolean_or exec_rot (integer_gte boolean_shove boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (exec_do*count (boolean_swap) boolean_dup exec_pop (exec_rot (boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) (integer_max print_newline exec_do*count (boolean_yankdup) integer_eq integer_lte integer_pop) (exec_swap (exec_swap (exec_y_when_autoconstructing (integer_pop)) (integer_eq integer_fromboolean integer_rot boolean_dup_items exec_s (integer_sub print_integer exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)) ()))))) () ()) () ())) () ()))) () ())) () ()))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 99
Size: 144
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.758
Median total errors in population: 5
Error averages by case: (0.293 0.614 0.72 0.656 0.616 0.74 0.583 0.286 0.591 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.01
Average program size in population (points): 138.756
Average percent parens in population: 0.308
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2150408
--- Timings ---
Current time: 1559593896175 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 55.0%
Fitness Testing:      4.0 seconds, 33.3%
Report:               1.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 94                  | Program output: 96                 
Correct output: -83                 | Program output: 91                 
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 29                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 73                 
Correct output: 7                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 41                 
Correct output: 34                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 10                 
Correct output: 3                   | Program output: 36                 
Correct output: 49                  | Program output: 49                 
Correct output: 11                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 38                  | Program output: 80                 
Correct output: 9                   | Program output: 44                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -19                
Correct output: -70                 | Program output: -3                 
Correct output: -96                 | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 67                 
Correct output: -95                 | Program output: -5                 
Correct output: -80                 | Program output: 20                 
Correct output: -41                 | Program output: 35                 
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: 72                 
Correct output: -40                 | Program output: -9                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -13                
Correct output: -79                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -24                
Correct output: -24                 | Program output: 0                  
Correct output: -79                 | Program output: 86                 
Correct output: -21                 | Program output: -21                
Correct output: -99                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -50                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -7                 
Correct output: -17                 | Program output: 45                 
Correct output: -66                 | Program output: -58                
Correct output: -91                 | Program output: 6                  
Correct output: -83                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -35                
Correct output: -48                 | Program output: -48                
Correct output: -71                 | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -42                 | Program output: 47                 
Correct output: -58                 | Program output: -15                
Correct output: 6                   | Program output: 55                 
Correct output: -26                 | Program output: -26                
Correct output: -20                 | Program output: -20                
Correct output: -77                 | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -29                
Correct output: -41                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: 45                  | Program output: 48                 
Correct output: -77                 | Program output: 5                  
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 3, :instruction -50} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_do*range (in1 in4 exec_empty in2) integer_min print_integer boolean_invert_first_then_and exec_pop (exec_yankdup exec_s_when_autoconstructing (boolean_not boolean_and boolean_flush in3 integer_fromboolean exec_swap (integer_yank print_integer integer_yank print_exec (boolean_empty integer_add boolean_not exec_noop integer_stackdepth boolean_dup integer_yankdup boolean_dup_items exec_s () () (boolean_frominteger exec_do*times (integer_fromboolean exec_yank exec_s_when_autoconstructing (exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () exec_pop (exec_rot (exec_s () (integer_empty integer_mult integer_max boolean_yank boolean_or exec_rot (integer_lte) (boolean_shove -50) ()) (exec_noop) boolean_invert_first_then_and exec_do*while (integer_max integer_max integer_yank exec_swap () (integer_dup_times exec_do*count (boolean_dup_times) boolean_dup boolean_yankdup exec_yankdup exec_rot (boolean_swap exec_k () (print_integer) exec_do*count (integer_empty integer_lte print_newline integer_lte exec_do*count (integer_pop) exec_swap (exec_shove () exec_swap (exec_y_when_autoconstructing (integer_pop)) (exec_rot (integer_eq exec_do*while (integer_fromboolean integer_rot exec_stackdepth integer_inc) boolean_dup_items boolean_frominteger exec_s (integer_sub integer_stackdepth) (integer_mult) (integer_yank) boolean_yank) () ())) ())) () ()))) () ())))) () ())))) ()) () ()))
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 150
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 3, :instruction -50} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_do*range (in1 in4 exec_empty in2) integer_min print_integer boolean_invert_first_then_and exec_pop (exec_yankdup exec_s_when_autoconstructing (boolean_not boolean_and boolean_flush in3 integer_fromboolean exec_swap (integer_yank print_integer integer_yank print_exec (boolean_empty integer_add boolean_not exec_noop integer_stackdepth boolean_dup integer_yankdup boolean_dup_items exec_s () () (boolean_frominteger exec_do*times (integer_fromboolean exec_yank exec_s_when_autoconstructing (exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () exec_pop (exec_rot (exec_s () (integer_empty integer_mult integer_max boolean_yank boolean_or exec_rot (integer_lte) (boolean_shove -50) ()) (exec_noop) boolean_invert_first_then_and exec_do*while (integer_max integer_max integer_yank exec_swap () (integer_dup_times exec_do*count (boolean_dup_times) boolean_dup boolean_yankdup exec_yankdup exec_rot (boolean_swap exec_k () (print_integer) exec_do*count (integer_empty integer_lte print_newline integer_lte exec_do*count (integer_pop) exec_swap (exec_shove () exec_swap (exec_y_when_autoconstructing (integer_pop)) (exec_rot (integer_eq exec_do*while (integer_fromboolean integer_rot exec_stackdepth integer_inc) boolean_dup_items boolean_frominteger exec_s (integer_sub integer_stackdepth) (integer_mult) (integer_yank) boolean_yank) () ())) ())) () ()))) () ())))) () ())))) ()) () ()))
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 150
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 211 389 238 465 210 401 213 211 376)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (373 211 389 238 465 210 401 213 211 376)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction -17} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_789} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup})
Best program: (boolean_or exec_rot (in1 in2) (in4 integer_min print_integer exec_k_when_autoconstructing (boolean_empty) (boolean_invert_first_then_and exec_pop (integer_eq integer_div exec_while () exec_yankdup boolean_invert_first_then_and exec_pop () exec_s_when_autoconstructing (boolean_invert_first_then_and exec_y_when_autoconstructing (boolean_flush in4 integer_lte) exec_k () (exec_swap (boolean_empty integer_yank integer_yank print_newline exec_noop integer_eq) (integer_stackdepth exec_yankdup exec_yank boolean_dup_items integer_mod in2) boolean_swap exec_do*times (integer_fromboolean exec_yank integer_dup_times exec_y_when_autoconstructing (boolean_dup -17 boolean_invert_second_then_and) exec_pop () exec_pop (integer_dec exec_empty exec_s () (exec_yank boolean_shove boolean_pop boolean_or exec_rot (integer_gte boolean_shove boolean_invert_first_then_and boolean_invert_first_then_and exec_do*while (integer_max integer_max tag_integer_789 integer_add in4 integer_dup_times boolean_and exec_do*count (in4 print_boolean boolean_dup boolean_yankdup exec_rot (boolean_swap exec_k () (integer_dup_times in4 exec_y_when_autoconstructing () integer_empty integer_lte exec_do*while (integer_shove exec_noop) print_newline integer_pop integer_dup integer_eq boolean_dup_times integer_pop) exec_swap (exec_y_when_autoconstructing (integer_pop)) (boolean_xor integer_eq boolean_dup_items exec_k (exec_dup (boolean_empty boolean_frominteger exec_yank print_integer integer_yank) integer_swap exec_yankdup) ())) () ()))) () ()) ())))) () ()))) ())
Errors: [0 0 1 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 105
Size: 147
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.913
Median total errors in population: 7
Error averages by case: (0.627 0.789 0.611 0.762 0.535 0.79 0.599 0.787 0.789 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.775
Average program size in population (points): 137.498
Average percent parens in population: 0.303
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2321157
--- Timings ---
Current time: 1559593897928 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.8 seconds, 56.4%
Fitness Testing:      4.3 seconds, 31.0%
Report:               1.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 277
Test mean error for best: 0.27700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 14                 
Correct output: 41                  | Program output: 41                 
Correct output: 34                  | Program output: 34                 
Correct output: 2                   | Program output: 8                  
Correct output: 11                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 42                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: -9                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 13                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -68                
Correct output: -64                 | Program output: -7                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -76                
Correct output: -93                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -61                
Correct output: -73                 | Program output: -26                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -56                
Correct output: -84                 | Program output: -7                 
Correct output: -82                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: -26                
Correct output: -20                 | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -42                
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -52                
Correct output: -82                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_do*range (in4 exec_empty in1 in2 integer_yankdup) in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and exec_pop (integer_div exec_yankdup integer_min) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (boolean_shove in3 integer_fromboolean integer_yank integer_yank boolean_not exec_noop boolean_yankdup exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup boolean_dup_items integer_sub)) (boolean_frominteger integer_fromboolean exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop boolean_or print_newline exec_rot (boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (exec_swap () (integer_dup_times boolean_swap) print_boolean integer_eq boolean_dup boolean_dup_items boolean_flush boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) integer_eq boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec) ()) ())) () ()) ())) () ())) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 150
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_do*range (in4 exec_empty in1 in2 integer_yankdup) in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and exec_pop (integer_div exec_yankdup integer_min) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (boolean_shove in3 integer_fromboolean integer_yank integer_yank boolean_not exec_noop boolean_yankdup exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup boolean_dup_items integer_sub)) (boolean_frominteger integer_fromboolean exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop boolean_or print_newline exec_rot (boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (exec_swap () (integer_dup_times boolean_swap) print_boolean integer_eq boolean_dup boolean_dup_items boolean_flush boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) integer_eq boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec) ()) ())) () ()) ())) () ())) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 150
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (716 529 492 263 371 718 290 290 485 268)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (716 529 492 263 371 718 290 290 485 268)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (exec_do*range (in4 exec_empty in1 in2 integer_yankdup) in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and exec_pop (integer_div exec_yankdup integer_min) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (boolean_shove in3 integer_fromboolean integer_yank integer_yank boolean_not exec_noop boolean_yankdup exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup boolean_dup_items integer_sub)) (boolean_frominteger integer_fromboolean exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop boolean_or print_newline exec_rot (boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (exec_swap () (integer_dup_times boolean_swap) print_boolean integer_eq boolean_dup boolean_dup_items boolean_flush boolean_yankdup exec_k () (print_integer) integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) integer_eq boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec) ()) ())) () ()) ())) () ())) ()) () ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 104
Size: 150
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 5.578
Median total errors in population: 4
Error averages by case: (0.284 0.471 0.508 0.737 0.629 0.282 0.71 0.71 0.515 0.732)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.695
Average program size in population (points): 143.283
Average percent parens in population: 0.297
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2542433
--- Timings ---
Current time: 1559593900278 milliseconds
Total Time:          15.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 57.4%
Fitness Testing:      4.6 seconds, 29.5%
Report:               2.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 208
Test mean error for best: 0.20800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 19                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: -19                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_do*range (exec_empty boolean_not in1 in2) boolean_xor in2 integer_yankdup in3 integer_min integer_min print_integer boolean_invert_first_then_and exec_pop (exec_y_when_autoconstructing (exec_yankdup exec_s_when_autoconstructing (boolean_and exec_do*while () in3 exec_do*count (integer_yank integer_yank print_exec (boolean_not exec_y_when_autoconstructing (exec_noop integer_stackdepth exec_s (print_boolean) () (boolean_dup boolean_dup_items boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_eq exec_pop () exec_rot (integer_dec exec_rot (exec_s (exec_eq) (boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_or integer_div boolean_shove exec_noop) boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times integer_min boolean_swap) print_boolean boolean_dup boolean_flush boolean_yankdup exec_k () (print_integer) exec_pop (integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq boolean_dup_items exec_yankdup) (print_exec (integer_pop) exec_swap (boolean_frominteger exec_y_when_autoconstructing (integer_lt) integer_stackdepth print_newline) (integer_fromboolean integer_rot boolean_dup_items exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)) ()) () ()))))))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 139
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_do*range (exec_empty boolean_not in1 in2) boolean_xor in2 integer_yankdup in3 integer_min integer_min print_integer boolean_invert_first_then_and exec_pop (exec_y_when_autoconstructing (exec_yankdup exec_s_when_autoconstructing (boolean_and exec_do*while () in3 exec_do*count (integer_yank integer_yank print_exec (boolean_not exec_y_when_autoconstructing (exec_noop integer_stackdepth exec_s (print_boolean) () (boolean_dup boolean_dup_items boolean_frominteger integer_fromboolean exec_yank exec_y_when_autoconstructing (print_exec (integer_lt boolean_dup boolean_eq exec_pop () exec_rot (integer_dec exec_rot (exec_s (exec_eq) (boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_or integer_div boolean_shove exec_noop) boolean_invert_first_then_and exec_do*while (integer_max boolean_pop integer_max exec_swap () (integer_dup_times integer_min boolean_swap) print_boolean boolean_dup boolean_flush boolean_yankdup exec_k () (print_integer) exec_pop (integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq boolean_dup_items exec_yankdup) (print_exec (integer_pop) exec_swap (boolean_frominteger exec_y_when_autoconstructing (integer_lt) integer_stackdepth print_newline) (integer_fromboolean integer_rot boolean_dup_items exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_yank) integer_swap integer_dec)) ()) () ()))))))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 139
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 378 482 231 227 229 478 378 504 253)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (252 378 482 231 227 229 478 378 504 253)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap})
Best program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 96
Size: 142
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.588
Median total errors in population: 7
Error averages by case: (0.748 0.622 0.518 0.769 0.773 0.771 0.522 0.622 0.496 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 102.994
Average program size in population (points): 146.102
Average percent parens in population: 0.294
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3175985
--- Timings ---
Current time: 1559593902958 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 55.3%
Fitness Testing:      5.3 seconds, 28.9%
Report:               2.8 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 142


Auto-simplifying with starting size: 142
step: 0
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 500
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 1000
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 1500
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 2000
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 2500
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 3000
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 3500
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 4000
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 4500
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

step: 5000
program: (exec_do*range (in4 exec_empty in1 in2 in3 integer_min integer_min print_integer integer_max boolean_invert_first_then_and integer_pop exec_pop (integer_div print_boolean exec_yankdup integer_min)) exec_s_when_autoconstructing (boolean_and boolean_flush exec_s (integer_yank integer_yank boolean_not exec_noop exec_s (exec_y (integer_shove) print_boolean) () (boolean_dup exec_pop (integer_sub)) boolean_frominteger exec_y_when_autoconstructing (exec_dup_items print_exec (integer_lt boolean_dup boolean_shove exec_pop () boolean_or) exec_rot (exec_pop (exec_k (integer_dec exec_rot (exec_s () (boolean_empty boolean_not integer_mult integer_max exec_do*range () boolean_yank boolean_invert_second_then_and) (boolean_pop print_newline exec_rot (print_exec () boolean_shove exec_noop) (boolean_rot) (boolean_invert_first_then_and boolean_flush exec_do*while (integer_lt integer_empty integer_max boolean_pop exec_do*count (integer_dup_times boolean_swap) print_boolean boolean_shove) boolean_dup boolean_dup_items boolean_flush exec_k () (integer_empty integer_lte exec_noop) print_newline integer_dup_items integer_gt boolean_yankdup) integer_eq integer_pop) exec_swap (exec_swap (exec_y_when_autoconstructing (integer_lt) boolean_frominteger exec_s (exec_yank integer_stackdepth) (integer_mult) (integer_swap)) ()) ()) () ()) ())) () ())) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 142

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 208
Test mean error for best: 0.20800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: -30                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 94                 
Correct output: -45                 | Program output: -45                
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -83                 | Program output: -83                
Correct output: 12                  | Program output: 33                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 90                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 70                 
Correct output: 34                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: -9                  | Program output: 19                 
Correct output: -79                 | Program output: 63                 
Correct output: -19                 | Program output: -19                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: -63                 | Program output: -57                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -22                
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -21                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -51                
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -17                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -60                 | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: 6                   | Program output: 6                  
Correct output: -26                 | Program output: 37                 
Correct output: -20                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: 16                  | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: -91                 | Program output: -89                
Correct output: 45                  | Program output: 45                 
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
;;******************************
