Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[69 3 3 3] 3] [[-51 44 44 44] -51] [[-90 -90 -90 67] -90] [[97 -8 97 97] -8] [[80 80 80 77] 77] [[92 58 92 92] 58] [[36 -37 -37 -37] -37] [[36 -90 36 36] -90] [[23 23 45 23] 23] [[94 -63 -63 -63] -63] [(-84 -84 -84 -84) -84] [(-43 -43 -43 -43) -43] [(46 46 46 46) 46] [(-86 -86 -86 -86) -86] [(62 62 62 62) 62] [(81 35 69 67) 35] [(35 96 12 63) 12] [(66 88 97 14) 14] [(78 48 22 15) 15] [(71 87 23 72) 23] [(65 38 30 70) 30] [(3 39 34 67) 3] [(50 78 32 95) 32] [(92 37 41 82) 37] [(1 33 64 90) 1] [(100 38 11 67) 11] [(92 28 62 14) 14] [(88 85 44 24) 24] [(84 1 86 100) 1] [(54 84 23 50) 23] [(75 59 69 11) 11] [(58 92 30 27) 27] [(4 3 98 75) 3] [(33 25 51 83) 25] [(100 14 0 54) 0] [(83 82 -65 -66) -66] [(-95 -78 -13 78) -95] [(3 22 63 37) 3] [(14 42 -95 8) -95] [(45 -57 84 -27) -57] [(25 -82 88 11) -82] [(-81 93 -13 96) -81] [(49 81 38 -20) -20] [(-100 -60 -63 -18) -100] [(-36 -38 -84 51) -84] [(-64 -68 31 -38) -68] [(3 51 -72 -23) -72] [(52 81 34 -88) -88] [(-16 -93 10 10) -93] [(-63 32 66 65) -63] [(-66 33 -38 -17) -66] [(-99 49 30 -66) -99] [(14 87 73 13) 13] [(-65 -4 -70 21) -70] [(54 -62 -79 78) -79] [(-69 82 -37 11) -69] [(-6 89 71 -92) -92] [(-36 -77 12 -71) -77] [(29 23 62 -21) -21] [(57 18 13 -8) -8] [(47 -42 -89 7) -89] [(-4 -91 -39 63) -91] [(93 49 -52 51) -52] [(33 -56 31 -40) -56] [(-100 75 -52 67) -100] [(7 -6 -82 40) -82] [(73 58 -96 100) -96] [(60 -41 17 50) -41] [(56 70 88 -1) -1] [(-33 34 33 -72) -72] [(83 55 38 100) 38] [(-25 -73 52 -46) -73] [(-88 -19 -37 -9) -88] [(32 2 -100 19) -100] [(-19 11 -63 -18) -63] [(80 1 96 81) 1] [(64 -7 25 -98) -98] [(-70 97 61 66) -70] [(-64 16 -70 18) -70] [(-25 93 19 -69) -69] [(98 -83 36 -58) -83] [(24 11 60 52) 11] [(-27 49 -46 100) -46] [(-28 -8 -92 -63) -92] [(41 -18 -93 -36) -93] [(86 -35 1 -60) -60] [(-89 77 -25 -91) -91] [(43 -47 -58 -36) -58] [(66 -11 -19 -79) -79] [(-89 -46 48 54) -89] [(-51 -73 70 -57) -73] [(-84 65 3 -8) -84] [(-37 -89 51 78) -89] [(-73 27 50 73) -73] [(22 -25 38 -87) -87])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[69 3 3 3] 3]
Train Case:   6 | Input/Output: [[-51 44 44 44] -51]
Train Case:   7 | Input/Output: [[-90 -90 -90 67] -90]
Train Case:   8 | Input/Output: [[97 -8 97 97] -8]
Train Case:   9 | Input/Output: [[80 80 80 77] 77]
Train Case:  10 | Input/Output: [[92 58 92 92] 58]
Train Case:  11 | Input/Output: [[36 -37 -37 -37] -37]
Train Case:  12 | Input/Output: [[36 -90 36 36] -90]
Train Case:  13 | Input/Output: [[23 23 45 23] 23]
Train Case:  14 | Input/Output: [[94 -63 -63 -63] -63]
Train Case:  15 | Input/Output: [(-84 -84 -84 -84) -84]
Train Case:  16 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  17 | Input/Output: [(46 46 46 46) 46]
Train Case:  18 | Input/Output: [(-86 -86 -86 -86) -86]
Train Case:  19 | Input/Output: [(62 62 62 62) 62]
Train Case:  20 | Input/Output: [(81 35 69 67) 35]
Train Case:  21 | Input/Output: [(35 96 12 63) 12]
Train Case:  22 | Input/Output: [(66 88 97 14) 14]
Train Case:  23 | Input/Output: [(78 48 22 15) 15]
Train Case:  24 | Input/Output: [(71 87 23 72) 23]
Train Case:  25 | Input/Output: [(65 38 30 70) 30]
Train Case:  26 | Input/Output: [(3 39 34 67) 3]
Train Case:  27 | Input/Output: [(50 78 32 95) 32]
Train Case:  28 | Input/Output: [(92 37 41 82) 37]
Train Case:  29 | Input/Output: [(1 33 64 90) 1]
Train Case:  30 | Input/Output: [(100 38 11 67) 11]
Train Case:  31 | Input/Output: [(92 28 62 14) 14]
Train Case:  32 | Input/Output: [(88 85 44 24) 24]
Train Case:  33 | Input/Output: [(84 1 86 100) 1]
Train Case:  34 | Input/Output: [(54 84 23 50) 23]
Train Case:  35 | Input/Output: [(75 59 69 11) 11]
Train Case:  36 | Input/Output: [(58 92 30 27) 27]
Train Case:  37 | Input/Output: [(4 3 98 75) 3]
Train Case:  38 | Input/Output: [(33 25 51 83) 25]
Train Case:  39 | Input/Output: [(100 14 0 54) 0]
Train Case:  40 | Input/Output: [(83 82 -65 -66) -66]
Train Case:  41 | Input/Output: [(-95 -78 -13 78) -95]
Train Case:  42 | Input/Output: [(3 22 63 37) 3]
Train Case:  43 | Input/Output: [(14 42 -95 8) -95]
Train Case:  44 | Input/Output: [(45 -57 84 -27) -57]
Train Case:  45 | Input/Output: [(25 -82 88 11) -82]
Train Case:  46 | Input/Output: [(-81 93 -13 96) -81]
Train Case:  47 | Input/Output: [(49 81 38 -20) -20]
Train Case:  48 | Input/Output: [(-100 -60 -63 -18) -100]
Train Case:  49 | Input/Output: [(-36 -38 -84 51) -84]
Train Case:  50 | Input/Output: [(-64 -68 31 -38) -68]
Train Case:  51 | Input/Output: [(3 51 -72 -23) -72]
Train Case:  52 | Input/Output: [(52 81 34 -88) -88]
Train Case:  53 | Input/Output: [(-16 -93 10 10) -93]
Train Case:  54 | Input/Output: [(-63 32 66 65) -63]
Train Case:  55 | Input/Output: [(-66 33 -38 -17) -66]
Train Case:  56 | Input/Output: [(-99 49 30 -66) -99]
Train Case:  57 | Input/Output: [(14 87 73 13) 13]
Train Case:  58 | Input/Output: [(-65 -4 -70 21) -70]
Train Case:  59 | Input/Output: [(54 -62 -79 78) -79]
Train Case:  60 | Input/Output: [(-69 82 -37 11) -69]
Train Case:  61 | Input/Output: [(-6 89 71 -92) -92]
Train Case:  62 | Input/Output: [(-36 -77 12 -71) -77]
Train Case:  63 | Input/Output: [(29 23 62 -21) -21]
Train Case:  64 | Input/Output: [(57 18 13 -8) -8]
Train Case:  65 | Input/Output: [(47 -42 -89 7) -89]
Train Case:  66 | Input/Output: [(-4 -91 -39 63) -91]
Train Case:  67 | Input/Output: [(93 49 -52 51) -52]
Train Case:  68 | Input/Output: [(33 -56 31 -40) -56]
Train Case:  69 | Input/Output: [(-100 75 -52 67) -100]
Train Case:  70 | Input/Output: [(7 -6 -82 40) -82]
Train Case:  71 | Input/Output: [(73 58 -96 100) -96]
Train Case:  72 | Input/Output: [(60 -41 17 50) -41]
Train Case:  73 | Input/Output: [(56 70 88 -1) -1]
Train Case:  74 | Input/Output: [(-33 34 33 -72) -72]
Train Case:  75 | Input/Output: [(83 55 38 100) 38]
Train Case:  76 | Input/Output: [(-25 -73 52 -46) -73]
Train Case:  77 | Input/Output: [(-88 -19 -37 -9) -88]
Train Case:  78 | Input/Output: [(32 2 -100 19) -100]
Train Case:  79 | Input/Output: [(-19 11 -63 -18) -63]
Train Case:  80 | Input/Output: [(80 1 96 81) 1]
Train Case:  81 | Input/Output: [(64 -7 25 -98) -98]
Train Case:  82 | Input/Output: [(-70 97 61 66) -70]
Train Case:  83 | Input/Output: [(-64 16 -70 18) -70]
Train Case:  84 | Input/Output: [(-25 93 19 -69) -69]
Train Case:  85 | Input/Output: [(98 -83 36 -58) -83]
Train Case:  86 | Input/Output: [(24 11 60 52) 11]
Train Case:  87 | Input/Output: [(-27 49 -46 100) -46]
Train Case:  88 | Input/Output: [(-28 -8 -92 -63) -92]
Train Case:  89 | Input/Output: [(41 -18 -93 -36) -93]
Train Case:  90 | Input/Output: [(86 -35 1 -60) -60]
Train Case:  91 | Input/Output: [(-89 77 -25 -91) -91]
Train Case:  92 | Input/Output: [(43 -47 -58 -36) -58]
Train Case:  93 | Input/Output: [(66 -11 -19 -79) -79]
Train Case:  94 | Input/Output: [(-89 -46 48 54) -89]
Train Case:  95 | Input/Output: [(-51 -73 70 -57) -73]
Train Case:  96 | Input/Output: [(-84 65 3 -8) -84]
Train Case:  97 | Input/Output: [(-37 -89 51 78) -89]
Train Case:  98 | Input/Output: [(-73 27 50 73) -73]
Train Case:  99 | Input/Output: [(22 -25 38 -87) -87]
Test Case:   0 | Input/Output: [[-33 -86 -33 -33] -86]
Test Case:   1 | Input/Output: [[-60 -95 -60 -60] -95]
Test Case:   2 | Input/Output: [[-83 -83 -83 -40] -83]
Test Case:   3 | Input/Output: [[-86 37 -86 -86] -86]
Test Case:   4 | Input/Output: [[-77 55 -77 -77] -77]
Test Case:   5 | Input/Output: [[-60 -60 75 -60] -60]
Test Case:   6 | Input/Output: [[73 73 73 18] 18]
Test Case:   7 | Input/Output: [[98 -31 -31 -31] -31]
Test Case:   8 | Input/Output: [[28 28 33 28] 28]
Test Case:   9 | Input/Output: [[-34 -34 -34 -54] -54]
Test Case:  10 | Input/Output: [[-64 -64 -64 -67] -67]
Test Case:  11 | Input/Output: [[-67 13 -67 -67] -67]
Test Case:  12 | Input/Output: [[-16 96 -16 -16] -16]
Test Case:  13 | Input/Output: [[92 92 -64 92] -64]
Test Case:  14 | Input/Output: [[-15 -15 -8 -15] -15]
Test Case:  15 | Input/Output: [[-21 -21 -21 19] -21]
Test Case:  16 | Input/Output: [[23 23 23 1] 1]
Test Case:  17 | Input/Output: [[38 -76 -76 -76] -76]
Test Case:  18 | Input/Output: [[-70 -70 -86 -70] -86]
Test Case:  19 | Input/Output: [[55 55 -85 55] -85]
Test Case:  20 | Input/Output: [[75 75 75 -66] -66]
Test Case:  21 | Input/Output: [[34 37 37 37] 34]
Test Case:  22 | Input/Output: [[79 79 79 35] 35]
Test Case:  23 | Input/Output: [[-98 -98 -84 -98] -98]
Test Case:  24 | Input/Output: [[57 57 57 57] 57]
Test Case:  25 | Input/Output: [[-89 -45 -45 -45] -89]
Test Case:  26 | Input/Output: [[-70 -70 -70 -34] -70]
Test Case:  27 | Input/Output: [[0 -46 0 0] -46]
Test Case:  28 | Input/Output: [[-7 -7 66 -7] -7]
Test Case:  29 | Input/Output: [[71 71 -40 71] -40]
Test Case:  30 | Input/Output: [[89 -95 -95 -95] -95]
Test Case:  31 | Input/Output: [[-86 55 -86 -86] -86]
Test Case:  32 | Input/Output: [[-72 -64 -72 -72] -72]
Test Case:  33 | Input/Output: [[18 16 18 18] 16]
Test Case:  34 | Input/Output: [[-15 -12 -15 -15] -15]
Test Case:  35 | Input/Output: [[-52 -52 -52 -59] -59]
Test Case:  36 | Input/Output: [[66 66 41 66] 41]
Test Case:  37 | Input/Output: [[-62 -62 -62 56] -62]
Test Case:  38 | Input/Output: [[-87 28 -87 -87] -87]
Test Case:  39 | Input/Output: [[-55 -55 -32 -55] -55]
Test Case:  40 | Input/Output: [[33 33 33 -7] -7]
Test Case:  41 | Input/Output: [[-58 -76 -76 -76] -76]
Test Case:  42 | Input/Output: [[18 8 18 18] 8]
Test Case:  43 | Input/Output: [[-95 -41 -95 -95] -95]
Test Case:  44 | Input/Output: [[-38 73 73 73] -38]
Test Case:  45 | Input/Output: [[-92 -78 -92 -92] -92]
Test Case:  46 | Input/Output: [[43 43 42 43] 42]
Test Case:  47 | Input/Output: [[-70 -70 -16 -70] -70]
Test Case:  48 | Input/Output: [[-10 -10 97 -10] -10]
Test Case:  49 | Input/Output: [[-49 -63 -63 -63] -63]
Test Case:  50 | Input/Output: [[57 57 6 57] 6]
Test Case:  51 | Input/Output: [[58 58 58 -99] -99]
Test Case:  52 | Input/Output: [[-36 -60 -60 -60] -60]
Test Case:  53 | Input/Output: [[40 40 83 40] 40]
Test Case:  54 | Input/Output: [[73 73 73 66] 66]
Test Case:  55 | Input/Output: [[99 99 99 -65] -65]
Test Case:  56 | Input/Output: [[59 4 4 4] 4]
Test Case:  57 | Input/Output: [[89 15 89 89] 15]
Test Case:  58 | Input/Output: [[-48 -32 -48 -48] -48]
Test Case:  59 | Input/Output: [[53 -63 -63 -63] -63]
Test Case:  60 | Input/Output: [[71 72 72 72] 71]
Test Case:  61 | Input/Output: [[-99 -99 32 -99] -99]
Test Case:  62 | Input/Output: [[98 98 74 98] 74]
Test Case:  63 | Input/Output: [[39 0 0 0] 0]
Test Case:  64 | Input/Output: [[26 26 64 26] 26]
Test Case:  65 | Input/Output: [[70 79 79 79] 70]
Test Case:  66 | Input/Output: [[54 55 55 55] 54]
Test Case:  67 | Input/Output: [[-96 -96 45 -96] -96]
Test Case:  68 | Input/Output: [[54 46 46 46] 46]
Test Case:  69 | Input/Output: [[-32 8 -32 -32] -32]
Test Case:  70 | Input/Output: [[-12 -12 -33 -12] -33]
Test Case:  71 | Input/Output: [[17 17 17 15] 15]
Test Case:  72 | Input/Output: [[-93 32 32 32] -93]
Test Case:  73 | Input/Output: [[16 16 16 100] 16]
Test Case:  74 | Input/Output: [[-91 -97 -91 -91] -97]
Test Case:  75 | Input/Output: [[-51 -51 28 -51] -51]
Test Case:  76 | Input/Output: [[40 -20 -20 -20] -20]
Test Case:  77 | Input/Output: [[-22 -22 -22 6] -22]
Test Case:  78 | Input/Output: [[72 66 66 66] 66]
Test Case:  79 | Input/Output: [[83 -62 -62 -62] -62]
Test Case:  80 | Input/Output: [[91 91 91 -67] -67]
Test Case:  81 | Input/Output: [[-16 -16 -16 31] -16]
Test Case:  82 | Input/Output: [[-6 -20 -6 -6] -20]
Test Case:  83 | Input/Output: [[-17 -17 -88 -17] -88]
Test Case:  84 | Input/Output: [[-74 42 42 42] -74]
Test Case:  85 | Input/Output: [[-83 -41 -41 -41] -83]
Test Case:  86 | Input/Output: [[85 -29 -29 -29] -29]
Test Case:  87 | Input/Output: [[-31 18 -31 -31] -31]
Test Case:  88 | Input/Output: [[65 85 85 85] 65]
Test Case:  89 | Input/Output: [[-60 -1 -1 -1] -60]
Test Case:  90 | Input/Output: [[87 -75 -75 -75] -75]
Test Case:  91 | Input/Output: [[-18 -18 -18 50] -18]
Test Case:  92 | Input/Output: [[-7 -7 -7 29] -7]
Test Case:  93 | Input/Output: [[81 81 81 -100] -100]
Test Case:  94 | Input/Output: [[-67 -49 -67 -67] -67]
Test Case:  95 | Input/Output: [[70 95 95 95] 70]
Test Case:  96 | Input/Output: [[29 29 -55 29] -55]
Test Case:  97 | Input/Output: [[-49 -49 -49 -72] -72]
Test Case:  98 | Input/Output: [[-63 -63 -63 29] -63]
Test Case:  99 | Input/Output: [[1 18 18 18] 1]
Test Case: 100 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 101 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 102 | Input/Output: [(90 90 90 90) 90]
Test Case: 103 | Input/Output: [(53 53 53 53) 53]
Test Case: 104 | Input/Output: [(54 54 54 54) 54]
Test Case: 105 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 106 | Input/Output: [(26 26 26 26) 26]
Test Case: 107 | Input/Output: [(62 62 62 62) 62]
Test Case: 108 | Input/Output: [(48 48 48 48) 48]
Test Case: 109 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 110 | Input/Output: [(71 71 71 71) 71]
Test Case: 111 | Input/Output: [(46 46 46 46) 46]
Test Case: 112 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 113 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 114 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 115 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 116 | Input/Output: [(51 51 51 51) 51]
Test Case: 117 | Input/Output: [(36 36 36 36) 36]
Test Case: 118 | Input/Output: [(7 7 7 7) 7]
Test Case: 119 | Input/Output: [(92 92 92 92) 92]
Test Case: 120 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 121 | Input/Output: [(88 88 88 88) 88]
Test Case: 122 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 123 | Input/Output: [(60 60 60 60) 60]
Test Case: 124 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 125 | Input/Output: [(15 15 15 15) 15]
Test Case: 126 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 127 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 128 | Input/Output: [(68 68 68 68) 68]
Test Case: 129 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 130 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 131 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 132 | Input/Output: [(59 59 59 59) 59]
Test Case: 133 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 134 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 135 | Input/Output: [(81 81 81 81) 81]
Test Case: 136 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 137 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 138 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 139 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 140 | Input/Output: [(63 63 63 63) 63]
Test Case: 141 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 142 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 143 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 144 | Input/Output: [(21 21 21 21) 21]
Test Case: 145 | Input/Output: [(59 59 59 59) 59]
Test Case: 146 | Input/Output: [(16 16 16 16) 16]
Test Case: 147 | Input/Output: [(67 67 67 67) 67]
Test Case: 148 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 149 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 150 | Input/Output: [(40 40 40 40) 40]
Test Case: 151 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 152 | Input/Output: [(69 69 69 69) 69]
Test Case: 153 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 154 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 155 | Input/Output: [(35 35 35 35) 35]
Test Case: 156 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 157 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 158 | Input/Output: [(54 54 54 54) 54]
Test Case: 159 | Input/Output: [(7 7 7 7) 7]
Test Case: 160 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 161 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 162 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 163 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 164 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 165 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 166 | Input/Output: [(3 3 3 3) 3]
Test Case: 167 | Input/Output: [(15 15 15 15) 15]
Test Case: 168 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 169 | Input/Output: [(9 9 9 9) 9]
Test Case: 170 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 171 | Input/Output: [(32 32 32 32) 32]
Test Case: 172 | Input/Output: [(69 69 69 69) 69]
Test Case: 173 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 174 | Input/Output: [(6 6 6 6) 6]
Test Case: 175 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 176 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 177 | Input/Output: [(87 87 87 87) 87]
Test Case: 178 | Input/Output: [(8 8 8 8) 8]
Test Case: 179 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 180 | Input/Output: [(56 56 56 56) 56]
Test Case: 181 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 182 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 183 | Input/Output: [(78 78 78 78) 78]
Test Case: 184 | Input/Output: [(66 66 66 66) 66]
Test Case: 185 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 186 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 187 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 188 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 189 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 190 | Input/Output: [(34 34 34 34) 34]
Test Case: 191 | Input/Output: [(89 89 89 89) 89]
Test Case: 192 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 193 | Input/Output: [(18 18 18 18) 18]
Test Case: 194 | Input/Output: [(16 16 16 16) 16]
Test Case: 195 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 196 | Input/Output: [(65 65 65 65) 65]
Test Case: 197 | Input/Output: [(1 1 1 1) 1]
Test Case: 198 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 199 | Input/Output: [(74 74 74 74) 74]
Test Case: 200 | Input/Output: [(78 19 23 27) 19]
Test Case: 201 | Input/Output: [(74 32 40 65) 32]
Test Case: 202 | Input/Output: [(95 87 96 33) 33]
Test Case: 203 | Input/Output: [(59 75 51 51) 51]
Test Case: 204 | Input/Output: [(73 7 46 87) 7]
Test Case: 205 | Input/Output: [(13 87 58 9) 9]
Test Case: 206 | Input/Output: [(81 2 41 70) 2]
Test Case: 207 | Input/Output: [(20 89 83 54) 20]
Test Case: 208 | Input/Output: [(63 63 73 87) 63]
Test Case: 209 | Input/Output: [(8 10 97 98) 8]
Test Case: 210 | Input/Output: [(60 15 9 5) 5]
Test Case: 211 | Input/Output: [(84 43 25 9) 9]
Test Case: 212 | Input/Output: [(52 80 70 12) 12]
Test Case: 213 | Input/Output: [(15 32 78 52) 15]
Test Case: 214 | Input/Output: [(21 51 81 44) 21]
Test Case: 215 | Input/Output: [(18 29 28 6) 6]
Test Case: 216 | Input/Output: [(26 25 80 30) 25]
Test Case: 217 | Input/Output: [(27 96 55 100) 27]
Test Case: 218 | Input/Output: [(55 58 17 41) 17]
Test Case: 219 | Input/Output: [(52 74 89 36) 36]
Test Case: 220 | Input/Output: [(42 1 15 48) 1]
Test Case: 221 | Input/Output: [(12 98 79 2) 2]
Test Case: 222 | Input/Output: [(33 18 31 14) 14]
Test Case: 223 | Input/Output: [(16 72 96 59) 16]
Test Case: 224 | Input/Output: [(88 82 7 95) 7]
Test Case: 225 | Input/Output: [(26 11 19 24) 11]
Test Case: 226 | Input/Output: [(54 22 37 21) 21]
Test Case: 227 | Input/Output: [(51 56 83 29) 29]
Test Case: 228 | Input/Output: [(74 50 58 68) 50]
Test Case: 229 | Input/Output: [(1 53 97 71) 1]
Test Case: 230 | Input/Output: [(78 97 22 88) 22]
Test Case: 231 | Input/Output: [(50 17 75 12) 12]
Test Case: 232 | Input/Output: [(11 10 1 24) 1]
Test Case: 233 | Input/Output: [(74 82 64 64) 64]
Test Case: 234 | Input/Output: [(37 37 60 85) 37]
Test Case: 235 | Input/Output: [(51 2 85 58) 2]
Test Case: 236 | Input/Output: [(82 48 6 17) 6]
Test Case: 237 | Input/Output: [(78 9 4 35) 4]
Test Case: 238 | Input/Output: [(85 90 96 19) 19]
Test Case: 239 | Input/Output: [(72 56 53 42) 42]
Test Case: 240 | Input/Output: [(19 95 56 9) 9]
Test Case: 241 | Input/Output: [(42 17 57 5) 5]
Test Case: 242 | Input/Output: [(69 38 66 21) 21]
Test Case: 243 | Input/Output: [(38 58 54 95) 38]
Test Case: 244 | Input/Output: [(18 20 42 31) 18]
Test Case: 245 | Input/Output: [(13 18 18 11) 11]
Test Case: 246 | Input/Output: [(94 71 59 31) 31]
Test Case: 247 | Input/Output: [(61 82 22 37) 22]
Test Case: 248 | Input/Output: [(1 37 70 13) 1]
Test Case: 249 | Input/Output: [(43 22 76 76) 22]
Test Case: 250 | Input/Output: [(33 21 29 89) 21]
Test Case: 251 | Input/Output: [(53 39 82 17) 17]
Test Case: 252 | Input/Output: [(22 57 5 12) 5]
Test Case: 253 | Input/Output: [(58 100 57 61) 57]
Test Case: 254 | Input/Output: [(85 6 58 29) 6]
Test Case: 255 | Input/Output: [(73 35 91 66) 35]
Test Case: 256 | Input/Output: [(60 59 29 91) 29]
Test Case: 257 | Input/Output: [(89 69 95 59) 59]
Test Case: 258 | Input/Output: [(72 46 44 17) 17]
Test Case: 259 | Input/Output: [(100 35 56 62) 35]
Test Case: 260 | Input/Output: [(74 44 59 89) 44]
Test Case: 261 | Input/Output: [(10 52 62 75) 10]
Test Case: 262 | Input/Output: [(81 79 97 49) 49]
Test Case: 263 | Input/Output: [(15 62 35 53) 15]
Test Case: 264 | Input/Output: [(54 45 7 86) 7]
Test Case: 265 | Input/Output: [(99 60 31 76) 31]
Test Case: 266 | Input/Output: [(74 20 62 5) 5]
Test Case: 267 | Input/Output: [(59 90 5 22) 5]
Test Case: 268 | Input/Output: [(1 15 38 49) 1]
Test Case: 269 | Input/Output: [(79 45 0 20) 0]
Test Case: 270 | Input/Output: [(87 73 38 27) 27]
Test Case: 271 | Input/Output: [(62 37 5 97) 5]
Test Case: 272 | Input/Output: [(33 51 62 10) 10]
Test Case: 273 | Input/Output: [(14 57 44 55) 14]
Test Case: 274 | Input/Output: [(79 18 90 15) 15]
Test Case: 275 | Input/Output: [(27 74 45 10) 10]
Test Case: 276 | Input/Output: [(5 22 69 86) 5]
Test Case: 277 | Input/Output: [(11 94 68 87) 11]
Test Case: 278 | Input/Output: [(81 60 93 93) 60]
Test Case: 279 | Input/Output: [(29 11 82 59) 11]
Test Case: 280 | Input/Output: [(27 65 65 63) 27]
Test Case: 281 | Input/Output: [(72 97 59 37) 37]
Test Case: 282 | Input/Output: [(75 58 56 31) 31]
Test Case: 283 | Input/Output: [(64 78 40 100) 40]
Test Case: 284 | Input/Output: [(23 47 89 62) 23]
Test Case: 285 | Input/Output: [(77 58 76 6) 6]
Test Case: 286 | Input/Output: [(4 66 98 4) 4]
Test Case: 287 | Input/Output: [(87 23 80 1) 1]
Test Case: 288 | Input/Output: [(75 86 63 80) 63]
Test Case: 289 | Input/Output: [(70 49 83 28) 28]
Test Case: 290 | Input/Output: [(53 34 15 4) 4]
Test Case: 291 | Input/Output: [(94 67 23 15) 15]
Test Case: 292 | Input/Output: [(47 20 59 27) 20]
Test Case: 293 | Input/Output: [(26 1 23 67) 1]
Test Case: 294 | Input/Output: [(20 28 31 52) 20]
Test Case: 295 | Input/Output: [(5 80 27 49) 5]
Test Case: 296 | Input/Output: [(14 8 96 43) 8]
Test Case: 297 | Input/Output: [(37 0 57 93) 0]
Test Case: 298 | Input/Output: [(64 69 98 38) 38]
Test Case: 299 | Input/Output: [(8 74 38 77) 8]
Test Case: 300 | Input/Output: [(61 67 41 27) 27]
Test Case: 301 | Input/Output: [(80 78 100 72) 72]
Test Case: 302 | Input/Output: [(8 18 46 32) 8]
Test Case: 303 | Input/Output: [(80 85 74 82) 74]
Test Case: 304 | Input/Output: [(71 53 87 5) 5]
Test Case: 305 | Input/Output: [(5 64 18 4) 4]
Test Case: 306 | Input/Output: [(55 29 63 65) 29]
Test Case: 307 | Input/Output: [(25 3 7 96) 3]
Test Case: 308 | Input/Output: [(39 6 41 21) 6]
Test Case: 309 | Input/Output: [(97 88 37 60) 37]
Test Case: 310 | Input/Output: [(62 5 66 5) 5]
Test Case: 311 | Input/Output: [(76 53 94 13) 13]
Test Case: 312 | Input/Output: [(60 0 27 35) 0]
Test Case: 313 | Input/Output: [(89 5 14 28) 5]
Test Case: 314 | Input/Output: [(59 39 71 33) 33]
Test Case: 315 | Input/Output: [(43 49 45 77) 43]
Test Case: 316 | Input/Output: [(48 45 68 38) 38]
Test Case: 317 | Input/Output: [(95 58 94 37) 37]
Test Case: 318 | Input/Output: [(40 53 48 17) 17]
Test Case: 319 | Input/Output: [(48 10 68 100) 10]
Test Case: 320 | Input/Output: [(30 51 75 59) 30]
Test Case: 321 | Input/Output: [(57 54 72 10) 10]
Test Case: 322 | Input/Output: [(86 22 66 22) 22]
Test Case: 323 | Input/Output: [(84 35 82 95) 35]
Test Case: 324 | Input/Output: [(70 43 74 73) 43]
Test Case: 325 | Input/Output: [(24 94 69 32) 24]
Test Case: 326 | Input/Output: [(56 37 50 18) 18]
Test Case: 327 | Input/Output: [(42 89 59 89) 42]
Test Case: 328 | Input/Output: [(16 24 83 35) 16]
Test Case: 329 | Input/Output: [(99 94 71 22) 22]
Test Case: 330 | Input/Output: [(71 70 100 67) 67]
Test Case: 331 | Input/Output: [(2 47 73 43) 2]
Test Case: 332 | Input/Output: [(18 80 26 7) 7]
Test Case: 333 | Input/Output: [(69 60 36 92) 36]
Test Case: 334 | Input/Output: [(7 1 21 50) 1]
Test Case: 335 | Input/Output: [(12 97 45 40) 12]
Test Case: 336 | Input/Output: [(43 95 70 30) 30]
Test Case: 337 | Input/Output: [(63 54 55 53) 53]
Test Case: 338 | Input/Output: [(69 12 44 78) 12]
Test Case: 339 | Input/Output: [(75 3 30 14) 3]
Test Case: 340 | Input/Output: [(27 16 45 37) 16]
Test Case: 341 | Input/Output: [(35 34 61 57) 34]
Test Case: 342 | Input/Output: [(59 27 7 2) 2]
Test Case: 343 | Input/Output: [(16 22 15 46) 15]
Test Case: 344 | Input/Output: [(43 43 18 5) 5]
Test Case: 345 | Input/Output: [(23 51 43 74) 23]
Test Case: 346 | Input/Output: [(82 99 83 56) 56]
Test Case: 347 | Input/Output: [(35 33 71 6) 6]
Test Case: 348 | Input/Output: [(10 62 61 82) 10]
Test Case: 349 | Input/Output: [(44 98 59 16) 16]
Test Case: 350 | Input/Output: [(81 10 41 39) 10]
Test Case: 351 | Input/Output: [(57 53 60 20) 20]
Test Case: 352 | Input/Output: [(41 59 51 23) 23]
Test Case: 353 | Input/Output: [(67 75 21 46) 21]
Test Case: 354 | Input/Output: [(3 64 8 38) 3]
Test Case: 355 | Input/Output: [(31 98 35 25) 25]
Test Case: 356 | Input/Output: [(7 71 68 84) 7]
Test Case: 357 | Input/Output: [(89 77 90 20) 20]
Test Case: 358 | Input/Output: [(74 51 0 33) 0]
Test Case: 359 | Input/Output: [(22 4 100 26) 4]
Test Case: 360 | Input/Output: [(79 63 76 90) 63]
Test Case: 361 | Input/Output: [(97 91 14 36) 14]
Test Case: 362 | Input/Output: [(21 42 92 25) 21]
Test Case: 363 | Input/Output: [(11 21 26 69) 11]
Test Case: 364 | Input/Output: [(41 40 65 95) 40]
Test Case: 365 | Input/Output: [(27 51 84 19) 19]
Test Case: 366 | Input/Output: [(41 64 59 99) 41]
Test Case: 367 | Input/Output: [(42 97 62 18) 18]
Test Case: 368 | Input/Output: [(21 28 66 8) 8]
Test Case: 369 | Input/Output: [(89 17 49 81) 17]
Test Case: 370 | Input/Output: [(93 91 95 32) 32]
Test Case: 371 | Input/Output: [(4 89 18 27) 4]
Test Case: 372 | Input/Output: [(56 98 47 73) 47]
Test Case: 373 | Input/Output: [(11 9 61 4) 4]
Test Case: 374 | Input/Output: [(22 49 37 44) 22]
Test Case: 375 | Input/Output: [(26 47 26 46) 26]
Test Case: 376 | Input/Output: [(61 29 88 28) 28]
Test Case: 377 | Input/Output: [(41 100 6 71) 6]
Test Case: 378 | Input/Output: [(36 17 15 82) 15]
Test Case: 379 | Input/Output: [(84 17 80 11) 11]
Test Case: 380 | Input/Output: [(41 33 72 7) 7]
Test Case: 381 | Input/Output: [(85 53 33 62) 33]
Test Case: 382 | Input/Output: [(36 39 71 45) 36]
Test Case: 383 | Input/Output: [(21 86 96 50) 21]
Test Case: 384 | Input/Output: [(45 11 8 96) 8]
Test Case: 385 | Input/Output: [(100 5 0 66) 0]
Test Case: 386 | Input/Output: [(20 99 44 22) 20]
Test Case: 387 | Input/Output: [(85 60 7 92) 7]
Test Case: 388 | Input/Output: [(53 94 10 91) 10]
Test Case: 389 | Input/Output: [(17 7 68 84) 7]
Test Case: 390 | Input/Output: [(84 4 26 95) 4]
Test Case: 391 | Input/Output: [(20 49 94 35) 20]
Test Case: 392 | Input/Output: [(100 3 25 61) 3]
Test Case: 393 | Input/Output: [(90 46 77 31) 31]
Test Case: 394 | Input/Output: [(1 51 100 58) 1]
Test Case: 395 | Input/Output: [(4 2 76 100) 2]
Test Case: 396 | Input/Output: [(45 80 93 59) 45]
Test Case: 397 | Input/Output: [(46 23 37 49) 23]
Test Case: 398 | Input/Output: [(18 3 52 19) 3]
Test Case: 399 | Input/Output: [(14 39 55 79) 14]
Test Case: 400 | Input/Output: [(-76 -86 58 82) -86]
Test Case: 401 | Input/Output: [(-35 87 95 57) -35]
Test Case: 402 | Input/Output: [(19 -20 37 95) -20]
Test Case: 403 | Input/Output: [(87 -32 -48 -45) -48]
Test Case: 404 | Input/Output: [(95 -5 73 79) -5]
Test Case: 405 | Input/Output: [(56 -39 85 73) -39]
Test Case: 406 | Input/Output: [(-81 -14 -40 89) -81]
Test Case: 407 | Input/Output: [(-93 -29 21 67) -93]
Test Case: 408 | Input/Output: [(-36 80 24 11) -36]
Test Case: 409 | Input/Output: [(-67 -12 -95 -87) -95]
Test Case: 410 | Input/Output: [(73 66 34 -83) -83]
Test Case: 411 | Input/Output: [(-86 23 -88 43) -88]
Test Case: 412 | Input/Output: [(-58 -94 35 -49) -94]
Test Case: 413 | Input/Output: [(-65 -98 -4 -46) -98]
Test Case: 414 | Input/Output: [(8 100 66 -84) -84]
Test Case: 415 | Input/Output: [(90 -5 -68 -23) -68]
Test Case: 416 | Input/Output: [(11 -21 -98 61) -98]
Test Case: 417 | Input/Output: [(46 -3 -66 -40) -66]
Test Case: 418 | Input/Output: [(80 -59 86 89) -59]
Test Case: 419 | Input/Output: [(58 87 76 67) 58]
Test Case: 420 | Input/Output: [(-37 53 95 -83) -83]
Test Case: 421 | Input/Output: [(-4 -66 7 -43) -66]
Test Case: 422 | Input/Output: [(-15 -30 85 79) -30]
Test Case: 423 | Input/Output: [(100 33 37 4) 4]
Test Case: 424 | Input/Output: [(-76 -37 33 -89) -89]
Test Case: 425 | Input/Output: [(-55 4 -38 -69) -69]
Test Case: 426 | Input/Output: [(17 -86 44 -51) -86]
Test Case: 427 | Input/Output: [(70 -46 34 -20) -46]
Test Case: 428 | Input/Output: [(56 -62 -70 89) -70]
Test Case: 429 | Input/Output: [(-91 46 -53 -60) -91]
Test Case: 430 | Input/Output: [(-15 -100 -54 92) -100]
Test Case: 431 | Input/Output: [(53 -58 18 69) -58]
Test Case: 432 | Input/Output: [(87 -69 29 21) -69]
Test Case: 433 | Input/Output: [(24 -50 -40 32) -50]
Test Case: 434 | Input/Output: [(65 89 4 25) 4]
Test Case: 435 | Input/Output: [(44 -6 93 -10) -10]
Test Case: 436 | Input/Output: [(-85 95 31 55) -85]
Test Case: 437 | Input/Output: [(80 55 -3 54) -3]
Test Case: 438 | Input/Output: [(-99 11 -58 -78) -99]
Test Case: 439 | Input/Output: [(58 47 -74 -8) -74]
Test Case: 440 | Input/Output: [(-71 -20 21 16) -71]
Test Case: 441 | Input/Output: [(-29 -17 74 34) -29]
Test Case: 442 | Input/Output: [(-94 -33 4 61) -94]
Test Case: 443 | Input/Output: [(-54 100 -70 12) -70]
Test Case: 444 | Input/Output: [(39 12 -33 -33) -33]
Test Case: 445 | Input/Output: [(-33 -56 21 -14) -56]
Test Case: 446 | Input/Output: [(63 -98 -90 64) -98]
Test Case: 447 | Input/Output: [(-17 -68 -62 -78) -78]
Test Case: 448 | Input/Output: [(43 -28 28 -32) -32]
Test Case: 449 | Input/Output: [(38 -56 -19 -96) -96]
Test Case: 450 | Input/Output: [(42 65 -88 14) -88]
Test Case: 451 | Input/Output: [(86 -59 -88 -74) -88]
Test Case: 452 | Input/Output: [(71 37 52 51) 37]
Test Case: 453 | Input/Output: [(-45 17 90 0) -45]
Test Case: 454 | Input/Output: [(-100 -86 -67 -55) -100]
Test Case: 455 | Input/Output: [(9 47 55 -93) -93]
Test Case: 456 | Input/Output: [(-40 -50 -45 83) -50]
Test Case: 457 | Input/Output: [(-97 2 -28 92) -97]
Test Case: 458 | Input/Output: [(-49 95 -81 -93) -93]
Test Case: 459 | Input/Output: [(13 -85 20 -50) -85]
Test Case: 460 | Input/Output: [(-31 28 53 79) -31]
Test Case: 461 | Input/Output: [(-86 -92 72 -1) -92]
Test Case: 462 | Input/Output: [(-6 7 -42 85) -42]
Test Case: 463 | Input/Output: [(97 -55 -28 78) -55]
Test Case: 464 | Input/Output: [(-65 85 84 -8) -65]
Test Case: 465 | Input/Output: [(94 -33 46 84) -33]
Test Case: 466 | Input/Output: [(4 -82 -92 65) -92]
Test Case: 467 | Input/Output: [(-30 -73 -15 58) -73]
Test Case: 468 | Input/Output: [(-81 -39 -27 93) -81]
Test Case: 469 | Input/Output: [(16 -64 -28 -93) -93]
Test Case: 470 | Input/Output: [(29 20 -57 -13) -57]
Test Case: 471 | Input/Output: [(-92 -20 100 9) -92]
Test Case: 472 | Input/Output: [(57 -63 -30 75) -63]
Test Case: 473 | Input/Output: [(10 56 -9 -85) -85]
Test Case: 474 | Input/Output: [(78 -68 93 -26) -68]
Test Case: 475 | Input/Output: [(2 73 -25 40) -25]
Test Case: 476 | Input/Output: [(-95 89 -46 7) -95]
Test Case: 477 | Input/Output: [(-40 34 -16 -54) -54]
Test Case: 478 | Input/Output: [(97 -46 77 -84) -84]
Test Case: 479 | Input/Output: [(12 -6 -92 97) -92]
Test Case: 480 | Input/Output: [(83 -15 23 -65) -65]
Test Case: 481 | Input/Output: [(35 9 57 -93) -93]
Test Case: 482 | Input/Output: [(-15 -23 -1 -86) -86]
Test Case: 483 | Input/Output: [(-46 -29 -86 3) -86]
Test Case: 484 | Input/Output: [(-88 85 92 -94) -94]
Test Case: 485 | Input/Output: [(13 5 16 61) 5]
Test Case: 486 | Input/Output: [(97 30 34 -61) -61]
Test Case: 487 | Input/Output: [(-48 -86 56 71) -86]
Test Case: 488 | Input/Output: [(-69 -99 -43 -13) -99]
Test Case: 489 | Input/Output: [(-77 14 69 -30) -77]
Test Case: 490 | Input/Output: [(39 -64 21 85) -64]
Test Case: 491 | Input/Output: [(21 -37 90 73) -37]
Test Case: 492 | Input/Output: [(-85 46 4 -90) -90]
Test Case: 493 | Input/Output: [(37 -75 7 4) -75]
Test Case: 494 | Input/Output: [(51 1 7 22) 1]
Test Case: 495 | Input/Output: [(12 -56 8 73) -56]
Test Case: 496 | Input/Output: [(-97 17 60 -89) -97]
Test Case: 497 | Input/Output: [(64 -17 55 40) -17]
Test Case: 498 | Input/Output: [(99 71 41 -65) -65]
Test Case: 499 | Input/Output: [(95 -18 -49 74) -49]
Test Case: 500 | Input/Output: [(24 19 -10 -24) -24]
Test Case: 501 | Input/Output: [(85 -75 -96 43) -96]
Test Case: 502 | Input/Output: [(-1 51 86 -38) -38]
Test Case: 503 | Input/Output: [(-44 -20 -78 -97) -97]
Test Case: 504 | Input/Output: [(-68 21 -45 33) -68]
Test Case: 505 | Input/Output: [(-39 77 -76 -44) -76]
Test Case: 506 | Input/Output: [(-11 -14 -64 -10) -64]
Test Case: 507 | Input/Output: [(-69 -91 -33 -4) -91]
Test Case: 508 | Input/Output: [(-35 42 70 30) -35]
Test Case: 509 | Input/Output: [(-97 25 -62 20) -97]
Test Case: 510 | Input/Output: [(-33 -49 93 -60) -60]
Test Case: 511 | Input/Output: [(71 56 11 -88) -88]
Test Case: 512 | Input/Output: [(30 10 -16 -99) -99]
Test Case: 513 | Input/Output: [(87 84 21 68) 21]
Test Case: 514 | Input/Output: [(9 -44 -74 -62) -74]
Test Case: 515 | Input/Output: [(64 90 -5 98) -5]
Test Case: 516 | Input/Output: [(39 65 -95 43) -95]
Test Case: 517 | Input/Output: [(-54 2 -29 26) -54]
Test Case: 518 | Input/Output: [(74 51 40 -68) -68]
Test Case: 519 | Input/Output: [(22 98 -36 92) -36]
Test Case: 520 | Input/Output: [(-97 -61 90 96) -97]
Test Case: 521 | Input/Output: [(100 -46 73 60) -46]
Test Case: 522 | Input/Output: [(56 -14 -39 74) -39]
Test Case: 523 | Input/Output: [(-30 97 -75 45) -75]
Test Case: 524 | Input/Output: [(31 54 -83 -85) -85]
Test Case: 525 | Input/Output: [(-34 -68 78 -58) -68]
Test Case: 526 | Input/Output: [(53 -58 -83 60) -83]
Test Case: 527 | Input/Output: [(-24 -32 -38 -61) -61]
Test Case: 528 | Input/Output: [(-59 13 45 -55) -59]
Test Case: 529 | Input/Output: [(-79 95 36 -85) -85]
Test Case: 530 | Input/Output: [(-37 58 7 -45) -45]
Test Case: 531 | Input/Output: [(24 -87 71 97) -87]
Test Case: 532 | Input/Output: [(67 4 23 19) 4]
Test Case: 533 | Input/Output: [(-58 -14 83 -90) -90]
Test Case: 534 | Input/Output: [(-70 87 -83 -7) -83]
Test Case: 535 | Input/Output: [(-52 50 5 83) -52]
Test Case: 536 | Input/Output: [(23 78 45 -94) -94]
Test Case: 537 | Input/Output: [(10 78 -41 -29) -41]
Test Case: 538 | Input/Output: [(15 61 -67 -76) -76]
Test Case: 539 | Input/Output: [(-24 -98 0 -32) -98]
Test Case: 540 | Input/Output: [(-97 -59 -4 -63) -97]
Test Case: 541 | Input/Output: [(67 -18 -75 -68) -75]
Test Case: 542 | Input/Output: [(-98 -76 -67 -83) -98]
Test Case: 543 | Input/Output: [(30 2 26 -76) -76]
Test Case: 544 | Input/Output: [(-8 -94 -98 -49) -98]
Test Case: 545 | Input/Output: [(-42 14 -4 94) -42]
Test Case: 546 | Input/Output: [(0 -83 99 -59) -83]
Test Case: 547 | Input/Output: [(-79 -43 -77 -33) -79]
Test Case: 548 | Input/Output: [(99 74 85 -56) -56]
Test Case: 549 | Input/Output: [(-94 17 -53 54) -94]
Test Case: 550 | Input/Output: [(-37 9 89 71) -37]
Test Case: 551 | Input/Output: [(67 13 22 -78) -78]
Test Case: 552 | Input/Output: [(68 -29 -73 -55) -73]
Test Case: 553 | Input/Output: [(-62 -97 48 -19) -97]
Test Case: 554 | Input/Output: [(83 12 -61 49) -61]
Test Case: 555 | Input/Output: [(-23 -89 16 -21) -89]
Test Case: 556 | Input/Output: [(-16 56 24 -53) -53]
Test Case: 557 | Input/Output: [(54 -91 69 -44) -91]
Test Case: 558 | Input/Output: [(100 -52 -17 16) -52]
Test Case: 559 | Input/Output: [(16 80 80 -14) -14]
Test Case: 560 | Input/Output: [(51 -18 -28 -51) -51]
Test Case: 561 | Input/Output: [(11 97 -3 28) -3]
Test Case: 562 | Input/Output: [(96 20 54 21) 20]
Test Case: 563 | Input/Output: [(-83 -22 64 11) -83]
Test Case: 564 | Input/Output: [(31 54 53 82) 31]
Test Case: 565 | Input/Output: [(-50 -44 71 71) -50]
Test Case: 566 | Input/Output: [(-76 -32 -13 9) -76]
Test Case: 567 | Input/Output: [(-95 -93 -54 27) -95]
Test Case: 568 | Input/Output: [(25 1 48 -69) -69]
Test Case: 569 | Input/Output: [(63 91 13 -16) -16]
Test Case: 570 | Input/Output: [(-7 -5 -3 -77) -77]
Test Case: 571 | Input/Output: [(94 -30 23 -58) -58]
Test Case: 572 | Input/Output: [(25 15 -34 65) -34]
Test Case: 573 | Input/Output: [(70 -83 -11 97) -83]
Test Case: 574 | Input/Output: [(27 21 -29 -79) -79]
Test Case: 575 | Input/Output: [(-92 -86 30 25) -92]
Test Case: 576 | Input/Output: [(69 -39 -10 70) -39]
Test Case: 577 | Input/Output: [(-79 -70 36 4) -79]
Test Case: 578 | Input/Output: [(88 -5 2 64) -5]
Test Case: 579 | Input/Output: [(59 85 -93 -36) -93]
Test Case: 580 | Input/Output: [(-50 -53 22 -17) -53]
Test Case: 581 | Input/Output: [(85 60 -94 45) -94]
Test Case: 582 | Input/Output: [(-70 93 88 31) -70]
Test Case: 583 | Input/Output: [(-50 85 65 46) -50]
Test Case: 584 | Input/Output: [(-80 55 -24 87) -80]
Test Case: 585 | Input/Output: [(-51 98 -62 -28) -62]
Test Case: 586 | Input/Output: [(-87 48 -74 37) -87]
Test Case: 587 | Input/Output: [(52 11 -63 -3) -63]
Test Case: 588 | Input/Output: [(-59 -57 3 77) -59]
Test Case: 589 | Input/Output: [(-17 74 91 -28) -28]
Test Case: 590 | Input/Output: [(-71 79 49 -23) -71]
Test Case: 591 | Input/Output: [(-41 -83 -19 71) -83]
Test Case: 592 | Input/Output: [(-97 -87 28 52) -97]
Test Case: 593 | Input/Output: [(51 10 25 68) 10]
Test Case: 594 | Input/Output: [(-1 14 -41 -72) -72]
Test Case: 595 | Input/Output: [(-55 98 99 -77) -77]
Test Case: 596 | Input/Output: [(-66 -65 -76 -11) -76]
Test Case: 597 | Input/Output: [(-3 87 -22 -83) -83]
Test Case: 598 | Input/Output: [(-68 99 -54 60) -68]
Test Case: 599 | Input/Output: [(-72 88 90 -74) -74]
Test Case: 600 | Input/Output: [(-62 -99 35 38) -99]
Test Case: 601 | Input/Output: [(-13 46 -60 5) -60]
Test Case: 602 | Input/Output: [(-43 67 15 19) -43]
Test Case: 603 | Input/Output: [(-1 -96 52 -74) -96]
Test Case: 604 | Input/Output: [(-73 -91 -68 -99) -99]
Test Case: 605 | Input/Output: [(65 -29 0 -9) -29]
Test Case: 606 | Input/Output: [(50 -99 19 37) -99]
Test Case: 607 | Input/Output: [(-38 -34 -17 34) -38]
Test Case: 608 | Input/Output: [(-49 -22 45 19) -49]
Test Case: 609 | Input/Output: [(57 83 11 -51) -51]
Test Case: 610 | Input/Output: [(-45 50 -30 35) -45]
Test Case: 611 | Input/Output: [(-51 91 26 99) -51]
Test Case: 612 | Input/Output: [(56 -47 69 -52) -52]
Test Case: 613 | Input/Output: [(49 -97 -65 16) -97]
Test Case: 614 | Input/Output: [(21 60 -47 36) -47]
Test Case: 615 | Input/Output: [(63 -93 -89 -31) -93]
Test Case: 616 | Input/Output: [(48 -19 -13 -61) -61]
Test Case: 617 | Input/Output: [(-66 19 -26 43) -66]
Test Case: 618 | Input/Output: [(-26 -91 -65 36) -91]
Test Case: 619 | Input/Output: [(16 68 59 60) 16]
Test Case: 620 | Input/Output: [(18 -11 -56 -86) -86]
Test Case: 621 | Input/Output: [(-76 8 69 77) -76]
Test Case: 622 | Input/Output: [(-55 -37 40 65) -55]
Test Case: 623 | Input/Output: [(-53 -27 30 -18) -53]
Test Case: 624 | Input/Output: [(22 -10 -74 -7) -74]
Test Case: 625 | Input/Output: [(62 100 -74 68) -74]
Test Case: 626 | Input/Output: [(58 29 -81 70) -81]
Test Case: 627 | Input/Output: [(47 -47 77 -8) -47]
Test Case: 628 | Input/Output: [(-84 -51 98 97) -84]
Test Case: 629 | Input/Output: [(100 67 80 93) 67]
Test Case: 630 | Input/Output: [(87 -57 69 -15) -57]
Test Case: 631 | Input/Output: [(-58 -12 -75 67) -75]
Test Case: 632 | Input/Output: [(-51 -100 -51 65) -100]
Test Case: 633 | Input/Output: [(-100 -42 -42 68) -100]
Test Case: 634 | Input/Output: [(56 -24 52 20) -24]
Test Case: 635 | Input/Output: [(45 -37 -58 -63) -63]
Test Case: 636 | Input/Output: [(36 51 25 74) 25]
Test Case: 637 | Input/Output: [(-22 96 61 29) -22]
Test Case: 638 | Input/Output: [(-60 78 -14 -67) -67]
Test Case: 639 | Input/Output: [(45 -14 -10 -55) -55]
Test Case: 640 | Input/Output: [(49 -99 -19 -60) -99]
Test Case: 641 | Input/Output: [(82 39 -84 31) -84]
Test Case: 642 | Input/Output: [(-47 91 91 10) -47]
Test Case: 643 | Input/Output: [(-37 85 -82 87) -82]
Test Case: 644 | Input/Output: [(59 -71 -35 -3) -71]
Test Case: 645 | Input/Output: [(-66 64 -59 46) -66]
Test Case: 646 | Input/Output: [(-44 -72 -25 11) -72]
Test Case: 647 | Input/Output: [(-28 89 -57 -37) -57]
Test Case: 648 | Input/Output: [(21 -32 -54 -45) -54]
Test Case: 649 | Input/Output: [(-13 -14 100 57) -14]
Test Case: 650 | Input/Output: [(37 -29 28 27) -29]
Test Case: 651 | Input/Output: [(67 -84 55 -39) -84]
Test Case: 652 | Input/Output: [(-34 -52 57 -32) -52]
Test Case: 653 | Input/Output: [(5 -10 26 -94) -94]
Test Case: 654 | Input/Output: [(27 -20 -78 58) -78]
Test Case: 655 | Input/Output: [(-62 -56 -66 -78) -78]
Test Case: 656 | Input/Output: [(6 87 35 93) 6]
Test Case: 657 | Input/Output: [(-79 95 -51 87) -79]
Test Case: 658 | Input/Output: [(100 57 -6 15) -6]
Test Case: 659 | Input/Output: [(-86 64 -63 -23) -86]
Test Case: 660 | Input/Output: [(71 -25 -64 65) -64]
Test Case: 661 | Input/Output: [(67 -35 -76 19) -76]
Test Case: 662 | Input/Output: [(-3 -40 7 59) -40]
Test Case: 663 | Input/Output: [(-74 66 60 -75) -75]
Test Case: 664 | Input/Output: [(58 41 -12 9) -12]
Test Case: 665 | Input/Output: [(89 -87 33 99) -87]
Test Case: 666 | Input/Output: [(-90 -71 -7 39) -90]
Test Case: 667 | Input/Output: [(-77 64 -13 -59) -77]
Test Case: 668 | Input/Output: [(61 -81 -15 -61) -81]
Test Case: 669 | Input/Output: [(49 -49 37 -17) -49]
Test Case: 670 | Input/Output: [(82 97 -76 -14) -76]
Test Case: 671 | Input/Output: [(-21 83 -1 -66) -66]
Test Case: 672 | Input/Output: [(10 -10 83 26) -10]
Test Case: 673 | Input/Output: [(97 18 52 -32) -32]
Test Case: 674 | Input/Output: [(-77 63 90 -46) -77]
Test Case: 675 | Input/Output: [(47 -23 -47 24) -47]
Test Case: 676 | Input/Output: [(13 -37 76 25) -37]
Test Case: 677 | Input/Output: [(93 -51 -57 33) -57]
Test Case: 678 | Input/Output: [(45 -8 35 88) -8]
Test Case: 679 | Input/Output: [(6 39 75 57) 6]
Test Case: 680 | Input/Output: [(26 78 -36 -93) -93]
Test Case: 681 | Input/Output: [(-75 -95 66 -63) -95]
Test Case: 682 | Input/Output: [(29 -31 75 86) -31]
Test Case: 683 | Input/Output: [(-3 90 -7 18) -7]
Test Case: 684 | Input/Output: [(60 -83 -26 99) -83]
Test Case: 685 | Input/Output: [(90 -51 94 -81) -81]
Test Case: 686 | Input/Output: [(-77 30 11 -9) -77]
Test Case: 687 | Input/Output: [(-44 -35 -71 -52) -71]
Test Case: 688 | Input/Output: [(-32 -33 -61 -84) -84]
Test Case: 689 | Input/Output: [(-3 -17 -26 -44) -44]
Test Case: 690 | Input/Output: [(-41 -78 82 23) -78]
Test Case: 691 | Input/Output: [(9 45 70 62) 9]
Test Case: 692 | Input/Output: [(-23 -56 29 55) -56]
Test Case: 693 | Input/Output: [(-81 46 -96 75) -96]
Test Case: 694 | Input/Output: [(47 -87 -90 32) -90]
Test Case: 695 | Input/Output: [(73 9 72 -19) -19]
Test Case: 696 | Input/Output: [(-11 -74 50 -92) -92]
Test Case: 697 | Input/Output: [(-76 77 50 19) -76]
Test Case: 698 | Input/Output: [(86 92 -78 -32) -78]
Test Case: 699 | Input/Output: [(62 97 66 -65) -65]
Test Case: 700 | Input/Output: [(-64 60 -93 -33) -93]
Test Case: 701 | Input/Output: [(-18 -42 58 63) -42]
Test Case: 702 | Input/Output: [(55 69 16 -41) -41]
Test Case: 703 | Input/Output: [(25 94 11 59) 11]
Test Case: 704 | Input/Output: [(89 28 -90 -76) -90]
Test Case: 705 | Input/Output: [(-8 -31 15 -27) -31]
Test Case: 706 | Input/Output: [(60 -26 66 -72) -72]
Test Case: 707 | Input/Output: [(56 69 -48 -23) -48]
Test Case: 708 | Input/Output: [(41 -98 -60 -15) -98]
Test Case: 709 | Input/Output: [(76 -68 -78 -84) -84]
Test Case: 710 | Input/Output: [(78 79 -8 41) -8]
Test Case: 711 | Input/Output: [(60 -53 -63 8) -63]
Test Case: 712 | Input/Output: [(50 53 10 59) 10]
Test Case: 713 | Input/Output: [(-48 -91 -36 37) -91]
Test Case: 714 | Input/Output: [(-30 52 93 57) -30]
Test Case: 715 | Input/Output: [(98 -25 -67 -7) -67]
Test Case: 716 | Input/Output: [(-60 62 -30 -3) -60]
Test Case: 717 | Input/Output: [(-17 30 -55 -89) -89]
Test Case: 718 | Input/Output: [(45 -98 17 -84) -98]
Test Case: 719 | Input/Output: [(52 -93 -17 -71) -93]
Test Case: 720 | Input/Output: [(51 27 -65 59) -65]
Test Case: 721 | Input/Output: [(96 44 67 -89) -89]
Test Case: 722 | Input/Output: [(-65 -69 -64 61) -69]
Test Case: 723 | Input/Output: [(35 -57 28 67) -57]
Test Case: 724 | Input/Output: [(-60 -1 -16 -22) -60]
Test Case: 725 | Input/Output: [(16 16 -44 -95) -95]
Test Case: 726 | Input/Output: [(19 45 -43 3) -43]
Test Case: 727 | Input/Output: [(55 -88 24 98) -88]
Test Case: 728 | Input/Output: [(55 53 86 -55) -55]
Test Case: 729 | Input/Output: [(-93 -70 -25 -18) -93]
Test Case: 730 | Input/Output: [(27 38 -23 29) -23]
Test Case: 731 | Input/Output: [(-44 7 -72 20) -72]
Test Case: 732 | Input/Output: [(80 72 -87 -91) -91]
Test Case: 733 | Input/Output: [(2 45 -47 18) -47]
Test Case: 734 | Input/Output: [(-75 -8 39 -56) -75]
Test Case: 735 | Input/Output: [(44 -7 -29 -81) -81]
Test Case: 736 | Input/Output: [(-20 48 -92 -20) -92]
Test Case: 737 | Input/Output: [(-82 1 -36 -22) -82]
Test Case: 738 | Input/Output: [(34 -22 -66 95) -66]
Test Case: 739 | Input/Output: [(75 -76 97 -51) -76]
Test Case: 740 | Input/Output: [(-92 48 -22 -82) -92]
Test Case: 741 | Input/Output: [(83 -95 73 29) -95]
Test Case: 742 | Input/Output: [(-88 62 2 31) -88]
Test Case: 743 | Input/Output: [(-5 74 72 13) -5]
Test Case: 744 | Input/Output: [(-35 -61 -83 9) -83]
Test Case: 745 | Input/Output: [(19 -52 90 -5) -52]
Test Case: 746 | Input/Output: [(-57 98 90 -90) -90]
Test Case: 747 | Input/Output: [(66 14 28 94) 14]
Test Case: 748 | Input/Output: [(-2 -35 -14 34) -35]
Test Case: 749 | Input/Output: [(-97 91 30 39) -97]
Test Case: 750 | Input/Output: [(-84 -43 32 38) -84]
Test Case: 751 | Input/Output: [(6 6 -18 -1) -18]
Test Case: 752 | Input/Output: [(-53 -83 -15 27) -83]
Test Case: 753 | Input/Output: [(-56 38 30 23) -56]
Test Case: 754 | Input/Output: [(9 48 43 -42) -42]
Test Case: 755 | Input/Output: [(29 27 -1 -93) -93]
Test Case: 756 | Input/Output: [(-5 73 87 79) -5]
Test Case: 757 | Input/Output: [(-66 80 14 100) -66]
Test Case: 758 | Input/Output: [(-81 8 -1 75) -81]
Test Case: 759 | Input/Output: [(-92 45 -97 63) -97]
Test Case: 760 | Input/Output: [(-36 -31 -80 75) -80]
Test Case: 761 | Input/Output: [(34 94 91 -34) -34]
Test Case: 762 | Input/Output: [(-37 73 7 75) -37]
Test Case: 763 | Input/Output: [(-86 -15 40 58) -86]
Test Case: 764 | Input/Output: [(67 59 -75 -98) -98]
Test Case: 765 | Input/Output: [(28 59 -5 27) -5]
Test Case: 766 | Input/Output: [(48 0 48 -24) -24]
Test Case: 767 | Input/Output: [(98 98 -51 48) -51]
Test Case: 768 | Input/Output: [(-98 -44 51 36) -98]
Test Case: 769 | Input/Output: [(-38 -78 -97 43) -97]
Test Case: 770 | Input/Output: [(-72 90 -15 -35) -72]
Test Case: 771 | Input/Output: [(-74 7 49 -91) -91]
Test Case: 772 | Input/Output: [(91 -69 16 5) -69]
Test Case: 773 | Input/Output: [(-19 -57 42 17) -57]
Test Case: 774 | Input/Output: [(-97 38 -57 21) -97]
Test Case: 775 | Input/Output: [(-49 -29 -69 -21) -69]
Test Case: 776 | Input/Output: [(-53 74 -24 47) -53]
Test Case: 777 | Input/Output: [(-12 -14 100 42) -14]
Test Case: 778 | Input/Output: [(2 79 62 45) 2]
Test Case: 779 | Input/Output: [(66 48 65 68) 48]
Test Case: 780 | Input/Output: [(-48 34 -3 0) -48]
Test Case: 781 | Input/Output: [(-39 46 -17 -59) -59]
Test Case: 782 | Input/Output: [(-94 -41 80 83) -94]
Test Case: 783 | Input/Output: [(52 -1 -40 1) -40]
Test Case: 784 | Input/Output: [(23 15 -18 -76) -76]
Test Case: 785 | Input/Output: [(-11 21 85 -21) -21]
Test Case: 786 | Input/Output: [(-71 22 33 50) -71]
Test Case: 787 | Input/Output: [(-78 38 61 80) -78]
Test Case: 788 | Input/Output: [(-63 -82 -63 40) -82]
Test Case: 789 | Input/Output: [(-48 84 -31 28) -48]
Test Case: 790 | Input/Output: [(14 -33 -19 10) -33]
Test Case: 791 | Input/Output: [(51 -24 90 -13) -24]
Test Case: 792 | Input/Output: [(-11 -84 -46 -19) -84]
Test Case: 793 | Input/Output: [(-16 -25 -24 46) -25]
Test Case: 794 | Input/Output: [(37 -37 61 88) -37]
Test Case: 795 | Input/Output: [(-70 61 55 -92) -92]
Test Case: 796 | Input/Output: [(21 90 -28 -33) -33]
Test Case: 797 | Input/Output: [(-46 -71 75 -9) -71]
Test Case: 798 | Input/Output: [(-10 8 82 97) -10]
Test Case: 799 | Input/Output: [(31 33 10 80) 10]
Test Case: 800 | Input/Output: [(6 2 -3 -55) -55]
Test Case: 801 | Input/Output: [(-14 14 4 62) -14]
Test Case: 802 | Input/Output: [(-58 -58 83 -7) -58]
Test Case: 803 | Input/Output: [(31 -90 75 4) -90]
Test Case: 804 | Input/Output: [(91 63 65 -56) -56]
Test Case: 805 | Input/Output: [(-88 -76 97 -59) -88]
Test Case: 806 | Input/Output: [(79 -44 25 -45) -45]
Test Case: 807 | Input/Output: [(4 91 -72 -83) -83]
Test Case: 808 | Input/Output: [(-1 -89 -89 60) -89]
Test Case: 809 | Input/Output: [(-77 -10 78 -18) -77]
Test Case: 810 | Input/Output: [(46 -75 32 27) -75]
Test Case: 811 | Input/Output: [(57 -97 88 65) -97]
Test Case: 812 | Input/Output: [(71 12 -64 -45) -64]
Test Case: 813 | Input/Output: [(-64 74 27 27) -64]
Test Case: 814 | Input/Output: [(-5 27 -35 11) -35]
Test Case: 815 | Input/Output: [(-9 88 47 -62) -62]
Test Case: 816 | Input/Output: [(-6 52 -99 90) -99]
Test Case: 817 | Input/Output: [(-13 89 -10 96) -13]
Test Case: 818 | Input/Output: [(-95 20 66 -30) -95]
Test Case: 819 | Input/Output: [(86 -96 7 -28) -96]
Test Case: 820 | Input/Output: [(-96 -60 -40 0) -96]
Test Case: 821 | Input/Output: [(-35 47 74 -92) -92]
Test Case: 822 | Input/Output: [(97 14 -34 62) -34]
Test Case: 823 | Input/Output: [(61 -97 100 5) -97]
Test Case: 824 | Input/Output: [(57 4 33 -68) -68]
Test Case: 825 | Input/Output: [(-6 74 18 -95) -95]
Test Case: 826 | Input/Output: [(-34 -44 49 -68) -68]
Test Case: 827 | Input/Output: [(-84 69 9 -80) -84]
Test Case: 828 | Input/Output: [(100 -50 -95 -85) -95]
Test Case: 829 | Input/Output: [(98 19 41 -96) -96]
Test Case: 830 | Input/Output: [(95 -32 25 1) -32]
Test Case: 831 | Input/Output: [(20 66 55 -43) -43]
Test Case: 832 | Input/Output: [(96 -9 100 -33) -33]
Test Case: 833 | Input/Output: [(-23 -51 62 -25) -51]
Test Case: 834 | Input/Output: [(-31 -54 -97 98) -97]
Test Case: 835 | Input/Output: [(79 -69 50 -13) -69]
Test Case: 836 | Input/Output: [(-80 14 -88 13) -88]
Test Case: 837 | Input/Output: [(58 98 -37 -70) -70]
Test Case: 838 | Input/Output: [(53 -8 -41 -96) -96]
Test Case: 839 | Input/Output: [(-5 49 -25 84) -25]
Test Case: 840 | Input/Output: [(-7 -67 19 46) -67]
Test Case: 841 | Input/Output: [(37 -21 -27 97) -27]
Test Case: 842 | Input/Output: [(-87 26 -60 21) -87]
Test Case: 843 | Input/Output: [(-53 89 -64 84) -64]
Test Case: 844 | Input/Output: [(26 81 -82 -17) -82]
Test Case: 845 | Input/Output: [(-53 12 49 88) -53]
Test Case: 846 | Input/Output: [(53 -68 44 -12) -68]
Test Case: 847 | Input/Output: [(-47 -87 71 60) -87]
Test Case: 848 | Input/Output: [(-48 -56 -19 26) -56]
Test Case: 849 | Input/Output: [(56 -16 -32 1) -32]
Test Case: 850 | Input/Output: [(39 52 -53 -9) -53]
Test Case: 851 | Input/Output: [(16 -41 -62 -88) -88]
Test Case: 852 | Input/Output: [(57 71 1 73) 1]
Test Case: 853 | Input/Output: [(-94 -63 -87 -33) -94]
Test Case: 854 | Input/Output: [(-17 94 -53 44) -53]
Test Case: 855 | Input/Output: [(7 97 70 -38) -38]
Test Case: 856 | Input/Output: [(75 -48 27 57) -48]
Test Case: 857 | Input/Output: [(-14 -89 14 -10) -89]
Test Case: 858 | Input/Output: [(83 -61 23 60) -61]
Test Case: 859 | Input/Output: [(78 62 56 -83) -83]
Test Case: 860 | Input/Output: [(-76 29 -65 71) -76]
Test Case: 861 | Input/Output: [(-19 35 -59 -90) -90]
Test Case: 862 | Input/Output: [(-85 2 50 -83) -85]
Test Case: 863 | Input/Output: [(-17 -23 84 100) -23]
Test Case: 864 | Input/Output: [(85 16 -40 -63) -63]
Test Case: 865 | Input/Output: [(-81 38 64 -48) -81]
Test Case: 866 | Input/Output: [(-100 80 59 -29) -100]
Test Case: 867 | Input/Output: [(27 -53 -19 -91) -91]
Test Case: 868 | Input/Output: [(-6 26 -63 76) -63]
Test Case: 869 | Input/Output: [(-35 86 61 -47) -47]
Test Case: 870 | Input/Output: [(36 21 -45 2) -45]
Test Case: 871 | Input/Output: [(-53 67 22 -99) -99]
Test Case: 872 | Input/Output: [(-62 -34 52 98) -62]
Test Case: 873 | Input/Output: [(64 -60 41 -59) -60]
Test Case: 874 | Input/Output: [(-79 57 76 76) -79]
Test Case: 875 | Input/Output: [(41 -81 -65 11) -81]
Test Case: 876 | Input/Output: [(25 -34 -39 -12) -39]
Test Case: 877 | Input/Output: [(-100 -97 -28 -13) -100]
Test Case: 878 | Input/Output: [(-23 -72 33 -63) -72]
Test Case: 879 | Input/Output: [(77 -38 85 -72) -72]
Test Case: 880 | Input/Output: [(86 8 -56 -25) -56]
Test Case: 881 | Input/Output: [(-3 -99 -18 89) -99]
Test Case: 882 | Input/Output: [(-61 89 -69 46) -69]
Test Case: 883 | Input/Output: [(-33 -1 86 -41) -41]
Test Case: 884 | Input/Output: [(92 66 84 80) 66]
Test Case: 885 | Input/Output: [(-66 31 -4 76) -66]
Test Case: 886 | Input/Output: [(-34 93 -99 -80) -99]
Test Case: 887 | Input/Output: [(56 -62 8 -95) -95]
Test Case: 888 | Input/Output: [(-45 -88 -39 -85) -88]
Test Case: 889 | Input/Output: [(-94 12 97 70) -94]
Test Case: 890 | Input/Output: [(79 33 86 -99) -99]
Test Case: 891 | Input/Output: [(-21 -34 -91 -82) -91]
Test Case: 892 | Input/Output: [(33 7 -66 100) -66]
Test Case: 893 | Input/Output: [(28 -74 95 62) -74]
Test Case: 894 | Input/Output: [(79 9 -8 22) -8]
Test Case: 895 | Input/Output: [(-85 -57 -7 50) -85]
Test Case: 896 | Input/Output: [(1 -100 10 15) -100]
Test Case: 897 | Input/Output: [(-57 -12 26 18) -57]
Test Case: 898 | Input/Output: [(-41 -13 83 30) -41]
Test Case: 899 | Input/Output: [(18 -65 -13 -8) -65]
Test Case: 900 | Input/Output: [(-23 -78 -87 -34) -87]
Test Case: 901 | Input/Output: [(30 -76 -85 -7) -85]
Test Case: 902 | Input/Output: [(-83 30 5 47) -83]
Test Case: 903 | Input/Output: [(71 27 -86 28) -86]
Test Case: 904 | Input/Output: [(-24 -94 62 12) -94]
Test Case: 905 | Input/Output: [(-100 -65 -98 -1) -100]
Test Case: 906 | Input/Output: [(36 43 56 41) 36]
Test Case: 907 | Input/Output: [(53 29 -100 18) -100]
Test Case: 908 | Input/Output: [(52 -4 32 -97) -97]
Test Case: 909 | Input/Output: [(93 54 12 14) 12]
Test Case: 910 | Input/Output: [(93 82 6 -42) -42]
Test Case: 911 | Input/Output: [(-19 -33 -95 34) -95]
Test Case: 912 | Input/Output: [(-60 6 -37 -40) -60]
Test Case: 913 | Input/Output: [(96 -46 46 26) -46]
Test Case: 914 | Input/Output: [(-76 38 51 22) -76]
Test Case: 915 | Input/Output: [(13 19 -19 71) -19]
Test Case: 916 | Input/Output: [(-77 95 -78 -84) -84]
Test Case: 917 | Input/Output: [(23 -18 14 -62) -62]
Test Case: 918 | Input/Output: [(99 35 -52 -92) -92]
Test Case: 919 | Input/Output: [(-1 -33 72 64) -33]
Test Case: 920 | Input/Output: [(-76 -14 90 -85) -85]
Test Case: 921 | Input/Output: [(-88 24 -23 -81) -88]
Test Case: 922 | Input/Output: [(-46 -87 99 -5) -87]
Test Case: 923 | Input/Output: [(-8 52 69 16) -8]
Test Case: 924 | Input/Output: [(55 -15 -38 94) -38]
Test Case: 925 | Input/Output: [(-8 -73 -26 -67) -73]
Test Case: 926 | Input/Output: [(65 -100 99 3) -100]
Test Case: 927 | Input/Output: [(-4 77 23 -89) -89]
Test Case: 928 | Input/Output: [(71 74 -28 -41) -41]
Test Case: 929 | Input/Output: [(38 23 87 -23) -23]
Test Case: 930 | Input/Output: [(-12 62 55 -29) -29]
Test Case: 931 | Input/Output: [(84 53 90 -93) -93]
Test Case: 932 | Input/Output: [(-24 14 -80 -13) -80]
Test Case: 933 | Input/Output: [(98 -31 25 -45) -45]
Test Case: 934 | Input/Output: [(-1 -61 37 -55) -61]
Test Case: 935 | Input/Output: [(1 78 86 -7) -7]
Test Case: 936 | Input/Output: [(78 26 -100 -14) -100]
Test Case: 937 | Input/Output: [(-50 -100 56 18) -100]
Test Case: 938 | Input/Output: [(-17 -45 38 -59) -59]
Test Case: 939 | Input/Output: [(78 25 49 -67) -67]
Test Case: 940 | Input/Output: [(-82 -57 -98 -28) -98]
Test Case: 941 | Input/Output: [(-31 87 -88 6) -88]
Test Case: 942 | Input/Output: [(-92 -24 -69 60) -92]
Test Case: 943 | Input/Output: [(-59 74 59 -54) -59]
Test Case: 944 | Input/Output: [(92 -75 96 -59) -75]
Test Case: 945 | Input/Output: [(-31 -4 90 13) -31]
Test Case: 946 | Input/Output: [(-50 -15 -60 100) -60]
Test Case: 947 | Input/Output: [(32 91 89 48) 32]
Test Case: 948 | Input/Output: [(-17 98 -73 89) -73]
Test Case: 949 | Input/Output: [(71 61 -96 -34) -96]
Test Case: 950 | Input/Output: [(16 -95 4 -89) -95]
Test Case: 951 | Input/Output: [(-51 -42 55 -46) -51]
Test Case: 952 | Input/Output: [(62 -77 -19 -5) -77]
Test Case: 953 | Input/Output: [(-28 82 -85 88) -85]
Test Case: 954 | Input/Output: [(45 -5 -86 -42) -86]
Test Case: 955 | Input/Output: [(2 -53 59 0) -53]
Test Case: 956 | Input/Output: [(34 -95 -38 -35) -95]
Test Case: 957 | Input/Output: [(10 65 71 -49) -49]
Test Case: 958 | Input/Output: [(-28 -10 55 -41) -41]
Test Case: 959 | Input/Output: [(6 -11 41 -34) -34]
Test Case: 960 | Input/Output: [(30 82 100 31) 30]
Test Case: 961 | Input/Output: [(97 -47 11 15) -47]
Test Case: 962 | Input/Output: [(71 42 -49 35) -49]
Test Case: 963 | Input/Output: [(15 71 62 -71) -71]
Test Case: 964 | Input/Output: [(-79 17 86 -37) -79]
Test Case: 965 | Input/Output: [(-15 -53 -27 -97) -97]
Test Case: 966 | Input/Output: [(-42 99 70 -17) -42]
Test Case: 967 | Input/Output: [(-60 -14 -22 98) -60]
Test Case: 968 | Input/Output: [(98 -78 65 -21) -78]
Test Case: 969 | Input/Output: [(-82 46 88 25) -82]
Test Case: 970 | Input/Output: [(-66 -81 16 -71) -81]
Test Case: 971 | Input/Output: [(-44 -43 94 -88) -88]
Test Case: 972 | Input/Output: [(100 -65 12 66) -65]
Test Case: 973 | Input/Output: [(-88 71 -22 18) -88]
Test Case: 974 | Input/Output: [(-64 94 -21 100) -64]
Test Case: 975 | Input/Output: [(-12 66 9 -83) -83]
Test Case: 976 | Input/Output: [(-32 65 -100 89) -100]
Test Case: 977 | Input/Output: [(-67 -11 -97 94) -97]
Test Case: 978 | Input/Output: [(-74 77 -98 -26) -98]
Test Case: 979 | Input/Output: [(38 93 58 -19) -19]
Test Case: 980 | Input/Output: [(9 -39 64 -78) -78]
Test Case: 981 | Input/Output: [(-68 -79 66 -6) -79]
Test Case: 982 | Input/Output: [(34 22 -36 8) -36]
Test Case: 983 | Input/Output: [(-83 42 -18 -21) -83]
Test Case: 984 | Input/Output: [(-13 -63 23 63) -63]
Test Case: 985 | Input/Output: [(-99 -31 76 11) -99]
Test Case: 986 | Input/Output: [(-48 4 -72 10) -72]
Test Case: 987 | Input/Output: [(-16 53 87 -31) -31]
Test Case: 988 | Input/Output: [(-28 -77 -56 -35) -77]
Test Case: 989 | Input/Output: [(60 -61 11 -31) -61]
Test Case: 990 | Input/Output: [(18 20 51 -55) -55]
Test Case: 991 | Input/Output: [(79 28 66 -74) -74]
Test Case: 992 | Input/Output: [(-72 42 59 -85) -85]
Test Case: 993 | Input/Output: [(59 -2 -61 -68) -68]
Test Case: 994 | Input/Output: [(-64 -52 32 -15) -64]
Test Case: 995 | Input/Output: [(-49 82 28 45) -49]
Test Case: 996 | Input/Output: [(-45 0 92 -15) -45]
Test Case: 997 | Input/Output: [(93 65 54 27) 27]
Test Case: 998 | Input/Output: [(-5 84 79 -49) -49]
Test Case: 999 | Input/Output: [(50 93 30 53) 30]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 24 48 -16 24 66 -11 34 112 -43 108 112 -97 1 125 -40 21
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[69 3 3 3] 3] [[-51 44 44 44] -51] [[-90 -90 -90 67] -90] [[97 -8 97 97] -8] [[80 80 80 77] 77] [[92 58 92 92] 58] [[36 -37 -37 -37] -37] [[36 -90 36 36] -90] [[23 23 45 23] 23] [[94 -63 -63 -63] -63] [(-84 -84 -84 -84) -84] [(-43 -43 -43 -43) -43] [(46 46 46 46) 46] [(-86 -86 -86 -86) -86] [(62 62 62 62) 62] [(81 35 69 67) 35] [(35 96 12 63) 12] [(66 88 97 14) 14] [(78 48 22 15) 15] [(71 87 23 72) 23] [(65 38 30 70) 30] [(3 39 34 67) 3] [(50 78 32 95) 32] [(92 37 41 82) 37] [(1 33 64 90) 1] [(100 38 11 67) 11] [(92 28 62 14) 14] [(88 85 44 24) 24] [(84 1 86 100) 1] [(54 84 23 50) 23] [(75 59 69 11) 11] [(58 92 30 27) 27] [(4 3 98 75) 3] [(33 25 51 83) 25] [(100 14 0 54) 0] [(83 82 -65 -66) -66] [(-95 -78 -13 78) -95] [(3 22 63 37) 3] [(14 42 -95 8) -95] [(45 -57 84 -27) -57] [(25 -82 88 11) -82] [(-81 93 -13 96) -81] [(49 81 38 -20) -20] [(-100 -60 -63 -18) -100] [(-36 -38 -84 51) -84] [(-64 -68 31 -38) -68] [(3 51 -72 -23) -72] [(52 81 34 -88) -88] [(-16 -93 10 10) -93] [(-63 32 66 65) -63] [(-66 33 -38 -17) -66] [(-99 49 30 -66) -99] [(14 87 73 13) 13] [(-65 -4 -70 21) -70] [(54 -62 -79 78) -79] [(-69 82 -37 11) -69] [(-6 89 71 -92) -92] [(-36 -77 12 -71) -77] [(29 23 62 -21) -21] [(57 18 13 -8) -8] [(47 -42 -89 7) -89] [(-4 -91 -39 63) -91] [(93 49 -52 51) -52] [(33 -56 31 -40) -56] [(-100 75 -52 67) -100] [(7 -6 -82 40) -82] [(73 58 -96 100) -96] [(60 -41 17 50) -41] [(56 70 88 -1) -1] [(-33 34 33 -72) -72] [(83 55 38 100) 38] [(-25 -73 52 -46) -73] [(-88 -19 -37 -9) -88] [(32 2 -100 19) -100] [(-19 11 -63 -18) -63] [(80 1 96 81) 1] [(64 -7 25 -98) -98] [(-70 97 61 66) -70] [(-64 16 -70 18) -70] [(-25 93 19 -69) -69] [(98 -83 36 -58) -83] [(24 11 60 52) 11] [(-27 49 -46 100) -46] [(-28 -8 -92 -63) -92] [(41 -18 -93 -36) -93] [(86 -35 1 -60) -60] [(-89 77 -25 -91) -91] [(43 -47 -58 -36) -58] [(66 -11 -19 -79) -79] [(-89 -46 48 54) -89] [(-51 -73 70 -57) -73] [(-84 65 3 -8) -84] [(-37 -89 51 78) -89] [(-73 27 50 73) -73] [(22 -25 38 -87) -87])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 67                 
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 77                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 67                 
Correct output: 12                  | Program output: 63                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 72                 
Correct output: 30                  | Program output: 70                 
Correct output: 3                   | Program output: 67                 
Correct output: 32                  | Program output: 95                 
Correct output: 37                  | Program output: 82                 
Correct output: 1                   | Program output: 90                 
Correct output: 11                  | Program output: 67                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 100                
Correct output: 23                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 75                 
Correct output: 25                  | Program output: 83                 
Correct output: 0                   | Program output: 54                 
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: 78                 
Correct output: 3                   | Program output: 37                 
Correct output: -95                 | Program output: 8                  
Correct output: -57                 | Program output: -27                
Correct output: -82                 | Program output: 11                 
Correct output: -81                 | Program output: 96                 
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -18                
Correct output: -84                 | Program output: 51                 
Correct output: -68                 | Program output: -38                
Correct output: -72                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: 10                 
Correct output: -63                 | Program output: 65                 
Correct output: -66                 | Program output: -17                
Correct output: -99                 | Program output: -66                
Correct output: 13                  | Program output: 13                 
Correct output: -70                 | Program output: 21                 
Correct output: -79                 | Program output: 78                 
Correct output: -69                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -8                  | Program output: -8                 
Correct output: -89                 | Program output: 7                  
Correct output: -91                 | Program output: 63                 
Correct output: -52                 | Program output: 51                 
Correct output: -56                 | Program output: -40                
Correct output: -100                | Program output: 67                 
Correct output: -82                 | Program output: 40                 
Correct output: -96                 | Program output: 100                
Correct output: -41                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -72                 | Program output: -72                
Correct output: 38                  | Program output: 100                
Correct output: -73                 | Program output: -46                
Correct output: -88                 | Program output: -9                 
Correct output: -100                | Program output: 19                 
Correct output: -63                 | Program output: -18                
Correct output: 1                   | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 66                 
Correct output: -70                 | Program output: 18                 
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -58                
Correct output: 11                  | Program output: 52                 
Correct output: -46                 | Program output: 100                
Correct output: -92                 | Program output: -63                
Correct output: -93                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: 54                 
Correct output: -73                 | Program output: -57                
Correct output: -84                 | Program output: -8                 
Correct output: -89                 | Program output: 78                 
Correct output: -73                 | Program output: 73                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction tagged_52} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_boolean_714} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty})
Lexicase best program: (integer_sub exec_dup (exec_k_when_autoconstructing (print_integer) (integer_lt integer_swap boolean_dup)) integer_lte exec_dup (integer_pop) integer_gt exec_if (exec_s_when_autoconstructing (in1 boolean_dup_items exec_k_when_autoconstructing (exec_when () exec_eq exec_rot () (integer_gte boolean_flush boolean_invert_second_then_and) (boolean_yankdup exec_yank exec_noop exec_do*count (boolean_empty in4 exec_stackdepth integer_add integer_add boolean_shove) exec_do*times (boolean_dup_items boolean_shove integer_dup in4 boolean_eq) print_integer exec_dup_items) in1 integer_mod exec_do*while (integer_fromboolean print_boolean) exec_do*times () tagged_52 in1) (exec_k_when_autoconstructing (integer_dec) (integer_dup_items boolean_stackdepth exec_rot () (integer_shove exec_swap () (integer_max exec_dup (integer_eq exec_empty)) integer_div boolean_empty) (exec_do*range () integer_dup_times tag_boolean_714) integer_yank) in2) exec_flush) (boolean_flush boolean_invert_first_then_and exec_if () (boolean_yank integer_empty)) ()) ())
Lexicase best errors: [0 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 103
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction tagged_52} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_boolean_714} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty})
Zero cases best program: (integer_sub exec_dup (exec_k_when_autoconstructing (print_integer) (integer_lt integer_swap boolean_dup)) integer_lte exec_dup (integer_pop) integer_gt exec_if (exec_s_when_autoconstructing (in1 boolean_dup_items exec_k_when_autoconstructing (exec_when () exec_eq exec_rot () (integer_gte boolean_flush boolean_invert_second_then_and) (boolean_yankdup exec_yank exec_noop exec_do*count (boolean_empty in4 exec_stackdepth integer_add integer_add boolean_shove) exec_do*times (boolean_dup_items boolean_shove integer_dup in4 boolean_eq) print_integer exec_dup_items) in1 integer_mod exec_do*while (integer_fromboolean print_boolean) exec_do*times () tagged_52 in1) (exec_k_when_autoconstructing (integer_dec) (integer_dup_items boolean_stackdepth exec_rot () (integer_shove exec_swap () (integer_max exec_dup (integer_eq exec_empty)) integer_div boolean_empty) (exec_do*range () integer_dup_times tag_boolean_714) integer_yank) in2) exec_flush) (boolean_flush boolean_invert_first_then_and exec_if () (boolean_yank integer_empty)) ()) ())
Zero cases best errors: [0 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 103
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 2 5 3 4 2 4 5 4 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 2 5 3 4 2 4 5 4 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction tagged_682} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max})
Best program: (in4 print_integer boolean_invert_second_then_and exec_rot (exec_dup_items exec_eq exec_k_when_autoconstructing () (integer_mod exec_do*times (in1 tagged_682 boolean_shove integer_eq boolean_invert_second_then_and) integer_yankdup in1 exec_k_when_autoconstructing (in4 boolean_yank integer_dup integer_mult) (exec_do*count (integer_swap integer_dup integer_min exec_do*count (exec_rot (exec_y_when_autoconstructing () integer_yank) (integer_inc exec_do*while () exec_dup_times (exec_eq) integer_pop exec_empty in4 exec_if () (integer_rot boolean_rot) exec_do*count () exec_empty integer_max) ()))))) () ())
Errors: [0 1 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 62
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 9.964
Median total errors in population: 10
Error averages by case: (0.996 0.998 0.995 0.997 0.996 0.998 0.996 0.995 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.279
Average program size in population (points): 69.494
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 513038
--- Timings ---
Current time: 1559593828111 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 29.0%
Fitness Testing:      1.8 seconds, 67.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 67                 
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 77                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 67                 
Correct output: 12                  | Program output: 63                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 72                 
Correct output: 30                  | Program output: 70                 
Correct output: 3                   | Program output: 67                 
Correct output: 32                  | Program output: 95                 
Correct output: 37                  | Program output: 82                 
Correct output: 1                   | Program output: 90                 
Correct output: 11                  | Program output: 67                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 100                
Correct output: 23                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 75                 
Correct output: 25                  | Program output: 83                 
Correct output: 0                   | Program output: 54                 
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: 78                 
Correct output: 3                   | Program output: 37                 
Correct output: -95                 | Program output: 8                  
Correct output: -57                 | Program output: -27                
Correct output: -82                 | Program output: 11                 
Correct output: -81                 | Program output: 96                 
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -18                
Correct output: -84                 | Program output: 51                 
Correct output: -68                 | Program output: -38                
Correct output: -72                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: 10                 
Correct output: -63                 | Program output: 65                 
Correct output: -66                 | Program output: -17                
Correct output: -99                 | Program output: -66                
Correct output: 13                  | Program output: 13                 
Correct output: -70                 | Program output: 21                 
Correct output: -79                 | Program output: 78                 
Correct output: -69                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -8                  | Program output: -8                 
Correct output: -89                 | Program output: 7                  
Correct output: -91                 | Program output: 63                 
Correct output: -52                 | Program output: 51                 
Correct output: -56                 | Program output: -40                
Correct output: -100                | Program output: 67                 
Correct output: -82                 | Program output: 40                 
Correct output: -96                 | Program output: 100                
Correct output: -41                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -72                 | Program output: -72                
Correct output: 38                  | Program output: 100                
Correct output: -73                 | Program output: -46                
Correct output: -88                 | Program output: -9                 
Correct output: -100                | Program output: 19                 
Correct output: -63                 | Program output: -18                
Correct output: 1                   | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 66                 
Correct output: -70                 | Program output: 18                 
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -58                
Correct output: 11                  | Program output: 52                 
Correct output: -46                 | Program output: 100                
Correct output: -92                 | Program output: -63                
Correct output: -93                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: 54                 
Correct output: -73                 | Program output: -57                
Correct output: -84                 | Program output: -8                 
Correct output: -89                 | Program output: 78                 
Correct output: -73                 | Program output: 73                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_52} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_boolean_714} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty})
Lexicase best program: (exec_dup (exec_k_when_autoconstructing (print_integer) (integer_swap boolean_dup)) integer_lte exec_dup (integer_pop) integer_gt exec_if (exec_noop exec_s_when_autoconstructing (in1 boolean_dup_items exec_k_when_autoconstructing (exec_when () exec_eq exec_rot () (integer_gte exec_y_when_autoconstructing (boolean_flush boolean_invert_second_then_and) boolean_yankdup exec_yank exec_noop exec_do*count (integer_lte) boolean_empty in4 exec_stackdepth integer_add integer_add boolean_shove) (exec_do*times (boolean_dup_items boolean_shove integer_dup in4 print_integer exec_dup_items) in1 integer_mod exec_do*while (integer_fromboolean print_boolean) tagged_52 in1) exec_k_when_autoconstructing (integer_dec) (integer_dup_items boolean_stackdepth exec_rot () (integer_div) (integer_shove exec_swap () (integer_max exec_do*while () exec_dup (exec_empty)) integer_div boolean_empty) exec_do*range () integer_dup_times tag_boolean_714) integer_yank) (in2) exec_flush) (boolean_flush boolean_invert_first_then_and exec_if () (boolean_yank integer_empty)) ()) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 104
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_52} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_boolean_714} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty})
Zero cases best program: (exec_dup (exec_k_when_autoconstructing (print_integer) (integer_swap boolean_dup)) integer_lte exec_dup (integer_pop) integer_gt exec_if (exec_noop exec_s_when_autoconstructing (in1 boolean_dup_items exec_k_when_autoconstructing (exec_when () exec_eq exec_rot () (integer_gte exec_y_when_autoconstructing (boolean_flush boolean_invert_second_then_and) boolean_yankdup exec_yank exec_noop exec_do*count (integer_lte) boolean_empty in4 exec_stackdepth integer_add integer_add boolean_shove) (exec_do*times (boolean_dup_items boolean_shove integer_dup in4 print_integer exec_dup_items) in1 integer_mod exec_do*while (integer_fromboolean print_boolean) tagged_52 in1) exec_k_when_autoconstructing (integer_dec) (integer_dup_items boolean_stackdepth exec_rot () (integer_div) (integer_shove exec_swap () (integer_max exec_do*while () exec_dup (exec_empty)) integer_div boolean_empty) exec_do*range () integer_dup_times tag_boolean_714) integer_yank) (in2) exec_flush) (boolean_flush boolean_invert_first_then_and exec_if () (boolean_yank integer_empty)) ()) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 104
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 288 288 1 130 287 1 411 1 109)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (130 288 288 1 130 287 1 411 1 109)
Population mean number of perfect (error zero) cases: 1.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction tagged_682} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max})
Best program: (in4 print_integer boolean_invert_second_then_and exec_rot (exec_dup_items exec_eq exec_k_when_autoconstructing () (integer_mod exec_do*times (in1 tagged_682 integer_gte boolean_shove integer_eq boolean_invert_second_then_and) integer_yankdup in1 exec_k_when_autoconstructing (boolean_invert_second_then_and in4 boolean_yank integer_dup integer_mult) (exec_do*count (integer_swap integer_dup integer_min exec_do*count (exec_rot (exec_y_when_autoconstructing () integer_yank) (integer_inc exec_do*while () exec_dup_times (exec_eq) exec_empty in4 exec_if () (integer_rot boolean_rot) exec_do*count () integer_fromboolean) (exec_empty integer_max)))))) () ())
Errors: [1 0 0 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 44
Size: 64
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 8.354
Median total errors in population: 9
Error averages by case: (0.87 0.712 0.712 0.999 0.87 0.713 0.999 0.589 0.999 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.893
Average program size in population (points): 89.299
Average percent parens in population: 0.264
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1229085
--- Timings ---
Current time: 1559593830783 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         1.7 seconds, 32.2%
Fitness Testing:      2.7 seconds, 50.5%
Report:               0.8 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 45                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 69                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 97                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 1                   | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 62                 
Correct output: 24                  | Program output: 44                 
Correct output: 1                   | Program output: 86                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 69                 
Correct output: 27                  | Program output: 30                 
Correct output: 3                   | Program output: 98                 
Correct output: 25                  | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: -66                 | Program output: -65                
Correct output: -95                 | Program output: -13                
Correct output: 3                   | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 84                 
Correct output: -82                 | Program output: 88                 
Correct output: -81                 | Program output: -13                
Correct output: -20                 | Program output: 38                 
Correct output: -100                | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: 34                 
Correct output: -93                 | Program output: 10                 
Correct output: -63                 | Program output: 66                 
Correct output: -66                 | Program output: -38                
Correct output: -99                 | Program output: 30                 
Correct output: 13                  | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -37                
Correct output: -92                 | Program output: 71                 
Correct output: -77                 | Program output: 12                 
Correct output: -21                 | Program output: 62                 
Correct output: -8                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 31                 
Correct output: -100                | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 17                 
Correct output: -1                  | Program output: 88                 
Correct output: -72                 | Program output: 33                 
Correct output: 38                  | Program output: 38                 
Correct output: -73                 | Program output: 52                 
Correct output: -88                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 96                 
Correct output: -98                 | Program output: 25                 
Correct output: -70                 | Program output: 61                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 19                 
Correct output: -83                 | Program output: 36                 
Correct output: 11                  | Program output: 60                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: -60                 | Program output: 1                  
Correct output: -91                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -79                 | Program output: -19                
Correct output: -89                 | Program output: 48                 
Correct output: -73                 | Program output: 70                 
Correct output: -84                 | Program output: 3                  
Correct output: -89                 | Program output: 51                 
Correct output: -73                 | Program output: 50                 
Correct output: -87                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_610} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when})
Lexicase best program: (in3 print_integer integer_yank integer_shove boolean_swap integer_eq exec_dup (boolean_invert_second_then_and integer_mod integer_pop boolean_swap) boolean_or boolean_or exec_do*range (boolean_or integer_rot integer_sub in1 exec_pop (exec_stackdepth boolean_invert_second_then_and boolean_pop) exec_flush boolean_swap print_exec (integer_mod boolean_xor integer_yank) exec_dup (boolean_frominteger boolean_or exec_pop (integer_div integer_dup) exec_k (in2 boolean_swap) (integer_pop integer_shove integer_div tagged_610 boolean_yankdup) boolean_dup integer_rot exec_do*while (integer_dup exec_when ()))))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_610} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when})
Zero cases best program: (in3 print_integer integer_yank integer_shove boolean_swap integer_eq exec_dup (boolean_invert_second_then_and integer_mod integer_pop boolean_swap) boolean_or boolean_or exec_do*range (boolean_or integer_rot integer_sub in1 exec_pop (exec_stackdepth boolean_invert_second_then_and boolean_pop) exec_flush boolean_swap print_exec (integer_mod boolean_xor integer_yank) exec_dup (boolean_frominteger boolean_or exec_pop (integer_div integer_dup) exec_k (in2 boolean_swap) (integer_pop integer_shove integer_div tagged_610 boolean_yankdup) boolean_dup integer_rot exec_do*while (integer_dup exec_when ()))))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 110 62 66 537 163 114 164 189 532)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (164 110 62 66 537 163 114 164 189 532)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_610} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when})
Best program: (boolean_rot in3 print_integer integer_shove exec_yankdup exec_dup (boolean_invert_second_then_and integer_mod integer_pop exec_rot (boolean_swap) () (boolean_or boolean_or exec_if (exec_do*range (boolean_or integer_rot integer_stackdepth) exec_eq) (integer_div integer_sub in1 exec_pop (boolean_invert_second_then_and exec_flush print_exec (exec_eq) integer_mod boolean_xor integer_yank) boolean_frominteger integer_div exec_pop (integer_div integer_dup) exec_k (in2 boolean_swap) (boolean_dup_items integer_div integer_lt) tagged_610 boolean_yankdup) boolean_dup integer_rot integer_gt) exec_do*while (integer_dup integer_rot) exec_when ()))
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 65
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.899
Median total errors in population: 7
Error averages by case: (0.836 0.89 0.938 0.934 0.463 0.837 0.886 0.836 0.811 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.491
Average program size in population (points): 95.671
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1950139
--- Timings ---
Current time: 1559593833343 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.0 seconds, 36.3%
Fitness Testing:      3.6 seconds, 43.2%
Report:               1.6 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 69                 
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: 36                 
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 81                 
Correct output: 12                  | Program output: 35                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 78                 
Correct output: 23                  | Program output: 71                 
Correct output: 30                  | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 50                 
Correct output: 37                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 100                
Correct output: 14                  | Program output: 92                 
Correct output: 24                  | Program output: 88                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 54                 
Correct output: 11                  | Program output: 75                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 100                
Correct output: -66                 | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 14                 
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -36                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: 3                  
Correct output: -88                 | Program output: 52                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -65                
Correct output: -79                 | Program output: 54                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 57                 
Correct output: -89                 | Program output: 47                 
Correct output: -91                 | Program output: -4                 
Correct output: -52                 | Program output: 93                 
Correct output: -56                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: 7                  
Correct output: -96                 | Program output: 73                 
Correct output: -41                 | Program output: 60                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 83                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 32                 
Correct output: -63                 | Program output: -19                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 64                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -64                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 98                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -27                
Correct output: -92                 | Program output: -28                
Correct output: -93                 | Program output: 41                 
Correct output: -60                 | Program output: 86                 
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: 43                 
Correct output: -79                 | Program output: 66                 
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_mult} {:close 1, :instruction tagged_96} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3})
Lexicase best program: (boolean_eq integer_dup_items integer_gt boolean_pop integer_rot exec_shove (in1 print_integer exec_rot (boolean_stackdepth exec_y (integer_empty exec_dup_times (exec_while () boolean_yank boolean_dup_times boolean_shove exec_y () exec_shove (integer_gte boolean_pop exec_swap (integer_gte integer_dup_items in1) (exec_dup_items exec_while () integer_div exec_s (exec_do*while (exec_do*count (boolean_or) integer_shove) boolean_not integer_empty) (boolean_invert_second_then_and) () boolean_or boolean_pop boolean_dup integer_max integer_mult)) tagged_96) integer_sub exec_while (boolean_invert_second_then_and integer_gte exec_swap (boolean_eq in1) (boolean_dup)) exec_do*while () boolean_yank integer_dup_items) exec_do*times (exec_while (exec_noop integer_inc boolean_dup_items in3))) () ()))
Lexicase best errors: [1 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 83
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_mult} {:close 1, :instruction tagged_96} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3})
Zero cases best program: (boolean_eq integer_dup_items integer_gt boolean_pop integer_rot exec_shove (in1 print_integer exec_rot (boolean_stackdepth exec_y (integer_empty exec_dup_times (exec_while () boolean_yank boolean_dup_times boolean_shove exec_y () exec_shove (integer_gte boolean_pop exec_swap (integer_gte integer_dup_items in1) (exec_dup_items exec_while () integer_div exec_s (exec_do*while (exec_do*count (boolean_or) integer_shove) boolean_not integer_empty) (boolean_invert_second_then_and) () boolean_or boolean_pop boolean_dup integer_max integer_mult)) tagged_96) integer_sub exec_while (boolean_invert_second_then_and integer_gte exec_swap (boolean_eq in1) (boolean_dup)) exec_do*while () boolean_yank integer_dup_items) exec_do*times (exec_while (exec_noop integer_inc boolean_dup_items in3))) () ()))
Zero cases best errors: [1 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 83
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 258 174 173 173 79 253 259 93 80)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (260 258 174 173 173 79 253 259 93 80)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_771} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_swap})
Best program: (boolean_eq integer_gt integer_rot integer_eq exec_pop () exec_shove (exec_dup_items in1 print_integer exec_y (exec_dup_times (boolean_rot integer_flush exec_y () integer_min integer_gte boolean_pop exec_swap (boolean_dup_times boolean_not) (exec_dup_items exec_do*count (exec_do*while (boolean_or) exec_dup_times (exec_if () (integer_min exec_if () (integer_inc in3 integer_empty) boolean_or exec_swap () (exec_k (exec_s (boolean_pop integer_empty exec_while (boolean_invert_second_then_and integer_mult) integer_lt) (integer_gte boolean_eq in1) (exec_do*while () boolean_yank tag_integer_771 exec_noop boolean_invert_first_then_and integer_inc in3) exec_swap () ()) ())))))))))
Errors: [1 1 0 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 52
Size: 78
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.198
Median total errors in population: 7
Error averages by case: (0.74 0.742 0.826 0.827 0.827 0.921 0.747 0.741 0.907 0.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.1
Average program size in population (points): 92.394
Average percent parens in population: 0.239
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2538146
--- Timings ---
Current time: 1559593835877 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.2 seconds, 39.8%
Fitness Testing:      4.3 seconds, 40.6%
Report:               2.0 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 67                 
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 77                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 67                 
Correct output: 12                  | Program output: 63                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 72                 
Correct output: 30                  | Program output: 70                 
Correct output: 3                   | Program output: 67                 
Correct output: 32                  | Program output: 95                 
Correct output: 37                  | Program output: 82                 
Correct output: 1                   | Program output: 90                 
Correct output: 11                  | Program output: 67                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 100                
Correct output: 23                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 75                 
Correct output: 25                  | Program output: 83                 
Correct output: 0                   | Program output: 54                 
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: 78                 
Correct output: 3                   | Program output: 37                 
Correct output: -95                 | Program output: 8                  
Correct output: -57                 | Program output: -27                
Correct output: -82                 | Program output: 11                 
Correct output: -81                 | Program output: 96                 
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -18                
Correct output: -84                 | Program output: 51                 
Correct output: -68                 | Program output: -38                
Correct output: -72                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: 10                 
Correct output: -63                 | Program output: 65                 
Correct output: -66                 | Program output: -17                
Correct output: -99                 | Program output: -66                
Correct output: 13                  | Program output: 13                 
Correct output: -70                 | Program output: 21                 
Correct output: -79                 | Program output: 78                 
Correct output: -69                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -8                  | Program output: -8                 
Correct output: -89                 | Program output: 7                  
Correct output: -91                 | Program output: 63                 
Correct output: -52                 | Program output: 51                 
Correct output: -56                 | Program output: -40                
Correct output: -100                | Program output: 67                 
Correct output: -82                 | Program output: 40                 
Correct output: -96                 | Program output: 100                
Correct output: -41                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -72                 | Program output: -72                
Correct output: 38                  | Program output: 100                
Correct output: -73                 | Program output: -46                
Correct output: -88                 | Program output: -9                 
Correct output: -100                | Program output: 19                 
Correct output: -63                 | Program output: -18                
Correct output: 1                   | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 66                 
Correct output: -70                 | Program output: 18                 
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -58                
Correct output: 11                  | Program output: 52                 
Correct output: -46                 | Program output: 100                
Correct output: -92                 | Program output: -63                
Correct output: -93                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: 54                 
Correct output: -73                 | Program output: -57                
Correct output: -84                 | Program output: -8                 
Correct output: -89                 | Program output: 78                 
Correct output: -73                 | Program output: 73                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_610} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_rot in3 print_integer integer_shove exec_yankdup boolean_invert_second_then_and integer_max exec_do*count (integer_pop boolean_xor) boolean_swap exec_do*range (boolean_or boolean_swap integer_sub in1 exec_pop (exec_stackdepth boolean_invert_second_then_and exec_flush print_exec (exec_eq) print_exec (integer_mod boolean_xor integer_yank) boolean_frominteger integer_div integer_div exec_if (integer_div integer_dup) (integer_fromboolean in2 boolean_swap) integer_stackdepth integer_pop integer_div tagged_610 boolean_dup integer_rot integer_gt) integer_dup exec_when ()))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_610} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_rot in3 print_integer integer_shove exec_yankdup boolean_invert_second_then_and integer_max exec_do*count (integer_pop boolean_xor) boolean_swap exec_do*range (boolean_or boolean_swap integer_sub in1 exec_pop (exec_stackdepth boolean_invert_second_then_and exec_flush print_exec (exec_eq) print_exec (integer_mod boolean_xor integer_yank) boolean_frominteger integer_div integer_div exec_if (integer_div integer_dup) (integer_fromboolean in2 boolean_swap) integer_stackdepth integer_pop integer_div tagged_610 boolean_dup integer_rot integer_gt) integer_dup exec_when ()))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 263 213 213 636 82 213 83 548 82)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (82 263 213 213 636 82 213 83 548 82)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_boolean_206} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction tag_boolean_159} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_804} {:close 1, :instruction boolean_shove} {:close 0, :instruction -78} {:close 0, :instruction integer_max} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank})
Best program: (boolean_invert_first_then_and integer_empty boolean_eq exec_do*times (exec_when (integer_gte in4 integer_eq exec_noop) boolean_not exec_do*range () exec_y_when_autoconstructing ()) print_integer exec_do*range () boolean_empty integer_yankdup integer_eq exec_while (boolean_invert_second_then_and exec_empty integer_sub tag_boolean_206 integer_gte integer_gt integer_shove exec_dup_times (in4 boolean_flush exec_pop (boolean_empty exec_y (tag_boolean_159 exec_if () (exec_rot (integer_sub integer_yankdup exec_s (boolean_dup_times) (integer_dec exec_do*count (integer_dec tagged_804 boolean_shove) -78 integer_max exec_pop ()) (exec_shove (integer_div) integer_dup_times) integer_empty exec_k (integer_yank boolean_yankdup) (exec_rot (integer_yank) () ())) () ()))))))
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 81
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.585
Median total errors in population: 7
Error averages by case: (0.918 0.737 0.787 0.787 0.364 0.918 0.787 0.917 0.452 0.918)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.79
Average program size in population (points): 94.212
Average percent parens in population: 0.246
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3096169
--- Timings ---
Current time: 1559593838039 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.4 seconds, 41.4%
Fitness Testing:      5.0 seconds, 38.0%
Report:               2.6 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 45                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 69                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 97                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 1                   | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 62                 
Correct output: 24                  | Program output: 44                 
Correct output: 1                   | Program output: 86                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 69                 
Correct output: 27                  | Program output: 30                 
Correct output: 3                   | Program output: 98                 
Correct output: 25                  | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: -66                 | Program output: -65                
Correct output: -95                 | Program output: -13                
Correct output: 3                   | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 84                 
Correct output: -82                 | Program output: 88                 
Correct output: -81                 | Program output: -13                
Correct output: -20                 | Program output: 38                 
Correct output: -100                | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: 34                 
Correct output: -93                 | Program output: 10                 
Correct output: -63                 | Program output: 66                 
Correct output: -66                 | Program output: -38                
Correct output: -99                 | Program output: 30                 
Correct output: 13                  | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -37                
Correct output: -92                 | Program output: 71                 
Correct output: -77                 | Program output: 12                 
Correct output: -21                 | Program output: 62                 
Correct output: -8                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 31                 
Correct output: -100                | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 17                 
Correct output: -1                  | Program output: 88                 
Correct output: -72                 | Program output: 33                 
Correct output: 38                  | Program output: 38                 
Correct output: -73                 | Program output: 52                 
Correct output: -88                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 96                 
Correct output: -98                 | Program output: 25                 
Correct output: -70                 | Program output: 61                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 19                 
Correct output: -83                 | Program output: 36                 
Correct output: 11                  | Program output: 60                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: -60                 | Program output: 1                  
Correct output: -91                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -79                 | Program output: -19                
Correct output: -89                 | Program output: 48                 
Correct output: -73                 | Program output: 70                 
Correct output: -84                 | Program output: 3                  
Correct output: -89                 | Program output: 51                 
Correct output: -73                 | Program output: 50                 
Correct output: -87                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_yankdup in3 boolean_dup print_integer integer_shove exec_flush exec_yankdup integer_dup exec_dup (integer_mod exec_k () (integer_pop boolean_swap)) exec_do*range (boolean_or integer_rot exec_eq) integer_sub integer_gt in1 exec_stackdepth boolean_invert_second_then_and boolean_frominteger boolean_flush print_exec (in3 exec_eq) exec_flush boolean_pop exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_pop integer_swap integer_pop integer_yank) exec_dup (print_exec (integer_dup_items integer_flush)) boolean_frominteger boolean_dup_items integer_dec integer_fromboolean integer_pop boolean_eq integer_div boolean_not integer_dup exec_k (in2 boolean_not boolean_swap) (integer_pop integer_div boolean_yankdup) boolean_dup exec_swap (integer_rot integer_inc integer_gt) (integer_swap exec_do*while (integer_dup exec_do*count (exec_when ()))))
Lexicase best errors: [1 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 81
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_yankdup in3 boolean_dup print_integer integer_shove exec_flush exec_yankdup integer_dup exec_dup (integer_mod exec_k () (integer_pop boolean_swap)) exec_do*range (boolean_or integer_rot exec_eq) integer_sub integer_gt in1 exec_stackdepth boolean_invert_second_then_and boolean_frominteger boolean_flush print_exec (in3 exec_eq) exec_flush boolean_pop exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_pop integer_swap integer_pop integer_yank) exec_dup (print_exec (integer_dup_items integer_flush)) boolean_frominteger boolean_dup_items integer_dec integer_fromboolean integer_pop boolean_eq integer_div boolean_not integer_dup exec_k (in2 boolean_not boolean_swap) (integer_pop integer_div boolean_yankdup) boolean_dup exec_swap (integer_rot integer_inc integer_gt) (integer_swap exec_do*while (integer_dup exec_do*count (exec_when ()))))
Zero cases best errors: [1 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 81
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 2 309 291 3 307 3 293 294 297)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (308 2 309 291 3 307 3 293 294 297)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 2, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction -55} {:close 0, :instruction exec_when})
Best program: (exec_noop boolean_rot in3 print_integer exec_flush exec_yankdup print_boolean exec_while () boolean_dup integer_mod exec_do*range (boolean_or integer_rot exec_do*times () integer_sub exec_stackdepth boolean_dup_times) print_exec (boolean_invert_second_then_and) in3 integer_mod boolean_yank boolean_pop boolean_invert_first_then_and boolean_and integer_swap integer_yank print_exec (boolean_frominteger integer_mult boolean_dup_items integer_div integer_dec) integer_pop integer_div integer_dup exec_k (boolean_swap) (integer_pop integer_div integer_dup_items boolean_yankdup) boolean_dup integer_rot exec_noop integer_gt exec_do*while (integer_dup -55 exec_when ()))
Errors: [1 1 1 0 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 50
Size: 60
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.893
Median total errors in population: 7
Error averages by case: (0.692 0.998 0.691 0.709 0.997 0.693 0.997 0.707 0.706 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.743
Average program size in population (points): 69.799
Average percent parens in population: 0.255
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3621265
--- Timings ---
Current time: 1559593839977 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.6 seconds, 43.7%
Fitness Testing:      5.5 seconds, 36.5%
Report:               2.9 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 67                 
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 77                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 67                 
Correct output: 12                  | Program output: 63                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 72                 
Correct output: 30                  | Program output: 70                 
Correct output: 3                   | Program output: 67                 
Correct output: 32                  | Program output: 95                 
Correct output: 37                  | Program output: 82                 
Correct output: 1                   | Program output: 90                 
Correct output: 11                  | Program output: 67                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 100                
Correct output: 23                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 75                 
Correct output: 25                  | Program output: 83                 
Correct output: 0                   | Program output: 54                 
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: 78                 
Correct output: 3                   | Program output: 37                 
Correct output: -95                 | Program output: 8                  
Correct output: -57                 | Program output: -27                
Correct output: -82                 | Program output: 11                 
Correct output: -81                 | Program output: 96                 
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -18                
Correct output: -84                 | Program output: 51                 
Correct output: -68                 | Program output: -38                
Correct output: -72                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: 10                 
Correct output: -63                 | Program output: 65                 
Correct output: -66                 | Program output: -17                
Correct output: -99                 | Program output: -66                
Correct output: 13                  | Program output: 13                 
Correct output: -70                 | Program output: 21                 
Correct output: -79                 | Program output: 78                 
Correct output: -69                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -8                  | Program output: -8                 
Correct output: -89                 | Program output: 7                  
Correct output: -91                 | Program output: 63                 
Correct output: -52                 | Program output: 51                 
Correct output: -56                 | Program output: -40                
Correct output: -100                | Program output: 67                 
Correct output: -82                 | Program output: 40                 
Correct output: -96                 | Program output: 100                
Correct output: -41                 | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: -72                 | Program output: -72                
Correct output: 38                  | Program output: 100                
Correct output: -73                 | Program output: -46                
Correct output: -88                 | Program output: -9                 
Correct output: -100                | Program output: 19                 
Correct output: -63                 | Program output: -18                
Correct output: 1                   | Program output: 81                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 66                 
Correct output: -70                 | Program output: 18                 
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -58                
Correct output: 11                  | Program output: 52                 
Correct output: -46                 | Program output: 100                
Correct output: -92                 | Program output: -63                
Correct output: -93                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: 54                 
Correct output: -73                 | Program output: -57                
Correct output: -84                 | Program output: -8                 
Correct output: -89                 | Program output: 78                 
Correct output: -73                 | Program output: 73                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_388} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_682} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 1, :instruction exec_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_y})
Lexicase best program: (in4 print_integer exec_while (exec_dup_items print_boolean exec_eq exec_k_when_autoconstructing () (integer_mod integer_lt print_integer tag_integer_388 boolean_or exec_do*times (boolean_swap tagged_682 in1 boolean_shove boolean_dup) exec_rot (exec_dup () in4 boolean_pop) (integer_eq integer_stackdepth boolean_invert_second_then_and) (integer_yankdup integer_dup_times integer_yankdup in1 exec_k_when_autoconstructing (integer_mod in4 exec_s_when_autoconstructing (boolean_yank integer_mult) (print_boolean exec_do*range () exec_do*count (exec_s (exec_flush exec_rot (exec_shove (integer_min exec_do*count (integer_inc exec_s () (exec_do*while () exec_dup_times (exec_eq) exec_empty integer_pop boolean_and) (exec_if () (exec_swap () (in4) integer_fromboolean integer_gte exec_y ()))))) () ()) () ())) ()) ()))))
Lexicase best errors: [1 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_388} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_682} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 1, :instruction exec_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_y})
Zero cases best program: (in4 print_integer exec_while (exec_dup_items print_boolean exec_eq exec_k_when_autoconstructing () (integer_mod integer_lt print_integer tag_integer_388 boolean_or exec_do*times (boolean_swap tagged_682 in1 boolean_shove boolean_dup) exec_rot (exec_dup () in4 boolean_pop) (integer_eq integer_stackdepth boolean_invert_second_then_and) (integer_yankdup integer_dup_times integer_yankdup in1 exec_k_when_autoconstructing (integer_mod in4 exec_s_when_autoconstructing (boolean_yank integer_mult) (print_boolean exec_do*range () exec_do*count (exec_s (exec_flush exec_rot (exec_shove (integer_min exec_do*count (integer_inc exec_s () (exec_do*while () exec_dup_times (exec_eq) exec_empty integer_pop boolean_and) (exec_if () (exec_swap () (in4) integer_fromboolean integer_gte exec_y ()))))) () ()) () ())) ()) ()))))
Zero cases best errors: [1 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 230 2 2 211 227 2 2 227 230)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (294 230 2 2 211 227 2 2 227 230)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction tagged_682} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte})
Best program: (in4 print_integer exec_while (boolean_invert_second_then_and exec_dup_items print_boolean exec_eq exec_k_when_autoconstructing () (integer_mod integer_lt) print_integer boolean_pop in1 tagged_682 print_newline boolean_shove exec_dup () exec_y_when_autoconstructing (boolean_pop) print_integer) boolean_stackdepth integer_eq boolean_invert_second_then_and exec_y (integer_yankdup integer_add) exec_while (integer_dup_times integer_yankdup boolean_pop in1 exec_k_when_autoconstructing (exec_pop (in4 integer_mult) exec_do*count (exec_flush integer_dup_items exec_rot (exec_shove (integer_dup integer_min exec_do*count (exec_rot (integer_inc exec_do*while () exec_eq) (boolean_invert_second_then_and exec_empty print_exec (exec_swap () (integer_rot integer_fromboolean exec_do*count () integer_gte))) ()))) () ())) ()))
Errors: [1 0 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 55
Size: 80
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 8.573
Median total errors in population: 9
Error averages by case: (0.706 0.77 0.998 0.998 0.789 0.773 0.998 0.998 0.773 0.77)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.722
Average program size in population (points): 62.707
Average percent parens in population: 0.235
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4087674
--- Timings ---
Current time: 1559593842425 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.8 seconds, 45.8%
Fitness Testing:      6.1 seconds, 35.6%
Report:               3.1 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 69                 
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: 36                 
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 81                 
Correct output: 12                  | Program output: 35                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 78                 
Correct output: 23                  | Program output: 71                 
Correct output: 30                  | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 50                 
Correct output: 37                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 100                
Correct output: 14                  | Program output: 92                 
Correct output: 24                  | Program output: 88                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 54                 
Correct output: 11                  | Program output: 75                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 100                
Correct output: -66                 | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 14                 
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -36                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: 3                  
Correct output: -88                 | Program output: 52                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -65                
Correct output: -79                 | Program output: 54                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 57                 
Correct output: -89                 | Program output: 47                 
Correct output: -91                 | Program output: -4                 
Correct output: -52                 | Program output: 93                 
Correct output: -56                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: 7                  
Correct output: -96                 | Program output: 73                 
Correct output: -41                 | Program output: 60                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 83                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 32                 
Correct output: -63                 | Program output: -19                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 64                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -64                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 98                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -27                
Correct output: -92                 | Program output: -28                
Correct output: -93                 | Program output: 41                 
Correct output: -60                 | Program output: 86                 
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: 43                 
Correct output: -79                 | Program output: 66                 
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lte})
Lexicase best program: (in4 in1 print_integer boolean_invert_second_then_and exec_dup_items exec_eq integer_mod tagged_682 exec_s_when_autoconstructing (exec_yank) (exec_shove (boolean_invert_second_then_and) in1 boolean_dup_times exec_k_when_autoconstructing (boolean_yank integer_div integer_dup integer_mult) (integer_mod) boolean_xor exec_do*count (integer_swap integer_dup integer_min exec_y_when_autoconstructing () integer_yank) exec_do*while () integer_mult exec_dup_times (integer_add integer_mult integer_add integer_fromboolean integer_rot integer_lte)) ())
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lte})
Zero cases best program: (in4 in1 print_integer boolean_invert_second_then_and exec_dup_items exec_eq integer_mod tagged_682 exec_s_when_autoconstructing (exec_yank) (exec_shove (boolean_invert_second_then_and) in1 boolean_dup_times exec_k_when_autoconstructing (boolean_yank integer_div integer_dup integer_mult) (integer_mod) boolean_xor exec_do*count (integer_swap integer_dup integer_min exec_y_when_autoconstructing () integer_yank) exec_do*while () integer_mult exec_dup_times (integer_add integer_mult integer_add integer_fromboolean integer_rot integer_lte)) ())
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (761 298 293 101 287 757 287 101 363 285)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (761 298 293 101 287 757 287 101 363 285)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction 72} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_610} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when})
Best program: (exec_stackdepth integer_stackdepth in2 in1 print_integer integer_shove exec_yankdup integer_mod boolean_swap in4 boolean_or boolean_pop boolean_or integer_fromboolean exec_do*range (boolean_or exec_eq) boolean_dup_times integer_dup in1 72 exec_do*while (exec_stackdepth integer_dec in3) boolean_invert_first_then_and exec_eq integer_mod boolean_pop boolean_xor exec_swap (boolean_frominteger integer_div exec_pop (integer_dup) in2 integer_sub integer_gt boolean_swap) (tagged_610 boolean_rot) boolean_yankdup exec_yank boolean_invert_first_then_and integer_rot integer_div boolean_dup integer_lte integer_fromboolean integer_lte integer_dup integer_gt exec_when ())
Errors: [0 1 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 60
Percent parens: 0.117
--- Population Statistics ---
Average total errors in population: 6.467
Median total errors in population: 6
Error averages by case: (0.239 0.702 0.707 0.899 0.713 0.243 0.713 0.899 0.637 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.437
Average program size in population (points): 61.202
Average percent parens in population: 0.239
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4663683
--- Timings ---
Current time: 1559593844725 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 46.4%
Fitness Testing:      6.7 seconds, 33.7%
Report:               3.8 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 69                 
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: 36                 
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 81                 
Correct output: 12                  | Program output: 35                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 78                 
Correct output: 23                  | Program output: 71                 
Correct output: 30                  | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 50                 
Correct output: 37                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 100                
Correct output: 14                  | Program output: 92                 
Correct output: 24                  | Program output: 88                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 54                 
Correct output: 11                  | Program output: 75                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 100                
Correct output: -66                 | Program output: 83                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 14                 
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -36                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: 3                  
Correct output: -88                 | Program output: 52                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -65                
Correct output: -79                 | Program output: 54                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 57                 
Correct output: -89                 | Program output: 47                 
Correct output: -91                 | Program output: -4                 
Correct output: -52                 | Program output: 93                 
Correct output: -56                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: 7                  
Correct output: -96                 | Program output: 73                 
Correct output: -41                 | Program output: 60                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 83                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: 32                 
Correct output: -63                 | Program output: -19                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 64                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -64                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 98                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -27                
Correct output: -92                 | Program output: -28                
Correct output: -93                 | Program output: 41                 
Correct output: -60                 | Program output: 86                 
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: 43                 
Correct output: -79                 | Program output: 66                 
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction 72} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_610} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while})
Lexicase best program: (exec_stackdepth integer_stackdepth in3 in2 exec_pop () in1 print_integer integer_shove exec_swap () (integer_mod integer_mod boolean_swap) in4 integer_yankdup boolean_pop integer_fromboolean exec_do*range (exec_s_when_autoconstructing (exec_eq) (integer_dup) (in1 exec_dup (72 integer_dec in2 in3) boolean_invert_first_then_and exec_s (exec_eq) (integer_mod boolean_pop exec_dup (boolean_xor exec_swap (boolean_frominteger exec_pop (integer_dup) in2 integer_gt tagged_610 boolean_rot) (boolean_yankdup) boolean_invert_first_then_and exec_flush) integer_rot) (integer_div boolean_dup integer_fromboolean integer_dup exec_while ()))))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction 72} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_610} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while})
Zero cases best program: (exec_stackdepth integer_stackdepth in3 in2 exec_pop () in1 print_integer integer_shove exec_swap () (integer_mod integer_mod boolean_swap) in4 integer_yankdup boolean_pop integer_fromboolean exec_do*range (exec_s_when_autoconstructing (exec_eq) (integer_dup) (in1 exec_dup (72 integer_dec in2 in3) boolean_invert_first_then_and exec_s (exec_eq) (integer_mod boolean_pop exec_dup (boolean_xor exec_swap (boolean_frominteger exec_pop (integer_dup) in2 integer_gt tagged_610 boolean_rot) (boolean_yankdup) boolean_invert_first_then_and exec_flush) integer_rot) (integer_div boolean_dup integer_fromboolean integer_dup exec_while ()))))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 200 746 203 339 202 203 339 544 199)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (9 200 746 203 339 202 203 339 544 199)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction integer_add} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lte})
Best program: (print_integer boolean_dup in4 in1 print_integer boolean_invert_second_then_and exec_dup_items exec_eq integer_mod tagged_682 exec_s_when_autoconstructing (exec_yank) (exec_shove (boolean_invert_second_then_and) in1 boolean_dup_times exec_k_when_autoconstructing (boolean_yank integer_dup integer_mult) (integer_mod) exec_do*count (integer_yankdup integer_swap integer_min exec_y_when_autoconstructing () integer_yank) exec_do*while () integer_mult integer_add) (exec_swap (integer_add integer_mult in4 exec_if () (integer_add exec_swap () () integer_fromboolean integer_rot integer_lte)) ()))
Errors: [1 1 0 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.016
Median total errors in population: 6
Error averages by case: (0.991 0.8 0.254 0.797 0.661 0.798 0.797 0.661 0.456 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.481
Average program size in population (points): 59.212
Average percent parens in population: 0.231
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5240466
--- Timings ---
Current time: 1559593846920 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.3 seconds, 47.1%
Fitness Testing:      7.3 seconds, 33.3%
Report:               4.2 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 69                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 62                 
Correct output: 24                  | Program output: 44                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 69                 
Correct output: 27                  | Program output: 30                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: -66                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: 34                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 17                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 38                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 36                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: -60                 | Program output: 1                  
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: -58                
Correct output: -79                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) exec_swap () (integer_min exec_do*count (integer_mod boolean_swap)) in4 tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and boolean_pop boolean_or integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237 72 exec_stackdepth integer_dec in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod boolean_pop exec_y (boolean_xor exec_yankdup exec_swap (integer_div integer_dup) (in2 integer_gt boolean_swap) tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (exec_yank integer_rot) integer_div boolean_dup integer_lte boolean_shove integer_fromboolean))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 72
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) exec_swap () (integer_min exec_do*count (integer_mod boolean_swap)) in4 tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and boolean_pop boolean_or integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237 72 exec_stackdepth integer_dec in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod boolean_pop exec_y (boolean_xor exec_yankdup exec_swap (integer_div integer_dup) (in2 integer_gt boolean_swap) tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (exec_yank integer_rot) integer_div boolean_dup integer_lte boolean_shove integer_fromboolean))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 72
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (75 75 75 190 190 76 76 208 203 76)
Population mean number of elite cases: 1.24
Count of perfect (error zero) individuals by case: (75 75 75 190 190 76 76 208 203 76)
Population mean number of perfect (error zero) cases: 1.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) exec_swap () (integer_min exec_do*count (integer_mod boolean_swap)) in4 tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and boolean_pop boolean_or integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237 72 exec_stackdepth integer_dec in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod boolean_pop exec_y (boolean_xor exec_yankdup exec_swap (integer_div integer_dup) (in2 integer_gt boolean_swap) tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (exec_yank integer_rot) integer_div boolean_dup integer_lte boolean_shove integer_fromboolean))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 59
Size: 72
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 8.756
Median total errors in population: 10
Error averages by case: (0.925 0.925 0.925 0.81 0.81 0.924 0.924 0.792 0.797 0.924)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.327
Average program size in population (points): 61.118
Average percent parens in population: 0.240
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5844041
--- Timings ---
Current time: 1559593849238 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.4 seconds, 47.5%
Fitness Testing:      7.8 seconds, 32.7%
Report:               4.7 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 69                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 62                 
Correct output: 24                  | Program output: 44                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 69                 
Correct output: 27                  | Program output: 30                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: -66                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: 34                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 17                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 38                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 36                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: -60                 | Program output: 1                  
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: -58                
Correct output: -79                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) in3 exec_swap () (integer_min exec_do*count (integer_mod boolean_swap)) in4 tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and boolean_pop integer_gte integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237 72 exec_stackdepth integer_dec in3 exec_do*while () boolean_dup integer_mod exec_flush boolean_invert_first_then_and exec_eq integer_mod integer_dup_items exec_y (boolean_xor exec_yankdup exec_swap (integer_div exec_shove () integer_dup) (in2 integer_gt boolean_swap) exec_when (boolean_rot) exec_k (boolean_yankdup) (exec_yank integer_rot) integer_div boolean_dup integer_lte boolean_shove integer_fromboolean))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) in3 exec_swap () (integer_min exec_do*count (integer_mod boolean_swap)) in4 tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and boolean_pop integer_gte integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237 72 exec_stackdepth integer_dec in3 exec_do*while () boolean_dup integer_mod exec_flush boolean_invert_first_then_and exec_eq integer_mod integer_dup_items exec_y (boolean_xor exec_yankdup exec_swap (integer_div exec_shove () integer_dup) (in2 integer_gt boolean_swap) exec_when (boolean_rot) exec_k (boolean_yankdup) (exec_yank integer_rot) integer_div boolean_dup integer_lte boolean_shove integer_fromboolean))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (530 4 558 1 786 559 531 1 152 530)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (530 4 558 1 786 559 531 1 152 530)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction tagged_616} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean})
Best program: (exec_stackdepth in3 in1 integer_min print_integer boolean_swap integer_shove exec_k (exec_swap (exec_stackdepth) (exec_yankdup) exec_swap () (integer_min exec_do*count (boolean_swap boolean_swap)) in4 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237) (72 exec_stackdepth integer_dec in3) boolean_dup integer_mod exec_stackdepth boolean_invert_first_then_and exec_eq integer_mod exec_do*while (integer_swap boolean_pop boolean_xor exec_yankdup exec_swap (integer_div integer_dup) (tagged_616 integer_gt boolean_swap) tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (integer_gt exec_yank integer_rot) integer_div boolean_dup integer_lte integer_fromboolean))
Errors: [0 1 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 77
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.348
Median total errors in population: 6
Error averages by case: (0.47 0.996 0.442 0.999 0.214 0.441 0.469 0.999 0.848 0.47)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.711
Average program size in population (points): 70.493
Average percent parens in population: 0.195
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7009851
--- Timings ---
Current time: 1559593852248 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.6 seconds, 47.0%
Fitness Testing:      8.9 seconds, 33.1%
Report:               5.3 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 447
Test mean error for best: 0.44700
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 69                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 62                 
Correct output: 24                  | Program output: 44                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 69                 
Correct output: 27                  | Program output: 30                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: -66                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: 34                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 17                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 38                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 36                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: -60                 | Program output: 1                  
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: -58                
Correct output: -79                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) exec_swap () (integer_lte integer_min integer_mod in4 exec_s (tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and exec_while (boolean_pop boolean_or exec_swap (integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237) (72 exec_stackdepth integer_dec in3) boolean_dup integer_mod boolean_invert_first_then_and exec_eq) integer_mod boolean_pop exec_y (boolean_xor exec_yankdup exec_swap (integer_dup) (integer_div integer_pop integer_dup) integer_gt tagged_610 exec_when (boolean_rot) print_integer)) (boolean_yankdup) (exec_yank boolean_invert_first_then_and)) exec_when (boolean_dup integer_lte boolean_shove integer_fromboolean))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 78
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_stackdepth in3 in1 integer_min print_integer integer_shove exec_k (exec_stackdepth) (exec_yankdup) exec_swap () (integer_lte integer_min integer_mod in4 exec_s (tagged_995 boolean_or boolean_invert_first_then_and boolean_invert_first_then_and exec_while (boolean_pop boolean_or exec_swap (integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in1 tag_boolean_237) (72 exec_stackdepth integer_dec in3) boolean_dup integer_mod boolean_invert_first_then_and exec_eq) integer_mod boolean_pop exec_y (boolean_xor exec_yankdup exec_swap (integer_dup) (integer_div integer_pop integer_dup) integer_gt tagged_610 exec_when (boolean_rot) print_integer)) (boolean_yankdup) (exec_yank boolean_invert_first_then_and)) exec_when (boolean_dup integer_lte boolean_shove integer_fromboolean))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 78
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (540 331 530 533 536 536 689 537 340 630)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (540 331 530 533 536 536 689 537 340 630)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_exec_107} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction tagged_995} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_237} {:close 0, :instruction 72} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_610} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction 19} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Best program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 4.798
Median total errors in population: 2
Error averages by case: (0.46 0.669 0.47 0.467 0.464 0.464 0.311 0.463 0.66 0.37)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.724
Average program size in population (points): 72.567
Average percent parens in population: 0.204
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8214709
--- Timings ---
Current time: 1559593855051 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.7 seconds, 46.0%
Fitness Testing:     10.0 seconds, 33.4%
Report:               6.0 seconds, 20.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 67


Auto-simplifying with starting size: 67
step: 0
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 500
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1000
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1500
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2000
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2500
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3000
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3500
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4000
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4500
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 5000
program: (tag_exec_107 (exec_stackdepth) in3 in1 integer_min print_integer integer_shove exec_stackdepth integer_dup_times exec_yankdup integer_min exec_do*count (integer_mod boolean_swap) tagged_995 boolean_or exec_do*count () boolean_invert_first_then_and boolean_pop integer_fromboolean exec_do*range (boolean_or boolean_dup_times integer_dup) in3 in1 tag_boolean_237 72 exec_do*range (exec_stackdepth integer_dec integer_flush) in3 boolean_dup integer_mod boolean_invert_first_then_and exec_eq integer_mod exec_y (boolean_xor exec_yankdup exec_swap (integer_gt integer_shove tagged_610 exec_when (boolean_rot) exec_k (boolean_yankdup) (19 integer_rot) integer_div integer_lte boolean_shove integer_fromboolean) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 447
Test mean error for best: 0.44700
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -8                  | Program output: 97                 
Correct output: 77                  | Program output: 80                 
Correct output: 58                  | Program output: 92                 
Correct output: -37                 | Program output: -37                
Correct output: -90                 | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -43                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 62                  | Program output: 62                 
Correct output: 35                  | Program output: 69                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 66                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 32                  | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 62                 
Correct output: 24                  | Program output: 44                 
Correct output: 1                   | Program output: 84                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 69                 
Correct output: 27                  | Program output: 30                 
Correct output: 3                   | Program output: 4                  
Correct output: 25                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: -66                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 45                 
Correct output: -82                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -20                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: 34                 
Correct output: -93                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 13                  | Program output: 14                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -6                 
Correct output: -77                 | Program output: -36                
Correct output: -21                 | Program output: 29                 
Correct output: -8                  | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 17                 
Correct output: -1                  | Program output: 56                 
Correct output: -72                 | Program output: -33                
Correct output: 38                  | Program output: 38                 
Correct output: -73                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -25                
Correct output: -83                 | Program output: 36                 
Correct output: 11                  | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: -60                 | Program output: 1                  
Correct output: -91                 | Program output: -89                
Correct output: -58                 | Program output: -58                
Correct output: -79                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -73                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 22                 
;;******************************
