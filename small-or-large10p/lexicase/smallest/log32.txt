Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-65 56 -65 -65] -65] [[47 47 47 63] 47] [[93 -39 -39 -39] -39] [[88 -75 -75 -75] -75] [[29 29 29 -13] -13] [[-77 66 66 66] -77] [[-24 -24 66 -24] -24] [[41 41 41 59] 41] [[-21 -21 -21 -26] -26] [[-65 26 -65 -65] -65] [(31 31 31 31) 31] [(44 44 44 44) 44] [(23 23 23 23) 23] [(58 58 58 58) 58] [(40 40 40 40) 40] [(11 33 64 92) 11] [(66 99 69 73) 66] [(89 87 15 37) 15] [(63 23 37 27) 23] [(32 81 10 68) 10] [(84 34 76 58) 34] [(95 56 10 89) 10] [(56 16 48 87) 16] [(60 56 13 94) 13] [(70 32 35 91) 32] [(70 43 99 25) 25] [(27 62 52 56) 27] [(90 55 19 2) 2] [(77 33 77 84) 33] [(72 15 34 70) 15] [(67 100 56 12) 12] [(91 18 24 55) 18] [(5 87 36 93) 5] [(100 30 39 88) 30] [(64 89 54 86) 54] [(62 -44 -21 -58) -58] [(-90 -44 -100 -73) -100] [(9 33 -33 -25) -33] [(27 10 8 -30) -30] [(50 -59 17 -96) -96] [(-4 22 -70 -60) -70] [(-74 -61 51 34) -74] [(-30 44 -74 -92) -92] [(60 -50 -95 -76) -95] [(-11 34 28 -15) -15] [(1 10 61 -80) -80] [(98 76 -72 -26) -72] [(79 -41 44 -51) -51] [(91 -90 49 -30) -90] [(88 -9 -66 14) -66] [(-25 -89 21 44) -89] [(63 -100 79 46) -100] [(25 -39 -82 -76) -82] [(46 -90 -21 -58) -90] [(10 -40 -51 -22) -51] [(12 -13 64 87) -13] [(78 -28 40 53) -28] [(-100 -18 37 -81) -100] [(50 76 46 43) 43] [(25 23 -18 -36) -36] [(-92 -31 19 12) -92] [(59 -77 21 -100) -100] [(39 -57 -44 -32) -57] [(-60 -22 -8 80) -60] [(65 49 51 -93) -93] [(90 61 -23 77) -23] [(-87 34 31 -98) -98] [(-33 -62 -50 -51) -62] [(12 -100 100 -85) -100] [(20 -99 43 -66) -99] [(-81 -25 26 -77) -81] [(76 27 61 -9) -9] [(-36 82 94 76) -36] [(44 -45 -64 -31) -64] [(29 -56 -10 10) -56] [(34 -73 64 -90) -90] [(-65 -42 92 83) -65] [(-91 -22 -19 -72) -91] [(40 8 -53 -49) -53] [(-19 -54 -58 39) -58] [(-26 80 -98 -69) -98] [(52 30 58 -31) -31] [(-30 86 -82 -89) -89] [(47 4 48 51) 4] [(88 84 67 33) 33] [(36 49 82 49) 36] [(-26 30 -10 22) -26] [(-58 -24 30 -4) -58] [(66 -74 -17 27) -74] [(25 -35 -40 -45) -45] [(84 40 -72 -21) -72] [(49 96 1 -53) -53] [(25 -89 -80 28) -89] [(-76 77 -93 -81) -93] [(-5 -83 75 -95) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-65 56 -65 -65] -65]
Train Case:   6 | Input/Output: [[47 47 47 63] 47]
Train Case:   7 | Input/Output: [[93 -39 -39 -39] -39]
Train Case:   8 | Input/Output: [[88 -75 -75 -75] -75]
Train Case:   9 | Input/Output: [[29 29 29 -13] -13]
Train Case:  10 | Input/Output: [[-77 66 66 66] -77]
Train Case:  11 | Input/Output: [[-24 -24 66 -24] -24]
Train Case:  12 | Input/Output: [[41 41 41 59] 41]
Train Case:  13 | Input/Output: [[-21 -21 -21 -26] -26]
Train Case:  14 | Input/Output: [[-65 26 -65 -65] -65]
Train Case:  15 | Input/Output: [(31 31 31 31) 31]
Train Case:  16 | Input/Output: [(44 44 44 44) 44]
Train Case:  17 | Input/Output: [(23 23 23 23) 23]
Train Case:  18 | Input/Output: [(58 58 58 58) 58]
Train Case:  19 | Input/Output: [(40 40 40 40) 40]
Train Case:  20 | Input/Output: [(11 33 64 92) 11]
Train Case:  21 | Input/Output: [(66 99 69 73) 66]
Train Case:  22 | Input/Output: [(89 87 15 37) 15]
Train Case:  23 | Input/Output: [(63 23 37 27) 23]
Train Case:  24 | Input/Output: [(32 81 10 68) 10]
Train Case:  25 | Input/Output: [(84 34 76 58) 34]
Train Case:  26 | Input/Output: [(95 56 10 89) 10]
Train Case:  27 | Input/Output: [(56 16 48 87) 16]
Train Case:  28 | Input/Output: [(60 56 13 94) 13]
Train Case:  29 | Input/Output: [(70 32 35 91) 32]
Train Case:  30 | Input/Output: [(70 43 99 25) 25]
Train Case:  31 | Input/Output: [(27 62 52 56) 27]
Train Case:  32 | Input/Output: [(90 55 19 2) 2]
Train Case:  33 | Input/Output: [(77 33 77 84) 33]
Train Case:  34 | Input/Output: [(72 15 34 70) 15]
Train Case:  35 | Input/Output: [(67 100 56 12) 12]
Train Case:  36 | Input/Output: [(91 18 24 55) 18]
Train Case:  37 | Input/Output: [(5 87 36 93) 5]
Train Case:  38 | Input/Output: [(100 30 39 88) 30]
Train Case:  39 | Input/Output: [(64 89 54 86) 54]
Train Case:  40 | Input/Output: [(62 -44 -21 -58) -58]
Train Case:  41 | Input/Output: [(-90 -44 -100 -73) -100]
Train Case:  42 | Input/Output: [(9 33 -33 -25) -33]
Train Case:  43 | Input/Output: [(27 10 8 -30) -30]
Train Case:  44 | Input/Output: [(50 -59 17 -96) -96]
Train Case:  45 | Input/Output: [(-4 22 -70 -60) -70]
Train Case:  46 | Input/Output: [(-74 -61 51 34) -74]
Train Case:  47 | Input/Output: [(-30 44 -74 -92) -92]
Train Case:  48 | Input/Output: [(60 -50 -95 -76) -95]
Train Case:  49 | Input/Output: [(-11 34 28 -15) -15]
Train Case:  50 | Input/Output: [(1 10 61 -80) -80]
Train Case:  51 | Input/Output: [(98 76 -72 -26) -72]
Train Case:  52 | Input/Output: [(79 -41 44 -51) -51]
Train Case:  53 | Input/Output: [(91 -90 49 -30) -90]
Train Case:  54 | Input/Output: [(88 -9 -66 14) -66]
Train Case:  55 | Input/Output: [(-25 -89 21 44) -89]
Train Case:  56 | Input/Output: [(63 -100 79 46) -100]
Train Case:  57 | Input/Output: [(25 -39 -82 -76) -82]
Train Case:  58 | Input/Output: [(46 -90 -21 -58) -90]
Train Case:  59 | Input/Output: [(10 -40 -51 -22) -51]
Train Case:  60 | Input/Output: [(12 -13 64 87) -13]
Train Case:  61 | Input/Output: [(78 -28 40 53) -28]
Train Case:  62 | Input/Output: [(-100 -18 37 -81) -100]
Train Case:  63 | Input/Output: [(50 76 46 43) 43]
Train Case:  64 | Input/Output: [(25 23 -18 -36) -36]
Train Case:  65 | Input/Output: [(-92 -31 19 12) -92]
Train Case:  66 | Input/Output: [(59 -77 21 -100) -100]
Train Case:  67 | Input/Output: [(39 -57 -44 -32) -57]
Train Case:  68 | Input/Output: [(-60 -22 -8 80) -60]
Train Case:  69 | Input/Output: [(65 49 51 -93) -93]
Train Case:  70 | Input/Output: [(90 61 -23 77) -23]
Train Case:  71 | Input/Output: [(-87 34 31 -98) -98]
Train Case:  72 | Input/Output: [(-33 -62 -50 -51) -62]
Train Case:  73 | Input/Output: [(12 -100 100 -85) -100]
Train Case:  74 | Input/Output: [(20 -99 43 -66) -99]
Train Case:  75 | Input/Output: [(-81 -25 26 -77) -81]
Train Case:  76 | Input/Output: [(76 27 61 -9) -9]
Train Case:  77 | Input/Output: [(-36 82 94 76) -36]
Train Case:  78 | Input/Output: [(44 -45 -64 -31) -64]
Train Case:  79 | Input/Output: [(29 -56 -10 10) -56]
Train Case:  80 | Input/Output: [(34 -73 64 -90) -90]
Train Case:  81 | Input/Output: [(-65 -42 92 83) -65]
Train Case:  82 | Input/Output: [(-91 -22 -19 -72) -91]
Train Case:  83 | Input/Output: [(40 8 -53 -49) -53]
Train Case:  84 | Input/Output: [(-19 -54 -58 39) -58]
Train Case:  85 | Input/Output: [(-26 80 -98 -69) -98]
Train Case:  86 | Input/Output: [(52 30 58 -31) -31]
Train Case:  87 | Input/Output: [(-30 86 -82 -89) -89]
Train Case:  88 | Input/Output: [(47 4 48 51) 4]
Train Case:  89 | Input/Output: [(88 84 67 33) 33]
Train Case:  90 | Input/Output: [(36 49 82 49) 36]
Train Case:  91 | Input/Output: [(-26 30 -10 22) -26]
Train Case:  92 | Input/Output: [(-58 -24 30 -4) -58]
Train Case:  93 | Input/Output: [(66 -74 -17 27) -74]
Train Case:  94 | Input/Output: [(25 -35 -40 -45) -45]
Train Case:  95 | Input/Output: [(84 40 -72 -21) -72]
Train Case:  96 | Input/Output: [(49 96 1 -53) -53]
Train Case:  97 | Input/Output: [(25 -89 -80 28) -89]
Train Case:  98 | Input/Output: [(-76 77 -93 -81) -93]
Train Case:  99 | Input/Output: [(-5 -83 75 -95) -95]
Test Case:   0 | Input/Output: [[21 -43 21 21] -43]
Test Case:   1 | Input/Output: [[24 24 -21 24] -21]
Test Case:   2 | Input/Output: [[-90 -13 -90 -90] -90]
Test Case:   3 | Input/Output: [[-85 -73 -73 -73] -85]
Test Case:   4 | Input/Output: [[68 68 -58 68] -58]
Test Case:   5 | Input/Output: [[25 25 25 -42] -42]
Test Case:   6 | Input/Output: [[-68 -68 -68 -97] -97]
Test Case:   7 | Input/Output: [[97 97 -51 97] -51]
Test Case:   8 | Input/Output: [[93 -56 -56 -56] -56]
Test Case:   9 | Input/Output: [[-6 2 -6 -6] -6]
Test Case:  10 | Input/Output: [[77 36 36 36] 36]
Test Case:  11 | Input/Output: [[68 68 68 99] 68]
Test Case:  12 | Input/Output: [[45 45 45 24] 24]
Test Case:  13 | Input/Output: [[-66 -66 -35 -66] -66]
Test Case:  14 | Input/Output: [[-55 24 -55 -55] -55]
Test Case:  15 | Input/Output: [[-42 -6 -6 -6] -42]
Test Case:  16 | Input/Output: [[16 59 59 59] 16]
Test Case:  17 | Input/Output: [[-76 -49 -49 -49] -76]
Test Case:  18 | Input/Output: [[85 -89 85 85] -89]
Test Case:  19 | Input/Output: [[12 -25 -25 -25] -25]
Test Case:  20 | Input/Output: [[-20 -20 73 -20] -20]
Test Case:  21 | Input/Output: [[-94 -94 -94 -15] -94]
Test Case:  22 | Input/Output: [[32 -52 -52 -52] -52]
Test Case:  23 | Input/Output: [[-82 -82 -82 49] -82]
Test Case:  24 | Input/Output: [[-68 -68 -68 -92] -92]
Test Case:  25 | Input/Output: [[-4 25 25 25] -4]
Test Case:  26 | Input/Output: [[59 59 59 -57] -57]
Test Case:  27 | Input/Output: [[24 24 24 -50] -50]
Test Case:  28 | Input/Output: [[-64 -64 -7 -64] -64]
Test Case:  29 | Input/Output: [[-78 -83 -83 -83] -83]
Test Case:  30 | Input/Output: [[48 17 17 17] 17]
Test Case:  31 | Input/Output: [[67 -49 -49 -49] -49]
Test Case:  32 | Input/Output: [[29 29 23 29] 23]
Test Case:  33 | Input/Output: [[77 -41 77 77] -41]
Test Case:  34 | Input/Output: [[-28 46 -28 -28] -28]
Test Case:  35 | Input/Output: [[-19 -19 -30 -19] -30]
Test Case:  36 | Input/Output: [[-13 33 -13 -13] -13]
Test Case:  37 | Input/Output: [[35 66 35 35] 35]
Test Case:  38 | Input/Output: [[-24 49 -24 -24] -24]
Test Case:  39 | Input/Output: [[-77 -77 -77 -54] -77]
Test Case:  40 | Input/Output: [[-3 -3 -11 -3] -11]
Test Case:  41 | Input/Output: [[20 -5 -5 -5] -5]
Test Case:  42 | Input/Output: [[-38 -38 -38 -78] -78]
Test Case:  43 | Input/Output: [[65 65 30 65] 30]
Test Case:  44 | Input/Output: [[17 -23 17 17] -23]
Test Case:  45 | Input/Output: [[-100 -100 -10 -100] -100]
Test Case:  46 | Input/Output: [[76 76 76 -35] -35]
Test Case:  47 | Input/Output: [[63 63 63 -44] -44]
Test Case:  48 | Input/Output: [[41 41 -14 41] -14]
Test Case:  49 | Input/Output: [[-35 -35 -35 -5] -35]
Test Case:  50 | Input/Output: [[-60 22 -60 -60] -60]
Test Case:  51 | Input/Output: [[19 68 19 19] 19]
Test Case:  52 | Input/Output: [[-86 -78 -86 -86] -86]
Test Case:  53 | Input/Output: [[-66 98 -66 -66] -66]
Test Case:  54 | Input/Output: [[-31 -47 -31 -31] -47]
Test Case:  55 | Input/Output: [[72 72 72 34] 34]
Test Case:  56 | Input/Output: [[75 -90 75 75] -90]
Test Case:  57 | Input/Output: [[72 -8 72 72] -8]
Test Case:  58 | Input/Output: [[80 89 80 80] 80]
Test Case:  59 | Input/Output: [[99 99 99 -59] -59]
Test Case:  60 | Input/Output: [[2 2 -97 2] -97]
Test Case:  61 | Input/Output: [[-80 -80 -80 -53] -80]
Test Case:  62 | Input/Output: [[-72 -72 -72 41] -72]
Test Case:  63 | Input/Output: [[-73 -73 -73 54] -73]
Test Case:  64 | Input/Output: [[48 48 -18 48] -18]
Test Case:  65 | Input/Output: [[-91 -91 -21 -91] -91]
Test Case:  66 | Input/Output: [[-81 -81 -81 86] -81]
Test Case:  67 | Input/Output: [[-1 55 55 55] -1]
Test Case:  68 | Input/Output: [[-11 -11 -87 -11] -87]
Test Case:  69 | Input/Output: [[-82 -82 -82 -45] -82]
Test Case:  70 | Input/Output: [[-81 -78 -81 -81] -81]
Test Case:  71 | Input/Output: [[-71 -94 -71 -71] -94]
Test Case:  72 | Input/Output: [[17 17 17 79] 17]
Test Case:  73 | Input/Output: [[96 -44 96 96] -44]
Test Case:  74 | Input/Output: [[-91 -91 -91 55] -91]
Test Case:  75 | Input/Output: [[61 29 29 29] 29]
Test Case:  76 | Input/Output: [[-44 -44 -44 82] -44]
Test Case:  77 | Input/Output: [[-8 -65 -65 -65] -65]
Test Case:  78 | Input/Output: [[-43 -7 -43 -43] -43]
Test Case:  79 | Input/Output: [[-58 -58 62 -58] -58]
Test Case:  80 | Input/Output: [[-49 -49 -49 83] -49]
Test Case:  81 | Input/Output: [[8 -47 8 8] -47]
Test Case:  82 | Input/Output: [[27 -61 -61 -61] -61]
Test Case:  83 | Input/Output: [[38 -16 -16 -16] -16]
Test Case:  84 | Input/Output: [[50 -52 50 50] -52]
Test Case:  85 | Input/Output: [[87 42 87 87] 42]
Test Case:  86 | Input/Output: [[-14 93 -14 -14] -14]
Test Case:  87 | Input/Output: [[45 -91 45 45] -91]
Test Case:  88 | Input/Output: [[7 12 12 12] 7]
Test Case:  89 | Input/Output: [[-79 -79 -43 -79] -79]
Test Case:  90 | Input/Output: [[4 4 29 4] 4]
Test Case:  91 | Input/Output: [[-31 75 -31 -31] -31]
Test Case:  92 | Input/Output: [[-92 -92 -92 73] -92]
Test Case:  93 | Input/Output: [[41 -75 -75 -75] -75]
Test Case:  94 | Input/Output: [[57 57 57 73] 57]
Test Case:  95 | Input/Output: [[95 95 68 95] 68]
Test Case:  96 | Input/Output: [[92 92 92 73] 73]
Test Case:  97 | Input/Output: [[-18 -13 -13 -13] -18]
Test Case:  98 | Input/Output: [[-26 -26 -30 -26] -30]
Test Case:  99 | Input/Output: [[-87 -87 -87 72] -87]
Test Case: 100 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 101 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 102 | Input/Output: [(38 38 38 38) 38]
Test Case: 103 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 104 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 105 | Input/Output: [(8 8 8 8) 8]
Test Case: 106 | Input/Output: [(45 45 45 45) 45]
Test Case: 107 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 108 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 109 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 110 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 111 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 112 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 113 | Input/Output: [(26 26 26 26) 26]
Test Case: 114 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 115 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 116 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 117 | Input/Output: [(74 74 74 74) 74]
Test Case: 118 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 119 | Input/Output: [(60 60 60 60) 60]
Test Case: 120 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 121 | Input/Output: [(45 45 45 45) 45]
Test Case: 122 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 123 | Input/Output: [(23 23 23 23) 23]
Test Case: 124 | Input/Output: [(54 54 54 54) 54]
Test Case: 125 | Input/Output: [(72 72 72 72) 72]
Test Case: 126 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 127 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 128 | Input/Output: [(37 37 37 37) 37]
Test Case: 129 | Input/Output: [(95 95 95 95) 95]
Test Case: 130 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 131 | Input/Output: [(27 27 27 27) 27]
Test Case: 132 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 133 | Input/Output: [(28 28 28 28) 28]
Test Case: 134 | Input/Output: [(76 76 76 76) 76]
Test Case: 135 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 136 | Input/Output: [(29 29 29 29) 29]
Test Case: 137 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 138 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 139 | Input/Output: [(99 99 99 99) 99]
Test Case: 140 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 141 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 142 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 143 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 146 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 147 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 148 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 149 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 150 | Input/Output: [(21 21 21 21) 21]
Test Case: 151 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 152 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 153 | Input/Output: [(58 58 58 58) 58]
Test Case: 154 | Input/Output: [(81 81 81 81) 81]
Test Case: 155 | Input/Output: [(40 40 40 40) 40]
Test Case: 156 | Input/Output: [(65 65 65 65) 65]
Test Case: 157 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 158 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 159 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 160 | Input/Output: [(88 88 88 88) 88]
Test Case: 161 | Input/Output: [(16 16 16 16) 16]
Test Case: 162 | Input/Output: [(39 39 39 39) 39]
Test Case: 163 | Input/Output: [(47 47 47 47) 47]
Test Case: 164 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 165 | Input/Output: [(35 35 35 35) 35]
Test Case: 166 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 167 | Input/Output: [(66 66 66 66) 66]
Test Case: 168 | Input/Output: [(77 77 77 77) 77]
Test Case: 169 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 170 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 171 | Input/Output: [(89 89 89 89) 89]
Test Case: 172 | Input/Output: [(49 49 49 49) 49]
Test Case: 173 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 174 | Input/Output: [(79 79 79 79) 79]
Test Case: 175 | Input/Output: [(49 49 49 49) 49]
Test Case: 176 | Input/Output: [(57 57 57 57) 57]
Test Case: 177 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 178 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 179 | Input/Output: [(77 77 77 77) 77]
Test Case: 180 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 181 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 182 | Input/Output: [(79 79 79 79) 79]
Test Case: 183 | Input/Output: [(61 61 61 61) 61]
Test Case: 184 | Input/Output: [(73 73 73 73) 73]
Test Case: 185 | Input/Output: [(43 43 43 43) 43]
Test Case: 186 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 187 | Input/Output: [(35 35 35 35) 35]
Test Case: 188 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 189 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 190 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 191 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 192 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 193 | Input/Output: [(15 15 15 15) 15]
Test Case: 194 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 195 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 196 | Input/Output: [(36 36 36 36) 36]
Test Case: 197 | Input/Output: [(80 80 80 80) 80]
Test Case: 198 | Input/Output: [(74 74 74 74) 74]
Test Case: 199 | Input/Output: [(37 37 37 37) 37]
Test Case: 200 | Input/Output: [(27 62 2 48) 2]
Test Case: 201 | Input/Output: [(18 85 69 59) 18]
Test Case: 202 | Input/Output: [(71 28 40 61) 28]
Test Case: 203 | Input/Output: [(29 95 72 28) 28]
Test Case: 204 | Input/Output: [(12 77 54 11) 11]
Test Case: 205 | Input/Output: [(34 51 36 38) 34]
Test Case: 206 | Input/Output: [(12 87 95 36) 12]
Test Case: 207 | Input/Output: [(76 15 64 72) 15]
Test Case: 208 | Input/Output: [(20 24 44 48) 20]
Test Case: 209 | Input/Output: [(73 7 57 69) 7]
Test Case: 210 | Input/Output: [(36 8 84 65) 8]
Test Case: 211 | Input/Output: [(46 75 71 74) 46]
Test Case: 212 | Input/Output: [(77 65 80 63) 63]
Test Case: 213 | Input/Output: [(59 84 66 89) 59]
Test Case: 214 | Input/Output: [(62 45 2 51) 2]
Test Case: 215 | Input/Output: [(37 3 78 96) 3]
Test Case: 216 | Input/Output: [(41 51 76 78) 41]
Test Case: 217 | Input/Output: [(56 89 79 5) 5]
Test Case: 218 | Input/Output: [(99 98 49 98) 49]
Test Case: 219 | Input/Output: [(53 80 19 66) 19]
Test Case: 220 | Input/Output: [(39 85 28 34) 28]
Test Case: 221 | Input/Output: [(32 57 16 57) 16]
Test Case: 222 | Input/Output: [(8 83 44 49) 8]
Test Case: 223 | Input/Output: [(87 32 73 19) 19]
Test Case: 224 | Input/Output: [(75 28 50 55) 28]
Test Case: 225 | Input/Output: [(83 51 81 47) 47]
Test Case: 226 | Input/Output: [(50 65 27 82) 27]
Test Case: 227 | Input/Output: [(90 53 30 90) 30]
Test Case: 228 | Input/Output: [(75 85 4 91) 4]
Test Case: 229 | Input/Output: [(60 66 73 96) 60]
Test Case: 230 | Input/Output: [(75 39 51 2) 2]
Test Case: 231 | Input/Output: [(69 62 61 86) 61]
Test Case: 232 | Input/Output: [(15 81 74 41) 15]
Test Case: 233 | Input/Output: [(71 48 86 59) 48]
Test Case: 234 | Input/Output: [(94 31 57 28) 28]
Test Case: 235 | Input/Output: [(31 85 31 46) 31]
Test Case: 236 | Input/Output: [(63 100 38 74) 38]
Test Case: 237 | Input/Output: [(56 9 51 15) 9]
Test Case: 238 | Input/Output: [(7 62 12 70) 7]
Test Case: 239 | Input/Output: [(47 48 67 100) 47]
Test Case: 240 | Input/Output: [(73 71 50 68) 50]
Test Case: 241 | Input/Output: [(82 79 8 6) 6]
Test Case: 242 | Input/Output: [(32 69 9 6) 6]
Test Case: 243 | Input/Output: [(18 8 73 99) 8]
Test Case: 244 | Input/Output: [(57 35 66 57) 35]
Test Case: 245 | Input/Output: [(70 4 80 68) 4]
Test Case: 246 | Input/Output: [(41 27 69 91) 27]
Test Case: 247 | Input/Output: [(59 46 25 76) 25]
Test Case: 248 | Input/Output: [(86 39 38 59) 38]
Test Case: 249 | Input/Output: [(29 31 29 26) 26]
Test Case: 250 | Input/Output: [(12 88 39 79) 12]
Test Case: 251 | Input/Output: [(48 40 19 57) 19]
Test Case: 252 | Input/Output: [(81 98 21 9) 9]
Test Case: 253 | Input/Output: [(70 69 43 5) 5]
Test Case: 254 | Input/Output: [(57 3 24 22) 3]
Test Case: 255 | Input/Output: [(38 73 16 23) 16]
Test Case: 256 | Input/Output: [(7 41 35 67) 7]
Test Case: 257 | Input/Output: [(57 86 25 63) 25]
Test Case: 258 | Input/Output: [(86 27 38 8) 8]
Test Case: 259 | Input/Output: [(33 0 3 24) 0]
Test Case: 260 | Input/Output: [(20 86 10 64) 10]
Test Case: 261 | Input/Output: [(66 6 64 20) 6]
Test Case: 262 | Input/Output: [(17 24 96 45) 17]
Test Case: 263 | Input/Output: [(20 59 59 28) 20]
Test Case: 264 | Input/Output: [(47 91 13 74) 13]
Test Case: 265 | Input/Output: [(25 28 67 100) 25]
Test Case: 266 | Input/Output: [(73 92 74 95) 73]
Test Case: 267 | Input/Output: [(10 37 57 44) 10]
Test Case: 268 | Input/Output: [(26 29 48 44) 26]
Test Case: 269 | Input/Output: [(58 95 1 70) 1]
Test Case: 270 | Input/Output: [(20 78 81 76) 20]
Test Case: 271 | Input/Output: [(16 73 14 58) 14]
Test Case: 272 | Input/Output: [(61 98 75 53) 53]
Test Case: 273 | Input/Output: [(98 38 78 41) 38]
Test Case: 274 | Input/Output: [(65 8 66 0) 0]
Test Case: 275 | Input/Output: [(5 68 59 57) 5]
Test Case: 276 | Input/Output: [(70 10 3 29) 3]
Test Case: 277 | Input/Output: [(61 60 66 91) 60]
Test Case: 278 | Input/Output: [(50 32 8 52) 8]
Test Case: 279 | Input/Output: [(72 32 45 100) 32]
Test Case: 280 | Input/Output: [(41 97 40 91) 40]
Test Case: 281 | Input/Output: [(86 92 87 44) 44]
Test Case: 282 | Input/Output: [(10 13 64 42) 10]
Test Case: 283 | Input/Output: [(99 34 82 79) 34]
Test Case: 284 | Input/Output: [(35 11 25 93) 11]
Test Case: 285 | Input/Output: [(25 4 2 96) 2]
Test Case: 286 | Input/Output: [(90 92 76 37) 37]
Test Case: 287 | Input/Output: [(27 56 89 24) 24]
Test Case: 288 | Input/Output: [(16 91 61 49) 16]
Test Case: 289 | Input/Output: [(91 95 23 7) 7]
Test Case: 290 | Input/Output: [(67 96 99 15) 15]
Test Case: 291 | Input/Output: [(67 65 34 94) 34]
Test Case: 292 | Input/Output: [(33 60 26 76) 26]
Test Case: 293 | Input/Output: [(63 76 51 57) 51]
Test Case: 294 | Input/Output: [(86 69 8 63) 8]
Test Case: 295 | Input/Output: [(72 9 25 97) 9]
Test Case: 296 | Input/Output: [(52 11 2 30) 2]
Test Case: 297 | Input/Output: [(51 20 70 26) 20]
Test Case: 298 | Input/Output: [(0 92 86 98) 0]
Test Case: 299 | Input/Output: [(13 38 1 16) 1]
Test Case: 300 | Input/Output: [(42 3 41 84) 3]
Test Case: 301 | Input/Output: [(80 33 98 98) 33]
Test Case: 302 | Input/Output: [(74 18 21 35) 18]
Test Case: 303 | Input/Output: [(79 98 8 64) 8]
Test Case: 304 | Input/Output: [(11 82 83 25) 11]
Test Case: 305 | Input/Output: [(100 18 80 7) 7]
Test Case: 306 | Input/Output: [(78 91 95 20) 20]
Test Case: 307 | Input/Output: [(3 66 44 35) 3]
Test Case: 308 | Input/Output: [(93 45 53 52) 45]
Test Case: 309 | Input/Output: [(95 53 97 3) 3]
Test Case: 310 | Input/Output: [(15 53 94 89) 15]
Test Case: 311 | Input/Output: [(10 63 48 3) 3]
Test Case: 312 | Input/Output: [(19 99 8 8) 8]
Test Case: 313 | Input/Output: [(40 7 54 65) 7]
Test Case: 314 | Input/Output: [(10 34 4 76) 4]
Test Case: 315 | Input/Output: [(50 39 18 24) 18]
Test Case: 316 | Input/Output: [(25 89 66 61) 25]
Test Case: 317 | Input/Output: [(54 42 2 50) 2]
Test Case: 318 | Input/Output: [(64 74 7 3) 3]
Test Case: 319 | Input/Output: [(65 63 11 78) 11]
Test Case: 320 | Input/Output: [(39 44 88 46) 39]
Test Case: 321 | Input/Output: [(79 77 69 47) 47]
Test Case: 322 | Input/Output: [(78 75 5 0) 0]
Test Case: 323 | Input/Output: [(30 87 36 87) 30]
Test Case: 324 | Input/Output: [(4 5 49 50) 4]
Test Case: 325 | Input/Output: [(87 84 12 54) 12]
Test Case: 326 | Input/Output: [(73 17 33 91) 17]
Test Case: 327 | Input/Output: [(86 32 92 23) 23]
Test Case: 328 | Input/Output: [(4 68 9 81) 4]
Test Case: 329 | Input/Output: [(7 68 5 11) 5]
Test Case: 330 | Input/Output: [(72 74 99 40) 40]
Test Case: 331 | Input/Output: [(81 11 20 86) 11]
Test Case: 332 | Input/Output: [(28 65 80 34) 28]
Test Case: 333 | Input/Output: [(26 97 63 12) 12]
Test Case: 334 | Input/Output: [(24 46 13 34) 13]
Test Case: 335 | Input/Output: [(93 51 72 100) 51]
Test Case: 336 | Input/Output: [(82 83 47 34) 34]
Test Case: 337 | Input/Output: [(61 83 6 66) 6]
Test Case: 338 | Input/Output: [(28 81 63 99) 28]
Test Case: 339 | Input/Output: [(4 34 21 2) 2]
Test Case: 340 | Input/Output: [(43 0 62 19) 0]
Test Case: 341 | Input/Output: [(60 74 39 87) 39]
Test Case: 342 | Input/Output: [(79 38 52 2) 2]
Test Case: 343 | Input/Output: [(94 11 22 81) 11]
Test Case: 344 | Input/Output: [(49 64 48 1) 1]
Test Case: 345 | Input/Output: [(66 46 47 16) 16]
Test Case: 346 | Input/Output: [(35 41 21 13) 13]
Test Case: 347 | Input/Output: [(89 71 39 100) 39]
Test Case: 348 | Input/Output: [(54 15 57 32) 15]
Test Case: 349 | Input/Output: [(47 15 69 91) 15]
Test Case: 350 | Input/Output: [(71 98 31 48) 31]
Test Case: 351 | Input/Output: [(83 29 44 18) 18]
Test Case: 352 | Input/Output: [(50 15 52 31) 15]
Test Case: 353 | Input/Output: [(84 69 63 56) 56]
Test Case: 354 | Input/Output: [(12 79 61 12) 12]
Test Case: 355 | Input/Output: [(64 87 73 50) 50]
Test Case: 356 | Input/Output: [(49 7 90 57) 7]
Test Case: 357 | Input/Output: [(93 48 18 94) 18]
Test Case: 358 | Input/Output: [(18 38 38 47) 18]
Test Case: 359 | Input/Output: [(46 72 52 33) 33]
Test Case: 360 | Input/Output: [(15 76 37 41) 15]
Test Case: 361 | Input/Output: [(27 83 76 74) 27]
Test Case: 362 | Input/Output: [(54 69 50 79) 50]
Test Case: 363 | Input/Output: [(66 35 62 83) 35]
Test Case: 364 | Input/Output: [(11 37 90 70) 11]
Test Case: 365 | Input/Output: [(79 81 10 49) 10]
Test Case: 366 | Input/Output: [(16 31 76 66) 16]
Test Case: 367 | Input/Output: [(73 57 85 72) 57]
Test Case: 368 | Input/Output: [(8 0 10 72) 0]
Test Case: 369 | Input/Output: [(23 62 96 76) 23]
Test Case: 370 | Input/Output: [(47 88 58 92) 47]
Test Case: 371 | Input/Output: [(52 6 82 6) 6]
Test Case: 372 | Input/Output: [(81 18 71 95) 18]
Test Case: 373 | Input/Output: [(35 77 19 61) 19]
Test Case: 374 | Input/Output: [(29 77 93 78) 29]
Test Case: 375 | Input/Output: [(53 88 71 70) 53]
Test Case: 376 | Input/Output: [(9 57 38 3) 3]
Test Case: 377 | Input/Output: [(45 82 62 37) 37]
Test Case: 378 | Input/Output: [(68 15 13 69) 13]
Test Case: 379 | Input/Output: [(13 62 42 84) 13]
Test Case: 380 | Input/Output: [(54 54 38 63) 38]
Test Case: 381 | Input/Output: [(84 100 55 9) 9]
Test Case: 382 | Input/Output: [(79 21 37 79) 21]
Test Case: 383 | Input/Output: [(4 92 64 69) 4]
Test Case: 384 | Input/Output: [(40 91 56 63) 40]
Test Case: 385 | Input/Output: [(17 4 84 36) 4]
Test Case: 386 | Input/Output: [(62 8 1 28) 1]
Test Case: 387 | Input/Output: [(30 11 99 24) 11]
Test Case: 388 | Input/Output: [(58 53 38 95) 38]
Test Case: 389 | Input/Output: [(69 14 0 99) 0]
Test Case: 390 | Input/Output: [(48 49 9 97) 9]
Test Case: 391 | Input/Output: [(91 76 17 52) 17]
Test Case: 392 | Input/Output: [(98 24 85 28) 24]
Test Case: 393 | Input/Output: [(70 40 85 47) 40]
Test Case: 394 | Input/Output: [(85 22 18 95) 18]
Test Case: 395 | Input/Output: [(30 78 35 43) 30]
Test Case: 396 | Input/Output: [(57 23 55 54) 23]
Test Case: 397 | Input/Output: [(37 99 54 89) 37]
Test Case: 398 | Input/Output: [(39 16 8 68) 8]
Test Case: 399 | Input/Output: [(16 96 56 16) 16]
Test Case: 400 | Input/Output: [(-94 24 -26 26) -94]
Test Case: 401 | Input/Output: [(-96 -19 -76 -19) -96]
Test Case: 402 | Input/Output: [(60 -96 -69 -10) -96]
Test Case: 403 | Input/Output: [(59 -29 72 -100) -100]
Test Case: 404 | Input/Output: [(89 -4 5 28) -4]
Test Case: 405 | Input/Output: [(-23 54 -42 -96) -96]
Test Case: 406 | Input/Output: [(-93 52 -45 3) -93]
Test Case: 407 | Input/Output: [(-66 -89 48 52) -89]
Test Case: 408 | Input/Output: [(-26 60 94 16) -26]
Test Case: 409 | Input/Output: [(42 19 11 7) 7]
Test Case: 410 | Input/Output: [(-31 6 -88 59) -88]
Test Case: 411 | Input/Output: [(67 70 8 27) 8]
Test Case: 412 | Input/Output: [(-87 -33 -11 99) -87]
Test Case: 413 | Input/Output: [(-5 -23 -30 -17) -30]
Test Case: 414 | Input/Output: [(95 24 72 -95) -95]
Test Case: 415 | Input/Output: [(85 -27 8 -65) -65]
Test Case: 416 | Input/Output: [(95 21 -79 -92) -92]
Test Case: 417 | Input/Output: [(43 -99 -2 -18) -99]
Test Case: 418 | Input/Output: [(-24 45 27 4) -24]
Test Case: 419 | Input/Output: [(73 -19 -46 -15) -46]
Test Case: 420 | Input/Output: [(96 -60 73 69) -60]
Test Case: 421 | Input/Output: [(-74 40 64 38) -74]
Test Case: 422 | Input/Output: [(-26 46 27 41) -26]
Test Case: 423 | Input/Output: [(-51 55 -94 54) -94]
Test Case: 424 | Input/Output: [(6 27 -23 15) -23]
Test Case: 425 | Input/Output: [(-88 -35 3 79) -88]
Test Case: 426 | Input/Output: [(-82 4 56 65) -82]
Test Case: 427 | Input/Output: [(-47 -49 -83 -31) -83]
Test Case: 428 | Input/Output: [(16 -53 -78 -46) -78]
Test Case: 429 | Input/Output: [(-28 -58 -2 -56) -58]
Test Case: 430 | Input/Output: [(-57 76 -78 63) -78]
Test Case: 431 | Input/Output: [(-12 81 -46 64) -46]
Test Case: 432 | Input/Output: [(99 -84 -83 9) -84]
Test Case: 433 | Input/Output: [(-43 -61 54 0) -61]
Test Case: 434 | Input/Output: [(-70 57 90 72) -70]
Test Case: 435 | Input/Output: [(-96 -21 4 -51) -96]
Test Case: 436 | Input/Output: [(-40 -60 43 -37) -60]
Test Case: 437 | Input/Output: [(-98 -75 -100 -26) -100]
Test Case: 438 | Input/Output: [(-42 -33 -74 -25) -74]
Test Case: 439 | Input/Output: [(21 -85 26 62) -85]
Test Case: 440 | Input/Output: [(95 73 29 -35) -35]
Test Case: 441 | Input/Output: [(-78 4 -55 -75) -78]
Test Case: 442 | Input/Output: [(-73 97 -92 95) -92]
Test Case: 443 | Input/Output: [(93 97 36 -62) -62]
Test Case: 444 | Input/Output: [(-33 44 -40 32) -40]
Test Case: 445 | Input/Output: [(50 -6 -23 31) -23]
Test Case: 446 | Input/Output: [(64 -45 74 -3) -45]
Test Case: 447 | Input/Output: [(54 23 -45 20) -45]
Test Case: 448 | Input/Output: [(55 45 44 59) 44]
Test Case: 449 | Input/Output: [(-29 -52 27 37) -52]
Test Case: 450 | Input/Output: [(-92 85 13 52) -92]
Test Case: 451 | Input/Output: [(26 27 68 40) 26]
Test Case: 452 | Input/Output: [(27 21 1 -96) -96]
Test Case: 453 | Input/Output: [(-30 -82 -8 -67) -82]
Test Case: 454 | Input/Output: [(22 -76 -56 -32) -76]
Test Case: 455 | Input/Output: [(79 23 51 -17) -17]
Test Case: 456 | Input/Output: [(-91 -100 65 -71) -100]
Test Case: 457 | Input/Output: [(92 -40 65 -58) -58]
Test Case: 458 | Input/Output: [(50 47 -9 64) -9]
Test Case: 459 | Input/Output: [(12 56 97 36) 12]
Test Case: 460 | Input/Output: [(25 -56 -69 -42) -69]
Test Case: 461 | Input/Output: [(-66 92 -24 -29) -66]
Test Case: 462 | Input/Output: [(56 -60 58 -59) -60]
Test Case: 463 | Input/Output: [(-60 -51 -2 72) -60]
Test Case: 464 | Input/Output: [(89 -54 -35 69) -54]
Test Case: 465 | Input/Output: [(47 -77 -16 -10) -77]
Test Case: 466 | Input/Output: [(-15 27 -10 -67) -67]
Test Case: 467 | Input/Output: [(-44 67 28 6) -44]
Test Case: 468 | Input/Output: [(83 0 26 76) 0]
Test Case: 469 | Input/Output: [(-36 39 -17 54) -36]
Test Case: 470 | Input/Output: [(-15 9 1 -57) -57]
Test Case: 471 | Input/Output: [(-3 -52 -39 69) -52]
Test Case: 472 | Input/Output: [(-55 -64 -96 6) -96]
Test Case: 473 | Input/Output: [(50 41 50 84) 41]
Test Case: 474 | Input/Output: [(-66 -10 92 79) -66]
Test Case: 475 | Input/Output: [(-65 16 -46 -62) -65]
Test Case: 476 | Input/Output: [(27 -73 -31 54) -73]
Test Case: 477 | Input/Output: [(29 74 7 -72) -72]
Test Case: 478 | Input/Output: [(99 -18 -9 -62) -62]
Test Case: 479 | Input/Output: [(67 -69 96 -10) -69]
Test Case: 480 | Input/Output: [(90 -3 -35 -95) -95]
Test Case: 481 | Input/Output: [(7 78 79 72) 7]
Test Case: 482 | Input/Output: [(-11 -80 -78 -69) -80]
Test Case: 483 | Input/Output: [(1 37 -81 11) -81]
Test Case: 484 | Input/Output: [(-81 -61 -73 23) -81]
Test Case: 485 | Input/Output: [(-96 92 59 -12) -96]
Test Case: 486 | Input/Output: [(-9 34 23 -96) -96]
Test Case: 487 | Input/Output: [(-76 99 35 -30) -76]
Test Case: 488 | Input/Output: [(-13 -33 30 74) -33]
Test Case: 489 | Input/Output: [(-24 -40 6 61) -40]
Test Case: 490 | Input/Output: [(1 9 48 -89) -89]
Test Case: 491 | Input/Output: [(26 33 -80 56) -80]
Test Case: 492 | Input/Output: [(-89 -88 93 79) -89]
Test Case: 493 | Input/Output: [(15 -53 -33 -90) -90]
Test Case: 494 | Input/Output: [(43 -19 -23 17) -23]
Test Case: 495 | Input/Output: [(14 -7 -100 -78) -100]
Test Case: 496 | Input/Output: [(-89 -51 25 15) -89]
Test Case: 497 | Input/Output: [(-87 42 95 -56) -87]
Test Case: 498 | Input/Output: [(83 47 -75 58) -75]
Test Case: 499 | Input/Output: [(-2 -15 -36 70) -36]
Test Case: 500 | Input/Output: [(-66 52 -18 58) -66]
Test Case: 501 | Input/Output: [(77 75 -48 30) -48]
Test Case: 502 | Input/Output: [(-55 13 13 -11) -55]
Test Case: 503 | Input/Output: [(73 -45 7 -14) -45]
Test Case: 504 | Input/Output: [(39 13 39 25) 13]
Test Case: 505 | Input/Output: [(-52 75 -82 60) -82]
Test Case: 506 | Input/Output: [(-90 52 -50 3) -90]
Test Case: 507 | Input/Output: [(11 -72 -16 80) -72]
Test Case: 508 | Input/Output: [(11 93 67 -75) -75]
Test Case: 509 | Input/Output: [(-85 43 -85 -39) -85]
Test Case: 510 | Input/Output: [(12 13 -66 -10) -66]
Test Case: 511 | Input/Output: [(-26 -18 -66 -15) -66]
Test Case: 512 | Input/Output: [(-28 -13 -22 74) -28]
Test Case: 513 | Input/Output: [(72 56 49 -57) -57]
Test Case: 514 | Input/Output: [(-43 -91 92 -96) -96]
Test Case: 515 | Input/Output: [(85 -67 74 48) -67]
Test Case: 516 | Input/Output: [(-49 93 2 3) -49]
Test Case: 517 | Input/Output: [(42 44 10 -18) -18]
Test Case: 518 | Input/Output: [(80 72 23 93) 23]
Test Case: 519 | Input/Output: [(25 10 -80 91) -80]
Test Case: 520 | Input/Output: [(79 58 83 4) 4]
Test Case: 521 | Input/Output: [(17 -22 -24 -98) -98]
Test Case: 522 | Input/Output: [(-1 -23 60 -40) -40]
Test Case: 523 | Input/Output: [(68 -82 35 17) -82]
Test Case: 524 | Input/Output: [(-80 -43 98 40) -80]
Test Case: 525 | Input/Output: [(-28 77 -71 -21) -71]
Test Case: 526 | Input/Output: [(-92 -85 -38 1) -92]
Test Case: 527 | Input/Output: [(37 65 -3 -11) -11]
Test Case: 528 | Input/Output: [(95 -37 34 31) -37]
Test Case: 529 | Input/Output: [(55 12 -21 34) -21]
Test Case: 530 | Input/Output: [(-19 -29 -50 34) -50]
Test Case: 531 | Input/Output: [(45 -93 -21 -85) -93]
Test Case: 532 | Input/Output: [(-64 -63 55 43) -64]
Test Case: 533 | Input/Output: [(-32 -85 50 13) -85]
Test Case: 534 | Input/Output: [(-18 17 -100 81) -100]
Test Case: 535 | Input/Output: [(31 77 17 10) 10]
Test Case: 536 | Input/Output: [(38 -4 15 -80) -80]
Test Case: 537 | Input/Output: [(-11 22 -51 82) -51]
Test Case: 538 | Input/Output: [(73 -70 26 41) -70]
Test Case: 539 | Input/Output: [(-6 -36 75 25) -36]
Test Case: 540 | Input/Output: [(-52 96 92 68) -52]
Test Case: 541 | Input/Output: [(-49 -88 22 100) -88]
Test Case: 542 | Input/Output: [(27 40 -12 75) -12]
Test Case: 543 | Input/Output: [(76 -80 -27 68) -80]
Test Case: 544 | Input/Output: [(-56 28 -83 38) -83]
Test Case: 545 | Input/Output: [(96 66 -22 71) -22]
Test Case: 546 | Input/Output: [(-47 -42 -88 -18) -88]
Test Case: 547 | Input/Output: [(-80 42 21 -87) -87]
Test Case: 548 | Input/Output: [(-51 58 80 47) -51]
Test Case: 549 | Input/Output: [(-58 44 29 6) -58]
Test Case: 550 | Input/Output: [(-70 -42 73 -5) -70]
Test Case: 551 | Input/Output: [(6 85 -53 -42) -53]
Test Case: 552 | Input/Output: [(86 -13 -52 72) -52]
Test Case: 553 | Input/Output: [(24 -11 -91 -59) -91]
Test Case: 554 | Input/Output: [(-36 -91 6 89) -91]
Test Case: 555 | Input/Output: [(-13 32 88 -80) -80]
Test Case: 556 | Input/Output: [(38 -49 -47 -4) -49]
Test Case: 557 | Input/Output: [(86 9 42 -98) -98]
Test Case: 558 | Input/Output: [(24 -77 -72 -2) -77]
Test Case: 559 | Input/Output: [(-55 -15 21 83) -55]
Test Case: 560 | Input/Output: [(-4 -75 -89 -19) -89]
Test Case: 561 | Input/Output: [(24 82 -56 9) -56]
Test Case: 562 | Input/Output: [(-68 78 76 -21) -68]
Test Case: 563 | Input/Output: [(30 -10 7 84) -10]
Test Case: 564 | Input/Output: [(88 8 31 -20) -20]
Test Case: 565 | Input/Output: [(77 11 87 41) 11]
Test Case: 566 | Input/Output: [(89 -71 66 9) -71]
Test Case: 567 | Input/Output: [(-19 18 28 89) -19]
Test Case: 568 | Input/Output: [(-4 79 98 22) -4]
Test Case: 569 | Input/Output: [(-85 -20 30 50) -85]
Test Case: 570 | Input/Output: [(-16 76 86 53) -16]
Test Case: 571 | Input/Output: [(-50 -87 -93 5) -93]
Test Case: 572 | Input/Output: [(-73 17 24 -76) -76]
Test Case: 573 | Input/Output: [(2 0 -46 7) -46]
Test Case: 574 | Input/Output: [(81 -39 98 33) -39]
Test Case: 575 | Input/Output: [(9 -45 -21 -89) -89]
Test Case: 576 | Input/Output: [(47 -24 87 28) -24]
Test Case: 577 | Input/Output: [(-67 -27 -32 20) -67]
Test Case: 578 | Input/Output: [(85 -17 93 -11) -17]
Test Case: 579 | Input/Output: [(-23 86 4 3) -23]
Test Case: 580 | Input/Output: [(94 88 45 15) 15]
Test Case: 581 | Input/Output: [(70 83 55 -26) -26]
Test Case: 582 | Input/Output: [(61 -87 33 58) -87]
Test Case: 583 | Input/Output: [(-58 43 51 -4) -58]
Test Case: 584 | Input/Output: [(-4 -51 -2 -22) -51]
Test Case: 585 | Input/Output: [(-65 -29 51 -99) -99]
Test Case: 586 | Input/Output: [(-90 59 84 64) -90]
Test Case: 587 | Input/Output: [(-41 58 -94 -5) -94]
Test Case: 588 | Input/Output: [(-66 -50 26 -22) -66]
Test Case: 589 | Input/Output: [(79 26 -81 30) -81]
Test Case: 590 | Input/Output: [(1 -60 -12 90) -60]
Test Case: 591 | Input/Output: [(-1 95 -11 17) -11]
Test Case: 592 | Input/Output: [(-10 -6 -67 -54) -67]
Test Case: 593 | Input/Output: [(-56 39 10 -84) -84]
Test Case: 594 | Input/Output: [(24 75 -78 -66) -78]
Test Case: 595 | Input/Output: [(40 -36 -91 57) -91]
Test Case: 596 | Input/Output: [(-74 -94 12 -91) -94]
Test Case: 597 | Input/Output: [(10 47 -46 29) -46]
Test Case: 598 | Input/Output: [(45 31 -43 -44) -44]
Test Case: 599 | Input/Output: [(-48 4 -72 -38) -72]
Test Case: 600 | Input/Output: [(86 3 -90 42) -90]
Test Case: 601 | Input/Output: [(85 94 53 77) 53]
Test Case: 602 | Input/Output: [(-4 -27 27 67) -27]
Test Case: 603 | Input/Output: [(-72 0 -87 -83) -87]
Test Case: 604 | Input/Output: [(-72 -40 -77 83) -77]
Test Case: 605 | Input/Output: [(93 22 65 -11) -11]
Test Case: 606 | Input/Output: [(22 39 -29 -53) -53]
Test Case: 607 | Input/Output: [(-4 75 66 8) -4]
Test Case: 608 | Input/Output: [(82 -37 39 -72) -72]
Test Case: 609 | Input/Output: [(26 97 -86 -18) -86]
Test Case: 610 | Input/Output: [(24 5 -3 -69) -69]
Test Case: 611 | Input/Output: [(-78 29 84 -72) -78]
Test Case: 612 | Input/Output: [(33 -3 4 25) -3]
Test Case: 613 | Input/Output: [(35 90 46 8) 8]
Test Case: 614 | Input/Output: [(29 -7 55 -60) -60]
Test Case: 615 | Input/Output: [(50 -36 8 -69) -69]
Test Case: 616 | Input/Output: [(75 -91 -49 74) -91]
Test Case: 617 | Input/Output: [(48 69 85 66) 48]
Test Case: 618 | Input/Output: [(-97 89 90 76) -97]
Test Case: 619 | Input/Output: [(-59 87 83 41) -59]
Test Case: 620 | Input/Output: [(-29 17 -84 -75) -84]
Test Case: 621 | Input/Output: [(-91 -43 -18 41) -91]
Test Case: 622 | Input/Output: [(84 -6 -16 -59) -59]
Test Case: 623 | Input/Output: [(-10 9 0 100) -10]
Test Case: 624 | Input/Output: [(-62 -12 25 -93) -93]
Test Case: 625 | Input/Output: [(46 55 -11 50) -11]
Test Case: 626 | Input/Output: [(89 77 -15 34) -15]
Test Case: 627 | Input/Output: [(-41 -29 -71 97) -71]
Test Case: 628 | Input/Output: [(13 35 -24 -92) -92]
Test Case: 629 | Input/Output: [(51 -61 -48 -59) -61]
Test Case: 630 | Input/Output: [(-84 -69 38 78) -84]
Test Case: 631 | Input/Output: [(50 73 -27 -47) -47]
Test Case: 632 | Input/Output: [(42 -94 -1 -37) -94]
Test Case: 633 | Input/Output: [(-48 -46 10 -59) -59]
Test Case: 634 | Input/Output: [(87 -38 11 35) -38]
Test Case: 635 | Input/Output: [(68 -74 -41 7) -74]
Test Case: 636 | Input/Output: [(-92 71 -99 32) -99]
Test Case: 637 | Input/Output: [(84 73 72 52) 52]
Test Case: 638 | Input/Output: [(-61 -72 54 19) -72]
Test Case: 639 | Input/Output: [(21 -15 21 -65) -65]
Test Case: 640 | Input/Output: [(-53 -59 -33 -17) -59]
Test Case: 641 | Input/Output: [(21 -7 -47 -84) -84]
Test Case: 642 | Input/Output: [(31 -99 -92 62) -99]
Test Case: 643 | Input/Output: [(90 33 -88 3) -88]
Test Case: 644 | Input/Output: [(-45 71 -14 30) -45]
Test Case: 645 | Input/Output: [(-56 73 -95 -10) -95]
Test Case: 646 | Input/Output: [(29 76 72 -49) -49]
Test Case: 647 | Input/Output: [(-66 31 -96 85) -96]
Test Case: 648 | Input/Output: [(65 -58 17 34) -58]
Test Case: 649 | Input/Output: [(2 24 98 60) 2]
Test Case: 650 | Input/Output: [(32 7 0 -90) -90]
Test Case: 651 | Input/Output: [(97 64 -79 56) -79]
Test Case: 652 | Input/Output: [(-9 -38 -64 -5) -64]
Test Case: 653 | Input/Output: [(-34 13 -97 81) -97]
Test Case: 654 | Input/Output: [(61 64 -59 32) -59]
Test Case: 655 | Input/Output: [(-42 -51 95 2) -51]
Test Case: 656 | Input/Output: [(-43 97 -61 85) -61]
Test Case: 657 | Input/Output: [(55 89 -46 -87) -87]
Test Case: 658 | Input/Output: [(83 66 -97 3) -97]
Test Case: 659 | Input/Output: [(89 49 -83 50) -83]
Test Case: 660 | Input/Output: [(71 35 53 70) 35]
Test Case: 661 | Input/Output: [(-74 -63 35 -16) -74]
Test Case: 662 | Input/Output: [(-7 28 85 24) -7]
Test Case: 663 | Input/Output: [(61 -72 -43 -45) -72]
Test Case: 664 | Input/Output: [(-82 10 43 -55) -82]
Test Case: 665 | Input/Output: [(35 -90 48 -99) -99]
Test Case: 666 | Input/Output: [(27 -91 74 67) -91]
Test Case: 667 | Input/Output: [(85 -52 83 41) -52]
Test Case: 668 | Input/Output: [(-65 0 -72 -94) -94]
Test Case: 669 | Input/Output: [(-51 -44 40 -95) -95]
Test Case: 670 | Input/Output: [(-23 74 -34 -54) -54]
Test Case: 671 | Input/Output: [(-99 20 -63 99) -99]
Test Case: 672 | Input/Output: [(-20 96 -56 38) -56]
Test Case: 673 | Input/Output: [(-63 -60 69 44) -63]
Test Case: 674 | Input/Output: [(53 -16 -13 24) -16]
Test Case: 675 | Input/Output: [(-12 -6 -63 40) -63]
Test Case: 676 | Input/Output: [(49 -89 34 -75) -89]
Test Case: 677 | Input/Output: [(63 -62 60 -35) -62]
Test Case: 678 | Input/Output: [(9 -12 -54 78) -54]
Test Case: 679 | Input/Output: [(13 -14 35 -18) -18]
Test Case: 680 | Input/Output: [(-8 -31 -76 2) -76]
Test Case: 681 | Input/Output: [(71 -12 26 -22) -22]
Test Case: 682 | Input/Output: [(45 72 23 3) 3]
Test Case: 683 | Input/Output: [(-86 -39 -36 76) -86]
Test Case: 684 | Input/Output: [(-5 19 92 -72) -72]
Test Case: 685 | Input/Output: [(-66 55 -26 -7) -66]
Test Case: 686 | Input/Output: [(-20 10 -54 -46) -54]
Test Case: 687 | Input/Output: [(48 31 66 -16) -16]
Test Case: 688 | Input/Output: [(-34 -74 -49 -26) -74]
Test Case: 689 | Input/Output: [(95 -70 70 9) -70]
Test Case: 690 | Input/Output: [(22 39 -27 -54) -54]
Test Case: 691 | Input/Output: [(-89 -13 -95 75) -95]
Test Case: 692 | Input/Output: [(61 59 81 -46) -46]
Test Case: 693 | Input/Output: [(58 91 -9 71) -9]
Test Case: 694 | Input/Output: [(5 -100 1 20) -100]
Test Case: 695 | Input/Output: [(96 -98 -78 -96) -98]
Test Case: 696 | Input/Output: [(-50 83 -82 -80) -82]
Test Case: 697 | Input/Output: [(53 -16 -11 -68) -68]
Test Case: 698 | Input/Output: [(27 -14 -88 100) -88]
Test Case: 699 | Input/Output: [(4 67 4 -6) -6]
Test Case: 700 | Input/Output: [(-88 39 -64 74) -88]
Test Case: 701 | Input/Output: [(58 94 -87 -90) -90]
Test Case: 702 | Input/Output: [(54 58 65 32) 32]
Test Case: 703 | Input/Output: [(-1 80 32 40) -1]
Test Case: 704 | Input/Output: [(39 -86 77 54) -86]
Test Case: 705 | Input/Output: [(48 71 -74 -10) -74]
Test Case: 706 | Input/Output: [(-57 -73 60 -69) -73]
Test Case: 707 | Input/Output: [(75 38 -15 -88) -88]
Test Case: 708 | Input/Output: [(97 -6 -21 60) -21]
Test Case: 709 | Input/Output: [(-57 -90 41 -34) -90]
Test Case: 710 | Input/Output: [(98 93 -79 -51) -79]
Test Case: 711 | Input/Output: [(-14 70 89 23) -14]
Test Case: 712 | Input/Output: [(-64 26 -75 -28) -75]
Test Case: 713 | Input/Output: [(80 -85 44 74) -85]
Test Case: 714 | Input/Output: [(-14 70 40 2) -14]
Test Case: 715 | Input/Output: [(41 -46 -95 -30) -95]
Test Case: 716 | Input/Output: [(62 -43 -19 -28) -43]
Test Case: 717 | Input/Output: [(22 52 34 -91) -91]
Test Case: 718 | Input/Output: [(-52 92 -41 30) -52]
Test Case: 719 | Input/Output: [(37 89 -1 -10) -10]
Test Case: 720 | Input/Output: [(-71 68 4 -88) -88]
Test Case: 721 | Input/Output: [(-22 47 1 -17) -22]
Test Case: 722 | Input/Output: [(-51 -65 75 5) -65]
Test Case: 723 | Input/Output: [(89 97 89 -97) -97]
Test Case: 724 | Input/Output: [(49 -73 19 -93) -93]
Test Case: 725 | Input/Output: [(17 9 66 73) 9]
Test Case: 726 | Input/Output: [(43 -71 -70 97) -71]
Test Case: 727 | Input/Output: [(-38 17 -100 41) -100]
Test Case: 728 | Input/Output: [(-99 5 39 -18) -99]
Test Case: 729 | Input/Output: [(95 86 96 28) 28]
Test Case: 730 | Input/Output: [(36 80 25 14) 14]
Test Case: 731 | Input/Output: [(43 7 -88 22) -88]
Test Case: 732 | Input/Output: [(-30 41 -7 8) -30]
Test Case: 733 | Input/Output: [(-74 -91 78 -75) -91]
Test Case: 734 | Input/Output: [(71 50 20 16) 16]
Test Case: 735 | Input/Output: [(73 48 98 80) 48]
Test Case: 736 | Input/Output: [(92 5 -5 -60) -60]
Test Case: 737 | Input/Output: [(-19 -16 -34 -14) -34]
Test Case: 738 | Input/Output: [(69 -51 -62 -6) -62]
Test Case: 739 | Input/Output: [(11 -50 76 -21) -50]
Test Case: 740 | Input/Output: [(-89 27 -68 92) -89]
Test Case: 741 | Input/Output: [(-95 -79 -77 -99) -99]
Test Case: 742 | Input/Output: [(-41 42 2 18) -41]
Test Case: 743 | Input/Output: [(79 84 -48 -3) -48]
Test Case: 744 | Input/Output: [(-54 -23 26 -85) -85]
Test Case: 745 | Input/Output: [(-28 -95 -13 57) -95]
Test Case: 746 | Input/Output: [(-80 36 -56 -6) -80]
Test Case: 747 | Input/Output: [(-70 -42 92 -18) -70]
Test Case: 748 | Input/Output: [(85 4 22 -91) -91]
Test Case: 749 | Input/Output: [(-81 -87 -14 -6) -87]
Test Case: 750 | Input/Output: [(-7 85 2 -86) -86]
Test Case: 751 | Input/Output: [(-61 55 -34 -34) -61]
Test Case: 752 | Input/Output: [(28 -87 59 75) -87]
Test Case: 753 | Input/Output: [(-71 19 43 89) -71]
Test Case: 754 | Input/Output: [(68 91 -68 -25) -68]
Test Case: 755 | Input/Output: [(59 -3 48 -48) -48]
Test Case: 756 | Input/Output: [(-75 29 -23 40) -75]
Test Case: 757 | Input/Output: [(-10 -63 58 -75) -75]
Test Case: 758 | Input/Output: [(-9 -11 -76 -40) -76]
Test Case: 759 | Input/Output: [(74 -5 -41 -35) -41]
Test Case: 760 | Input/Output: [(91 47 7 92) 7]
Test Case: 761 | Input/Output: [(-5 100 -49 91) -49]
Test Case: 762 | Input/Output: [(34 -68 -79 62) -79]
Test Case: 763 | Input/Output: [(52 -64 -69 -8) -69]
Test Case: 764 | Input/Output: [(3 -9 13 -3) -9]
Test Case: 765 | Input/Output: [(42 -6 -54 39) -54]
Test Case: 766 | Input/Output: [(90 -43 -49 -9) -49]
Test Case: 767 | Input/Output: [(99 24 43 100) 24]
Test Case: 768 | Input/Output: [(46 -14 -74 83) -74]
Test Case: 769 | Input/Output: [(16 17 8 -69) -69]
Test Case: 770 | Input/Output: [(-6 -76 72 -44) -76]
Test Case: 771 | Input/Output: [(-22 -11 32 32) -22]
Test Case: 772 | Input/Output: [(-40 -18 94 -27) -40]
Test Case: 773 | Input/Output: [(-33 -4 26 -70) -70]
Test Case: 774 | Input/Output: [(63 -36 41 -34) -36]
Test Case: 775 | Input/Output: [(77 -76 -69 -53) -76]
Test Case: 776 | Input/Output: [(59 60 11 57) 11]
Test Case: 777 | Input/Output: [(39 10 -62 62) -62]
Test Case: 778 | Input/Output: [(96 -3 16 -82) -82]
Test Case: 779 | Input/Output: [(-82 -18 57 1) -82]
Test Case: 780 | Input/Output: [(-25 34 -84 39) -84]
Test Case: 781 | Input/Output: [(-38 86 -1 6) -38]
Test Case: 782 | Input/Output: [(15 -3 100 57) -3]
Test Case: 783 | Input/Output: [(3 -88 -51 -82) -88]
Test Case: 784 | Input/Output: [(16 32 -45 1) -45]
Test Case: 785 | Input/Output: [(-72 34 -82 46) -82]
Test Case: 786 | Input/Output: [(-44 32 -32 65) -44]
Test Case: 787 | Input/Output: [(-21 -92 5 35) -92]
Test Case: 788 | Input/Output: [(91 26 -45 -43) -45]
Test Case: 789 | Input/Output: [(28 -11 67 13) -11]
Test Case: 790 | Input/Output: [(-100 -73 38 -32) -100]
Test Case: 791 | Input/Output: [(-95 -47 31 -82) -95]
Test Case: 792 | Input/Output: [(-58 -58 50 63) -58]
Test Case: 793 | Input/Output: [(-10 44 5 38) -10]
Test Case: 794 | Input/Output: [(8 -83 -83 75) -83]
Test Case: 795 | Input/Output: [(67 -11 -5 28) -11]
Test Case: 796 | Input/Output: [(89 -17 -35 90) -35]
Test Case: 797 | Input/Output: [(59 71 63 -91) -91]
Test Case: 798 | Input/Output: [(-60 -89 69 -53) -89]
Test Case: 799 | Input/Output: [(18 -62 -96 -64) -96]
Test Case: 800 | Input/Output: [(0 50 47 -63) -63]
Test Case: 801 | Input/Output: [(-47 -54 -56 97) -56]
Test Case: 802 | Input/Output: [(42 -57 -83 46) -83]
Test Case: 803 | Input/Output: [(-14 92 11 -42) -42]
Test Case: 804 | Input/Output: [(11 9 64 -3) -3]
Test Case: 805 | Input/Output: [(-36 57 -63 66) -63]
Test Case: 806 | Input/Output: [(36 -12 -70 68) -70]
Test Case: 807 | Input/Output: [(83 -46 -79 -48) -79]
Test Case: 808 | Input/Output: [(5 -8 47 -69) -69]
Test Case: 809 | Input/Output: [(97 34 -55 38) -55]
Test Case: 810 | Input/Output: [(-61 93 -84 31) -84]
Test Case: 811 | Input/Output: [(89 12 95 -96) -96]
Test Case: 812 | Input/Output: [(-68 -40 60 72) -68]
Test Case: 813 | Input/Output: [(76 84 -92 -92) -92]
Test Case: 814 | Input/Output: [(-8 -53 -99 44) -99]
Test Case: 815 | Input/Output: [(10 -61 -7 70) -61]
Test Case: 816 | Input/Output: [(-10 -22 -12 -74) -74]
Test Case: 817 | Input/Output: [(-51 62 -44 90) -51]
Test Case: 818 | Input/Output: [(-14 61 27 40) -14]
Test Case: 819 | Input/Output: [(7 -1 -26 61) -26]
Test Case: 820 | Input/Output: [(-2 -46 6 -36) -46]
Test Case: 821 | Input/Output: [(65 29 11 59) 11]
Test Case: 822 | Input/Output: [(29 29 98 76) 29]
Test Case: 823 | Input/Output: [(-35 -77 -65 -28) -77]
Test Case: 824 | Input/Output: [(-88 -1 93 -51) -88]
Test Case: 825 | Input/Output: [(-2 -34 -36 -30) -36]
Test Case: 826 | Input/Output: [(19 -50 -41 -95) -95]
Test Case: 827 | Input/Output: [(97 -62 16 -48) -62]
Test Case: 828 | Input/Output: [(-45 -67 -97 31) -97]
Test Case: 829 | Input/Output: [(-5 -19 5 91) -19]
Test Case: 830 | Input/Output: [(-66 53 90 -71) -71]
Test Case: 831 | Input/Output: [(-78 -5 -35 -7) -78]
Test Case: 832 | Input/Output: [(-8 -47 -91 60) -91]
Test Case: 833 | Input/Output: [(-43 12 79 69) -43]
Test Case: 834 | Input/Output: [(7 -94 27 37) -94]
Test Case: 835 | Input/Output: [(-68 -1 78 92) -68]
Test Case: 836 | Input/Output: [(93 3 -10 -47) -47]
Test Case: 837 | Input/Output: [(94 34 -67 -66) -67]
Test Case: 838 | Input/Output: [(-85 -31 -9 -77) -85]
Test Case: 839 | Input/Output: [(-66 51 -75 62) -75]
Test Case: 840 | Input/Output: [(-60 97 84 27) -60]
Test Case: 841 | Input/Output: [(-87 83 -77 10) -87]
Test Case: 842 | Input/Output: [(-21 -76 38 36) -76]
Test Case: 843 | Input/Output: [(-59 -75 -69 -79) -79]
Test Case: 844 | Input/Output: [(-62 22 -71 18) -71]
Test Case: 845 | Input/Output: [(-3 24 100 81) -3]
Test Case: 846 | Input/Output: [(-85 -96 75 -35) -96]
Test Case: 847 | Input/Output: [(-67 51 -81 -100) -100]
Test Case: 848 | Input/Output: [(-57 -19 -84 31) -84]
Test Case: 849 | Input/Output: [(45 -33 -4 72) -33]
Test Case: 850 | Input/Output: [(72 13 55 49) 13]
Test Case: 851 | Input/Output: [(-65 -14 -75 62) -75]
Test Case: 852 | Input/Output: [(29 18 14 -71) -71]
Test Case: 853 | Input/Output: [(-54 -82 -2 34) -82]
Test Case: 854 | Input/Output: [(-45 30 15 -96) -96]
Test Case: 855 | Input/Output: [(-11 -21 -64 -17) -64]
Test Case: 856 | Input/Output: [(-24 87 -33 -96) -96]
Test Case: 857 | Input/Output: [(68 -77 81 4) -77]
Test Case: 858 | Input/Output: [(67 96 -60 82) -60]
Test Case: 859 | Input/Output: [(47 23 34 -40) -40]
Test Case: 860 | Input/Output: [(100 56 -76 -58) -76]
Test Case: 861 | Input/Output: [(-86 50 71 -88) -88]
Test Case: 862 | Input/Output: [(-24 15 -78 80) -78]
Test Case: 863 | Input/Output: [(10 -85 -62 70) -85]
Test Case: 864 | Input/Output: [(-67 -68 34 -66) -68]
Test Case: 865 | Input/Output: [(-43 -27 45 -12) -43]
Test Case: 866 | Input/Output: [(60 -71 80 -1) -71]
Test Case: 867 | Input/Output: [(-35 69 -74 18) -74]
Test Case: 868 | Input/Output: [(82 75 -58 9) -58]
Test Case: 869 | Input/Output: [(-58 -68 61 -56) -68]
Test Case: 870 | Input/Output: [(86 -42 -52 97) -52]
Test Case: 871 | Input/Output: [(-99 21 -66 55) -99]
Test Case: 872 | Input/Output: [(-79 32 94 -83) -83]
Test Case: 873 | Input/Output: [(99 86 -28 52) -28]
Test Case: 874 | Input/Output: [(-65 43 -46 -69) -69]
Test Case: 875 | Input/Output: [(86 80 -95 78) -95]
Test Case: 876 | Input/Output: [(57 77 -26 -83) -83]
Test Case: 877 | Input/Output: [(-74 78 13 28) -74]
Test Case: 878 | Input/Output: [(-71 -54 94 37) -71]
Test Case: 879 | Input/Output: [(39 -27 -19 -41) -41]
Test Case: 880 | Input/Output: [(61 -66 -68 17) -68]
Test Case: 881 | Input/Output: [(-28 -53 70 72) -53]
Test Case: 882 | Input/Output: [(-70 50 71 59) -70]
Test Case: 883 | Input/Output: [(-33 -7 -72 -59) -72]
Test Case: 884 | Input/Output: [(-31 -43 -47 -84) -84]
Test Case: 885 | Input/Output: [(4 60 69 32) 4]
Test Case: 886 | Input/Output: [(92 -90 -29 -7) -90]
Test Case: 887 | Input/Output: [(71 -100 46 74) -100]
Test Case: 888 | Input/Output: [(67 94 -19 64) -19]
Test Case: 889 | Input/Output: [(28 20 3 1) 1]
Test Case: 890 | Input/Output: [(66 2 -12 -80) -80]
Test Case: 891 | Input/Output: [(-44 5 -21 -88) -88]
Test Case: 892 | Input/Output: [(91 -58 -49 5) -58]
Test Case: 893 | Input/Output: [(-50 48 -7 29) -50]
Test Case: 894 | Input/Output: [(-83 -89 85 -43) -89]
Test Case: 895 | Input/Output: [(-87 -68 76 47) -87]
Test Case: 896 | Input/Output: [(-89 -84 29 48) -89]
Test Case: 897 | Input/Output: [(29 -82 -98 33) -98]
Test Case: 898 | Input/Output: [(91 -29 49 -83) -83]
Test Case: 899 | Input/Output: [(-11 36 -40 20) -40]
Test Case: 900 | Input/Output: [(10 28 42 53) 10]
Test Case: 901 | Input/Output: [(23 53 38 -5) -5]
Test Case: 902 | Input/Output: [(-89 2 23 -81) -89]
Test Case: 903 | Input/Output: [(-49 3 98 -68) -68]
Test Case: 904 | Input/Output: [(-5 -18 76 55) -18]
Test Case: 905 | Input/Output: [(-72 60 98 -23) -72]
Test Case: 906 | Input/Output: [(38 -48 88 20) -48]
Test Case: 907 | Input/Output: [(-25 -24 -62 31) -62]
Test Case: 908 | Input/Output: [(-22 47 75 -48) -48]
Test Case: 909 | Input/Output: [(-40 -73 -30 53) -73]
Test Case: 910 | Input/Output: [(29 -54 -74 -23) -74]
Test Case: 911 | Input/Output: [(-84 -90 -95 -57) -95]
Test Case: 912 | Input/Output: [(96 17 -46 56) -46]
Test Case: 913 | Input/Output: [(-86 39 -7 46) -86]
Test Case: 914 | Input/Output: [(-61 69 81 -10) -61]
Test Case: 915 | Input/Output: [(73 -74 69 31) -74]
Test Case: 916 | Input/Output: [(-54 -63 -14 -1) -63]
Test Case: 917 | Input/Output: [(-26 17 43 68) -26]
Test Case: 918 | Input/Output: [(8 -9 -12 -74) -74]
Test Case: 919 | Input/Output: [(100 56 68 93) 56]
Test Case: 920 | Input/Output: [(48 -31 -22 -49) -49]
Test Case: 921 | Input/Output: [(10 23 90 56) 10]
Test Case: 922 | Input/Output: [(83 38 -1 -73) -73]
Test Case: 923 | Input/Output: [(-69 5 35 67) -69]
Test Case: 924 | Input/Output: [(57 88 -34 -66) -66]
Test Case: 925 | Input/Output: [(-91 -33 100 11) -91]
Test Case: 926 | Input/Output: [(90 -53 -16 -43) -53]
Test Case: 927 | Input/Output: [(13 -46 -19 -10) -46]
Test Case: 928 | Input/Output: [(22 74 -56 -38) -56]
Test Case: 929 | Input/Output: [(63 25 -14 -64) -64]
Test Case: 930 | Input/Output: [(92 -53 -16 47) -53]
Test Case: 931 | Input/Output: [(-81 9 -97 98) -97]
Test Case: 932 | Input/Output: [(68 -39 26 59) -39]
Test Case: 933 | Input/Output: [(-5 40 -61 -29) -61]
Test Case: 934 | Input/Output: [(-62 25 87 29) -62]
Test Case: 935 | Input/Output: [(6 72 -15 73) -15]
Test Case: 936 | Input/Output: [(87 -47 18 0) -47]
Test Case: 937 | Input/Output: [(29 39 -47 81) -47]
Test Case: 938 | Input/Output: [(19 92 -55 28) -55]
Test Case: 939 | Input/Output: [(-79 76 -75 1) -79]
Test Case: 940 | Input/Output: [(-88 86 12 22) -88]
Test Case: 941 | Input/Output: [(32 -19 95 19) -19]
Test Case: 942 | Input/Output: [(22 -100 14 40) -100]
Test Case: 943 | Input/Output: [(34 44 -84 4) -84]
Test Case: 944 | Input/Output: [(61 71 -55 16) -55]
Test Case: 945 | Input/Output: [(47 67 -22 13) -22]
Test Case: 946 | Input/Output: [(-18 72 -21 -73) -73]
Test Case: 947 | Input/Output: [(1 -19 -84 -71) -84]
Test Case: 948 | Input/Output: [(84 -90 74 34) -90]
Test Case: 949 | Input/Output: [(-40 -73 -31 -85) -85]
Test Case: 950 | Input/Output: [(48 17 -26 -39) -39]
Test Case: 951 | Input/Output: [(37 -79 62 50) -79]
Test Case: 952 | Input/Output: [(-63 98 -89 36) -89]
Test Case: 953 | Input/Output: [(-46 16 -39 -30) -46]
Test Case: 954 | Input/Output: [(69 8 -96 -70) -96]
Test Case: 955 | Input/Output: [(10 79 2 65) 2]
Test Case: 956 | Input/Output: [(93 -29 -89 3) -89]
Test Case: 957 | Input/Output: [(-88 51 87 40) -88]
Test Case: 958 | Input/Output: [(35 9 11 -9) -9]
Test Case: 959 | Input/Output: [(-18 41 52 -23) -23]
Test Case: 960 | Input/Output: [(-48 -53 42 94) -53]
Test Case: 961 | Input/Output: [(-59 -19 -73 21) -73]
Test Case: 962 | Input/Output: [(-54 55 -89 49) -89]
Test Case: 963 | Input/Output: [(-18 38 100 -31) -31]
Test Case: 964 | Input/Output: [(7 48 -41 63) -41]
Test Case: 965 | Input/Output: [(64 -93 -15 -40) -93]
Test Case: 966 | Input/Output: [(-87 -22 -17 -14) -87]
Test Case: 967 | Input/Output: [(71 -3 34 27) -3]
Test Case: 968 | Input/Output: [(-84 100 19 5) -84]
Test Case: 969 | Input/Output: [(70 -53 -22 -69) -69]
Test Case: 970 | Input/Output: [(90 25 -1 -61) -61]
Test Case: 971 | Input/Output: [(-58 96 -60 65) -60]
Test Case: 972 | Input/Output: [(52 -5 28 -89) -89]
Test Case: 973 | Input/Output: [(-20 -6 53 97) -20]
Test Case: 974 | Input/Output: [(-20 12 -16 3) -20]
Test Case: 975 | Input/Output: [(5 49 -6 42) -6]
Test Case: 976 | Input/Output: [(-14 -77 40 -7) -77]
Test Case: 977 | Input/Output: [(14 34 -61 88) -61]
Test Case: 978 | Input/Output: [(86 22 -87 67) -87]
Test Case: 979 | Input/Output: [(4 -67 -79 32) -79]
Test Case: 980 | Input/Output: [(15 36 54 -99) -99]
Test Case: 981 | Input/Output: [(-97 -94 70 -90) -97]
Test Case: 982 | Input/Output: [(-28 52 -14 73) -28]
Test Case: 983 | Input/Output: [(12 -16 -17 85) -17]
Test Case: 984 | Input/Output: [(73 1 -27 -5) -27]
Test Case: 985 | Input/Output: [(37 50 61 -61) -61]
Test Case: 986 | Input/Output: [(6 -91 -76 0) -91]
Test Case: 987 | Input/Output: [(2 21 72 -38) -38]
Test Case: 988 | Input/Output: [(-52 51 -28 -47) -52]
Test Case: 989 | Input/Output: [(23 75 19 -85) -85]
Test Case: 990 | Input/Output: [(18 -14 44 49) -14]
Test Case: 991 | Input/Output: [(76 -65 67 14) -65]
Test Case: 992 | Input/Output: [(-72 -75 34 -19) -75]
Test Case: 993 | Input/Output: [(-2 11 -10 -8) -10]
Test Case: 994 | Input/Output: [(-42 95 -49 20) -49]
Test Case: 995 | Input/Output: [(-21 24 -41 -40) -41]
Test Case: 996 | Input/Output: [(59 -99 -95 35) -99]
Test Case: 997 | Input/Output: [(-60 50 -6 -2) -60]
Test Case: 998 | Input/Output: [(-52 97 -77 -5) -77]
Test Case: 999 | Input/Output: [(-20 -90 -55 35) -90]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 82 -31 -13 117 -30 21 101 -124 -31 -70 -68 -102 117 78 -88 60
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-65 56 -65 -65] -65] [[47 47 47 63] 47] [[93 -39 -39 -39] -39] [[88 -75 -75 -75] -75] [[29 29 29 -13] -13] [[-77 66 66 66] -77] [[-24 -24 66 -24] -24] [[41 41 41 59] 41] [[-21 -21 -21 -26] -26] [[-65 26 -65 -65] -65] [(31 31 31 31) 31] [(44 44 44 44) 44] [(23 23 23 23) 23] [(58 58 58 58) 58] [(40 40 40 40) 40] [(11 33 64 92) 11] [(66 99 69 73) 66] [(89 87 15 37) 15] [(63 23 37 27) 23] [(32 81 10 68) 10] [(84 34 76 58) 34] [(95 56 10 89) 10] [(56 16 48 87) 16] [(60 56 13 94) 13] [(70 32 35 91) 32] [(70 43 99 25) 25] [(27 62 52 56) 27] [(90 55 19 2) 2] [(77 33 77 84) 33] [(72 15 34 70) 15] [(67 100 56 12) 12] [(91 18 24 55) 18] [(5 87 36 93) 5] [(100 30 39 88) 30] [(64 89 54 86) 54] [(62 -44 -21 -58) -58] [(-90 -44 -100 -73) -100] [(9 33 -33 -25) -33] [(27 10 8 -30) -30] [(50 -59 17 -96) -96] [(-4 22 -70 -60) -70] [(-74 -61 51 34) -74] [(-30 44 -74 -92) -92] [(60 -50 -95 -76) -95] [(-11 34 28 -15) -15] [(1 10 61 -80) -80] [(98 76 -72 -26) -72] [(79 -41 44 -51) -51] [(91 -90 49 -30) -90] [(88 -9 -66 14) -66] [(-25 -89 21 44) -89] [(63 -100 79 46) -100] [(25 -39 -82 -76) -82] [(46 -90 -21 -58) -90] [(10 -40 -51 -22) -51] [(12 -13 64 87) -13] [(78 -28 40 53) -28] [(-100 -18 37 -81) -100] [(50 76 46 43) 43] [(25 23 -18 -36) -36] [(-92 -31 19 12) -92] [(59 -77 21 -100) -100] [(39 -57 -44 -32) -57] [(-60 -22 -8 80) -60] [(65 49 51 -93) -93] [(90 61 -23 77) -23] [(-87 34 31 -98) -98] [(-33 -62 -50 -51) -62] [(12 -100 100 -85) -100] [(20 -99 43 -66) -99] [(-81 -25 26 -77) -81] [(76 27 61 -9) -9] [(-36 82 94 76) -36] [(44 -45 -64 -31) -64] [(29 -56 -10 10) -56] [(34 -73 64 -90) -90] [(-65 -42 92 83) -65] [(-91 -22 -19 -72) -91] [(40 8 -53 -49) -53] [(-19 -54 -58 39) -58] [(-26 80 -98 -69) -98] [(52 30 58 -31) -31] [(-30 86 -82 -89) -89] [(47 4 48 51) 4] [(88 84 67 33) 33] [(36 49 82 49) 36] [(-26 30 -10 22) -26] [(-58 -24 30 -4) -58] [(66 -74 -17 27) -74] [(25 -35 -40 -45) -45] [(84 40 -72 -21) -72] [(49 96 1 -53) -53] [(25 -89 -80 28) -89] [(-76 77 -93 -81) -93] [(-5 -83 75 -95) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: 93                 
Correct output: -75                 | Program output: 88                 
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 89                 
Correct output: 23                  | Program output: 63                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 84                 
Correct output: 10                  | Program output: 95                 
Correct output: 16                  | Program output: 56                 
Correct output: 13                  | Program output: 60                 
Correct output: 32                  | Program output: 70                 
Correct output: 25                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 90                 
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 72                 
Correct output: 12                  | Program output: 67                 
Correct output: 18                  | Program output: 91                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 100                
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: 62                 
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: 9                  
Correct output: -30                 | Program output: 27                 
Correct output: -96                 | Program output: 50                 
Correct output: -70                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -30                
Correct output: -95                 | Program output: 60                 
Correct output: -15                 | Program output: -11                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: 98                 
Correct output: -51                 | Program output: 79                 
Correct output: -90                 | Program output: 91                 
Correct output: -66                 | Program output: 88                 
Correct output: -89                 | Program output: -25                
Correct output: -100                | Program output: 63                 
Correct output: -82                 | Program output: 25                 
Correct output: -90                 | Program output: 46                 
Correct output: -51                 | Program output: 10                 
Correct output: -13                 | Program output: 12                 
Correct output: -28                 | Program output: 78                 
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 50                 
Correct output: -36                 | Program output: 25                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 59                 
Correct output: -57                 | Program output: 39                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 65                 
Correct output: -23                 | Program output: 90                 
Correct output: -98                 | Program output: -87                
Correct output: -62                 | Program output: -33                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 76                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: 44                 
Correct output: -56                 | Program output: 29                 
Correct output: -90                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: 40                 
Correct output: -58                 | Program output: -19                
Correct output: -98                 | Program output: -26                
Correct output: -31                 | Program output: 52                 
Correct output: -89                 | Program output: -30                
Correct output: 4                   | Program output: 47                 
Correct output: 33                  | Program output: 88                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: 66                 
Correct output: -45                 | Program output: 25                 
Correct output: -72                 | Program output: 84                 
Correct output: -53                 | Program output: 49                 
Correct output: -89                 | Program output: 25                 
Correct output: -93                 | Program output: -76                
Correct output: -95                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_noop boolean_empty integer_div exec_while () in1 boolean_dup_times integer_gte integer_mult integer_dup exec_dup_times () print_integer integer_add exec_do*range (exec_shove () boolean_stackdepth))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_noop boolean_empty integer_div exec_while () in1 boolean_dup_times integer_gte integer_mult integer_dup exec_dup_times () print_integer integer_add exec_do*range (exec_shove () boolean_stackdepth))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 2 9)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (1 1 1 1 1 1 1 1 2 9)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_noop boolean_empty integer_div exec_while () in1 boolean_dup_times integer_gte integer_mult integer_dup exec_dup_times () print_integer integer_add exec_do*range (exec_shove () boolean_stackdepth))
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.981
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.999 0.999 0.999 0.999 0.999 0.999 0.998 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.564
Average program size in population (points): 70.909
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 511764
--- Timings ---
Current time: 1559593861718 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 33.1%
Fitness Testing:      1.5 seconds, 62.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 56                 
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 99                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 81                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 62                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 87                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 89                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -44                
Correct output: -33                 | Program output: 33                 
Correct output: -30                 | Program output: 10                 
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: 22                 
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: 44                 
Correct output: -95                 | Program output: -50                
Correct output: -15                 | Program output: 34                 
Correct output: -80                 | Program output: 10                 
Correct output: -72                 | Program output: 76                 
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -40                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 76                 
Correct output: -36                 | Program output: 23                 
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: 34                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -22                
Correct output: -53                 | Program output: 8                  
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: 80                 
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: 30                 
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -35                
Correct output: -72                 | Program output: 40                 
Correct output: -53                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 77                 
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 2, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction 41} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction -26} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte})
Lexicase best program: (in2 print_integer integer_swap integer_add in2 boolean_flush boolean_not integer_inc exec_while () exec_shove (integer_gt exec_pop (boolean_dup_items boolean_rot) boolean_flush exec_do*count (boolean_stackdepth) integer_eq boolean_and integer_flush boolean_swap exec_shove (boolean_empty integer_gte boolean_or boolean_swap exec_y_when_autoconstructing (in4) boolean_yankdup) integer_flush boolean_flush boolean_stackdepth exec_swap (exec_k () () integer_pop integer_inc) () exec_shove (boolean_yankdup boolean_dup_times) integer_max boolean_eq exec_flush boolean_yank boolean_invert_second_then_and boolean_and integer_swap in3) integer_lte in2 exec_noop boolean_dup_times boolean_pop 41 exec_dup_times (exec_do*while () -26) exec_if (boolean_yank integer_max in2 boolean_stackdepth exec_s_when_autoconstructing (print_boolean) (integer_gte) ()) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 2, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction 41} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction -26} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte})
Zero cases best program: (in2 print_integer integer_swap integer_add in2 boolean_flush boolean_not integer_inc exec_while () exec_shove (integer_gt exec_pop (boolean_dup_items boolean_rot) boolean_flush exec_do*count (boolean_stackdepth) integer_eq boolean_and integer_flush boolean_swap exec_shove (boolean_empty integer_gte boolean_or boolean_swap exec_y_when_autoconstructing (in4) boolean_yankdup) integer_flush boolean_flush boolean_stackdepth exec_swap (exec_k () () integer_pop integer_inc) () exec_shove (boolean_yankdup boolean_dup_times) integer_max boolean_eq exec_flush boolean_yank boolean_invert_second_then_and boolean_and integer_swap in3) integer_lte in2 exec_noop boolean_dup_times boolean_pop 41 exec_dup_times (exec_do*while () -26) exec_if (boolean_yank integer_max in2 boolean_stackdepth exec_s_when_autoconstructing (print_boolean) (integer_gte) ()) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 619 1000 260 260 510 126 1000 1000 376)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (260 619 0 260 260 510 126 0 0 376)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 2, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction 41} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction -26} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte})
Best program: (in2 print_integer integer_swap integer_add in2 boolean_flush integer_pop boolean_not integer_inc in1 exec_while () exec_shove (integer_gt exec_pop (boolean_dup_items boolean_dup)) boolean_rot boolean_flush exec_do*count (boolean_stackdepth) integer_eq boolean_yankdup boolean_and integer_mod integer_flush boolean_swap exec_shove (boolean_empty integer_gte integer_flush boolean_flush exec_swap (exec_k () () integer_pop exec_y_when_autoconstructing () integer_inc) () boolean_yankdup boolean_dup_times) boolean_eq exec_flush boolean_yank boolean_invert_second_then_and boolean_and boolean_xor exec_yankdup integer_swap boolean_xor in3 integer_lte in2 exec_noop boolean_dup_times boolean_pop 41 exec_dup_times (exec_do*while () -26) exec_if (boolean_yank in2 boolean_stackdepth exec_s_when_autoconstructing (print_boolean) (integer_gte) ()) ())
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 82
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.589
Median total errors in population: 7
Error averages by case: (0.74 0.381 1.0 0.74 0.74 0.49 0.874 1.0 1.0 0.624)
Error minima by case: (0 0 1 0 0 0 0 1 1 0)
Average genome size in population (length): 44.586
Average program size in population (points): 58.707
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 997352
--- Timings ---
Current time: 1559593863535 milliseconds
Total Time:           4.3 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.7 seconds, 40.5%
Fitness Testing:      2.1 seconds, 47.7%
Report:               0.4 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 56                 
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 99                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 81                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 62                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 87                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 89                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -44                
Correct output: -33                 | Program output: 33                 
Correct output: -30                 | Program output: 10                 
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: 22                 
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: 44                 
Correct output: -95                 | Program output: -50                
Correct output: -15                 | Program output: 34                 
Correct output: -80                 | Program output: 10                 
Correct output: -72                 | Program output: 76                 
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -40                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 76                 
Correct output: -36                 | Program output: 23                 
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: 34                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -22                
Correct output: -53                 | Program output: 8                  
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: 80                 
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: 30                 
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -35                
Correct output: -72                 | Program output: 40                 
Correct output: -53                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 77                 
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction 41} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction -26} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte})
Lexicase best program: (in2 print_integer integer_swap boolean_flush integer_pop boolean_not integer_inc exec_while () exec_shove (boolean_or integer_gt exec_pop (boolean_rot) integer_shove boolean_stackdepth) integer_eq boolean_and integer_flush boolean_swap integer_shove exec_shove (exec_eq) integer_gte boolean_or boolean_swap exec_y_when_autoconstructing (in4) boolean_yankdup integer_flush boolean_flush exec_swap (exec_k () () integer_pop integer_inc) () boolean_eq exec_flush boolean_yank boolean_invert_second_then_and integer_gt boolean_and boolean_invert_second_then_and boolean_xor exec_yankdup integer_swap boolean_xor in3 in2 exec_noop boolean_dup_times boolean_pop 41 exec_dup_times (exec_do*while () -26) exec_if (boolean_yank boolean_stackdepth print_boolean) (integer_gte))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction 41} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction -26} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte})
Zero cases best program: (in2 print_integer integer_swap boolean_flush integer_pop boolean_not integer_inc exec_while () exec_shove (boolean_or integer_gt exec_pop (boolean_rot) integer_shove boolean_stackdepth) integer_eq boolean_and integer_flush boolean_swap integer_shove exec_shove (exec_eq) integer_gte boolean_or boolean_swap exec_y_when_autoconstructing (in4) boolean_yankdup integer_flush boolean_flush exec_swap (exec_k () () integer_pop integer_inc) () boolean_eq exec_flush boolean_yank boolean_invert_second_then_and integer_gt boolean_and boolean_invert_second_then_and boolean_xor exec_yankdup integer_swap boolean_xor in3 in2 exec_noop boolean_dup_times boolean_pop 41 exec_dup_times (exec_do*while () -26) exec_if (boolean_yank boolean_stackdepth print_boolean) (integer_gte))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 475 476 720 474 1 154 692 1 1)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (131 475 476 720 474 1 154 692 1 1)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 2, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction 41} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction -26} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte})
Best program: (in2 print_integer integer_swap exec_stackdepth integer_add in2 exec_when (boolean_flush integer_pop boolean_not) integer_inc exec_while () exec_shove (integer_gt exec_pop (boolean_dup_items boolean_rot) boolean_flush exec_do*count (integer_eq boolean_and integer_flush boolean_swap exec_shove (boolean_empty integer_gte boolean_or integer_stackdepth) boolean_swap exec_y_when_autoconstructing (in4) boolean_yankdup) integer_flush boolean_flush exec_swap (exec_k () () integer_pop exec_empty integer_inc) () exec_flush) boolean_yankdup boolean_frominteger boolean_dup_times integer_max boolean_eq exec_flush boolean_yank boolean_and boolean_yank boolean_xor exec_yankdup integer_swap boolean_xor boolean_dup in3 integer_lte exec_y_when_autoconstructing () in2 boolean_dup_times boolean_pop integer_lt 41 exec_dup_times (exec_do*while () -26) exec_if (boolean_yank in2 exec_s_when_autoconstructing (print_boolean) (integer_gte) ()) ())
Errors: [1 0 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 71
Size: 91
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.875
Median total errors in population: 6
Error averages by case: (0.869 0.525 0.524 0.28 0.526 0.999 0.846 0.308 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.842
Average program size in population (points): 78.58
Average percent parens in population: 0.239
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1606390
--- Timings ---
Current time: 1559593865642 milliseconds
Total Time:           6.5 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         3.0 seconds, 46.1%
Fitness Testing:      2.6 seconds, 40.5%
Report:               0.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 603
Test mean error for best: 0.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: 66                 
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 64                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 76                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 35                 
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 24                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 39                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 51                 
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: 28                 
Correct output: -80                 | Program output: 61                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: 21                 
Correct output: -100                | Program output: 79                 
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: 64                 
Correct output: -28                 | Program output: 40                 
Correct output: -100                | Program output: 37                 
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: 19                 
Correct output: -100                | Program output: 21                 
Correct output: -57                 | Program output: -44                
Correct output: -60                 | Program output: -8                 
Correct output: -93                 | Program output: 51                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 31                 
Correct output: -62                 | Program output: -50                
Correct output: -100                | Program output: 100                
Correct output: -99                 | Program output: 43                 
Correct output: -81                 | Program output: 26                 
Correct output: -9                  | Program output: 61                 
Correct output: -36                 | Program output: 94                 
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -10                
Correct output: -90                 | Program output: 64                 
Correct output: -65                 | Program output: 92                 
Correct output: -91                 | Program output: -19                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 58                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 48                 
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 82                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: 30                 
Correct output: -74                 | Program output: -17                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction 62} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_327} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction print_exec} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 boolean_shove boolean_dup integer_stackdepth integer_max boolean_frominteger integer_lte integer_lte exec_yankdup exec_yankdup exec_do*count (in3) boolean_invert_first_then_and exec_while () print_integer exec_noop boolean_or boolean_shove boolean_yankdup exec_s (exec_k_when_autoconstructing () (exec_dup_times () boolean_shove) integer_stackdepth) (exec_dup_times (exec_dup (exec_swap (exec_stackdepth exec_do*count (boolean_flush) exec_dup (exec_while (boolean_dup_items exec_y_when_autoconstructing () boolean_dup_items integer_yankdup boolean_xor exec_swap (integer_div exec_if (in2 in4 boolean_rot) (exec_noop integer_rot boolean_frominteger exec_yankdup integer_gte exec_s (exec_swap (exec_stackdepth) (exec_noop integer_dup_times in2) 62 boolean_dup_times in1 boolean_or integer_mod integer_mod integer_dec boolean_dup_times integer_empty exec_y (boolean_yank boolean_xor boolean_stackdepth in3 boolean_yankdup exec_flush) boolean_invert_first_then_and tagged_327 integer_lte integer_swap integer_gt) (exec_y (integer_add) print_exec (in1) print_boolean integer_shove boolean_and) (integer_div boolean_yankdup exec_do*count (boolean_shove exec_empty)))) ()))) ()))) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction 62} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_327} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction print_exec} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 boolean_shove boolean_dup integer_stackdepth integer_max boolean_frominteger integer_lte integer_lte exec_yankdup exec_yankdup exec_do*count (in3) boolean_invert_first_then_and exec_while () print_integer exec_noop boolean_or boolean_shove boolean_yankdup exec_s (exec_k_when_autoconstructing () (exec_dup_times () boolean_shove) integer_stackdepth) (exec_dup_times (exec_dup (exec_swap (exec_stackdepth exec_do*count (boolean_flush) exec_dup (exec_while (boolean_dup_items exec_y_when_autoconstructing () boolean_dup_items integer_yankdup boolean_xor exec_swap (integer_div exec_if (in2 in4 boolean_rot) (exec_noop integer_rot boolean_frominteger exec_yankdup integer_gte exec_s (exec_swap (exec_stackdepth) (exec_noop integer_dup_times in2) 62 boolean_dup_times in1 boolean_or integer_mod integer_mod integer_dec boolean_dup_times integer_empty exec_y (boolean_yank boolean_xor boolean_stackdepth in3 boolean_yankdup exec_flush) boolean_invert_first_then_and tagged_327 integer_lte integer_swap integer_gt) (exec_y (integer_add) print_exec (in1) print_boolean integer_shove boolean_and) (integer_div boolean_yankdup exec_do*count (boolean_shove exec_empty)))) ()))) ()))) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 156 253 246 254 153 195 254 157 168)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (657 156 253 246 254 153 195 254 157 168)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_140} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction 62} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction tag_integer_273} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_327} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty})
Best program: (in1 integer_pop boolean_shove boolean_dup exec_do*range (integer_max exec_do*while (exec_yankdup in3) boolean_invert_first_then_and) integer_yank exec_while () print_integer boolean_or exec_s (boolean_shove) (exec_dup_times (exec_dup (exec_swap (integer_empty exec_do*count (boolean_dup_items exec_y_when_autoconstructing () integer_yankdup exec_empty exec_if (exec_k (in2 integer_rot boolean_frominteger exec_yankdup integer_gte exec_stackdepth exec_swap (exec_stackdepth) (integer_dup_times tagged_140 integer_lte in2) exec_dup (exec_yankdup boolean_and 62 integer_rot exec_stackdepth in1 integer_mod integer_mod integer_gt print_integer) integer_dec boolean_dup_times exec_y (integer_shove boolean_yank boolean_xor tag_integer_273) boolean_stackdepth integer_empty) (boolean_swap)) (exec_flush) tagged_327 integer_swap integer_yank boolean_yankdup integer_gt) exec_shove (exec_y (integer_add) integer_min exec_yank integer_dec in1) integer_div exec_while () exec_do*count (exec_empty)) ()))) ())
Errors: [0 0 1 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 102
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.507
Median total errors in population: 8
Error averages by case: (0.343 0.844 0.747 0.754 0.746 0.847 0.805 0.746 0.843 0.832)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.787
Average program size in population (points): 64.762
Average percent parens in population: 0.249
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.966
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.965
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2152802
--- Timings ---
Current time: 1559593867610 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.1 seconds, 48.6%
Fitness Testing:      3.2 seconds, 37.5%
Report:               1.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 37                 
Correct output: 23                  | Program output: 27                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 58                 
Correct output: 10                  | Program output: 89                 
Correct output: 16                  | Program output: 56                 
Correct output: 13                  | Program output: 60                 
Correct output: 32                  | Program output: 70                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 70                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 88                 
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: 14                 
Correct output: -89                 | Program output: -25                
Correct output: -100                | Program output: 46                 
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -22                
Correct output: -13                 | Program output: 12                 
Correct output: -28                 | Program output: 53                 
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 77                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -31                
Correct output: -56                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: -19                
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 47                 
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: 27                 
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: 25                 
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_noop boolean_empty exec_do*range () integer_div exec_while () in1 boolean_dup_times in4 integer_min integer_dup exec_dup_times () print_integer boolean_frominteger integer_add exec_do*range (integer_yank exec_dup_times (exec_shove () boolean_stackdepth)))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_noop boolean_empty exec_do*range () integer_div exec_while () in1 boolean_dup_times in4 integer_min integer_dup exec_dup_times () print_integer boolean_frominteger integer_add exec_do*range (integer_yank exec_dup_times (exec_shove () boolean_stackdepth)))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 96 240 94 309 301 72 357 96 96)
Population mean number of elite cases: 1.90
Count of perfect (error zero) individuals by case: (240 96 240 94 309 301 72 357 96 96)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_noop boolean_empty exec_do*range () integer_div exec_while () in1 boolean_dup_times integer_gte in4 integer_min integer_dup print_integer boolean_frominteger exec_do*range (exec_while () integer_yank boolean_stackdepth))
Errors: [1 0 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 22
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 8.099
Median total errors in population: 8
Error averages by case: (0.76 0.904 0.76 0.906 0.691 0.699 0.928 0.643 0.904 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.288
Average program size in population (points): 83.162
Average percent parens in population: 0.249
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2819181
--- Timings ---
Current time: 1559593869598 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.2 seconds, 49.9%
Fitness Testing:      3.7 seconds, 35.7%
Report:               1.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 67                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: 9                  
Correct output: -30                 | Program output: 10                 
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -30                
Correct output: -95                 | Program output: -50                
Correct output: -15                 | Program output: -11                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: 76                 
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -40                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 50                 
Correct output: -36                 | Program output: 23                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: 8                  
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: -30                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -35                
Correct output: -72                 | Program output: 40                 
Correct output: -53                 | Program output: 49                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -76                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*range () integer_div exec_while () in1 boolean_dup_times integer_rot in2 in4 integer_min integer_dup exec_dup_times () print_integer boolean_frominteger boolean_invert_second_then_and integer_add boolean_and exec_do*range (exec_shove () boolean_stackdepth))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*range () integer_div exec_while () in1 boolean_dup_times integer_rot in2 in4 integer_min integer_dup exec_dup_times () print_integer boolean_frominteger boolean_invert_second_then_and integer_add boolean_and exec_do*range (exec_shove () boolean_stackdepth))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 156 626 164 295 165 148 148 658 336)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (163 156 626 164 295 165 148 148 658 336)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_593} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_noop exec_do*range () tagged_593 in2 integer_sub integer_div exec_while () in1 boolean_dup_times in4 integer_dup_items integer_min integer_dup exec_dup_times () print_integer boolean_frominteger integer_add exec_do*range (exec_shove () boolean_stackdepth))
Errors: [0 0 0 0 0 0 1 1 0 1]
Total: 3
Mean: 0.3
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.141
Median total errors in population: 6
Error averages by case: (0.837 0.844 0.374 0.836 0.705 0.835 0.852 0.852 0.342 0.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.308
Average program size in population (points): 56.193
Average percent parens in population: 0.245
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3281045
--- Timings ---
Current time: 1559593871373 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 51.5%
Fitness Testing:      4.2 seconds, 34.0%
Report:               1.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 388
Test mean error for best: 0.38800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: 28                 
Correct output: -80                 | Program output: 10                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction 34} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 62} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_integer_273} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_327} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction tag_boolean_646} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 boolean_shove boolean_dup integer_add integer_max exec_eq exec_yankdup exec_do*count (in3) boolean_invert_first_then_and in2 exec_while () integer_min print_integer boolean_yankdup integer_eq exec_y () exec_s_when_autoconstructing (exec_swap (exec_do*count (exec_y_when_autoconstructing () integer_yankdup boolean_dup_items boolean_xor integer_div exec_if (integer_dup_times in2 34 integer_rot exec_yankdup boolean_dup_items integer_dup_times integer_lte exec_yankdup 62 exec_shove (boolean_dup)) (integer_stackdepth boolean_yankdup) exec_dup_times (exec_do*range () exec_stackdepth exec_if (boolean_dup_times in2 boolean_yank in1 in1 integer_mod exec_swap () (integer_min) integer_dec integer_empty tag_integer_273) (exec_flush) integer_min integer_empty) tagged_327 boolean_yank print_newline exec_shove (boolean_dup_times) exec_swap (integer_add) (tag_boolean_646 in1) integer_div boolean_yankdup exec_empty)) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction 34} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 62} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_integer_273} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_327} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction tag_boolean_646} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 boolean_shove boolean_dup integer_add integer_max exec_eq exec_yankdup exec_do*count (in3) boolean_invert_first_then_and in2 exec_while () integer_min print_integer boolean_yankdup integer_eq exec_y () exec_s_when_autoconstructing (exec_swap (exec_do*count (exec_y_when_autoconstructing () integer_yankdup boolean_dup_items boolean_xor integer_div exec_if (integer_dup_times in2 34 integer_rot exec_yankdup boolean_dup_items integer_dup_times integer_lte exec_yankdup 62 exec_shove (boolean_dup)) (integer_stackdepth boolean_yankdup) exec_dup_times (exec_do*range () exec_stackdepth exec_if (boolean_dup_times in2 boolean_yank in1 in1 integer_mod exec_swap () (integer_min) integer_dec integer_empty tag_integer_273) (exec_flush) integer_min integer_empty) tagged_327 boolean_yank print_newline exec_shove (boolean_dup_times) exec_swap (integer_add) (tag_boolean_646 in1) integer_div boolean_yankdup exec_empty)) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 416 142 695 160 352 269 159 158 355)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (442 416 142 695 160 352 269 159 158 355)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_382} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction 34} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 62} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction 12} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_273} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_327} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction tag_boolean_646} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty})
Best program: (in1 boolean_shove boolean_dup integer_add integer_max exec_eq exec_yankdup exec_do*count (tagged_382 in3) in2 boolean_invert_first_then_and exec_while () integer_min print_integer boolean_yankdup integer_eq exec_y () exec_do*count (exec_s_when_autoconstructing (exec_dup_times (exec_swap (exec_do*count (exec_y_when_autoconstructing () integer_yankdup boolean_dup_items boolean_xor integer_dec) integer_div exec_if (integer_dup_times in2 34 integer_stackdepth integer_rot exec_yankdup exec_stackdepth) (boolean_dup_items integer_dup_times integer_lte exec_yankdup 62 exec_shove (boolean_dup)) integer_dec integer_stackdepth boolean_yankdup) (exec_dup_times (exec_do*range () exec_stackdepth boolean_dup_times boolean_yank in1 in1 integer_mod exec_swap () (integer_min) integer_dec integer_empty 12 exec_y (tag_integer_273) exec_flush) exec_when () integer_min integer_empty) tagged_327 boolean_yank print_newline boolean_and exec_shove (boolean_dup_times) exec_swap (integer_add) (tag_boolean_646 in1) integer_div boolean_yankdup exec_do*count (exec_empty))) () ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 80
Size: 106
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.852
Median total errors in population: 6
Error averages by case: (0.558 0.584 0.858 0.305 0.84 0.648 0.731 0.841 0.842 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.157
Average program size in population (points): 45.177
Average percent parens in population: 0.242
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.009
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3691203
--- Timings ---
Current time: 1559593873446 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.4 seconds, 52.6%
Fitness Testing:      4.6 seconds, 32.9%
Report:               1.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 246
Test mean error for best: 0.24600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 37                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -40                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*range () integer_div exec_while () in1 boolean_dup_times integer_rot in2 in4 integer_min integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and integer_add exec_do*range (exec_shove () boolean_dup_items boolean_stackdepth))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*range () integer_div exec_while () in1 boolean_dup_times integer_rot in2 in4 integer_min integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and integer_add exec_do*range (exec_shove () boolean_dup_items boolean_stackdepth))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (664 743 229 227 387 371 368 259 429 717)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (664 743 229 227 387 371 368 259 429 717)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*range () integer_div boolean_dup_items exec_while () in1 integer_rot in2 in4 integer_min integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and integer_add boolean_and exec_do*range (exec_shove () boolean_stackdepth))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 5.606
Median total errors in population: 5
Error averages by case: (0.336 0.257 0.771 0.773 0.613 0.629 0.632 0.741 0.571 0.283)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.541
Average program size in population (points): 77.58
Average percent parens in population: 0.242
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.01
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4331555
--- Timings ---
Current time: 1559593875499 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 51.8%
Fitness Testing:      5.3 seconds, 32.3%
Report:               2.5 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 191
Test mean error for best: 0.19100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -81                
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 76                 
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_114} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_do*range () print_boolean exec_while () boolean_dup_times tagged_114 integer_rot in3 boolean_dup in2 in4 integer_min integer_min integer_dup exec_dup_times () boolean_swap print_integer boolean_invert_second_then_and integer_add boolean_and exec_do*range (boolean_stackdepth))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 26
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_114} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_do*range () print_boolean exec_while () boolean_dup_times tagged_114 integer_rot in3 boolean_dup in2 in4 integer_min integer_min integer_dup exec_dup_times () boolean_swap print_integer boolean_invert_second_then_and integer_add boolean_and exec_do*range (boolean_stackdepth))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 26
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (616 612 209 550 459 617 642 463 505 217)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (616 612 209 550 459 617 642 463 505 217)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.11
Median total errors in population: 4
Error averages by case: (0.384 0.388 0.791 0.45 0.541 0.383 0.358 0.537 0.495 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.282
Average program size in population (points): 34.567
Average percent parens in population: 0.234
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4652648
--- Timings ---
Current time: 1559593877131 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.5 seconds, 52.8%
Fitness Testing:      5.6 seconds, 31.2%
Report:               2.8 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 28


Auto-simplifying with starting size: 28
step: 0
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 500
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1000
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1500
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2000
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2500
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3000
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3500
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4000
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4500
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 5000
program: (exec_do*range () in3 integer_div boolean_stackdepth in1 boolean_dup_times integer_rot in2 exec_k_when_autoconstructing () (in4 integer_min) integer_min integer_dup exec_dup_times () print_integer boolean_invert_second_then_and boolean_flush integer_add exec_empty boolean_and exec_shove () boolean_stackdepth)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 191
Test mean error for best: 0.19100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -81                
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 76                 
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
;;******************************
