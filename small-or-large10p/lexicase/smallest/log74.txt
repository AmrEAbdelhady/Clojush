Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-100 -100 -38 -100] -100] [[-99 -99 19 -99] -99] [[-33 72 -33 -33] -33] [[33 79 79 79] 33] [[-40 29 29 29] -40] [[5 15 15 15] 5] [[-99 25 25 25] -99] [[-52 -52 -52 -40] -52] [[-40 -57 -57 -57] -57] [[53 55 55 55] 53] [(86 86 86 86) 86] [(-94 -94 -94 -94) -94] [(-39 -39 -39 -39) -39] [(78 78 78 78) 78] [(42 42 42 42) 42] [(90 59 100 72) 59] [(76 24 72 48) 24] [(10 49 33 97) 10] [(73 1 68 56) 1] [(70 8 49 76) 8] [(40 80 69 24) 24] [(0 97 3 100) 0] [(58 10 29 40) 10] [(83 18 32 45) 18] [(49 87 54 6) 6] [(76 29 32 58) 29] [(37 23 1 85) 1] [(92 79 99 57) 57] [(25 59 45 90) 25] [(93 99 98 20) 20] [(56 76 18 90) 18] [(60 89 4 21) 4] [(89 32 84 87) 32] [(1 77 57 25) 1] [(46 72 53 92) 46] [(-94 -63 80 99) -94] [(79 -55 -18 83) -55] [(52 -87 -70 -36) -87] [(28 8 -51 -64) -64] [(-61 55 -35 69) -61] [(98 -34 -61 -49) -61] [(42 64 69 4) 4] [(57 41 1 9) 1] [(87 -42 -26 -85) -85] [(32 19 39 -83) -83] [(-3 -32 93 46) -32] [(91 -99 -85 59) -99] [(82 40 -34 -89) -89] [(8 -96 54 91) -96] [(13 61 55 96) 13] [(9 8 -19 -20) -20] [(14 52 94 -65) -65] [(-66 -73 100 36) -73] [(-48 -56 -41 23) -56] [(-37 -6 17 86) -37] [(-55 -96 -7 -48) -96] [(48 -33 -2 -1) -33] [(-61 34 4 81) -61] [(80 43 50 16) 16] [(79 17 72 -52) -52] [(-95 88 -50 -10) -95] [(97 58 61 -73) -73] [(-69 -39 94 16) -69] [(77 -31 -47 16) -47] [(60 -96 -52 7) -96] [(45 -88 -33 56) -88] [(58 59 53 29) 29] [(-19 32 30 57) -19] [(24 7 -63 -52) -63] [(-16 13 27 93) -16] [(-39 -78 89 -48) -78] [(87 -5 -76 -35) -76] [(0 100 40 -94) -94] [(81 59 74 18) 18] [(-25 -98 99 1) -98] [(-78 -3 -37 60) -78] [(36 79 -15 21) -15] [(71 33 -60 -69) -69] [(29 48 -85 82) -85] [(-73 58 9 -14) -73] [(14 97 -77 65) -77] [(-85 -66 -18 39) -85] [(60 -87 13 -72) -87] [(-46 -60 -24 -81) -81] [(-26 -73 39 13) -73] [(50 -79 33 66) -79] [(84 -79 34 -63) -79] [(-48 -40 41 -56) -56] [(-71 -74 -77 -12) -77] [(88 -85 -62 46) -85] [(95 56 14 -80) -80] [(-15 98 57 44) -15] [(-35 -10 52 -42) -42] [(99 39 36 -84) -84] [(30 52 -5 -59) -59])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-100 -100 -38 -100] -100]
Train Case:   6 | Input/Output: [[-99 -99 19 -99] -99]
Train Case:   7 | Input/Output: [[-33 72 -33 -33] -33]
Train Case:   8 | Input/Output: [[33 79 79 79] 33]
Train Case:   9 | Input/Output: [[-40 29 29 29] -40]
Train Case:  10 | Input/Output: [[5 15 15 15] 5]
Train Case:  11 | Input/Output: [[-99 25 25 25] -99]
Train Case:  12 | Input/Output: [[-52 -52 -52 -40] -52]
Train Case:  13 | Input/Output: [[-40 -57 -57 -57] -57]
Train Case:  14 | Input/Output: [[53 55 55 55] 53]
Train Case:  15 | Input/Output: [(86 86 86 86) 86]
Train Case:  16 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  17 | Input/Output: [(-39 -39 -39 -39) -39]
Train Case:  18 | Input/Output: [(78 78 78 78) 78]
Train Case:  19 | Input/Output: [(42 42 42 42) 42]
Train Case:  20 | Input/Output: [(90 59 100 72) 59]
Train Case:  21 | Input/Output: [(76 24 72 48) 24]
Train Case:  22 | Input/Output: [(10 49 33 97) 10]
Train Case:  23 | Input/Output: [(73 1 68 56) 1]
Train Case:  24 | Input/Output: [(70 8 49 76) 8]
Train Case:  25 | Input/Output: [(40 80 69 24) 24]
Train Case:  26 | Input/Output: [(0 97 3 100) 0]
Train Case:  27 | Input/Output: [(58 10 29 40) 10]
Train Case:  28 | Input/Output: [(83 18 32 45) 18]
Train Case:  29 | Input/Output: [(49 87 54 6) 6]
Train Case:  30 | Input/Output: [(76 29 32 58) 29]
Train Case:  31 | Input/Output: [(37 23 1 85) 1]
Train Case:  32 | Input/Output: [(92 79 99 57) 57]
Train Case:  33 | Input/Output: [(25 59 45 90) 25]
Train Case:  34 | Input/Output: [(93 99 98 20) 20]
Train Case:  35 | Input/Output: [(56 76 18 90) 18]
Train Case:  36 | Input/Output: [(60 89 4 21) 4]
Train Case:  37 | Input/Output: [(89 32 84 87) 32]
Train Case:  38 | Input/Output: [(1 77 57 25) 1]
Train Case:  39 | Input/Output: [(46 72 53 92) 46]
Train Case:  40 | Input/Output: [(-94 -63 80 99) -94]
Train Case:  41 | Input/Output: [(79 -55 -18 83) -55]
Train Case:  42 | Input/Output: [(52 -87 -70 -36) -87]
Train Case:  43 | Input/Output: [(28 8 -51 -64) -64]
Train Case:  44 | Input/Output: [(-61 55 -35 69) -61]
Train Case:  45 | Input/Output: [(98 -34 -61 -49) -61]
Train Case:  46 | Input/Output: [(42 64 69 4) 4]
Train Case:  47 | Input/Output: [(57 41 1 9) 1]
Train Case:  48 | Input/Output: [(87 -42 -26 -85) -85]
Train Case:  49 | Input/Output: [(32 19 39 -83) -83]
Train Case:  50 | Input/Output: [(-3 -32 93 46) -32]
Train Case:  51 | Input/Output: [(91 -99 -85 59) -99]
Train Case:  52 | Input/Output: [(82 40 -34 -89) -89]
Train Case:  53 | Input/Output: [(8 -96 54 91) -96]
Train Case:  54 | Input/Output: [(13 61 55 96) 13]
Train Case:  55 | Input/Output: [(9 8 -19 -20) -20]
Train Case:  56 | Input/Output: [(14 52 94 -65) -65]
Train Case:  57 | Input/Output: [(-66 -73 100 36) -73]
Train Case:  58 | Input/Output: [(-48 -56 -41 23) -56]
Train Case:  59 | Input/Output: [(-37 -6 17 86) -37]
Train Case:  60 | Input/Output: [(-55 -96 -7 -48) -96]
Train Case:  61 | Input/Output: [(48 -33 -2 -1) -33]
Train Case:  62 | Input/Output: [(-61 34 4 81) -61]
Train Case:  63 | Input/Output: [(80 43 50 16) 16]
Train Case:  64 | Input/Output: [(79 17 72 -52) -52]
Train Case:  65 | Input/Output: [(-95 88 -50 -10) -95]
Train Case:  66 | Input/Output: [(97 58 61 -73) -73]
Train Case:  67 | Input/Output: [(-69 -39 94 16) -69]
Train Case:  68 | Input/Output: [(77 -31 -47 16) -47]
Train Case:  69 | Input/Output: [(60 -96 -52 7) -96]
Train Case:  70 | Input/Output: [(45 -88 -33 56) -88]
Train Case:  71 | Input/Output: [(58 59 53 29) 29]
Train Case:  72 | Input/Output: [(-19 32 30 57) -19]
Train Case:  73 | Input/Output: [(24 7 -63 -52) -63]
Train Case:  74 | Input/Output: [(-16 13 27 93) -16]
Train Case:  75 | Input/Output: [(-39 -78 89 -48) -78]
Train Case:  76 | Input/Output: [(87 -5 -76 -35) -76]
Train Case:  77 | Input/Output: [(0 100 40 -94) -94]
Train Case:  78 | Input/Output: [(81 59 74 18) 18]
Train Case:  79 | Input/Output: [(-25 -98 99 1) -98]
Train Case:  80 | Input/Output: [(-78 -3 -37 60) -78]
Train Case:  81 | Input/Output: [(36 79 -15 21) -15]
Train Case:  82 | Input/Output: [(71 33 -60 -69) -69]
Train Case:  83 | Input/Output: [(29 48 -85 82) -85]
Train Case:  84 | Input/Output: [(-73 58 9 -14) -73]
Train Case:  85 | Input/Output: [(14 97 -77 65) -77]
Train Case:  86 | Input/Output: [(-85 -66 -18 39) -85]
Train Case:  87 | Input/Output: [(60 -87 13 -72) -87]
Train Case:  88 | Input/Output: [(-46 -60 -24 -81) -81]
Train Case:  89 | Input/Output: [(-26 -73 39 13) -73]
Train Case:  90 | Input/Output: [(50 -79 33 66) -79]
Train Case:  91 | Input/Output: [(84 -79 34 -63) -79]
Train Case:  92 | Input/Output: [(-48 -40 41 -56) -56]
Train Case:  93 | Input/Output: [(-71 -74 -77 -12) -77]
Train Case:  94 | Input/Output: [(88 -85 -62 46) -85]
Train Case:  95 | Input/Output: [(95 56 14 -80) -80]
Train Case:  96 | Input/Output: [(-15 98 57 44) -15]
Train Case:  97 | Input/Output: [(-35 -10 52 -42) -42]
Train Case:  98 | Input/Output: [(99 39 36 -84) -84]
Train Case:  99 | Input/Output: [(30 52 -5 -59) -59]
Test Case:   0 | Input/Output: [[68 68 68 -98] -98]
Test Case:   1 | Input/Output: [[-90 -90 -55 -90] -90]
Test Case:   2 | Input/Output: [[41 41 -5 41] -5]
Test Case:   3 | Input/Output: [[60 60 25 60] 25]
Test Case:   4 | Input/Output: [[-51 -14 -14 -14] -51]
Test Case:   5 | Input/Output: [[-27 -22 -27 -27] -27]
Test Case:   6 | Input/Output: [[3 41 3 3] 3]
Test Case:   7 | Input/Output: [[-48 -48 -48 90] -48]
Test Case:   8 | Input/Output: [[-61 -60 -61 -61] -61]
Test Case:   9 | Input/Output: [[-70 87 87 87] -70]
Test Case:  10 | Input/Output: [[-30 -30 -30 22] -30]
Test Case:  11 | Input/Output: [[97 97 97 84] 84]
Test Case:  12 | Input/Output: [[57 57 64 57] 57]
Test Case:  13 | Input/Output: [[-95 -95 75 -95] -95]
Test Case:  14 | Input/Output: [[89 89 89 -28] -28]
Test Case:  15 | Input/Output: [[-5 -82 -82 -82] -82]
Test Case:  16 | Input/Output: [[-5 -5 -64 -5] -64]
Test Case:  17 | Input/Output: [[-62 -62 -62 -34] -62]
Test Case:  18 | Input/Output: [[10 -100 10 10] -100]
Test Case:  19 | Input/Output: [[10 10 10 88] 10]
Test Case:  20 | Input/Output: [[-88 35 35 35] -88]
Test Case:  21 | Input/Output: [[45 45 48 45] 45]
Test Case:  22 | Input/Output: [[-2 76 76 76] -2]
Test Case:  23 | Input/Output: [[-68 -15 -15 -15] -68]
Test Case:  24 | Input/Output: [[81 -16 -16 -16] -16]
Test Case:  25 | Input/Output: [[-15 -15 -15 58] -15]
Test Case:  26 | Input/Output: [[29 69 69 69] 29]
Test Case:  27 | Input/Output: [[-30 -85 -30 -30] -85]
Test Case:  28 | Input/Output: [[-44 -44 -44 -100] -100]
Test Case:  29 | Input/Output: [[-35 -70 -70 -70] -70]
Test Case:  30 | Input/Output: [[46 -98 -98 -98] -98]
Test Case:  31 | Input/Output: [[19 84 84 84] 19]
Test Case:  32 | Input/Output: [[6 6 6 -32] -32]
Test Case:  33 | Input/Output: [[19 19 -25 19] -25]
Test Case:  34 | Input/Output: [[25 31 25 25] 25]
Test Case:  35 | Input/Output: [[77 77 77 -52] -52]
Test Case:  36 | Input/Output: [[90 90 90 -1] -1]
Test Case:  37 | Input/Output: [[-76 -72 -72 -72] -76]
Test Case:  38 | Input/Output: [[-18 -18 57 -18] -18]
Test Case:  39 | Input/Output: [[87 87 87 87] 87]
Test Case:  40 | Input/Output: [[-15 -15 -4 -15] -15]
Test Case:  41 | Input/Output: [[-7 -7 49 -7] -7]
Test Case:  42 | Input/Output: [[-70 40 -70 -70] -70]
Test Case:  43 | Input/Output: [[52 76 52 52] 52]
Test Case:  44 | Input/Output: [[4 4 -69 4] -69]
Test Case:  45 | Input/Output: [[98 9 98 98] 9]
Test Case:  46 | Input/Output: [[27 76 27 27] 27]
Test Case:  47 | Input/Output: [[-50 -50 -50 -42] -50]
Test Case:  48 | Input/Output: [[-38 -38 -76 -38] -76]
Test Case:  49 | Input/Output: [[41 41 41 41] 41]
Test Case:  50 | Input/Output: [[16 -21 16 16] -21]
Test Case:  51 | Input/Output: [[-82 -82 98 -82] -82]
Test Case:  52 | Input/Output: [[24 24 24 -93] -93]
Test Case:  53 | Input/Output: [[44 44 -12 44] -12]
Test Case:  54 | Input/Output: [[-52 -4 -4 -4] -52]
Test Case:  55 | Input/Output: [[91 91 -40 91] -40]
Test Case:  56 | Input/Output: [[76 16 76 76] 16]
Test Case:  57 | Input/Output: [[98 98 98 1] 1]
Test Case:  58 | Input/Output: [[-38 60 -38 -38] -38]
Test Case:  59 | Input/Output: [[-7 43 -7 -7] -7]
Test Case:  60 | Input/Output: [[61 61 61 -42] -42]
Test Case:  61 | Input/Output: [[90 90 10 90] 10]
Test Case:  62 | Input/Output: [[-31 -8 -8 -8] -31]
Test Case:  63 | Input/Output: [[-81 -81 -59 -81] -81]
Test Case:  64 | Input/Output: [[-41 -8 -41 -41] -41]
Test Case:  65 | Input/Output: [[5 5 67 5] 5]
Test Case:  66 | Input/Output: [[58 -88 58 58] -88]
Test Case:  67 | Input/Output: [[64 53 64 64] 53]
Test Case:  68 | Input/Output: [[-5 -5 -5 -73] -73]
Test Case:  69 | Input/Output: [[22 22 50 22] 22]
Test Case:  70 | Input/Output: [[31 31 0 31] 0]
Test Case:  71 | Input/Output: [[-42 -14 -42 -42] -42]
Test Case:  72 | Input/Output: [[10 -97 10 10] -97]
Test Case:  73 | Input/Output: [[15 -20 -20 -20] -20]
Test Case:  74 | Input/Output: [[-14 -14 -9 -14] -14]
Test Case:  75 | Input/Output: [[93 93 -44 93] -44]
Test Case:  76 | Input/Output: [[-60 -60 -60 49] -60]
Test Case:  77 | Input/Output: [[48 48 48 72] 48]
Test Case:  78 | Input/Output: [[35 35 35 -75] -75]
Test Case:  79 | Input/Output: [[91 -87 91 91] -87]
Test Case:  80 | Input/Output: [[-50 -50 -50 -18] -50]
Test Case:  81 | Input/Output: [[45 -34 -34 -34] -34]
Test Case:  82 | Input/Output: [[-69 -69 47 -69] -69]
Test Case:  83 | Input/Output: [[-88 -88 78 -88] -88]
Test Case:  84 | Input/Output: [[69 69 69 -96] -96]
Test Case:  85 | Input/Output: [[-41 -41 97 -41] -41]
Test Case:  86 | Input/Output: [[-33 -33 -3 -33] -33]
Test Case:  87 | Input/Output: [[-95 78 78 78] -95]
Test Case:  88 | Input/Output: [[10 10 79 10] 10]
Test Case:  89 | Input/Output: [[34 81 34 34] 34]
Test Case:  90 | Input/Output: [[10 10 -8 10] -8]
Test Case:  91 | Input/Output: [[-26 6 6 6] -26]
Test Case:  92 | Input/Output: [[39 39 -73 39] -73]
Test Case:  93 | Input/Output: [[77 77 77 62] 62]
Test Case:  94 | Input/Output: [[98 98 98 8] 8]
Test Case:  95 | Input/Output: [[37 37 37 0] 0]
Test Case:  96 | Input/Output: [[45 45 45 -7] -7]
Test Case:  97 | Input/Output: [[-28 -28 -29 -28] -29]
Test Case:  98 | Input/Output: [[-28 34 34 34] -28]
Test Case:  99 | Input/Output: [[73 83 73 73] 73]
Test Case: 100 | Input/Output: [(6 6 6 6) 6]
Test Case: 101 | Input/Output: [(94 94 94 94) 94]
Test Case: 102 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 103 | Input/Output: [(99 99 99 99) 99]
Test Case: 104 | Input/Output: [(43 43 43 43) 43]
Test Case: 105 | Input/Output: [(98 98 98 98) 98]
Test Case: 106 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 107 | Input/Output: [(71 71 71 71) 71]
Test Case: 108 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 109 | Input/Output: [(6 6 6 6) 6]
Test Case: 110 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 111 | Input/Output: [(46 46 46 46) 46]
Test Case: 112 | Input/Output: [(68 68 68 68) 68]
Test Case: 113 | Input/Output: [(23 23 23 23) 23]
Test Case: 114 | Input/Output: [(29 29 29 29) 29]
Test Case: 115 | Input/Output: [(20 20 20 20) 20]
Test Case: 116 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 117 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 118 | Input/Output: [(33 33 33 33) 33]
Test Case: 119 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 120 | Input/Output: [(27 27 27 27) 27]
Test Case: 121 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 122 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 123 | Input/Output: [(8 8 8 8) 8]
Test Case: 124 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 125 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 126 | Input/Output: [(28 28 28 28) 28]
Test Case: 127 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 128 | Input/Output: [(66 66 66 66) 66]
Test Case: 129 | Input/Output: [(68 68 68 68) 68]
Test Case: 130 | Input/Output: [(4 4 4 4) 4]
Test Case: 131 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 132 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 133 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 134 | Input/Output: [(63 63 63 63) 63]
Test Case: 135 | Input/Output: [(25 25 25 25) 25]
Test Case: 136 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 137 | Input/Output: [(21 21 21 21) 21]
Test Case: 138 | Input/Output: [(49 49 49 49) 49]
Test Case: 139 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 140 | Input/Output: [(85 85 85 85) 85]
Test Case: 141 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 142 | Input/Output: [(0 0 0 0) 0]
Test Case: 143 | Input/Output: [(24 24 24 24) 24]
Test Case: 144 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 145 | Input/Output: [(32 32 32 32) 32]
Test Case: 146 | Input/Output: [(32 32 32 32) 32]
Test Case: 147 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 148 | Input/Output: [(11 11 11 11) 11]
Test Case: 149 | Input/Output: [(73 73 73 73) 73]
Test Case: 150 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 151 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 152 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 153 | Input/Output: [(83 83 83 83) 83]
Test Case: 154 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 155 | Input/Output: [(77 77 77 77) 77]
Test Case: 156 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 157 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 158 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 159 | Input/Output: [(21 21 21 21) 21]
Test Case: 160 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 161 | Input/Output: [(58 58 58 58) 58]
Test Case: 162 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 163 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 164 | Input/Output: [(13 13 13 13) 13]
Test Case: 165 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 166 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 167 | Input/Output: [(52 52 52 52) 52]
Test Case: 168 | Input/Output: [(26 26 26 26) 26]
Test Case: 169 | Input/Output: [(85 85 85 85) 85]
Test Case: 170 | Input/Output: [(45 45 45 45) 45]
Test Case: 171 | Input/Output: [(64 64 64 64) 64]
Test Case: 172 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 173 | Input/Output: [(16 16 16 16) 16]
Test Case: 174 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 175 | Input/Output: [(57 57 57 57) 57]
Test Case: 176 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 177 | Input/Output: [(0 0 0 0) 0]
Test Case: 178 | Input/Output: [(87 87 87 87) 87]
Test Case: 179 | Input/Output: [(51 51 51 51) 51]
Test Case: 180 | Input/Output: [(57 57 57 57) 57]
Test Case: 181 | Input/Output: [(83 83 83 83) 83]
Test Case: 182 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 183 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 184 | Input/Output: [(79 79 79 79) 79]
Test Case: 185 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 186 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 187 | Input/Output: [(63 63 63 63) 63]
Test Case: 188 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 189 | Input/Output: [(97 97 97 97) 97]
Test Case: 190 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 191 | Input/Output: [(70 70 70 70) 70]
Test Case: 192 | Input/Output: [(10 10 10 10) 10]
Test Case: 193 | Input/Output: [(51 51 51 51) 51]
Test Case: 194 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 195 | Input/Output: [(76 76 76 76) 76]
Test Case: 196 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 197 | Input/Output: [(66 66 66 66) 66]
Test Case: 198 | Input/Output: [(56 56 56 56) 56]
Test Case: 199 | Input/Output: [(76 76 76 76) 76]
Test Case: 200 | Input/Output: [(63 38 10 5) 5]
Test Case: 201 | Input/Output: [(62 5 16 65) 5]
Test Case: 202 | Input/Output: [(88 55 44 74) 44]
Test Case: 203 | Input/Output: [(20 37 32 94) 20]
Test Case: 204 | Input/Output: [(89 0 35 55) 0]
Test Case: 205 | Input/Output: [(65 1 34 6) 1]
Test Case: 206 | Input/Output: [(52 68 11 44) 11]
Test Case: 207 | Input/Output: [(76 99 51 79) 51]
Test Case: 208 | Input/Output: [(97 12 32 41) 12]
Test Case: 209 | Input/Output: [(58 86 96 87) 58]
Test Case: 210 | Input/Output: [(98 39 9 49) 9]
Test Case: 211 | Input/Output: [(23 23 54 46) 23]
Test Case: 212 | Input/Output: [(38 85 24 2) 2]
Test Case: 213 | Input/Output: [(63 99 77 45) 45]
Test Case: 214 | Input/Output: [(52 86 72 40) 40]
Test Case: 215 | Input/Output: [(6 59 58 37) 6]
Test Case: 216 | Input/Output: [(99 16 34 79) 16]
Test Case: 217 | Input/Output: [(84 69 0 87) 0]
Test Case: 218 | Input/Output: [(33 23 94 55) 23]
Test Case: 219 | Input/Output: [(10 15 47 24) 10]
Test Case: 220 | Input/Output: [(9 40 50 25) 9]
Test Case: 221 | Input/Output: [(84 24 14 6) 6]
Test Case: 222 | Input/Output: [(100 100 86 27) 27]
Test Case: 223 | Input/Output: [(10 63 43 67) 10]
Test Case: 224 | Input/Output: [(44 74 51 94) 44]
Test Case: 225 | Input/Output: [(26 78 67 50) 26]
Test Case: 226 | Input/Output: [(78 65 35 33) 33]
Test Case: 227 | Input/Output: [(99 16 57 84) 16]
Test Case: 228 | Input/Output: [(50 14 55 38) 14]
Test Case: 229 | Input/Output: [(79 51 82 90) 51]
Test Case: 230 | Input/Output: [(93 32 34 39) 32]
Test Case: 231 | Input/Output: [(74 9 44 12) 9]
Test Case: 232 | Input/Output: [(100 70 42 35) 35]
Test Case: 233 | Input/Output: [(99 65 1 22) 1]
Test Case: 234 | Input/Output: [(17 90 78 22) 17]
Test Case: 235 | Input/Output: [(67 30 91 19) 19]
Test Case: 236 | Input/Output: [(48 95 91 4) 4]
Test Case: 237 | Input/Output: [(94 41 27 37) 27]
Test Case: 238 | Input/Output: [(81 100 12 96) 12]
Test Case: 239 | Input/Output: [(18 94 4 39) 4]
Test Case: 240 | Input/Output: [(13 25 21 51) 13]
Test Case: 241 | Input/Output: [(77 21 99 28) 21]
Test Case: 242 | Input/Output: [(6 20 5 95) 5]
Test Case: 243 | Input/Output: [(12 53 88 22) 12]
Test Case: 244 | Input/Output: [(15 55 19 71) 15]
Test Case: 245 | Input/Output: [(70 29 15 35) 15]
Test Case: 246 | Input/Output: [(55 23 95 81) 23]
Test Case: 247 | Input/Output: [(13 6 27 14) 6]
Test Case: 248 | Input/Output: [(89 28 89 30) 28]
Test Case: 249 | Input/Output: [(52 54 49 46) 46]
Test Case: 250 | Input/Output: [(88 95 92 89) 88]
Test Case: 251 | Input/Output: [(21 52 5 20) 5]
Test Case: 252 | Input/Output: [(78 57 18 94) 18]
Test Case: 253 | Input/Output: [(7 33 96 98) 7]
Test Case: 254 | Input/Output: [(85 14 5 6) 5]
Test Case: 255 | Input/Output: [(75 52 20 11) 11]
Test Case: 256 | Input/Output: [(93 19 12 9) 9]
Test Case: 257 | Input/Output: [(79 88 72 16) 16]
Test Case: 258 | Input/Output: [(23 78 35 99) 23]
Test Case: 259 | Input/Output: [(86 31 96 45) 31]
Test Case: 260 | Input/Output: [(75 39 28 3) 3]
Test Case: 261 | Input/Output: [(19 15 62 67) 15]
Test Case: 262 | Input/Output: [(48 31 39 70) 31]
Test Case: 263 | Input/Output: [(84 28 30 24) 24]
Test Case: 264 | Input/Output: [(84 70 42 29) 29]
Test Case: 265 | Input/Output: [(72 48 53 76) 48]
Test Case: 266 | Input/Output: [(79 46 94 69) 46]
Test Case: 267 | Input/Output: [(84 28 87 28) 28]
Test Case: 268 | Input/Output: [(45 59 4 12) 4]
Test Case: 269 | Input/Output: [(71 68 11 71) 11]
Test Case: 270 | Input/Output: [(67 92 27 66) 27]
Test Case: 271 | Input/Output: [(44 74 69 34) 34]
Test Case: 272 | Input/Output: [(71 78 11 84) 11]
Test Case: 273 | Input/Output: [(99 84 3 84) 3]
Test Case: 274 | Input/Output: [(93 58 68 3) 3]
Test Case: 275 | Input/Output: [(7 38 22 44) 7]
Test Case: 276 | Input/Output: [(26 20 82 85) 20]
Test Case: 277 | Input/Output: [(46 45 59 15) 15]
Test Case: 278 | Input/Output: [(17 20 2 25) 2]
Test Case: 279 | Input/Output: [(59 1 94 37) 1]
Test Case: 280 | Input/Output: [(80 60 99 80) 60]
Test Case: 281 | Input/Output: [(68 52 79 83) 52]
Test Case: 282 | Input/Output: [(96 8 35 13) 8]
Test Case: 283 | Input/Output: [(64 58 65 43) 43]
Test Case: 284 | Input/Output: [(48 66 99 63) 48]
Test Case: 285 | Input/Output: [(26 87 38 11) 11]
Test Case: 286 | Input/Output: [(33 34 88 69) 33]
Test Case: 287 | Input/Output: [(86 28 59 40) 28]
Test Case: 288 | Input/Output: [(68 37 46 60) 37]
Test Case: 289 | Input/Output: [(12 72 97 33) 12]
Test Case: 290 | Input/Output: [(41 26 14 27) 14]
Test Case: 291 | Input/Output: [(20 56 97 43) 20]
Test Case: 292 | Input/Output: [(64 85 57 30) 30]
Test Case: 293 | Input/Output: [(56 92 94 81) 56]
Test Case: 294 | Input/Output: [(31 86 45 35) 31]
Test Case: 295 | Input/Output: [(67 55 38 25) 25]
Test Case: 296 | Input/Output: [(45 67 11 88) 11]
Test Case: 297 | Input/Output: [(60 38 81 31) 31]
Test Case: 298 | Input/Output: [(27 16 94 53) 16]
Test Case: 299 | Input/Output: [(69 82 19 80) 19]
Test Case: 300 | Input/Output: [(82 17 91 16) 16]
Test Case: 301 | Input/Output: [(16 6 6 65) 6]
Test Case: 302 | Input/Output: [(43 54 52 55) 43]
Test Case: 303 | Input/Output: [(40 97 10 1) 1]
Test Case: 304 | Input/Output: [(81 87 73 34) 34]
Test Case: 305 | Input/Output: [(55 73 30 74) 30]
Test Case: 306 | Input/Output: [(27 48 86 95) 27]
Test Case: 307 | Input/Output: [(64 83 96 24) 24]
Test Case: 308 | Input/Output: [(70 8 17 43) 8]
Test Case: 309 | Input/Output: [(44 18 53 72) 18]
Test Case: 310 | Input/Output: [(84 78 78 16) 16]
Test Case: 311 | Input/Output: [(23 51 77 2) 2]
Test Case: 312 | Input/Output: [(14 21 33 28) 14]
Test Case: 313 | Input/Output: [(41 98 44 75) 41]
Test Case: 314 | Input/Output: [(97 1 28 39) 1]
Test Case: 315 | Input/Output: [(20 23 42 66) 20]
Test Case: 316 | Input/Output: [(69 50 16 71) 16]
Test Case: 317 | Input/Output: [(97 58 60 17) 17]
Test Case: 318 | Input/Output: [(79 68 30 39) 30]
Test Case: 319 | Input/Output: [(80 71 16 56) 16]
Test Case: 320 | Input/Output: [(74 96 67 46) 46]
Test Case: 321 | Input/Output: [(83 91 13 97) 13]
Test Case: 322 | Input/Output: [(46 82 32 35) 32]
Test Case: 323 | Input/Output: [(19 44 25 1) 1]
Test Case: 324 | Input/Output: [(96 95 20 81) 20]
Test Case: 325 | Input/Output: [(23 40 83 84) 23]
Test Case: 326 | Input/Output: [(79 13 42 71) 13]
Test Case: 327 | Input/Output: [(9 65 62 99) 9]
Test Case: 328 | Input/Output: [(0 32 88 4) 0]
Test Case: 329 | Input/Output: [(44 45 97 80) 44]
Test Case: 330 | Input/Output: [(77 9 68 66) 9]
Test Case: 331 | Input/Output: [(77 72 6 46) 6]
Test Case: 332 | Input/Output: [(15 95 26 56) 15]
Test Case: 333 | Input/Output: [(97 94 71 3) 3]
Test Case: 334 | Input/Output: [(3 88 75 6) 3]
Test Case: 335 | Input/Output: [(68 33 89 25) 25]
Test Case: 336 | Input/Output: [(15 23 49 57) 15]
Test Case: 337 | Input/Output: [(65 44 4 89) 4]
Test Case: 338 | Input/Output: [(13 59 11 36) 11]
Test Case: 339 | Input/Output: [(2 47 81 15) 2]
Test Case: 340 | Input/Output: [(41 79 52 22) 22]
Test Case: 341 | Input/Output: [(80 88 99 30) 30]
Test Case: 342 | Input/Output: [(48 5 76 31) 5]
Test Case: 343 | Input/Output: [(30 68 89 87) 30]
Test Case: 344 | Input/Output: [(12 4 18 89) 4]
Test Case: 345 | Input/Output: [(44 58 69 23) 23]
Test Case: 346 | Input/Output: [(54 58 63 41) 41]
Test Case: 347 | Input/Output: [(11 66 12 81) 11]
Test Case: 348 | Input/Output: [(62 80 15 46) 15]
Test Case: 349 | Input/Output: [(66 47 7 1) 1]
Test Case: 350 | Input/Output: [(43 29 96 24) 24]
Test Case: 351 | Input/Output: [(99 8 49 99) 8]
Test Case: 352 | Input/Output: [(16 48 51 75) 16]
Test Case: 353 | Input/Output: [(22 54 74 76) 22]
Test Case: 354 | Input/Output: [(2 95 76 98) 2]
Test Case: 355 | Input/Output: [(76 40 1 8) 1]
Test Case: 356 | Input/Output: [(58 26 6 2) 2]
Test Case: 357 | Input/Output: [(71 26 77 23) 23]
Test Case: 358 | Input/Output: [(60 45 30 34) 30]
Test Case: 359 | Input/Output: [(71 1 2 1) 1]
Test Case: 360 | Input/Output: [(74 52 32 80) 32]
Test Case: 361 | Input/Output: [(62 40 57 12) 12]
Test Case: 362 | Input/Output: [(11 92 47 95) 11]
Test Case: 363 | Input/Output: [(90 52 85 84) 52]
Test Case: 364 | Input/Output: [(50 36 34 59) 34]
Test Case: 365 | Input/Output: [(7 25 57 83) 7]
Test Case: 366 | Input/Output: [(2 46 5 75) 2]
Test Case: 367 | Input/Output: [(24 27 73 86) 24]
Test Case: 368 | Input/Output: [(58 66 38 31) 31]
Test Case: 369 | Input/Output: [(7 83 28 42) 7]
Test Case: 370 | Input/Output: [(92 60 25 84) 25]
Test Case: 371 | Input/Output: [(47 52 37 53) 37]
Test Case: 372 | Input/Output: [(62 63 29 53) 29]
Test Case: 373 | Input/Output: [(21 1 86 69) 1]
Test Case: 374 | Input/Output: [(55 40 47 20) 20]
Test Case: 375 | Input/Output: [(8 15 91 79) 8]
Test Case: 376 | Input/Output: [(22 14 63 82) 14]
Test Case: 377 | Input/Output: [(97 93 39 20) 20]
Test Case: 378 | Input/Output: [(13 58 21 78) 13]
Test Case: 379 | Input/Output: [(79 94 35 63) 35]
Test Case: 380 | Input/Output: [(86 98 23 45) 23]
Test Case: 381 | Input/Output: [(13 52 25 32) 13]
Test Case: 382 | Input/Output: [(15 24 62 87) 15]
Test Case: 383 | Input/Output: [(44 1 42 99) 1]
Test Case: 384 | Input/Output: [(87 47 67 81) 47]
Test Case: 385 | Input/Output: [(87 31 21 6) 6]
Test Case: 386 | Input/Output: [(32 2 63 79) 2]
Test Case: 387 | Input/Output: [(33 90 63 73) 33]
Test Case: 388 | Input/Output: [(46 33 0 89) 0]
Test Case: 389 | Input/Output: [(47 4 49 33) 4]
Test Case: 390 | Input/Output: [(24 24 62 99) 24]
Test Case: 391 | Input/Output: [(84 26 25 76) 25]
Test Case: 392 | Input/Output: [(16 62 91 93) 16]
Test Case: 393 | Input/Output: [(80 20 33 49) 20]
Test Case: 394 | Input/Output: [(48 4 22 83) 4]
Test Case: 395 | Input/Output: [(66 1 75 68) 1]
Test Case: 396 | Input/Output: [(8 98 83 68) 8]
Test Case: 397 | Input/Output: [(57 90 66 36) 36]
Test Case: 398 | Input/Output: [(59 89 10 88) 10]
Test Case: 399 | Input/Output: [(40 8 6 87) 6]
Test Case: 400 | Input/Output: [(21 -22 66 -73) -73]
Test Case: 401 | Input/Output: [(-59 63 -30 22) -59]
Test Case: 402 | Input/Output: [(-74 -12 89 -49) -74]
Test Case: 403 | Input/Output: [(41 26 -27 48) -27]
Test Case: 404 | Input/Output: [(-10 -43 52 86) -43]
Test Case: 405 | Input/Output: [(-100 -56 3 -17) -100]
Test Case: 406 | Input/Output: [(77 0 24 -92) -92]
Test Case: 407 | Input/Output: [(94 77 -33 53) -33]
Test Case: 408 | Input/Output: [(59 80 81 0) 0]
Test Case: 409 | Input/Output: [(70 -77 -45 -92) -92]
Test Case: 410 | Input/Output: [(-16 -63 43 -16) -63]
Test Case: 411 | Input/Output: [(-86 -70 91 4) -86]
Test Case: 412 | Input/Output: [(80 95 -27 24) -27]
Test Case: 413 | Input/Output: [(14 -7 -87 -29) -87]
Test Case: 414 | Input/Output: [(16 32 47 60) 16]
Test Case: 415 | Input/Output: [(-93 -14 13 3) -93]
Test Case: 416 | Input/Output: [(46 -38 9 11) -38]
Test Case: 417 | Input/Output: [(-30 -49 68 55) -49]
Test Case: 418 | Input/Output: [(49 21 58 -83) -83]
Test Case: 419 | Input/Output: [(-74 6 39 -20) -74]
Test Case: 420 | Input/Output: [(-64 53 57 -73) -73]
Test Case: 421 | Input/Output: [(88 16 35 69) 16]
Test Case: 422 | Input/Output: [(59 3 -44 -86) -86]
Test Case: 423 | Input/Output: [(1 -62 -99 -31) -99]
Test Case: 424 | Input/Output: [(-47 -2 -22 41) -47]
Test Case: 425 | Input/Output: [(2 0 -85 53) -85]
Test Case: 426 | Input/Output: [(-37 13 26 5) -37]
Test Case: 427 | Input/Output: [(95 66 25 -34) -34]
Test Case: 428 | Input/Output: [(-24 6 78 1) -24]
Test Case: 429 | Input/Output: [(-66 33 23 54) -66]
Test Case: 430 | Input/Output: [(51 93 -34 84) -34]
Test Case: 431 | Input/Output: [(10 34 -77 85) -77]
Test Case: 432 | Input/Output: [(-31 13 30 95) -31]
Test Case: 433 | Input/Output: [(24 90 21 33) 21]
Test Case: 434 | Input/Output: [(56 -50 -70 -23) -70]
Test Case: 435 | Input/Output: [(64 -46 -3 90) -46]
Test Case: 436 | Input/Output: [(39 97 73 42) 39]
Test Case: 437 | Input/Output: [(86 42 -26 96) -26]
Test Case: 438 | Input/Output: [(-2 6 -16 84) -16]
Test Case: 439 | Input/Output: [(89 -71 -28 51) -71]
Test Case: 440 | Input/Output: [(-84 94 68 57) -84]
Test Case: 441 | Input/Output: [(33 -13 -82 20) -82]
Test Case: 442 | Input/Output: [(53 -30 74 94) -30]
Test Case: 443 | Input/Output: [(-32 95 77 -92) -92]
Test Case: 444 | Input/Output: [(90 -7 -57 -78) -78]
Test Case: 445 | Input/Output: [(15 -40 62 -63) -63]
Test Case: 446 | Input/Output: [(-60 20 -50 -45) -60]
Test Case: 447 | Input/Output: [(-20 -82 83 -52) -82]
Test Case: 448 | Input/Output: [(-61 -80 -12 72) -80]
Test Case: 449 | Input/Output: [(28 37 -48 -95) -95]
Test Case: 450 | Input/Output: [(-44 100 59 -41) -44]
Test Case: 451 | Input/Output: [(7 -60 -16 60) -60]
Test Case: 452 | Input/Output: [(1 61 -19 75) -19]
Test Case: 453 | Input/Output: [(16 16 38 16) 16]
Test Case: 454 | Input/Output: [(69 -5 -56 -18) -56]
Test Case: 455 | Input/Output: [(35 -49 -68 91) -68]
Test Case: 456 | Input/Output: [(55 -13 -33 -25) -33]
Test Case: 457 | Input/Output: [(17 37 -45 20) -45]
Test Case: 458 | Input/Output: [(83 94 78 -68) -68]
Test Case: 459 | Input/Output: [(-96 88 -90 -87) -96]
Test Case: 460 | Input/Output: [(-85 43 -77 -25) -85]
Test Case: 461 | Input/Output: [(-50 -72 32 81) -72]
Test Case: 462 | Input/Output: [(55 -97 -61 74) -97]
Test Case: 463 | Input/Output: [(-93 20 -85 17) -93]
Test Case: 464 | Input/Output: [(61 -41 -34 36) -41]
Test Case: 465 | Input/Output: [(-69 38 -70 -61) -70]
Test Case: 466 | Input/Output: [(-44 1 32 47) -44]
Test Case: 467 | Input/Output: [(2 22 1 7) 1]
Test Case: 468 | Input/Output: [(-78 -52 -95 -41) -95]
Test Case: 469 | Input/Output: [(18 43 57 -63) -63]
Test Case: 470 | Input/Output: [(71 56 53 95) 53]
Test Case: 471 | Input/Output: [(100 -27 -22 42) -27]
Test Case: 472 | Input/Output: [(64 77 88 43) 43]
Test Case: 473 | Input/Output: [(-30 -31 11 56) -31]
Test Case: 474 | Input/Output: [(32 -64 -37 43) -64]
Test Case: 475 | Input/Output: [(-40 -25 -53 -5) -53]
Test Case: 476 | Input/Output: [(-78 -43 -69 -84) -84]
Test Case: 477 | Input/Output: [(-16 -40 91 -27) -40]
Test Case: 478 | Input/Output: [(65 -62 -80 -81) -81]
Test Case: 479 | Input/Output: [(21 10 -75 -75) -75]
Test Case: 480 | Input/Output: [(-96 -60 -55 -65) -96]
Test Case: 481 | Input/Output: [(-98 57 66 -79) -98]
Test Case: 482 | Input/Output: [(-8 100 39 -30) -30]
Test Case: 483 | Input/Output: [(24 -94 -29 -38) -94]
Test Case: 484 | Input/Output: [(-3 -5 -11 -71) -71]
Test Case: 485 | Input/Output: [(14 51 -22 22) -22]
Test Case: 486 | Input/Output: [(-47 -52 -57 85) -57]
Test Case: 487 | Input/Output: [(-3 -32 -14 36) -32]
Test Case: 488 | Input/Output: [(16 2 43 -40) -40]
Test Case: 489 | Input/Output: [(78 -73 -8 -7) -73]
Test Case: 490 | Input/Output: [(28 26 82 75) 26]
Test Case: 491 | Input/Output: [(93 40 27 -88) -88]
Test Case: 492 | Input/Output: [(-49 49 -99 -93) -99]
Test Case: 493 | Input/Output: [(88 -17 22 35) -17]
Test Case: 494 | Input/Output: [(45 -73 98 -12) -73]
Test Case: 495 | Input/Output: [(-23 21 -57 35) -57]
Test Case: 496 | Input/Output: [(-60 71 -44 14) -60]
Test Case: 497 | Input/Output: [(53 97 63 79) 53]
Test Case: 498 | Input/Output: [(-32 82 -24 5) -32]
Test Case: 499 | Input/Output: [(-20 72 -93 82) -93]
Test Case: 500 | Input/Output: [(-13 38 -17 -21) -21]
Test Case: 501 | Input/Output: [(31 6 90 77) 6]
Test Case: 502 | Input/Output: [(-34 88 90 72) -34]
Test Case: 503 | Input/Output: [(97 -32 17 51) -32]
Test Case: 504 | Input/Output: [(-84 -21 42 -100) -100]
Test Case: 505 | Input/Output: [(81 2 27 -62) -62]
Test Case: 506 | Input/Output: [(98 -90 98 60) -90]
Test Case: 507 | Input/Output: [(-78 26 -20 -52) -78]
Test Case: 508 | Input/Output: [(-68 8 -67 5) -68]
Test Case: 509 | Input/Output: [(-35 53 22 -84) -84]
Test Case: 510 | Input/Output: [(45 -43 88 62) -43]
Test Case: 511 | Input/Output: [(24 13 44 9) 9]
Test Case: 512 | Input/Output: [(13 47 70 3) 3]
Test Case: 513 | Input/Output: [(-63 -85 -73 -3) -85]
Test Case: 514 | Input/Output: [(49 -77 -13 -86) -86]
Test Case: 515 | Input/Output: [(-41 -94 0 -60) -94]
Test Case: 516 | Input/Output: [(16 11 71 -53) -53]
Test Case: 517 | Input/Output: [(-26 23 82 99) -26]
Test Case: 518 | Input/Output: [(57 -46 75 -78) -78]
Test Case: 519 | Input/Output: [(14 -79 61 66) -79]
Test Case: 520 | Input/Output: [(9 -97 69 -89) -97]
Test Case: 521 | Input/Output: [(-13 -34 31 -15) -34]
Test Case: 522 | Input/Output: [(-84 56 82 67) -84]
Test Case: 523 | Input/Output: [(-16 -84 -86 15) -86]
Test Case: 524 | Input/Output: [(-94 64 96 -5) -94]
Test Case: 525 | Input/Output: [(-92 -89 -28 5) -92]
Test Case: 526 | Input/Output: [(4 26 94 99) 4]
Test Case: 527 | Input/Output: [(-76 -20 -42 37) -76]
Test Case: 528 | Input/Output: [(43 98 71 -23) -23]
Test Case: 529 | Input/Output: [(21 14 -90 47) -90]
Test Case: 530 | Input/Output: [(-7 83 37 87) -7]
Test Case: 531 | Input/Output: [(-8 66 -10 -97) -97]
Test Case: 532 | Input/Output: [(28 60 -90 -22) -90]
Test Case: 533 | Input/Output: [(92 -11 42 35) -11]
Test Case: 534 | Input/Output: [(-47 60 -44 50) -47]
Test Case: 535 | Input/Output: [(-87 11 -75 15) -87]
Test Case: 536 | Input/Output: [(6 69 -93 -68) -93]
Test Case: 537 | Input/Output: [(-32 -48 -30 7) -48]
Test Case: 538 | Input/Output: [(-92 48 -7 -75) -92]
Test Case: 539 | Input/Output: [(83 -41 -34 50) -41]
Test Case: 540 | Input/Output: [(-72 31 -35 -58) -72]
Test Case: 541 | Input/Output: [(30 31 -69 73) -69]
Test Case: 542 | Input/Output: [(93 24 -59 8) -59]
Test Case: 543 | Input/Output: [(-77 66 41 42) -77]
Test Case: 544 | Input/Output: [(91 -28 70 -7) -28]
Test Case: 545 | Input/Output: [(-8 -62 -39 96) -62]
Test Case: 546 | Input/Output: [(89 81 -22 60) -22]
Test Case: 547 | Input/Output: [(15 99 92 -31) -31]
Test Case: 548 | Input/Output: [(4 80 -88 63) -88]
Test Case: 549 | Input/Output: [(56 -66 -76 12) -76]
Test Case: 550 | Input/Output: [(73 -54 93 56) -54]
Test Case: 551 | Input/Output: [(-57 62 77 75) -57]
Test Case: 552 | Input/Output: [(-3 -22 46 0) -22]
Test Case: 553 | Input/Output: [(-50 84 48 4) -50]
Test Case: 554 | Input/Output: [(48 43 97 51) 43]
Test Case: 555 | Input/Output: [(36 72 -89 -23) -89]
Test Case: 556 | Input/Output: [(72 -77 -12 -6) -77]
Test Case: 557 | Input/Output: [(48 62 25 13) 13]
Test Case: 558 | Input/Output: [(-59 18 -36 39) -59]
Test Case: 559 | Input/Output: [(-77 27 8 -1) -77]
Test Case: 560 | Input/Output: [(-6 91 98 -97) -97]
Test Case: 561 | Input/Output: [(70 57 52 20) 20]
Test Case: 562 | Input/Output: [(-27 -38 -46 2) -46]
Test Case: 563 | Input/Output: [(95 -54 -50 97) -54]
Test Case: 564 | Input/Output: [(-15 75 64 -42) -42]
Test Case: 565 | Input/Output: [(-83 98 -42 -7) -83]
Test Case: 566 | Input/Output: [(36 -27 -18 22) -27]
Test Case: 567 | Input/Output: [(94 79 52 7) 7]
Test Case: 568 | Input/Output: [(92 71 -70 57) -70]
Test Case: 569 | Input/Output: [(-38 3 35 61) -38]
Test Case: 570 | Input/Output: [(-65 -78 15 76) -78]
Test Case: 571 | Input/Output: [(92 53 -5 -61) -61]
Test Case: 572 | Input/Output: [(-89 -20 -71 -65) -89]
Test Case: 573 | Input/Output: [(-36 -53 37 -70) -70]
Test Case: 574 | Input/Output: [(-64 86 -94 49) -94]
Test Case: 575 | Input/Output: [(-19 -82 12 -99) -99]
Test Case: 576 | Input/Output: [(29 25 -39 -89) -89]
Test Case: 577 | Input/Output: [(-24 27 -37 84) -37]
Test Case: 578 | Input/Output: [(-36 -100 -59 -59) -100]
Test Case: 579 | Input/Output: [(-34 -87 12 -16) -87]
Test Case: 580 | Input/Output: [(-90 82 -10 23) -90]
Test Case: 581 | Input/Output: [(-21 12 -71 -57) -71]
Test Case: 582 | Input/Output: [(-88 44 50 -13) -88]
Test Case: 583 | Input/Output: [(97 -7 -43 67) -43]
Test Case: 584 | Input/Output: [(-59 66 41 16) -59]
Test Case: 585 | Input/Output: [(43 97 -48 -57) -57]
Test Case: 586 | Input/Output: [(-47 -16 52 26) -47]
Test Case: 587 | Input/Output: [(23 -29 44 -41) -41]
Test Case: 588 | Input/Output: [(-1 -19 33 1) -19]
Test Case: 589 | Input/Output: [(53 3 23 39) 3]
Test Case: 590 | Input/Output: [(-22 -98 -13 1) -98]
Test Case: 591 | Input/Output: [(47 43 -63 -56) -63]
Test Case: 592 | Input/Output: [(20 -57 67 -70) -70]
Test Case: 593 | Input/Output: [(42 -18 76 -31) -31]
Test Case: 594 | Input/Output: [(39 57 15 -11) -11]
Test Case: 595 | Input/Output: [(-21 -66 -9 78) -66]
Test Case: 596 | Input/Output: [(91 -28 -21 -88) -88]
Test Case: 597 | Input/Output: [(46 -28 63 85) -28]
Test Case: 598 | Input/Output: [(4 89 10 56) 4]
Test Case: 599 | Input/Output: [(90 31 14 -74) -74]
Test Case: 600 | Input/Output: [(-52 16 -48 0) -52]
Test Case: 601 | Input/Output: [(-70 39 29 -42) -70]
Test Case: 602 | Input/Output: [(7 100 90 -33) -33]
Test Case: 603 | Input/Output: [(37 -32 72 -14) -32]
Test Case: 604 | Input/Output: [(-87 2 69 -59) -87]
Test Case: 605 | Input/Output: [(-93 82 -75 99) -93]
Test Case: 606 | Input/Output: [(40 38 -42 33) -42]
Test Case: 607 | Input/Output: [(95 -42 47 88) -42]
Test Case: 608 | Input/Output: [(-64 -35 1 95) -64]
Test Case: 609 | Input/Output: [(97 23 -82 -87) -87]
Test Case: 610 | Input/Output: [(-48 65 -35 81) -48]
Test Case: 611 | Input/Output: [(71 -71 -99 -39) -99]
Test Case: 612 | Input/Output: [(-64 -98 -85 -50) -98]
Test Case: 613 | Input/Output: [(15 -62 51 44) -62]
Test Case: 614 | Input/Output: [(46 5 -59 51) -59]
Test Case: 615 | Input/Output: [(-91 -76 -89 -57) -91]
Test Case: 616 | Input/Output: [(36 -85 51 75) -85]
Test Case: 617 | Input/Output: [(69 15 39 -68) -68]
Test Case: 618 | Input/Output: [(40 -32 -12 -38) -38]
Test Case: 619 | Input/Output: [(86 -38 80 1) -38]
Test Case: 620 | Input/Output: [(-94 -85 14 -56) -94]
Test Case: 621 | Input/Output: [(-35 -57 -99 -43) -99]
Test Case: 622 | Input/Output: [(-88 -90 10 49) -90]
Test Case: 623 | Input/Output: [(40 27 -21 -18) -21]
Test Case: 624 | Input/Output: [(97 -37 37 -82) -82]
Test Case: 625 | Input/Output: [(-91 81 62 80) -91]
Test Case: 626 | Input/Output: [(49 -94 -70 -22) -94]
Test Case: 627 | Input/Output: [(-65 -4 -59 86) -65]
Test Case: 628 | Input/Output: [(48 89 16 26) 16]
Test Case: 629 | Input/Output: [(-92 55 -91 90) -92]
Test Case: 630 | Input/Output: [(47 10 6 -66) -66]
Test Case: 631 | Input/Output: [(-86 -35 54 -29) -86]
Test Case: 632 | Input/Output: [(-35 -17 18 -99) -99]
Test Case: 633 | Input/Output: [(-77 -75 -60 -14) -77]
Test Case: 634 | Input/Output: [(-100 -27 23 -92) -100]
Test Case: 635 | Input/Output: [(30 25 43 -74) -74]
Test Case: 636 | Input/Output: [(-17 92 69 -54) -54]
Test Case: 637 | Input/Output: [(-34 80 75 -26) -34]
Test Case: 638 | Input/Output: [(-39 86 -56 36) -56]
Test Case: 639 | Input/Output: [(89 29 85 11) 11]
Test Case: 640 | Input/Output: [(99 96 -19 78) -19]
Test Case: 641 | Input/Output: [(13 39 -10 -56) -56]
Test Case: 642 | Input/Output: [(-26 -79 50 -99) -99]
Test Case: 643 | Input/Output: [(-14 90 4 77) -14]
Test Case: 644 | Input/Output: [(33 -36 100 -61) -61]
Test Case: 645 | Input/Output: [(-27 -84 -88 97) -88]
Test Case: 646 | Input/Output: [(-22 -69 28 -5) -69]
Test Case: 647 | Input/Output: [(-54 26 3 97) -54]
Test Case: 648 | Input/Output: [(71 55 -87 -11) -87]
Test Case: 649 | Input/Output: [(-88 -36 -64 50) -88]
Test Case: 650 | Input/Output: [(57 65 93 -98) -98]
Test Case: 651 | Input/Output: [(77 11 41 -18) -18]
Test Case: 652 | Input/Output: [(10 -3 -13 10) -13]
Test Case: 653 | Input/Output: [(52 16 -81 90) -81]
Test Case: 654 | Input/Output: [(35 63 88 -69) -69]
Test Case: 655 | Input/Output: [(-35 40 6 52) -35]
Test Case: 656 | Input/Output: [(52 -48 93 4) -48]
Test Case: 657 | Input/Output: [(-94 -81 -80 -51) -94]
Test Case: 658 | Input/Output: [(38 -32 -97 60) -97]
Test Case: 659 | Input/Output: [(93 -81 17 -61) -81]
Test Case: 660 | Input/Output: [(-2 -6 40 4) -6]
Test Case: 661 | Input/Output: [(21 -32 34 -7) -32]
Test Case: 662 | Input/Output: [(-5 -10 -19 47) -19]
Test Case: 663 | Input/Output: [(-36 -93 -71 -34) -93]
Test Case: 664 | Input/Output: [(-52 17 5 22) -52]
Test Case: 665 | Input/Output: [(-53 -8 -86 -87) -87]
Test Case: 666 | Input/Output: [(-36 -10 -19 95) -36]
Test Case: 667 | Input/Output: [(67 62 -23 -9) -23]
Test Case: 668 | Input/Output: [(82 -15 -7 4) -15]
Test Case: 669 | Input/Output: [(-32 64 34 -97) -97]
Test Case: 670 | Input/Output: [(-88 -80 -79 -4) -88]
Test Case: 671 | Input/Output: [(36 68 -66 83) -66]
Test Case: 672 | Input/Output: [(-5 81 49 56) -5]
Test Case: 673 | Input/Output: [(48 -24 56 8) -24]
Test Case: 674 | Input/Output: [(-74 35 -54 38) -74]
Test Case: 675 | Input/Output: [(-20 8 72 -72) -72]
Test Case: 676 | Input/Output: [(8 -56 11 68) -56]
Test Case: 677 | Input/Output: [(11 -89 -9 5) -89]
Test Case: 678 | Input/Output: [(36 41 89 84) 36]
Test Case: 679 | Input/Output: [(-78 -20 -82 99) -82]
Test Case: 680 | Input/Output: [(29 -81 50 -7) -81]
Test Case: 681 | Input/Output: [(94 -96 -72 10) -96]
Test Case: 682 | Input/Output: [(23 -10 -27 33) -27]
Test Case: 683 | Input/Output: [(57 63 77 65) 57]
Test Case: 684 | Input/Output: [(-11 -85 -97 100) -97]
Test Case: 685 | Input/Output: [(11 -86 -32 -94) -94]
Test Case: 686 | Input/Output: [(-88 6 -96 -49) -96]
Test Case: 687 | Input/Output: [(8 73 76 -24) -24]
Test Case: 688 | Input/Output: [(-76 97 -57 -95) -95]
Test Case: 689 | Input/Output: [(31 60 -83 -81) -83]
Test Case: 690 | Input/Output: [(71 -24 -46 80) -46]
Test Case: 691 | Input/Output: [(18 -99 16 82) -99]
Test Case: 692 | Input/Output: [(-20 59 55 50) -20]
Test Case: 693 | Input/Output: [(71 -44 4 44) -44]
Test Case: 694 | Input/Output: [(-24 -16 -33 61) -33]
Test Case: 695 | Input/Output: [(19 -57 -82 90) -82]
Test Case: 696 | Input/Output: [(-97 20 32 6) -97]
Test Case: 697 | Input/Output: [(28 36 7 21) 7]
Test Case: 698 | Input/Output: [(-79 79 -6 -54) -79]
Test Case: 699 | Input/Output: [(-39 72 -72 65) -72]
Test Case: 700 | Input/Output: [(-23 -89 65 -37) -89]
Test Case: 701 | Input/Output: [(-20 86 64 29) -20]
Test Case: 702 | Input/Output: [(87 49 56 -94) -94]
Test Case: 703 | Input/Output: [(-70 68 17 -53) -70]
Test Case: 704 | Input/Output: [(-30 -31 10 -19) -31]
Test Case: 705 | Input/Output: [(-39 0 -6 -92) -92]
Test Case: 706 | Input/Output: [(73 -87 31 -86) -87]
Test Case: 707 | Input/Output: [(-18 58 -36 75) -36]
Test Case: 708 | Input/Output: [(79 -89 54 -88) -89]
Test Case: 709 | Input/Output: [(-17 -41 99 -16) -41]
Test Case: 710 | Input/Output: [(-82 5 57 -42) -82]
Test Case: 711 | Input/Output: [(18 -99 -52 70) -99]
Test Case: 712 | Input/Output: [(98 -2 64 51) -2]
Test Case: 713 | Input/Output: [(-60 80 -39 8) -60]
Test Case: 714 | Input/Output: [(-85 -70 -36 34) -85]
Test Case: 715 | Input/Output: [(63 -15 -39 -11) -39]
Test Case: 716 | Input/Output: [(-67 -31 99 -35) -67]
Test Case: 717 | Input/Output: [(-45 -32 -11 -10) -45]
Test Case: 718 | Input/Output: [(-77 10 -92 87) -92]
Test Case: 719 | Input/Output: [(68 -84 -2 -54) -84]
Test Case: 720 | Input/Output: [(-72 34 -16 99) -72]
Test Case: 721 | Input/Output: [(69 -42 -2 -86) -86]
Test Case: 722 | Input/Output: [(-95 -58 -59 -4) -95]
Test Case: 723 | Input/Output: [(14 -6 -43 36) -43]
Test Case: 724 | Input/Output: [(-22 56 31 -49) -49]
Test Case: 725 | Input/Output: [(-10 68 63 -83) -83]
Test Case: 726 | Input/Output: [(21 54 -86 -89) -89]
Test Case: 727 | Input/Output: [(4 -6 -21 12) -21]
Test Case: 728 | Input/Output: [(-96 87 48 81) -96]
Test Case: 729 | Input/Output: [(-64 33 74 19) -64]
Test Case: 730 | Input/Output: [(-81 56 -56 12) -81]
Test Case: 731 | Input/Output: [(-40 34 38 59) -40]
Test Case: 732 | Input/Output: [(-13 29 -31 63) -31]
Test Case: 733 | Input/Output: [(-15 -100 -29 44) -100]
Test Case: 734 | Input/Output: [(-10 -48 44 38) -48]
Test Case: 735 | Input/Output: [(8 28 52 -20) -20]
Test Case: 736 | Input/Output: [(65 -65 -93 72) -93]
Test Case: 737 | Input/Output: [(-12 -65 -62 -95) -95]
Test Case: 738 | Input/Output: [(-81 94 37 61) -81]
Test Case: 739 | Input/Output: [(97 -77 -91 74) -91]
Test Case: 740 | Input/Output: [(59 -14 36 69) -14]
Test Case: 741 | Input/Output: [(-51 81 37 76) -51]
Test Case: 742 | Input/Output: [(88 24 -81 -39) -81]
Test Case: 743 | Input/Output: [(69 -57 33 -7) -57]
Test Case: 744 | Input/Output: [(-65 39 63 74) -65]
Test Case: 745 | Input/Output: [(-8 -85 -79 2) -85]
Test Case: 746 | Input/Output: [(-7 -13 -42 -1) -42]
Test Case: 747 | Input/Output: [(-94 40 -75 -12) -94]
Test Case: 748 | Input/Output: [(25 88 85 -31) -31]
Test Case: 749 | Input/Output: [(-97 -82 -23 87) -97]
Test Case: 750 | Input/Output: [(-46 -69 -25 -80) -80]
Test Case: 751 | Input/Output: [(52 14 -33 -1) -33]
Test Case: 752 | Input/Output: [(47 93 -72 -53) -72]
Test Case: 753 | Input/Output: [(-44 93 10 31) -44]
Test Case: 754 | Input/Output: [(-32 74 -27 -26) -32]
Test Case: 755 | Input/Output: [(-4 -47 -47 1) -47]
Test Case: 756 | Input/Output: [(-39 93 87 19) -39]
Test Case: 757 | Input/Output: [(-83 87 8 9) -83]
Test Case: 758 | Input/Output: [(-35 45 78 95) -35]
Test Case: 759 | Input/Output: [(-32 59 -61 -48) -61]
Test Case: 760 | Input/Output: [(73 -77 -80 64) -80]
Test Case: 761 | Input/Output: [(7 76 82 -76) -76]
Test Case: 762 | Input/Output: [(-90 50 84 -85) -90]
Test Case: 763 | Input/Output: [(-55 24 61 -79) -79]
Test Case: 764 | Input/Output: [(80 -83 57 14) -83]
Test Case: 765 | Input/Output: [(-93 -6 -98 -54) -98]
Test Case: 766 | Input/Output: [(5 -17 -67 -28) -67]
Test Case: 767 | Input/Output: [(72 -38 -54 -98) -98]
Test Case: 768 | Input/Output: [(-67 -84 -23 -41) -84]
Test Case: 769 | Input/Output: [(85 -52 -35 58) -52]
Test Case: 770 | Input/Output: [(-13 -12 68 60) -13]
Test Case: 771 | Input/Output: [(82 -54 -72 -46) -72]
Test Case: 772 | Input/Output: [(79 -5 76 -43) -43]
Test Case: 773 | Input/Output: [(-56 73 -10 87) -56]
Test Case: 774 | Input/Output: [(-5 -27 -84 49) -84]
Test Case: 775 | Input/Output: [(-53 -32 -32 86) -53]
Test Case: 776 | Input/Output: [(-45 -32 -53 -87) -87]
Test Case: 777 | Input/Output: [(66 30 -43 -31) -43]
Test Case: 778 | Input/Output: [(72 46 -71 -5) -71]
Test Case: 779 | Input/Output: [(-90 -28 6 62) -90]
Test Case: 780 | Input/Output: [(-79 90 85 -5) -79]
Test Case: 781 | Input/Output: [(-53 80 72 55) -53]
Test Case: 782 | Input/Output: [(22 64 33 76) 22]
Test Case: 783 | Input/Output: [(-45 -9 37 -68) -68]
Test Case: 784 | Input/Output: [(-67 -83 64 -72) -83]
Test Case: 785 | Input/Output: [(-41 93 -17 -85) -85]
Test Case: 786 | Input/Output: [(-6 82 71 21) -6]
Test Case: 787 | Input/Output: [(-5 32 56 -9) -9]
Test Case: 788 | Input/Output: [(-46 6 29 -39) -46]
Test Case: 789 | Input/Output: [(-82 41 -38 -35) -82]
Test Case: 790 | Input/Output: [(-50 -91 -27 45) -91]
Test Case: 791 | Input/Output: [(-14 -62 -77 -9) -77]
Test Case: 792 | Input/Output: [(-76 -34 -59 3) -76]
Test Case: 793 | Input/Output: [(5 -58 92 37) -58]
Test Case: 794 | Input/Output: [(21 -75 73 -7) -75]
Test Case: 795 | Input/Output: [(-94 65 -4 27) -94]
Test Case: 796 | Input/Output: [(43 21 60 68) 21]
Test Case: 797 | Input/Output: [(50 -80 1 37) -80]
Test Case: 798 | Input/Output: [(84 -92 -25 56) -92]
Test Case: 799 | Input/Output: [(87 97 50 85) 50]
Test Case: 800 | Input/Output: [(-24 77 -24 27) -24]
Test Case: 801 | Input/Output: [(34 40 8 89) 8]
Test Case: 802 | Input/Output: [(73 76 -4 -34) -34]
Test Case: 803 | Input/Output: [(18 -39 56 56) -39]
Test Case: 804 | Input/Output: [(-94 28 -40 38) -94]
Test Case: 805 | Input/Output: [(-14 33 -22 79) -22]
Test Case: 806 | Input/Output: [(-86 -16 -2 -32) -86]
Test Case: 807 | Input/Output: [(87 -70 49 -35) -70]
Test Case: 808 | Input/Output: [(28 -16 27 -50) -50]
Test Case: 809 | Input/Output: [(-66 -23 11 -98) -98]
Test Case: 810 | Input/Output: [(-51 -11 -27 74) -51]
Test Case: 811 | Input/Output: [(4 -61 10 80) -61]
Test Case: 812 | Input/Output: [(-12 -33 -2 43) -33]
Test Case: 813 | Input/Output: [(56 50 -41 -72) -72]
Test Case: 814 | Input/Output: [(11 -14 -99 33) -99]
Test Case: 815 | Input/Output: [(60 -31 -34 -72) -72]
Test Case: 816 | Input/Output: [(51 98 56 -98) -98]
Test Case: 817 | Input/Output: [(-49 17 -56 9) -56]
Test Case: 818 | Input/Output: [(69 -44 70 26) -44]
Test Case: 819 | Input/Output: [(13 -58 -55 63) -58]
Test Case: 820 | Input/Output: [(-54 -51 -27 -74) -74]
Test Case: 821 | Input/Output: [(-99 2 60 -10) -99]
Test Case: 822 | Input/Output: [(-48 36 100 7) -48]
Test Case: 823 | Input/Output: [(-76 88 87 -85) -85]
Test Case: 824 | Input/Output: [(-28 49 -21 -55) -55]
Test Case: 825 | Input/Output: [(3 29 65 -45) -45]
Test Case: 826 | Input/Output: [(-34 -9 -61 27) -61]
Test Case: 827 | Input/Output: [(-41 -49 -91 81) -91]
Test Case: 828 | Input/Output: [(-62 35 -79 -68) -79]
Test Case: 829 | Input/Output: [(69 -39 -22 79) -39]
Test Case: 830 | Input/Output: [(-87 51 11 48) -87]
Test Case: 831 | Input/Output: [(-55 81 -89 -82) -89]
Test Case: 832 | Input/Output: [(-35 5 -87 93) -87]
Test Case: 833 | Input/Output: [(46 -1 -86 -99) -99]
Test Case: 834 | Input/Output: [(-41 -62 20 -80) -80]
Test Case: 835 | Input/Output: [(-90 67 -35 58) -90]
Test Case: 836 | Input/Output: [(-15 15 -93 71) -93]
Test Case: 837 | Input/Output: [(67 -36 32 -8) -36]
Test Case: 838 | Input/Output: [(35 -54 -67 -1) -67]
Test Case: 839 | Input/Output: [(-10 38 -83 -78) -83]
Test Case: 840 | Input/Output: [(-92 -24 -53 -100) -100]
Test Case: 841 | Input/Output: [(49 -59 -87 90) -87]
Test Case: 842 | Input/Output: [(-35 100 34 -82) -82]
Test Case: 843 | Input/Output: [(-6 75 81 42) -6]
Test Case: 844 | Input/Output: [(-33 36 97 -93) -93]
Test Case: 845 | Input/Output: [(-94 -40 50 -78) -94]
Test Case: 846 | Input/Output: [(-10 -72 -8 -26) -72]
Test Case: 847 | Input/Output: [(47 30 89 66) 30]
Test Case: 848 | Input/Output: [(-17 49 -32 -32) -32]
Test Case: 849 | Input/Output: [(-19 1 -94 -11) -94]
Test Case: 850 | Input/Output: [(69 -52 42 -6) -52]
Test Case: 851 | Input/Output: [(-60 -90 21 -73) -90]
Test Case: 852 | Input/Output: [(-10 14 -65 84) -65]
Test Case: 853 | Input/Output: [(29 79 -95 -92) -95]
Test Case: 854 | Input/Output: [(-10 4 -71 -59) -71]
Test Case: 855 | Input/Output: [(-86 95 82 34) -86]
Test Case: 856 | Input/Output: [(-9 48 -55 -54) -55]
Test Case: 857 | Input/Output: [(-90 -32 -42 47) -90]
Test Case: 858 | Input/Output: [(11 60 53 -20) -20]
Test Case: 859 | Input/Output: [(-93 -88 59 -14) -93]
Test Case: 860 | Input/Output: [(68 88 -46 52) -46]
Test Case: 861 | Input/Output: [(-89 -69 -21 -86) -89]
Test Case: 862 | Input/Output: [(57 55 -44 78) -44]
Test Case: 863 | Input/Output: [(-78 50 92 -1) -78]
Test Case: 864 | Input/Output: [(35 -33 -83 -83) -83]
Test Case: 865 | Input/Output: [(28 -90 84 -9) -90]
Test Case: 866 | Input/Output: [(-71 -54 72 -65) -71]
Test Case: 867 | Input/Output: [(8 93 -73 -46) -73]
Test Case: 868 | Input/Output: [(75 6 34 92) 6]
Test Case: 869 | Input/Output: [(13 66 67 -40) -40]
Test Case: 870 | Input/Output: [(-34 22 68 0) -34]
Test Case: 871 | Input/Output: [(45 64 -67 51) -67]
Test Case: 872 | Input/Output: [(-42 82 53 47) -42]
Test Case: 873 | Input/Output: [(30 97 92 -87) -87]
Test Case: 874 | Input/Output: [(-2 41 -80 34) -80]
Test Case: 875 | Input/Output: [(-19 19 85 -89) -89]
Test Case: 876 | Input/Output: [(-96 90 78 18) -96]
Test Case: 877 | Input/Output: [(-3 96 43 -14) -14]
Test Case: 878 | Input/Output: [(-6 59 -19 -4) -19]
Test Case: 879 | Input/Output: [(-99 -68 -82 -64) -99]
Test Case: 880 | Input/Output: [(2 -65 -64 76) -65]
Test Case: 881 | Input/Output: [(-87 -68 43 15) -87]
Test Case: 882 | Input/Output: [(55 -65 68 -42) -65]
Test Case: 883 | Input/Output: [(-97 96 55 -28) -97]
Test Case: 884 | Input/Output: [(-86 -9 -55 75) -86]
Test Case: 885 | Input/Output: [(34 -26 98 -29) -29]
Test Case: 886 | Input/Output: [(-54 100 7 71) -54]
Test Case: 887 | Input/Output: [(-90 -3 90 43) -90]
Test Case: 888 | Input/Output: [(-73 -29 77 -2) -73]
Test Case: 889 | Input/Output: [(61 76 -96 -15) -96]
Test Case: 890 | Input/Output: [(-41 7 50 83) -41]
Test Case: 891 | Input/Output: [(8 90 -50 77) -50]
Test Case: 892 | Input/Output: [(8 -34 -33 32) -34]
Test Case: 893 | Input/Output: [(-63 97 46 88) -63]
Test Case: 894 | Input/Output: [(99 78 -77 -43) -77]
Test Case: 895 | Input/Output: [(-76 -37 -95 -6) -95]
Test Case: 896 | Input/Output: [(40 -11 6 -8) -11]
Test Case: 897 | Input/Output: [(46 53 -13 -25) -25]
Test Case: 898 | Input/Output: [(46 -82 -79 55) -82]
Test Case: 899 | Input/Output: [(-17 -4 34 16) -17]
Test Case: 900 | Input/Output: [(-13 -60 39 -39) -60]
Test Case: 901 | Input/Output: [(32 -21 67 5) -21]
Test Case: 902 | Input/Output: [(76 -35 34 49) -35]
Test Case: 903 | Input/Output: [(85 84 56 -79) -79]
Test Case: 904 | Input/Output: [(75 54 -72 87) -72]
Test Case: 905 | Input/Output: [(-18 -11 -18 83) -18]
Test Case: 906 | Input/Output: [(66 -33 -45 82) -45]
Test Case: 907 | Input/Output: [(61 -11 16 43) -11]
Test Case: 908 | Input/Output: [(-54 79 -13 -37) -54]
Test Case: 909 | Input/Output: [(-61 71 -38 -40) -61]
Test Case: 910 | Input/Output: [(-4 19 29 -59) -59]
Test Case: 911 | Input/Output: [(-57 -59 9 63) -59]
Test Case: 912 | Input/Output: [(58 47 54 92) 47]
Test Case: 913 | Input/Output: [(-47 47 49 -40) -47]
Test Case: 914 | Input/Output: [(11 -5 -32 -81) -81]
Test Case: 915 | Input/Output: [(57 85 -16 25) -16]
Test Case: 916 | Input/Output: [(-27 -53 73 30) -53]
Test Case: 917 | Input/Output: [(-66 91 -17 5) -66]
Test Case: 918 | Input/Output: [(81 58 89 -24) -24]
Test Case: 919 | Input/Output: [(-29 -73 -51 59) -73]
Test Case: 920 | Input/Output: [(-93 10 -39 1) -93]
Test Case: 921 | Input/Output: [(97 51 86 -56) -56]
Test Case: 922 | Input/Output: [(-51 37 -9 33) -51]
Test Case: 923 | Input/Output: [(-98 -57 -49 -71) -98]
Test Case: 924 | Input/Output: [(-99 -64 46 60) -99]
Test Case: 925 | Input/Output: [(54 44 -28 -1) -28]
Test Case: 926 | Input/Output: [(-30 -3 -28 -92) -92]
Test Case: 927 | Input/Output: [(30 84 -52 57) -52]
Test Case: 928 | Input/Output: [(74 86 87 92) 74]
Test Case: 929 | Input/Output: [(-79 10 81 47) -79]
Test Case: 930 | Input/Output: [(-55 -77 -38 -47) -77]
Test Case: 931 | Input/Output: [(-32 -99 -85 95) -99]
Test Case: 932 | Input/Output: [(51 15 93 -34) -34]
Test Case: 933 | Input/Output: [(89 -85 10 98) -85]
Test Case: 934 | Input/Output: [(84 34 81 -9) -9]
Test Case: 935 | Input/Output: [(81 -100 -2 4) -100]
Test Case: 936 | Input/Output: [(6 55 7 -56) -56]
Test Case: 937 | Input/Output: [(-80 -82 77 -31) -82]
Test Case: 938 | Input/Output: [(-54 -78 24 96) -78]
Test Case: 939 | Input/Output: [(-74 89 6 82) -74]
Test Case: 940 | Input/Output: [(71 -87 -84 46) -87]
Test Case: 941 | Input/Output: [(-44 -28 16 55) -44]
Test Case: 942 | Input/Output: [(47 -16 -33 -32) -33]
Test Case: 943 | Input/Output: [(46 -57 26 -43) -57]
Test Case: 944 | Input/Output: [(-46 16 94 70) -46]
Test Case: 945 | Input/Output: [(48 4 -17 30) -17]
Test Case: 946 | Input/Output: [(-35 37 -85 0) -85]
Test Case: 947 | Input/Output: [(43 -81 -99 96) -99]
Test Case: 948 | Input/Output: [(54 99 -44 52) -44]
Test Case: 949 | Input/Output: [(45 -48 -60 -99) -99]
Test Case: 950 | Input/Output: [(-13 -17 12 -88) -88]
Test Case: 951 | Input/Output: [(-20 65 -21 91) -21]
Test Case: 952 | Input/Output: [(34 -10 -43 41) -43]
Test Case: 953 | Input/Output: [(-58 28 -38 11) -58]
Test Case: 954 | Input/Output: [(-93 29 41 62) -93]
Test Case: 955 | Input/Output: [(53 13 -37 -58) -58]
Test Case: 956 | Input/Output: [(36 97 89 -27) -27]
Test Case: 957 | Input/Output: [(-23 -23 67 70) -23]
Test Case: 958 | Input/Output: [(67 43 86 -43) -43]
Test Case: 959 | Input/Output: [(61 61 100 -43) -43]
Test Case: 960 | Input/Output: [(3 14 12 24) 3]
Test Case: 961 | Input/Output: [(-55 60 40 -64) -64]
Test Case: 962 | Input/Output: [(-34 14 -20 -79) -79]
Test Case: 963 | Input/Output: [(96 -53 -1 -43) -53]
Test Case: 964 | Input/Output: [(-25 -31 82 -97) -97]
Test Case: 965 | Input/Output: [(-40 -50 68 23) -50]
Test Case: 966 | Input/Output: [(-100 -15 34 -92) -100]
Test Case: 967 | Input/Output: [(61 -66 -9 -42) -66]
Test Case: 968 | Input/Output: [(59 -16 28 11) -16]
Test Case: 969 | Input/Output: [(68 40 -24 -58) -58]
Test Case: 970 | Input/Output: [(74 56 -36 -46) -46]
Test Case: 971 | Input/Output: [(-94 97 -94 -21) -94]
Test Case: 972 | Input/Output: [(-28 -72 -98 -10) -98]
Test Case: 973 | Input/Output: [(-28 -52 86 -60) -60]
Test Case: 974 | Input/Output: [(70 80 -61 -9) -61]
Test Case: 975 | Input/Output: [(74 -21 -69 84) -69]
Test Case: 976 | Input/Output: [(-60 -2 -62 47) -62]
Test Case: 977 | Input/Output: [(61 -6 35 -43) -43]
Test Case: 978 | Input/Output: [(54 65 -29 -44) -44]
Test Case: 979 | Input/Output: [(-92 67 64 86) -92]
Test Case: 980 | Input/Output: [(52 42 -42 73) -42]
Test Case: 981 | Input/Output: [(76 -11 48 -18) -18]
Test Case: 982 | Input/Output: [(39 37 -49 33) -49]
Test Case: 983 | Input/Output: [(-41 65 -86 40) -86]
Test Case: 984 | Input/Output: [(-28 -20 81 -45) -45]
Test Case: 985 | Input/Output: [(64 -64 80 -11) -64]
Test Case: 986 | Input/Output: [(14 38 -15 81) -15]
Test Case: 987 | Input/Output: [(96 -33 -25 80) -33]
Test Case: 988 | Input/Output: [(56 93 -67 -99) -99]
Test Case: 989 | Input/Output: [(-37 64 61 -39) -39]
Test Case: 990 | Input/Output: [(86 -67 4 -19) -67]
Test Case: 991 | Input/Output: [(-52 -79 67 93) -79]
Test Case: 992 | Input/Output: [(17 -40 -69 48) -69]
Test Case: 993 | Input/Output: [(74 41 85 -93) -93]
Test Case: 994 | Input/Output: [(-43 40 57 98) -43]
Test Case: 995 | Input/Output: [(80 2 69 -27) -27]
Test Case: 996 | Input/Output: [(1 17 58 32) 1]
Test Case: 997 | Input/Output: [(-30 58 -36 2) -36]
Test Case: 998 | Input/Output: [(-87 -60 85 -26) -87]
Test Case: 999 | Input/Output: [(-68 -48 -33 5) -68]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -126 -97 -77 20 -7 -103 -28 90 -30 30 104 92 7 -115 -20 -1
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-100 -100 -38 -100] -100] [[-99 -99 19 -99] -99] [[-33 72 -33 -33] -33] [[33 79 79 79] 33] [[-40 29 29 29] -40] [[5 15 15 15] 5] [[-99 25 25 25] -99] [[-52 -52 -52 -40] -52] [[-40 -57 -57 -57] -57] [[53 55 55 55] 53] [(86 86 86 86) 86] [(-94 -94 -94 -94) -94] [(-39 -39 -39 -39) -39] [(78 78 78 78) 78] [(42 42 42 42) 42] [(90 59 100 72) 59] [(76 24 72 48) 24] [(10 49 33 97) 10] [(73 1 68 56) 1] [(70 8 49 76) 8] [(40 80 69 24) 24] [(0 97 3 100) 0] [(58 10 29 40) 10] [(83 18 32 45) 18] [(49 87 54 6) 6] [(76 29 32 58) 29] [(37 23 1 85) 1] [(92 79 99 57) 57] [(25 59 45 90) 25] [(93 99 98 20) 20] [(56 76 18 90) 18] [(60 89 4 21) 4] [(89 32 84 87) 32] [(1 77 57 25) 1] [(46 72 53 92) 46] [(-94 -63 80 99) -94] [(79 -55 -18 83) -55] [(52 -87 -70 -36) -87] [(28 8 -51 -64) -64] [(-61 55 -35 69) -61] [(98 -34 -61 -49) -61] [(42 64 69 4) 4] [(57 41 1 9) 1] [(87 -42 -26 -85) -85] [(32 19 39 -83) -83] [(-3 -32 93 46) -32] [(91 -99 -85 59) -99] [(82 40 -34 -89) -89] [(8 -96 54 91) -96] [(13 61 55 96) 13] [(9 8 -19 -20) -20] [(14 52 94 -65) -65] [(-66 -73 100 36) -73] [(-48 -56 -41 23) -56] [(-37 -6 17 86) -37] [(-55 -96 -7 -48) -96] [(48 -33 -2 -1) -33] [(-61 34 4 81) -61] [(80 43 50 16) 16] [(79 17 72 -52) -52] [(-95 88 -50 -10) -95] [(97 58 61 -73) -73] [(-69 -39 94 16) -69] [(77 -31 -47 16) -47] [(60 -96 -52 7) -96] [(45 -88 -33 56) -88] [(58 59 53 29) 29] [(-19 32 30 57) -19] [(24 7 -63 -52) -63] [(-16 13 27 93) -16] [(-39 -78 89 -48) -78] [(87 -5 -76 -35) -76] [(0 100 40 -94) -94] [(81 59 74 18) 18] [(-25 -98 99 1) -98] [(-78 -3 -37 60) -78] [(36 79 -15 21) -15] [(71 33 -60 -69) -69] [(29 48 -85 82) -85] [(-73 58 9 -14) -73] [(14 97 -77 65) -77] [(-85 -66 -18 39) -85] [(60 -87 13 -72) -87] [(-46 -60 -24 -81) -81] [(-26 -73 39 13) -73] [(50 -79 33 66) -79] [(84 -79 34 -63) -79] [(-48 -40 41 -56) -56] [(-71 -74 -77 -12) -77] [(88 -85 -62 46) -85] [(95 56 14 -80) -80] [(-15 98 57 44) -15] [(-35 -10 52 -42) -42] [(99 39 36 -84) -84] [(30 52 -5 -59) -59])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: -40                 | Program output: 29                 
Correct output: 5                   | Program output: 15                 
Correct output: -99                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 55                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 80                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 87                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 23                 
Correct output: 57                  | Program output: 79                 
Correct output: 25                  | Program output: 59                 
Correct output: 20                  | Program output: 99                 
Correct output: 18                  | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 46                  | Program output: 72                 
Correct output: -94                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: 8                  
Correct output: -61                 | Program output: 55                 
Correct output: -61                 | Program output: -34                
Correct output: 4                   | Program output: 64                 
Correct output: 1                   | Program output: 41                 
Correct output: -85                 | Program output: -42                
Correct output: -83                 | Program output: 19                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 61                 
Correct output: -20                 | Program output: 8                  
Correct output: -65                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: 34                 
Correct output: 16                  | Program output: 43                 
Correct output: -52                 | Program output: 17                 
Correct output: -95                 | Program output: 88                 
Correct output: -73                 | Program output: 58                 
Correct output: -69                 | Program output: -39                
Correct output: -47                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 59                 
Correct output: -19                 | Program output: 32                 
Correct output: -63                 | Program output: 7                  
Correct output: -16                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -5                 
Correct output: -94                 | Program output: 100                
Correct output: 18                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -3                 
Correct output: -15                 | Program output: 79                 
Correct output: -69                 | Program output: 33                 
Correct output: -85                 | Program output: 48                 
Correct output: -73                 | Program output: 58                 
Correct output: -77                 | Program output: 97                 
Correct output: -85                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -40                
Correct output: -77                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: 56                 
Correct output: -15                 | Program output: 98                 
Correct output: -42                 | Program output: -10                
Correct output: -84                 | Program output: 39                 
Correct output: -59                 | Program output: 52                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (integer_empty boolean_dup_times in3 integer_dup_times integer_dup_items integer_add exec_eq integer_empty print_exec (boolean_and exec_dup (exec_do*while (integer_lt integer_max boolean_frominteger) integer_dec in1) in2 exec_when (print_integer boolean_eq) boolean_invert_first_then_and boolean_dup_items))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (integer_empty boolean_dup_times in3 integer_dup_times integer_dup_items integer_add exec_eq integer_empty print_exec (boolean_and exec_dup (exec_do*while (integer_lt integer_max boolean_frominteger) integer_dec in1) in2 exec_when (print_integer boolean_eq) boolean_invert_first_then_and boolean_dup_items))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 5 4 4 1000 3 16 1000 4 5)
Population mean number of elite cases: 2.04
Count of perfect (error zero) individuals by case: (3 5 4 4 0 3 16 0 4 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_681} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Best program: (tagged_681 integer_pop boolean_yankdup boolean_flush integer_lte exec_yankdup boolean_xor integer_yankdup integer_gte exec_noop boolean_stackdepth integer_stackdepth boolean_not integer_dec in2 print_integer)
Errors: [1 1 0 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 17
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.997 0.995 0.996 0.996 1.0 0.997 0.984 1.0 0.996 0.995)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 50.48
Average program size in population (points): 69.372
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 461199
--- Timings ---
Current time: 1559594060698 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 28.3%
Fitness Testing:      1.7 seconds, 67.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: -40                 | Program output: 29                 
Correct output: 5                   | Program output: 15                 
Correct output: -99                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 55                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 80                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 87                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 23                 
Correct output: 57                  | Program output: 79                 
Correct output: 25                  | Program output: 59                 
Correct output: 20                  | Program output: 99                 
Correct output: 18                  | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 46                  | Program output: 72                 
Correct output: -94                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: 8                  
Correct output: -61                 | Program output: 55                 
Correct output: -61                 | Program output: -34                
Correct output: 4                   | Program output: 64                 
Correct output: 1                   | Program output: 41                 
Correct output: -85                 | Program output: -42                
Correct output: -83                 | Program output: 19                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 61                 
Correct output: -20                 | Program output: 8                  
Correct output: -65                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: 34                 
Correct output: 16                  | Program output: 43                 
Correct output: -52                 | Program output: 17                 
Correct output: -95                 | Program output: 88                 
Correct output: -73                 | Program output: 58                 
Correct output: -69                 | Program output: -39                
Correct output: -47                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 59                 
Correct output: -19                 | Program output: 32                 
Correct output: -63                 | Program output: 7                  
Correct output: -16                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -5                 
Correct output: -94                 | Program output: 100                
Correct output: 18                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -3                 
Correct output: -15                 | Program output: 79                 
Correct output: -69                 | Program output: 33                 
Correct output: -85                 | Program output: 48                 
Correct output: -73                 | Program output: 58                 
Correct output: -77                 | Program output: 97                 
Correct output: -85                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -40                
Correct output: -77                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: 56                 
Correct output: -15                 | Program output: 98                 
Correct output: -42                 | Program output: -10                
Correct output: -84                 | Program output: 39                 
Correct output: -59                 | Program output: 52                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count})
Lexicase best program: (in2 exec_k_when_autoconstructing (print_integer integer_flush integer_lt boolean_not) (exec_yank boolean_rot integer_min integer_dup_times boolean_yankdup) exec_dup (integer_dup boolean_dup_items) exec_if () (integer_eq exec_empty boolean_or boolean_pop) integer_div integer_mod boolean_invert_second_then_and integer_sub boolean_not exec_swap () (exec_k (exec_while (exec_do*count ())) ()))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count})
Zero cases best program: (in2 exec_k_when_autoconstructing (print_integer integer_flush integer_lt boolean_not) (exec_yank boolean_rot integer_min integer_dup_times boolean_yankdup) exec_dup (integer_dup boolean_dup_items) exec_if () (integer_eq exec_empty boolean_or boolean_pop) integer_div integer_mod boolean_invert_second_then_and integer_sub boolean_not exec_swap () (exec_k (exec_while (exec_do*count ())) ()))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 234 234 236 2 2 168 2 238 236)
Population mean number of elite cases: 1.52
Count of perfect (error zero) individuals by case: (164 234 234 236 2 2 168 2 238 236)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction 69} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count})
Best program: (in2 exec_k_when_autoconstructing (print_integer integer_flush integer_lt boolean_not) (exec_yank boolean_rot 69 integer_min integer_lte boolean_yankdup) exec_dup (integer_dup exec_if () (integer_eq exec_empty boolean_pop)) integer_mod boolean_invert_second_then_and integer_sub exec_swap () (exec_k (exec_while (exec_do*count ())) ()))
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 8.484
Median total errors in population: 10
Error averages by case: (0.836 0.766 0.766 0.764 0.998 0.998 0.832 0.998 0.762 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.712
Average program size in population (points): 44.595
Average percent parens in population: 0.241
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 903596
--- Timings ---
Current time: 1559594062637 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         1.8 seconds, 38.3%
Fitness Testing:      2.4 seconds, 52.3%
Report:               0.3 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: -40                 | Program output: 29                 
Correct output: 5                   | Program output: 15                 
Correct output: -99                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 55                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 80                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 87                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 23                 
Correct output: 57                  | Program output: 79                 
Correct output: 25                  | Program output: 59                 
Correct output: 20                  | Program output: 99                 
Correct output: 18                  | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 46                  | Program output: 72                 
Correct output: -94                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: 8                  
Correct output: -61                 | Program output: 55                 
Correct output: -61                 | Program output: -34                
Correct output: 4                   | Program output: 64                 
Correct output: 1                   | Program output: 41                 
Correct output: -85                 | Program output: -42                
Correct output: -83                 | Program output: 19                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 61                 
Correct output: -20                 | Program output: 8                  
Correct output: -65                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: 34                 
Correct output: 16                  | Program output: 43                 
Correct output: -52                 | Program output: 17                 
Correct output: -95                 | Program output: 88                 
Correct output: -73                 | Program output: 58                 
Correct output: -69                 | Program output: -39                
Correct output: -47                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 59                 
Correct output: -19                 | Program output: 32                 
Correct output: -63                 | Program output: 7                  
Correct output: -16                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -5                 
Correct output: -94                 | Program output: 100                
Correct output: 18                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -3                 
Correct output: -15                 | Program output: 79                 
Correct output: -69                 | Program output: 33                 
Correct output: -85                 | Program output: 48                 
Correct output: -73                 | Program output: 58                 
Correct output: -77                 | Program output: 97                 
Correct output: -85                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -40                
Correct output: -77                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: 56                 
Correct output: -15                 | Program output: 98                 
Correct output: -42                 | Program output: -10                
Correct output: -84                 | Program output: 39                 
Correct output: -59                 | Program output: 52                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte})
Lexicase best program: (in2 exec_k_when_autoconstructing (print_integer integer_flush integer_lt exec_yank boolean_rot boolean_rot integer_lte boolean_yankdup) (boolean_rot exec_dup (integer_dup integer_lt exec_if () (boolean_or boolean_pop))) integer_div integer_mod integer_sub boolean_not exec_swap () (exec_while (exec_do*count (integer_gte))))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte})
Zero cases best program: (in2 exec_k_when_autoconstructing (print_integer integer_flush integer_lt exec_yank boolean_rot boolean_rot integer_lte boolean_yankdup) (boolean_rot exec_dup (integer_dup integer_lt exec_if () (boolean_or boolean_pop))) integer_div integer_mod integer_sub boolean_not exec_swap () (exec_while (exec_do*count (integer_gte))))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 319 302 223 644 301 439 125 16 17)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (223 319 302 223 644 301 439 125 16 17)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction tagged_681} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction in2})
Best program: (exec_stackdepth tagged_681 integer_add integer_pop boolean_yankdup boolean_flush integer_lte exec_yankdup boolean_xor integer_yankdup integer_flush exec_noop boolean_stackdepth integer_stackdepth in2 boolean_not print_integer integer_dec in2)
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 7.391
Median total errors in population: 7
Error averages by case: (0.777 0.681 0.698 0.777 0.356 0.699 0.561 0.875 0.984 0.983)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.991
Average program size in population (points): 40.399
Average percent parens in population: 0.217
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1290105
--- Timings ---
Current time: 1559594064461 milliseconds
Total Time:           6.5 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.9 seconds, 44.8%
Fitness Testing:      2.9 seconds, 45.2%
Report:               0.6 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 72                 
Correct output: 33                  | Program output: 79                 
Correct output: -40                 | Program output: 29                 
Correct output: 5                   | Program output: 15                 
Correct output: -99                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 55                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 80                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 87                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 23                 
Correct output: 57                  | Program output: 79                 
Correct output: 25                  | Program output: 59                 
Correct output: 20                  | Program output: 99                 
Correct output: 18                  | Program output: 76                 
Correct output: 4                   | Program output: 89                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 46                  | Program output: 72                 
Correct output: -94                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: 8                  
Correct output: -61                 | Program output: 55                 
Correct output: -61                 | Program output: -34                
Correct output: 4                   | Program output: 64                 
Correct output: 1                   | Program output: 41                 
Correct output: -85                 | Program output: -42                
Correct output: -83                 | Program output: 19                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 61                 
Correct output: -20                 | Program output: 8                  
Correct output: -65                 | Program output: 52                 
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: 34                 
Correct output: 16                  | Program output: 43                 
Correct output: -52                 | Program output: 17                 
Correct output: -95                 | Program output: 88                 
Correct output: -73                 | Program output: 58                 
Correct output: -69                 | Program output: -39                
Correct output: -47                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 59                 
Correct output: -19                 | Program output: 32                 
Correct output: -63                 | Program output: 7                  
Correct output: -16                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -5                 
Correct output: -94                 | Program output: 100                
Correct output: 18                  | Program output: 59                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -3                 
Correct output: -15                 | Program output: 79                 
Correct output: -69                 | Program output: 33                 
Correct output: -85                 | Program output: 48                 
Correct output: -73                 | Program output: 58                 
Correct output: -77                 | Program output: 97                 
Correct output: -85                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -40                
Correct output: -77                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: 56                 
Correct output: -15                 | Program output: 98                 
Correct output: -42                 | Program output: -10                
Correct output: -84                 | Program output: 39                 
Correct output: -59                 | Program output: 52                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction 69} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count})
Lexicase best program: (in2 boolean_swap exec_k_when_autoconstructing (print_integer integer_flush integer_lt exec_yank boolean_rot 69 integer_min boolean_yankdup) (exec_dup (integer_dup exec_if () (integer_eq exec_empty boolean_or boolean_pop))) integer_div integer_sub boolean_not boolean_rot boolean_shove exec_swap () (exec_while (exec_do*count ())))
Lexicase best errors: [0 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction 69} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count})
Zero cases best program: (in2 boolean_swap exec_k_when_autoconstructing (print_integer integer_flush integer_lt exec_yank boolean_rot 69 integer_min boolean_yankdup) (exec_dup (integer_dup exec_if () (integer_eq exec_empty boolean_or boolean_pop))) integer_div integer_sub boolean_not boolean_rot boolean_shove exec_swap () (exec_while (exec_do*count ())))
Zero cases best errors: [0 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 233 163 234 234 178 184 185 235 184)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (235 233 163 234 234 178 184 185 235 184)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction 69} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count})
Best program: (integer_dup in2 exec_k_when_autoconstructing (integer_min print_integer integer_lt boolean_not) (exec_yank boolean_rot 69 integer_min exec_dup_times () integer_lte boolean_yankdup) integer_dup exec_if () (exec_empty boolean_or boolean_pop) integer_mod boolean_invert_second_then_and integer_sub boolean_not exec_swap () (exec_while (exec_do*count ())))
Errors: [0 0 1 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 36
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.935
Median total errors in population: 9
Error averages by case: (0.765 0.767 0.837 0.766 0.766 0.822 0.816 0.815 0.765 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.35
Average program size in population (points): 37.908
Average percent parens in population: 0.204
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1645630
--- Timings ---
Current time: 1559594066383 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.1 seconds, 49.6%
Fitness Testing:      3.4 seconds, 40.4%
Report:               0.7 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 90                 
Correct output: 24                  | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 68                 
Correct output: 8                   | Program output: 49                 
Correct output: 24                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 29                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 49                 
Correct output: 29                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 57                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: -18                
Correct output: -87                 | Program output: -70                
Correct output: -64                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -61                
Correct output: 4                   | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: 32                 
Correct output: -32                 | Program output: -3                 
Correct output: -99                 | Program output: -85                
Correct output: -89                 | Program output: -34                
Correct output: -96                 | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -19                
Correct output: -65                 | Program output: 14                 
Correct output: -73                 | Program output: -66                
Correct output: -56                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -55                
Correct output: -33                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 50                 
Correct output: -52                 | Program output: 72                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: 61                 
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -52                
Correct output: -88                 | Program output: -33                
Correct output: 29                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 0                  
Correct output: 18                  | Program output: 74                 
Correct output: -98                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 13                 
Correct output: -81                 | Program output: -46                
Correct output: -73                 | Program output: -26                
Correct output: -79                 | Program output: 33                 
Correct output: -79                 | Program output: 34                 
Correct output: -56                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -62                
Correct output: -80                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -35                
Correct output: -84                 | Program output: 36                 
Correct output: -59                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_dup_times boolean_invert_second_then_and integer_shove boolean_pop integer_gte exec_noop exec_eq integer_dup_times boolean_dup exec_k_when_autoconstructing (print_integer in1 exec_empty in3 exec_pop (boolean_flush boolean_dup integer_inc) integer_swap integer_min exec_s_when_autoconstructing () () () print_integer exec_dup (boolean_xor exec_s () (in1) (exec_yank) exec_swap (exec_while (integer_min boolean_shove print_exec (boolean_invert_second_then_and boolean_flush tagged_650 exec_y (boolean_yank integer_add exec_s_when_autoconstructing (boolean_or boolean_and integer_rot integer_div boolean_and boolean_swap exec_if (integer_fromboolean) (boolean_yankdup integer_min) boolean_and integer_sub integer_yank integer_dup integer_empty exec_pop (exec_swap (boolean_not exec_flush) () integer_gte exec_s (exec_swap (boolean_yank exec_dup_items exec_dup_times () exec_dup_items) ()) () ())) () ())))) ())) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_dup_times boolean_invert_second_then_and integer_shove boolean_pop integer_gte exec_noop exec_eq integer_dup_times boolean_dup exec_k_when_autoconstructing (print_integer in1 exec_empty in3 exec_pop (boolean_flush boolean_dup integer_inc) integer_swap integer_min exec_s_when_autoconstructing () () () print_integer exec_dup (boolean_xor exec_s () (in1) (exec_yank) exec_swap (exec_while (integer_min boolean_shove print_exec (boolean_invert_second_then_and boolean_flush tagged_650 exec_y (boolean_yank integer_add exec_s_when_autoconstructing (boolean_or boolean_and integer_rot integer_div boolean_and boolean_swap exec_if (integer_fromboolean) (boolean_yankdup integer_min) boolean_and integer_sub integer_yank integer_dup integer_empty exec_pop (exec_swap (boolean_not exec_flush) () integer_gte exec_s (exec_swap (boolean_yank exec_dup_items exec_dup_times () exec_dup_items) ()) () ())) () ())))) ())) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 309 293 78 293 8 77 13 78 8)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (291 309 293 78 293 8 77 13 78 8)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items})
Best program: (boolean_dup_times boolean_invert_second_then_and integer_shove boolean_pop integer_gte exec_noop exec_eq integer_dup_times boolean_dup exec_k_when_autoconstructing (print_integer in1 exec_empty in3 exec_pop (boolean_flush boolean_dup integer_inc) integer_swap integer_min exec_s_when_autoconstructing () () () print_integer exec_dup (boolean_xor exec_s () (in1) (exec_yank) exec_swap (exec_while (integer_min boolean_shove print_exec (boolean_invert_second_then_and boolean_flush tagged_650 exec_y (boolean_yank integer_add exec_s_when_autoconstructing (boolean_or boolean_and integer_rot integer_div boolean_and boolean_swap exec_if (integer_fromboolean) (boolean_yankdup integer_min) boolean_and integer_sub integer_yank integer_dup integer_empty exec_pop (exec_swap (boolean_not exec_flush) () integer_gte exec_s (exec_swap (boolean_yank exec_dup_items exec_dup_times () exec_dup_items) ()) () ())) () ())))) ())) ())
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 65
Size: 95
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 8.552
Median total errors in population: 10
Error averages by case: (0.709 0.691 0.707 0.922 0.707 0.992 0.923 0.987 0.922 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.571
Average program size in population (points): 25.555
Average percent parens in population: 0.188
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1899322
--- Timings ---
Current time: 1559594068189 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.4 seconds, 53.3%
Fitness Testing:      3.7 seconds, 36.0%
Report:               1.0 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 90                 
Correct output: 24                  | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 68                 
Correct output: 8                   | Program output: 49                 
Correct output: 24                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 29                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 49                 
Correct output: 29                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 57                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: -18                
Correct output: -87                 | Program output: -70                
Correct output: -64                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -61                
Correct output: 4                   | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: 32                 
Correct output: -32                 | Program output: -3                 
Correct output: -99                 | Program output: -85                
Correct output: -89                 | Program output: -34                
Correct output: -96                 | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -19                
Correct output: -65                 | Program output: 14                 
Correct output: -73                 | Program output: -66                
Correct output: -56                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -55                
Correct output: -33                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 50                 
Correct output: -52                 | Program output: 72                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: 61                 
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -52                
Correct output: -88                 | Program output: -33                
Correct output: 29                  | Program output: 53                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 0                  
Correct output: 18                  | Program output: 74                 
Correct output: -98                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 13                 
Correct output: -81                 | Program output: -46                
Correct output: -73                 | Program output: -26                
Correct output: -79                 | Program output: 33                 
Correct output: -79                 | Program output: 34                 
Correct output: -56                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -62                
Correct output: -80                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -35                
Correct output: -84                 | Program output: 36                 
Correct output: -59                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_dup_times boolean_invert_second_then_and exec_do*times () boolean_pop integer_gte exec_noop exec_eq integer_dup_times boolean_dup exec_k_when_autoconstructing (print_integer in1 exec_empty in3 exec_pop (integer_yankdup boolean_flush boolean_dup integer_inc) integer_swap integer_min exec_s_when_autoconstructing () () () integer_mult print_integer boolean_xor exec_s () (in1) (exec_yank) boolean_flush exec_while (boolean_shove print_exec (boolean_invert_second_then_and boolean_flush exec_y (boolean_yank integer_add exec_s_when_autoconstructing (boolean_or boolean_and integer_dup_items integer_rot boolean_swap exec_if (integer_fromboolean) (boolean_yankdup integer_min) boolean_and exec_noop integer_sub integer_yank integer_dup exec_swap (boolean_not exec_flush) () integer_gte exec_s (exec_swap (boolean_yank exec_dup_items exec_dup_times () exec_dup_items) ()) () ()) () ())))) ())
Lexicase best errors: [0 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_dup_times boolean_invert_second_then_and exec_do*times () boolean_pop integer_gte exec_noop exec_eq integer_dup_times boolean_dup exec_k_when_autoconstructing (print_integer in1 exec_empty in3 exec_pop (integer_yankdup boolean_flush boolean_dup integer_inc) integer_swap integer_min exec_s_when_autoconstructing () () () integer_mult print_integer boolean_xor exec_s () (in1) (exec_yank) boolean_flush exec_while (boolean_shove print_exec (boolean_invert_second_then_and boolean_flush exec_y (boolean_yank integer_add exec_s_when_autoconstructing (boolean_or boolean_and integer_dup_items integer_rot boolean_swap exec_if (integer_fromboolean) (boolean_yankdup integer_min) boolean_and exec_noop integer_sub integer_yank integer_dup exec_swap (boolean_not exec_flush) () integer_gte exec_s (exec_swap (boolean_yank exec_dup_items exec_dup_times () exec_dup_items) ()) () ()) () ())))) ())
Zero cases best errors: [0 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 265 266 323 339 603 2 2 213 323)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (583 265 266 323 339 603 2 2 213 323)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items})
Best program: (boolean_dup_times boolean_invert_second_then_and integer_shove boolean_pop integer_gte integer_yankdup exec_noop integer_dup_times boolean_dup exec_k_when_autoconstructing (in1 exec_empty in3 exec_pop (boolean_flush boolean_dup integer_inc) integer_swap integer_min exec_s_when_autoconstructing () () () print_integer exec_dup (integer_swap boolean_xor exec_s () (in1) (exec_yank) exec_swap (exec_while (integer_min boolean_shove print_exec (exec_s () (boolean_invert_second_then_and boolean_flush tagged_650 exec_y (boolean_yank integer_add exec_s_when_autoconstructing (boolean_or boolean_and integer_rot integer_div boolean_and boolean_swap exec_if (integer_fromboolean) (boolean_yankdup integer_min) boolean_and integer_sub integer_yank integer_dup integer_empty exec_pop (exec_empty exec_swap (boolean_not exec_flush) () integer_gte exec_s (exec_swap (exec_do*times (boolean_yank exec_dup_items exec_dup_times () exec_dup_items)) ()) () ())) () ())) ()))) ())) ())
Errors: [0 0 0 0 0 0 1 1 1 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 102
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.081
Median total errors in population: 7
Error averages by case: (0.417 0.735 0.734 0.677 0.661 0.397 0.998 0.998 0.787 0.677)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.304
Average program size in population (points): 75.062
Average percent parens in population: 0.277
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2247162
--- Timings ---
Current time: 1559594070104 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.6 seconds, 54.9%
Fitness Testing:      4.1 seconds, 34.1%
Report:               1.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 72                 
Correct output: 24                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 56                 
Correct output: 8                   | Program output: 70                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 40                 
Correct output: 18                  | Program output: 45                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 58                 
Correct output: 1                   | Program output: 37                 
Correct output: 57                  | Program output: 57                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 56                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: 79                 
Correct output: -87                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -49                
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -3                 
Correct output: -99                 | Program output: 59                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -73                 | Program output: -66                
Correct output: -56                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -55                
Correct output: -33                 | Program output: -1                 
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 16                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: 16                 
Correct output: -96                 | Program output: 7                  
Correct output: -88                 | Program output: 45                 
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -48                
Correct output: -76                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: 21                 
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -26                
Correct output: -79                 | Program output: 50                 
Correct output: -79                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -71                
Correct output: -85                 | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_421} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_shove integer_fromboolean boolean_pop exec_noop) (in4 boolean_dup) exec_k_when_autoconstructing (in1 in3 boolean_dup in4 exec_s_when_autoconstructing () () () integer_empty boolean_dup_items boolean_dup_times integer_min print_integer boolean_xor exec_s () (in1) (boolean_invert_second_then_and exec_yank) tag_boolean_876 integer_yank exec_while (boolean_dup_items integer_min integer_gte boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (tagged_650 exec_y (boolean_dup tag_exec_421 (integer_add boolean_or boolean_and integer_rot -84 boolean_yankdup integer_min) exec_when (boolean_and integer_yank integer_empty exec_pop (integer_rot exec_swap (exec_flush boolean_not exec_flush) () integer_gte print_newline integer_stackdepth boolean_yank exec_dup_items))))) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 85
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_421} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_shove integer_fromboolean boolean_pop exec_noop) (in4 boolean_dup) exec_k_when_autoconstructing (in1 in3 boolean_dup in4 exec_s_when_autoconstructing () () () integer_empty boolean_dup_items boolean_dup_times integer_min print_integer boolean_xor exec_s () (in1) (boolean_invert_second_then_and exec_yank) tag_boolean_876 integer_yank exec_while (boolean_dup_items integer_min integer_gte boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (tagged_650 exec_y (boolean_dup tag_exec_421 (integer_add boolean_or boolean_and integer_rot -84 boolean_yankdup integer_min) exec_when (boolean_and integer_yank integer_empty exec_pop (integer_rot exec_swap (exec_flush boolean_not exec_flush) () integer_gte print_newline integer_stackdepth boolean_yank exec_dup_items))))) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 85
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 116 276 278 109 114 114 110 269 521)
Population mean number of elite cases: 2.18
Count of perfect (error zero) individuals by case: (275 116 276 278 109 114 114 110 269 521)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Best program: (exec_s_when_autoconstructing (integer_lte integer_dup exec_if (integer_shove boolean_pop boolean_invert_second_then_and exec_noop) (in4 boolean_dup) exec_k_when_autoconstructing (in1 boolean_dup in4 exec_noop exec_s_when_autoconstructing () () () boolean_dup_times integer_min print_integer integer_flush boolean_xor exec_s () (boolean_and in1) (exec_yank) tag_boolean_876 exec_do*count (integer_yank exec_while (boolean_dup_items integer_min integer_gte boolean_invert_second_then_and exec_pop (boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (tagged_650 exec_y (boolean_dup integer_add boolean_or boolean_and integer_rot -84 boolean_yankdup integer_min) boolean_and integer_yank integer_empty exec_pop (integer_dup_times) integer_rot exec_swap (exec_flush integer_dup_items boolean_not exec_flush) () integer_gte integer_fromboolean exec_do*count (boolean_yank exec_dup_items))))) ()) () ())
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 89
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.818
Median total errors in population: 9
Error averages by case: (0.725 0.884 0.724 0.722 0.891 0.886 0.886 0.89 0.731 0.479)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.062
Average program size in population (points): 83.699
Average percent parens in population: 0.275
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2762928
--- Timings ---
Current time: 1559594072141 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.8 seconds, 55.4%
Fitness Testing:      4.6 seconds, 32.9%
Report:               1.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 195
Test mean error for best: 0.19500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 72                 
Correct output: 24                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 56                 
Correct output: 8                   | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 29                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 57                  | Program output: 57                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: -18                
Correct output: -87                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -61                
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -3                 
Correct output: -99                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -73                 | Program output: -66                
Correct output: -56                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -55                
Correct output: -33                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 16                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -52                
Correct output: -88                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -48                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -26                
Correct output: -79                 | Program output: 33                 
Correct output: -79                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_shove integer_fromboolean boolean_invert_second_then_and exec_noop) (boolean_dup) exec_k_when_autoconstructing (integer_inc in1 in3 exec_empty boolean_dup in4 exec_s_when_autoconstructing () () () integer_min integer_min print_integer boolean_xor integer_empty exec_s () (in1) (exec_yank) boolean_swap) (tag_boolean_876 integer_yank exec_yank) exec_while (integer_gte boolean_invert_second_then_and boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (tagged_650 exec_y (integer_add exec_dup_items boolean_or boolean_and exec_do*times (integer_rot boolean_yankdup exec_do*count (integer_min) integer_yank integer_rot exec_swap (exec_flush exec_flush) () integer_gte print_newline exec_dup_items)))) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_shove integer_fromboolean boolean_invert_second_then_and exec_noop) (boolean_dup) exec_k_when_autoconstructing (integer_inc in1 in3 exec_empty boolean_dup in4 exec_s_when_autoconstructing () () () integer_min integer_min print_integer boolean_xor integer_empty exec_s () (in1) (exec_yank) boolean_swap) (tag_boolean_876 integer_yank exec_yank) exec_while (integer_gte boolean_invert_second_then_and boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (tagged_650 exec_y (integer_add exec_dup_items boolean_or boolean_and exec_do*times (integer_rot boolean_yankdup exec_do*count (integer_min) integer_yank integer_rot exec_swap (exec_flush exec_flush) () integer_gte print_newline exec_dup_items)))) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 96 96 96 448 629 133 97 437 547)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (437 96 96 96 448 629 133 97 437 547)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_shove boolean_invert_second_then_and boolean_yank exec_noop) (in4 boolean_dup) exec_k_when_autoconstructing (in1 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min print_integer boolean_xor exec_s () (in1) (exec_yank) boolean_swap) (tag_boolean_876 integer_yank exec_yank) boolean_dup_items boolean_flush in3 boolean_or) (exec_pop () exec_y_when_autoconstructing (tagged_650 exec_y (boolean_dup integer_add boolean_or boolean_and exec_dup (exec_do*times (integer_rot boolean_eq -84 boolean_yankdup exec_do*count (integer_min) boolean_and integer_yank integer_empty integer_rot exec_swap (exec_flush boolean_not exec_flush) () integer_gte print_newline boolean_yank exec_dup_items))))) ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 79
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.984
Median total errors in population: 7
Error averages by case: (0.563 0.904 0.904 0.904 0.552 0.371 0.867 0.903 0.563 0.453)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.886
Average program size in population (points): 75.176
Average percent parens in population: 0.253
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3536668
--- Timings ---
Current time: 1559594074495 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 54.9%
Fitness Testing:      5.4 seconds, 33.2%
Report:               1.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 23                 
Correct output: 57                  | Program output: 57                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 56                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -49                
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 16                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: -31                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: 21                 
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (in4 boolean_dup) in2) (exec_k_when_autoconstructing (in1 boolean_dup print_boolean) (integer_min integer_min print_integer integer_lt boolean_xor exec_s () (in1 in1) (exec_yank) tag_boolean_876 integer_yank exec_yank) exec_while (boolean_dup_items boolean_invert_second_then_and boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (exec_y (boolean_dup integer_add) integer_add boolean_or boolean_and exec_do*times (integer_rot -84 boolean_yankdup integer_mult) integer_min) integer_max) (boolean_and integer_yank integer_rot exec_swap (boolean_not exec_flush) () integer_gte print_newline boolean_yank exec_dup_items))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 75
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (in4 boolean_dup) in2) (exec_k_when_autoconstructing (in1 boolean_dup print_boolean) (integer_min integer_min print_integer integer_lt boolean_xor exec_s () (in1 in1) (exec_yank) tag_boolean_876 integer_yank exec_yank) exec_while (boolean_dup_items boolean_invert_second_then_and boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (exec_y (boolean_dup integer_add) integer_add boolean_or boolean_and exec_do*times (integer_rot -84 boolean_yankdup integer_mult) integer_min) integer_max) (boolean_and integer_yank integer_rot exec_swap (boolean_not exec_flush) () integer_gte print_newline boolean_yank exec_dup_items))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 75
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 481 155 464 409 685 484 408 498 149)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (149 481 155 464 409 685 484 408 498 149)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_876} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Best program: (exec_s_when_autoconstructing (integer_lte exec_if (integer_fromboolean boolean_invert_second_then_and exec_noop) (boolean_yank in4 boolean_dup) in2) (exec_k_when_autoconstructing (in1 in3 print_boolean) (integer_yank exec_s_when_autoconstructing () () () integer_min integer_min print_integer integer_lt boolean_xor exec_s () (in1 in1) (exec_yank) tag_boolean_876 integer_yank exec_yank) exec_while (boolean_dup_items integer_gte boolean_invert_second_then_and boolean_flush in3 boolean_or) exec_pop () exec_y_when_autoconstructing (exec_y (boolean_dup integer_add boolean_or print_boolean boolean_and exec_do*times (integer_rot -84 boolean_yankdup in4) exec_flush integer_yank integer_rot exec_swap (exec_flush boolean_not exec_flush) () integer_eq integer_gte print_newline boolean_yank exec_dup_items))) ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 60
Size: 81
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.118
Median total errors in population: 5
Error averages by case: (0.851 0.519 0.845 0.536 0.591 0.315 0.516 0.592 0.502 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.535
Average program size in population (points): 81.759
Average percent parens in population: 0.271
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4306886
--- Timings ---
Current time: 1559594076825 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 54.3%
Fitness Testing:      6.2 seconds, 33.3%
Report:               2.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 57                  | Program output: 57                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -61                
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 16                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_boolean_876} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_s_when_autoconstructing (exec_if (integer_yankdup integer_shove integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) boolean_dup) (exec_k_when_autoconstructing (in1 in2 in3 integer_min in4 exec_s_when_autoconstructing () () () integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (exec_yank) boolean_swap) (tag_boolean_876 exec_yank) exec_while (boolean_dup_items boolean_empty integer_gte in3 exec_y_when_autoconstructing (tagged_650 exec_y (boolean_dup integer_add integer_min) boolean_and exec_do*times (integer_rot -84 exec_do*count (integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (boolean_xor boolean_not print_newline exec_dup_items) ())))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 77
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_boolean_876} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction -84} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_s_when_autoconstructing (exec_if (integer_yankdup integer_shove integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) boolean_dup) (exec_k_when_autoconstructing (in1 in2 in3 integer_min in4 exec_s_when_autoconstructing () () () integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (exec_yank) boolean_swap) (tag_boolean_876 exec_yank) exec_while (boolean_dup_items boolean_empty integer_gte in3 exec_y_when_autoconstructing (tagged_650 exec_y (boolean_dup integer_add integer_min) boolean_and exec_do*times (integer_rot -84 exec_do*count (integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (boolean_xor boolean_not print_newline exec_dup_items) ())))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 77
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (616 431 276 418 479 495 496 477 660 488)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (616 431 276 418 479 495 496 477 660 488)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction tag_boolean_876} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_650} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items})
Best program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 52
Size: 72
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 5.164
Median total errors in population: 5
Error averages by case: (0.384 0.569 0.724 0.582 0.521 0.505 0.504 0.523 0.34 0.512)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.939
Average program size in population (points): 79.967
Average percent parens in population: 0.262
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5150165
--- Timings ---
Current time: 1559594079158 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 54.0%
Fitness Testing:      7.0 seconds, 33.2%
Report:               2.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 72


Auto-simplifying with starting size: 72
step: 0
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 500
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 1000
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 1500
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 2000
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 2500
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 3000
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 3500
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 4000
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 4500
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 5000
program: (exec_s_when_autoconstructing (integer_fromboolean boolean_invert_second_then_and boolean_yank exec_noop) (boolean_eq) (boolean_dup) exec_k_when_autoconstructing (in1 in2 in3 in4 exec_s_when_autoconstructing () () () integer_min integer_min integer_min print_integer boolean_xor exec_do*range () exec_s () (boolean_flush in1) (tag_boolean_876 exec_yank) boolean_dup_items exec_rot (boolean_empty integer_gte exec_y_when_autoconstructing (tagged_650 boolean_dup integer_add boolean_or boolean_and exec_do*times (integer_rot exec_yankdup integer_swap integer_min) integer_swap boolean_and integer_yank integer_empty exec_swap (exec_flush boolean_xor integer_pop) () boolean_not integer_shove print_newline boolean_yank exec_dup_items)) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -40                 | Program output: -40                
Correct output: 5                   | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 53                 
Correct output: 86                  | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -39                 | Program output: -39                
Correct output: 78                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: 59                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 57                  | Program output: 57                 
Correct output: 25                  | Program output: 25                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -94                 | Program output: -94                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -61                 | Program output: -61                
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: 13                  | Program output: 13                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -73                 | Program output: -73                
Correct output: -56                 | Program output: -56                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: 16                  | Program output: 16                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -69                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 29                  | Program output: 29                 
Correct output: -19                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -15                 | Program output: -15                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -59                 | Program output: -59                
;;******************************
