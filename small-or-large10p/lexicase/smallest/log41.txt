Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-100 -93 -93 -93] -100] [[-59 -74 -74 -74] -74] [[48 48 91 48] 48] [[29 25 25 25] 25] [[-15 -15 -15 42] -15] [[58 58 58 -35] -35] [[40 79 79 79] 40] [[7 7 -100 7] -100] [[-6 -6 -6 -98] -98] [[83 83 85 83] 83] [(10 10 10 10) 10] [(-50 -50 -50 -50) -50] [(-93 -93 -93 -93) -93] [(81 81 81 81) 81] [(-56 -56 -56 -56) -56] [(76 28 43 18) 18] [(11 95 85 82) 11] [(100 37 4 25) 4] [(44 87 9 51) 9] [(13 24 98 17) 13] [(48 92 13 46) 13] [(70 82 34 20) 20] [(41 74 17 88) 17] [(92 8 87 18) 8] [(72 99 20 51) 20] [(78 94 42 38) 38] [(15 92 43 71) 15] [(91 62 63 40) 40] [(2 87 11 48) 2] [(24 60 29 99) 24] [(48 52 66 14) 14] [(38 96 63 45) 38] [(97 26 47 63) 26] [(75 9 86 0) 0] [(92 81 97 42) 42] [(50 88 -22 -57) -57] [(-1 53 -77 -2) -77] [(61 -62 -48 -55) -62] [(-92 17 28 51) -92] [(84 -84 -26 43) -84] [(40 69 -94 81) -94] [(79 -40 -3 -74) -74] [(-32 -37 -76 -73) -76] [(-75 80 40 -32) -75] [(20 -84 -24 91) -84] [(-87 11 -96 89) -96] [(-17 -38 -54 -24) -54] [(-62 3 -33 -11) -62] [(8 18 -51 -70) -70] [(-28 -94 60 86) -94] [(28 73 19 75) 19] [(-45 -59 69 -31) -59] [(89 14 -23 64) -23] [(65 -66 -89 -85) -89] [(90 95 -79 -11) -79] [(-77 53 5 47) -77] [(-57 -38 63 3) -57] [(41 -29 72 78) -29] [(-76 51 -66 -37) -76] [(-66 -73 67 97) -73] [(90 -22 8 -40) -40] [(4 84 -97 27) -97] [(-7 21 72 -45) -45] [(92 85 -31 0) -31] [(70 -69 38 24) -69] [(74 -55 -21 -3) -55] [(-59 -44 -7 75) -59] [(-36 51 -2 27) -36] [(78 90 -40 -43) -43] [(-34 60 57 5) -34] [(-84 67 25 90) -84] [(-9 46 8 -70) -70] [(-76 46 57 48) -76] [(-30 15 -38 42) -38] [(-43 -30 100 76) -43] [(-41 -82 -24 -90) -90] [(81 -13 -46 91) -46] [(-73 -23 58 -24) -73] [(39 -16 -57 49) -57] [(-94 48 -61 -95) -95] [(-24 81 -27 -10) -27] [(-3 -29 19 -91) -91] [(-79 16 -24 43) -79] [(31 2 -53 -79) -79] [(35 9 28 -88) -88] [(-71 -16 60 -25) -71] [(-36 -82 -73 77) -82] [(-5 14 72 -18) -18] [(78 81 -26 36) -26] [(42 15 -37 52) -37] [(81 19 35 -34) -34] [(28 37 -3 -100) -100] [(-82 -43 33 46) -82] [(68 -18 28 -87) -87] [(-89 35 16 -10) -89])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-100 -93 -93 -93] -100]
Train Case:   6 | Input/Output: [[-59 -74 -74 -74] -74]
Train Case:   7 | Input/Output: [[48 48 91 48] 48]
Train Case:   8 | Input/Output: [[29 25 25 25] 25]
Train Case:   9 | Input/Output: [[-15 -15 -15 42] -15]
Train Case:  10 | Input/Output: [[58 58 58 -35] -35]
Train Case:  11 | Input/Output: [[40 79 79 79] 40]
Train Case:  12 | Input/Output: [[7 7 -100 7] -100]
Train Case:  13 | Input/Output: [[-6 -6 -6 -98] -98]
Train Case:  14 | Input/Output: [[83 83 85 83] 83]
Train Case:  15 | Input/Output: [(10 10 10 10) 10]
Train Case:  16 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  17 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  18 | Input/Output: [(81 81 81 81) 81]
Train Case:  19 | Input/Output: [(-56 -56 -56 -56) -56]
Train Case:  20 | Input/Output: [(76 28 43 18) 18]
Train Case:  21 | Input/Output: [(11 95 85 82) 11]
Train Case:  22 | Input/Output: [(100 37 4 25) 4]
Train Case:  23 | Input/Output: [(44 87 9 51) 9]
Train Case:  24 | Input/Output: [(13 24 98 17) 13]
Train Case:  25 | Input/Output: [(48 92 13 46) 13]
Train Case:  26 | Input/Output: [(70 82 34 20) 20]
Train Case:  27 | Input/Output: [(41 74 17 88) 17]
Train Case:  28 | Input/Output: [(92 8 87 18) 8]
Train Case:  29 | Input/Output: [(72 99 20 51) 20]
Train Case:  30 | Input/Output: [(78 94 42 38) 38]
Train Case:  31 | Input/Output: [(15 92 43 71) 15]
Train Case:  32 | Input/Output: [(91 62 63 40) 40]
Train Case:  33 | Input/Output: [(2 87 11 48) 2]
Train Case:  34 | Input/Output: [(24 60 29 99) 24]
Train Case:  35 | Input/Output: [(48 52 66 14) 14]
Train Case:  36 | Input/Output: [(38 96 63 45) 38]
Train Case:  37 | Input/Output: [(97 26 47 63) 26]
Train Case:  38 | Input/Output: [(75 9 86 0) 0]
Train Case:  39 | Input/Output: [(92 81 97 42) 42]
Train Case:  40 | Input/Output: [(50 88 -22 -57) -57]
Train Case:  41 | Input/Output: [(-1 53 -77 -2) -77]
Train Case:  42 | Input/Output: [(61 -62 -48 -55) -62]
Train Case:  43 | Input/Output: [(-92 17 28 51) -92]
Train Case:  44 | Input/Output: [(84 -84 -26 43) -84]
Train Case:  45 | Input/Output: [(40 69 -94 81) -94]
Train Case:  46 | Input/Output: [(79 -40 -3 -74) -74]
Train Case:  47 | Input/Output: [(-32 -37 -76 -73) -76]
Train Case:  48 | Input/Output: [(-75 80 40 -32) -75]
Train Case:  49 | Input/Output: [(20 -84 -24 91) -84]
Train Case:  50 | Input/Output: [(-87 11 -96 89) -96]
Train Case:  51 | Input/Output: [(-17 -38 -54 -24) -54]
Train Case:  52 | Input/Output: [(-62 3 -33 -11) -62]
Train Case:  53 | Input/Output: [(8 18 -51 -70) -70]
Train Case:  54 | Input/Output: [(-28 -94 60 86) -94]
Train Case:  55 | Input/Output: [(28 73 19 75) 19]
Train Case:  56 | Input/Output: [(-45 -59 69 -31) -59]
Train Case:  57 | Input/Output: [(89 14 -23 64) -23]
Train Case:  58 | Input/Output: [(65 -66 -89 -85) -89]
Train Case:  59 | Input/Output: [(90 95 -79 -11) -79]
Train Case:  60 | Input/Output: [(-77 53 5 47) -77]
Train Case:  61 | Input/Output: [(-57 -38 63 3) -57]
Train Case:  62 | Input/Output: [(41 -29 72 78) -29]
Train Case:  63 | Input/Output: [(-76 51 -66 -37) -76]
Train Case:  64 | Input/Output: [(-66 -73 67 97) -73]
Train Case:  65 | Input/Output: [(90 -22 8 -40) -40]
Train Case:  66 | Input/Output: [(4 84 -97 27) -97]
Train Case:  67 | Input/Output: [(-7 21 72 -45) -45]
Train Case:  68 | Input/Output: [(92 85 -31 0) -31]
Train Case:  69 | Input/Output: [(70 -69 38 24) -69]
Train Case:  70 | Input/Output: [(74 -55 -21 -3) -55]
Train Case:  71 | Input/Output: [(-59 -44 -7 75) -59]
Train Case:  72 | Input/Output: [(-36 51 -2 27) -36]
Train Case:  73 | Input/Output: [(78 90 -40 -43) -43]
Train Case:  74 | Input/Output: [(-34 60 57 5) -34]
Train Case:  75 | Input/Output: [(-84 67 25 90) -84]
Train Case:  76 | Input/Output: [(-9 46 8 -70) -70]
Train Case:  77 | Input/Output: [(-76 46 57 48) -76]
Train Case:  78 | Input/Output: [(-30 15 -38 42) -38]
Train Case:  79 | Input/Output: [(-43 -30 100 76) -43]
Train Case:  80 | Input/Output: [(-41 -82 -24 -90) -90]
Train Case:  81 | Input/Output: [(81 -13 -46 91) -46]
Train Case:  82 | Input/Output: [(-73 -23 58 -24) -73]
Train Case:  83 | Input/Output: [(39 -16 -57 49) -57]
Train Case:  84 | Input/Output: [(-94 48 -61 -95) -95]
Train Case:  85 | Input/Output: [(-24 81 -27 -10) -27]
Train Case:  86 | Input/Output: [(-3 -29 19 -91) -91]
Train Case:  87 | Input/Output: [(-79 16 -24 43) -79]
Train Case:  88 | Input/Output: [(31 2 -53 -79) -79]
Train Case:  89 | Input/Output: [(35 9 28 -88) -88]
Train Case:  90 | Input/Output: [(-71 -16 60 -25) -71]
Train Case:  91 | Input/Output: [(-36 -82 -73 77) -82]
Train Case:  92 | Input/Output: [(-5 14 72 -18) -18]
Train Case:  93 | Input/Output: [(78 81 -26 36) -26]
Train Case:  94 | Input/Output: [(42 15 -37 52) -37]
Train Case:  95 | Input/Output: [(81 19 35 -34) -34]
Train Case:  96 | Input/Output: [(28 37 -3 -100) -100]
Train Case:  97 | Input/Output: [(-82 -43 33 46) -82]
Train Case:  98 | Input/Output: [(68 -18 28 -87) -87]
Train Case:  99 | Input/Output: [(-89 35 16 -10) -89]
Test Case:   0 | Input/Output: [[-48 48 -48 -48] -48]
Test Case:   1 | Input/Output: [[-29 -29 -29 -54] -54]
Test Case:   2 | Input/Output: [[-49 15 15 15] -49]
Test Case:   3 | Input/Output: [[-67 -92 -67 -67] -92]
Test Case:   4 | Input/Output: [[8 24 8 8] 8]
Test Case:   5 | Input/Output: [[81 81 33 81] 33]
Test Case:   6 | Input/Output: [[1 86 1 1] 1]
Test Case:   7 | Input/Output: [[-24 -24 -24 -27] -27]
Test Case:   8 | Input/Output: [[-48 -27 -48 -48] -48]
Test Case:   9 | Input/Output: [[-51 84 84 84] -51]
Test Case:  10 | Input/Output: [[-31 18 -31 -31] -31]
Test Case:  11 | Input/Output: [[-21 66 66 66] -21]
Test Case:  12 | Input/Output: [[50 50 50 58] 50]
Test Case:  13 | Input/Output: [[14 14 14 10] 10]
Test Case:  14 | Input/Output: [[-53 -53 -94 -53] -94]
Test Case:  15 | Input/Output: [[-58 -20 -58 -58] -58]
Test Case:  16 | Input/Output: [[77 77 77 67] 67]
Test Case:  17 | Input/Output: [[-10 91 -10 -10] -10]
Test Case:  18 | Input/Output: [[-47 53 53 53] -47]
Test Case:  19 | Input/Output: [[-4 -47 -4 -4] -47]
Test Case:  20 | Input/Output: [[1 1 47 1] 1]
Test Case:  21 | Input/Output: [[-99 -99 69 -99] -99]
Test Case:  22 | Input/Output: [[3 -4 3 3] -4]
Test Case:  23 | Input/Output: [[87 -87 -87 -87] -87]
Test Case:  24 | Input/Output: [[-31 -69 -69 -69] -69]
Test Case:  25 | Input/Output: [[48 79 79 79] 48]
Test Case:  26 | Input/Output: [[-96 -96 -27 -96] -96]
Test Case:  27 | Input/Output: [[72 72 33 72] 33]
Test Case:  28 | Input/Output: [[90 90 -85 90] -85]
Test Case:  29 | Input/Output: [[-91 68 -91 -91] -91]
Test Case:  30 | Input/Output: [[-7 49 -7 -7] -7]
Test Case:  31 | Input/Output: [[-27 -27 -27 -46] -46]
Test Case:  32 | Input/Output: [[40 68 68 68] 40]
Test Case:  33 | Input/Output: [[-87 -87 -14 -87] -87]
Test Case:  34 | Input/Output: [[38 38 -71 38] -71]
Test Case:  35 | Input/Output: [[46 46 26 46] 26]
Test Case:  36 | Input/Output: [[15 2 15 15] 2]
Test Case:  37 | Input/Output: [[67 67 -23 67] -23]
Test Case:  38 | Input/Output: [[-57 73 73 73] -57]
Test Case:  39 | Input/Output: [[-67 -67 -67 -43] -67]
Test Case:  40 | Input/Output: [[-83 -83 36 -83] -83]
Test Case:  41 | Input/Output: [[-96 -64 -96 -96] -96]
Test Case:  42 | Input/Output: [[23 23 89 23] 23]
Test Case:  43 | Input/Output: [[-76 69 -76 -76] -76]
Test Case:  44 | Input/Output: [[20 20 -35 20] -35]
Test Case:  45 | Input/Output: [[-63 2 -63 -63] -63]
Test Case:  46 | Input/Output: [[-73 -73 -73 -10] -73]
Test Case:  47 | Input/Output: [[-85 -85 -85 -84] -85]
Test Case:  48 | Input/Output: [[51 72 51 51] 51]
Test Case:  49 | Input/Output: [[-5 71 71 71] -5]
Test Case:  50 | Input/Output: [[21 21 21 -73] -73]
Test Case:  51 | Input/Output: [[-75 -75 -75 -35] -75]
Test Case:  52 | Input/Output: [[-39 54 -39 -39] -39]
Test Case:  53 | Input/Output: [[70 70 70 -22] -22]
Test Case:  54 | Input/Output: [[-99 -99 -99 42] -99]
Test Case:  55 | Input/Output: [[98 -3 -3 -3] -3]
Test Case:  56 | Input/Output: [[-66 61 -66 -66] -66]
Test Case:  57 | Input/Output: [[50 50 3 50] 3]
Test Case:  58 | Input/Output: [[-49 -49 5 -49] -49]
Test Case:  59 | Input/Output: [[23 23 76 23] 23]
Test Case:  60 | Input/Output: [[14 14 14 -96] -96]
Test Case:  61 | Input/Output: [[-28 -99 -28 -28] -99]
Test Case:  62 | Input/Output: [[-67 28 28 28] -67]
Test Case:  63 | Input/Output: [[-89 -89 -89 -7] -89]
Test Case:  64 | Input/Output: [[16 16 16 8] 8]
Test Case:  65 | Input/Output: [[-29 -37 -37 -37] -37]
Test Case:  66 | Input/Output: [[58 58 48 58] 48]
Test Case:  67 | Input/Output: [[5 5 5 45] 5]
Test Case:  68 | Input/Output: [[51 -55 -55 -55] -55]
Test Case:  69 | Input/Output: [[-89 -33 -89 -89] -89]
Test Case:  70 | Input/Output: [[44 44 44 62] 44]
Test Case:  71 | Input/Output: [[-47 -47 -87 -47] -87]
Test Case:  72 | Input/Output: [[60 84 84 84] 60]
Test Case:  73 | Input/Output: [[-95 -95 -95 60] -95]
Test Case:  74 | Input/Output: [[47 47 47 -64] -64]
Test Case:  75 | Input/Output: [[-71 -71 -71 55] -71]
Test Case:  76 | Input/Output: [[34 -31 34 34] -31]
Test Case:  77 | Input/Output: [[-16 -1 -16 -16] -16]
Test Case:  78 | Input/Output: [[35 35 35 100] 35]
Test Case:  79 | Input/Output: [[-2 -2 -2 47] -2]
Test Case:  80 | Input/Output: [[-90 -90 -60 -90] -90]
Test Case:  81 | Input/Output: [[-55 -80 -55 -55] -80]
Test Case:  82 | Input/Output: [[-98 73 73 73] -98]
Test Case:  83 | Input/Output: [[-53 -34 -53 -53] -53]
Test Case:  84 | Input/Output: [[-26 -26 -2 -26] -26]
Test Case:  85 | Input/Output: [[78 78 78 -37] -37]
Test Case:  86 | Input/Output: [[-24 -24 -24 63] -24]
Test Case:  87 | Input/Output: [[72 -27 -27 -27] -27]
Test Case:  88 | Input/Output: [[17 17 -37 17] -37]
Test Case:  89 | Input/Output: [[45 95 95 95] 45]
Test Case:  90 | Input/Output: [[-24 -37 -24 -24] -37]
Test Case:  91 | Input/Output: [[-81 -81 -81 52] -81]
Test Case:  92 | Input/Output: [[-87 22 -87 -87] -87]
Test Case:  93 | Input/Output: [[-20 -20 -20 91] -20]
Test Case:  94 | Input/Output: [[77 77 77 -44] -44]
Test Case:  95 | Input/Output: [[-21 -11 -21 -21] -21]
Test Case:  96 | Input/Output: [[75 75 75 -4] -4]
Test Case:  97 | Input/Output: [[-62 -62 -62 -85] -85]
Test Case:  98 | Input/Output: [[-43 55 -43 -43] -43]
Test Case:  99 | Input/Output: [[61 61 61 32] 32]
Test Case: 100 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 101 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 102 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 103 | Input/Output: [(56 56 56 56) 56]
Test Case: 104 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 105 | Input/Output: [(43 43 43 43) 43]
Test Case: 106 | Input/Output: [(6 6 6 6) 6]
Test Case: 107 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 108 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 109 | Input/Output: [(42 42 42 42) 42]
Test Case: 110 | Input/Output: [(69 69 69 69) 69]
Test Case: 111 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 112 | Input/Output: [(82 82 82 82) 82]
Test Case: 113 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 114 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 115 | Input/Output: [(62 62 62 62) 62]
Test Case: 116 | Input/Output: [(42 42 42 42) 42]
Test Case: 117 | Input/Output: [(53 53 53 53) 53]
Test Case: 118 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 119 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 120 | Input/Output: [(81 81 81 81) 81]
Test Case: 121 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 122 | Input/Output: [(6 6 6 6) 6]
Test Case: 123 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 124 | Input/Output: [(74 74 74 74) 74]
Test Case: 125 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 126 | Input/Output: [(32 32 32 32) 32]
Test Case: 127 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 128 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 129 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 130 | Input/Output: [(78 78 78 78) 78]
Test Case: 131 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 132 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 133 | Input/Output: [(90 90 90 90) 90]
Test Case: 134 | Input/Output: [(26 26 26 26) 26]
Test Case: 135 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 136 | Input/Output: [(72 72 72 72) 72]
Test Case: 137 | Input/Output: [(9 9 9 9) 9]
Test Case: 138 | Input/Output: [(8 8 8 8) 8]
Test Case: 139 | Input/Output: [(24 24 24 24) 24]
Test Case: 140 | Input/Output: [(77 77 77 77) 77]
Test Case: 141 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 142 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 143 | Input/Output: [(73 73 73 73) 73]
Test Case: 144 | Input/Output: [(73 73 73 73) 73]
Test Case: 145 | Input/Output: [(78 78 78 78) 78]
Test Case: 146 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 147 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 148 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 149 | Input/Output: [(70 70 70 70) 70]
Test Case: 150 | Input/Output: [(88 88 88 88) 88]
Test Case: 151 | Input/Output: [(72 72 72 72) 72]
Test Case: 152 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 153 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 154 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 155 | Input/Output: [(33 33 33 33) 33]
Test Case: 156 | Input/Output: [(54 54 54 54) 54]
Test Case: 157 | Input/Output: [(93 93 93 93) 93]
Test Case: 158 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 159 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 160 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 161 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 162 | Input/Output: [(29 29 29 29) 29]
Test Case: 163 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 164 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 165 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 166 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 167 | Input/Output: [(73 73 73 73) 73]
Test Case: 168 | Input/Output: [(99 99 99 99) 99]
Test Case: 169 | Input/Output: [(81 81 81 81) 81]
Test Case: 170 | Input/Output: [(95 95 95 95) 95]
Test Case: 171 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 172 | Input/Output: [(73 73 73 73) 73]
Test Case: 173 | Input/Output: [(56 56 56 56) 56]
Test Case: 174 | Input/Output: [(71 71 71 71) 71]
Test Case: 175 | Input/Output: [(90 90 90 90) 90]
Test Case: 176 | Input/Output: [(48 48 48 48) 48]
Test Case: 177 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 178 | Input/Output: [(28 28 28 28) 28]
Test Case: 179 | Input/Output: [(20 20 20 20) 20]
Test Case: 180 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 181 | Input/Output: [(93 93 93 93) 93]
Test Case: 182 | Input/Output: [(40 40 40 40) 40]
Test Case: 183 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 184 | Input/Output: [(97 97 97 97) 97]
Test Case: 185 | Input/Output: [(9 9 9 9) 9]
Test Case: 186 | Input/Output: [(48 48 48 48) 48]
Test Case: 187 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 188 | Input/Output: [(58 58 58 58) 58]
Test Case: 189 | Input/Output: [(51 51 51 51) 51]
Test Case: 190 | Input/Output: [(41 41 41 41) 41]
Test Case: 191 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 192 | Input/Output: [(53 53 53 53) 53]
Test Case: 193 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 194 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 195 | Input/Output: [(44 44 44 44) 44]
Test Case: 196 | Input/Output: [(57 57 57 57) 57]
Test Case: 197 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 198 | Input/Output: [(35 35 35 35) 35]
Test Case: 199 | Input/Output: [(32 32 32 32) 32]
Test Case: 200 | Input/Output: [(54 40 88 44) 40]
Test Case: 201 | Input/Output: [(29 44 84 11) 11]
Test Case: 202 | Input/Output: [(50 59 71 23) 23]
Test Case: 203 | Input/Output: [(86 28 60 75) 28]
Test Case: 204 | Input/Output: [(63 3 0 29) 0]
Test Case: 205 | Input/Output: [(20 76 57 94) 20]
Test Case: 206 | Input/Output: [(67 13 12 94) 12]
Test Case: 207 | Input/Output: [(36 2 0 0) 0]
Test Case: 208 | Input/Output: [(23 21 44 45) 21]
Test Case: 209 | Input/Output: [(97 89 33 44) 33]
Test Case: 210 | Input/Output: [(88 33 68 35) 33]
Test Case: 211 | Input/Output: [(17 3 24 66) 3]
Test Case: 212 | Input/Output: [(97 57 23 4) 4]
Test Case: 213 | Input/Output: [(39 82 80 84) 39]
Test Case: 214 | Input/Output: [(32 89 57 97) 32]
Test Case: 215 | Input/Output: [(78 0 91 97) 0]
Test Case: 216 | Input/Output: [(14 82 16 82) 14]
Test Case: 217 | Input/Output: [(95 53 63 20) 20]
Test Case: 218 | Input/Output: [(63 14 63 65) 14]
Test Case: 219 | Input/Output: [(8 78 55 58) 8]
Test Case: 220 | Input/Output: [(11 93 36 64) 11]
Test Case: 221 | Input/Output: [(49 31 23 79) 23]
Test Case: 222 | Input/Output: [(87 65 82 17) 17]
Test Case: 223 | Input/Output: [(13 57 38 98) 13]
Test Case: 224 | Input/Output: [(89 34 52 65) 34]
Test Case: 225 | Input/Output: [(17 88 7 85) 7]
Test Case: 226 | Input/Output: [(43 41 84 29) 29]
Test Case: 227 | Input/Output: [(34 27 53 26) 26]
Test Case: 228 | Input/Output: [(38 36 41 34) 34]
Test Case: 229 | Input/Output: [(86 71 61 21) 21]
Test Case: 230 | Input/Output: [(71 22 32 91) 22]
Test Case: 231 | Input/Output: [(36 69 69 54) 36]
Test Case: 232 | Input/Output: [(4 23 63 87) 4]
Test Case: 233 | Input/Output: [(18 37 67 68) 18]
Test Case: 234 | Input/Output: [(58 59 34 83) 34]
Test Case: 235 | Input/Output: [(15 4 97 100) 4]
Test Case: 236 | Input/Output: [(79 23 56 5) 5]
Test Case: 237 | Input/Output: [(13 49 30 66) 13]
Test Case: 238 | Input/Output: [(44 8 74 45) 8]
Test Case: 239 | Input/Output: [(58 32 45 98) 32]
Test Case: 240 | Input/Output: [(23 74 75 70) 23]
Test Case: 241 | Input/Output: [(92 59 93 62) 59]
Test Case: 242 | Input/Output: [(97 43 83 57) 43]
Test Case: 243 | Input/Output: [(10 70 85 3) 3]
Test Case: 244 | Input/Output: [(17 23 16 84) 16]
Test Case: 245 | Input/Output: [(81 50 63 29) 29]
Test Case: 246 | Input/Output: [(65 92 65 10) 10]
Test Case: 247 | Input/Output: [(25 57 13 8) 8]
Test Case: 248 | Input/Output: [(26 11 10 90) 10]
Test Case: 249 | Input/Output: [(92 74 63 3) 3]
Test Case: 250 | Input/Output: [(59 77 37 25) 25]
Test Case: 251 | Input/Output: [(63 62 10 9) 9]
Test Case: 252 | Input/Output: [(33 56 98 28) 28]
Test Case: 253 | Input/Output: [(96 81 77 27) 27]
Test Case: 254 | Input/Output: [(49 16 39 54) 16]
Test Case: 255 | Input/Output: [(24 35 72 96) 24]
Test Case: 256 | Input/Output: [(16 8 36 5) 5]
Test Case: 257 | Input/Output: [(21 43 3 44) 3]
Test Case: 258 | Input/Output: [(40 67 100 60) 40]
Test Case: 259 | Input/Output: [(45 8 25 96) 8]
Test Case: 260 | Input/Output: [(41 15 4 33) 4]
Test Case: 261 | Input/Output: [(17 73 40 40) 17]
Test Case: 262 | Input/Output: [(7 25 36 80) 7]
Test Case: 263 | Input/Output: [(93 69 90 50) 50]
Test Case: 264 | Input/Output: [(16 41 95 8) 8]
Test Case: 265 | Input/Output: [(85 58 66 80) 58]
Test Case: 266 | Input/Output: [(57 90 35 66) 35]
Test Case: 267 | Input/Output: [(53 92 14 50) 14]
Test Case: 268 | Input/Output: [(2 20 78 59) 2]
Test Case: 269 | Input/Output: [(1 87 9 81) 1]
Test Case: 270 | Input/Output: [(30 72 21 45) 21]
Test Case: 271 | Input/Output: [(50 32 7 43) 7]
Test Case: 272 | Input/Output: [(91 86 69 66) 66]
Test Case: 273 | Input/Output: [(74 38 39 19) 19]
Test Case: 274 | Input/Output: [(75 96 47 99) 47]
Test Case: 275 | Input/Output: [(0 26 84 94) 0]
Test Case: 276 | Input/Output: [(41 27 77 88) 27]
Test Case: 277 | Input/Output: [(40 87 68 43) 40]
Test Case: 278 | Input/Output: [(30 57 97 96) 30]
Test Case: 279 | Input/Output: [(9 58 94 93) 9]
Test Case: 280 | Input/Output: [(80 15 41 68) 15]
Test Case: 281 | Input/Output: [(99 58 12 98) 12]
Test Case: 282 | Input/Output: [(90 19 88 79) 19]
Test Case: 283 | Input/Output: [(75 10 36 68) 10]
Test Case: 284 | Input/Output: [(72 89 92 84) 72]
Test Case: 285 | Input/Output: [(5 77 38 78) 5]
Test Case: 286 | Input/Output: [(27 91 77 48) 27]
Test Case: 287 | Input/Output: [(40 73 26 57) 26]
Test Case: 288 | Input/Output: [(54 89 86 62) 54]
Test Case: 289 | Input/Output: [(68 5 77 100) 5]
Test Case: 290 | Input/Output: [(83 83 45 19) 19]
Test Case: 291 | Input/Output: [(85 83 51 42) 42]
Test Case: 292 | Input/Output: [(64 59 88 25) 25]
Test Case: 293 | Input/Output: [(73 3 22 9) 3]
Test Case: 294 | Input/Output: [(31 50 42 69) 31]
Test Case: 295 | Input/Output: [(86 48 63 80) 48]
Test Case: 296 | Input/Output: [(38 100 97 36) 36]
Test Case: 297 | Input/Output: [(19 49 83 0) 0]
Test Case: 298 | Input/Output: [(17 32 7 92) 7]
Test Case: 299 | Input/Output: [(94 72 64 69) 64]
Test Case: 300 | Input/Output: [(99 3 76 99) 3]
Test Case: 301 | Input/Output: [(34 94 2 65) 2]
Test Case: 302 | Input/Output: [(44 36 29 96) 29]
Test Case: 303 | Input/Output: [(89 47 58 64) 47]
Test Case: 304 | Input/Output: [(34 4 24 32) 4]
Test Case: 305 | Input/Output: [(88 82 13 2) 2]
Test Case: 306 | Input/Output: [(98 100 46 97) 46]
Test Case: 307 | Input/Output: [(84 84 49 25) 25]
Test Case: 308 | Input/Output: [(48 95 83 68) 48]
Test Case: 309 | Input/Output: [(77 43 47 74) 43]
Test Case: 310 | Input/Output: [(22 79 14 74) 14]
Test Case: 311 | Input/Output: [(72 41 68 1) 1]
Test Case: 312 | Input/Output: [(21 90 41 36) 21]
Test Case: 313 | Input/Output: [(29 46 59 15) 15]
Test Case: 314 | Input/Output: [(37 60 98 99) 37]
Test Case: 315 | Input/Output: [(72 7 28 33) 7]
Test Case: 316 | Input/Output: [(80 71 70 69) 69]
Test Case: 317 | Input/Output: [(91 28 36 42) 28]
Test Case: 318 | Input/Output: [(94 11 19 9) 9]
Test Case: 319 | Input/Output: [(71 14 28 71) 14]
Test Case: 320 | Input/Output: [(99 66 24 76) 24]
Test Case: 321 | Input/Output: [(78 76 24 18) 18]
Test Case: 322 | Input/Output: [(4 66 50 64) 4]
Test Case: 323 | Input/Output: [(85 54 46 70) 46]
Test Case: 324 | Input/Output: [(58 27 27 76) 27]
Test Case: 325 | Input/Output: [(100 91 18 19) 18]
Test Case: 326 | Input/Output: [(30 60 54 93) 30]
Test Case: 327 | Input/Output: [(30 83 99 12) 12]
Test Case: 328 | Input/Output: [(2 90 1 77) 1]
Test Case: 329 | Input/Output: [(21 12 80 71) 12]
Test Case: 330 | Input/Output: [(84 50 78 89) 50]
Test Case: 331 | Input/Output: [(8 81 1 56) 1]
Test Case: 332 | Input/Output: [(14 10 71 17) 10]
Test Case: 333 | Input/Output: [(13 21 54 81) 13]
Test Case: 334 | Input/Output: [(38 35 49 77) 35]
Test Case: 335 | Input/Output: [(90 85 62 26) 26]
Test Case: 336 | Input/Output: [(32 49 84 58) 32]
Test Case: 337 | Input/Output: [(43 12 99 54) 12]
Test Case: 338 | Input/Output: [(94 16 20 12) 12]
Test Case: 339 | Input/Output: [(50 59 97 60) 50]
Test Case: 340 | Input/Output: [(3 78 96 38) 3]
Test Case: 341 | Input/Output: [(19 19 8 45) 8]
Test Case: 342 | Input/Output: [(17 70 71 13) 13]
Test Case: 343 | Input/Output: [(60 99 95 8) 8]
Test Case: 344 | Input/Output: [(68 88 7 81) 7]
Test Case: 345 | Input/Output: [(87 18 13 50) 13]
Test Case: 346 | Input/Output: [(26 60 24 4) 4]
Test Case: 347 | Input/Output: [(92 98 6 89) 6]
Test Case: 348 | Input/Output: [(31 32 28 38) 28]
Test Case: 349 | Input/Output: [(11 0 34 93) 0]
Test Case: 350 | Input/Output: [(65 0 8 42) 0]
Test Case: 351 | Input/Output: [(57 14 82 62) 14]
Test Case: 352 | Input/Output: [(40 40 67 80) 40]
Test Case: 353 | Input/Output: [(15 77 70 7) 7]
Test Case: 354 | Input/Output: [(63 69 25 90) 25]
Test Case: 355 | Input/Output: [(88 15 18 66) 15]
Test Case: 356 | Input/Output: [(47 58 91 91) 47]
Test Case: 357 | Input/Output: [(85 12 35 41) 12]
Test Case: 358 | Input/Output: [(37 21 7 30) 7]
Test Case: 359 | Input/Output: [(36 23 18 62) 18]
Test Case: 360 | Input/Output: [(2 81 8 12) 2]
Test Case: 361 | Input/Output: [(52 89 83 72) 52]
Test Case: 362 | Input/Output: [(0 25 38 55) 0]
Test Case: 363 | Input/Output: [(57 50 77 78) 50]
Test Case: 364 | Input/Output: [(28 87 7 71) 7]
Test Case: 365 | Input/Output: [(73 41 28 78) 28]
Test Case: 366 | Input/Output: [(96 14 5 77) 5]
Test Case: 367 | Input/Output: [(95 11 31 85) 11]
Test Case: 368 | Input/Output: [(87 27 13 70) 13]
Test Case: 369 | Input/Output: [(12 19 12 78) 12]
Test Case: 370 | Input/Output: [(59 33 32 22) 22]
Test Case: 371 | Input/Output: [(7 66 36 24) 7]
Test Case: 372 | Input/Output: [(47 5 12 51) 5]
Test Case: 373 | Input/Output: [(34 34 22 77) 22]
Test Case: 374 | Input/Output: [(37 71 75 94) 37]
Test Case: 375 | Input/Output: [(87 43 24 88) 24]
Test Case: 376 | Input/Output: [(66 95 82 89) 66]
Test Case: 377 | Input/Output: [(37 5 31 17) 5]
Test Case: 378 | Input/Output: [(32 31 97 71) 31]
Test Case: 379 | Input/Output: [(4 69 34 19) 4]
Test Case: 380 | Input/Output: [(67 19 6 15) 6]
Test Case: 381 | Input/Output: [(80 18 35 5) 5]
Test Case: 382 | Input/Output: [(89 17 1 83) 1]
Test Case: 383 | Input/Output: [(92 39 97 31) 31]
Test Case: 384 | Input/Output: [(52 14 7 23) 7]
Test Case: 385 | Input/Output: [(57 90 2 2) 2]
Test Case: 386 | Input/Output: [(37 20 44 85) 20]
Test Case: 387 | Input/Output: [(42 95 41 23) 23]
Test Case: 388 | Input/Output: [(30 1 62 38) 1]
Test Case: 389 | Input/Output: [(86 28 2 58) 2]
Test Case: 390 | Input/Output: [(49 4 14 68) 4]
Test Case: 391 | Input/Output: [(44 13 46 0) 0]
Test Case: 392 | Input/Output: [(68 46 31 4) 4]
Test Case: 393 | Input/Output: [(26 8 72 74) 8]
Test Case: 394 | Input/Output: [(61 38 88 52) 38]
Test Case: 395 | Input/Output: [(80 61 62 91) 61]
Test Case: 396 | Input/Output: [(28 46 53 0) 0]
Test Case: 397 | Input/Output: [(86 19 35 86) 19]
Test Case: 398 | Input/Output: [(2 96 94 30) 2]
Test Case: 399 | Input/Output: [(43 20 55 32) 20]
Test Case: 400 | Input/Output: [(0 -18 92 -34) -34]
Test Case: 401 | Input/Output: [(37 -94 80 -56) -94]
Test Case: 402 | Input/Output: [(-26 27 52 13) -26]
Test Case: 403 | Input/Output: [(3 -64 73 -89) -89]
Test Case: 404 | Input/Output: [(-17 -78 99 35) -78]
Test Case: 405 | Input/Output: [(20 -28 13 86) -28]
Test Case: 406 | Input/Output: [(-47 69 91 -52) -52]
Test Case: 407 | Input/Output: [(71 34 -45 19) -45]
Test Case: 408 | Input/Output: [(57 31 83 64) 31]
Test Case: 409 | Input/Output: [(76 -86 7 -64) -86]
Test Case: 410 | Input/Output: [(76 -71 93 -72) -72]
Test Case: 411 | Input/Output: [(-6 -1 -20 -80) -80]
Test Case: 412 | Input/Output: [(8 16 -96 -74) -96]
Test Case: 413 | Input/Output: [(82 15 59 5) 5]
Test Case: 414 | Input/Output: [(89 -64 100 -25) -64]
Test Case: 415 | Input/Output: [(5 32 -47 65) -47]
Test Case: 416 | Input/Output: [(-1 79 43 34) -1]
Test Case: 417 | Input/Output: [(59 73 68 -20) -20]
Test Case: 418 | Input/Output: [(-18 65 46 80) -18]
Test Case: 419 | Input/Output: [(82 38 63 -66) -66]
Test Case: 420 | Input/Output: [(-91 -62 99 99) -91]
Test Case: 421 | Input/Output: [(37 71 4 -63) -63]
Test Case: 422 | Input/Output: [(-47 -70 -46 20) -70]
Test Case: 423 | Input/Output: [(45 23 61 -55) -55]
Test Case: 424 | Input/Output: [(85 -97 22 41) -97]
Test Case: 425 | Input/Output: [(-21 -27 -96 -15) -96]
Test Case: 426 | Input/Output: [(84 -40 -47 58) -47]
Test Case: 427 | Input/Output: [(100 -94 89 61) -94]
Test Case: 428 | Input/Output: [(19 -46 19 -79) -79]
Test Case: 429 | Input/Output: [(-42 1 30 24) -42]
Test Case: 430 | Input/Output: [(57 59 -80 -61) -80]
Test Case: 431 | Input/Output: [(-45 -56 -20 -4) -56]
Test Case: 432 | Input/Output: [(-56 2 -19 41) -56]
Test Case: 433 | Input/Output: [(85 -24 61 77) -24]
Test Case: 434 | Input/Output: [(-70 88 -54 30) -70]
Test Case: 435 | Input/Output: [(45 70 0 11) 0]
Test Case: 436 | Input/Output: [(35 53 -72 62) -72]
Test Case: 437 | Input/Output: [(-66 89 84 96) -66]
Test Case: 438 | Input/Output: [(-28 71 16 -76) -76]
Test Case: 439 | Input/Output: [(-31 63 -75 15) -75]
Test Case: 440 | Input/Output: [(-92 72 13 72) -92]
Test Case: 441 | Input/Output: [(47 65 97 -9) -9]
Test Case: 442 | Input/Output: [(75 -13 -3 -55) -55]
Test Case: 443 | Input/Output: [(-89 -91 48 100) -91]
Test Case: 444 | Input/Output: [(-47 52 35 17) -47]
Test Case: 445 | Input/Output: [(-79 19 -75 -46) -79]
Test Case: 446 | Input/Output: [(-66 17 12 16) -66]
Test Case: 447 | Input/Output: [(12 -97 15 -85) -97]
Test Case: 448 | Input/Output: [(-56 -51 76 -5) -56]
Test Case: 449 | Input/Output: [(-89 53 -55 22) -89]
Test Case: 450 | Input/Output: [(95 8 14 8) 8]
Test Case: 451 | Input/Output: [(-64 13 84 -7) -64]
Test Case: 452 | Input/Output: [(-21 -87 -49 31) -87]
Test Case: 453 | Input/Output: [(77 88 -92 -10) -92]
Test Case: 454 | Input/Output: [(-95 -50 -7 46) -95]
Test Case: 455 | Input/Output: [(53 -70 -5 -3) -70]
Test Case: 456 | Input/Output: [(-27 -76 -78 -9) -78]
Test Case: 457 | Input/Output: [(78 -68 40 -85) -85]
Test Case: 458 | Input/Output: [(97 -36 -12 -55) -55]
Test Case: 459 | Input/Output: [(98 -26 -75 94) -75]
Test Case: 460 | Input/Output: [(-78 -55 9 -50) -78]
Test Case: 461 | Input/Output: [(-83 6 -89 -81) -89]
Test Case: 462 | Input/Output: [(73 71 -23 96) -23]
Test Case: 463 | Input/Output: [(-8 -65 -84 -45) -84]
Test Case: 464 | Input/Output: [(-40 -69 -38 97) -69]
Test Case: 465 | Input/Output: [(-88 70 -56 -4) -88]
Test Case: 466 | Input/Output: [(-21 94 3 -17) -21]
Test Case: 467 | Input/Output: [(64 7 53 -29) -29]
Test Case: 468 | Input/Output: [(-27 23 59 -99) -99]
Test Case: 469 | Input/Output: [(25 67 89 67) 25]
Test Case: 470 | Input/Output: [(5 -16 -33 -15) -33]
Test Case: 471 | Input/Output: [(-58 25 40 25) -58]
Test Case: 472 | Input/Output: [(-26 37 17 16) -26]
Test Case: 473 | Input/Output: [(20 27 38 -83) -83]
Test Case: 474 | Input/Output: [(-11 69 28 46) -11]
Test Case: 475 | Input/Output: [(-9 65 -26 -79) -79]
Test Case: 476 | Input/Output: [(-37 24 56 -32) -37]
Test Case: 477 | Input/Output: [(64 12 84 29) 12]
Test Case: 478 | Input/Output: [(12 83 18 -38) -38]
Test Case: 479 | Input/Output: [(27 -2 -96 -9) -96]
Test Case: 480 | Input/Output: [(84 37 -30 -13) -30]
Test Case: 481 | Input/Output: [(15 90 -98 33) -98]
Test Case: 482 | Input/Output: [(-82 -52 75 11) -82]
Test Case: 483 | Input/Output: [(-21 36 -45 56) -45]
Test Case: 484 | Input/Output: [(34 -97 -90 83) -97]
Test Case: 485 | Input/Output: [(65 65 -60 76) -60]
Test Case: 486 | Input/Output: [(-99 -38 94 -65) -99]
Test Case: 487 | Input/Output: [(90 91 -65 -3) -65]
Test Case: 488 | Input/Output: [(-20 87 -6 -61) -61]
Test Case: 489 | Input/Output: [(-96 -1 -51 -98) -98]
Test Case: 490 | Input/Output: [(-66 -22 42 -79) -79]
Test Case: 491 | Input/Output: [(86 -95 62 77) -95]
Test Case: 492 | Input/Output: [(-75 -30 55 -95) -95]
Test Case: 493 | Input/Output: [(49 51 9 35) 9]
Test Case: 494 | Input/Output: [(-19 -52 -20 -87) -87]
Test Case: 495 | Input/Output: [(-22 -52 -80 -50) -80]
Test Case: 496 | Input/Output: [(-21 -60 -46 -50) -60]
Test Case: 497 | Input/Output: [(-46 -10 22 -48) -48]
Test Case: 498 | Input/Output: [(-3 25 22 73) -3]
Test Case: 499 | Input/Output: [(-22 33 7 11) -22]
Test Case: 500 | Input/Output: [(-16 -17 42 -10) -17]
Test Case: 501 | Input/Output: [(-2 -50 -23 72) -50]
Test Case: 502 | Input/Output: [(57 30 -17 28) -17]
Test Case: 503 | Input/Output: [(74 6 97 64) 6]
Test Case: 504 | Input/Output: [(3 38 1 -43) -43]
Test Case: 505 | Input/Output: [(-22 56 37 -68) -68]
Test Case: 506 | Input/Output: [(8 -79 48 74) -79]
Test Case: 507 | Input/Output: [(-89 85 -87 92) -89]
Test Case: 508 | Input/Output: [(-14 -63 -52 -20) -63]
Test Case: 509 | Input/Output: [(71 58 -72 -86) -86]
Test Case: 510 | Input/Output: [(16 50 -17 -31) -31]
Test Case: 511 | Input/Output: [(-38 -26 84 -74) -74]
Test Case: 512 | Input/Output: [(41 -78 -88 -94) -94]
Test Case: 513 | Input/Output: [(-92 -23 19 -43) -92]
Test Case: 514 | Input/Output: [(70 -97 -26 70) -97]
Test Case: 515 | Input/Output: [(40 74 32 49) 32]
Test Case: 516 | Input/Output: [(56 22 44 -70) -70]
Test Case: 517 | Input/Output: [(-87 -16 -24 -84) -87]
Test Case: 518 | Input/Output: [(-31 -7 -85 42) -85]
Test Case: 519 | Input/Output: [(-43 97 -45 -6) -45]
Test Case: 520 | Input/Output: [(1 -17 33 65) -17]
Test Case: 521 | Input/Output: [(50 -60 -64 -80) -80]
Test Case: 522 | Input/Output: [(37 -42 80 53) -42]
Test Case: 523 | Input/Output: [(19 93 -35 -94) -94]
Test Case: 524 | Input/Output: [(-72 80 -69 80) -72]
Test Case: 525 | Input/Output: [(81 -31 52 -4) -31]
Test Case: 526 | Input/Output: [(48 77 -22 13) -22]
Test Case: 527 | Input/Output: [(-93 -86 41 63) -93]
Test Case: 528 | Input/Output: [(-71 -42 -51 -23) -71]
Test Case: 529 | Input/Output: [(63 30 -86 42) -86]
Test Case: 530 | Input/Output: [(82 -85 66 -82) -85]
Test Case: 531 | Input/Output: [(-10 -3 -19 -72) -72]
Test Case: 532 | Input/Output: [(-13 17 -34 53) -34]
Test Case: 533 | Input/Output: [(75 -13 -12 -100) -100]
Test Case: 534 | Input/Output: [(-49 -30 10 99) -49]
Test Case: 535 | Input/Output: [(60 72 11 -72) -72]
Test Case: 536 | Input/Output: [(-44 -4 -96 2) -96]
Test Case: 537 | Input/Output: [(61 -68 -42 81) -68]
Test Case: 538 | Input/Output: [(62 77 -73 -11) -73]
Test Case: 539 | Input/Output: [(-72 18 -49 46) -72]
Test Case: 540 | Input/Output: [(55 74 -54 -64) -64]
Test Case: 541 | Input/Output: [(-24 48 -84 -87) -87]
Test Case: 542 | Input/Output: [(-57 41 -99 -9) -99]
Test Case: 543 | Input/Output: [(93 87 -49 -69) -69]
Test Case: 544 | Input/Output: [(-33 16 12 100) -33]
Test Case: 545 | Input/Output: [(49 5 -36 -43) -43]
Test Case: 546 | Input/Output: [(3 27 61 -27) -27]
Test Case: 547 | Input/Output: [(-33 -81 16 -45) -81]
Test Case: 548 | Input/Output: [(40 51 -69 -43) -69]
Test Case: 549 | Input/Output: [(-87 -66 65 -21) -87]
Test Case: 550 | Input/Output: [(100 -87 4 -62) -87]
Test Case: 551 | Input/Output: [(36 77 96 33) 33]
Test Case: 552 | Input/Output: [(31 42 -22 -18) -22]
Test Case: 553 | Input/Output: [(83 -47 31 -1) -47]
Test Case: 554 | Input/Output: [(28 45 34 31) 28]
Test Case: 555 | Input/Output: [(-28 -58 11 65) -58]
Test Case: 556 | Input/Output: [(-49 -34 -18 3) -49]
Test Case: 557 | Input/Output: [(-80 94 55 77) -80]
Test Case: 558 | Input/Output: [(58 -74 70 -14) -74]
Test Case: 559 | Input/Output: [(-71 47 -78 53) -78]
Test Case: 560 | Input/Output: [(54 8 8 6) 6]
Test Case: 561 | Input/Output: [(70 -38 -5 3) -38]
Test Case: 562 | Input/Output: [(-62 93 31 -75) -75]
Test Case: 563 | Input/Output: [(-26 -56 -28 18) -56]
Test Case: 564 | Input/Output: [(60 -5 71 38) -5]
Test Case: 565 | Input/Output: [(85 84 62 98) 62]
Test Case: 566 | Input/Output: [(42 -25 -42 -4) -42]
Test Case: 567 | Input/Output: [(-83 36 -30 -54) -83]
Test Case: 568 | Input/Output: [(-58 -88 -18 -53) -88]
Test Case: 569 | Input/Output: [(-68 -92 -40 -100) -100]
Test Case: 570 | Input/Output: [(-21 98 28 -49) -49]
Test Case: 571 | Input/Output: [(-5 -5 1 86) -5]
Test Case: 572 | Input/Output: [(-84 -74 -46 74) -84]
Test Case: 573 | Input/Output: [(97 -34 -2 -40) -40]
Test Case: 574 | Input/Output: [(-56 71 94 -83) -83]
Test Case: 575 | Input/Output: [(-16 -3 -56 12) -56]
Test Case: 576 | Input/Output: [(22 88 -88 -98) -98]
Test Case: 577 | Input/Output: [(-56 -66 -7 96) -66]
Test Case: 578 | Input/Output: [(46 -10 20 64) -10]
Test Case: 579 | Input/Output: [(-32 -21 57 -40) -40]
Test Case: 580 | Input/Output: [(36 83 16 33) 16]
Test Case: 581 | Input/Output: [(85 43 -56 70) -56]
Test Case: 582 | Input/Output: [(-18 -14 31 73) -18]
Test Case: 583 | Input/Output: [(-63 41 -30 87) -63]
Test Case: 584 | Input/Output: [(97 21 -59 30) -59]
Test Case: 585 | Input/Output: [(23 49 55 81) 23]
Test Case: 586 | Input/Output: [(-71 -66 -72 -18) -72]
Test Case: 587 | Input/Output: [(86 44 91 73) 44]
Test Case: 588 | Input/Output: [(7 -37 13 88) -37]
Test Case: 589 | Input/Output: [(80 -39 -52 67) -52]
Test Case: 590 | Input/Output: [(86 94 -51 57) -51]
Test Case: 591 | Input/Output: [(-42 89 34 64) -42]
Test Case: 592 | Input/Output: [(-23 74 60 57) -23]
Test Case: 593 | Input/Output: [(35 38 65 31) 31]
Test Case: 594 | Input/Output: [(72 -78 -18 -36) -78]
Test Case: 595 | Input/Output: [(11 -77 56 -87) -87]
Test Case: 596 | Input/Output: [(-79 -22 -79 41) -79]
Test Case: 597 | Input/Output: [(-78 -8 -18 37) -78]
Test Case: 598 | Input/Output: [(52 43 25 47) 25]
Test Case: 599 | Input/Output: [(-72 -33 -15 -13) -72]
Test Case: 600 | Input/Output: [(99 91 49 41) 41]
Test Case: 601 | Input/Output: [(96 -63 -92 -42) -92]
Test Case: 602 | Input/Output: [(-13 30 -7 80) -13]
Test Case: 603 | Input/Output: [(72 41 -31 -23) -31]
Test Case: 604 | Input/Output: [(99 -58 100 78) -58]
Test Case: 605 | Input/Output: [(-68 2 -61 -20) -68]
Test Case: 606 | Input/Output: [(60 49 -65 -85) -85]
Test Case: 607 | Input/Output: [(97 33 39 -71) -71]
Test Case: 608 | Input/Output: [(-15 -32 -76 65) -76]
Test Case: 609 | Input/Output: [(42 -71 67 21) -71]
Test Case: 610 | Input/Output: [(-22 57 -40 -83) -83]
Test Case: 611 | Input/Output: [(-10 -69 23 -41) -69]
Test Case: 612 | Input/Output: [(75 17 -34 10) -34]
Test Case: 613 | Input/Output: [(96 -95 -58 35) -95]
Test Case: 614 | Input/Output: [(-34 28 -44 -12) -44]
Test Case: 615 | Input/Output: [(88 80 32 77) 32]
Test Case: 616 | Input/Output: [(34 -52 16 -34) -52]
Test Case: 617 | Input/Output: [(30 -76 -15 70) -76]
Test Case: 618 | Input/Output: [(-66 -34 92 22) -66]
Test Case: 619 | Input/Output: [(4 -13 -27 -12) -27]
Test Case: 620 | Input/Output: [(84 -91 -82 -78) -91]
Test Case: 621 | Input/Output: [(57 16 -61 -26) -61]
Test Case: 622 | Input/Output: [(-70 100 20 96) -70]
Test Case: 623 | Input/Output: [(-100 5 -23 -36) -100]
Test Case: 624 | Input/Output: [(48 85 -9 92) -9]
Test Case: 625 | Input/Output: [(71 -33 -10 21) -33]
Test Case: 626 | Input/Output: [(-14 34 44 -70) -70]
Test Case: 627 | Input/Output: [(-22 -65 -12 -10) -65]
Test Case: 628 | Input/Output: [(12 -42 -90 -97) -97]
Test Case: 629 | Input/Output: [(-58 -71 27 66) -71]
Test Case: 630 | Input/Output: [(-9 -15 -19 -13) -19]
Test Case: 631 | Input/Output: [(20 67 47 -16) -16]
Test Case: 632 | Input/Output: [(84 -31 10 96) -31]
Test Case: 633 | Input/Output: [(100 29 -39 80) -39]
Test Case: 634 | Input/Output: [(88 -76 -36 -9) -76]
Test Case: 635 | Input/Output: [(89 33 4 -36) -36]
Test Case: 636 | Input/Output: [(-24 -23 -52 -84) -84]
Test Case: 637 | Input/Output: [(-89 45 -91 -52) -91]
Test Case: 638 | Input/Output: [(-97 87 -72 -6) -97]
Test Case: 639 | Input/Output: [(12 94 84 90) 12]
Test Case: 640 | Input/Output: [(-13 25 53 -37) -37]
Test Case: 641 | Input/Output: [(16 85 -69 27) -69]
Test Case: 642 | Input/Output: [(-88 -88 64 35) -88]
Test Case: 643 | Input/Output: [(84 -2 2 -87) -87]
Test Case: 644 | Input/Output: [(-55 40 44 -66) -66]
Test Case: 645 | Input/Output: [(-3 65 10 31) -3]
Test Case: 646 | Input/Output: [(-85 -11 64 -8) -85]
Test Case: 647 | Input/Output: [(50 12 99 -80) -80]
Test Case: 648 | Input/Output: [(-45 17 -48 85) -48]
Test Case: 649 | Input/Output: [(-82 -17 -15 -92) -92]
Test Case: 650 | Input/Output: [(-74 6 -35 -11) -74]
Test Case: 651 | Input/Output: [(-42 36 -81 45) -81]
Test Case: 652 | Input/Output: [(-52 49 43 -80) -80]
Test Case: 653 | Input/Output: [(-27 -94 -96 38) -96]
Test Case: 654 | Input/Output: [(23 -10 80 -4) -10]
Test Case: 655 | Input/Output: [(-91 82 -9 43) -91]
Test Case: 656 | Input/Output: [(3 -87 -17 77) -87]
Test Case: 657 | Input/Output: [(27 -34 -100 -8) -100]
Test Case: 658 | Input/Output: [(92 88 -28 -53) -53]
Test Case: 659 | Input/Output: [(62 60 -45 -32) -45]
Test Case: 660 | Input/Output: [(41 -100 -85 -44) -100]
Test Case: 661 | Input/Output: [(6 9 24 -73) -73]
Test Case: 662 | Input/Output: [(74 74 92 43) 43]
Test Case: 663 | Input/Output: [(96 -26 -58 -18) -58]
Test Case: 664 | Input/Output: [(40 -75 47 -90) -90]
Test Case: 665 | Input/Output: [(84 31 -67 75) -67]
Test Case: 666 | Input/Output: [(-19 46 64 -100) -100]
Test Case: 667 | Input/Output: [(2 23 -99 38) -99]
Test Case: 668 | Input/Output: [(-62 92 -58 -90) -90]
Test Case: 669 | Input/Output: [(88 -36 71 -61) -61]
Test Case: 670 | Input/Output: [(79 44 27 81) 27]
Test Case: 671 | Input/Output: [(0 8 98 71) 0]
Test Case: 672 | Input/Output: [(48 -63 -70 -25) -70]
Test Case: 673 | Input/Output: [(-93 -38 24 87) -93]
Test Case: 674 | Input/Output: [(-9 40 -57 -96) -96]
Test Case: 675 | Input/Output: [(-65 54 -78 -33) -78]
Test Case: 676 | Input/Output: [(-21 55 -44 2) -44]
Test Case: 677 | Input/Output: [(10 -14 33 -41) -41]
Test Case: 678 | Input/Output: [(11 97 -90 -18) -90]
Test Case: 679 | Input/Output: [(79 97 -61 -50) -61]
Test Case: 680 | Input/Output: [(79 38 34 -53) -53]
Test Case: 681 | Input/Output: [(93 -3 -59 81) -59]
Test Case: 682 | Input/Output: [(-44 94 -68 74) -68]
Test Case: 683 | Input/Output: [(-9 -14 3 79) -14]
Test Case: 684 | Input/Output: [(-69 48 28 -10) -69]
Test Case: 685 | Input/Output: [(15 -14 -14 -73) -73]
Test Case: 686 | Input/Output: [(-52 -92 -28 43) -92]
Test Case: 687 | Input/Output: [(42 50 -68 -41) -68]
Test Case: 688 | Input/Output: [(-63 98 45 -33) -63]
Test Case: 689 | Input/Output: [(98 71 -21 -99) -99]
Test Case: 690 | Input/Output: [(40 -16 -47 -2) -47]
Test Case: 691 | Input/Output: [(37 12 85 -58) -58]
Test Case: 692 | Input/Output: [(75 -9 78 -52) -52]
Test Case: 693 | Input/Output: [(-82 -59 48 50) -82]
Test Case: 694 | Input/Output: [(-10 -45 16 33) -45]
Test Case: 695 | Input/Output: [(-36 -11 62 60) -36]
Test Case: 696 | Input/Output: [(-68 -23 -28 -57) -68]
Test Case: 697 | Input/Output: [(-51 27 3 -37) -51]
Test Case: 698 | Input/Output: [(64 -90 91 -42) -90]
Test Case: 699 | Input/Output: [(2 37 78 -17) -17]
Test Case: 700 | Input/Output: [(83 -1 11 -38) -38]
Test Case: 701 | Input/Output: [(64 -39 -85 -100) -100]
Test Case: 702 | Input/Output: [(-6 21 77 -49) -49]
Test Case: 703 | Input/Output: [(-80 90 -42 41) -80]
Test Case: 704 | Input/Output: [(9 23 50 98) 9]
Test Case: 705 | Input/Output: [(-12 -75 54 42) -75]
Test Case: 706 | Input/Output: [(35 -96 -73 33) -96]
Test Case: 707 | Input/Output: [(-5 81 -100 -44) -100]
Test Case: 708 | Input/Output: [(-33 -20 23 -51) -51]
Test Case: 709 | Input/Output: [(21 -38 -56 39) -56]
Test Case: 710 | Input/Output: [(-68 99 -81 25) -81]
Test Case: 711 | Input/Output: [(-27 62 -79 -29) -79]
Test Case: 712 | Input/Output: [(0 17 67 31) 0]
Test Case: 713 | Input/Output: [(78 -14 -78 53) -78]
Test Case: 714 | Input/Output: [(-83 64 38 -69) -83]
Test Case: 715 | Input/Output: [(31 -96 -39 21) -96]
Test Case: 716 | Input/Output: [(-56 -88 19 -94) -94]
Test Case: 717 | Input/Output: [(-87 -5 47 20) -87]
Test Case: 718 | Input/Output: [(27 -100 80 -65) -100]
Test Case: 719 | Input/Output: [(-90 77 -10 -45) -90]
Test Case: 720 | Input/Output: [(69 26 -18 41) -18]
Test Case: 721 | Input/Output: [(-33 -18 -13 -61) -61]
Test Case: 722 | Input/Output: [(-72 81 96 -89) -89]
Test Case: 723 | Input/Output: [(60 -20 -15 -15) -20]
Test Case: 724 | Input/Output: [(-38 -79 14 95) -79]
Test Case: 725 | Input/Output: [(-71 -9 50 -51) -71]
Test Case: 726 | Input/Output: [(-84 -62 87 94) -84]
Test Case: 727 | Input/Output: [(-42 20 -81 -12) -81]
Test Case: 728 | Input/Output: [(-72 -25 88 -20) -72]
Test Case: 729 | Input/Output: [(49 -88 93 -56) -88]
Test Case: 730 | Input/Output: [(-49 45 -11 -62) -62]
Test Case: 731 | Input/Output: [(-68 -10 -64 92) -68]
Test Case: 732 | Input/Output: [(-94 93 77 -4) -94]
Test Case: 733 | Input/Output: [(-27 -42 36 25) -42]
Test Case: 734 | Input/Output: [(-56 -38 49 49) -56]
Test Case: 735 | Input/Output: [(-41 -13 -43 43) -43]
Test Case: 736 | Input/Output: [(-18 -92 95 7) -92]
Test Case: 737 | Input/Output: [(-56 59 -76 62) -76]
Test Case: 738 | Input/Output: [(30 58 -81 26) -81]
Test Case: 739 | Input/Output: [(67 -77 -55 -25) -77]
Test Case: 740 | Input/Output: [(21 50 -70 1) -70]
Test Case: 741 | Input/Output: [(-94 -75 91 -24) -94]
Test Case: 742 | Input/Output: [(68 57 -7 21) -7]
Test Case: 743 | Input/Output: [(-28 9 86 -36) -36]
Test Case: 744 | Input/Output: [(77 -89 -26 7) -89]
Test Case: 745 | Input/Output: [(-52 16 69 -88) -88]
Test Case: 746 | Input/Output: [(-89 -16 29 62) -89]
Test Case: 747 | Input/Output: [(-64 -66 87 -80) -80]
Test Case: 748 | Input/Output: [(-96 19 99 -41) -96]
Test Case: 749 | Input/Output: [(-98 -75 -44 0) -98]
Test Case: 750 | Input/Output: [(54 -68 -49 100) -68]
Test Case: 751 | Input/Output: [(-53 -84 -56 77) -84]
Test Case: 752 | Input/Output: [(-28 62 -80 -86) -86]
Test Case: 753 | Input/Output: [(36 -100 -23 -67) -100]
Test Case: 754 | Input/Output: [(-62 -73 32 -27) -73]
Test Case: 755 | Input/Output: [(-37 55 65 -20) -37]
Test Case: 756 | Input/Output: [(99 17 -62 -49) -62]
Test Case: 757 | Input/Output: [(17 26 49 42) 17]
Test Case: 758 | Input/Output: [(77 -10 -76 -42) -76]
Test Case: 759 | Input/Output: [(-38 29 -45 -25) -45]
Test Case: 760 | Input/Output: [(-85 -25 -30 23) -85]
Test Case: 761 | Input/Output: [(32 15 41 -99) -99]
Test Case: 762 | Input/Output: [(-56 86 100 -79) -79]
Test Case: 763 | Input/Output: [(-17 36 23 28) -17]
Test Case: 764 | Input/Output: [(-13 61 72 35) -13]
Test Case: 765 | Input/Output: [(79 21 64 -19) -19]
Test Case: 766 | Input/Output: [(81 -50 72 -50) -50]
Test Case: 767 | Input/Output: [(77 -25 -68 47) -68]
Test Case: 768 | Input/Output: [(2 27 -11 72) -11]
Test Case: 769 | Input/Output: [(11 52 -78 -58) -78]
Test Case: 770 | Input/Output: [(6 -24 69 -71) -71]
Test Case: 771 | Input/Output: [(45 33 -38 -78) -78]
Test Case: 772 | Input/Output: [(-15 -81 11 17) -81]
Test Case: 773 | Input/Output: [(85 9 -73 -79) -79]
Test Case: 774 | Input/Output: [(-93 -44 -25 -19) -93]
Test Case: 775 | Input/Output: [(-15 59 -96 -100) -100]
Test Case: 776 | Input/Output: [(-11 87 -82 25) -82]
Test Case: 777 | Input/Output: [(9 25 13 -42) -42]
Test Case: 778 | Input/Output: [(61 95 -29 -16) -29]
Test Case: 779 | Input/Output: [(-83 9 -91 37) -91]
Test Case: 780 | Input/Output: [(57 -11 -95 31) -95]
Test Case: 781 | Input/Output: [(-16 -88 -15 -75) -88]
Test Case: 782 | Input/Output: [(-20 36 -64 71) -64]
Test Case: 783 | Input/Output: [(13 24 53 93) 13]
Test Case: 784 | Input/Output: [(-70 -82 92 69) -82]
Test Case: 785 | Input/Output: [(7 81 -52 4) -52]
Test Case: 786 | Input/Output: [(-87 -9 74 22) -87]
Test Case: 787 | Input/Output: [(-9 -67 23 81) -67]
Test Case: 788 | Input/Output: [(-13 -59 26 -10) -59]
Test Case: 789 | Input/Output: [(-84 -80 65 -99) -99]
Test Case: 790 | Input/Output: [(-21 -83 -69 -94) -94]
Test Case: 791 | Input/Output: [(89 -64 -98 -15) -98]
Test Case: 792 | Input/Output: [(80 -50 15 -54) -54]
Test Case: 793 | Input/Output: [(-89 1 1 55) -89]
Test Case: 794 | Input/Output: [(18 70 -91 -28) -91]
Test Case: 795 | Input/Output: [(-19 -41 -11 58) -41]
Test Case: 796 | Input/Output: [(78 -77 -15 66) -77]
Test Case: 797 | Input/Output: [(-86 12 75 46) -86]
Test Case: 798 | Input/Output: [(-23 23 -10 -81) -81]
Test Case: 799 | Input/Output: [(-29 -14 47 18) -29]
Test Case: 800 | Input/Output: [(51 85 -9 68) -9]
Test Case: 801 | Input/Output: [(29 26 68 -30) -30]
Test Case: 802 | Input/Output: [(37 -60 91 50) -60]
Test Case: 803 | Input/Output: [(78 1 -15 97) -15]
Test Case: 804 | Input/Output: [(-85 65 6 6) -85]
Test Case: 805 | Input/Output: [(-47 -89 93 -16) -89]
Test Case: 806 | Input/Output: [(-83 85 32 -24) -83]
Test Case: 807 | Input/Output: [(13 21 47 73) 13]
Test Case: 808 | Input/Output: [(20 64 -73 -96) -96]
Test Case: 809 | Input/Output: [(88 -73 -25 -24) -73]
Test Case: 810 | Input/Output: [(-97 -61 -84 66) -97]
Test Case: 811 | Input/Output: [(98 55 0 -98) -98]
Test Case: 812 | Input/Output: [(-38 -42 29 -29) -42]
Test Case: 813 | Input/Output: [(82 19 71 33) 19]
Test Case: 814 | Input/Output: [(42 39 5 -38) -38]
Test Case: 815 | Input/Output: [(35 -51 53 16) -51]
Test Case: 816 | Input/Output: [(45 -77 -72 20) -77]
Test Case: 817 | Input/Output: [(90 -74 52 -88) -88]
Test Case: 818 | Input/Output: [(95 -38 11 50) -38]
Test Case: 819 | Input/Output: [(-65 16 72 -94) -94]
Test Case: 820 | Input/Output: [(36 -7 99 74) -7]
Test Case: 821 | Input/Output: [(92 99 -29 -57) -57]
Test Case: 822 | Input/Output: [(3 93 46 47) 3]
Test Case: 823 | Input/Output: [(40 31 71 92) 31]
Test Case: 824 | Input/Output: [(-78 -62 -68 -19) -78]
Test Case: 825 | Input/Output: [(30 13 55 54) 13]
Test Case: 826 | Input/Output: [(-12 -52 -78 -6) -78]
Test Case: 827 | Input/Output: [(12 86 35 -29) -29]
Test Case: 828 | Input/Output: [(22 32 95 23) 22]
Test Case: 829 | Input/Output: [(-67 31 97 -81) -81]
Test Case: 830 | Input/Output: [(44 77 -35 -34) -35]
Test Case: 831 | Input/Output: [(-2 -46 88 -46) -46]
Test Case: 832 | Input/Output: [(3 37 59 -96) -96]
Test Case: 833 | Input/Output: [(-92 -5 91 -8) -92]
Test Case: 834 | Input/Output: [(69 97 -16 62) -16]
Test Case: 835 | Input/Output: [(-20 69 62 -8) -20]
Test Case: 836 | Input/Output: [(-26 -13 51 -73) -73]
Test Case: 837 | Input/Output: [(-43 -88 87 -90) -90]
Test Case: 838 | Input/Output: [(51 -80 -36 2) -80]
Test Case: 839 | Input/Output: [(-8 14 -96 -59) -96]
Test Case: 840 | Input/Output: [(95 26 87 22) 22]
Test Case: 841 | Input/Output: [(10 20 -99 67) -99]
Test Case: 842 | Input/Output: [(23 -92 99 -63) -92]
Test Case: 843 | Input/Output: [(14 -1 87 45) -1]
Test Case: 844 | Input/Output: [(-34 -66 45 38) -66]
Test Case: 845 | Input/Output: [(66 -29 52 -99) -99]
Test Case: 846 | Input/Output: [(56 -81 -63 -43) -81]
Test Case: 847 | Input/Output: [(-72 -100 37 -49) -100]
Test Case: 848 | Input/Output: [(22 -88 55 -77) -88]
Test Case: 849 | Input/Output: [(53 -96 54 -24) -96]
Test Case: 850 | Input/Output: [(-26 99 -54 95) -54]
Test Case: 851 | Input/Output: [(-36 44 32 14) -36]
Test Case: 852 | Input/Output: [(-88 -23 -27 17) -88]
Test Case: 853 | Input/Output: [(67 48 -79 -9) -79]
Test Case: 854 | Input/Output: [(14 -88 -74 -9) -88]
Test Case: 855 | Input/Output: [(-32 72 0 13) -32]
Test Case: 856 | Input/Output: [(63 46 28 -59) -59]
Test Case: 857 | Input/Output: [(-63 67 22 13) -63]
Test Case: 858 | Input/Output: [(33 30 92 75) 30]
Test Case: 859 | Input/Output: [(-99 -51 96 -68) -99]
Test Case: 860 | Input/Output: [(-55 -50 35 -87) -87]
Test Case: 861 | Input/Output: [(-76 -34 65 -51) -76]
Test Case: 862 | Input/Output: [(-65 -72 1 9) -72]
Test Case: 863 | Input/Output: [(-86 15 34 9) -86]
Test Case: 864 | Input/Output: [(-47 -73 58 59) -73]
Test Case: 865 | Input/Output: [(59 -50 82 -52) -52]
Test Case: 866 | Input/Output: [(29 58 -38 65) -38]
Test Case: 867 | Input/Output: [(-76 81 4 -21) -76]
Test Case: 868 | Input/Output: [(7 6 -80 97) -80]
Test Case: 869 | Input/Output: [(46 66 -3 -12) -12]
Test Case: 870 | Input/Output: [(-21 95 -51 -40) -51]
Test Case: 871 | Input/Output: [(61 94 78 10) 10]
Test Case: 872 | Input/Output: [(-54 78 80 97) -54]
Test Case: 873 | Input/Output: [(82 -78 55 -70) -78]
Test Case: 874 | Input/Output: [(-28 7 -57 -64) -64]
Test Case: 875 | Input/Output: [(-4 -35 73 -36) -36]
Test Case: 876 | Input/Output: [(50 -45 -37 49) -45]
Test Case: 877 | Input/Output: [(-29 -13 72 -63) -63]
Test Case: 878 | Input/Output: [(-35 56 34 -45) -45]
Test Case: 879 | Input/Output: [(-37 13 71 -54) -54]
Test Case: 880 | Input/Output: [(-22 93 70 22) -22]
Test Case: 881 | Input/Output: [(42 -85 -73 12) -85]
Test Case: 882 | Input/Output: [(49 20 15 51) 15]
Test Case: 883 | Input/Output: [(7 -62 -95 11) -95]
Test Case: 884 | Input/Output: [(-85 28 97 68) -85]
Test Case: 885 | Input/Output: [(37 74 10 44) 10]
Test Case: 886 | Input/Output: [(37 40 23 -57) -57]
Test Case: 887 | Input/Output: [(-13 -8 4 21) -13]
Test Case: 888 | Input/Output: [(-44 -56 -91 -49) -91]
Test Case: 889 | Input/Output: [(-100 56 -74 -96) -100]
Test Case: 890 | Input/Output: [(17 -40 -78 -95) -95]
Test Case: 891 | Input/Output: [(-42 59 -21 63) -42]
Test Case: 892 | Input/Output: [(39 22 -18 2) -18]
Test Case: 893 | Input/Output: [(-82 35 -50 36) -82]
Test Case: 894 | Input/Output: [(-33 -23 34 -51) -51]
Test Case: 895 | Input/Output: [(44 -81 -100 91) -100]
Test Case: 896 | Input/Output: [(64 57 56 -45) -45]
Test Case: 897 | Input/Output: [(22 -80 -44 74) -80]
Test Case: 898 | Input/Output: [(-68 65 16 92) -68]
Test Case: 899 | Input/Output: [(45 15 -61 -4) -61]
Test Case: 900 | Input/Output: [(-15 45 23 51) -15]
Test Case: 901 | Input/Output: [(69 65 -53 -65) -65]
Test Case: 902 | Input/Output: [(-66 -64 88 90) -66]
Test Case: 903 | Input/Output: [(96 -40 -16 -53) -53]
Test Case: 904 | Input/Output: [(51 -41 55 -99) -99]
Test Case: 905 | Input/Output: [(-73 85 90 59) -73]
Test Case: 906 | Input/Output: [(94 61 84 19) 19]
Test Case: 907 | Input/Output: [(-100 -91 74 45) -100]
Test Case: 908 | Input/Output: [(-67 -57 -97 74) -97]
Test Case: 909 | Input/Output: [(-20 55 43 26) -20]
Test Case: 910 | Input/Output: [(59 -82 37 -83) -83]
Test Case: 911 | Input/Output: [(-19 0 3 3) -19]
Test Case: 912 | Input/Output: [(-99 -98 83 79) -99]
Test Case: 913 | Input/Output: [(-17 83 -17 -21) -21]
Test Case: 914 | Input/Output: [(2 -3 89 -65) -65]
Test Case: 915 | Input/Output: [(-92 -22 40 -77) -92]
Test Case: 916 | Input/Output: [(63 1 83 -98) -98]
Test Case: 917 | Input/Output: [(15 -39 -69 52) -69]
Test Case: 918 | Input/Output: [(-96 63 -60 9) -96]
Test Case: 919 | Input/Output: [(25 -58 -78 93) -78]
Test Case: 920 | Input/Output: [(-23 2 99 12) -23]
Test Case: 921 | Input/Output: [(-61 -69 -24 80) -69]
Test Case: 922 | Input/Output: [(53 2 -29 10) -29]
Test Case: 923 | Input/Output: [(6 77 52 76) 6]
Test Case: 924 | Input/Output: [(-17 88 26 -30) -30]
Test Case: 925 | Input/Output: [(-24 20 80 -71) -71]
Test Case: 926 | Input/Output: [(-47 92 -36 -17) -47]
Test Case: 927 | Input/Output: [(94 53 -32 0) -32]
Test Case: 928 | Input/Output: [(58 13 -6 -60) -60]
Test Case: 929 | Input/Output: [(-62 95 -23 -10) -62]
Test Case: 930 | Input/Output: [(-16 -78 24 32) -78]
Test Case: 931 | Input/Output: [(-45 -94 -23 -25) -94]
Test Case: 932 | Input/Output: [(91 31 44 -5) -5]
Test Case: 933 | Input/Output: [(-29 98 -62 -8) -62]
Test Case: 934 | Input/Output: [(13 55 -63 -48) -63]
Test Case: 935 | Input/Output: [(-46 -49 -76 -67) -76]
Test Case: 936 | Input/Output: [(-44 76 47 74) -44]
Test Case: 937 | Input/Output: [(2 14 52 -25) -25]
Test Case: 938 | Input/Output: [(94 -70 48 -3) -70]
Test Case: 939 | Input/Output: [(72 66 4 86) 4]
Test Case: 940 | Input/Output: [(-66 64 -25 78) -66]
Test Case: 941 | Input/Output: [(-50 81 54 -8) -50]
Test Case: 942 | Input/Output: [(-93 89 98 -84) -93]
Test Case: 943 | Input/Output: [(27 90 19 30) 19]
Test Case: 944 | Input/Output: [(13 75 -10 -96) -96]
Test Case: 945 | Input/Output: [(33 90 -48 23) -48]
Test Case: 946 | Input/Output: [(4 13 -70 5) -70]
Test Case: 947 | Input/Output: [(63 -8 -29 60) -29]
Test Case: 948 | Input/Output: [(-32 -39 -97 -76) -97]
Test Case: 949 | Input/Output: [(53 -75 95 -100) -100]
Test Case: 950 | Input/Output: [(-79 -31 -13 -34) -79]
Test Case: 951 | Input/Output: [(28 44 -33 23) -33]
Test Case: 952 | Input/Output: [(2 -36 -7 -68) -68]
Test Case: 953 | Input/Output: [(-11 -44 67 -88) -88]
Test Case: 954 | Input/Output: [(44 82 60 -57) -57]
Test Case: 955 | Input/Output: [(-12 -98 -74 99) -98]
Test Case: 956 | Input/Output: [(14 95 -66 -97) -97]
Test Case: 957 | Input/Output: [(-23 76 -56 -97) -97]
Test Case: 958 | Input/Output: [(-48 -5 68 -4) -48]
Test Case: 959 | Input/Output: [(-48 -3 -65 16) -65]
Test Case: 960 | Input/Output: [(47 60 31 -90) -90]
Test Case: 961 | Input/Output: [(-75 -13 50 -66) -75]
Test Case: 962 | Input/Output: [(17 -61 19 66) -61]
Test Case: 963 | Input/Output: [(-24 73 -93 9) -93]
Test Case: 964 | Input/Output: [(-49 -67 30 -40) -67]
Test Case: 965 | Input/Output: [(54 4 -25 -39) -39]
Test Case: 966 | Input/Output: [(-68 44 -28 -68) -68]
Test Case: 967 | Input/Output: [(-9 15 100 -18) -18]
Test Case: 968 | Input/Output: [(-79 14 89 -72) -79]
Test Case: 969 | Input/Output: [(-37 -3 40 95) -37]
Test Case: 970 | Input/Output: [(23 -64 27 -72) -72]
Test Case: 971 | Input/Output: [(53 79 47 63) 47]
Test Case: 972 | Input/Output: [(-19 50 -25 -81) -81]
Test Case: 973 | Input/Output: [(50 56 -48 83) -48]
Test Case: 974 | Input/Output: [(-55 18 30 71) -55]
Test Case: 975 | Input/Output: [(-65 -81 -94 -11) -94]
Test Case: 976 | Input/Output: [(-50 -4 -29 54) -50]
Test Case: 977 | Input/Output: [(-95 -55 48 -33) -95]
Test Case: 978 | Input/Output: [(8 52 23 -83) -83]
Test Case: 979 | Input/Output: [(71 7 -43 -23) -43]
Test Case: 980 | Input/Output: [(88 62 -37 -10) -37]
Test Case: 981 | Input/Output: [(94 -48 -65 55) -65]
Test Case: 982 | Input/Output: [(30 94 9 -11) -11]
Test Case: 983 | Input/Output: [(74 29 -42 33) -42]
Test Case: 984 | Input/Output: [(-70 -73 -30 12) -73]
Test Case: 985 | Input/Output: [(-13 78 25 -17) -17]
Test Case: 986 | Input/Output: [(-33 4 -32 -14) -33]
Test Case: 987 | Input/Output: [(-38 53 -3 -11) -38]
Test Case: 988 | Input/Output: [(-21 -38 98 -33) -38]
Test Case: 989 | Input/Output: [(-33 -79 -65 -26) -79]
Test Case: 990 | Input/Output: [(49 92 37 -32) -32]
Test Case: 991 | Input/Output: [(95 41 -54 82) -54]
Test Case: 992 | Input/Output: [(18 58 -47 28) -47]
Test Case: 993 | Input/Output: [(-80 -39 1 77) -80]
Test Case: 994 | Input/Output: [(70 -54 88 42) -54]
Test Case: 995 | Input/Output: [(22 99 26 -26) -26]
Test Case: 996 | Input/Output: [(-36 95 1 -77) -77]
Test Case: 997 | Input/Output: [(-68 -3 49 33) -68]
Test Case: 998 | Input/Output: [(34 -66 12 98) -66]
Test Case: 999 | Input/Output: [(69 -85 -54 -86) -86]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 88 32 -88 80 -109 43 -22 -50 71 29 -105 25 -71 -9 93 -109
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-100 -93 -93 -93] -100] [[-59 -74 -74 -74] -74] [[48 48 91 48] 48] [[29 25 25 25] 25] [[-15 -15 -15 42] -15] [[58 58 58 -35] -35] [[40 79 79 79] 40] [[7 7 -100 7] -100] [[-6 -6 -6 -98] -98] [[83 83 85 83] 83] [(10 10 10 10) 10] [(-50 -50 -50 -50) -50] [(-93 -93 -93 -93) -93] [(81 81 81 81) 81] [(-56 -56 -56 -56) -56] [(76 28 43 18) 18] [(11 95 85 82) 11] [(100 37 4 25) 4] [(44 87 9 51) 9] [(13 24 98 17) 13] [(48 92 13 46) 13] [(70 82 34 20) 20] [(41 74 17 88) 17] [(92 8 87 18) 8] [(72 99 20 51) 20] [(78 94 42 38) 38] [(15 92 43 71) 15] [(91 62 63 40) 40] [(2 87 11 48) 2] [(24 60 29 99) 24] [(48 52 66 14) 14] [(38 96 63 45) 38] [(97 26 47 63) 26] [(75 9 86 0) 0] [(92 81 97 42) 42] [(50 88 -22 -57) -57] [(-1 53 -77 -2) -77] [(61 -62 -48 -55) -62] [(-92 17 28 51) -92] [(84 -84 -26 43) -84] [(40 69 -94 81) -94] [(79 -40 -3 -74) -74] [(-32 -37 -76 -73) -76] [(-75 80 40 -32) -75] [(20 -84 -24 91) -84] [(-87 11 -96 89) -96] [(-17 -38 -54 -24) -54] [(-62 3 -33 -11) -62] [(8 18 -51 -70) -70] [(-28 -94 60 86) -94] [(28 73 19 75) 19] [(-45 -59 69 -31) -59] [(89 14 -23 64) -23] [(65 -66 -89 -85) -89] [(90 95 -79 -11) -79] [(-77 53 5 47) -77] [(-57 -38 63 3) -57] [(41 -29 72 78) -29] [(-76 51 -66 -37) -76] [(-66 -73 67 97) -73] [(90 -22 8 -40) -40] [(4 84 -97 27) -97] [(-7 21 72 -45) -45] [(92 85 -31 0) -31] [(70 -69 38 24) -69] [(74 -55 -21 -3) -55] [(-59 -44 -7 75) -59] [(-36 51 -2 27) -36] [(78 90 -40 -43) -43] [(-34 60 57 5) -34] [(-84 67 25 90) -84] [(-9 46 8 -70) -70] [(-76 46 57 48) -76] [(-30 15 -38 42) -38] [(-43 -30 100 76) -43] [(-41 -82 -24 -90) -90] [(81 -13 -46 91) -46] [(-73 -23 58 -24) -73] [(39 -16 -57 49) -57] [(-94 48 -61 -95) -95] [(-24 81 -27 -10) -27] [(-3 -29 19 -91) -91] [(-79 16 -24 43) -79] [(31 2 -53 -79) -79] [(35 9 28 -88) -88] [(-71 -16 60 -25) -71] [(-36 -82 -73 77) -82] [(-5 14 72 -18) -18] [(78 81 -26 36) -26] [(42 15 -37 52) -37] [(81 19 35 -34) -34] [(28 37 -3 -100) -100] [(-82 -43 33 46) -82] [(68 -18 28 -87) -87] [(-89 35 16 -10) -89])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 623
Test mean error for best: 0.62300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: 42                 
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 79                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 82                 
Correct output: 4                   | Program output: 25                 
Correct output: 9                   | Program output: 51                 
Correct output: 13                  | Program output: 17                 
Correct output: 13                  | Program output: 46                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 20                  | Program output: 51                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 71                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 48                 
Correct output: 24                  | Program output: 99                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 45                 
Correct output: 26                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -2                 
Correct output: -62                 | Program output: -55                
Correct output: -92                 | Program output: 51                 
Correct output: -84                 | Program output: 43                 
Correct output: -94                 | Program output: 81                 
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -73                
Correct output: -75                 | Program output: -32                
Correct output: -84                 | Program output: 91                 
Correct output: -96                 | Program output: 89                 
Correct output: -54                 | Program output: -24                
Correct output: -62                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: 86                 
Correct output: 19                  | Program output: 75                 
Correct output: -59                 | Program output: -31                
Correct output: -23                 | Program output: 64                 
Correct output: -89                 | Program output: -85                
Correct output: -79                 | Program output: -11                
Correct output: -77                 | Program output: 47                 
Correct output: -57                 | Program output: 3                  
Correct output: -29                 | Program output: 78                 
Correct output: -76                 | Program output: -37                
Correct output: -73                 | Program output: 97                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 27                 
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: 0                  
Correct output: -69                 | Program output: 24                 
Correct output: -55                 | Program output: -3                 
Correct output: -59                 | Program output: 75                 
Correct output: -36                 | Program output: 27                 
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 5                  
Correct output: -84                 | Program output: 90                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: 48                 
Correct output: -38                 | Program output: 42                 
Correct output: -43                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 91                 
Correct output: -73                 | Program output: -24                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -25                
Correct output: -82                 | Program output: 77                 
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: 36                 
Correct output: -37                 | Program output: 52                 
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_683} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_336} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_boolean_929} {:close 0, :instruction tagged_375} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction -21} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup in2 in4 integer_dup tag_integer_683 print_integer boolean_eq boolean_and exec_noop exec_dup_times (tagged_336 exec_do*count (boolean_dup_times exec_y (integer_gt exec_s_when_autoconstructing (exec_pop (exec_dup (exec_do*count (boolean_dup_times boolean_dup_times tag_boolean_929) tagged_375 exec_do*range () integer_sub boolean_dup exec_shove () boolean_invert_second_then_and) -21 integer_shove integer_yankdup exec_do*while (exec_y (integer_gt exec_dup_times (integer_pop integer_div) integer_gte exec_s () (integer_add exec_when (boolean_xor exec_y () integer_dup_times exec_shove (integer_mult) integer_swap) boolean_stackdepth) (integer_flush exec_dup (exec_yankdup integer_div boolean_dup_times integer_stackdepth exec_when (exec_do*range (exec_s_when_autoconstructing (integer_pop) (integer_fromboolean integer_min exec_rot (print_integer boolean_flush) () ()) ())))))))) () ()))))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_683} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_336} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_boolean_929} {:close 0, :instruction tagged_375} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction -21} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup in2 in4 integer_dup tag_integer_683 print_integer boolean_eq boolean_and exec_noop exec_dup_times (tagged_336 exec_do*count (boolean_dup_times exec_y (integer_gt exec_s_when_autoconstructing (exec_pop (exec_dup (exec_do*count (boolean_dup_times boolean_dup_times tag_boolean_929) tagged_375 exec_do*range () integer_sub boolean_dup exec_shove () boolean_invert_second_then_and) -21 integer_shove integer_yankdup exec_do*while (exec_y (integer_gt exec_dup_times (integer_pop integer_div) integer_gte exec_s () (integer_add exec_when (boolean_xor exec_y () integer_dup_times exec_shove (integer_mult) integer_swap) boolean_stackdepth) (integer_flush exec_dup (exec_yankdup integer_div boolean_dup_times integer_stackdepth exec_when (exec_do*range (exec_s_when_autoconstructing (integer_pop) (integer_fromboolean integer_min exec_rot (print_integer boolean_flush) () ()) ())))))))) () ()))))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 3 3 11 3 3 3 4 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 4 3 3 11 3 3 3 4 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_836} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min})
Best program: (exec_empty integer_rot exec_while (exec_do*times (boolean_dup_times integer_lt boolean_or exec_yankdup tagged_836 integer_yankdup) exec_flush exec_yankdup in4 boolean_invert_second_then_and) boolean_shove integer_lt in4 exec_rot () (exec_do*range () print_integer exec_shove (boolean_yank boolean_empty boolean_invert_second_then_and integer_yank in1 boolean_dup) boolean_not integer_stackdepth) (boolean_pop boolean_invert_first_then_and) integer_min)
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.997 0.997 0.989 0.997 0.997 0.997 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.165
Average program size in population (points): 68.92
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 460479
--- Timings ---
Current time: 1559593895032 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.9 seconds, 31.2%
Fitness Testing:      1.8 seconds, 64.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: 58                 
Correct output: 40                  | Program output: 79                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -6                 
Correct output: 83                  | Program output: 85                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 43                 
Correct output: 11                  | Program output: 85                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 42                 
Correct output: 15                  | Program output: 43                 
Correct output: 40                  | Program output: 63                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 29                 
Correct output: 14                  | Program output: 66                 
Correct output: 38                  | Program output: 63                 
Correct output: 26                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 97                 
Correct output: -57                 | Program output: -22                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 28                 
Correct output: -84                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: 40                 
Correct output: -84                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -51                
Correct output: -94                 | Program output: 60                 
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: 69                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 5                  
Correct output: -57                 | Program output: 63                 
Correct output: -29                 | Program output: 72                 
Correct output: -76                 | Program output: -66                
Correct output: -73                 | Program output: 67                 
Correct output: -40                 | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 72                 
Correct output: -31                 | Program output: 0                  
Correct output: -69                 | Program output: 38                 
Correct output: -55                 | Program output: -21                
Correct output: -59                 | Program output: -7                 
Correct output: -36                 | Program output: -2                 
Correct output: -43                 | Program output: -40                
Correct output: -34                 | Program output: 57                 
Correct output: -84                 | Program output: 25                 
Correct output: -70                 | Program output: 8                  
Correct output: -76                 | Program output: 57                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 100                
Correct output: -90                 | Program output: -24                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: 58                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -61                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: 19                 
Correct output: -79                 | Program output: -24                
Correct output: -79                 | Program output: -53                
Correct output: -88                 | Program output: 28                 
Correct output: -71                 | Program output: 60                 
Correct output: -82                 | Program output: -73                
Correct output: -18                 | Program output: 72                 
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: 35                 
Correct output: -100                | Program output: -3                 
Correct output: -82                 | Program output: 33                 
Correct output: -87                 | Program output: 28                 
Correct output: -89                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_836} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min})
Lexicase best program: (exec_empty integer_rot exec_while (exec_do*times (integer_lt boolean_or exec_yankdup tagged_836 integer_yankdup) exec_flush exec_yankdup in4 boolean_invert_second_then_and) boolean_shove integer_lt in4 exec_rot () (exec_do*range () in3 print_integer in4 exec_shove (boolean_yank boolean_empty boolean_invert_second_then_and integer_yank in1 boolean_dup) boolean_not integer_stackdepth) (boolean_invert_first_then_and) integer_fromboolean integer_min)
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_836} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min})
Zero cases best program: (exec_empty integer_rot exec_while (exec_do*times (integer_lt boolean_or exec_yankdup tagged_836 integer_yankdup) exec_flush exec_yankdup in4 boolean_invert_second_then_and) boolean_shove integer_lt in4 exec_rot () (exec_do*range () in3 print_integer in4 exec_shove (boolean_yank boolean_empty boolean_invert_second_then_and integer_yank in1 boolean_dup) boolean_not integer_stackdepth) (boolean_invert_first_then_and) integer_fromboolean integer_min)
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (33 244 116 30 33 119 33 34 102 118)
Population mean number of elite cases: 0.86
Count of perfect (error zero) individuals by case: (33 244 116 30 33 119 33 34 102 118)
Population mean number of perfect (error zero) cases: 0.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (integer_pop integer_min in3 integer_min boolean_not in4 in4 integer_div integer_dup_items boolean_yank exec_while (print_exec (exec_flush exec_yankdup integer_swap)) print_integer boolean_or integer_eq boolean_empty in4 exec_yankdup integer_swap integer_empty boolean_not integer_mult boolean_invert_first_then_and integer_min exec_while (integer_swap) integer_mod exec_k (integer_flush boolean_not) (exec_while ()))
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 9.138
Median total errors in population: 9
Error averages by case: (0.967 0.756 0.884 0.97 0.967 0.881 0.967 0.966 0.898 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.974
Average program size in population (points): 74.214
Average percent parens in population: 0.253
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 973113
--- Timings ---
Current time: 1559593897156 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         1.8 seconds, 37.4%
Fitness Testing:      2.5 seconds, 51.0%
Report:               0.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 79                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -6                 
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 82                 
Correct output: 4                   | Program output: 25                 
Correct output: 9                   | Program output: 51                 
Correct output: 13                  | Program output: 17                 
Correct output: 13                  | Program output: 46                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 20                  | Program output: 51                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 71                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 48                 
Correct output: 24                  | Program output: 99                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 45                 
Correct output: 26                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -2                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: 81                 
Correct output: -74                 | Program output: -40                
Correct output: -76                 | Program output: -37                
Correct output: -75                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: 89                 
Correct output: -54                 | Program output: -38                
Correct output: -62                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: 64                 
Correct output: -89                 | Program output: -66                
Correct output: -79                 | Program output: -11                
Correct output: -77                 | Program output: 47                 
Correct output: -57                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -76                 | Program output: -37                
Correct output: -73                 | Program output: -73                
Correct output: -40                 | Program output: -22                
Correct output: -97                 | Program output: 27                 
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: 0                  
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -55                
Correct output: -59                 | Program output: -44                
Correct output: -36                 | Program output: 27                 
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 5                  
Correct output: -84                 | Program output: 90                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: 48                 
Correct output: -38                 | Program output: 42                 
Correct output: -43                 | Program output: -30                
Correct output: -90                 | Program output: -82                
Correct output: -46                 | Program output: -13                
Correct output: -73                 | Program output: -23                
Correct output: -57                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -10                
Correct output: -91                 | Program output: -29                
Correct output: -79                 | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -16                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: 36                 
Correct output: -37                 | Program output: 52                 
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -43                
Correct output: -87                 | Program output: -18                
Correct output: -89                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_683} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_boolean_929} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_375} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup in2 in4 in2 integer_dup exec_do*times (tag_integer_683 print_integer boolean_eq) boolean_and exec_noop exec_dup_times (integer_dup_times) exec_yankdup exec_do*count (exec_y (integer_gt exec_s_when_autoconstructing (exec_dup (exec_do*count (boolean_dup_times boolean_dup_times tag_boolean_929) integer_eq tagged_375 exec_do*range () integer_sub boolean_dup exec_shove () boolean_invert_second_then_and) exec_eq integer_shove integer_yankdup exec_do*while (integer_swap) exec_y (integer_gt exec_dup_times (integer_pop integer_div) exec_s () (exec_when (boolean_xor exec_y () exec_pop (integer_dup_times integer_mult) boolean_stackdepth) exec_k () (integer_flush exec_dup (exec_yankdup exec_s (integer_div boolean_dup_times integer_stackdepth exec_when (exec_do*range (integer_pop) exec_y_when_autoconstructing (integer_fromboolean integer_min exec_k_when_autoconstructing (exec_rot (boolean_flush) () ()) ()))) () ()))) ())) () ())))
Lexicase best errors: [1 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_683} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_boolean_929} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_375} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup in2 in4 in2 integer_dup exec_do*times (tag_integer_683 print_integer boolean_eq) boolean_and exec_noop exec_dup_times (integer_dup_times) exec_yankdup exec_do*count (exec_y (integer_gt exec_s_when_autoconstructing (exec_dup (exec_do*count (boolean_dup_times boolean_dup_times tag_boolean_929) integer_eq tagged_375 exec_do*range () integer_sub boolean_dup exec_shove () boolean_invert_second_then_and) exec_eq integer_shove integer_yankdup exec_do*while (integer_swap) exec_y (integer_gt exec_dup_times (integer_pop integer_div) exec_s () (exec_when (boolean_xor exec_y () exec_pop (integer_dup_times integer_mult) boolean_stackdepth) exec_k () (integer_flush exec_dup (exec_yankdup exec_s (integer_div boolean_dup_times integer_stackdepth exec_when (exec_do*range (integer_pop) exec_y_when_autoconstructing (integer_fromboolean integer_min exec_k_when_autoconstructing (exec_rot (boolean_flush) () ()) ()))) () ()))) ())) () ())))
Zero cases best errors: [1 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 484 166 166 177 120 120 38 157 37)
Population mean number of elite cases: 1.64
Count of perfect (error zero) individuals by case: (178 484 166 166 177 120 120 38 157 37)
Population mean number of perfect (error zero) cases: 1.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_683} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_boolean_929} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_375} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup in2 in4 in2 integer_dup exec_do*times (tag_integer_683 print_integer boolean_eq) boolean_and exec_noop exec_dup_times (integer_dup_times) exec_yankdup exec_do*count (exec_y (integer_gt exec_s_when_autoconstructing (exec_dup (exec_do*count (boolean_dup_times boolean_dup_times tag_boolean_929) integer_eq tagged_375 exec_do*range () integer_sub boolean_dup exec_shove () boolean_invert_second_then_and) exec_eq integer_shove integer_yankdup exec_do*while (integer_swap) exec_y (integer_gt exec_dup_times (integer_pop integer_div) exec_s () (exec_when (boolean_xor exec_y () exec_pop (integer_dup_times integer_mult) boolean_stackdepth) exec_k () (integer_flush exec_dup (exec_yankdup exec_s (integer_div boolean_dup_times integer_stackdepth exec_when (exec_do*range (integer_pop) exec_y_when_autoconstructing (integer_fromboolean integer_min exec_k_when_autoconstructing (exec_rot (boolean_flush) () ()) ()))) () ()))) ())) () ())))
Errors: [1 0 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 65
Size: 100
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 8.357
Median total errors in population: 8
Error averages by case: (0.822 0.516 0.834 0.834 0.823 0.88 0.88 0.962 0.843 0.963)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.61
Average program size in population (points): 73.882
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1629270
--- Timings ---
Current time: 1559593899866 milliseconds
Total Time:           7.1 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.0 seconds, 41.6%
Fitness Testing:      3.2 seconds, 45.1%
Report:               0.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -6                 
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 14                  | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 92                 
Correct output: -57                 | Program output: -22                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -51                
Correct output: -94                 | Program output: -28                
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -66                
Correct output: -40                 | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -7                 
Correct output: -31                 | Program output: 0                  
Correct output: -69                 | Program output: 38                 
Correct output: -55                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -43                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -9                 
Correct output: -76                 | Program output: -76                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -94                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -53                
Correct output: -88                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -73                
Correct output: -18                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: 35                 
Correct output: -100                | Program output: -3                 
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_div integer_dup_items boolean_yank exec_while (print_exec (exec_flush exec_yankdup in2 integer_swap)) exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq boolean_empty exec_dup_items in4 exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (exec_k (integer_flush boolean_not) (exec_while (exec_k () ())))))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_div integer_dup_items boolean_yank exec_while (print_exec (exec_flush exec_yankdup in2 integer_swap)) exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq boolean_empty exec_dup_items in4 exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (exec_k (integer_flush boolean_not) (exec_while (exec_k () ())))))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 150 85 150 149 222 85 150 310 151)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (200 150 85 150 149 222 85 150 310 151)
Population mean number of perfect (error zero) cases: 1.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k})
Best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_div integer_dup_items boolean_yank exec_while (print_exec (exec_flush exec_yankdup in2 integer_swap)) exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq boolean_empty exec_dup_items in4 exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (exec_k (integer_flush boolean_not) (exec_while (exec_k () ())))))
Errors: [1 0 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 8.348
Median total errors in population: 8
Error averages by case: (0.8 0.85 0.915 0.85 0.851 0.778 0.915 0.85 0.69 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.243
Average program size in population (points): 79.635
Average percent parens in population: 0.277
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2513958
--- Timings ---
Current time: 1559593902230 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.1 seconds, 40.9%
Fitness Testing:      4.1 seconds, 40.6%
Report:               1.7 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 79                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 82                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 43                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 29                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 45                 
Correct output: 26                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -55                
Correct output: -92                 | Program output: 28                 
Correct output: -84                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -32                
Correct output: -84                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: 60                 
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: -31                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 5                  
Correct output: -57                 | Program output: 3                  
Correct output: -29                 | Program output: 72                 
Correct output: -76                 | Program output: -66                
Correct output: -73                 | Program output: 67                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -69                 | Program output: 24                 
Correct output: -55                 | Program output: -21                
Correct output: -59                 | Program output: -7                 
Correct output: -36                 | Program output: -2                 
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 5                  
Correct output: -84                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: 48                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -25                
Correct output: -82                 | Program output: -73                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: 33                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop integer_min exec_swap (in3 integer_swap integer_min boolean_not) (in4 in4 integer_dup_items) boolean_yank exec_while (exec_flush exec_yankdup integer_swap) print_integer integer_mod boolean_or integer_eq boolean_empty exec_dup_items in4 boolean_swap exec_yankdup integer_empty boolean_not integer_mult boolean_invert_first_then_and integer_swap integer_mod exec_k (integer_flush boolean_not) (boolean_yank exec_while (integer_yankdup) exec_k () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop integer_min exec_swap (in3 integer_swap integer_min boolean_not) (in4 in4 integer_dup_items) boolean_yank exec_while (exec_flush exec_yankdup integer_swap) print_integer integer_mod boolean_or integer_eq boolean_empty exec_dup_items in4 boolean_swap exec_yankdup integer_empty boolean_not integer_mult boolean_invert_first_then_and integer_swap integer_mod exec_k (integer_flush boolean_not) (boolean_yank exec_while (integer_yankdup) exec_k () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 435 186 188 186 183 184 326 466 182)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (426 435 186 188 186 183 184 326 466 182)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_k})
Best program: (integer_pop integer_min exec_swap (in3 integer_swap integer_min boolean_not) (in4 in4 integer_dup_items) exec_while (exec_flush exec_yankdup integer_swap) print_integer integer_mod exec_when (boolean_or integer_eq boolean_empty exec_dup_items in4 exec_yankdup integer_empty boolean_not) exec_rot (integer_mult boolean_invert_first_then_and integer_gt) (integer_swap) (integer_mod exec_k (boolean_not) (boolean_yank in2) integer_yankdup) exec_k () ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.238
Median total errors in population: 10
Error averages by case: (0.574 0.565 0.814 0.812 0.814 0.817 0.816 0.674 0.534 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.0
Average program size in population (points): 48.223
Average percent parens in population: 0.231
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3048918
--- Timings ---
Current time: 1559593904145 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.2 seconds, 43.3%
Fitness Testing:      4.6 seconds, 38.0%
Report:               2.1 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 515
Test mean error for best: 0.51500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 29                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 40                 
Correct output: -100                | Program output: 7                  
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 100                
Correct output: 9                   | Program output: 44                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 48                 
Correct output: 20                  | Program output: 70                 
Correct output: 17                  | Program output: 41                 
Correct output: 8                   | Program output: 92                 
Correct output: 20                  | Program output: 72                 
Correct output: 38                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 91                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 14                  | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -2                 
Correct output: -62                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: 84                 
Correct output: -94                 | Program output: 40                 
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -73                
Correct output: -75                 | Program output: -32                
Correct output: -84                 | Program output: 20                 
Correct output: -96                 | Program output: -87                
Correct output: -54                 | Program output: -24                
Correct output: -62                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -28                
Correct output: 19                  | Program output: 28                 
Correct output: -59                 | Program output: -31                
Correct output: -23                 | Program output: 89                 
Correct output: -89                 | Program output: -85                
Correct output: -79                 | Program output: -11                
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 41                 
Correct output: -76                 | Program output: -37                
Correct output: -73                 | Program output: -66                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: 0                  
Correct output: -69                 | Program output: 70                 
Correct output: -55                 | Program output: -3                 
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -38                 | Program output: -30                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 81                 
Correct output: -73                 | Program output: -24                
Correct output: -57                 | Program output: 39                 
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -25                
Correct output: -82                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: 78                 
Correct output: -37                 | Program output: 42                 
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop in1 integer_min boolean_stackdepth in3 integer_min in4 in4 integer_yank in1 integer_dup_items boolean_yank exec_while (print_exec (exec_flush integer_pop exec_yankdup in2 integer_swap)) exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq integer_empty boolean_empty exec_dup_items in4 exec_yankdup integer_empty boolean_invert_first_then_and integer_mod exec_when (exec_k (integer_flush boolean_not) (exec_while (exec_k () ()))))))
Lexicase best errors: [0 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop in1 integer_min boolean_stackdepth in3 integer_min in4 in4 integer_yank in1 integer_dup_items boolean_yank exec_while (print_exec (exec_flush integer_pop exec_yankdup in2 integer_swap)) exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq integer_empty boolean_empty exec_dup_items in4 exec_yankdup integer_empty boolean_invert_first_then_and integer_mod exec_when (exec_k (integer_flush boolean_not) (exec_while (exec_k () ()))))))
Zero cases best errors: [0 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 275 5 96 289 97 6 492 275 325)
Population mean number of elite cases: 1.96
Count of perfect (error zero) individuals by case: (97 275 5 96 289 97 6 492 275 325)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k})
Best program: (integer_pop in1 integer_min boolean_not integer_min in4 in4 integer_yank boolean_yank exec_while (print_exec (exec_yankdup in2 integer_swap)) exec_k_when_autoconstructing (print_integer exec_do*while (integer_rot boolean_or integer_eq integer_swap boolean_empty exec_dup_items in4 exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_mod exec_when (exec_k (boolean_not) (exec_while (exec_k () ()))))) ())
Errors: [0 0 1 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 8.043
Median total errors in population: 8
Error averages by case: (0.903 0.725 0.995 0.904 0.711 0.903 0.994 0.508 0.725 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.146
Average program size in population (points): 47.823
Average percent parens in population: 0.222
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3591397
--- Timings ---
Current time: 1559593906296 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.3 seconds, 45.2%
Fitness Testing:      5.0 seconds, 36.3%
Report:               2.5 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 79                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 82                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 43                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 29                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 45                 
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 17                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: 5                  
Correct output: -57                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -76                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -55                
Correct output: -59                 | Program output: -44                
Correct output: -36                 | Program output: -2                 
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 5                  
Correct output: -84                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: 46                 
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -25                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_dup_items boolean_yank boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup in2 exec_dup_times (integer_swap)) integer_min exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq exec_dup_items exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (integer_swap exec_k (integer_flush boolean_not) (boolean_eq exec_k () ()))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_dup_items boolean_yank boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup in2 exec_dup_times (integer_swap)) integer_min exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (boolean_or integer_eq exec_dup_items exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (integer_swap exec_k (integer_flush boolean_not) (boolean_eq exec_k () ()))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 296 91 480 593 111 279 176 483 264)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (565 296 91 480 593 111 279 176 483 264)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k})
Best program: (integer_pop in2 integer_min exec_swap (in3 integer_swap integer_min integer_min boolean_not) (in4 boolean_yank exec_while (exec_flush integer_swap)) print_integer integer_mod boolean_or integer_eq exec_while (boolean_empty exec_dup_items in4 exec_yankdup exec_while (integer_empty boolean_not) integer_mult boolean_invert_first_then_and integer_gt) exec_k (integer_flush integer_add boolean_yank integer_dup_times integer_yankdup) (integer_yankdup) integer_yank exec_k () ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.662
Median total errors in population: 5
Error averages by case: (0.435 0.704 0.909 0.52 0.407 0.889 0.721 0.824 0.517 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.887
Average program size in population (points): 47.003
Average percent parens in population: 0.235
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4135114
--- Timings ---
Current time: 1559593908134 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.3 seconds, 45.9%
Fitness Testing:      5.5 seconds, 34.5%
Report:               3.0 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 188
Test mean error for best: 0.18800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -28                
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -66                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -69                 | Program output: 24                 
Correct output: -55                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -73                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_dup_items boolean_yank boolean_invert_second_then_and exec_y_when_autoconstructing () exec_while (boolean_invert_second_then_and print_exec (exec_flush boolean_shove) exec_yankdup in2 exec_dup_times (integer_swap)) integer_min exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (in1 boolean_or integer_eq exec_dup_items exec_yankdup integer_dup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (integer_swap exec_k (integer_flush boolean_not) (boolean_eq exec_k () ()))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 56
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_dup_items boolean_yank boolean_invert_second_then_and exec_y_when_autoconstructing () exec_while (boolean_invert_second_then_and print_exec (exec_flush boolean_shove) exec_yankdup in2 exec_dup_times (integer_swap)) integer_min exec_k_when_autoconstructing (print_integer integer_mod) (exec_do*while (in1 boolean_or integer_eq exec_dup_items exec_yankdup integer_dup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (integer_swap exec_k (integer_flush boolean_not) (boolean_eq exec_k () ()))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 56
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 384 180 208 540 170 386 167 346 338)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (387 384 180 208 540 170 386 167 346 338)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Best program: (integer_pop in1 integer_min in3 integer_min in4 in4 integer_dup_items boolean_yank boolean_invert_second_then_and exec_while (print_exec (boolean_shove) exec_yankdup in2 integer_swap) integer_min exec_k_when_autoconstructing (print_integer in2 integer_mod) (exec_do*while (boolean_or integer_eq exec_dup_items exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod exec_when (integer_lte integer_swap integer_stackdepth exec_k (integer_flush boolean_eq exec_k () ()) ())))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.894
Median total errors in population: 7
Error averages by case: (0.613 0.616 0.82 0.792 0.46 0.83 0.614 0.833 0.654 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.055
Average program size in population (points): 49.386
Average percent parens in population: 0.228
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4742583
--- Timings ---
Current time: 1559593910266 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.4 seconds, 47.1%
Fitness Testing:      6.0 seconds, 33.7%
Report:               3.3 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 188
Test mean error for best: 0.18800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -28                
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -66                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -69                 | Program output: 24                 
Correct output: -55                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -73                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 2, :instruction tagged_227} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Lexicase best program: (integer_pop in1 print_boolean in3 tagged_227 integer_min in4 in4 integer_dup_items boolean_yank exec_dup (boolean_invert_second_then_and exec_while (boolean_not print_exec (exec_flush boolean_shove) exec_yankdup in2 exec_dup_times (integer_swap)) integer_min exec_k_when_autoconstructing (print_integer integer_mod integer_mod) (integer_max exec_do*while (boolean_or integer_eq exec_yankdup integer_empty boolean_pop integer_mult integer_swap) integer_mod exec_when (integer_swap exec_do*range (exec_k (boolean_not) (boolean_eq exec_k () ()))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 57
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 2, :instruction tagged_227} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Zero cases best program: (integer_pop in1 print_boolean in3 tagged_227 integer_min in4 in4 integer_dup_items boolean_yank exec_dup (boolean_invert_second_then_and exec_while (boolean_not print_exec (exec_flush boolean_shove) exec_yankdup in2 exec_dup_times (integer_swap)) integer_min exec_k_when_autoconstructing (print_integer integer_mod integer_mod) (integer_max exec_do*while (boolean_or integer_eq exec_yankdup integer_empty boolean_pop integer_mult integer_swap) integer_mod exec_when (integer_swap exec_do*range (exec_k (boolean_not) (boolean_eq exec_k () ()))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 57
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 333 338 271 259 342 555 269 555 340)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (337 333 338 271 259 342 555 269 555 340)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k})
Best program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 7
Error averages by case: (0.663 0.667 0.662 0.729 0.741 0.658 0.445 0.731 0.445 0.66)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.57
Average program size in population (points): 50.535
Average percent parens in population: 0.235
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5386597
--- Timings ---
Current time: 1559593912204 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.5 seconds, 47.5%
Fitness Testing:      6.6 seconds, 32.8%
Report:               3.8 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 52


Auto-simplifying with starting size: 52
step: 0
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 500
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 1000
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 1500
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 2000
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 2500
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 3000
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 3500
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 4000
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 4500
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 5000
program: (in1 in3 integer_min in4 in4 integer_dup_items boolean_invert_second_then_and exec_while (print_exec (exec_flush boolean_shove) exec_yankdup boolean_xor exec_dup_times (integer_swap)) integer_min print_integer integer_mod exec_do*while (boolean_or integer_eq exec_dup_items exec_k_when_autoconstructing () (exec_yankdup integer_empty integer_mult boolean_invert_first_then_and integer_swap) integer_mod integer_gte exec_when (in2) integer_swap exec_k (integer_flush boolean_not) (exec_while (boolean_eq exec_k () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 188
Test mean error for best: 0.18800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: 48                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -35                 | Program output: -35                
Correct output: 40                  | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 83                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -93                 | Program output: -93                
Correct output: 81                  | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 14                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 26                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -28                
Correct output: 19                  | Program output: 19                 
Correct output: -59                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -66                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -31                 | Program output: -31                
Correct output: -69                 | Program output: 24                 
Correct output: -55                 | Program output: -21                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -38                 | Program output: -38                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -79                 | Program output: -79                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -82                 | Program output: -73                
Correct output: -18                 | Program output: -18                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
;;******************************
