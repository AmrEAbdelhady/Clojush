Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[3 -20 3 3] -20] [[-37 -37 37 -37] -37] [[-97 -74 -74 -74] -97] [[-38 -38 -38 -45] -45] [[72 72 55 72] 55] [[84 -79 -79 -79] -79] [[53 53 53 85] 53] [[99 38 99 99] 38] [[61 -45 -45 -45] -45] [[-8 -55 -8 -8] -55] [(37 37 37 37) 37] [(43 43 43 43) 43] [(5 5 5 5) 5] [(-27 -27 -27 -27) -27] [(-57 -57 -57 -57) -57] [(15 69 65 3) 3] [(11 93 65 17) 11] [(99 42 64 91) 42] [(80 60 2 86) 2] [(78 48 7 54) 7] [(97 62 66 14) 14] [(29 27 7 27) 7] [(34 53 64 5) 5] [(59 74 11 41) 11] [(56 6 74 68) 6] [(8 69 98 81) 8] [(12 29 97 15) 12] [(75 13 39 85) 13] [(84 38 26 100) 26] [(41 48 78 8) 8] [(2 86 38 0) 0] [(16 81 39 81) 16] [(39 61 41 57) 39] [(47 24 19 11) 11] [(97 100 5 93) 5] [(-67 78 57 -87) -87] [(72 -54 -11 12) -54] [(84 71 -61 83) -61] [(-24 -80 -58 45) -80] [(-36 -89 33 22) -89] [(-79 36 49 54) -79] [(-99 -36 -59 -41) -99] [(23 -42 73 21) -42] [(34 20 -93 -18) -93] [(-21 66 13 11) -21] [(-2 -88 64 9) -88] [(-98 -11 -53 37) -98] [(80 45 -14 72) -14] [(72 -16 -5 54) -16] [(-80 -47 69 -69) -80] [(-100 3 5 -27) -100] [(-21 62 98 42) -21] [(-7 42 -47 -25) -47] [(95 58 -20 95) -20] [(-100 -3 -59 98) -100] [(64 69 -89 33) -89] [(61 -55 0 -24) -55] [(-58 -1 20 97) -58] [(73 1 -65 -31) -65] [(-61 44 -5 48) -61] [(-17 -17 -82 -44) -82] [(-33 37 11 81) -33] [(62 52 58 26) 26] [(-18 33 60 -55) -55] [(-47 58 63 52) -47] [(-27 -24 -9 -78) -78] [(-88 -25 18 1) -88] [(57 -33 31 -89) -89] [(47 92 -11 -3) -11] [(60 -80 -60 18) -80] [(-53 74 65 9) -53] [(83 -23 -33 -50) -50] [(51 -22 8 94) -22] [(6 -58 -51 49) -58] [(63 87 -38 -27) -38] [(35 -49 88 -34) -49] [(36 -25 73 -25) -25] [(50 6 -65 -80) -80] [(65 -28 -83 13) -83] [(64 -32 50 9) -32] [(-79 62 -61 -71) -79] [(79 2 23 -55) -55] [(-40 -44 -73 83) -73] [(11 -29 72 -64) -64] [(72 -41 70 -62) -62] [(58 53 77 25) 25] [(24 77 -3 -91) -91] [(-74 -54 -27 28) -74] [(-60 46 3 31) -60] [(99 -87 -44 83) -87] [(-50 -58 40 -52) -58] [(77 2 30 -65) -65] [(-66 96 32 -21) -66] [(79 -79 29 -16) -79] [(36 -33 73 -87) -87])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[3 -20 3 3] -20]
Train Case:   6 | Input/Output: [[-37 -37 37 -37] -37]
Train Case:   7 | Input/Output: [[-97 -74 -74 -74] -97]
Train Case:   8 | Input/Output: [[-38 -38 -38 -45] -45]
Train Case:   9 | Input/Output: [[72 72 55 72] 55]
Train Case:  10 | Input/Output: [[84 -79 -79 -79] -79]
Train Case:  11 | Input/Output: [[53 53 53 85] 53]
Train Case:  12 | Input/Output: [[99 38 99 99] 38]
Train Case:  13 | Input/Output: [[61 -45 -45 -45] -45]
Train Case:  14 | Input/Output: [[-8 -55 -8 -8] -55]
Train Case:  15 | Input/Output: [(37 37 37 37) 37]
Train Case:  16 | Input/Output: [(43 43 43 43) 43]
Train Case:  17 | Input/Output: [(5 5 5 5) 5]
Train Case:  18 | Input/Output: [(-27 -27 -27 -27) -27]
Train Case:  19 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  20 | Input/Output: [(15 69 65 3) 3]
Train Case:  21 | Input/Output: [(11 93 65 17) 11]
Train Case:  22 | Input/Output: [(99 42 64 91) 42]
Train Case:  23 | Input/Output: [(80 60 2 86) 2]
Train Case:  24 | Input/Output: [(78 48 7 54) 7]
Train Case:  25 | Input/Output: [(97 62 66 14) 14]
Train Case:  26 | Input/Output: [(29 27 7 27) 7]
Train Case:  27 | Input/Output: [(34 53 64 5) 5]
Train Case:  28 | Input/Output: [(59 74 11 41) 11]
Train Case:  29 | Input/Output: [(56 6 74 68) 6]
Train Case:  30 | Input/Output: [(8 69 98 81) 8]
Train Case:  31 | Input/Output: [(12 29 97 15) 12]
Train Case:  32 | Input/Output: [(75 13 39 85) 13]
Train Case:  33 | Input/Output: [(84 38 26 100) 26]
Train Case:  34 | Input/Output: [(41 48 78 8) 8]
Train Case:  35 | Input/Output: [(2 86 38 0) 0]
Train Case:  36 | Input/Output: [(16 81 39 81) 16]
Train Case:  37 | Input/Output: [(39 61 41 57) 39]
Train Case:  38 | Input/Output: [(47 24 19 11) 11]
Train Case:  39 | Input/Output: [(97 100 5 93) 5]
Train Case:  40 | Input/Output: [(-67 78 57 -87) -87]
Train Case:  41 | Input/Output: [(72 -54 -11 12) -54]
Train Case:  42 | Input/Output: [(84 71 -61 83) -61]
Train Case:  43 | Input/Output: [(-24 -80 -58 45) -80]
Train Case:  44 | Input/Output: [(-36 -89 33 22) -89]
Train Case:  45 | Input/Output: [(-79 36 49 54) -79]
Train Case:  46 | Input/Output: [(-99 -36 -59 -41) -99]
Train Case:  47 | Input/Output: [(23 -42 73 21) -42]
Train Case:  48 | Input/Output: [(34 20 -93 -18) -93]
Train Case:  49 | Input/Output: [(-21 66 13 11) -21]
Train Case:  50 | Input/Output: [(-2 -88 64 9) -88]
Train Case:  51 | Input/Output: [(-98 -11 -53 37) -98]
Train Case:  52 | Input/Output: [(80 45 -14 72) -14]
Train Case:  53 | Input/Output: [(72 -16 -5 54) -16]
Train Case:  54 | Input/Output: [(-80 -47 69 -69) -80]
Train Case:  55 | Input/Output: [(-100 3 5 -27) -100]
Train Case:  56 | Input/Output: [(-21 62 98 42) -21]
Train Case:  57 | Input/Output: [(-7 42 -47 -25) -47]
Train Case:  58 | Input/Output: [(95 58 -20 95) -20]
Train Case:  59 | Input/Output: [(-100 -3 -59 98) -100]
Train Case:  60 | Input/Output: [(64 69 -89 33) -89]
Train Case:  61 | Input/Output: [(61 -55 0 -24) -55]
Train Case:  62 | Input/Output: [(-58 -1 20 97) -58]
Train Case:  63 | Input/Output: [(73 1 -65 -31) -65]
Train Case:  64 | Input/Output: [(-61 44 -5 48) -61]
Train Case:  65 | Input/Output: [(-17 -17 -82 -44) -82]
Train Case:  66 | Input/Output: [(-33 37 11 81) -33]
Train Case:  67 | Input/Output: [(62 52 58 26) 26]
Train Case:  68 | Input/Output: [(-18 33 60 -55) -55]
Train Case:  69 | Input/Output: [(-47 58 63 52) -47]
Train Case:  70 | Input/Output: [(-27 -24 -9 -78) -78]
Train Case:  71 | Input/Output: [(-88 -25 18 1) -88]
Train Case:  72 | Input/Output: [(57 -33 31 -89) -89]
Train Case:  73 | Input/Output: [(47 92 -11 -3) -11]
Train Case:  74 | Input/Output: [(60 -80 -60 18) -80]
Train Case:  75 | Input/Output: [(-53 74 65 9) -53]
Train Case:  76 | Input/Output: [(83 -23 -33 -50) -50]
Train Case:  77 | Input/Output: [(51 -22 8 94) -22]
Train Case:  78 | Input/Output: [(6 -58 -51 49) -58]
Train Case:  79 | Input/Output: [(63 87 -38 -27) -38]
Train Case:  80 | Input/Output: [(35 -49 88 -34) -49]
Train Case:  81 | Input/Output: [(36 -25 73 -25) -25]
Train Case:  82 | Input/Output: [(50 6 -65 -80) -80]
Train Case:  83 | Input/Output: [(65 -28 -83 13) -83]
Train Case:  84 | Input/Output: [(64 -32 50 9) -32]
Train Case:  85 | Input/Output: [(-79 62 -61 -71) -79]
Train Case:  86 | Input/Output: [(79 2 23 -55) -55]
Train Case:  87 | Input/Output: [(-40 -44 -73 83) -73]
Train Case:  88 | Input/Output: [(11 -29 72 -64) -64]
Train Case:  89 | Input/Output: [(72 -41 70 -62) -62]
Train Case:  90 | Input/Output: [(58 53 77 25) 25]
Train Case:  91 | Input/Output: [(24 77 -3 -91) -91]
Train Case:  92 | Input/Output: [(-74 -54 -27 28) -74]
Train Case:  93 | Input/Output: [(-60 46 3 31) -60]
Train Case:  94 | Input/Output: [(99 -87 -44 83) -87]
Train Case:  95 | Input/Output: [(-50 -58 40 -52) -58]
Train Case:  96 | Input/Output: [(77 2 30 -65) -65]
Train Case:  97 | Input/Output: [(-66 96 32 -21) -66]
Train Case:  98 | Input/Output: [(79 -79 29 -16) -79]
Train Case:  99 | Input/Output: [(36 -33 73 -87) -87]
Test Case:   0 | Input/Output: [[48 -18 48 48] -18]
Test Case:   1 | Input/Output: [[79 5 5 5] 5]
Test Case:   2 | Input/Output: [[67 -84 -84 -84] -84]
Test Case:   3 | Input/Output: [[-41 89 -41 -41] -41]
Test Case:   4 | Input/Output: [[38 38 38 92] 38]
Test Case:   5 | Input/Output: [[51 51 51 62] 51]
Test Case:   6 | Input/Output: [[-38 -38 -38 4] -38]
Test Case:   7 | Input/Output: [[-46 -46 -46 -96] -96]
Test Case:   8 | Input/Output: [[97 69 97 97] 69]
Test Case:   9 | Input/Output: [[-59 34 34 34] -59]
Test Case:  10 | Input/Output: [[-94 -56 -94 -94] -94]
Test Case:  11 | Input/Output: [[67 -89 -89 -89] -89]
Test Case:  12 | Input/Output: [[73 73 3 73] 3]
Test Case:  13 | Input/Output: [[49 49 49 70] 49]
Test Case:  14 | Input/Output: [[93 -59 93 93] -59]
Test Case:  15 | Input/Output: [[25 -27 -27 -27] -27]
Test Case:  16 | Input/Output: [[44 65 44 44] 44]
Test Case:  17 | Input/Output: [[-6 58 -6 -6] -6]
Test Case:  18 | Input/Output: [[-62 -62 -76 -62] -76]
Test Case:  19 | Input/Output: [[-65 -9 -9 -9] -65]
Test Case:  20 | Input/Output: [[48 48 48 67] 48]
Test Case:  21 | Input/Output: [[83 -56 83 83] -56]
Test Case:  22 | Input/Output: [[11 -74 11 11] -74]
Test Case:  23 | Input/Output: [[-79 43 -79 -79] -79]
Test Case:  24 | Input/Output: [[18 18 4 18] 4]
Test Case:  25 | Input/Output: [[63 92 92 92] 63]
Test Case:  26 | Input/Output: [[71 -39 -39 -39] -39]
Test Case:  27 | Input/Output: [[-80 72 72 72] -80]
Test Case:  28 | Input/Output: [[96 96 55 96] 55]
Test Case:  29 | Input/Output: [[-49 -12 -12 -12] -49]
Test Case:  30 | Input/Output: [[65 65 -54 65] -54]
Test Case:  31 | Input/Output: [[0 -100 -100 -100] -100]
Test Case:  32 | Input/Output: [[-62 70 -62 -62] -62]
Test Case:  33 | Input/Output: [[-30 -72 -30 -30] -72]
Test Case:  34 | Input/Output: [[-75 -4 -75 -75] -75]
Test Case:  35 | Input/Output: [[-2 -2 -13 -2] -13]
Test Case:  36 | Input/Output: [[77 -85 -85 -85] -85]
Test Case:  37 | Input/Output: [[-92 -92 -92 -92] -92]
Test Case:  38 | Input/Output: [[14 50 50 50] 14]
Test Case:  39 | Input/Output: [[-44 -44 71 -44] -44]
Test Case:  40 | Input/Output: [[10 24 10 10] 10]
Test Case:  41 | Input/Output: [[20 46 20 20] 20]
Test Case:  42 | Input/Output: [[-16 -16 0 -16] -16]
Test Case:  43 | Input/Output: [[-81 -81 -81 82] -81]
Test Case:  44 | Input/Output: [[-69 32 -69 -69] -69]
Test Case:  45 | Input/Output: [[50 -48 50 50] -48]
Test Case:  46 | Input/Output: [[56 59 56 56] 56]
Test Case:  47 | Input/Output: [[-81 -86 -86 -86] -86]
Test Case:  48 | Input/Output: [[-21 85 -21 -21] -21]
Test Case:  49 | Input/Output: [[-51 -51 -51 84] -51]
Test Case:  50 | Input/Output: [[-39 37 37 37] -39]
Test Case:  51 | Input/Output: [[-70 75 -70 -70] -70]
Test Case:  52 | Input/Output: [[-48 -48 -48 54] -48]
Test Case:  53 | Input/Output: [[-81 -77 -77 -77] -81]
Test Case:  54 | Input/Output: [[36 0 0 0] 0]
Test Case:  55 | Input/Output: [[66 -32 -32 -32] -32]
Test Case:  56 | Input/Output: [[-46 -65 -46 -46] -65]
Test Case:  57 | Input/Output: [[-98 -98 -98 -61] -98]
Test Case:  58 | Input/Output: [[70 70 70 -74] -74]
Test Case:  59 | Input/Output: [[87 -69 87 87] -69]
Test Case:  60 | Input/Output: [[20 20 13 20] 13]
Test Case:  61 | Input/Output: [[-50 39 39 39] -50]
Test Case:  62 | Input/Output: [[-81 -81 -81 -56] -81]
Test Case:  63 | Input/Output: [[4 -53 4 4] -53]
Test Case:  64 | Input/Output: [[-52 -52 -89 -52] -89]
Test Case:  65 | Input/Output: [[-44 45 45 45] -44]
Test Case:  66 | Input/Output: [[88 40 88 88] 40]
Test Case:  67 | Input/Output: [[-88 -33 -33 -33] -88]
Test Case:  68 | Input/Output: [[-62 -62 -62 62] -62]
Test Case:  69 | Input/Output: [[89 -99 89 89] -99]
Test Case:  70 | Input/Output: [[13 13 -72 13] -72]
Test Case:  71 | Input/Output: [[-7 41 41 41] -7]
Test Case:  72 | Input/Output: [[94 -100 -100 -100] -100]
Test Case:  73 | Input/Output: [[21 21 99 21] 21]
Test Case:  74 | Input/Output: [[17 56 56 56] 17]
Test Case:  75 | Input/Output: [[55 55 -43 55] -43]
Test Case:  76 | Input/Output: [[-24 -19 -19 -19] -24]
Test Case:  77 | Input/Output: [[-32 -32 33 -32] -32]
Test Case:  78 | Input/Output: [[-14 -14 -14 -99] -99]
Test Case:  79 | Input/Output: [[-53 -53 -53 28] -53]
Test Case:  80 | Input/Output: [[-82 -84 -84 -84] -84]
Test Case:  81 | Input/Output: [[77 77 77 -26] -26]
Test Case:  82 | Input/Output: [[-100 -76 -76 -76] -100]
Test Case:  83 | Input/Output: [[26 26 26 11] 11]
Test Case:  84 | Input/Output: [[-27 -21 -21 -21] -27]
Test Case:  85 | Input/Output: [[-29 -21 -21 -21] -29]
Test Case:  86 | Input/Output: [[-96 -96 -96 29] -96]
Test Case:  87 | Input/Output: [[-46 -46 -46 51] -46]
Test Case:  88 | Input/Output: [[-47 -47 -77 -47] -77]
Test Case:  89 | Input/Output: [[-22 -2 -22 -22] -22]
Test Case:  90 | Input/Output: [[95 95 36 95] 36]
Test Case:  91 | Input/Output: [[43 -82 -82 -82] -82]
Test Case:  92 | Input/Output: [[-11 -11 56 -11] -11]
Test Case:  93 | Input/Output: [[94 94 94 13] 13]
Test Case:  94 | Input/Output: [[44 44 44 -98] -98]
Test Case:  95 | Input/Output: [[-55 -55 -62 -55] -62]
Test Case:  96 | Input/Output: [[-31 -31 -31 69] -31]
Test Case:  97 | Input/Output: [[47 31 47 47] 31]
Test Case:  98 | Input/Output: [[97 97 -45 97] -45]
Test Case:  99 | Input/Output: [[1 1 1 -84] -84]
Test Case: 100 | Input/Output: [(52 52 52 52) 52]
Test Case: 101 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 102 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 103 | Input/Output: [(15 15 15 15) 15]
Test Case: 104 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 105 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 106 | Input/Output: [(36 36 36 36) 36]
Test Case: 107 | Input/Output: [(96 96 96 96) 96]
Test Case: 108 | Input/Output: [(81 81 81 81) 81]
Test Case: 109 | Input/Output: [(73 73 73 73) 73]
Test Case: 110 | Input/Output: [(46 46 46 46) 46]
Test Case: 111 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 112 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 113 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 114 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 115 | Input/Output: [(17 17 17 17) 17]
Test Case: 116 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 117 | Input/Output: [(17 17 17 17) 17]
Test Case: 118 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 119 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 120 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 121 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 122 | Input/Output: [(46 46 46 46) 46]
Test Case: 123 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 124 | Input/Output: [(57 57 57 57) 57]
Test Case: 125 | Input/Output: [(27 27 27 27) 27]
Test Case: 126 | Input/Output: [(28 28 28 28) 28]
Test Case: 127 | Input/Output: [(3 3 3 3) 3]
Test Case: 128 | Input/Output: [(17 17 17 17) 17]
Test Case: 129 | Input/Output: [(18 18 18 18) 18]
Test Case: 130 | Input/Output: [(9 9 9 9) 9]
Test Case: 131 | Input/Output: [(46 46 46 46) 46]
Test Case: 132 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 133 | Input/Output: [(61 61 61 61) 61]
Test Case: 134 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 135 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 136 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 137 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 138 | Input/Output: [(89 89 89 89) 89]
Test Case: 139 | Input/Output: [(96 96 96 96) 96]
Test Case: 140 | Input/Output: [(98 98 98 98) 98]
Test Case: 141 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 142 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 143 | Input/Output: [(16 16 16 16) 16]
Test Case: 144 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 145 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 146 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 147 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 148 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 149 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 150 | Input/Output: [(89 89 89 89) 89]
Test Case: 151 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 152 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 153 | Input/Output: [(92 92 92 92) 92]
Test Case: 154 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 155 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 156 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 157 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 158 | Input/Output: [(32 32 32 32) 32]
Test Case: 159 | Input/Output: [(44 44 44 44) 44]
Test Case: 160 | Input/Output: [(51 51 51 51) 51]
Test Case: 161 | Input/Output: [(28 28 28 28) 28]
Test Case: 162 | Input/Output: [(89 89 89 89) 89]
Test Case: 163 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 164 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 165 | Input/Output: [(87 87 87 87) 87]
Test Case: 166 | Input/Output: [(26 26 26 26) 26]
Test Case: 167 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 168 | Input/Output: [(18 18 18 18) 18]
Test Case: 169 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 170 | Input/Output: [(14 14 14 14) 14]
Test Case: 171 | Input/Output: [(86 86 86 86) 86]
Test Case: 172 | Input/Output: [(24 24 24 24) 24]
Test Case: 173 | Input/Output: [(43 43 43 43) 43]
Test Case: 174 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 175 | Input/Output: [(62 62 62 62) 62]
Test Case: 176 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 177 | Input/Output: [(41 41 41 41) 41]
Test Case: 178 | Input/Output: [(27 27 27 27) 27]
Test Case: 179 | Input/Output: [(55 55 55 55) 55]
Test Case: 180 | Input/Output: [(63 63 63 63) 63]
Test Case: 181 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 182 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 183 | Input/Output: [(54 54 54 54) 54]
Test Case: 184 | Input/Output: [(19 19 19 19) 19]
Test Case: 185 | Input/Output: [(81 81 81 81) 81]
Test Case: 186 | Input/Output: [(76 76 76 76) 76]
Test Case: 187 | Input/Output: [(74 74 74 74) 74]
Test Case: 188 | Input/Output: [(34 34 34 34) 34]
Test Case: 189 | Input/Output: [(91 91 91 91) 91]
Test Case: 190 | Input/Output: [(41 41 41 41) 41]
Test Case: 191 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 192 | Input/Output: [(21 21 21 21) 21]
Test Case: 193 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 194 | Input/Output: [(55 55 55 55) 55]
Test Case: 195 | Input/Output: [(53 53 53 53) 53]
Test Case: 196 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 197 | Input/Output: [(62 62 62 62) 62]
Test Case: 198 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 199 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 200 | Input/Output: [(79 37 12 26) 12]
Test Case: 201 | Input/Output: [(0 49 4 93) 0]
Test Case: 202 | Input/Output: [(85 33 28 83) 28]
Test Case: 203 | Input/Output: [(46 52 43 21) 21]
Test Case: 204 | Input/Output: [(33 18 63 92) 18]
Test Case: 205 | Input/Output: [(28 8 82 4) 4]
Test Case: 206 | Input/Output: [(60 42 12 91) 12]
Test Case: 207 | Input/Output: [(76 88 35 21) 21]
Test Case: 208 | Input/Output: [(58 23 29 88) 23]
Test Case: 209 | Input/Output: [(17 50 86 69) 17]
Test Case: 210 | Input/Output: [(80 27 93 86) 27]
Test Case: 211 | Input/Output: [(35 52 80 90) 35]
Test Case: 212 | Input/Output: [(81 73 75 2) 2]
Test Case: 213 | Input/Output: [(4 28 21 38) 4]
Test Case: 214 | Input/Output: [(53 82 39 22) 22]
Test Case: 215 | Input/Output: [(0 74 44 76) 0]
Test Case: 216 | Input/Output: [(53 41 48 20) 20]
Test Case: 217 | Input/Output: [(23 85 26 45) 23]
Test Case: 218 | Input/Output: [(39 52 11 54) 11]
Test Case: 219 | Input/Output: [(28 8 20 64) 8]
Test Case: 220 | Input/Output: [(12 62 47 55) 12]
Test Case: 221 | Input/Output: [(50 4 73 70) 4]
Test Case: 222 | Input/Output: [(82 0 49 27) 0]
Test Case: 223 | Input/Output: [(73 55 45 69) 45]
Test Case: 224 | Input/Output: [(95 67 85 55) 55]
Test Case: 225 | Input/Output: [(62 0 12 37) 0]
Test Case: 226 | Input/Output: [(8 33 24 97) 8]
Test Case: 227 | Input/Output: [(48 4 20 14) 4]
Test Case: 228 | Input/Output: [(69 91 86 10) 10]
Test Case: 229 | Input/Output: [(63 77 54 53) 53]
Test Case: 230 | Input/Output: [(36 54 61 63) 36]
Test Case: 231 | Input/Output: [(15 44 29 3) 3]
Test Case: 232 | Input/Output: [(12 43 91 44) 12]
Test Case: 233 | Input/Output: [(37 70 86 10) 10]
Test Case: 234 | Input/Output: [(90 91 62 64) 62]
Test Case: 235 | Input/Output: [(77 83 53 46) 46]
Test Case: 236 | Input/Output: [(98 45 21 81) 21]
Test Case: 237 | Input/Output: [(99 21 94 13) 13]
Test Case: 238 | Input/Output: [(60 29 14 69) 14]
Test Case: 239 | Input/Output: [(38 27 29 54) 27]
Test Case: 240 | Input/Output: [(79 59 22 52) 22]
Test Case: 241 | Input/Output: [(4 47 94 52) 4]
Test Case: 242 | Input/Output: [(89 0 67 38) 0]
Test Case: 243 | Input/Output: [(66 8 25 59) 8]
Test Case: 244 | Input/Output: [(73 83 77 62) 62]
Test Case: 245 | Input/Output: [(26 10 30 28) 10]
Test Case: 246 | Input/Output: [(54 78 12 22) 12]
Test Case: 247 | Input/Output: [(18 75 8 21) 8]
Test Case: 248 | Input/Output: [(32 94 64 18) 18]
Test Case: 249 | Input/Output: [(20 77 87 28) 20]
Test Case: 250 | Input/Output: [(81 91 93 64) 64]
Test Case: 251 | Input/Output: [(79 28 54 28) 28]
Test Case: 252 | Input/Output: [(8 1 84 74) 1]
Test Case: 253 | Input/Output: [(100 63 73 74) 63]
Test Case: 254 | Input/Output: [(5 83 55 27) 5]
Test Case: 255 | Input/Output: [(55 96 60 76) 55]
Test Case: 256 | Input/Output: [(81 38 86 27) 27]
Test Case: 257 | Input/Output: [(22 77 78 15) 15]
Test Case: 258 | Input/Output: [(24 30 70 47) 24]
Test Case: 259 | Input/Output: [(37 70 48 88) 37]
Test Case: 260 | Input/Output: [(34 61 36 3) 3]
Test Case: 261 | Input/Output: [(85 60 68 91) 60]
Test Case: 262 | Input/Output: [(45 46 73 81) 45]
Test Case: 263 | Input/Output: [(45 87 36 56) 36]
Test Case: 264 | Input/Output: [(94 22 97 89) 22]
Test Case: 265 | Input/Output: [(90 28 52 25) 25]
Test Case: 266 | Input/Output: [(41 23 65 28) 23]
Test Case: 267 | Input/Output: [(73 28 9 12) 9]
Test Case: 268 | Input/Output: [(14 13 80 97) 13]
Test Case: 269 | Input/Output: [(76 87 62 22) 22]
Test Case: 270 | Input/Output: [(97 34 85 0) 0]
Test Case: 271 | Input/Output: [(15 23 99 6) 6]
Test Case: 272 | Input/Output: [(79 8 24 2) 2]
Test Case: 273 | Input/Output: [(32 0 92 48) 0]
Test Case: 274 | Input/Output: [(2 71 100 45) 2]
Test Case: 275 | Input/Output: [(56 26 57 29) 26]
Test Case: 276 | Input/Output: [(67 96 96 42) 42]
Test Case: 277 | Input/Output: [(77 0 72 38) 0]
Test Case: 278 | Input/Output: [(61 37 40 91) 37]
Test Case: 279 | Input/Output: [(49 87 34 77) 34]
Test Case: 280 | Input/Output: [(100 18 28 100) 18]
Test Case: 281 | Input/Output: [(22 17 37 70) 17]
Test Case: 282 | Input/Output: [(83 60 2 63) 2]
Test Case: 283 | Input/Output: [(83 93 98 41) 41]
Test Case: 284 | Input/Output: [(69 53 31 61) 31]
Test Case: 285 | Input/Output: [(46 45 16 28) 16]
Test Case: 286 | Input/Output: [(76 95 99 82) 76]
Test Case: 287 | Input/Output: [(74 40 8 76) 8]
Test Case: 288 | Input/Output: [(21 4 90 40) 4]
Test Case: 289 | Input/Output: [(77 54 98 43) 43]
Test Case: 290 | Input/Output: [(9 48 28 86) 9]
Test Case: 291 | Input/Output: [(0 46 57 22) 0]
Test Case: 292 | Input/Output: [(11 29 73 58) 11]
Test Case: 293 | Input/Output: [(70 43 52 86) 43]
Test Case: 294 | Input/Output: [(42 5 83 48) 5]
Test Case: 295 | Input/Output: [(18 75 67 1) 1]
Test Case: 296 | Input/Output: [(76 22 81 63) 22]
Test Case: 297 | Input/Output: [(85 33 78 74) 33]
Test Case: 298 | Input/Output: [(96 96 75 13) 13]
Test Case: 299 | Input/Output: [(4 28 81 30) 4]
Test Case: 300 | Input/Output: [(88 1 18 95) 1]
Test Case: 301 | Input/Output: [(58 8 89 6) 6]
Test Case: 302 | Input/Output: [(2 47 55 95) 2]
Test Case: 303 | Input/Output: [(12 41 51 44) 12]
Test Case: 304 | Input/Output: [(100 39 50 84) 39]
Test Case: 305 | Input/Output: [(8 27 50 100) 8]
Test Case: 306 | Input/Output: [(61 24 81 25) 24]
Test Case: 307 | Input/Output: [(94 89 70 99) 70]
Test Case: 308 | Input/Output: [(19 64 98 15) 15]
Test Case: 309 | Input/Output: [(21 50 14 38) 14]
Test Case: 310 | Input/Output: [(51 45 86 69) 45]
Test Case: 311 | Input/Output: [(54 80 15 43) 15]
Test Case: 312 | Input/Output: [(50 47 64 93) 47]
Test Case: 313 | Input/Output: [(71 74 63 45) 45]
Test Case: 314 | Input/Output: [(81 35 55 35) 35]
Test Case: 315 | Input/Output: [(6 47 51 87) 6]
Test Case: 316 | Input/Output: [(65 25 78 43) 25]
Test Case: 317 | Input/Output: [(21 55 27 79) 21]
Test Case: 318 | Input/Output: [(32 14 42 54) 14]
Test Case: 319 | Input/Output: [(46 96 11 19) 11]
Test Case: 320 | Input/Output: [(60 67 21 32) 21]
Test Case: 321 | Input/Output: [(62 28 92 56) 28]
Test Case: 322 | Input/Output: [(95 41 67 94) 41]
Test Case: 323 | Input/Output: [(80 12 82 27) 12]
Test Case: 324 | Input/Output: [(75 53 85 80) 53]
Test Case: 325 | Input/Output: [(13 99 56 3) 3]
Test Case: 326 | Input/Output: [(95 81 32 28) 28]
Test Case: 327 | Input/Output: [(11 65 23 28) 11]
Test Case: 328 | Input/Output: [(61 36 88 57) 36]
Test Case: 329 | Input/Output: [(5 11 26 4) 4]
Test Case: 330 | Input/Output: [(17 9 65 90) 9]
Test Case: 331 | Input/Output: [(23 9 85 73) 9]
Test Case: 332 | Input/Output: [(37 93 49 63) 37]
Test Case: 333 | Input/Output: [(10 20 98 84) 10]
Test Case: 334 | Input/Output: [(95 41 41 6) 6]
Test Case: 335 | Input/Output: [(51 74 25 49) 25]
Test Case: 336 | Input/Output: [(62 53 31 80) 31]
Test Case: 337 | Input/Output: [(46 7 79 78) 7]
Test Case: 338 | Input/Output: [(10 82 65 36) 10]
Test Case: 339 | Input/Output: [(97 29 28 44) 28]
Test Case: 340 | Input/Output: [(85 90 15 21) 15]
Test Case: 341 | Input/Output: [(44 58 20 50) 20]
Test Case: 342 | Input/Output: [(90 15 47 13) 13]
Test Case: 343 | Input/Output: [(63 85 68 82) 63]
Test Case: 344 | Input/Output: [(85 9 66 78) 9]
Test Case: 345 | Input/Output: [(4 30 54 57) 4]
Test Case: 346 | Input/Output: [(35 26 73 98) 26]
Test Case: 347 | Input/Output: [(51 16 42 27) 16]
Test Case: 348 | Input/Output: [(18 15 55 19) 15]
Test Case: 349 | Input/Output: [(75 8 30 14) 8]
Test Case: 350 | Input/Output: [(95 59 65 13) 13]
Test Case: 351 | Input/Output: [(13 23 92 47) 13]
Test Case: 352 | Input/Output: [(10 31 39 3) 3]
Test Case: 353 | Input/Output: [(50 85 7 0) 0]
Test Case: 354 | Input/Output: [(35 99 70 7) 7]
Test Case: 355 | Input/Output: [(5 47 78 7) 5]
Test Case: 356 | Input/Output: [(71 43 0 82) 0]
Test Case: 357 | Input/Output: [(74 5 41 61) 5]
Test Case: 358 | Input/Output: [(0 91 74 0) 0]
Test Case: 359 | Input/Output: [(16 79 85 89) 16]
Test Case: 360 | Input/Output: [(83 63 12 17) 12]
Test Case: 361 | Input/Output: [(36 49 76 70) 36]
Test Case: 362 | Input/Output: [(76 29 88 80) 29]
Test Case: 363 | Input/Output: [(98 23 96 23) 23]
Test Case: 364 | Input/Output: [(81 80 94 67) 67]
Test Case: 365 | Input/Output: [(87 6 18 35) 6]
Test Case: 366 | Input/Output: [(100 96 58 4) 4]
Test Case: 367 | Input/Output: [(37 63 51 83) 37]
Test Case: 368 | Input/Output: [(100 61 67 95) 61]
Test Case: 369 | Input/Output: [(64 13 52 86) 13]
Test Case: 370 | Input/Output: [(2 4 62 27) 2]
Test Case: 371 | Input/Output: [(74 36 28 72) 28]
Test Case: 372 | Input/Output: [(60 95 97 72) 60]
Test Case: 373 | Input/Output: [(52 36 48 36) 36]
Test Case: 374 | Input/Output: [(10 33 98 61) 10]
Test Case: 375 | Input/Output: [(53 34 28 31) 28]
Test Case: 376 | Input/Output: [(42 82 12 47) 12]
Test Case: 377 | Input/Output: [(59 14 36 42) 14]
Test Case: 378 | Input/Output: [(70 58 65 82) 58]
Test Case: 379 | Input/Output: [(1 50 74 0) 0]
Test Case: 380 | Input/Output: [(63 30 43 89) 30]
Test Case: 381 | Input/Output: [(58 95 13 76) 13]
Test Case: 382 | Input/Output: [(43 72 89 85) 43]
Test Case: 383 | Input/Output: [(93 75 66 33) 33]
Test Case: 384 | Input/Output: [(12 95 20 65) 12]
Test Case: 385 | Input/Output: [(75 81 59 96) 59]
Test Case: 386 | Input/Output: [(92 53 76 89) 53]
Test Case: 387 | Input/Output: [(33 81 20 53) 20]
Test Case: 388 | Input/Output: [(38 44 10 14) 10]
Test Case: 389 | Input/Output: [(45 9 96 58) 9]
Test Case: 390 | Input/Output: [(76 70 0 49) 0]
Test Case: 391 | Input/Output: [(63 12 69 5) 5]
Test Case: 392 | Input/Output: [(5 64 21 87) 5]
Test Case: 393 | Input/Output: [(41 60 96 36) 36]
Test Case: 394 | Input/Output: [(49 57 90 16) 16]
Test Case: 395 | Input/Output: [(62 59 35 15) 15]
Test Case: 396 | Input/Output: [(85 13 44 99) 13]
Test Case: 397 | Input/Output: [(89 35 75 3) 3]
Test Case: 398 | Input/Output: [(10 81 76 28) 10]
Test Case: 399 | Input/Output: [(7 34 92 57) 7]
Test Case: 400 | Input/Output: [(-81 40 22 -57) -81]
Test Case: 401 | Input/Output: [(39 -89 41 -71) -89]
Test Case: 402 | Input/Output: [(45 -60 -18 -55) -60]
Test Case: 403 | Input/Output: [(1 -18 -68 48) -68]
Test Case: 404 | Input/Output: [(-62 -31 89 -44) -62]
Test Case: 405 | Input/Output: [(-39 -1 -21 41) -39]
Test Case: 406 | Input/Output: [(98 40 -82 -85) -85]
Test Case: 407 | Input/Output: [(-50 -57 40 -40) -57]
Test Case: 408 | Input/Output: [(29 23 76 41) 23]
Test Case: 409 | Input/Output: [(60 -34 -19 22) -34]
Test Case: 410 | Input/Output: [(-65 62 -9 30) -65]
Test Case: 411 | Input/Output: [(12 -20 53 80) -20]
Test Case: 412 | Input/Output: [(18 -86 57 98) -86]
Test Case: 413 | Input/Output: [(47 -35 -73 72) -73]
Test Case: 414 | Input/Output: [(-26 51 66 -28) -28]
Test Case: 415 | Input/Output: [(-94 -13 19 59) -94]
Test Case: 416 | Input/Output: [(10 -41 62 61) -41]
Test Case: 417 | Input/Output: [(-34 33 -91 -97) -97]
Test Case: 418 | Input/Output: [(23 1 -3 31) -3]
Test Case: 419 | Input/Output: [(72 -11 2 -61) -61]
Test Case: 420 | Input/Output: [(11 99 94 46) 11]
Test Case: 421 | Input/Output: [(-63 -33 66 37) -63]
Test Case: 422 | Input/Output: [(72 -53 3 9) -53]
Test Case: 423 | Input/Output: [(60 -11 -29 -43) -43]
Test Case: 424 | Input/Output: [(-25 -46 -45 -27) -46]
Test Case: 425 | Input/Output: [(-90 -44 -90 10) -90]
Test Case: 426 | Input/Output: [(-71 -55 94 28) -71]
Test Case: 427 | Input/Output: [(-47 -77 73 -79) -79]
Test Case: 428 | Input/Output: [(46 -24 39 97) -24]
Test Case: 429 | Input/Output: [(68 55 68 -1) -1]
Test Case: 430 | Input/Output: [(49 -31 -55 -89) -89]
Test Case: 431 | Input/Output: [(-67 -39 88 30) -67]
Test Case: 432 | Input/Output: [(-27 15 -32 40) -32]
Test Case: 433 | Input/Output: [(-35 -81 -99 75) -99]
Test Case: 434 | Input/Output: [(25 97 11 54) 11]
Test Case: 435 | Input/Output: [(-10 64 22 52) -10]
Test Case: 436 | Input/Output: [(12 -42 -21 80) -42]
Test Case: 437 | Input/Output: [(57 -6 -44 53) -44]
Test Case: 438 | Input/Output: [(-5 -67 -74 61) -74]
Test Case: 439 | Input/Output: [(-15 -19 -71 75) -71]
Test Case: 440 | Input/Output: [(-67 -71 -17 1) -71]
Test Case: 441 | Input/Output: [(69 15 -40 26) -40]
Test Case: 442 | Input/Output: [(-18 -94 -55 -66) -94]
Test Case: 443 | Input/Output: [(-80 87 -94 -25) -94]
Test Case: 444 | Input/Output: [(-19 44 -51 53) -51]
Test Case: 445 | Input/Output: [(55 67 61 64) 55]
Test Case: 446 | Input/Output: [(78 30 -13 52) -13]
Test Case: 447 | Input/Output: [(88 41 -60 -56) -60]
Test Case: 448 | Input/Output: [(-75 -77 -55 76) -77]
Test Case: 449 | Input/Output: [(91 11 -57 96) -57]
Test Case: 450 | Input/Output: [(-14 66 -88 53) -88]
Test Case: 451 | Input/Output: [(-37 64 -60 20) -60]
Test Case: 452 | Input/Output: [(-18 -88 -26 33) -88]
Test Case: 453 | Input/Output: [(-80 -83 90 12) -83]
Test Case: 454 | Input/Output: [(27 -68 -68 71) -68]
Test Case: 455 | Input/Output: [(-95 13 97 -55) -95]
Test Case: 456 | Input/Output: [(-63 -6 -50 -83) -83]
Test Case: 457 | Input/Output: [(40 -83 -84 -54) -84]
Test Case: 458 | Input/Output: [(24 -6 88 -78) -78]
Test Case: 459 | Input/Output: [(7 89 72 52) 7]
Test Case: 460 | Input/Output: [(14 -59 -35 -10) -59]
Test Case: 461 | Input/Output: [(75 -79 -45 80) -79]
Test Case: 462 | Input/Output: [(38 -40 8 78) -40]
Test Case: 463 | Input/Output: [(66 53 92 -35) -35]
Test Case: 464 | Input/Output: [(65 59 26 27) 26]
Test Case: 465 | Input/Output: [(24 -52 13 35) -52]
Test Case: 466 | Input/Output: [(94 -74 -2 10) -74]
Test Case: 467 | Input/Output: [(61 61 42 31) 31]
Test Case: 468 | Input/Output: [(78 -73 -7 16) -73]
Test Case: 469 | Input/Output: [(31 -56 100 -50) -56]
Test Case: 470 | Input/Output: [(-90 89 96 -90) -90]
Test Case: 471 | Input/Output: [(-49 -81 61 58) -81]
Test Case: 472 | Input/Output: [(67 -56 -57 -56) -57]
Test Case: 473 | Input/Output: [(-40 -87 -26 49) -87]
Test Case: 474 | Input/Output: [(-97 97 -18 -24) -97]
Test Case: 475 | Input/Output: [(34 -89 17 -65) -89]
Test Case: 476 | Input/Output: [(-15 39 -79 -23) -79]
Test Case: 477 | Input/Output: [(51 -75 100 29) -75]
Test Case: 478 | Input/Output: [(92 100 67 74) 67]
Test Case: 479 | Input/Output: [(68 -14 3 83) -14]
Test Case: 480 | Input/Output: [(-50 -56 96 -61) -61]
Test Case: 481 | Input/Output: [(-69 71 -97 -91) -97]
Test Case: 482 | Input/Output: [(33 -30 59 57) -30]
Test Case: 483 | Input/Output: [(-58 -2 71 -60) -60]
Test Case: 484 | Input/Output: [(-96 36 74 -64) -96]
Test Case: 485 | Input/Output: [(-51 -93 -94 78) -94]
Test Case: 486 | Input/Output: [(66 -2 21 -45) -45]
Test Case: 487 | Input/Output: [(-87 -59 31 79) -87]
Test Case: 488 | Input/Output: [(53 97 -49 -75) -75]
Test Case: 489 | Input/Output: [(84 97 -28 -71) -71]
Test Case: 490 | Input/Output: [(77 86 86 -3) -3]
Test Case: 491 | Input/Output: [(-25 -52 -49 19) -52]
Test Case: 492 | Input/Output: [(90 28 86 -36) -36]
Test Case: 493 | Input/Output: [(-4 77 47 31) -4]
Test Case: 494 | Input/Output: [(94 -23 34 -96) -96]
Test Case: 495 | Input/Output: [(88 63 9 -74) -74]
Test Case: 496 | Input/Output: [(-61 -5 -47 47) -61]
Test Case: 497 | Input/Output: [(-66 -49 26 47) -66]
Test Case: 498 | Input/Output: [(-37 25 31 -77) -77]
Test Case: 499 | Input/Output: [(-31 -68 91 60) -68]
Test Case: 500 | Input/Output: [(58 -64 19 12) -64]
Test Case: 501 | Input/Output: [(7 -11 -84 -38) -84]
Test Case: 502 | Input/Output: [(-16 -92 25 -20) -92]
Test Case: 503 | Input/Output: [(94 -80 10 79) -80]
Test Case: 504 | Input/Output: [(-12 43 -10 76) -12]
Test Case: 505 | Input/Output: [(-11 60 -28 -21) -28]
Test Case: 506 | Input/Output: [(-58 39 83 -40) -58]
Test Case: 507 | Input/Output: [(98 51 -34 0) -34]
Test Case: 508 | Input/Output: [(3 -25 94 -42) -42]
Test Case: 509 | Input/Output: [(66 76 -86 -61) -86]
Test Case: 510 | Input/Output: [(33 -94 -42 -36) -94]
Test Case: 511 | Input/Output: [(-45 -46 -56 43) -56]
Test Case: 512 | Input/Output: [(-76 73 11 -88) -88]
Test Case: 513 | Input/Output: [(-94 -36 -56 -36) -94]
Test Case: 514 | Input/Output: [(-42 -35 -94 -20) -94]
Test Case: 515 | Input/Output: [(-54 86 -21 -95) -95]
Test Case: 516 | Input/Output: [(-15 67 56 -67) -67]
Test Case: 517 | Input/Output: [(96 74 -99 39) -99]
Test Case: 518 | Input/Output: [(22 40 71 31) 22]
Test Case: 519 | Input/Output: [(-70 40 -4 -12) -70]
Test Case: 520 | Input/Output: [(-53 -76 0 -52) -76]
Test Case: 521 | Input/Output: [(0 29 -40 -52) -52]
Test Case: 522 | Input/Output: [(-72 12 -62 -52) -72]
Test Case: 523 | Input/Output: [(-22 99 -94 -1) -94]
Test Case: 524 | Input/Output: [(92 -9 92 -19) -19]
Test Case: 525 | Input/Output: [(-97 -7 75 39) -97]
Test Case: 526 | Input/Output: [(-39 67 51 98) -39]
Test Case: 527 | Input/Output: [(-56 56 -70 -99) -99]
Test Case: 528 | Input/Output: [(72 77 79 -95) -95]
Test Case: 529 | Input/Output: [(95 32 15 -65) -65]
Test Case: 530 | Input/Output: [(58 -73 48 100) -73]
Test Case: 531 | Input/Output: [(65 -54 -92 -70) -92]
Test Case: 532 | Input/Output: [(-34 -62 -40 -22) -62]
Test Case: 533 | Input/Output: [(-65 -31 84 -48) -65]
Test Case: 534 | Input/Output: [(47 21 47 -78) -78]
Test Case: 535 | Input/Output: [(-95 -89 78 -94) -95]
Test Case: 536 | Input/Output: [(-29 -18 -55 71) -55]
Test Case: 537 | Input/Output: [(-59 -32 82 -31) -59]
Test Case: 538 | Input/Output: [(-54 -71 85 56) -71]
Test Case: 539 | Input/Output: [(-25 -16 -20 65) -25]
Test Case: 540 | Input/Output: [(68 53 -6 78) -6]
Test Case: 541 | Input/Output: [(-54 62 90 99) -54]
Test Case: 542 | Input/Output: [(-35 -59 77 62) -59]
Test Case: 543 | Input/Output: [(-28 -30 81 -63) -63]
Test Case: 544 | Input/Output: [(-55 60 -7 59) -55]
Test Case: 545 | Input/Output: [(62 11 37 -48) -48]
Test Case: 546 | Input/Output: [(-69 -64 -74 57) -74]
Test Case: 547 | Input/Output: [(82 -2 -20 82) -20]
Test Case: 548 | Input/Output: [(-2 67 67 92) -2]
Test Case: 549 | Input/Output: [(-73 43 -65 62) -73]
Test Case: 550 | Input/Output: [(44 74 7 27) 7]
Test Case: 551 | Input/Output: [(-61 -83 24 -67) -83]
Test Case: 552 | Input/Output: [(-96 67 -3 65) -96]
Test Case: 553 | Input/Output: [(53 -80 -97 16) -97]
Test Case: 554 | Input/Output: [(-95 -55 -89 -96) -96]
Test Case: 555 | Input/Output: [(58 44 49 14) 14]
Test Case: 556 | Input/Output: [(-44 14 -13 -36) -44]
Test Case: 557 | Input/Output: [(37 18 -8 -6) -8]
Test Case: 558 | Input/Output: [(-79 -71 65 -69) -79]
Test Case: 559 | Input/Output: [(-100 -18 13 -73) -100]
Test Case: 560 | Input/Output: [(44 98 26 -45) -45]
Test Case: 561 | Input/Output: [(-71 32 -94 -22) -94]
Test Case: 562 | Input/Output: [(100 65 -52 -67) -67]
Test Case: 563 | Input/Output: [(7 -93 77 99) -93]
Test Case: 564 | Input/Output: [(46 94 92 33) 33]
Test Case: 565 | Input/Output: [(15 -11 68 78) -11]
Test Case: 566 | Input/Output: [(-35 -82 -81 79) -82]
Test Case: 567 | Input/Output: [(-24 -74 -88 2) -88]
Test Case: 568 | Input/Output: [(27 26 -44 38) -44]
Test Case: 569 | Input/Output: [(-46 -57 -51 -52) -57]
Test Case: 570 | Input/Output: [(-83 3 -45 21) -83]
Test Case: 571 | Input/Output: [(-46 -90 76 -18) -90]
Test Case: 572 | Input/Output: [(91 65 52 -11) -11]
Test Case: 573 | Input/Output: [(95 38 92 -92) -92]
Test Case: 574 | Input/Output: [(-4 52 -50 -23) -50]
Test Case: 575 | Input/Output: [(-42 -43 -63 -76) -76]
Test Case: 576 | Input/Output: [(31 -23 71 -17) -23]
Test Case: 577 | Input/Output: [(-52 -86 63 70) -86]
Test Case: 578 | Input/Output: [(98 44 -11 57) -11]
Test Case: 579 | Input/Output: [(-38 -10 27 -23) -38]
Test Case: 580 | Input/Output: [(-28 88 -98 -77) -98]
Test Case: 581 | Input/Output: [(-82 -3 -55 62) -82]
Test Case: 582 | Input/Output: [(76 -65 10 50) -65]
Test Case: 583 | Input/Output: [(7 -33 42 94) -33]
Test Case: 584 | Input/Output: [(66 1 -30 -24) -30]
Test Case: 585 | Input/Output: [(61 -59 87 -51) -59]
Test Case: 586 | Input/Output: [(20 -49 26 -30) -49]
Test Case: 587 | Input/Output: [(-92 -5 -23 -10) -92]
Test Case: 588 | Input/Output: [(-85 -88 -93 39) -93]
Test Case: 589 | Input/Output: [(48 -81 14 -52) -81]
Test Case: 590 | Input/Output: [(85 80 -84 52) -84]
Test Case: 591 | Input/Output: [(62 78 -78 1) -78]
Test Case: 592 | Input/Output: [(98 78 16 88) 16]
Test Case: 593 | Input/Output: [(-30 39 -91 11) -91]
Test Case: 594 | Input/Output: [(-91 98 37 42) -91]
Test Case: 595 | Input/Output: [(-74 -100 -9 15) -100]
Test Case: 596 | Input/Output: [(-70 -62 64 -96) -96]
Test Case: 597 | Input/Output: [(59 41 20 26) 20]
Test Case: 598 | Input/Output: [(80 -12 48 24) -12]
Test Case: 599 | Input/Output: [(-75 39 63 -59) -75]
Test Case: 600 | Input/Output: [(62 -2 28 64) -2]
Test Case: 601 | Input/Output: [(-8 14 -34 32) -34]
Test Case: 602 | Input/Output: [(-23 65 -33 -24) -33]
Test Case: 603 | Input/Output: [(81 -73 -45 71) -73]
Test Case: 604 | Input/Output: [(-25 -35 -1 -58) -58]
Test Case: 605 | Input/Output: [(32 35 -95 -77) -95]
Test Case: 606 | Input/Output: [(-55 -65 -17 15) -65]
Test Case: 607 | Input/Output: [(8 -47 72 -77) -77]
Test Case: 608 | Input/Output: [(-71 63 2 -1) -71]
Test Case: 609 | Input/Output: [(-100 49 84 -91) -100]
Test Case: 610 | Input/Output: [(-28 36 -100 -16) -100]
Test Case: 611 | Input/Output: [(-45 -44 65 18) -45]
Test Case: 612 | Input/Output: [(7 -2 -10 -14) -14]
Test Case: 613 | Input/Output: [(-56 -9 14 79) -56]
Test Case: 614 | Input/Output: [(49 -41 -89 -50) -89]
Test Case: 615 | Input/Output: [(-82 34 26 -72) -82]
Test Case: 616 | Input/Output: [(-15 -27 -35 -81) -81]
Test Case: 617 | Input/Output: [(59 11 -80 -6) -80]
Test Case: 618 | Input/Output: [(-74 0 -11 -93) -93]
Test Case: 619 | Input/Output: [(41 -96 -43 -29) -96]
Test Case: 620 | Input/Output: [(-91 -67 79 14) -91]
Test Case: 621 | Input/Output: [(-72 25 20 56) -72]
Test Case: 622 | Input/Output: [(41 80 77 14) 14]
Test Case: 623 | Input/Output: [(-71 -66 -35 -41) -71]
Test Case: 624 | Input/Output: [(-76 8 1 -39) -76]
Test Case: 625 | Input/Output: [(57 18 -57 74) -57]
Test Case: 626 | Input/Output: [(-46 -40 -11 68) -46]
Test Case: 627 | Input/Output: [(-69 80 -88 85) -88]
Test Case: 628 | Input/Output: [(56 -38 -27 44) -38]
Test Case: 629 | Input/Output: [(-44 -9 -47 -39) -47]
Test Case: 630 | Input/Output: [(86 47 -32 -17) -32]
Test Case: 631 | Input/Output: [(-85 -27 -66 89) -85]
Test Case: 632 | Input/Output: [(-41 83 42 -27) -41]
Test Case: 633 | Input/Output: [(78 -8 -15 11) -15]
Test Case: 634 | Input/Output: [(-68 47 36 15) -68]
Test Case: 635 | Input/Output: [(24 42 75 -42) -42]
Test Case: 636 | Input/Output: [(37 -43 10 54) -43]
Test Case: 637 | Input/Output: [(-18 -11 -49 -89) -89]
Test Case: 638 | Input/Output: [(98 16 69 -33) -33]
Test Case: 639 | Input/Output: [(-93 43 -82 -30) -93]
Test Case: 640 | Input/Output: [(-27 -60 89 -20) -60]
Test Case: 641 | Input/Output: [(-60 26 34 23) -60]
Test Case: 642 | Input/Output: [(-84 92 -68 -49) -84]
Test Case: 643 | Input/Output: [(-95 -67 -8 -22) -95]
Test Case: 644 | Input/Output: [(35 59 -14 -3) -14]
Test Case: 645 | Input/Output: [(65 79 -57 -45) -57]
Test Case: 646 | Input/Output: [(-86 92 -41 -21) -86]
Test Case: 647 | Input/Output: [(55 -57 45 18) -57]
Test Case: 648 | Input/Output: [(-58 0 -41 -10) -58]
Test Case: 649 | Input/Output: [(-17 -99 -18 46) -99]
Test Case: 650 | Input/Output: [(-84 61 35 -16) -84]
Test Case: 651 | Input/Output: [(-44 38 39 -72) -72]
Test Case: 652 | Input/Output: [(-89 69 -94 -20) -94]
Test Case: 653 | Input/Output: [(47 -57 -42 44) -57]
Test Case: 654 | Input/Output: [(57 -21 12 86) -21]
Test Case: 655 | Input/Output: [(-75 -42 32 18) -75]
Test Case: 656 | Input/Output: [(-46 42 -76 -45) -76]
Test Case: 657 | Input/Output: [(-15 -30 29 -67) -67]
Test Case: 658 | Input/Output: [(47 86 60 44) 44]
Test Case: 659 | Input/Output: [(-70 58 -40 52) -70]
Test Case: 660 | Input/Output: [(-90 -41 -89 -45) -90]
Test Case: 661 | Input/Output: [(6 12 16 62) 6]
Test Case: 662 | Input/Output: [(-20 95 -40 47) -40]
Test Case: 663 | Input/Output: [(77 -49 62 100) -49]
Test Case: 664 | Input/Output: [(-5 -29 -77 -59) -77]
Test Case: 665 | Input/Output: [(-55 -47 37 -72) -72]
Test Case: 666 | Input/Output: [(-4 -16 99 6) -16]
Test Case: 667 | Input/Output: [(-6 -53 -95 -8) -95]
Test Case: 668 | Input/Output: [(59 31 -51 -99) -99]
Test Case: 669 | Input/Output: [(6 -42 75 72) -42]
Test Case: 670 | Input/Output: [(91 -81 -73 -93) -93]
Test Case: 671 | Input/Output: [(6 15 16 -4) -4]
Test Case: 672 | Input/Output: [(-83 45 -66 -32) -83]
Test Case: 673 | Input/Output: [(-43 77 56 -89) -89]
Test Case: 674 | Input/Output: [(29 -62 0 0) -62]
Test Case: 675 | Input/Output: [(-84 -15 -33 12) -84]
Test Case: 676 | Input/Output: [(20 76 -36 61) -36]
Test Case: 677 | Input/Output: [(39 31 -99 71) -99]
Test Case: 678 | Input/Output: [(-93 -57 98 -90) -93]
Test Case: 679 | Input/Output: [(84 -66 -83 -68) -83]
Test Case: 680 | Input/Output: [(55 -81 -71 -97) -97]
Test Case: 681 | Input/Output: [(73 79 -95 1) -95]
Test Case: 682 | Input/Output: [(14 53 -74 73) -74]
Test Case: 683 | Input/Output: [(-9 -1 93 7) -9]
Test Case: 684 | Input/Output: [(-52 -77 47 59) -77]
Test Case: 685 | Input/Output: [(5 96 71 64) 5]
Test Case: 686 | Input/Output: [(54 -33 34 39) -33]
Test Case: 687 | Input/Output: [(-7 6 6 49) -7]
Test Case: 688 | Input/Output: [(-67 84 77 -94) -94]
Test Case: 689 | Input/Output: [(33 -52 27 -57) -57]
Test Case: 690 | Input/Output: [(-13 -44 97 -43) -44]
Test Case: 691 | Input/Output: [(55 51 -54 -92) -92]
Test Case: 692 | Input/Output: [(79 56 -82 -75) -82]
Test Case: 693 | Input/Output: [(99 -42 -8 -41) -42]
Test Case: 694 | Input/Output: [(-52 -51 90 10) -52]
Test Case: 695 | Input/Output: [(24 28 57 -53) -53]
Test Case: 696 | Input/Output: [(67 -4 -73 98) -73]
Test Case: 697 | Input/Output: [(-84 93 -61 69) -84]
Test Case: 698 | Input/Output: [(29 -19 -20 -72) -72]
Test Case: 699 | Input/Output: [(-40 -25 49 95) -40]
Test Case: 700 | Input/Output: [(-14 18 -35 -56) -56]
Test Case: 701 | Input/Output: [(-12 -86 -17 -83) -86]
Test Case: 702 | Input/Output: [(-50 -51 -64 -5) -64]
Test Case: 703 | Input/Output: [(48 9 32 39) 9]
Test Case: 704 | Input/Output: [(75 -29 66 -37) -37]
Test Case: 705 | Input/Output: [(-80 -93 -46 86) -93]
Test Case: 706 | Input/Output: [(43 50 48 76) 43]
Test Case: 707 | Input/Output: [(74 89 24 -98) -98]
Test Case: 708 | Input/Output: [(16 60 37 72) 16]
Test Case: 709 | Input/Output: [(7 18 29 -76) -76]
Test Case: 710 | Input/Output: [(96 2 75 64) 2]
Test Case: 711 | Input/Output: [(99 -64 74 10) -64]
Test Case: 712 | Input/Output: [(91 65 99 -21) -21]
Test Case: 713 | Input/Output: [(65 79 -52 -9) -52]
Test Case: 714 | Input/Output: [(6 16 -53 -77) -77]
Test Case: 715 | Input/Output: [(-6 -92 26 32) -92]
Test Case: 716 | Input/Output: [(-3 30 -98 -82) -98]
Test Case: 717 | Input/Output: [(49 -35 91 -76) -76]
Test Case: 718 | Input/Output: [(91 -71 51 -15) -71]
Test Case: 719 | Input/Output: [(-55 -66 21 47) -66]
Test Case: 720 | Input/Output: [(-85 -6 -48 10) -85]
Test Case: 721 | Input/Output: [(39 93 62 -22) -22]
Test Case: 722 | Input/Output: [(-31 -3 -39 95) -39]
Test Case: 723 | Input/Output: [(-13 13 -79 6) -79]
Test Case: 724 | Input/Output: [(54 -12 -57 -99) -99]
Test Case: 725 | Input/Output: [(-17 46 43 -49) -49]
Test Case: 726 | Input/Output: [(-88 -15 39 -3) -88]
Test Case: 727 | Input/Output: [(52 60 -70 38) -70]
Test Case: 728 | Input/Output: [(-46 91 8 92) -46]
Test Case: 729 | Input/Output: [(-88 -100 -37 -90) -100]
Test Case: 730 | Input/Output: [(-19 3 -47 -100) -100]
Test Case: 731 | Input/Output: [(63 71 12 -92) -92]
Test Case: 732 | Input/Output: [(78 -96 90 -69) -96]
Test Case: 733 | Input/Output: [(29 41 24 -34) -34]
Test Case: 734 | Input/Output: [(41 87 83 74) 41]
Test Case: 735 | Input/Output: [(49 63 19 66) 19]
Test Case: 736 | Input/Output: [(-81 3 -81 3) -81]
Test Case: 737 | Input/Output: [(-79 87 -20 -99) -99]
Test Case: 738 | Input/Output: [(-36 43 91 73) -36]
Test Case: 739 | Input/Output: [(-61 -42 49 8) -61]
Test Case: 740 | Input/Output: [(24 -62 66 2) -62]
Test Case: 741 | Input/Output: [(-27 -39 -53 82) -53]
Test Case: 742 | Input/Output: [(-10 -80 54 39) -80]
Test Case: 743 | Input/Output: [(4 18 -18 -50) -50]
Test Case: 744 | Input/Output: [(100 5 20 87) 5]
Test Case: 745 | Input/Output: [(-34 53 28 12) -34]
Test Case: 746 | Input/Output: [(0 -38 -36 33) -38]
Test Case: 747 | Input/Output: [(-55 7 28 -77) -77]
Test Case: 748 | Input/Output: [(1 99 -43 -96) -96]
Test Case: 749 | Input/Output: [(90 -72 -39 -93) -93]
Test Case: 750 | Input/Output: [(50 32 21 -21) -21]
Test Case: 751 | Input/Output: [(-54 16 -94 35) -94]
Test Case: 752 | Input/Output: [(-82 -92 12 28) -92]
Test Case: 753 | Input/Output: [(-77 86 -58 -74) -77]
Test Case: 754 | Input/Output: [(-79 -75 -73 8) -79]
Test Case: 755 | Input/Output: [(29 -61 -4 -26) -61]
Test Case: 756 | Input/Output: [(-58 -17 -32 -68) -68]
Test Case: 757 | Input/Output: [(-49 38 19 36) -49]
Test Case: 758 | Input/Output: [(0 -5 -85 -80) -85]
Test Case: 759 | Input/Output: [(-12 42 80 -11) -12]
Test Case: 760 | Input/Output: [(-58 -22 -56 12) -58]
Test Case: 761 | Input/Output: [(-38 25 63 -91) -91]
Test Case: 762 | Input/Output: [(94 82 77 -60) -60]
Test Case: 763 | Input/Output: [(70 7 -44 -76) -76]
Test Case: 764 | Input/Output: [(62 10 19 25) 10]
Test Case: 765 | Input/Output: [(-100 -64 -23 5) -100]
Test Case: 766 | Input/Output: [(-99 25 -56 -71) -99]
Test Case: 767 | Input/Output: [(-84 -1 -51 89) -84]
Test Case: 768 | Input/Output: [(-71 19 59 -64) -71]
Test Case: 769 | Input/Output: [(-78 60 29 -51) -78]
Test Case: 770 | Input/Output: [(71 68 -10 1) -10]
Test Case: 771 | Input/Output: [(-87 69 -99 97) -99]
Test Case: 772 | Input/Output: [(28 60 15 -12) -12]
Test Case: 773 | Input/Output: [(-53 45 -25 18) -53]
Test Case: 774 | Input/Output: [(22 -79 -95 37) -95]
Test Case: 775 | Input/Output: [(-79 -11 -95 -45) -95]
Test Case: 776 | Input/Output: [(-70 85 93 68) -70]
Test Case: 777 | Input/Output: [(94 58 10 64) 10]
Test Case: 778 | Input/Output: [(-48 -98 83 -43) -98]
Test Case: 779 | Input/Output: [(-73 -83 -64 -67) -83]
Test Case: 780 | Input/Output: [(-7 23 40 42) -7]
Test Case: 781 | Input/Output: [(7 -59 -14 -69) -69]
Test Case: 782 | Input/Output: [(-61 -8 97 -52) -61]
Test Case: 783 | Input/Output: [(-81 -94 1 79) -94]
Test Case: 784 | Input/Output: [(54 55 -87 -43) -87]
Test Case: 785 | Input/Output: [(79 68 -28 81) -28]
Test Case: 786 | Input/Output: [(-55 -10 -6 92) -55]
Test Case: 787 | Input/Output: [(2 71 84 -31) -31]
Test Case: 788 | Input/Output: [(-74 3 -63 99) -74]
Test Case: 789 | Input/Output: [(-61 46 -13 -12) -61]
Test Case: 790 | Input/Output: [(59 31 72 -98) -98]
Test Case: 791 | Input/Output: [(21 -16 81 -31) -31]
Test Case: 792 | Input/Output: [(-54 51 -34 -49) -54]
Test Case: 793 | Input/Output: [(-27 -20 -11 84) -27]
Test Case: 794 | Input/Output: [(63 -93 48 -41) -93]
Test Case: 795 | Input/Output: [(62 70 93 -79) -79]
Test Case: 796 | Input/Output: [(86 -80 0 -3) -80]
Test Case: 797 | Input/Output: [(-99 -48 2 12) -99]
Test Case: 798 | Input/Output: [(-42 -97 -65 -78) -97]
Test Case: 799 | Input/Output: [(-67 -99 -94 -47) -99]
Test Case: 800 | Input/Output: [(41 4 -40 -10) -40]
Test Case: 801 | Input/Output: [(-41 -14 -18 -19) -41]
Test Case: 802 | Input/Output: [(-45 89 91 10) -45]
Test Case: 803 | Input/Output: [(63 -27 -23 -26) -27]
Test Case: 804 | Input/Output: [(-19 15 63 -71) -71]
Test Case: 805 | Input/Output: [(22 54 -39 -46) -46]
Test Case: 806 | Input/Output: [(49 62 82 -80) -80]
Test Case: 807 | Input/Output: [(36 99 70 -45) -45]
Test Case: 808 | Input/Output: [(-5 97 -23 -68) -68]
Test Case: 809 | Input/Output: [(-38 -63 27 -3) -63]
Test Case: 810 | Input/Output: [(-16 -2 -71 72) -71]
Test Case: 811 | Input/Output: [(-72 10 70 29) -72]
Test Case: 812 | Input/Output: [(100 15 81 16) 15]
Test Case: 813 | Input/Output: [(-91 -99 -33 90) -99]
Test Case: 814 | Input/Output: [(83 -5 54 70) -5]
Test Case: 815 | Input/Output: [(29 36 -21 65) -21]
Test Case: 816 | Input/Output: [(-34 100 -24 -53) -53]
Test Case: 817 | Input/Output: [(-81 44 39 -33) -81]
Test Case: 818 | Input/Output: [(-23 28 -92 84) -92]
Test Case: 819 | Input/Output: [(67 -77 79 -92) -92]
Test Case: 820 | Input/Output: [(-46 46 62 -85) -85]
Test Case: 821 | Input/Output: [(-56 -10 -75 28) -75]
Test Case: 822 | Input/Output: [(-99 -92 -11 -97) -99]
Test Case: 823 | Input/Output: [(40 -89 73 91) -89]
Test Case: 824 | Input/Output: [(69 89 -27 -99) -99]
Test Case: 825 | Input/Output: [(78 -5 84 13) -5]
Test Case: 826 | Input/Output: [(10 -78 68 97) -78]
Test Case: 827 | Input/Output: [(-65 49 51 31) -65]
Test Case: 828 | Input/Output: [(-89 -9 -15 93) -89]
Test Case: 829 | Input/Output: [(-35 -6 96 16) -35]
Test Case: 830 | Input/Output: [(11 58 -43 -16) -43]
Test Case: 831 | Input/Output: [(5 -61 35 -40) -61]
Test Case: 832 | Input/Output: [(68 -70 19 -76) -76]
Test Case: 833 | Input/Output: [(3 40 83 95) 3]
Test Case: 834 | Input/Output: [(-87 84 -48 25) -87]
Test Case: 835 | Input/Output: [(-89 -99 38 -76) -99]
Test Case: 836 | Input/Output: [(45 95 -91 41) -91]
Test Case: 837 | Input/Output: [(19 16 -57 -67) -67]
Test Case: 838 | Input/Output: [(14 -40 44 -77) -77]
Test Case: 839 | Input/Output: [(-17 -42 73 -11) -42]
Test Case: 840 | Input/Output: [(66 -32 -12 62) -32]
Test Case: 841 | Input/Output: [(-35 -41 -65 14) -65]
Test Case: 842 | Input/Output: [(-26 -82 -94 -98) -98]
Test Case: 843 | Input/Output: [(95 80 -67 -13) -67]
Test Case: 844 | Input/Output: [(61 -17 50 -69) -69]
Test Case: 845 | Input/Output: [(-12 -97 40 -100) -100]
Test Case: 846 | Input/Output: [(-3 -21 -57 -51) -57]
Test Case: 847 | Input/Output: [(100 14 -72 -44) -72]
Test Case: 848 | Input/Output: [(94 -75 15 45) -75]
Test Case: 849 | Input/Output: [(-57 87 41 15) -57]
Test Case: 850 | Input/Output: [(-24 -90 -21 20) -90]
Test Case: 851 | Input/Output: [(-78 28 -2 -14) -78]
Test Case: 852 | Input/Output: [(77 -79 11 -88) -88]
Test Case: 853 | Input/Output: [(-62 -2 32 -94) -94]
Test Case: 854 | Input/Output: [(27 28 98 -62) -62]
Test Case: 855 | Input/Output: [(-27 -85 2 -52) -85]
Test Case: 856 | Input/Output: [(-81 36 -14 45) -81]
Test Case: 857 | Input/Output: [(100 21 77 12) 12]
Test Case: 858 | Input/Output: [(92 -66 -40 -21) -66]
Test Case: 859 | Input/Output: [(-58 59 -56 -44) -58]
Test Case: 860 | Input/Output: [(11 -29 96 3) -29]
Test Case: 861 | Input/Output: [(-57 -8 -17 -49) -57]
Test Case: 862 | Input/Output: [(98 54 85 2) 2]
Test Case: 863 | Input/Output: [(-72 -32 73 -26) -72]
Test Case: 864 | Input/Output: [(81 11 -69 -50) -69]
Test Case: 865 | Input/Output: [(14 94 -41 63) -41]
Test Case: 866 | Input/Output: [(83 -23 -38 -26) -38]
Test Case: 867 | Input/Output: [(-89 -50 -16 -94) -94]
Test Case: 868 | Input/Output: [(40 79 -69 31) -69]
Test Case: 869 | Input/Output: [(17 -17 -31 -60) -60]
Test Case: 870 | Input/Output: [(28 60 -31 -85) -85]
Test Case: 871 | Input/Output: [(-47 -59 -31 -49) -59]
Test Case: 872 | Input/Output: [(-5 24 81 -99) -99]
Test Case: 873 | Input/Output: [(63 26 -64 -78) -78]
Test Case: 874 | Input/Output: [(72 -91 85 33) -91]
Test Case: 875 | Input/Output: [(9 45 -15 28) -15]
Test Case: 876 | Input/Output: [(25 28 -82 -8) -82]
Test Case: 877 | Input/Output: [(75 65 12 -76) -76]
Test Case: 878 | Input/Output: [(7 3 47 -84) -84]
Test Case: 879 | Input/Output: [(8 -68 48 -30) -68]
Test Case: 880 | Input/Output: [(-3 -57 27 55) -57]
Test Case: 881 | Input/Output: [(23 -13 14 37) -13]
Test Case: 882 | Input/Output: [(29 13 100 -7) -7]
Test Case: 883 | Input/Output: [(-39 53 57 60) -39]
Test Case: 884 | Input/Output: [(-66 -87 -71 54) -87]
Test Case: 885 | Input/Output: [(-13 -90 -11 26) -90]
Test Case: 886 | Input/Output: [(16 37 -32 -15) -32]
Test Case: 887 | Input/Output: [(-32 -59 -65 -100) -100]
Test Case: 888 | Input/Output: [(-98 -81 70 -42) -98]
Test Case: 889 | Input/Output: [(-62 89 9 -71) -71]
Test Case: 890 | Input/Output: [(-78 20 16 4) -78]
Test Case: 891 | Input/Output: [(40 -90 74 -56) -90]
Test Case: 892 | Input/Output: [(-82 -67 -74 41) -82]
Test Case: 893 | Input/Output: [(-91 17 31 86) -91]
Test Case: 894 | Input/Output: [(45 -51 -99 -50) -99]
Test Case: 895 | Input/Output: [(-27 -13 -37 -54) -54]
Test Case: 896 | Input/Output: [(75 -18 31 43) -18]
Test Case: 897 | Input/Output: [(27 99 15 -98) -98]
Test Case: 898 | Input/Output: [(77 -96 -61 77) -96]
Test Case: 899 | Input/Output: [(60 56 -41 -78) -78]
Test Case: 900 | Input/Output: [(-43 -11 0 64) -43]
Test Case: 901 | Input/Output: [(-81 -58 -68 -89) -89]
Test Case: 902 | Input/Output: [(95 7 41 3) 3]
Test Case: 903 | Input/Output: [(-97 -9 -21 -69) -97]
Test Case: 904 | Input/Output: [(-55 -26 29 20) -55]
Test Case: 905 | Input/Output: [(6 -5 24 -70) -70]
Test Case: 906 | Input/Output: [(-13 -71 75 95) -71]
Test Case: 907 | Input/Output: [(-9 4 -84 -78) -84]
Test Case: 908 | Input/Output: [(-85 -80 -41 -78) -85]
Test Case: 909 | Input/Output: [(60 69 -27 -45) -45]
Test Case: 910 | Input/Output: [(-66 -53 -13 -54) -66]
Test Case: 911 | Input/Output: [(-46 -22 -94 -94) -94]
Test Case: 912 | Input/Output: [(-60 71 15 -82) -82]
Test Case: 913 | Input/Output: [(85 -8 48 67) -8]
Test Case: 914 | Input/Output: [(100 20 -91 -78) -91]
Test Case: 915 | Input/Output: [(-83 -67 63 99) -83]
Test Case: 916 | Input/Output: [(36 -64 -99 -5) -99]
Test Case: 917 | Input/Output: [(40 -86 25 84) -86]
Test Case: 918 | Input/Output: [(-35 16 41 12) -35]
Test Case: 919 | Input/Output: [(98 52 95 60) 52]
Test Case: 920 | Input/Output: [(73 -97 -23 38) -97]
Test Case: 921 | Input/Output: [(-55 -15 -5 -33) -55]
Test Case: 922 | Input/Output: [(88 -81 -76 46) -81]
Test Case: 923 | Input/Output: [(-74 35 -58 -73) -74]
Test Case: 924 | Input/Output: [(54 96 -60 11) -60]
Test Case: 925 | Input/Output: [(-77 -98 -32 26) -98]
Test Case: 926 | Input/Output: [(8 86 -80 85) -80]
Test Case: 927 | Input/Output: [(8 86 -14 81) -14]
Test Case: 928 | Input/Output: [(13 30 55 25) 13]
Test Case: 929 | Input/Output: [(-45 57 95 -84) -84]
Test Case: 930 | Input/Output: [(37 -62 96 -86) -86]
Test Case: 931 | Input/Output: [(32 11 38 -50) -50]
Test Case: 932 | Input/Output: [(-42 -81 15 -71) -81]
Test Case: 933 | Input/Output: [(-19 70 -87 -62) -87]
Test Case: 934 | Input/Output: [(-23 -63 -73 -68) -73]
Test Case: 935 | Input/Output: [(73 69 94 -53) -53]
Test Case: 936 | Input/Output: [(-60 -52 -82 15) -82]
Test Case: 937 | Input/Output: [(-38 -27 -8 -81) -81]
Test Case: 938 | Input/Output: [(45 80 33 -40) -40]
Test Case: 939 | Input/Output: [(78 100 -60 -29) -60]
Test Case: 940 | Input/Output: [(-23 -6 95 -58) -58]
Test Case: 941 | Input/Output: [(-79 86 34 70) -79]
Test Case: 942 | Input/Output: [(-35 -70 -2 64) -70]
Test Case: 943 | Input/Output: [(9 49 81 -11) -11]
Test Case: 944 | Input/Output: [(-47 81 6 70) -47]
Test Case: 945 | Input/Output: [(43 28 -92 4) -92]
Test Case: 946 | Input/Output: [(-82 8 12 -44) -82]
Test Case: 947 | Input/Output: [(-79 86 96 84) -79]
Test Case: 948 | Input/Output: [(69 14 45 -27) -27]
Test Case: 949 | Input/Output: [(18 -61 -35 26) -61]
Test Case: 950 | Input/Output: [(-2 -42 64 -67) -67]
Test Case: 951 | Input/Output: [(32 47 56 99) 32]
Test Case: 952 | Input/Output: [(-22 96 98 100) -22]
Test Case: 953 | Input/Output: [(73 -8 -40 46) -40]
Test Case: 954 | Input/Output: [(15 63 40 -72) -72]
Test Case: 955 | Input/Output: [(88 -41 74 -92) -92]
Test Case: 956 | Input/Output: [(47 -75 -44 80) -75]
Test Case: 957 | Input/Output: [(-50 37 -11 -59) -59]
Test Case: 958 | Input/Output: [(-60 -52 -22 -14) -60]
Test Case: 959 | Input/Output: [(95 -28 37 -46) -46]
Test Case: 960 | Input/Output: [(-33 -14 38 -100) -100]
Test Case: 961 | Input/Output: [(94 -95 52 -69) -95]
Test Case: 962 | Input/Output: [(51 10 -98 40) -98]
Test Case: 963 | Input/Output: [(-27 -41 -35 -23) -41]
Test Case: 964 | Input/Output: [(-60 -43 -67 -1) -67]
Test Case: 965 | Input/Output: [(66 -43 54 1) -43]
Test Case: 966 | Input/Output: [(-99 46 23 46) -99]
Test Case: 967 | Input/Output: [(54 99 12 -40) -40]
Test Case: 968 | Input/Output: [(38 68 -3 99) -3]
Test Case: 969 | Input/Output: [(44 22 15 -62) -62]
Test Case: 970 | Input/Output: [(-30 -76 76 -71) -76]
Test Case: 971 | Input/Output: [(-94 96 -100 -11) -100]
Test Case: 972 | Input/Output: [(-22 -77 100 -34) -77]
Test Case: 973 | Input/Output: [(-82 -85 94 -1) -85]
Test Case: 974 | Input/Output: [(-62 -44 48 -39) -62]
Test Case: 975 | Input/Output: [(-65 -90 -47 -78) -90]
Test Case: 976 | Input/Output: [(-15 -11 -12 -45) -45]
Test Case: 977 | Input/Output: [(-33 6 43 79) -33]
Test Case: 978 | Input/Output: [(-67 -56 -50 72) -67]
Test Case: 979 | Input/Output: [(6 -94 -80 -72) -94]
Test Case: 980 | Input/Output: [(78 90 -82 -75) -82]
Test Case: 981 | Input/Output: [(-21 57 -5 68) -21]
Test Case: 982 | Input/Output: [(-23 5 -54 -82) -82]
Test Case: 983 | Input/Output: [(-74 -84 65 -24) -84]
Test Case: 984 | Input/Output: [(62 93 -68 -68) -68]
Test Case: 985 | Input/Output: [(19 -52 98 99) -52]
Test Case: 986 | Input/Output: [(68 55 67 53) 53]
Test Case: 987 | Input/Output: [(28 -26 -32 -24) -32]
Test Case: 988 | Input/Output: [(7 -93 -30 -33) -93]
Test Case: 989 | Input/Output: [(-14 -90 22 100) -90]
Test Case: 990 | Input/Output: [(29 -25 -39 35) -39]
Test Case: 991 | Input/Output: [(74 -86 -40 100) -86]
Test Case: 992 | Input/Output: [(-46 -10 -65 84) -65]
Test Case: 993 | Input/Output: [(71 22 -94 -52) -94]
Test Case: 994 | Input/Output: [(33 100 61 37) 33]
Test Case: 995 | Input/Output: [(98 39 2 -18) -18]
Test Case: 996 | Input/Output: [(-57 -69 38 48) -69]
Test Case: 997 | Input/Output: [(42 -36 -50 30) -50]
Test Case: 998 | Input/Output: [(-37 -14 11 -51) -51]
Test Case: 999 | Input/Output: [(-76 -38 2 50) -76]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 78 30 33 35 -32 97 -94 126 -109 111 5 54 -112 -27 116 -7
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[3 -20 3 3] -20] [[-37 -37 37 -37] -37] [[-97 -74 -74 -74] -97] [[-38 -38 -38 -45] -45] [[72 72 55 72] 55] [[84 -79 -79 -79] -79] [[53 53 53 85] 53] [[99 38 99 99] 38] [[61 -45 -45 -45] -45] [[-8 -55 -8 -8] -55] [(37 37 37 37) 37] [(43 43 43 43) 43] [(5 5 5 5) 5] [(-27 -27 -27 -27) -27] [(-57 -57 -57 -57) -57] [(15 69 65 3) 3] [(11 93 65 17) 11] [(99 42 64 91) 42] [(80 60 2 86) 2] [(78 48 7 54) 7] [(97 62 66 14) 14] [(29 27 7 27) 7] [(34 53 64 5) 5] [(59 74 11 41) 11] [(56 6 74 68) 6] [(8 69 98 81) 8] [(12 29 97 15) 12] [(75 13 39 85) 13] [(84 38 26 100) 26] [(41 48 78 8) 8] [(2 86 38 0) 0] [(16 81 39 81) 16] [(39 61 41 57) 39] [(47 24 19 11) 11] [(97 100 5 93) 5] [(-67 78 57 -87) -87] [(72 -54 -11 12) -54] [(84 71 -61 83) -61] [(-24 -80 -58 45) -80] [(-36 -89 33 22) -89] [(-79 36 49 54) -79] [(-99 -36 -59 -41) -99] [(23 -42 73 21) -42] [(34 20 -93 -18) -93] [(-21 66 13 11) -21] [(-2 -88 64 9) -88] [(-98 -11 -53 37) -98] [(80 45 -14 72) -14] [(72 -16 -5 54) -16] [(-80 -47 69 -69) -80] [(-100 3 5 -27) -100] [(-21 62 98 42) -21] [(-7 42 -47 -25) -47] [(95 58 -20 95) -20] [(-100 -3 -59 98) -100] [(64 69 -89 33) -89] [(61 -55 0 -24) -55] [(-58 -1 20 97) -58] [(73 1 -65 -31) -65] [(-61 44 -5 48) -61] [(-17 -17 -82 -44) -82] [(-33 37 11 81) -33] [(62 52 58 26) 26] [(-18 33 60 -55) -55] [(-47 58 63 52) -47] [(-27 -24 -9 -78) -78] [(-88 -25 18 1) -88] [(57 -33 31 -89) -89] [(47 92 -11 -3) -11] [(60 -80 -60 18) -80] [(-53 74 65 9) -53] [(83 -23 -33 -50) -50] [(51 -22 8 94) -22] [(6 -58 -51 49) -58] [(63 87 -38 -27) -38] [(35 -49 88 -34) -49] [(36 -25 73 -25) -25] [(50 6 -65 -80) -80] [(65 -28 -83 13) -83] [(64 -32 50 9) -32] [(-79 62 -61 -71) -79] [(79 2 23 -55) -55] [(-40 -44 -73 83) -73] [(11 -29 72 -64) -64] [(72 -41 70 -62) -62] [(58 53 77 25) 25] [(24 77 -3 -91) -91] [(-74 -54 -27 28) -74] [(-60 46 3 31) -60] [(99 -87 -44 83) -87] [(-50 -58 40 -52) -58] [(77 2 30 -65) -65] [(-66 96 32 -21) -66] [(79 -79 29 -16) -79] [(36 -33 73 -87) -87])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: 84                 
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: 61                 
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_invert_first_then_and boolean_swap integer_yank print_integer exec_do*while () integer_gte exec_k (exec_rot (in3 integer_flush exec_eq boolean_and) (integer_div boolean_and exec_dup_times (integer_max)) (exec_do*times (boolean_dup integer_min integer_add exec_do*range (exec_dup_times ()) integer_yankdup in1 boolean_invert_second_then_and))) (exec_k () (in4) integer_sub in1 in4 integer_add) boolean_shove exec_empty boolean_xor boolean_dup_items exec_pop (integer_pop boolean_eq) integer_dec integer_eq in1 integer_max print_integer exec_rot (in2 in2 integer_stackdepth integer_gte integer_empty) (boolean_dup_items integer_eq boolean_xor) ())
Lexicase best errors: [1 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_invert_first_then_and boolean_swap integer_yank print_integer exec_do*while () integer_gte exec_k (exec_rot (in3 integer_flush exec_eq boolean_and) (integer_div boolean_and exec_dup_times (integer_max)) (exec_do*times (boolean_dup integer_min integer_add exec_do*range (exec_dup_times ()) integer_yankdup in1 boolean_invert_second_then_and))) (exec_k () (in4) integer_sub in1 in4 integer_add) boolean_shove exec_empty boolean_xor boolean_dup_items exec_pop (integer_pop boolean_eq) integer_dec integer_eq in1 integer_max print_integer exec_rot (in2 in2 integer_stackdepth integer_gte integer_empty) (boolean_dup_items integer_eq boolean_xor) ())
Zero cases best errors: [1 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 2 1 8 13 2 14 7 6)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (1 1 2 1 8 13 2 14 7 6)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_753} {:close 0, :instruction tag_integer_337} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod})
Best program: (boolean_swap exec_yank boolean_pop in1 boolean_pop exec_k_when_autoconstructing (exec_y_when_autoconstructing (exec_s (integer_mod print_integer exec_flush exec_swap (integer_max) (integer_div integer_dup_times exec_y_when_autoconstructing () integer_min boolean_empty integer_dup_times integer_lt boolean_xor integer_pop in3) boolean_and integer_lt integer_yank) (integer_min) (integer_stackdepth boolean_yank) exec_flush exec_when (exec_if () (integer_lt boolean_and) boolean_frominteger exec_stackdepth) boolean_yankdup)) (integer_empty exec_y (integer_dec exec_flush exec_while (tagged_753 tag_integer_337 boolean_xor integer_dec exec_k_when_autoconstructing (integer_dec exec_while (integer_mod)) ()))))
Errors: [1 1 1 1 0 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 68
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 9.945
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.998 0.999 0.992 0.987 0.998 0.986 0.993 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.77
Average program size in population (points): 70.014
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 460741
--- Timings ---
Current time: 1559593943812 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 31.3%
Fitness Testing:      1.6 seconds, 64.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: 84                 
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: 61                 
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 23                 
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: 72                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: 61                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: 57                 
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: 83                 
Correct output: -22                 | Program output: 51                 
Correct output: -58                 | Program output: 6                  
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: 35                 
Correct output: -25                 | Program output: 36                 
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: 65                 
Correct output: -32                 | Program output: 64                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 11                 
Correct output: -62                 | Program output: 72                 
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 99                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: 79                 
Correct output: -87                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_y_when_autoconstructing (integer_eq boolean_flush boolean_eq exec_dup_items boolean_swap boolean_eq exec_y_when_autoconstructing (exec_eq print_newline) integer_sub print_integer) print_integer integer_shove in1 integer_div print_integer boolean_dup_items print_integer exec_k (exec_rot (boolean_flush exec_s (boolean_empty integer_eq exec_s_when_autoconstructing () (boolean_xor integer_min) () exec_swap (exec_k_when_autoconstructing (exec_y_when_autoconstructing () boolean_shove integer_mod exec_when (exec_s () (exec_dup_items exec_y () exec_do*count (integer_fromboolean boolean_dup print_integer exec_rot (exec_k_when_autoconstructing (integer_add integer_dup_items) (integer_inc boolean_yankdup) integer_lte integer_add integer_eq integer_lt integer_sub integer_dup_times integer_rot) (in3 integer_dec exec_when (integer_dup) exec_while (integer_yank print_integer) exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_add exec_do*times (integer_empty) boolean_shove exec_k_when_autoconstructing () (exec_pop (exec_dup_times (in2 print_newline integer_empty exec_s_when_autoconstructing (exec_yankdup exec_s_when_autoconstructing (boolean_and integer_sub exec_rot (boolean_frominteger integer_add exec_do*while (exec_swap (integer_max) (integer_fromboolean boolean_shove integer_swap boolean_yank boolean_invert_second_then_and))) () ()) () ()) () ())))) ()) () ()) ())) ())) ()) ()) () ()) () ()) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 143
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_y_when_autoconstructing (integer_eq boolean_flush boolean_eq exec_dup_items boolean_swap boolean_eq exec_y_when_autoconstructing (exec_eq print_newline) integer_sub print_integer) print_integer integer_shove in1 integer_div print_integer boolean_dup_items print_integer exec_k (exec_rot (boolean_flush exec_s (boolean_empty integer_eq exec_s_when_autoconstructing () (boolean_xor integer_min) () exec_swap (exec_k_when_autoconstructing (exec_y_when_autoconstructing () boolean_shove integer_mod exec_when (exec_s () (exec_dup_items exec_y () exec_do*count (integer_fromboolean boolean_dup print_integer exec_rot (exec_k_when_autoconstructing (integer_add integer_dup_items) (integer_inc boolean_yankdup) integer_lte integer_add integer_eq integer_lt integer_sub integer_dup_times integer_rot) (in3 integer_dec exec_when (integer_dup) exec_while (integer_yank print_integer) exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_add exec_do*times (integer_empty) boolean_shove exec_k_when_autoconstructing () (exec_pop (exec_dup_times (in2 print_newline integer_empty exec_s_when_autoconstructing (exec_yankdup exec_s_when_autoconstructing (boolean_and integer_sub exec_rot (boolean_frominteger integer_add exec_do*while (exec_swap (integer_max) (integer_fromboolean boolean_shove integer_swap boolean_yank boolean_invert_second_then_and))) () ()) () ()) () ())))) ()) () ()) ())) ())) ()) ()) () ()) () ()) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 143
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (84 135 137 151 136 157 85 100 235 135)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (84 135 137 151 136 157 85 100 235 135)
Population mean number of perfect (error zero) cases: 1.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 2, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction -29} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_867} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 2, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc})
Best program: (integer_div boolean_pop integer_add integer_dec in2 boolean_stackdepth boolean_eq integer_pop boolean_shove integer_swap exec_while () exec_shove (-29 boolean_dup_times boolean_not integer_dup_times integer_empty exec_pop () integer_pop) exec_eq integer_dup_times integer_max exec_swap (exec_rot () (integer_inc exec_pop (exec_when () exec_rot () (integer_pop exec_swap () (exec_eq) boolean_pop integer_add) (boolean_frominteger exec_yankdup integer_dup_times integer_gt) exec_k_when_autoconstructing (boolean_shove integer_mod) (print_newline boolean_pop) exec_dup_times (boolean_or)) exec_do*times (integer_flush in4 in1 print_integer) boolean_not) (boolean_dup exec_shove (integer_gte exec_s (boolean_flush) (tagged_867 exec_yankdup) (exec_do*while (exec_when (boolean_flush boolean_swap exec_yank integer_dup integer_min) integer_gt boolean_frominteger print_integer exec_pop (integer_max exec_rot () (exec_while (integer_gte integer_dup boolean_dup boolean_shove boolean_not integer_div) integer_eq) () integer_eq) integer_inc exec_s_when_autoconstructing (exec_dup_times (boolean_invert_first_then_and integer_inc)) () ()))))) ())
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 84
Size: 119
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 8.645
Median total errors in population: 10
Error averages by case: (0.916 0.865 0.863 0.849 0.864 0.843 0.915 0.9 0.765 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.052
Average program size in population (points): 82.83
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1111411
--- Timings ---
Current time: 1559593946218 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         1.8 seconds, 38.5%
Fitness Testing:      2.3 seconds, 50.8%
Report:               0.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -23                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min integer_min integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in1) (in2 exec_do*times (print_integer integer_max integer_flush integer_sub exec_pop (boolean_dup)))) () ())
Lexicase best errors: [0 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min integer_min integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in1) (in2 exec_do*times (print_integer integer_max integer_flush integer_sub exec_pop (boolean_dup)))) () ())
Zero cases best errors: [0 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 570 138 256 83 138 138 255 256 256)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (83 570 138 256 83 138 138 255 256 256)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Best program: (integer_min integer_min integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in1) (in2 exec_do*times (print_integer integer_max integer_flush integer_sub exec_pop (boolean_dup)))) () ())
Errors: [0 0 1 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.827
Median total errors in population: 9
Error averages by case: (0.917 0.43 0.862 0.744 0.917 0.862 0.862 0.745 0.744 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.304
Average program size in population (points): 82.806
Average percent parens in population: 0.275
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1685464
--- Timings ---
Current time: 1559593948455 milliseconds
Total Time:           7.0 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.9 seconds, 41.6%
Fitness Testing:      2.9 seconds, 41.8%
Report:               1.0 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 80                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 97                 
Correct output: 7                   | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 59                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 75                 
Correct output: 26                  | Program output: 84                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 47                 
Correct output: 5                   | Program output: 97                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: 84                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: 80                 
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: 64                 
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 62                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -23                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: 63                 
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: 50                 
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 79                 
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: 24                 
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min integer_mod integer_min integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in1) (in2 exec_do*times (print_integer integer_max integer_flush exec_pop (boolean_dup)))) () ())
Lexicase best errors: [0 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min integer_mod integer_min integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in1) (in2 exec_do*times (print_integer integer_max integer_flush exec_pop (boolean_dup)))) () ())
Zero cases best errors: [0 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 5 219 638 415 222 168 733 312 313)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (417 5 219 638 415 222 168 733 312 313)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Best program: (integer_min integer_min integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in1) (in2 exec_do*times (print_integer integer_flush integer_sub exec_pop (boolean_dup)))) () ())
Errors: [0 1 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 6.558
Median total errors in population: 6
Error averages by case: (0.583 0.995 0.781 0.362 0.585 0.778 0.832 0.267 0.688 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.934
Average program size in population (points): 45.265
Average percent parens in population: 0.299
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.968
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.968
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2262529
--- Timings ---
Current time: 1559593950480 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.0 seconds, 43.7%
Fitness Testing:      3.4 seconds, 37.6%
Report:               1.6 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 65                 
Correct output: 11                  | Program output: 65                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 74                 
Correct output: 8                   | Program output: 98                 
Correct output: 12                  | Program output: 97                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 78                 
Correct output: 0                   | Program output: 38                 
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: 57                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: 5                  
Correct output: -21                 | Program output: 98                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 58                 
Correct output: -55                 | Program output: 60                 
Correct output: -47                 | Program output: 63                 
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 65                 
Correct output: -50                 | Program output: -23                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -65                
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -61                
Correct output: -55                 | Program output: 23                 
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 77                 
Correct output: -91                 | Program output: -3                 
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 30                 
Correct output: -66                 | Program output: 32                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y})
Lexicase best program: (integer_min in3 boolean_dup_times in3 boolean_yank boolean_and boolean_empty in2 exec_do*times (print_integer integer_max integer_flush exec_pop (exec_pop (exec_while (exec_s_when_autoconstructing (boolean_dup exec_y ()) () ())))))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y})
Zero cases best program: (integer_min in3 boolean_dup_times in3 boolean_yank boolean_and boolean_empty in2 exec_do*times (print_integer integer_max integer_flush exec_pop (exec_pop (exec_while (exec_s_when_autoconstructing (boolean_dup exec_y ()) () ())))))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 143 78 186 250 299 521 336 559 296)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (139 143 78 186 250 299 521 336 559 296)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Best program: (integer_min in3 integer_sub boolean_dup_times integer_div in3 exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (print_integer exec_if (integer_max integer_flush exec_pop (exec_pop (boolean_dup))) ())) ()) () ())
Errors: [0 1 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 31
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 7.193
Median total errors in population: 7
Error averages by case: (0.861 0.857 0.922 0.814 0.75 0.701 0.479 0.664 0.441 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.338
Average program size in population (points): 48.414
Average percent parens in population: 0.297
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2862078
--- Timings ---
Current time: 1559593952510 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.0 seconds, 45.3%
Fitness Testing:      3.9 seconds, 35.3%
Report:               2.0 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 538
Test mean error for best: 0.53800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -20                 | Program output: 3                  
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 85                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -8                 
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 86                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 27                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 41                 
Correct output: 6                   | Program output: 68                 
Correct output: 8                   | Program output: 81                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 85                 
Correct output: 26                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 81                 
Correct output: 39                  | Program output: 57                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 93                 
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: 12                 
Correct output: -61                 | Program output: 83                 
Correct output: -80                 | Program output: -24                
Correct output: -89                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: 21                 
Correct output: -93                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: 72                 
Correct output: -16                 | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: 95                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 33                 
Correct output: -55                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -3                 
Correct output: -80                 | Program output: 18                 
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: 94                 
Correct output: -58                 | Program output: 49                 
Correct output: -38                 | Program output: -27                
Correct output: -49                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 13                 
Correct output: -32                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 83                 
Correct output: -58                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -16                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min integer_min integer_mult integer_sub boolean_dup_times boolean_not exec_s_when_autoconstructing (boolean_yank boolean_and exec_dup_items exec_k_when_autoconstructing (in4 boolean_empty in1) (exec_do*times (print_integer integer_max integer_flush boolean_dup))) () ())
Lexicase best errors: [1 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min integer_min integer_mult integer_sub boolean_dup_times boolean_not exec_s_when_autoconstructing (boolean_yank boolean_and exec_dup_items exec_k_when_autoconstructing (in4 boolean_empty in1) (exec_do*times (print_integer integer_max integer_flush boolean_dup))) () ())
Zero cases best errors: [1 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (52 374 781 625 135 723 99 466 134 101)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (52 374 781 625 135 723 99 466 134 101)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup})
Best program: (integer_min integer_min integer_mult boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_dup_items in4 boolean_empty in1) (exec_do*times (print_integer integer_max integer_flush integer_sub boolean_dup)) ())
Errors: [1 1 0 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 22
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.51
Median total errors in population: 6
Error averages by case: (0.948 0.626 0.219 0.375 0.865 0.277 0.901 0.534 0.866 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.155
Average program size in population (points): 29.623
Average percent parens in population: 0.319
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.961
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.961
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3434463
--- Timings ---
Current time: 1559593954465 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.1 seconds, 46.5%
Fitness Testing:      4.4 seconds, 33.6%
Report:               2.5 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 501
Test mean error for best: 0.50100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 65                 
Correct output: 11                  | Program output: 65                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 74                 
Correct output: 8                   | Program output: 98                 
Correct output: 12                  | Program output: 97                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 78                 
Correct output: 0                   | Program output: 38                 
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: 57                 
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: 5                  
Correct output: -21                 | Program output: 98                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 58                 
Correct output: -55                 | Program output: 60                 
Correct output: -47                 | Program output: 63                 
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 65                 
Correct output: -50                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -61                
Correct output: -55                 | Program output: 23                 
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 77                 
Correct output: -91                 | Program output: -3                 
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 30                 
Correct output: -66                 | Program output: 32                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (exec_do*times (integer_max boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup))) ())) ()) () ())
Lexicase best errors: [1 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (exec_do*times (integer_max boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup))) ())) ()) () ())
Zero cases best errors: [1 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 258 346 332 494 20 257 19 771 118)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (504 258 346 332 494 20 257 19 771 118)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (exec_do*times (integer_max boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup))) ())) ()) () ())
Errors: [1 1 0 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.881
Median total errors in population: 6
Error averages by case: (0.496 0.742 0.654 0.668 0.506 0.98 0.743 0.981 0.229 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.781
Average program size in population (points): 28.404
Average percent parens in population: 0.266
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.991
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.991
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4171997
--- Timings ---
Current time: 1559593956520 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 47.1%
Fitness Testing:      5.0 seconds, 32.8%
Report:               2.9 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 334
Test mean error for best: 0.33400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 68                 
Correct output: 8                   | Program output: 81                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -41                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -11                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 42                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -44                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 52                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 9                  
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Lexicase best program: (in3 integer_sub in1 boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (exec_do*times (exec_yank) integer_max boolean_dup_times integer_flush boolean_rot) (exec_pop (boolean_or boolean_dup)))) ()) () ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Zero cases best program: (in3 integer_sub in1 boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (exec_do*times (exec_yank) integer_max boolean_dup_times integer_flush boolean_rot) (exec_pop (boolean_or boolean_dup)))) ()) () ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 368 301 320 196 218 318 272 375 785)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (346 368 301 320 196 218 318 272 375 785)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank in4 boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (integer_max boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup)) ())) ()) () ())
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.501
Median total errors in population: 6
Error averages by case: (0.654 0.632 0.699 0.68 0.804 0.782 0.682 0.728 0.625 0.215)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.679
Average program size in population (points): 30.57
Average percent parens in population: 0.287
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4961990
--- Timings ---
Current time: 1559593958592 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 47.5%
Fitness Testing:      5.6 seconds, 32.4%
Report:               3.4 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 335
Test mean error for best: 0.33500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 19                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 58                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -23                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -65                
Correct output: -83                 | Program output: -28                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: 23                 
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 58                 
Correct output: -91                 | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank in4 boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (integer_max boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup)) ())) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times exec_s_when_autoconstructing (boolean_yank in4 boolean_and exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (integer_max boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup)) ())) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 358 592 426 303 442 50 318 583 586)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (207 358 592 426 303 442 50 318 583 586)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Best program: (in3 integer_sub boolean_flush in1 boolean_dup_times exec_s_when_autoconstructing (boolean_yank boolean_and boolean_rot exec_k_when_autoconstructing (boolean_empty in2 exec_do*times (integer_min print_integer exec_if (exec_do*times (exec_yank) integer_max boolean_dup_times integer_flush boolean_rot) (exec_pop (boolean_dup)))) ()) () ())
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.135
Median total errors in population: 6
Error averages by case: (0.793 0.642 0.408 0.574 0.697 0.558 0.95 0.682 0.417 0.414)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.823
Average program size in population (points): 33.435
Average percent parens in population: 0.314
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.008
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5854623
--- Timings ---
Current time: 1559593960812 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.2 seconds, 47.6%
Fitness Testing:      6.3 seconds, 32.3%
Report:               3.8 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 36                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 42                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 52                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 9                  
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (integer_min in4 integer_min) (boolean_and exec_k_when_autoconstructing (in2 integer_min print_integer exec_if (boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup)) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 28
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (integer_min in4 integer_min) (boolean_and exec_k_when_autoconstructing (in2 integer_min print_integer exec_if (boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup)) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 28
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (792 675 305 353 236 303 338 340 262 343)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (792 675 305 353 236 303 338 340 262 343)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (integer_min in4 integer_min) (boolean_and exec_k_when_autoconstructing (in2 integer_min print_integer exec_if (boolean_dup_times integer_flush exec_pop (boolean_or boolean_dup)) ()) ()) ())
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.053
Median total errors in population: 5
Error averages by case: (0.208 0.325 0.695 0.647 0.764 0.697 0.662 0.66 0.738 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.559
Average program size in population (points): 34.463
Average percent parens in population: 0.314
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.009
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6682105
--- Timings ---
Current time: 1559593962648 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 47.6%
Fitness Testing:      6.9 seconds, 32.0%
Report:               4.3 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 36                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -69                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 42                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 52                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 9                  
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times in4 integer_min boolean_and exec_k_when_autoconstructing (in2 integer_min print_integer exec_if (boolean_dup_times exec_dup_items integer_flush boolean_shove) (exec_pop (boolean_or boolean_dup integer_dup_items))) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times in4 integer_min boolean_and exec_k_when_autoconstructing (in2 integer_min print_integer exec_if (boolean_dup_times exec_dup_items integer_flush boolean_shove) (exec_pop (boolean_or boolean_dup integer_dup_items))) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 459 378 391 328 284 625 394 388 410)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (382 459 378 391 328 284 625 394 388 410)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup})
Best program: (integer_div integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (integer_min in4 integer_min) (boolean_and exec_k_when_autoconstructing (in2 integer_min print_integer exec_if (boolean_dup_times integer_flush boolean_or boolean_dup) ()) ()) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 5.961
Median total errors in population: 6
Error averages by case: (0.618 0.541 0.622 0.609 0.672 0.716 0.375 0.606 0.612 0.59)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.007
Average program size in population (points): 35.088
Average percent parens in population: 0.314
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.01
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7261241
--- Timings ---
Current time: 1559593964358 milliseconds
Total Time:          23.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 48.6%
Fitness Testing:      7.3 seconds, 31.6%
Report:               4.5 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 177
Test mean error for best: 0.17700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 38                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 69                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -67                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -7                 
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -18                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -44                
Correct output: -64                 | Program output: -64                
Correct output: -62                 | Program output: -62                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times boolean_dup_times exec_yank boolean_eq exec_pop () in4 in1 boolean_yank exec_k_when_autoconstructing (boolean_and exec_k_when_autoconstructing () (exec_k_when_autoconstructing (boolean_empty in2 integer_rot) (exec_do*times (exec_empty integer_min print_integer exec_if (exec_do*times (integer_max boolean_dup_times integer_flush integer_shove exec_noop exec_dup ())) ())))) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_min boolean_invert_second_then_and in3 integer_sub boolean_dup_times boolean_dup_times exec_yank boolean_eq exec_pop () in4 in1 boolean_yank exec_k_when_autoconstructing (boolean_and exec_k_when_autoconstructing () (exec_k_when_autoconstructing (boolean_empty in2 integer_rot) (exec_do*times (exec_empty integer_min print_integer exec_if (exec_do*times (integer_max boolean_dup_times integer_flush integer_shove exec_noop exec_dup ())) ())))) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 80 276 282 476 265 502 289 567 484)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (478 80 276 282 476 265 502 289 567 484)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop})
Best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (boolean_xor) (boolean_eq in4 integer_min) (in1 exec_k_when_autoconstructing () (exec_do*times (boolean_empty in2 exec_stackdepth exec_yank integer_rot) exec_do*times (boolean_or exec_empty boolean_not integer_min print_integer integer_max boolean_dup_times integer_flush integer_pop integer_shove exec_noop exec_pop ()))))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.301
Median total errors in population: 6
Error averages by case: (0.522 0.92 0.724 0.718 0.524 0.735 0.498 0.711 0.433 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.613
Average program size in population (points): 35.582
Average percent parens in population: 0.281
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.01
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7979705
--- Timings ---
Current time: 1559593966492 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.4 seconds, 49.4%
Fitness Testing:      7.9 seconds, 31.6%
Report:               4.7 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 341
Test mean error for best: 0.34100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 68                 
Correct output: 8                   | Program output: 81                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 42                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 52                 
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 9                  
Correct output: -50                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (boolean_xor) (boolean_eq in4 integer_min) (in1 exec_k_when_autoconstructing () (exec_do*times (exec_eq) boolean_empty in2 integer_rot) exec_do*times (integer_swap exec_empty integer_min print_integer boolean_swap integer_max integer_flush exec_noop)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_min boolean_invert_second_then_and in3 boolean_dup_times exec_s_when_autoconstructing (boolean_xor) (boolean_eq in4 integer_min) (in1 exec_k_when_autoconstructing () (exec_do*times (exec_eq) boolean_empty in2 integer_rot) exec_do*times (integer_swap exec_empty integer_min print_integer boolean_swap integer_max integer_flush exec_noop)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (666 266 728 383 525 527 198 454 741 247)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (666 266 728 383 525 527 198 454 741 247)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup})
Best program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.265
Median total errors in population: 5
Error averages by case: (0.334 0.734 0.272 0.617 0.475 0.473 0.802 0.546 0.259 0.753)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.896
Average program size in population (points): 40.754
Average percent parens in population: 0.288
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.011
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8814794
--- Timings ---
Current time: 1559593968805 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 49.3%
Fitness Testing:      8.6 seconds, 31.4%
Report:               5.2 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 12
Successful program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 39


Auto-simplifying with starting size: 39
step: 0
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 500
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 1000
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 1500
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 2000
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 2500
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 3000
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 3500
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 4000
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 4500
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 5000
program: (boolean_invert_second_then_and in3 integer_max integer_sub integer_yankdup exec_s_when_autoconstructing (integer_inc in1 integer_min boolean_yank boolean_not boolean_and exec_k_when_autoconstructing () (in4 in3 boolean_empty in2 exec_do*times (boolean_dup integer_min print_integer exec_if (exec_stackdepth integer_max boolean_dup_times in1 integer_flush exec_pop (boolean_dup)) ()))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 341
Test mean error for best: 0.34100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -20                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -97                 | Program output: -74                
Correct output: -45                 | Program output: -38                
Correct output: 55                  | Program output: 55                 
Correct output: -79                 | Program output: -79                
Correct output: 53                  | Program output: 53                 
Correct output: 38                  | Program output: 99                 
Correct output: -45                 | Program output: -45                
Correct output: -55                 | Program output: -55                
Correct output: 37                  | Program output: 37                 
Correct output: 43                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 17                 
Correct output: 42                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 68                 
Correct output: 8                   | Program output: 81                 
Correct output: 12                  | Program output: 15                 
Correct output: 13                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 39                 
Correct output: 39                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: 49                 
Correct output: -99                 | Program output: -59                
Correct output: -42                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -21                 | Program output: 11                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: -16                 | Program output: -16                
Correct output: -80                 | Program output: -47                
Correct output: -100                | Program output: -27                
Correct output: -21                 | Program output: 42                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -58                 | Program output: -1                 
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -5                 
Correct output: -82                 | Program output: -82                
Correct output: -33                 | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: -55                 | Program output: -55                
Correct output: -47                 | Program output: 52                 
Correct output: -78                 | Program output: -24                
Correct output: -88                 | Program output: -25                
Correct output: -89                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: 9                  
Correct output: -50                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: -58                 | Program output: -58                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -25                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -29                
Correct output: -62                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -54                
Correct output: -60                 | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -21                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -33                
;;******************************
