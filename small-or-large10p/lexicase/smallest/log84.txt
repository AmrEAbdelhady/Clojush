Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-72 -72 -72 47] -72] [[8 -38 8 8] -38] [[88 88 88 69] 69] [[51 3 3 3] 3] [[44 44 -57 44] -57] [[-63 38 38 38] -63] [[4 4 4 -99] -99] [[-44 -44 -44 96] -44] [[-95 -95 -95 -79] -95] [[-65 -65 -65 -12] -65] [(-67 -67 -67 -67) -67] [(12 12 12 12) 12] [(55 55 55 55) 55] [(-20 -20 -20 -20) -20] [(-8 -8 -8 -8) -8] [(48 90 39 48) 39] [(34 0 80 48) 0] [(87 86 17 4) 4] [(4 8 10 61) 4] [(31 58 69 10) 10] [(33 100 77 19) 19] [(93 77 34 79) 34] [(45 40 21 40) 21] [(63 21 91 14) 14] [(33 48 74 82) 33] [(54 88 70 96) 54] [(4 35 28 96) 4] [(22 22 74 40) 22] [(4 76 98 39) 4] [(93 73 3 70) 3] [(65 83 68 42) 42] [(80 49 98 34) 34] [(53 73 74 56) 53] [(78 47 7 11) 7] [(94 88 78 47) 47] [(76 33 -76 -66) -76] [(-32 -18 -84 62) -84] [(37 -100 -96 11) -100] [(-2 67 15 26) -2] [(-49 2 -18 -72) -72] [(-8 38 80 62) -8] [(-52 -11 0 0) -52] [(26 26 10 70) 10] [(-44 -94 46 56) -94] [(-20 61 33 55) -20] [(-59 -39 100 -97) -97] [(7 91 42 49) 7] [(-93 50 29 46) -93] [(-69 81 -70 -25) -70] [(82 -79 92 -34) -79] [(44 -2 2 88) -2] [(-74 80 10 88) -74] [(21 -22 -69 48) -69] [(5 56 100 -57) -57] [(-26 -10 81 9) -26] [(-62 -10 -64 -56) -64] [(67 -20 -35 -29) -35] [(-18 47 -91 72) -91] [(84 62 33 -69) -69] [(85 21 -43 47) -43] [(39 -88 15 -16) -88] [(-10 24 69 -58) -58] [(18 21 21 -47) -47] [(-62 59 62 -45) -62] [(34 4 -24 -39) -39] [(88 -19 -37 45) -37] [(-60 -63 74 45) -63] [(8 27 -76 -81) -81] [(-29 -80 75 84) -80] [(81 -11 -59 -3) -59] [(40 2 -40 47) -40] [(-88 96 95 -35) -88] [(20 -36 14 -51) -51] [(-86 -37 -21 5) -86] [(3 -5 36 -21) -21] [(-84 49 -76 8) -84] [(42 27 99 -11) -11] [(47 42 84 -47) -47] [(-54 -49 63 -27) -54] [(1 26 -14 -65) -65] [(62 72 57 -77) -77] [(-74 -6 42 97) -74] [(-20 -97 -95 55) -97] [(-80 -25 -4 -94) -94] [(12 -15 2 81) -15] [(87 -91 38 -41) -91] [(36 -80 42 -67) -80] [(3 -89 -26 60) -89] [(8 -76 -92 -75) -92] [(17 56 35 -94) -94] [(-99 -68 -26 -72) -99] [(-25 -22 93 23) -25] [(76 -34 99 28) -34] [(-56 69 -97 -88) -97] [(22 -49 87 -30) -49])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-72 -72 -72 47] -72]
Train Case:   6 | Input/Output: [[8 -38 8 8] -38]
Train Case:   7 | Input/Output: [[88 88 88 69] 69]
Train Case:   8 | Input/Output: [[51 3 3 3] 3]
Train Case:   9 | Input/Output: [[44 44 -57 44] -57]
Train Case:  10 | Input/Output: [[-63 38 38 38] -63]
Train Case:  11 | Input/Output: [[4 4 4 -99] -99]
Train Case:  12 | Input/Output: [[-44 -44 -44 96] -44]
Train Case:  13 | Input/Output: [[-95 -95 -95 -79] -95]
Train Case:  14 | Input/Output: [[-65 -65 -65 -12] -65]
Train Case:  15 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  16 | Input/Output: [(12 12 12 12) 12]
Train Case:  17 | Input/Output: [(55 55 55 55) 55]
Train Case:  18 | Input/Output: [(-20 -20 -20 -20) -20]
Train Case:  19 | Input/Output: [(-8 -8 -8 -8) -8]
Train Case:  20 | Input/Output: [(48 90 39 48) 39]
Train Case:  21 | Input/Output: [(34 0 80 48) 0]
Train Case:  22 | Input/Output: [(87 86 17 4) 4]
Train Case:  23 | Input/Output: [(4 8 10 61) 4]
Train Case:  24 | Input/Output: [(31 58 69 10) 10]
Train Case:  25 | Input/Output: [(33 100 77 19) 19]
Train Case:  26 | Input/Output: [(93 77 34 79) 34]
Train Case:  27 | Input/Output: [(45 40 21 40) 21]
Train Case:  28 | Input/Output: [(63 21 91 14) 14]
Train Case:  29 | Input/Output: [(33 48 74 82) 33]
Train Case:  30 | Input/Output: [(54 88 70 96) 54]
Train Case:  31 | Input/Output: [(4 35 28 96) 4]
Train Case:  32 | Input/Output: [(22 22 74 40) 22]
Train Case:  33 | Input/Output: [(4 76 98 39) 4]
Train Case:  34 | Input/Output: [(93 73 3 70) 3]
Train Case:  35 | Input/Output: [(65 83 68 42) 42]
Train Case:  36 | Input/Output: [(80 49 98 34) 34]
Train Case:  37 | Input/Output: [(53 73 74 56) 53]
Train Case:  38 | Input/Output: [(78 47 7 11) 7]
Train Case:  39 | Input/Output: [(94 88 78 47) 47]
Train Case:  40 | Input/Output: [(76 33 -76 -66) -76]
Train Case:  41 | Input/Output: [(-32 -18 -84 62) -84]
Train Case:  42 | Input/Output: [(37 -100 -96 11) -100]
Train Case:  43 | Input/Output: [(-2 67 15 26) -2]
Train Case:  44 | Input/Output: [(-49 2 -18 -72) -72]
Train Case:  45 | Input/Output: [(-8 38 80 62) -8]
Train Case:  46 | Input/Output: [(-52 -11 0 0) -52]
Train Case:  47 | Input/Output: [(26 26 10 70) 10]
Train Case:  48 | Input/Output: [(-44 -94 46 56) -94]
Train Case:  49 | Input/Output: [(-20 61 33 55) -20]
Train Case:  50 | Input/Output: [(-59 -39 100 -97) -97]
Train Case:  51 | Input/Output: [(7 91 42 49) 7]
Train Case:  52 | Input/Output: [(-93 50 29 46) -93]
Train Case:  53 | Input/Output: [(-69 81 -70 -25) -70]
Train Case:  54 | Input/Output: [(82 -79 92 -34) -79]
Train Case:  55 | Input/Output: [(44 -2 2 88) -2]
Train Case:  56 | Input/Output: [(-74 80 10 88) -74]
Train Case:  57 | Input/Output: [(21 -22 -69 48) -69]
Train Case:  58 | Input/Output: [(5 56 100 -57) -57]
Train Case:  59 | Input/Output: [(-26 -10 81 9) -26]
Train Case:  60 | Input/Output: [(-62 -10 -64 -56) -64]
Train Case:  61 | Input/Output: [(67 -20 -35 -29) -35]
Train Case:  62 | Input/Output: [(-18 47 -91 72) -91]
Train Case:  63 | Input/Output: [(84 62 33 -69) -69]
Train Case:  64 | Input/Output: [(85 21 -43 47) -43]
Train Case:  65 | Input/Output: [(39 -88 15 -16) -88]
Train Case:  66 | Input/Output: [(-10 24 69 -58) -58]
Train Case:  67 | Input/Output: [(18 21 21 -47) -47]
Train Case:  68 | Input/Output: [(-62 59 62 -45) -62]
Train Case:  69 | Input/Output: [(34 4 -24 -39) -39]
Train Case:  70 | Input/Output: [(88 -19 -37 45) -37]
Train Case:  71 | Input/Output: [(-60 -63 74 45) -63]
Train Case:  72 | Input/Output: [(8 27 -76 -81) -81]
Train Case:  73 | Input/Output: [(-29 -80 75 84) -80]
Train Case:  74 | Input/Output: [(81 -11 -59 -3) -59]
Train Case:  75 | Input/Output: [(40 2 -40 47) -40]
Train Case:  76 | Input/Output: [(-88 96 95 -35) -88]
Train Case:  77 | Input/Output: [(20 -36 14 -51) -51]
Train Case:  78 | Input/Output: [(-86 -37 -21 5) -86]
Train Case:  79 | Input/Output: [(3 -5 36 -21) -21]
Train Case:  80 | Input/Output: [(-84 49 -76 8) -84]
Train Case:  81 | Input/Output: [(42 27 99 -11) -11]
Train Case:  82 | Input/Output: [(47 42 84 -47) -47]
Train Case:  83 | Input/Output: [(-54 -49 63 -27) -54]
Train Case:  84 | Input/Output: [(1 26 -14 -65) -65]
Train Case:  85 | Input/Output: [(62 72 57 -77) -77]
Train Case:  86 | Input/Output: [(-74 -6 42 97) -74]
Train Case:  87 | Input/Output: [(-20 -97 -95 55) -97]
Train Case:  88 | Input/Output: [(-80 -25 -4 -94) -94]
Train Case:  89 | Input/Output: [(12 -15 2 81) -15]
Train Case:  90 | Input/Output: [(87 -91 38 -41) -91]
Train Case:  91 | Input/Output: [(36 -80 42 -67) -80]
Train Case:  92 | Input/Output: [(3 -89 -26 60) -89]
Train Case:  93 | Input/Output: [(8 -76 -92 -75) -92]
Train Case:  94 | Input/Output: [(17 56 35 -94) -94]
Train Case:  95 | Input/Output: [(-99 -68 -26 -72) -99]
Train Case:  96 | Input/Output: [(-25 -22 93 23) -25]
Train Case:  97 | Input/Output: [(76 -34 99 28) -34]
Train Case:  98 | Input/Output: [(-56 69 -97 -88) -97]
Train Case:  99 | Input/Output: [(22 -49 87 -30) -49]
Test Case:   0 | Input/Output: [[49 -28 -28 -28] -28]
Test Case:   1 | Input/Output: [[12 15 15 15] 12]
Test Case:   2 | Input/Output: [[-35 84 84 84] -35]
Test Case:   3 | Input/Output: [[70 -10 70 70] -10]
Test Case:   4 | Input/Output: [[-58 91 -58 -58] -58]
Test Case:   5 | Input/Output: [[24 24 24 31] 24]
Test Case:   6 | Input/Output: [[-26 78 78 78] -26]
Test Case:   7 | Input/Output: [[-9 10 10 10] -9]
Test Case:   8 | Input/Output: [[-83 -83 -83 41] -83]
Test Case:   9 | Input/Output: [[19 59 19 19] 19]
Test Case:  10 | Input/Output: [[-58 49 -58 -58] -58]
Test Case:  11 | Input/Output: [[15 15 15 -62] -62]
Test Case:  12 | Input/Output: [[62 62 62 -90] -90]
Test Case:  13 | Input/Output: [[71 12 71 71] 12]
Test Case:  14 | Input/Output: [[30 30 -42 30] -42]
Test Case:  15 | Input/Output: [[68 -99 -99 -99] -99]
Test Case:  16 | Input/Output: [[39 39 39 80] 39]
Test Case:  17 | Input/Output: [[67 30 30 30] 30]
Test Case:  18 | Input/Output: [[52 52 52 -17] -17]
Test Case:  19 | Input/Output: [[22 73 22 22] 22]
Test Case:  20 | Input/Output: [[77 -17 -17 -17] -17]
Test Case:  21 | Input/Output: [[-36 74 -36 -36] -36]
Test Case:  22 | Input/Output: [[-3 -88 -88 -88] -88]
Test Case:  23 | Input/Output: [[96 96 96 63] 63]
Test Case:  24 | Input/Output: [[-20 21 -20 -20] -20]
Test Case:  25 | Input/Output: [[-6 -21 -21 -21] -21]
Test Case:  26 | Input/Output: [[-16 -76 -16 -16] -76]
Test Case:  27 | Input/Output: [[-86 -86 -86 63] -86]
Test Case:  28 | Input/Output: [[20 -30 -30 -30] -30]
Test Case:  29 | Input/Output: [[3 3 3 -80] -80]
Test Case:  30 | Input/Output: [[60 15 60 60] 15]
Test Case:  31 | Input/Output: [[-48 -48 -48 -76] -76]
Test Case:  32 | Input/Output: [[32 100 100 100] 32]
Test Case:  33 | Input/Output: [[-20 15 15 15] -20]
Test Case:  34 | Input/Output: [[52 -14 -14 -14] -14]
Test Case:  35 | Input/Output: [[-74 -74 -74 -82] -82]
Test Case:  36 | Input/Output: [[47 47 47 -40] -40]
Test Case:  37 | Input/Output: [[-31 -31 -31 19] -31]
Test Case:  38 | Input/Output: [[85 85 46 85] 46]
Test Case:  39 | Input/Output: [[-10 90 90 90] -10]
Test Case:  40 | Input/Output: [[36 36 35 36] 35]
Test Case:  41 | Input/Output: [[85 85 85 -98] -98]
Test Case:  42 | Input/Output: [[-6 -6 -6 65] -6]
Test Case:  43 | Input/Output: [[67 78 78 78] 67]
Test Case:  44 | Input/Output: [[45 45 45 64] 45]
Test Case:  45 | Input/Output: [[-84 -84 -84 82] -84]
Test Case:  46 | Input/Output: [[-17 -17 -17 -84] -84]
Test Case:  47 | Input/Output: [[-67 -67 -67 -3] -67]
Test Case:  48 | Input/Output: [[-93 -93 -12 -93] -93]
Test Case:  49 | Input/Output: [[13 51 51 51] 13]
Test Case:  50 | Input/Output: [[-89 -30 -89 -89] -89]
Test Case:  51 | Input/Output: [[-90 -82 -90 -90] -90]
Test Case:  52 | Input/Output: [[22 97 22 22] 22]
Test Case:  53 | Input/Output: [[7 -6 -6 -6] -6]
Test Case:  54 | Input/Output: [[73 -49 73 73] -49]
Test Case:  55 | Input/Output: [[-54 7 7 7] -54]
Test Case:  56 | Input/Output: [[22 22 -85 22] -85]
Test Case:  57 | Input/Output: [[-15 -77 -15 -15] -77]
Test Case:  58 | Input/Output: [[7 7 96 7] 7]
Test Case:  59 | Input/Output: [[-91 19 19 19] -91]
Test Case:  60 | Input/Output: [[-80 -80 -80 -37] -80]
Test Case:  61 | Input/Output: [[57 57 57 -70] -70]
Test Case:  62 | Input/Output: [[-19 -19 -19 -15] -19]
Test Case:  63 | Input/Output: [[60 60 60 -62] -62]
Test Case:  64 | Input/Output: [[-17 -17 -17 -44] -44]
Test Case:  65 | Input/Output: [[33 67 33 33] 33]
Test Case:  66 | Input/Output: [[-63 -63 25 -63] -63]
Test Case:  67 | Input/Output: [[-39 -39 -39 -9] -39]
Test Case:  68 | Input/Output: [[17 75 75 75] 17]
Test Case:  69 | Input/Output: [[-22 -22 -66 -22] -66]
Test Case:  70 | Input/Output: [[65 44 44 44] 44]
Test Case:  71 | Input/Output: [[-9 -9 -94 -9] -94]
Test Case:  72 | Input/Output: [[24 24 -41 24] -41]
Test Case:  73 | Input/Output: [[-74 -74 -74 96] -74]
Test Case:  74 | Input/Output: [[-36 -36 -16 -36] -36]
Test Case:  75 | Input/Output: [[-26 -26 -26 -2] -26]
Test Case:  76 | Input/Output: [[74 -57 -57 -57] -57]
Test Case:  77 | Input/Output: [[86 -40 86 86] -40]
Test Case:  78 | Input/Output: [[4 4 -28 4] -28]
Test Case:  79 | Input/Output: [[26 16 26 26] 16]
Test Case:  80 | Input/Output: [[37 48 37 37] 37]
Test Case:  81 | Input/Output: [[84 -34 -34 -34] -34]
Test Case:  82 | Input/Output: [[6 -29 -29 -29] -29]
Test Case:  83 | Input/Output: [[1 -89 1 1] -89]
Test Case:  84 | Input/Output: [[-43 -97 -97 -97] -97]
Test Case:  85 | Input/Output: [[76 76 -40 76] -40]
Test Case:  86 | Input/Output: [[81 81 -70 81] -70]
Test Case:  87 | Input/Output: [[79 -80 -80 -80] -80]
Test Case:  88 | Input/Output: [[-98 30 -98 -98] -98]
Test Case:  89 | Input/Output: [[-82 -82 -82 -29] -82]
Test Case:  90 | Input/Output: [[64 46 64 64] 46]
Test Case:  91 | Input/Output: [[30 30 30 -14] -14]
Test Case:  92 | Input/Output: [[-47 6 -47 -47] -47]
Test Case:  93 | Input/Output: [[-21 43 43 43] -21]
Test Case:  94 | Input/Output: [[5 -82 5 5] -82]
Test Case:  95 | Input/Output: [[-78 4 -78 -78] -78]
Test Case:  96 | Input/Output: [[-49 44 44 44] -49]
Test Case:  97 | Input/Output: [[-67 66 66 66] -67]
Test Case:  98 | Input/Output: [[54 -52 54 54] -52]
Test Case:  99 | Input/Output: [[-37 -3 -37 -37] -37]
Test Case: 100 | Input/Output: [(92 92 92 92) 92]
Test Case: 101 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 102 | Input/Output: [(53 53 53 53) 53]
Test Case: 103 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 104 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 105 | Input/Output: [(33 33 33 33) 33]
Test Case: 106 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 107 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 108 | Input/Output: [(44 44 44 44) 44]
Test Case: 109 | Input/Output: [(64 64 64 64) 64]
Test Case: 110 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 111 | Input/Output: [(95 95 95 95) 95]
Test Case: 112 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 113 | Input/Output: [(90 90 90 90) 90]
Test Case: 114 | Input/Output: [(55 55 55 55) 55]
Test Case: 115 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 116 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 117 | Input/Output: [(97 97 97 97) 97]
Test Case: 118 | Input/Output: [(13 13 13 13) 13]
Test Case: 119 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 120 | Input/Output: [(51 51 51 51) 51]
Test Case: 121 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 122 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 123 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 124 | Input/Output: [(6 6 6 6) 6]
Test Case: 125 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 126 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 127 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 128 | Input/Output: [(21 21 21 21) 21]
Test Case: 129 | Input/Output: [(49 49 49 49) 49]
Test Case: 130 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 131 | Input/Output: [(30 30 30 30) 30]
Test Case: 132 | Input/Output: [(65 65 65 65) 65]
Test Case: 133 | Input/Output: [(36 36 36 36) 36]
Test Case: 134 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 135 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 136 | Input/Output: [(59 59 59 59) 59]
Test Case: 137 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 138 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 139 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 140 | Input/Output: [(11 11 11 11) 11]
Test Case: 141 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 142 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 143 | Input/Output: [(96 96 96 96) 96]
Test Case: 144 | Input/Output: [(48 48 48 48) 48]
Test Case: 145 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 146 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 147 | Input/Output: [(0 0 0 0) 0]
Test Case: 148 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 149 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 150 | Input/Output: [(51 51 51 51) 51]
Test Case: 151 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 152 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 153 | Input/Output: [(80 80 80 80) 80]
Test Case: 154 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 155 | Input/Output: [(63 63 63 63) 63]
Test Case: 156 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 157 | Input/Output: [(37 37 37 37) 37]
Test Case: 158 | Input/Output: [(70 70 70 70) 70]
Test Case: 159 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 160 | Input/Output: [(0 0 0 0) 0]
Test Case: 161 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 162 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 163 | Input/Output: [(56 56 56 56) 56]
Test Case: 164 | Input/Output: [(50 50 50 50) 50]
Test Case: 165 | Input/Output: [(55 55 55 55) 55]
Test Case: 166 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 167 | Input/Output: [(38 38 38 38) 38]
Test Case: 168 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 169 | Input/Output: [(57 57 57 57) 57]
Test Case: 170 | Input/Output: [(2 2 2 2) 2]
Test Case: 171 | Input/Output: [(72 72 72 72) 72]
Test Case: 172 | Input/Output: [(42 42 42 42) 42]
Test Case: 173 | Input/Output: [(69 69 69 69) 69]
Test Case: 174 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 175 | Input/Output: [(9 9 9 9) 9]
Test Case: 176 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 177 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 178 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 179 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 180 | Input/Output: [(22 22 22 22) 22]
Test Case: 181 | Input/Output: [(12 12 12 12) 12]
Test Case: 182 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 183 | Input/Output: [(61 61 61 61) 61]
Test Case: 184 | Input/Output: [(95 95 95 95) 95]
Test Case: 185 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 186 | Input/Output: [(2 2 2 2) 2]
Test Case: 187 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 188 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 189 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 190 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 191 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 192 | Input/Output: [(98 98 98 98) 98]
Test Case: 193 | Input/Output: [(62 62 62 62) 62]
Test Case: 194 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 195 | Input/Output: [(23 23 23 23) 23]
Test Case: 196 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 197 | Input/Output: [(90 90 90 90) 90]
Test Case: 198 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 199 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 200 | Input/Output: [(33 16 21 40) 16]
Test Case: 201 | Input/Output: [(99 64 72 43) 43]
Test Case: 202 | Input/Output: [(54 92 0 35) 0]
Test Case: 203 | Input/Output: [(14 100 40 20) 14]
Test Case: 204 | Input/Output: [(49 10 56 9) 9]
Test Case: 205 | Input/Output: [(18 71 21 19) 18]
Test Case: 206 | Input/Output: [(75 3 42 66) 3]
Test Case: 207 | Input/Output: [(54 43 26 36) 26]
Test Case: 208 | Input/Output: [(34 3 20 47) 3]
Test Case: 209 | Input/Output: [(24 70 41 87) 24]
Test Case: 210 | Input/Output: [(66 93 70 21) 21]
Test Case: 211 | Input/Output: [(11 6 91 25) 6]
Test Case: 212 | Input/Output: [(76 17 19 74) 17]
Test Case: 213 | Input/Output: [(83 69 46 0) 0]
Test Case: 214 | Input/Output: [(33 81 69 68) 33]
Test Case: 215 | Input/Output: [(33 94 30 1) 1]
Test Case: 216 | Input/Output: [(40 82 33 43) 33]
Test Case: 217 | Input/Output: [(96 65 36 91) 36]
Test Case: 218 | Input/Output: [(53 96 91 35) 35]
Test Case: 219 | Input/Output: [(28 26 2 80) 2]
Test Case: 220 | Input/Output: [(72 80 93 12) 12]
Test Case: 221 | Input/Output: [(14 24 100 6) 6]
Test Case: 222 | Input/Output: [(46 26 72 60) 26]
Test Case: 223 | Input/Output: [(30 37 53 57) 30]
Test Case: 224 | Input/Output: [(13 67 71 27) 13]
Test Case: 225 | Input/Output: [(68 100 46 56) 46]
Test Case: 226 | Input/Output: [(91 82 40 78) 40]
Test Case: 227 | Input/Output: [(36 100 64 56) 36]
Test Case: 228 | Input/Output: [(66 35 72 48) 35]
Test Case: 229 | Input/Output: [(52 81 95 61) 52]
Test Case: 230 | Input/Output: [(7 52 87 34) 7]
Test Case: 231 | Input/Output: [(78 41 41 40) 40]
Test Case: 232 | Input/Output: [(76 74 17 75) 17]
Test Case: 233 | Input/Output: [(13 40 94 64) 13]
Test Case: 234 | Input/Output: [(59 37 53 3) 3]
Test Case: 235 | Input/Output: [(40 52 32 27) 27]
Test Case: 236 | Input/Output: [(40 12 52 44) 12]
Test Case: 237 | Input/Output: [(57 75 34 3) 3]
Test Case: 238 | Input/Output: [(74 86 55 95) 55]
Test Case: 239 | Input/Output: [(71 82 3 63) 3]
Test Case: 240 | Input/Output: [(9 84 56 19) 9]
Test Case: 241 | Input/Output: [(48 55 85 46) 46]
Test Case: 242 | Input/Output: [(59 53 39 66) 39]
Test Case: 243 | Input/Output: [(17 93 80 74) 17]
Test Case: 244 | Input/Output: [(16 86 52 45) 16]
Test Case: 245 | Input/Output: [(88 18 34 97) 18]
Test Case: 246 | Input/Output: [(81 31 68 83) 31]
Test Case: 247 | Input/Output: [(38 44 54 99) 38]
Test Case: 248 | Input/Output: [(67 67 69 15) 15]
Test Case: 249 | Input/Output: [(94 2 28 48) 2]
Test Case: 250 | Input/Output: [(47 13 6 51) 6]
Test Case: 251 | Input/Output: [(59 33 55 43) 33]
Test Case: 252 | Input/Output: [(22 83 82 91) 22]
Test Case: 253 | Input/Output: [(78 78 93 34) 34]
Test Case: 254 | Input/Output: [(6 38 41 82) 6]
Test Case: 255 | Input/Output: [(99 21 68 43) 21]
Test Case: 256 | Input/Output: [(95 42 73 69) 42]
Test Case: 257 | Input/Output: [(85 5 33 87) 5]
Test Case: 258 | Input/Output: [(42 56 54 73) 42]
Test Case: 259 | Input/Output: [(14 38 51 40) 14]
Test Case: 260 | Input/Output: [(73 45 80 35) 35]
Test Case: 261 | Input/Output: [(14 12 62 83) 12]
Test Case: 262 | Input/Output: [(32 98 86 63) 32]
Test Case: 263 | Input/Output: [(3 89 53 53) 3]
Test Case: 264 | Input/Output: [(67 16 68 38) 16]
Test Case: 265 | Input/Output: [(95 28 88 67) 28]
Test Case: 266 | Input/Output: [(41 32 83 10) 10]
Test Case: 267 | Input/Output: [(70 79 25 64) 25]
Test Case: 268 | Input/Output: [(7 2 93 19) 2]
Test Case: 269 | Input/Output: [(84 61 21 63) 21]
Test Case: 270 | Input/Output: [(37 91 72 64) 37]
Test Case: 271 | Input/Output: [(92 41 72 62) 41]
Test Case: 272 | Input/Output: [(53 37 22 31) 22]
Test Case: 273 | Input/Output: [(1 90 66 84) 1]
Test Case: 274 | Input/Output: [(45 91 87 27) 27]
Test Case: 275 | Input/Output: [(13 58 7 62) 7]
Test Case: 276 | Input/Output: [(89 81 21 93) 21]
Test Case: 277 | Input/Output: [(46 76 63 22) 22]
Test Case: 278 | Input/Output: [(84 46 3 48) 3]
Test Case: 279 | Input/Output: [(31 35 40 68) 31]
Test Case: 280 | Input/Output: [(26 75 17 54) 17]
Test Case: 281 | Input/Output: [(99 61 45 79) 45]
Test Case: 282 | Input/Output: [(56 7 27 85) 7]
Test Case: 283 | Input/Output: [(30 82 13 6) 6]
Test Case: 284 | Input/Output: [(31 51 55 50) 31]
Test Case: 285 | Input/Output: [(43 66 20 80) 20]
Test Case: 286 | Input/Output: [(29 6 8 87) 6]
Test Case: 287 | Input/Output: [(97 27 100 26) 26]
Test Case: 288 | Input/Output: [(93 73 44 99) 44]
Test Case: 289 | Input/Output: [(85 42 8 41) 8]
Test Case: 290 | Input/Output: [(17 77 61 71) 17]
Test Case: 291 | Input/Output: [(71 96 20 52) 20]
Test Case: 292 | Input/Output: [(22 62 95 35) 22]
Test Case: 293 | Input/Output: [(84 78 29 55) 29]
Test Case: 294 | Input/Output: [(68 99 85 59) 59]
Test Case: 295 | Input/Output: [(11 23 74 30) 11]
Test Case: 296 | Input/Output: [(40 16 19 100) 16]
Test Case: 297 | Input/Output: [(85 77 53 42) 42]
Test Case: 298 | Input/Output: [(20 50 34 97) 20]
Test Case: 299 | Input/Output: [(76 33 64 9) 9]
Test Case: 300 | Input/Output: [(57 94 29 46) 29]
Test Case: 301 | Input/Output: [(16 39 78 12) 12]
Test Case: 302 | Input/Output: [(12 42 17 9) 9]
Test Case: 303 | Input/Output: [(73 18 69 73) 18]
Test Case: 304 | Input/Output: [(13 56 22 38) 13]
Test Case: 305 | Input/Output: [(2 50 52 93) 2]
Test Case: 306 | Input/Output: [(40 50 41 54) 40]
Test Case: 307 | Input/Output: [(10 94 85 94) 10]
Test Case: 308 | Input/Output: [(76 36 7 98) 7]
Test Case: 309 | Input/Output: [(49 27 14 62) 14]
Test Case: 310 | Input/Output: [(97 29 3 43) 3]
Test Case: 311 | Input/Output: [(42 87 32 69) 32]
Test Case: 312 | Input/Output: [(48 68 91 41) 41]
Test Case: 313 | Input/Output: [(7 15 11 64) 7]
Test Case: 314 | Input/Output: [(89 98 48 58) 48]
Test Case: 315 | Input/Output: [(69 37 25 57) 25]
Test Case: 316 | Input/Output: [(4 75 65 38) 4]
Test Case: 317 | Input/Output: [(40 1 69 27) 1]
Test Case: 318 | Input/Output: [(62 61 38 17) 17]
Test Case: 319 | Input/Output: [(14 33 54 92) 14]
Test Case: 320 | Input/Output: [(46 12 15 27) 12]
Test Case: 321 | Input/Output: [(71 11 43 21) 11]
Test Case: 322 | Input/Output: [(38 38 8 16) 8]
Test Case: 323 | Input/Output: [(35 2 17 62) 2]
Test Case: 324 | Input/Output: [(85 87 15 42) 15]
Test Case: 325 | Input/Output: [(31 2 62 65) 2]
Test Case: 326 | Input/Output: [(50 74 78 34) 34]
Test Case: 327 | Input/Output: [(86 61 26 84) 26]
Test Case: 328 | Input/Output: [(99 38 26 93) 26]
Test Case: 329 | Input/Output: [(53 14 92 65) 14]
Test Case: 330 | Input/Output: [(75 70 88 95) 70]
Test Case: 331 | Input/Output: [(79 20 11 26) 11]
Test Case: 332 | Input/Output: [(65 70 22 47) 22]
Test Case: 333 | Input/Output: [(18 95 70 71) 18]
Test Case: 334 | Input/Output: [(18 82 33 7) 7]
Test Case: 335 | Input/Output: [(93 70 0 90) 0]
Test Case: 336 | Input/Output: [(83 57 49 74) 49]
Test Case: 337 | Input/Output: [(30 20 10 50) 10]
Test Case: 338 | Input/Output: [(36 63 26 20) 20]
Test Case: 339 | Input/Output: [(16 27 73 33) 16]
Test Case: 340 | Input/Output: [(67 23 22 43) 22]
Test Case: 341 | Input/Output: [(87 75 34 76) 34]
Test Case: 342 | Input/Output: [(75 45 15 28) 15]
Test Case: 343 | Input/Output: [(60 30 46 86) 30]
Test Case: 344 | Input/Output: [(98 58 66 92) 58]
Test Case: 345 | Input/Output: [(73 7 51 67) 7]
Test Case: 346 | Input/Output: [(52 24 54 22) 22]
Test Case: 347 | Input/Output: [(46 71 36 54) 36]
Test Case: 348 | Input/Output: [(46 52 20 92) 20]
Test Case: 349 | Input/Output: [(41 5 99 65) 5]
Test Case: 350 | Input/Output: [(11 11 15 33) 11]
Test Case: 351 | Input/Output: [(44 50 83 98) 44]
Test Case: 352 | Input/Output: [(53 16 96 33) 16]
Test Case: 353 | Input/Output: [(84 22 83 100) 22]
Test Case: 354 | Input/Output: [(38 17 31 81) 17]
Test Case: 355 | Input/Output: [(22 2 78 15) 2]
Test Case: 356 | Input/Output: [(29 23 61 70) 23]
Test Case: 357 | Input/Output: [(1 67 93 97) 1]
Test Case: 358 | Input/Output: [(5 53 64 78) 5]
Test Case: 359 | Input/Output: [(76 58 2 52) 2]
Test Case: 360 | Input/Output: [(98 17 32 58) 17]
Test Case: 361 | Input/Output: [(98 46 23 18) 18]
Test Case: 362 | Input/Output: [(73 76 72 62) 62]
Test Case: 363 | Input/Output: [(77 39 91 4) 4]
Test Case: 364 | Input/Output: [(59 85 41 33) 33]
Test Case: 365 | Input/Output: [(79 63 68 49) 49]
Test Case: 366 | Input/Output: [(3 77 16 51) 3]
Test Case: 367 | Input/Output: [(9 55 86 13) 9]
Test Case: 368 | Input/Output: [(58 86 50 55) 50]
Test Case: 369 | Input/Output: [(33 51 96 32) 32]
Test Case: 370 | Input/Output: [(14 98 11 9) 9]
Test Case: 371 | Input/Output: [(95 36 28 53) 28]
Test Case: 372 | Input/Output: [(84 95 89 8) 8]
Test Case: 373 | Input/Output: [(40 24 8 9) 8]
Test Case: 374 | Input/Output: [(66 12 3 36) 3]
Test Case: 375 | Input/Output: [(6 58 51 52) 6]
Test Case: 376 | Input/Output: [(50 57 30 51) 30]
Test Case: 377 | Input/Output: [(19 13 5 43) 5]
Test Case: 378 | Input/Output: [(27 22 79 86) 22]
Test Case: 379 | Input/Output: [(89 28 23 39) 23]
Test Case: 380 | Input/Output: [(100 11 18 0) 0]
Test Case: 381 | Input/Output: [(81 91 4 51) 4]
Test Case: 382 | Input/Output: [(99 22 47 60) 22]
Test Case: 383 | Input/Output: [(18 4 17 4) 4]
Test Case: 384 | Input/Output: [(90 41 4 16) 4]
Test Case: 385 | Input/Output: [(24 86 14 68) 14]
Test Case: 386 | Input/Output: [(50 50 58 6) 6]
Test Case: 387 | Input/Output: [(84 4 80 66) 4]
Test Case: 388 | Input/Output: [(81 61 61 6) 6]
Test Case: 389 | Input/Output: [(50 5 85 96) 5]
Test Case: 390 | Input/Output: [(6 19 18 21) 6]
Test Case: 391 | Input/Output: [(51 100 87 1) 1]
Test Case: 392 | Input/Output: [(96 48 61 32) 32]
Test Case: 393 | Input/Output: [(61 65 80 60) 60]
Test Case: 394 | Input/Output: [(76 24 9 20) 9]
Test Case: 395 | Input/Output: [(9 40 10 71) 9]
Test Case: 396 | Input/Output: [(12 82 45 13) 12]
Test Case: 397 | Input/Output: [(82 74 98 52) 52]
Test Case: 398 | Input/Output: [(74 67 91 5) 5]
Test Case: 399 | Input/Output: [(87 21 7 21) 7]
Test Case: 400 | Input/Output: [(-35 -45 33 -68) -68]
Test Case: 401 | Input/Output: [(-23 -43 55 -25) -43]
Test Case: 402 | Input/Output: [(-43 1 -75 45) -75]
Test Case: 403 | Input/Output: [(-92 -34 -28 -63) -92]
Test Case: 404 | Input/Output: [(-80 -20 59 -10) -80]
Test Case: 405 | Input/Output: [(-72 1 -50 -99) -99]
Test Case: 406 | Input/Output: [(51 -57 71 -29) -57]
Test Case: 407 | Input/Output: [(82 -26 11 -20) -26]
Test Case: 408 | Input/Output: [(-26 39 63 32) -26]
Test Case: 409 | Input/Output: [(44 83 87 4) 4]
Test Case: 410 | Input/Output: [(81 60 -58 38) -58]
Test Case: 411 | Input/Output: [(-93 42 -85 47) -93]
Test Case: 412 | Input/Output: [(-86 42 83 -60) -86]
Test Case: 413 | Input/Output: [(100 -100 -86 45) -100]
Test Case: 414 | Input/Output: [(61 -34 -53 49) -53]
Test Case: 415 | Input/Output: [(-75 -57 42 -54) -75]
Test Case: 416 | Input/Output: [(-50 -67 -19 30) -67]
Test Case: 417 | Input/Output: [(-28 -90 -80 -84) -90]
Test Case: 418 | Input/Output: [(95 45 83 -70) -70]
Test Case: 419 | Input/Output: [(87 53 -79 -61) -79]
Test Case: 420 | Input/Output: [(100 15 -86 74) -86]
Test Case: 421 | Input/Output: [(-87 -97 69 -9) -97]
Test Case: 422 | Input/Output: [(-14 -70 -81 75) -81]
Test Case: 423 | Input/Output: [(20 -88 -45 95) -88]
Test Case: 424 | Input/Output: [(-35 -27 -52 -20) -52]
Test Case: 425 | Input/Output: [(-2 1 -31 -17) -31]
Test Case: 426 | Input/Output: [(13 -57 -10 -2) -57]
Test Case: 427 | Input/Output: [(-75 60 -66 -48) -75]
Test Case: 428 | Input/Output: [(-41 -73 37 -23) -73]
Test Case: 429 | Input/Output: [(94 99 87 -9) -9]
Test Case: 430 | Input/Output: [(74 -22 36 -83) -83]
Test Case: 431 | Input/Output: [(31 -93 44 -85) -93]
Test Case: 432 | Input/Output: [(-83 76 24 44) -83]
Test Case: 433 | Input/Output: [(22 73 81 -94) -94]
Test Case: 434 | Input/Output: [(-82 -68 -82 31) -82]
Test Case: 435 | Input/Output: [(-6 -28 67 -2) -28]
Test Case: 436 | Input/Output: [(29 5 88 68) 5]
Test Case: 437 | Input/Output: [(-17 83 -4 -12) -17]
Test Case: 438 | Input/Output: [(22 4 71 70) 4]
Test Case: 439 | Input/Output: [(-75 97 -26 -90) -90]
Test Case: 440 | Input/Output: [(37 -74 -74 9) -74]
Test Case: 441 | Input/Output: [(-74 65 4 -81) -81]
Test Case: 442 | Input/Output: [(-67 34 0 -50) -67]
Test Case: 443 | Input/Output: [(-21 -20 100 -93) -93]
Test Case: 444 | Input/Output: [(-48 31 -27 -84) -84]
Test Case: 445 | Input/Output: [(-78 56 14 -66) -78]
Test Case: 446 | Input/Output: [(92 -12 3 100) -12]
Test Case: 447 | Input/Output: [(40 26 -88 89) -88]
Test Case: 448 | Input/Output: [(-40 98 -7 18) -40]
Test Case: 449 | Input/Output: [(21 44 -23 -70) -70]
Test Case: 450 | Input/Output: [(28 -29 93 -59) -59]
Test Case: 451 | Input/Output: [(-84 41 -81 -77) -84]
Test Case: 452 | Input/Output: [(80 -90 43 -80) -90]
Test Case: 453 | Input/Output: [(67 -88 -94 -1) -94]
Test Case: 454 | Input/Output: [(2 62 -62 79) -62]
Test Case: 455 | Input/Output: [(11 37 -20 -41) -41]
Test Case: 456 | Input/Output: [(42 39 -42 84) -42]
Test Case: 457 | Input/Output: [(43 24 -81 42) -81]
Test Case: 458 | Input/Output: [(-82 -77 46 -91) -91]
Test Case: 459 | Input/Output: [(33 89 90 91) 33]
Test Case: 460 | Input/Output: [(84 63 -44 59) -44]
Test Case: 461 | Input/Output: [(-4 -35 -4 -35) -35]
Test Case: 462 | Input/Output: [(-12 -56 -16 -88) -88]
Test Case: 463 | Input/Output: [(88 7 56 -58) -58]
Test Case: 464 | Input/Output: [(-71 72 19 55) -71]
Test Case: 465 | Input/Output: [(-33 -23 20 -46) -46]
Test Case: 466 | Input/Output: [(-49 -34 -100 60) -100]
Test Case: 467 | Input/Output: [(0 -69 -3 78) -69]
Test Case: 468 | Input/Output: [(-60 -85 89 19) -85]
Test Case: 469 | Input/Output: [(-85 14 59 -33) -85]
Test Case: 470 | Input/Output: [(45 -29 29 1) -29]
Test Case: 471 | Input/Output: [(58 34 -84 -85) -85]
Test Case: 472 | Input/Output: [(-1 -21 1 -40) -40]
Test Case: 473 | Input/Output: [(-1 52 70 -53) -53]
Test Case: 474 | Input/Output: [(84 54 -5 -55) -55]
Test Case: 475 | Input/Output: [(57 23 4 -14) -14]
Test Case: 476 | Input/Output: [(-25 93 99 7) -25]
Test Case: 477 | Input/Output: [(58 72 58 65) 58]
Test Case: 478 | Input/Output: [(86 12 53 -74) -74]
Test Case: 479 | Input/Output: [(2 96 -70 19) -70]
Test Case: 480 | Input/Output: [(-58 -94 -60 82) -94]
Test Case: 481 | Input/Output: [(63 49 86 55) 49]
Test Case: 482 | Input/Output: [(44 -82 64 85) -82]
Test Case: 483 | Input/Output: [(-34 95 -62 14) -62]
Test Case: 484 | Input/Output: [(22 -84 41 -3) -84]
Test Case: 485 | Input/Output: [(81 -76 -100 43) -100]
Test Case: 486 | Input/Output: [(-53 46 -47 43) -53]
Test Case: 487 | Input/Output: [(-8 -24 13 -60) -60]
Test Case: 488 | Input/Output: [(-98 48 -95 -93) -98]
Test Case: 489 | Input/Output: [(-1 -33 78 -28) -33]
Test Case: 490 | Input/Output: [(0 37 -21 -41) -41]
Test Case: 491 | Input/Output: [(-29 -95 -3 -98) -98]
Test Case: 492 | Input/Output: [(8 44 -67 -69) -69]
Test Case: 493 | Input/Output: [(40 79 -80 24) -80]
Test Case: 494 | Input/Output: [(-53 -47 67 87) -53]
Test Case: 495 | Input/Output: [(-87 55 -51 -95) -95]
Test Case: 496 | Input/Output: [(-40 -31 52 -50) -50]
Test Case: 497 | Input/Output: [(9 65 41 -21) -21]
Test Case: 498 | Input/Output: [(58 68 34 -1) -1]
Test Case: 499 | Input/Output: [(25 85 -19 -89) -89]
Test Case: 500 | Input/Output: [(-94 68 -89 90) -94]
Test Case: 501 | Input/Output: [(76 57 -36 47) -36]
Test Case: 502 | Input/Output: [(-94 -70 -17 -53) -94]
Test Case: 503 | Input/Output: [(-87 6 -63 -93) -93]
Test Case: 504 | Input/Output: [(-21 19 -58 -51) -58]
Test Case: 505 | Input/Output: [(86 51 -85 83) -85]
Test Case: 506 | Input/Output: [(62 35 61 91) 35]
Test Case: 507 | Input/Output: [(-48 -98 36 71) -98]
Test Case: 508 | Input/Output: [(-14 25 76 -30) -30]
Test Case: 509 | Input/Output: [(93 -94 -27 19) -94]
Test Case: 510 | Input/Output: [(26 -18 -8 82) -18]
Test Case: 511 | Input/Output: [(62 18 -88 -43) -88]
Test Case: 512 | Input/Output: [(-7 22 -25 72) -25]
Test Case: 513 | Input/Output: [(18 -49 75 -94) -94]
Test Case: 514 | Input/Output: [(-95 4 -24 63) -95]
Test Case: 515 | Input/Output: [(8 2 -32 -97) -97]
Test Case: 516 | Input/Output: [(8 31 -45 -12) -45]
Test Case: 517 | Input/Output: [(70 -89 -30 61) -89]
Test Case: 518 | Input/Output: [(58 -87 94 -1) -87]
Test Case: 519 | Input/Output: [(-12 -61 8 32) -61]
Test Case: 520 | Input/Output: [(-3 -22 10 45) -22]
Test Case: 521 | Input/Output: [(-77 14 90 -70) -77]
Test Case: 522 | Input/Output: [(79 -90 91 55) -90]
Test Case: 523 | Input/Output: [(-84 44 -40 20) -84]
Test Case: 524 | Input/Output: [(-72 -92 -27 -33) -92]
Test Case: 525 | Input/Output: [(57 -24 -56 24) -56]
Test Case: 526 | Input/Output: [(31 11 12 -19) -19]
Test Case: 527 | Input/Output: [(-63 -6 96 -36) -63]
Test Case: 528 | Input/Output: [(18 3 -88 35) -88]
Test Case: 529 | Input/Output: [(65 -25 70 -5) -25]
Test Case: 530 | Input/Output: [(-81 -43 -64 -16) -81]
Test Case: 531 | Input/Output: [(14 81 -53 -94) -94]
Test Case: 532 | Input/Output: [(38 -36 32 100) -36]
Test Case: 533 | Input/Output: [(17 -27 6 -18) -27]
Test Case: 534 | Input/Output: [(-2 -72 -80 5) -80]
Test Case: 535 | Input/Output: [(15 -39 -53 89) -53]
Test Case: 536 | Input/Output: [(-75 -8 62 66) -75]
Test Case: 537 | Input/Output: [(-26 83 -58 -72) -72]
Test Case: 538 | Input/Output: [(-68 -85 -71 38) -85]
Test Case: 539 | Input/Output: [(31 23 18 37) 18]
Test Case: 540 | Input/Output: [(20 -47 20 100) -47]
Test Case: 541 | Input/Output: [(-74 -85 28 -16) -85]
Test Case: 542 | Input/Output: [(66 24 57 -30) -30]
Test Case: 543 | Input/Output: [(-13 38 9 -66) -66]
Test Case: 544 | Input/Output: [(-97 -89 23 49) -97]
Test Case: 545 | Input/Output: [(-8 33 15 -47) -47]
Test Case: 546 | Input/Output: [(59 -74 -71 -22) -74]
Test Case: 547 | Input/Output: [(85 52 36 58) 36]
Test Case: 548 | Input/Output: [(-57 -98 66 86) -98]
Test Case: 549 | Input/Output: [(34 30 -3 83) -3]
Test Case: 550 | Input/Output: [(66 41 -91 59) -91]
Test Case: 551 | Input/Output: [(37 -63 -52 4) -63]
Test Case: 552 | Input/Output: [(-37 18 -17 8) -37]
Test Case: 553 | Input/Output: [(-42 -85 -37 63) -85]
Test Case: 554 | Input/Output: [(3 -69 38 20) -69]
Test Case: 555 | Input/Output: [(-88 -66 8 -71) -88]
Test Case: 556 | Input/Output: [(-94 34 99 -97) -97]
Test Case: 557 | Input/Output: [(-19 87 -89 -38) -89]
Test Case: 558 | Input/Output: [(4 20 -96 -53) -96]
Test Case: 559 | Input/Output: [(-15 33 -26 -14) -26]
Test Case: 560 | Input/Output: [(-35 80 -40 -42) -42]
Test Case: 561 | Input/Output: [(96 -99 -37 25) -99]
Test Case: 562 | Input/Output: [(31 -58 0 -82) -82]
Test Case: 563 | Input/Output: [(12 -7 66 -63) -63]
Test Case: 564 | Input/Output: [(16 55 70 22) 16]
Test Case: 565 | Input/Output: [(-86 69 -82 16) -86]
Test Case: 566 | Input/Output: [(-59 -91 43 -42) -91]
Test Case: 567 | Input/Output: [(-33 66 65 3) -33]
Test Case: 568 | Input/Output: [(80 58 61 25) 25]
Test Case: 569 | Input/Output: [(71 -38 -70 6) -70]
Test Case: 570 | Input/Output: [(67 -40 54 -21) -40]
Test Case: 571 | Input/Output: [(36 -5 -83 -87) -87]
Test Case: 572 | Input/Output: [(-65 77 -38 3) -65]
Test Case: 573 | Input/Output: [(-52 -51 26 -20) -52]
Test Case: 574 | Input/Output: [(-33 97 -94 -71) -94]
Test Case: 575 | Input/Output: [(55 14 -98 92) -98]
Test Case: 576 | Input/Output: [(3 47 30 89) 3]
Test Case: 577 | Input/Output: [(57 -65 -45 -44) -65]
Test Case: 578 | Input/Output: [(42 36 -18 9) -18]
Test Case: 579 | Input/Output: [(96 -71 -10 5) -71]
Test Case: 580 | Input/Output: [(76 -61 79 75) -61]
Test Case: 581 | Input/Output: [(59 56 -60 38) -60]
Test Case: 582 | Input/Output: [(-53 -49 -53 76) -53]
Test Case: 583 | Input/Output: [(-30 -19 -69 58) -69]
Test Case: 584 | Input/Output: [(70 34 -3 38) -3]
Test Case: 585 | Input/Output: [(-60 -64 91 -56) -64]
Test Case: 586 | Input/Output: [(-21 -77 -20 15) -77]
Test Case: 587 | Input/Output: [(-59 -55 -13 -66) -66]
Test Case: 588 | Input/Output: [(55 -46 -63 -58) -63]
Test Case: 589 | Input/Output: [(53 -18 63 56) -18]
Test Case: 590 | Input/Output: [(-80 66 62 39) -80]
Test Case: 591 | Input/Output: [(50 -52 -99 22) -99]
Test Case: 592 | Input/Output: [(85 60 -68 34) -68]
Test Case: 593 | Input/Output: [(78 -86 2 -91) -91]
Test Case: 594 | Input/Output: [(80 -10 -5 8) -10]
Test Case: 595 | Input/Output: [(28 6 -61 58) -61]
Test Case: 596 | Input/Output: [(-8 -90 -32 0) -90]
Test Case: 597 | Input/Output: [(51 -37 -57 -88) -88]
Test Case: 598 | Input/Output: [(-44 82 -64 -77) -77]
Test Case: 599 | Input/Output: [(-52 90 76 75) -52]
Test Case: 600 | Input/Output: [(-27 64 -7 -46) -46]
Test Case: 601 | Input/Output: [(-58 3 -70 -19) -70]
Test Case: 602 | Input/Output: [(-75 -21 -15 85) -75]
Test Case: 603 | Input/Output: [(-79 0 -36 47) -79]
Test Case: 604 | Input/Output: [(16 -28 39 83) -28]
Test Case: 605 | Input/Output: [(45 34 29 -38) -38]
Test Case: 606 | Input/Output: [(48 -33 -37 -11) -37]
Test Case: 607 | Input/Output: [(-34 8 -39 -46) -46]
Test Case: 608 | Input/Output: [(-84 -48 -11 32) -84]
Test Case: 609 | Input/Output: [(-92 97 59 85) -92]
Test Case: 610 | Input/Output: [(-7 -52 26 22) -52]
Test Case: 611 | Input/Output: [(-31 -81 95 27) -81]
Test Case: 612 | Input/Output: [(69 12 59 37) 12]
Test Case: 613 | Input/Output: [(-92 -84 -10 -78) -92]
Test Case: 614 | Input/Output: [(-79 -21 -3 -30) -79]
Test Case: 615 | Input/Output: [(77 -62 96 31) -62]
Test Case: 616 | Input/Output: [(-50 66 67 -94) -94]
Test Case: 617 | Input/Output: [(-100 -66 42 -79) -100]
Test Case: 618 | Input/Output: [(10 25 -15 90) -15]
Test Case: 619 | Input/Output: [(-16 8 5 89) -16]
Test Case: 620 | Input/Output: [(-78 -39 24 48) -78]
Test Case: 621 | Input/Output: [(20 78 15 -15) -15]
Test Case: 622 | Input/Output: [(-53 -52 -81 44) -81]
Test Case: 623 | Input/Output: [(-99 1 94 23) -99]
Test Case: 624 | Input/Output: [(18 85 74 -74) -74]
Test Case: 625 | Input/Output: [(78 -38 7 19) -38]
Test Case: 626 | Input/Output: [(34 49 54 -76) -76]
Test Case: 627 | Input/Output: [(-34 58 16 -6) -34]
Test Case: 628 | Input/Output: [(56 -67 -87 -51) -87]
Test Case: 629 | Input/Output: [(-64 70 4 93) -64]
Test Case: 630 | Input/Output: [(-17 51 -31 85) -31]
Test Case: 631 | Input/Output: [(-6 53 -100 -50) -100]
Test Case: 632 | Input/Output: [(-62 50 -54 -28) -62]
Test Case: 633 | Input/Output: [(41 61 64 77) 41]
Test Case: 634 | Input/Output: [(98 -1 71 -44) -44]
Test Case: 635 | Input/Output: [(-12 -89 -24 18) -89]
Test Case: 636 | Input/Output: [(47 89 62 -86) -86]
Test Case: 637 | Input/Output: [(50 80 90 -78) -78]
Test Case: 638 | Input/Output: [(46 -83 -100 87) -100]
Test Case: 639 | Input/Output: [(26 37 -94 23) -94]
Test Case: 640 | Input/Output: [(-20 52 -81 -87) -87]
Test Case: 641 | Input/Output: [(49 79 90 -44) -44]
Test Case: 642 | Input/Output: [(71 86 -4 37) -4]
Test Case: 643 | Input/Output: [(96 16 30 -34) -34]
Test Case: 644 | Input/Output: [(52 61 -79 25) -79]
Test Case: 645 | Input/Output: [(-71 89 85 100) -71]
Test Case: 646 | Input/Output: [(-55 92 -21 -79) -79]
Test Case: 647 | Input/Output: [(-18 -20 -61 -1) -61]
Test Case: 648 | Input/Output: [(-22 -85 -98 16) -98]
Test Case: 649 | Input/Output: [(-36 81 74 89) -36]
Test Case: 650 | Input/Output: [(85 51 84 -58) -58]
Test Case: 651 | Input/Output: [(68 -94 11 12) -94]
Test Case: 652 | Input/Output: [(82 -69 -33 70) -69]
Test Case: 653 | Input/Output: [(-69 -68 -92 78) -92]
Test Case: 654 | Input/Output: [(96 -36 -87 88) -87]
Test Case: 655 | Input/Output: [(9 -73 67 60) -73]
Test Case: 656 | Input/Output: [(-25 -70 -18 -92) -92]
Test Case: 657 | Input/Output: [(86 -2 95 -71) -71]
Test Case: 658 | Input/Output: [(1 34 96 22) 1]
Test Case: 659 | Input/Output: [(37 -37 -31 -81) -81]
Test Case: 660 | Input/Output: [(-86 55 -21 -91) -91]
Test Case: 661 | Input/Output: [(32 46 -74 97) -74]
Test Case: 662 | Input/Output: [(19 -40 -48 -17) -48]
Test Case: 663 | Input/Output: [(79 58 -49 81) -49]
Test Case: 664 | Input/Output: [(93 -94 -47 85) -94]
Test Case: 665 | Input/Output: [(-33 -26 53 8) -33]
Test Case: 666 | Input/Output: [(21 -39 -38 -86) -86]
Test Case: 667 | Input/Output: [(-36 -81 47 -91) -91]
Test Case: 668 | Input/Output: [(-53 67 6 -78) -78]
Test Case: 669 | Input/Output: [(-73 -72 50 14) -73]
Test Case: 670 | Input/Output: [(-19 -62 88 -48) -62]
Test Case: 671 | Input/Output: [(-3 -60 -90 100) -90]
Test Case: 672 | Input/Output: [(-24 92 54 22) -24]
Test Case: 673 | Input/Output: [(-28 68 -77 -89) -89]
Test Case: 674 | Input/Output: [(-41 85 -60 76) -60]
Test Case: 675 | Input/Output: [(90 47 -26 -70) -70]
Test Case: 676 | Input/Output: [(-22 49 -25 28) -25]
Test Case: 677 | Input/Output: [(-67 71 49 32) -67]
Test Case: 678 | Input/Output: [(-2 -74 8 -58) -74]
Test Case: 679 | Input/Output: [(41 21 -94 16) -94]
Test Case: 680 | Input/Output: [(6 -4 -96 -43) -96]
Test Case: 681 | Input/Output: [(-50 38 -21 98) -50]
Test Case: 682 | Input/Output: [(-48 -49 43 78) -49]
Test Case: 683 | Input/Output: [(-86 -9 -40 -50) -86]
Test Case: 684 | Input/Output: [(-49 -98 75 -80) -98]
Test Case: 685 | Input/Output: [(-60 -87 19 19) -87]
Test Case: 686 | Input/Output: [(-97 -18 -2 -40) -97]
Test Case: 687 | Input/Output: [(71 -67 -60 -83) -83]
Test Case: 688 | Input/Output: [(-71 -43 -47 84) -71]
Test Case: 689 | Input/Output: [(-41 -73 89 43) -73]
Test Case: 690 | Input/Output: [(-61 -7 24 -27) -61]
Test Case: 691 | Input/Output: [(33 33 78 -96) -96]
Test Case: 692 | Input/Output: [(-46 37 97 54) -46]
Test Case: 693 | Input/Output: [(47 -85 61 3) -85]
Test Case: 694 | Input/Output: [(-30 -16 49 67) -30]
Test Case: 695 | Input/Output: [(46 73 -1 8) -1]
Test Case: 696 | Input/Output: [(-23 -96 93 -96) -96]
Test Case: 697 | Input/Output: [(-22 -45 -79 62) -79]
Test Case: 698 | Input/Output: [(-43 53 42 29) -43]
Test Case: 699 | Input/Output: [(-67 -31 -66 42) -67]
Test Case: 700 | Input/Output: [(-87 45 -94 24) -94]
Test Case: 701 | Input/Output: [(-13 -54 -30 -50) -54]
Test Case: 702 | Input/Output: [(-30 36 41 26) -30]
Test Case: 703 | Input/Output: [(60 64 -52 34) -52]
Test Case: 704 | Input/Output: [(92 -20 44 -64) -64]
Test Case: 705 | Input/Output: [(64 22 97 -99) -99]
Test Case: 706 | Input/Output: [(-36 -11 -39 -25) -39]
Test Case: 707 | Input/Output: [(71 -16 -67 82) -67]
Test Case: 708 | Input/Output: [(-52 -33 -46 96) -52]
Test Case: 709 | Input/Output: [(66 25 0 57) 0]
Test Case: 710 | Input/Output: [(-9 -27 -13 -72) -72]
Test Case: 711 | Input/Output: [(-2 -42 79 32) -42]
Test Case: 712 | Input/Output: [(96 -63 -52 -59) -63]
Test Case: 713 | Input/Output: [(95 27 44 -100) -100]
Test Case: 714 | Input/Output: [(-89 5 -7 87) -89]
Test Case: 715 | Input/Output: [(-44 2 -81 -25) -81]
Test Case: 716 | Input/Output: [(85 47 92 1) 1]
Test Case: 717 | Input/Output: [(23 70 -86 -39) -86]
Test Case: 718 | Input/Output: [(40 -60 -34 9) -60]
Test Case: 719 | Input/Output: [(-57 85 -14 89) -57]
Test Case: 720 | Input/Output: [(-91 88 7 56) -91]
Test Case: 721 | Input/Output: [(68 -32 -99 -36) -99]
Test Case: 722 | Input/Output: [(-89 -49 72 3) -89]
Test Case: 723 | Input/Output: [(64 -41 87 -26) -41]
Test Case: 724 | Input/Output: [(51 -58 54 -78) -78]
Test Case: 725 | Input/Output: [(34 51 47 8) 8]
Test Case: 726 | Input/Output: [(-99 1 -32 -26) -99]
Test Case: 727 | Input/Output: [(1 4 -50 18) -50]
Test Case: 728 | Input/Output: [(-32 -24 36 23) -32]
Test Case: 729 | Input/Output: [(-26 -95 0 53) -95]
Test Case: 730 | Input/Output: [(16 71 -2 52) -2]
Test Case: 731 | Input/Output: [(15 -38 87 53) -38]
Test Case: 732 | Input/Output: [(-8 -76 30 16) -76]
Test Case: 733 | Input/Output: [(-40 53 75 -72) -72]
Test Case: 734 | Input/Output: [(-13 71 21 -39) -39]
Test Case: 735 | Input/Output: [(-58 16 84 -41) -58]
Test Case: 736 | Input/Output: [(-11 -2 -34 39) -34]
Test Case: 737 | Input/Output: [(-18 -95 40 -57) -95]
Test Case: 738 | Input/Output: [(3 68 -58 -14) -58]
Test Case: 739 | Input/Output: [(77 74 91 41) 41]
Test Case: 740 | Input/Output: [(62 -60 -72 84) -72]
Test Case: 741 | Input/Output: [(88 -83 -53 -96) -96]
Test Case: 742 | Input/Output: [(23 14 73 -16) -16]
Test Case: 743 | Input/Output: [(-86 82 -15 45) -86]
Test Case: 744 | Input/Output: [(-8 -72 99 -46) -72]
Test Case: 745 | Input/Output: [(-48 54 -42 49) -48]
Test Case: 746 | Input/Output: [(-46 18 -80 50) -80]
Test Case: 747 | Input/Output: [(-43 -7 98 96) -43]
Test Case: 748 | Input/Output: [(-35 61 -45 43) -45]
Test Case: 749 | Input/Output: [(-82 -35 56 -30) -82]
Test Case: 750 | Input/Output: [(51 -4 24 -21) -21]
Test Case: 751 | Input/Output: [(28 -60 65 -42) -60]
Test Case: 752 | Input/Output: [(-20 15 45 -25) -25]
Test Case: 753 | Input/Output: [(5 68 54 -54) -54]
Test Case: 754 | Input/Output: [(-40 1 -38 62) -40]
Test Case: 755 | Input/Output: [(-96 7 61 -27) -96]
Test Case: 756 | Input/Output: [(8 -3 -55 78) -55]
Test Case: 757 | Input/Output: [(85 19 98 45) 19]
Test Case: 758 | Input/Output: [(42 -22 42 -76) -76]
Test Case: 759 | Input/Output: [(-79 38 -83 36) -83]
Test Case: 760 | Input/Output: [(-81 96 88 -8) -81]
Test Case: 761 | Input/Output: [(65 38 -26 93) -26]
Test Case: 762 | Input/Output: [(-23 -80 90 -77) -80]
Test Case: 763 | Input/Output: [(-52 60 -73 78) -73]
Test Case: 764 | Input/Output: [(70 -97 68 -40) -97]
Test Case: 765 | Input/Output: [(84 -52 39 -81) -81]
Test Case: 766 | Input/Output: [(80 91 -40 -44) -44]
Test Case: 767 | Input/Output: [(-78 -9 -99 34) -99]
Test Case: 768 | Input/Output: [(1 4 -23 -75) -75]
Test Case: 769 | Input/Output: [(-8 -91 -34 -89) -91]
Test Case: 770 | Input/Output: [(35 -84 -24 -84) -84]
Test Case: 771 | Input/Output: [(56 -47 6 93) -47]
Test Case: 772 | Input/Output: [(58 -19 -26 -79) -79]
Test Case: 773 | Input/Output: [(64 48 83 86) 48]
Test Case: 774 | Input/Output: [(55 10 -20 -99) -99]
Test Case: 775 | Input/Output: [(-99 -29 44 -17) -99]
Test Case: 776 | Input/Output: [(8 -51 -31 89) -51]
Test Case: 777 | Input/Output: [(21 94 17 -59) -59]
Test Case: 778 | Input/Output: [(-28 -99 -87 -28) -99]
Test Case: 779 | Input/Output: [(66 25 -79 -88) -88]
Test Case: 780 | Input/Output: [(-14 -77 46 -39) -77]
Test Case: 781 | Input/Output: [(11 91 -13 11) -13]
Test Case: 782 | Input/Output: [(-88 -15 68 86) -88]
Test Case: 783 | Input/Output: [(88 -43 4 91) -43]
Test Case: 784 | Input/Output: [(-32 -90 49 32) -90]
Test Case: 785 | Input/Output: [(-32 40 35 -87) -87]
Test Case: 786 | Input/Output: [(65 15 -45 -74) -74]
Test Case: 787 | Input/Output: [(-20 100 26 -79) -79]
Test Case: 788 | Input/Output: [(-29 -57 -92 -31) -92]
Test Case: 789 | Input/Output: [(10 29 3 80) 3]
Test Case: 790 | Input/Output: [(41 85 37 52) 37]
Test Case: 791 | Input/Output: [(38 -35 -11 79) -35]
Test Case: 792 | Input/Output: [(-30 -60 36 26) -60]
Test Case: 793 | Input/Output: [(57 -69 -75 14) -75]
Test Case: 794 | Input/Output: [(59 -16 -11 -73) -73]
Test Case: 795 | Input/Output: [(92 -85 -6 -92) -92]
Test Case: 796 | Input/Output: [(-50 -90 51 -99) -99]
Test Case: 797 | Input/Output: [(-36 28 44 -86) -86]
Test Case: 798 | Input/Output: [(-15 68 71 86) -15]
Test Case: 799 | Input/Output: [(-61 -90 82 -97) -97]
Test Case: 800 | Input/Output: [(-1 -81 -55 59) -81]
Test Case: 801 | Input/Output: [(-88 3 80 -28) -88]
Test Case: 802 | Input/Output: [(-4 47 64 44) -4]
Test Case: 803 | Input/Output: [(83 5 75 -42) -42]
Test Case: 804 | Input/Output: [(27 -60 -30 -77) -77]
Test Case: 805 | Input/Output: [(8 86 -87 -10) -87]
Test Case: 806 | Input/Output: [(88 37 -13 44) -13]
Test Case: 807 | Input/Output: [(-28 35 -15 26) -28]
Test Case: 808 | Input/Output: [(-1 -51 98 92) -51]
Test Case: 809 | Input/Output: [(15 -81 -62 -44) -81]
Test Case: 810 | Input/Output: [(76 26 -71 -66) -71]
Test Case: 811 | Input/Output: [(25 -81 -57 -54) -81]
Test Case: 812 | Input/Output: [(-13 -42 -69 88) -69]
Test Case: 813 | Input/Output: [(-31 68 -9 -64) -64]
Test Case: 814 | Input/Output: [(33 -54 30 92) -54]
Test Case: 815 | Input/Output: [(34 -96 25 0) -96]
Test Case: 816 | Input/Output: [(-19 43 -7 36) -19]
Test Case: 817 | Input/Output: [(65 -85 -3 -60) -85]
Test Case: 818 | Input/Output: [(-12 33 -50 -32) -50]
Test Case: 819 | Input/Output: [(-36 54 84 65) -36]
Test Case: 820 | Input/Output: [(24 -37 -81 -17) -81]
Test Case: 821 | Input/Output: [(-54 35 -99 93) -99]
Test Case: 822 | Input/Output: [(20 -70 36 49) -70]
Test Case: 823 | Input/Output: [(20 42 -13 -47) -47]
Test Case: 824 | Input/Output: [(44 19 35 70) 19]
Test Case: 825 | Input/Output: [(43 74 -40 5) -40]
Test Case: 826 | Input/Output: [(-26 49 18 -41) -41]
Test Case: 827 | Input/Output: [(44 -40 -48 49) -48]
Test Case: 828 | Input/Output: [(91 -34 8 -27) -34]
Test Case: 829 | Input/Output: [(25 63 -93 41) -93]
Test Case: 830 | Input/Output: [(59 -75 -49 12) -75]
Test Case: 831 | Input/Output: [(45 94 13 89) 13]
Test Case: 832 | Input/Output: [(-62 87 -15 19) -62]
Test Case: 833 | Input/Output: [(-70 -70 98 96) -70]
Test Case: 834 | Input/Output: [(17 -72 -45 38) -72]
Test Case: 835 | Input/Output: [(-42 -42 -42 33) -42]
Test Case: 836 | Input/Output: [(64 50 83 -74) -74]
Test Case: 837 | Input/Output: [(-93 2 -15 97) -93]
Test Case: 838 | Input/Output: [(35 -50 -64 -61) -64]
Test Case: 839 | Input/Output: [(-54 17 -90 -94) -94]
Test Case: 840 | Input/Output: [(56 33 -2 76) -2]
Test Case: 841 | Input/Output: [(-12 54 -19 -7) -19]
Test Case: 842 | Input/Output: [(48 28 -83 91) -83]
Test Case: 843 | Input/Output: [(9 -19 -8 49) -19]
Test Case: 844 | Input/Output: [(18 40 6 -89) -89]
Test Case: 845 | Input/Output: [(-3 -14 -70 -37) -70]
Test Case: 846 | Input/Output: [(-68 36 -87 -51) -87]
Test Case: 847 | Input/Output: [(-74 -19 -35 89) -74]
Test Case: 848 | Input/Output: [(-30 -69 -59 93) -69]
Test Case: 849 | Input/Output: [(-79 15 89 -58) -79]
Test Case: 850 | Input/Output: [(-100 -54 74 94) -100]
Test Case: 851 | Input/Output: [(70 -28 32 65) -28]
Test Case: 852 | Input/Output: [(99 -16 -18 19) -18]
Test Case: 853 | Input/Output: [(68 -90 -59 61) -90]
Test Case: 854 | Input/Output: [(-100 -91 -60 -55) -100]
Test Case: 855 | Input/Output: [(99 22 31 -50) -50]
Test Case: 856 | Input/Output: [(-62 2 15 -72) -72]
Test Case: 857 | Input/Output: [(78 -29 -45 62) -45]
Test Case: 858 | Input/Output: [(-60 80 38 -50) -60]
Test Case: 859 | Input/Output: [(47 11 -78 -23) -78]
Test Case: 860 | Input/Output: [(-95 72 -27 19) -95]
Test Case: 861 | Input/Output: [(-89 -23 99 47) -89]
Test Case: 862 | Input/Output: [(51 77 36 47) 36]
Test Case: 863 | Input/Output: [(-85 73 -100 -6) -100]
Test Case: 864 | Input/Output: [(12 -58 43 30) -58]
Test Case: 865 | Input/Output: [(-84 -10 -31 88) -84]
Test Case: 866 | Input/Output: [(-19 -73 -83 41) -83]
Test Case: 867 | Input/Output: [(24 81 -77 -3) -77]
Test Case: 868 | Input/Output: [(-30 -56 86 39) -56]
Test Case: 869 | Input/Output: [(41 -82 -21 77) -82]
Test Case: 870 | Input/Output: [(23 9 75 15) 9]
Test Case: 871 | Input/Output: [(-87 93 37 43) -87]
Test Case: 872 | Input/Output: [(98 48 44 -11) -11]
Test Case: 873 | Input/Output: [(49 52 -84 -69) -84]
Test Case: 874 | Input/Output: [(77 97 92 -74) -74]
Test Case: 875 | Input/Output: [(-86 2 97 35) -86]
Test Case: 876 | Input/Output: [(-96 -84 -65 39) -96]
Test Case: 877 | Input/Output: [(-72 43 -69 85) -72]
Test Case: 878 | Input/Output: [(-19 -67 91 -75) -75]
Test Case: 879 | Input/Output: [(97 -89 67 -56) -89]
Test Case: 880 | Input/Output: [(64 7 52 -33) -33]
Test Case: 881 | Input/Output: [(100 84 25 8) 8]
Test Case: 882 | Input/Output: [(46 75 -33 14) -33]
Test Case: 883 | Input/Output: [(-49 37 64 -94) -94]
Test Case: 884 | Input/Output: [(-97 39 -74 -93) -97]
Test Case: 885 | Input/Output: [(-39 -84 37 69) -84]
Test Case: 886 | Input/Output: [(35 -98 -75 -55) -98]
Test Case: 887 | Input/Output: [(24 -91 46 -7) -91]
Test Case: 888 | Input/Output: [(40 -86 -100 -87) -100]
Test Case: 889 | Input/Output: [(25 56 -48 24) -48]
Test Case: 890 | Input/Output: [(69 -77 -84 -40) -84]
Test Case: 891 | Input/Output: [(-28 -30 93 69) -30]
Test Case: 892 | Input/Output: [(-76 -24 80 87) -76]
Test Case: 893 | Input/Output: [(33 -79 60 -88) -88]
Test Case: 894 | Input/Output: [(36 80 -18 48) -18]
Test Case: 895 | Input/Output: [(60 72 -49 -74) -74]
Test Case: 896 | Input/Output: [(-36 -79 -44 39) -79]
Test Case: 897 | Input/Output: [(20 -35 22 48) -35]
Test Case: 898 | Input/Output: [(66 -15 38 -15) -15]
Test Case: 899 | Input/Output: [(-50 -16 -53 -42) -53]
Test Case: 900 | Input/Output: [(75 -28 25 -7) -28]
Test Case: 901 | Input/Output: [(-87 22 -79 -79) -87]
Test Case: 902 | Input/Output: [(21 -62 49 -9) -62]
Test Case: 903 | Input/Output: [(-70 -35 94 -38) -70]
Test Case: 904 | Input/Output: [(-72 99 32 60) -72]
Test Case: 905 | Input/Output: [(0 18 -26 54) -26]
Test Case: 906 | Input/Output: [(-89 -100 26 -66) -100]
Test Case: 907 | Input/Output: [(-33 -57 -76 -8) -76]
Test Case: 908 | Input/Output: [(58 36 7 8) 7]
Test Case: 909 | Input/Output: [(-100 -99 45 -89) -100]
Test Case: 910 | Input/Output: [(58 -70 83 -65) -70]
Test Case: 911 | Input/Output: [(-96 -42 -10 -91) -96]
Test Case: 912 | Input/Output: [(59 65 -67 9) -67]
Test Case: 913 | Input/Output: [(94 75 -8 -29) -29]
Test Case: 914 | Input/Output: [(10 -78 10 85) -78]
Test Case: 915 | Input/Output: [(19 69 -77 62) -77]
Test Case: 916 | Input/Output: [(84 3 -38 -54) -54]
Test Case: 917 | Input/Output: [(-67 52 19 63) -67]
Test Case: 918 | Input/Output: [(13 44 -59 -92) -92]
Test Case: 919 | Input/Output: [(-81 -7 2 -83) -83]
Test Case: 920 | Input/Output: [(66 -70 -2 -25) -70]
Test Case: 921 | Input/Output: [(-34 71 81 3) -34]
Test Case: 922 | Input/Output: [(-99 81 -17 -7) -99]
Test Case: 923 | Input/Output: [(-73 -40 -48 -7) -73]
Test Case: 924 | Input/Output: [(-12 38 -77 -72) -77]
Test Case: 925 | Input/Output: [(23 -79 25 81) -79]
Test Case: 926 | Input/Output: [(75 41 39 50) 39]
Test Case: 927 | Input/Output: [(-84 -6 51 -89) -89]
Test Case: 928 | Input/Output: [(100 16 24 -99) -99]
Test Case: 929 | Input/Output: [(82 -65 48 11) -65]
Test Case: 930 | Input/Output: [(-80 -40 16 93) -80]
Test Case: 931 | Input/Output: [(-3 77 15 57) -3]
Test Case: 932 | Input/Output: [(40 97 73 -47) -47]
Test Case: 933 | Input/Output: [(-40 -24 2 45) -40]
Test Case: 934 | Input/Output: [(-83 74 35 38) -83]
Test Case: 935 | Input/Output: [(-38 38 -96 -15) -96]
Test Case: 936 | Input/Output: [(9 82 -16 -8) -16]
Test Case: 937 | Input/Output: [(-46 -34 -39 85) -46]
Test Case: 938 | Input/Output: [(78 42 1 -61) -61]
Test Case: 939 | Input/Output: [(26 36 -51 36) -51]
Test Case: 940 | Input/Output: [(-5 28 -82 73) -82]
Test Case: 941 | Input/Output: [(-28 -82 -78 -91) -91]
Test Case: 942 | Input/Output: [(86 30 -77 -17) -77]
Test Case: 943 | Input/Output: [(50 -7 -68 -20) -68]
Test Case: 944 | Input/Output: [(72 91 20 -90) -90]
Test Case: 945 | Input/Output: [(81 68 -77 70) -77]
Test Case: 946 | Input/Output: [(48 -61 -52 23) -61]
Test Case: 947 | Input/Output: [(12 -16 77 -99) -99]
Test Case: 948 | Input/Output: [(-77 6 66 -69) -77]
Test Case: 949 | Input/Output: [(72 9 -61 79) -61]
Test Case: 950 | Input/Output: [(-60 -86 -70 68) -86]
Test Case: 951 | Input/Output: [(-58 -11 60 -6) -58]
Test Case: 952 | Input/Output: [(-45 -29 54 24) -45]
Test Case: 953 | Input/Output: [(-5 -96 -72 -64) -96]
Test Case: 954 | Input/Output: [(-51 -35 -33 51) -51]
Test Case: 955 | Input/Output: [(-55 90 74 56) -55]
Test Case: 956 | Input/Output: [(4 46 44 68) 4]
Test Case: 957 | Input/Output: [(-62 99 92 -89) -89]
Test Case: 958 | Input/Output: [(-57 38 -76 -35) -76]
Test Case: 959 | Input/Output: [(-74 77 -2 94) -74]
Test Case: 960 | Input/Output: [(-45 -65 -80 -47) -80]
Test Case: 961 | Input/Output: [(-12 59 -57 -92) -92]
Test Case: 962 | Input/Output: [(30 -68 -1 25) -68]
Test Case: 963 | Input/Output: [(78 9 44 -50) -50]
Test Case: 964 | Input/Output: [(-93 19 91 89) -93]
Test Case: 965 | Input/Output: [(52 -50 36 -13) -50]
Test Case: 966 | Input/Output: [(52 86 -48 33) -48]
Test Case: 967 | Input/Output: [(76 65 98 51) 51]
Test Case: 968 | Input/Output: [(68 -52 -97 -4) -97]
Test Case: 969 | Input/Output: [(-36 -1 -48 -83) -83]
Test Case: 970 | Input/Output: [(22 -99 -16 -23) -99]
Test Case: 971 | Input/Output: [(36 -3 -34 -81) -81]
Test Case: 972 | Input/Output: [(63 -11 14 -74) -74]
Test Case: 973 | Input/Output: [(82 -21 -37 82) -37]
Test Case: 974 | Input/Output: [(7 1 5 -2) -2]
Test Case: 975 | Input/Output: [(3 -36 -51 91) -51]
Test Case: 976 | Input/Output: [(-8 -5 -43 79) -43]
Test Case: 977 | Input/Output: [(-17 -41 -88 20) -88]
Test Case: 978 | Input/Output: [(-95 35 -70 -65) -95]
Test Case: 979 | Input/Output: [(-34 -82 70 13) -82]
Test Case: 980 | Input/Output: [(-39 35 43 -73) -73]
Test Case: 981 | Input/Output: [(93 4 52 79) 4]
Test Case: 982 | Input/Output: [(-33 80 52 0) -33]
Test Case: 983 | Input/Output: [(-63 -17 23 9) -63]
Test Case: 984 | Input/Output: [(-8 -24 -2 87) -24]
Test Case: 985 | Input/Output: [(-8 -14 99 -7) -14]
Test Case: 986 | Input/Output: [(-92 58 -8 28) -92]
Test Case: 987 | Input/Output: [(-80 -90 -83 99) -90]
Test Case: 988 | Input/Output: [(-3 -70 28 43) -70]
Test Case: 989 | Input/Output: [(-37 71 77 -97) -97]
Test Case: 990 | Input/Output: [(-31 -86 -92 -66) -92]
Test Case: 991 | Input/Output: [(65 90 6 10) 6]
Test Case: 992 | Input/Output: [(98 -56 51 55) -56]
Test Case: 993 | Input/Output: [(-87 -86 56 20) -87]
Test Case: 994 | Input/Output: [(-90 -69 50 -68) -90]
Test Case: 995 | Input/Output: [(-24 -92 -86 -37) -92]
Test Case: 996 | Input/Output: [(23 38 33 74) 23]
Test Case: 997 | Input/Output: [(-23 24 52 30) -23]
Test Case: 998 | Input/Output: [(32 42 -43 92) -43]
Test Case: 999 | Input/Output: [(3 2 -27 27) -27]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -52 -74 -80 -19 -40 -9 -93 41 -105 99 31 2 64 111 -7 19
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-72 -72 -72 47] -72] [[8 -38 8 8] -38] [[88 88 88 69] 69] [[51 3 3 3] 3] [[44 44 -57 44] -57] [[-63 38 38 38] -63] [[4 4 4 -99] -99] [[-44 -44 -44 96] -44] [[-95 -95 -95 -79] -95] [[-65 -65 -65 -12] -65] [(-67 -67 -67 -67) -67] [(12 12 12 12) 12] [(55 55 55 55) 55] [(-20 -20 -20 -20) -20] [(-8 -8 -8 -8) -8] [(48 90 39 48) 39] [(34 0 80 48) 0] [(87 86 17 4) 4] [(4 8 10 61) 4] [(31 58 69 10) 10] [(33 100 77 19) 19] [(93 77 34 79) 34] [(45 40 21 40) 21] [(63 21 91 14) 14] [(33 48 74 82) 33] [(54 88 70 96) 54] [(4 35 28 96) 4] [(22 22 74 40) 22] [(4 76 98 39) 4] [(93 73 3 70) 3] [(65 83 68 42) 42] [(80 49 98 34) 34] [(53 73 74 56) 53] [(78 47 7 11) 7] [(94 88 78 47) 47] [(76 33 -76 -66) -76] [(-32 -18 -84 62) -84] [(37 -100 -96 11) -100] [(-2 67 15 26) -2] [(-49 2 -18 -72) -72] [(-8 38 80 62) -8] [(-52 -11 0 0) -52] [(26 26 10 70) 10] [(-44 -94 46 56) -94] [(-20 61 33 55) -20] [(-59 -39 100 -97) -97] [(7 91 42 49) 7] [(-93 50 29 46) -93] [(-69 81 -70 -25) -70] [(82 -79 92 -34) -79] [(44 -2 2 88) -2] [(-74 80 10 88) -74] [(21 -22 -69 48) -69] [(5 56 100 -57) -57] [(-26 -10 81 9) -26] [(-62 -10 -64 -56) -64] [(67 -20 -35 -29) -35] [(-18 47 -91 72) -91] [(84 62 33 -69) -69] [(85 21 -43 47) -43] [(39 -88 15 -16) -88] [(-10 24 69 -58) -58] [(18 21 21 -47) -47] [(-62 59 62 -45) -62] [(34 4 -24 -39) -39] [(88 -19 -37 45) -37] [(-60 -63 74 45) -63] [(8 27 -76 -81) -81] [(-29 -80 75 84) -80] [(81 -11 -59 -3) -59] [(40 2 -40 47) -40] [(-88 96 95 -35) -88] [(20 -36 14 -51) -51] [(-86 -37 -21 5) -86] [(3 -5 36 -21) -21] [(-84 49 -76 8) -84] [(42 27 99 -11) -11] [(47 42 84 -47) -47] [(-54 -49 63 -27) -54] [(1 26 -14 -65) -65] [(62 72 57 -77) -77] [(-74 -6 42 97) -74] [(-20 -97 -95 55) -97] [(-80 -25 -4 -94) -94] [(12 -15 2 81) -15] [(87 -91 38 -41) -91] [(36 -80 42 -67) -80] [(3 -89 -26 60) -89] [(8 -76 -92 -75) -92] [(17 56 35 -94) -94] [(-99 -68 -26 -72) -99] [(-25 -22 93 23) -25] [(76 -34 99 28) -34] [(-56 69 -97 -88) -97] [(22 -49 87 -30) -49])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 58                 
Correct output: 19                  | Program output: 100                
Correct output: 34                  | Program output: 77                 
Correct output: 21                  | Program output: 40                 
Correct output: 14                  | Program output: 21                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 88                 
Correct output: 4                   | Program output: 35                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 76                 
Correct output: 3                   | Program output: 73                 
Correct output: 42                  | Program output: 83                 
Correct output: 34                  | Program output: 49                 
Correct output: 53                  | Program output: 73                 
Correct output: 7                   | Program output: 47                 
Correct output: 47                  | Program output: 88                 
Correct output: -76                 | Program output: 33                 
Correct output: -84                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 67                 
Correct output: -72                 | Program output: 2                  
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: -11                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 61                 
Correct output: -97                 | Program output: -39                
Correct output: 7                   | Program output: 91                 
Correct output: -93                 | Program output: 50                 
Correct output: -70                 | Program output: 81                 
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 80                 
Correct output: -69                 | Program output: -22                
Correct output: -57                 | Program output: 56                 
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -10                
Correct output: -35                 | Program output: -20                
Correct output: -91                 | Program output: 47                 
Correct output: -69                 | Program output: 62                 
Correct output: -43                 | Program output: 21                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 24                 
Correct output: -47                 | Program output: 21                 
Correct output: -62                 | Program output: 59                 
Correct output: -39                 | Program output: 4                  
Correct output: -37                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: 27                 
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -11                
Correct output: -40                 | Program output: 2                  
Correct output: -88                 | Program output: 96                 
Correct output: -51                 | Program output: -36                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -5                 
Correct output: -84                 | Program output: 49                 
Correct output: -11                 | Program output: 27                 
Correct output: -47                 | Program output: 42                 
Correct output: -54                 | Program output: -49                
Correct output: -65                 | Program output: 26                 
Correct output: -77                 | Program output: 72                 
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -25                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -76                
Correct output: -94                 | Program output: 56                 
Correct output: -99                 | Program output: -68                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: 69                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction tag_integer_996} {:close 1, :instruction in2} {:close 0, :instruction tagged_475} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_601} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 67} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min})
Lexicase best program: (exec_yankdup tag_integer_996 in2 tagged_475 integer_fromboolean print_integer tagged_601 integer_dup_items integer_min integer_shove exec_k (exec_s (integer_div boolean_xor) (exec_stackdepth boolean_dup_items in1 exec_y_when_autoconstructing (67 boolean_shove boolean_frominteger)) (exec_swap () (exec_while (exec_do*times (integer_min))))) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction tag_integer_996} {:close 1, :instruction in2} {:close 0, :instruction tagged_475} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_601} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 67} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min})
Zero cases best program: (exec_yankdup tag_integer_996 in2 tagged_475 integer_fromboolean print_integer tagged_601 integer_dup_items integer_min integer_shove exec_k (exec_s (integer_div boolean_xor) (exec_stackdepth boolean_dup_items in1 exec_y_when_autoconstructing (67 boolean_shove boolean_frominteger)) (exec_swap () (exec_while (exec_do*times (integer_min))))) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 2 5 3 5 5 5 5 3 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (16 2 5 3 5 5 5 5 3 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_pop () exec_do*count (integer_add boolean_and) exec_dup_items boolean_shove boolean_not integer_swap boolean_rot in2 integer_fromboolean boolean_and exec_do*while () boolean_yankdup print_integer boolean_invert_first_then_and integer_rot integer_gte boolean_invert_first_then_and)
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 9.949
Median total errors in population: 10
Error averages by case: (0.984 0.998 0.995 0.997 0.995 0.995 0.995 0.995 0.997 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.231
Average program size in population (points): 66.515
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 431434
--- Timings ---
Current time: 1559594105066 milliseconds
Total Time:           2.2 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.7 seconds, 32.4%
Fitness Testing:      1.4 seconds, 63.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 51                 
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 48                 
Correct output: 0                   | Program output: 34                 
Correct output: 4                   | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 19                  | Program output: 33                 
Correct output: 34                  | Program output: 93                 
Correct output: 21                  | Program output: 45                 
Correct output: 14                  | Program output: 63                 
Correct output: 33                  | Program output: 33                 
Correct output: 54                  | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 93                 
Correct output: 42                  | Program output: 65                 
Correct output: 34                  | Program output: 80                 
Correct output: 53                  | Program output: 53                 
Correct output: 7                   | Program output: 78                 
Correct output: 47                  | Program output: 94                 
Correct output: -76                 | Program output: 76                 
Correct output: -84                 | Program output: -32                
Correct output: -100                | Program output: 37                 
Correct output: -2                  | Program output: -2                 
Correct output: -72                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -52                 | Program output: -52                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -44                
Correct output: -20                 | Program output: -20                
Correct output: -97                 | Program output: -59                
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -69                
Correct output: -79                 | Program output: 82                 
Correct output: -2                  | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 21                 
Correct output: -57                 | Program output: 5                  
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -62                
Correct output: -35                 | Program output: 67                 
Correct output: -91                 | Program output: -18                
Correct output: -69                 | Program output: 84                 
Correct output: -43                 | Program output: 85                 
Correct output: -88                 | Program output: 39                 
Correct output: -58                 | Program output: -10                
Correct output: -47                 | Program output: 18                 
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: 34                 
Correct output: -37                 | Program output: 88                 
Correct output: -63                 | Program output: -60                
Correct output: -81                 | Program output: 8                  
Correct output: -80                 | Program output: -29                
Correct output: -59                 | Program output: 81                 
Correct output: -40                 | Program output: 40                 
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -11                 | Program output: 42                 
Correct output: -47                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -65                 | Program output: 1                  
Correct output: -77                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -20                
Correct output: -94                 | Program output: -80                
Correct output: -15                 | Program output: 12                 
Correct output: -91                 | Program output: 87                 
Correct output: -80                 | Program output: 36                 
Correct output: -89                 | Program output: 3                  
Correct output: -92                 | Program output: 8                  
Correct output: -94                 | Program output: 17                 
Correct output: -99                 | Program output: -99                
Correct output: -25                 | Program output: -25                
Correct output: -34                 | Program output: 76                 
Correct output: -97                 | Program output: -56                
Correct output: -49                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_310} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_473} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_675} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_sub in1 integer_max print_integer integer_lte integer_mult exec_stackdepth exec_eq exec_y (exec_do*count (print_integer exec_flush boolean_swap) exec_k (exec_yankdup exec_while (boolean_rot) exec_y_when_autoconstructing (exec_rot (integer_rot) (integer_div exec_while (exec_y (boolean_and) integer_yank exec_stackdepth integer_dec) integer_dup_items integer_mult integer_max boolean_flush boolean_not integer_dup_items boolean_not integer_min) (exec_empty exec_dup_times (boolean_swap exec_shove () exec_shove (integer_lt print_exec (exec_flush boolean_swap) integer_lte integer_lte integer_lte exec_while (exec_when (in4 in1 integer_dup integer_shove tagged_310 exec_k_when_autoconstructing (in1 integer_lte in4) (integer_sub) integer_yankdup exec_eq print_integer) tag_boolean_473 integer_mod boolean_xor boolean_swap exec_do*times (integer_yankdup tag_exec_675 (exec_empty exec_noop integer_yankdup exec_y_when_autoconstructing (exec_when (integer_max integer_max)) exec_do*count (integer_div) integer_mult integer_max exec_s (boolean_swap integer_sub exec_pop ()) () ())))))))) ()))
Lexicase best errors: [0 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 113
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_310} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_473} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_675} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_sub in1 integer_max print_integer integer_lte integer_mult exec_stackdepth exec_eq exec_y (exec_do*count (print_integer exec_flush boolean_swap) exec_k (exec_yankdup exec_while (boolean_rot) exec_y_when_autoconstructing (exec_rot (integer_rot) (integer_div exec_while (exec_y (boolean_and) integer_yank exec_stackdepth integer_dec) integer_dup_items integer_mult integer_max boolean_flush boolean_not integer_dup_items boolean_not integer_min) (exec_empty exec_dup_times (boolean_swap exec_shove () exec_shove (integer_lt print_exec (exec_flush boolean_swap) integer_lte integer_lte integer_lte exec_while (exec_when (in4 in1 integer_dup integer_shove tagged_310 exec_k_when_autoconstructing (in1 integer_lte in4) (integer_sub) integer_yankdup exec_eq print_integer) tag_boolean_473 integer_mod boolean_xor boolean_swap exec_do*times (integer_yankdup tag_exec_675 (exec_empty exec_noop integer_yankdup exec_y_when_autoconstructing (exec_when (integer_max integer_max)) exec_do*count (integer_div) integer_mult integer_max exec_s (boolean_swap integer_sub exec_pop ()) () ())))))))) ()))
Zero cases best errors: [0 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 113
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 186 186 623 145 173 171 128 144 185)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (170 186 186 623 145 173 171 128 144 185)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction -33} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction -22} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop})
Best program: (integer_lte boolean_or integer_gt in1 boolean_invert_first_then_and integer_gte exec_swap (print_integer integer_swap integer_swap) () integer_inc in3 integer_eq integer_pop exec_dup (exec_flush integer_sub boolean_dup_items) in1 boolean_dup boolean_yank exec_noop print_exec (boolean_dup_times integer_lt integer_mult integer_gte exec_do*range (exec_if (integer_shove) (boolean_eq exec_k () (integer_gte exec_y_when_autoconstructing () -33) integer_fromboolean boolean_dup_times) boolean_or integer_fromboolean exec_shove (integer_yankdup exec_rot (exec_if (integer_dup exec_when (exec_pop (-22 integer_stackdepth exec_dup () print_newline integer_yank boolean_pop boolean_eq exec_dup_items boolean_dup_items in4) integer_yank exec_when () integer_add exec_s_when_autoconstructing (boolean_and) (integer_min exec_noop) ())) ()) () ()))))
Errors: [0 1 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 87
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.889
Median total errors in population: 8
Error averages by case: (0.83 0.814 0.814 0.377 0.855 0.827 0.829 0.872 0.856 0.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.444
Average program size in population (points): 65.489
Average percent parens in population: 0.264
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 873981
--- Timings ---
Current time: 1559594106833 milliseconds
Total Time:           4.1 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         1.7 seconds, 42.4%
Fitness Testing:      1.9 seconds, 47.2%
Report:               0.3 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 51                 
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 48                 
Correct output: 0                   | Program output: 34                 
Correct output: 4                   | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 19                  | Program output: 33                 
Correct output: 34                  | Program output: 93                 
Correct output: 21                  | Program output: 45                 
Correct output: 14                  | Program output: 63                 
Correct output: 33                  | Program output: 33                 
Correct output: 54                  | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 93                 
Correct output: 42                  | Program output: 65                 
Correct output: 34                  | Program output: 80                 
Correct output: 53                  | Program output: 53                 
Correct output: 7                   | Program output: 78                 
Correct output: 47                  | Program output: 94                 
Correct output: -76                 | Program output: 76                 
Correct output: -84                 | Program output: -32                
Correct output: -100                | Program output: 37                 
Correct output: -2                  | Program output: -2                 
Correct output: -72                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -52                 | Program output: -52                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -44                
Correct output: -20                 | Program output: -20                
Correct output: -97                 | Program output: -59                
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -69                
Correct output: -79                 | Program output: 82                 
Correct output: -2                  | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 21                 
Correct output: -57                 | Program output: 5                  
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -62                
Correct output: -35                 | Program output: 67                 
Correct output: -91                 | Program output: -18                
Correct output: -69                 | Program output: 84                 
Correct output: -43                 | Program output: 85                 
Correct output: -88                 | Program output: 39                 
Correct output: -58                 | Program output: -10                
Correct output: -47                 | Program output: 18                 
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: 34                 
Correct output: -37                 | Program output: 88                 
Correct output: -63                 | Program output: -60                
Correct output: -81                 | Program output: 8                  
Correct output: -80                 | Program output: -29                
Correct output: -59                 | Program output: 81                 
Correct output: -40                 | Program output: 40                 
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -11                 | Program output: 42                 
Correct output: -47                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -65                 | Program output: 1                  
Correct output: -77                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -20                
Correct output: -94                 | Program output: -80                
Correct output: -15                 | Program output: 12                 
Correct output: -91                 | Program output: 87                 
Correct output: -80                 | Program output: 36                 
Correct output: -89                 | Program output: 3                  
Correct output: -92                 | Program output: 8                  
Correct output: -94                 | Program output: 17                 
Correct output: -99                 | Program output: -99                
Correct output: -25                 | Program output: -25                
Correct output: -34                 | Program output: 76                 
Correct output: -97                 | Program output: -56                
Correct output: -49                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_310} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_473} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_sub in1 boolean_rot integer_max print_integer integer_mult boolean_pop exec_stackdepth exec_eq exec_y (exec_do*count (print_integer print_integer exec_flush boolean_swap) exec_k (integer_gte exec_while () exec_yankdup exec_y_when_autoconstructing (exec_do*times (integer_empty integer_div exec_while (exec_y (boolean_and) integer_yank exec_if (exec_stackdepth integer_dec) (exec_rot (integer_dup_items integer_mult integer_max boolean_flush integer_inc boolean_not integer_dup_items boolean_not integer_min) (integer_rot exec_dup_times (boolean_swap exec_shove () integer_shove) exec_s (exec_shove (integer_lt print_exec (exec_flush integer_inc boolean_swap) integer_lte integer_lte tagged_875 integer_lte exec_dup_items exec_while (in4 in1 print_newline integer_shove tagged_310 exec_k_when_autoconstructing (in1 integer_lte in4) (integer_min integer_sub exec_eq tag_boolean_473 boolean_xor boolean_swap integer_flush) exec_do*times (integer_yankdup exec_empty exec_noop integer_yankdup exec_y_when_autoconstructing (exec_when (integer_max integer_max)) exec_do*count (integer_mult exec_s (print_boolean boolean_swap integer_sub integer_inc exec_pop ()) () ()))))) () ()) ()))))) ()))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 124
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_310} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_473} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_sub in1 boolean_rot integer_max print_integer integer_mult boolean_pop exec_stackdepth exec_eq exec_y (exec_do*count (print_integer print_integer exec_flush boolean_swap) exec_k (integer_gte exec_while () exec_yankdup exec_y_when_autoconstructing (exec_do*times (integer_empty integer_div exec_while (exec_y (boolean_and) integer_yank exec_if (exec_stackdepth integer_dec) (exec_rot (integer_dup_items integer_mult integer_max boolean_flush integer_inc boolean_not integer_dup_items boolean_not integer_min) (integer_rot exec_dup_times (boolean_swap exec_shove () integer_shove) exec_s (exec_shove (integer_lt print_exec (exec_flush integer_inc boolean_swap) integer_lte integer_lte tagged_875 integer_lte exec_dup_items exec_while (in4 in1 print_newline integer_shove tagged_310 exec_k_when_autoconstructing (in1 integer_lte in4) (integer_min integer_sub exec_eq tag_boolean_473 boolean_xor boolean_swap integer_flush) exec_do*times (integer_yankdup exec_empty exec_noop integer_yankdup exec_y_when_autoconstructing (exec_when (integer_max integer_max)) exec_do*count (integer_mult exec_s (print_boolean boolean_swap integer_sub integer_inc exec_pop ()) () ()))))) () ()) ()))))) ()))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 124
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 60 60 61 202 596 202 158 237 155)
Population mean number of elite cases: 1.93
Count of perfect (error zero) individuals by case: (202 60 60 61 202 596 202 158 237 155)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 1, :instruction -33} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction -22} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction 17} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush})
Best program: (integer_lte boolean_or integer_gt in1 boolean_invert_first_then_and integer_gte print_integer integer_swap integer_inc in3 integer_eq integer_mod integer_pop exec_dup (exec_flush integer_sub boolean_dup_items) in1 boolean_dup exec_noop print_exec (integer_lt integer_gte exec_do*range (integer_gt integer_shove) boolean_pop) exec_k () (boolean_or -33) boolean_dup_times boolean_or exec_dup (integer_fromboolean exec_shove (exec_rot (exec_if (integer_dup integer_dup) (integer_div exec_when (exec_pop (boolean_rot -22 integer_stackdepth exec_dup () print_newline boolean_dup_items integer_yank boolean_pop 17 exec_dup_items boolean_dup_items integer_yank exec_when () integer_mod integer_add exec_s_when_autoconstructing (print_exec (boolean_and) integer_min integer_div exec_noop exec_s () (boolean_flush) ()) () ())))) () ())))
Errors: [0 1 1 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 65
Size: 89
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 8.067
Median total errors in population: 8
Error averages by case: (0.798 0.94 0.94 0.939 0.798 0.404 0.798 0.842 0.763 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.743
Average program size in population (points): 62.907
Average percent parens in population: 0.262
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1288424
--- Timings ---
Current time: 1559594108702 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.9 seconds, 48.8%
Fitness Testing:      2.4 seconds, 40.6%
Report:               0.5 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 58                 
Correct output: 19                  | Program output: 100                
Correct output: 34                  | Program output: 77                 
Correct output: 21                  | Program output: 40                 
Correct output: 14                  | Program output: 21                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 88                 
Correct output: 4                   | Program output: 35                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 76                 
Correct output: 3                   | Program output: 73                 
Correct output: 42                  | Program output: 83                 
Correct output: 34                  | Program output: 49                 
Correct output: 53                  | Program output: 73                 
Correct output: 7                   | Program output: 47                 
Correct output: 47                  | Program output: 88                 
Correct output: -76                 | Program output: 33                 
Correct output: -84                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 67                 
Correct output: -72                 | Program output: 2                  
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: -11                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 61                 
Correct output: -97                 | Program output: -39                
Correct output: 7                   | Program output: 91                 
Correct output: -93                 | Program output: 50                 
Correct output: -70                 | Program output: 81                 
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 80                 
Correct output: -69                 | Program output: -22                
Correct output: -57                 | Program output: 56                 
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -10                
Correct output: -35                 | Program output: -20                
Correct output: -91                 | Program output: 47                 
Correct output: -69                 | Program output: 62                 
Correct output: -43                 | Program output: 21                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 24                 
Correct output: -47                 | Program output: 21                 
Correct output: -62                 | Program output: 59                 
Correct output: -39                 | Program output: 4                  
Correct output: -37                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: 27                 
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -11                
Correct output: -40                 | Program output: 2                  
Correct output: -88                 | Program output: 96                 
Correct output: -51                 | Program output: -36                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -5                 
Correct output: -84                 | Program output: 49                 
Correct output: -11                 | Program output: 27                 
Correct output: -47                 | Program output: 42                 
Correct output: -54                 | Program output: -49                
Correct output: -65                 | Program output: 26                 
Correct output: -77                 | Program output: 72                 
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -25                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -76                
Correct output: -94                 | Program output: 56                 
Correct output: -99                 | Program output: -68                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: 69                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_pop () boolean_pop exec_do*count (exec_dup_items boolean_shove boolean_not integer_swap boolean_rot in2 boolean_and) boolean_dup_times boolean_yankdup print_integer boolean_invert_first_then_and integer_rot integer_shove integer_gte boolean_invert_first_then_and)
Lexicase best errors: [0 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_pop () boolean_pop exec_do*count (exec_dup_items boolean_shove boolean_not integer_swap boolean_rot in2 boolean_and) boolean_dup_times boolean_yankdup print_integer boolean_invert_first_then_and integer_rot integer_shove integer_gte boolean_invert_first_then_and)
Zero cases best errors: [0 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 85 86 171 462 210 168 211 482 308)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (482 85 86 171 462 210 168 211 482 308)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction tagged_475} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_618} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 67} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min})
Best program: (exec_yankdup boolean_stackdepth in2 tagged_475 print_integer integer_dup_items tagged_618 integer_shove exec_k (exec_s (boolean_xor) (boolean_dup_items exec_stackdepth exec_y_when_autoconstructing (67 boolean_shove exec_dup_times (boolean_frominteger)) exec_swap () (exec_while (exec_do*times (integer_min)))) ()) ())
Errors: [0 0 0 1 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.335
Median total errors in population: 7
Error averages by case: (0.518 0.915 0.914 0.829 0.538 0.79 0.832 0.789 0.518 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.124
Average program size in population (points): 72.284
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1752524
--- Timings ---
Current time: 1559594111043 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.2 seconds, 52.3%
Fitness Testing:      3.0 seconds, 37.5%
Report:               0.7 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -72                 | Program output: 47                 
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 96                 
Correct output: -95                 | Program output: -79                
Correct output: -65                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 48                 
Correct output: 0                   | Program output: 48                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 79                 
Correct output: 21                  | Program output: 40                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 82                 
Correct output: 54                  | Program output: 96                 
Correct output: 4                   | Program output: 96                 
Correct output: 22                  | Program output: 40                 
Correct output: 4                   | Program output: 39                 
Correct output: 3                   | Program output: 70                 
Correct output: 42                  | Program output: 42                 
Correct output: 34                  | Program output: 34                 
Correct output: 53                  | Program output: 56                 
Correct output: 7                   | Program output: 11                 
Correct output: 47                  | Program output: 47                 
Correct output: -76                 | Program output: -66                
Correct output: -84                 | Program output: 62                 
Correct output: -100                | Program output: 11                 
Correct output: -2                  | Program output: 26                 
Correct output: -72                 | Program output: -72                
Correct output: -8                  | Program output: 62                 
Correct output: -52                 | Program output: 0                  
Correct output: 10                  | Program output: 70                 
Correct output: -94                 | Program output: 56                 
Correct output: -20                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: 46                 
Correct output: -70                 | Program output: -25                
Correct output: -79                 | Program output: -34                
Correct output: -2                  | Program output: 88                 
Correct output: -74                 | Program output: 88                 
Correct output: -69                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 9                  
Correct output: -64                 | Program output: -56                
Correct output: -35                 | Program output: -29                
Correct output: -91                 | Program output: 72                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: 47                 
Correct output: -88                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -62                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -37                 | Program output: 45                 
Correct output: -63                 | Program output: 45                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 84                 
Correct output: -59                 | Program output: -3                 
Correct output: -40                 | Program output: 47                 
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: -51                
Correct output: -86                 | Program output: 5                  
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: 8                  
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 97                 
Correct output: -97                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -15                 | Program output: 81                 
Correct output: -91                 | Program output: -41                
Correct output: -80                 | Program output: -67                
Correct output: -89                 | Program output: 60                 
Correct output: -92                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -72                
Correct output: -25                 | Program output: 23                 
Correct output: -34                 | Program output: 28                 
Correct output: -97                 | Program output: -88                
Correct output: -49                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_905} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction 84} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_yankdup boolean_dup_times integer_empty boolean_invert_first_then_and integer_lt boolean_frominteger exec_y (boolean_and exec_dup_times (in2 in4 print_integer exec_y (in1 exec_noop) tagged_905 boolean_dup_items) exec_k_when_autoconstructing () (integer_max) integer_gte integer_sub boolean_stackdepth boolean_yankdup integer_fromboolean exec_when () integer_eq exec_noop in2 boolean_not integer_lt boolean_xor integer_max boolean_stackdepth) integer_pop exec_when () exec_stackdepth integer_pop exec_y () exec_yankdup 84 boolean_dup exec_stackdepth print_integer exec_eq in3 print_exec (integer_empty integer_swap boolean_or exec_when (boolean_frominteger integer_stackdepth in4) exec_do*count (boolean_or exec_do*range (integer_lt))))
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_905} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction 84} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_yankdup boolean_dup_times integer_empty boolean_invert_first_then_and integer_lt boolean_frominteger exec_y (boolean_and exec_dup_times (in2 in4 print_integer exec_y (in1 exec_noop) tagged_905 boolean_dup_items) exec_k_when_autoconstructing () (integer_max) integer_gte integer_sub boolean_stackdepth boolean_yankdup integer_fromboolean exec_when () integer_eq exec_noop in2 boolean_not integer_lt boolean_xor integer_max boolean_stackdepth) integer_pop exec_when () exec_stackdepth integer_pop exec_y () exec_yankdup 84 boolean_dup exec_stackdepth print_integer exec_eq in3 print_exec (integer_empty integer_swap boolean_or exec_when (boolean_frominteger integer_stackdepth in4) exec_do*count (boolean_or exec_do*range (integer_lt))))
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (683 146 320 678 145 324 211 214 683 145)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (683 146 320 678 145 324 211 214 683 145)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_250} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction tagged_905} {:close 1, :instruction boolean_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction 20} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_exec_506} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_shove})
Best program: (integer_max boolean_yankdup boolean_stackdepth boolean_dup_times integer_empty integer_mult integer_shove boolean_frominteger exec_y (boolean_and exec_dup_times (in2 exec_noop) in4 print_integer tag_boolean_250 exec_y (in1 tagged_905 boolean_eq) boolean_empty) 20 integer_gte integer_fromboolean exec_when () integer_eq in3 exec_noop integer_lt in1 boolean_xor exec_when () boolean_eq tag_exec_506 () exec_yankdup exec_stackdepth print_integer print_exec (integer_mod) exec_do*times (integer_mod) exec_when (exec_do*count (exec_do*range (boolean_stackdepth exec_yank)) exec_shove ()))
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 60
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.451
Median total errors in population: 5
Error averages by case: (0.317 0.854 0.68 0.322 0.855 0.676 0.789 0.786 0.317 0.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.891
Average program size in population (points): 43.756
Average percent parens in population: 0.257
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2182454
--- Timings ---
Current time: 1559594113617 milliseconds
Total Time:          10.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.5 seconds, 53.7%
Fitness Testing:      3.5 seconds, 33.9%
Report:               1.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 80                 
Correct output: 4                   | Program output: 17                 
Correct output: 4                   | Program output: 10                 
Correct output: 10                  | Program output: 69                 
Correct output: 19                  | Program output: 77                 
Correct output: 34                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 91                 
Correct output: 33                  | Program output: 74                 
Correct output: 54                  | Program output: 70                 
Correct output: 4                   | Program output: 28                 
Correct output: 22                  | Program output: 74                 
Correct output: 4                   | Program output: 98                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 68                 
Correct output: 34                  | Program output: 98                 
Correct output: 53                  | Program output: 74                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 78                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -96                
Correct output: -2                  | Program output: 15                 
Correct output: -72                 | Program output: -18                
Correct output: -8                  | Program output: 80                 
Correct output: -52                 | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: 46                 
Correct output: -20                 | Program output: 33                 
Correct output: -97                 | Program output: 100                
Correct output: 7                   | Program output: 42                 
Correct output: -93                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 92                 
Correct output: -2                  | Program output: 2                  
Correct output: -74                 | Program output: 10                 
Correct output: -69                 | Program output: -69                
Correct output: -57                 | Program output: 100                
Correct output: -26                 | Program output: 81                 
Correct output: -64                 | Program output: -64                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 33                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: 15                 
Correct output: -58                 | Program output: 69                 
Correct output: -47                 | Program output: 21                 
Correct output: -62                 | Program output: 62                 
Correct output: -39                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -63                 | Program output: 74                 
Correct output: -81                 | Program output: -76                
Correct output: -80                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: 95                 
Correct output: -51                 | Program output: 14                 
Correct output: -86                 | Program output: -21                
Correct output: -21                 | Program output: 36                 
Correct output: -84                 | Program output: -76                
Correct output: -11                 | Program output: 99                 
Correct output: -47                 | Program output: 84                 
Correct output: -54                 | Program output: 63                 
Correct output: -65                 | Program output: -14                
Correct output: -77                 | Program output: 57                 
Correct output: -74                 | Program output: 42                 
Correct output: -97                 | Program output: -95                
Correct output: -94                 | Program output: -4                 
Correct output: -15                 | Program output: 2                  
Correct output: -91                 | Program output: 38                 
Correct output: -80                 | Program output: 42                 
Correct output: -89                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 35                 
Correct output: -99                 | Program output: -26                
Correct output: -25                 | Program output: 93                 
Correct output: -34                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 3, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_178} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_yank exec_if (integer_dup in4) (integer_rot boolean_not exec_y (print_integer) boolean_invert_first_then_and integer_eq) exec_yankdup boolean_invert_first_then_and in1 exec_do*count (exec_eq boolean_dup_items integer_eq integer_yank) integer_flush exec_dup_items boolean_shove integer_dup_items exec_if (integer_gte) (exec_y () integer_stackdepth boolean_or exec_k (boolean_xor boolean_flush) (exec_swap (integer_stackdepth exec_pop (integer_dec) exec_y (in3 boolean_stackdepth integer_yankdup exec_shove (integer_dup exec_swap (boolean_stackdepth boolean_empty exec_swap (integer_dup_times boolean_shove integer_swap exec_when (exec_noop) boolean_dup_items exec_when (integer_yank boolean_not integer_flush integer_yank) boolean_dup_items integer_min exec_swap () (boolean_dup_items exec_if (exec_yank exec_do*times () integer_dec) (boolean_dup_times exec_dup_items exec_s (boolean_not integer_stackdepth integer_mult exec_y_when_autoconstructing (boolean_xor integer_eq tag_integer_178 boolean_empty boolean_rot exec_k_when_autoconstructing (boolean_rot) ())) () ()))) ()) ()))) ())))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 109
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 3, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_178} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_yank exec_if (integer_dup in4) (integer_rot boolean_not exec_y (print_integer) boolean_invert_first_then_and integer_eq) exec_yankdup boolean_invert_first_then_and in1 exec_do*count (exec_eq boolean_dup_items integer_eq integer_yank) integer_flush exec_dup_items boolean_shove integer_dup_items exec_if (integer_gte) (exec_y () integer_stackdepth boolean_or exec_k (boolean_xor boolean_flush) (exec_swap (integer_stackdepth exec_pop (integer_dec) exec_y (in3 boolean_stackdepth integer_yankdup exec_shove (integer_dup exec_swap (boolean_stackdepth boolean_empty exec_swap (integer_dup_times boolean_shove integer_swap exec_when (exec_noop) boolean_dup_items exec_when (integer_yank boolean_not integer_flush integer_yank) boolean_dup_items integer_min exec_swap () (boolean_dup_items exec_if (exec_yank exec_do*times () integer_dec) (boolean_dup_times exec_dup_items exec_s (boolean_not integer_stackdepth integer_mult exec_y_when_autoconstructing (boolean_xor integer_eq tag_integer_178 boolean_empty boolean_rot exec_k_when_autoconstructing (boolean_rot) ())) () ()))) ()) ()))) ())))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 109
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 198 189 185 281 4 185 670 682 281)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (280 198 189 185 281 4 185 670 682 281)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction in1})
Best program: (exec_y_when_autoconstructing (exec_dup (boolean_or exec_dup_times () boolean_frominteger) boolean_flush in3 print_integer) in1)
Errors: [1 1 0 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 9
Size: 13
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.045
Median total errors in population: 7
Error averages by case: (0.72 0.802 0.811 0.815 0.719 0.996 0.815 0.33 0.318 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.581
Average program size in population (points): 48.617
Average percent parens in population: 0.257
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2642486
--- Timings ---
Current time: 1559594115420 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 52.5%
Fitness Testing:      4.0 seconds, 31.1%
Report:               2.0 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 51                 
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 48                 
Correct output: 0                   | Program output: 34                 
Correct output: 4                   | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 19                  | Program output: 33                 
Correct output: 34                  | Program output: 93                 
Correct output: 21                  | Program output: 45                 
Correct output: 14                  | Program output: 63                 
Correct output: 33                  | Program output: 33                 
Correct output: 54                  | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 93                 
Correct output: 42                  | Program output: 65                 
Correct output: 34                  | Program output: 80                 
Correct output: 53                  | Program output: 53                 
Correct output: 7                   | Program output: 78                 
Correct output: 47                  | Program output: 94                 
Correct output: -76                 | Program output: 76                 
Correct output: -84                 | Program output: -32                
Correct output: -100                | Program output: 37                 
Correct output: -2                  | Program output: -2                 
Correct output: -72                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -52                 | Program output: -52                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -44                
Correct output: -20                 | Program output: -20                
Correct output: -97                 | Program output: -59                
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -69                
Correct output: -79                 | Program output: 82                 
Correct output: -2                  | Program output: 44                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 21                 
Correct output: -57                 | Program output: 5                  
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -62                
Correct output: -35                 | Program output: 67                 
Correct output: -91                 | Program output: -18                
Correct output: -69                 | Program output: 84                 
Correct output: -43                 | Program output: 85                 
Correct output: -88                 | Program output: 39                 
Correct output: -58                 | Program output: -10                
Correct output: -47                 | Program output: 18                 
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: 34                 
Correct output: -37                 | Program output: 88                 
Correct output: -63                 | Program output: -60                
Correct output: -81                 | Program output: 8                  
Correct output: -80                 | Program output: -29                
Correct output: -59                 | Program output: 81                 
Correct output: -40                 | Program output: 40                 
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 20                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -11                 | Program output: 42                 
Correct output: -47                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -65                 | Program output: 1                  
Correct output: -77                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -20                
Correct output: -94                 | Program output: -80                
Correct output: -15                 | Program output: 12                 
Correct output: -91                 | Program output: 87                 
Correct output: -80                 | Program output: 36                 
Correct output: -89                 | Program output: 3                  
Correct output: -92                 | Program output: 8                  
Correct output: -94                 | Program output: 17                 
Correct output: -99                 | Program output: -99                
Correct output: -25                 | Program output: -25                
Correct output: -34                 | Program output: 76                 
Correct output: -97                 | Program output: -56                
Correct output: -49                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction in1})
Lexicase best program: (integer_flush exec_y_when_autoconstructing (exec_dup (boolean_frominteger) integer_eq) integer_rot exec_yank boolean_yank boolean_pop integer_mult in1 boolean_flush print_integer in1)
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction in1})
Zero cases best program: (integer_flush exec_y_when_autoconstructing (exec_dup (boolean_frominteger) integer_eq) integer_rot exec_yank boolean_yank boolean_pop integer_mult in1 boolean_flush print_integer in1)
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 88 735 274 100 734 274 87 87 364)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (99 88 735 274 100 734 274 87 87 364)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction in1})
Best program: (exec_y_when_autoconstructing (exec_dup (boolean_frominteger) integer_eq) integer_rot exec_yank boolean_pop exec_y_when_autoconstructing (integer_mult in1) boolean_flush print_integer in1)
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.158
Median total errors in population: 7
Error averages by case: (0.901 0.912 0.265 0.726 0.9 0.266 0.726 0.913 0.913 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.611
Average program size in population (points): 47.209
Average percent parens in population: 0.257
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3068385
--- Timings ---
Current time: 1559594117198 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.9 seconds, 54.3%
Fitness Testing:      4.4 seconds, 30.1%
Report:               2.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 58                 
Correct output: 19                  | Program output: 100                
Correct output: 34                  | Program output: 77                 
Correct output: 21                  | Program output: 40                 
Correct output: 14                  | Program output: 21                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 88                 
Correct output: 4                   | Program output: 35                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 76                 
Correct output: 3                   | Program output: 73                 
Correct output: 42                  | Program output: 83                 
Correct output: 34                  | Program output: 49                 
Correct output: 53                  | Program output: 73                 
Correct output: 7                   | Program output: 47                 
Correct output: 47                  | Program output: 88                 
Correct output: -76                 | Program output: 33                 
Correct output: -84                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 67                 
Correct output: -72                 | Program output: 2                  
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: -11                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 61                 
Correct output: -97                 | Program output: -39                
Correct output: 7                   | Program output: 91                 
Correct output: -93                 | Program output: 50                 
Correct output: -70                 | Program output: 81                 
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 80                 
Correct output: -69                 | Program output: -22                
Correct output: -57                 | Program output: 56                 
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -10                
Correct output: -35                 | Program output: -20                
Correct output: -91                 | Program output: 47                 
Correct output: -69                 | Program output: 62                 
Correct output: -43                 | Program output: 21                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 24                 
Correct output: -47                 | Program output: 21                 
Correct output: -62                 | Program output: 59                 
Correct output: -39                 | Program output: 4                  
Correct output: -37                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: 27                 
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -11                
Correct output: -40                 | Program output: 2                  
Correct output: -88                 | Program output: 96                 
Correct output: -51                 | Program output: -36                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -5                 
Correct output: -84                 | Program output: 49                 
Correct output: -11                 | Program output: 27                 
Correct output: -47                 | Program output: 42                 
Correct output: -54                 | Program output: -49                
Correct output: -65                 | Program output: 26                 
Correct output: -77                 | Program output: 72                 
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -25                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -76                
Correct output: -94                 | Program output: 56                 
Correct output: -99                 | Program output: -68                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: 69                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_pop () boolean_eq exec_do*count (integer_yank exec_noop boolean_and) boolean_yankdup boolean_not in2 exec_do*while () print_integer exec_noop integer_rot integer_add integer_gte integer_dup_times integer_shove)
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_pop () boolean_eq exec_do*count (integer_yank exec_noop boolean_and) boolean_yankdup boolean_not in2 exec_do*while () print_integer exec_noop integer_rot integer_add integer_gte integer_dup_times integer_shove)
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 102 717 504 717 164 101 338 111 187)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (189 102 717 504 717 164 101 338 111 187)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction tag_integer_996} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 43} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_min})
Best program: (tag_integer_996 in2 print_integer exec_s (integer_dup_items integer_min integer_shove exec_shove (integer_div boolean_xor) exec_stackdepth 43 in1 67 boolean_shove exec_dup_items integer_min) () ())
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 22
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.87
Median total errors in population: 6
Error averages by case: (0.811 0.898 0.283 0.496 0.283 0.836 0.899 0.662 0.889 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.184
Average program size in population (points): 35.194
Average percent parens in population: 0.242
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3401182
--- Timings ---
Current time: 1559594118865 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.1 seconds, 56.1%
Fitness Testing:      4.7 seconds, 29.0%
Report:               2.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 611
Test mean error for best: 0.61100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: -57                 | Program output:                    
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output:                    
Correct output: 55                  | Program output:                    
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 19                  | Program output:                    
Correct output: 34                  | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: 54                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 22                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 42                  | Program output:                    
Correct output: 34                  | Program output:                    
Correct output: 53                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 47                  | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -84                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: -2                 
Correct output: -72                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -52                 | Program output: -52                
Correct output: 10                  | Program output:                    
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: -20                
Correct output: -97                 | Program output: -59                
Correct output: 7                   | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -22                
Correct output: -57                 | Program output:                    
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -62                
Correct output: -35                 | Program output: -20                
Correct output: -91                 | Program output: -18                
Correct output: -69                 | Program output:                    
Correct output: -43                 | Program output:                    
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -10                
Correct output: -47                 | Program output:                    
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output:                    
Correct output: -37                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output:                    
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -11                
Correct output: -40                 | Program output:                    
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: -36                
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -5                 
Correct output: -84                 | Program output: -84                
Correct output: -11                 | Program output:                    
Correct output: -47                 | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -65                 | Program output:                    
Correct output: -77                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -76                
Correct output: -94                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -25                 | Program output: -25                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -56                
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_539} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while})
Lexicase best program: (exec_do*count (integer_add boolean_and) integer_inc in4 boolean_shove integer_sub boolean_rot boolean_dup in2 boolean_invert_first_then_and exec_do*times () print_integer boolean_frominteger integer_yank boolean_invert_first_then_and integer_eq integer_gte tag_boolean_539 exec_dup_items boolean_invert_first_then_and boolean_or exec_while ())
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_539} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while})
Zero cases best program: (exec_do*count (integer_add boolean_and) integer_inc in4 boolean_shove integer_sub boolean_rot boolean_dup in2 boolean_invert_first_then_and exec_do*times () print_integer boolean_frominteger integer_yank boolean_invert_first_then_and integer_eq integer_gte tag_boolean_539 exec_dup_items boolean_invert_first_then_and boolean_or exec_while ())
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 397 195 194 89 223 203 203 517 223)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (238 397 195 194 89 223 203 203 517 223)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_539} {:close 0, :instruction exec_dup_items})
Best program: (boolean_frominteger exec_do*count (integer_add integer_inc boolean_shove boolean_not integer_sub boolean_rot boolean_dup in2 in1 boolean_invert_first_then_and integer_min exec_do*times () print_integer boolean_frominteger boolean_invert_first_then_and) integer_eq boolean_rot integer_gte tag_boolean_539 exec_dup_items)
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.518
Median total errors in population: 8
Error averages by case: (0.762 0.603 0.805 0.806 0.911 0.777 0.797 0.797 0.483 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.547
Average program size in population (points): 40.558
Average percent parens in population: 0.230
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3928784
--- Timings ---
Current time: 1559594120811 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.3 seconds, 57.2%
Fitness Testing:      5.1 seconds, 28.5%
Report:               2.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 34                 
Correct output: 4                   | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 19                  | Program output: 33                 
Correct output: 34                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 63                 
Correct output: 33                  | Program output: 33                 
Correct output: 54                  | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 65                 
Correct output: 34                  | Program output: 80                 
Correct output: 53                  | Program output: 53                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 78                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -96                
Correct output: -2                  | Program output: -2                 
Correct output: -72                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -52                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -44                
Correct output: -20                 | Program output: -20                
Correct output: -97                 | Program output: -59                
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 82                 
Correct output: -2                  | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -57                 | Program output: 5                  
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 33                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: 15                 
Correct output: -58                 | Program output: -10                
Correct output: -47                 | Program output: 18                 
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -63                 | Program output: -60                
Correct output: -81                 | Program output: -76                
Correct output: -80                 | Program output: -29                
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -51                 | Program output: 14                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 3                  
Correct output: -84                 | Program output: -84                
Correct output: -11                 | Program output: 42                 
Correct output: -47                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -65                 | Program output: -14                
Correct output: -77                 | Program output: 57                 
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -95                
Correct output: -94                 | Program output: -80                
Correct output: -15                 | Program output: 2                  
Correct output: -91                 | Program output: 38                 
Correct output: -80                 | Program output: 36                 
Correct output: -89                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 17                 
Correct output: -99                 | Program output: -99                
Correct output: -25                 | Program output: -25                
Correct output: -34                 | Program output: 76                 
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_dup (exec_dup_times () boolean_yank boolean_eq boolean_invert_first_then_and) boolean_frominteger boolean_pop integer_lt in1 boolean_and in3 integer_min boolean_pop integer_dup integer_shove print_integer print_boolean)
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_dup (exec_dup_times () boolean_yank boolean_eq boolean_invert_first_then_and) boolean_frominteger boolean_pop integer_lt in1 boolean_and in3 integer_min boolean_pop integer_dup integer_shove print_integer print_boolean)
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (590 299 297 260 7 89 762 389 89 89)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (590 299 297 260 7 89 762 389 89 89)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Best program: (exec_dup (exec_dup_times () boolean_yank boolean_eq boolean_invert_first_then_and) boolean_frominteger boolean_pop integer_lt in1 boolean_and in3 integer_min boolean_pop integer_dup integer_shove print_integer print_boolean)
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 20
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.129
Median total errors in population: 6
Error averages by case: (0.41 0.701 0.703 0.74 0.993 0.911 0.238 0.611 0.911 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.18
Average program size in population (points): 27.992
Average percent parens in population: 0.162
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4502510
--- Timings ---
Current time: 1559594122459 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.4 seconds, 57.6%
Fitness Testing:      5.6 seconds, 28.0%
Report:               2.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 364
Test mean error for best: 0.36400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: 8                  
Correct output: 69                  | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -79                
Correct output: -65                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 34                 
Correct output: 4                   | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 19                  | Program output: 33                 
Correct output: 34                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 63                 
Correct output: 33                  | Program output: 33                 
Correct output: 54                  | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 65                 
Correct output: 34                  | Program output: 80                 
Correct output: 53                  | Program output: 53                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 78                 
Correct output: -76                 | Program output: -66                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -96                
Correct output: -2                  | Program output: -2                 
Correct output: -72                 | Program output: -72                
Correct output: -8                  | Program output: -8                 
Correct output: -52                 | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -44                
Correct output: -20                 | Program output: -20                
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -25                
Correct output: -79                 | Program output: -34                
Correct output: -2                  | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -56                
Correct output: -35                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -62                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -63                 | Program output: -60                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -29                
Correct output: -59                 | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -74                
Correct output: -97                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -15                 | Program output: 2                  
Correct output: -91                 | Program output: -41                
Correct output: -80                 | Program output: -67                
Correct output: -89                 | Program output: -26                
Correct output: -92                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -34                 | Program output: 76                 
Correct output: -97                 | Program output: -88                
Correct output: -49                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction tagged_85} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_dup (boolean_yank boolean_eq boolean_invert_first_then_and) boolean_frominteger integer_lt in2 tagged_85 in1 boolean_and in3 integer_min boolean_pop integer_dup integer_shove print_integer print_boolean)
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction tagged_85} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_dup (boolean_yank boolean_eq boolean_invert_first_then_and) boolean_frominteger integer_lt in2 tagged_85 in1 boolean_and in3 integer_min boolean_pop integer_dup integer_shove print_integer print_boolean)
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 122 360 362 583 183 283 360 138 338)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (223 122 360 362 583 183 283 360 138 338)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean})
Best program: (boolean_stackdepth exec_dup (exec_dup_times () boolean_eq boolean_invert_first_then_and) boolean_frominteger boolean_pop integer_lt in1 boolean_and in3 integer_min boolean_pop in4 integer_dup integer_shove print_integer exec_dup (print_boolean))
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 7.048
Median total errors in population: 7
Error averages by case: (0.777 0.878 0.64 0.638 0.417 0.817 0.717 0.64 0.862 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.998
Average program size in population (points): 25.32
Average percent parens in population: 0.160
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4896036
--- Timings ---
Current time: 1559594124032 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 58.5%
Fitness Testing:      5.9 seconds, 27.5%
Report:               2.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: 44                 
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 48                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 77                 
Correct output: 21                  | Program output: 40                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 88                 
Correct output: 4                   | Program output: 35                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 39                 
Correct output: 3                   | Program output: 70                 
Correct output: 42                  | Program output: 42                 
Correct output: 34                  | Program output: 34                 
Correct output: 53                  | Program output: 56                 
Correct output: 7                   | Program output: 11                 
Correct output: 47                  | Program output: 47                 
Correct output: -76                 | Program output: -66                
Correct output: -84                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 26                 
Correct output: -72                 | Program output: -72                
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: -11                
Correct output: 10                  | Program output: 26                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: 46                 
Correct output: -70                 | Program output: -25                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 80                 
Correct output: -69                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -56                
Correct output: -35                 | Program output: -29                
Correct output: -91                 | Program output: 47                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: 21                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -62                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -37                 | Program output: -19                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -11                
Correct output: -40                 | Program output: 2                  
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: -51                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: 8                  
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -72                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -88                
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_539} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_frominteger exec_do*count (integer_mult integer_add integer_inc boolean_shove in4 boolean_not integer_sub boolean_rot boolean_dup in2 in1 exec_dup (integer_rot) integer_min print_integer boolean_frominteger integer_flush boolean_invert_first_then_and) integer_eq boolean_rot integer_gte tag_boolean_539 boolean_invert_second_then_and)
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 28
Percent parens: 0.107
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_539} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_frominteger exec_do*count (integer_mult integer_add integer_inc boolean_shove in4 boolean_not integer_sub boolean_rot boolean_dup in2 in1 exec_dup (integer_rot) integer_min print_integer boolean_frominteger integer_flush boolean_invert_first_then_and) integer_eq boolean_rot integer_gte tag_boolean_539 boolean_invert_second_then_and)
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 28
Percent parens: 0.107
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 541 455 333 339 292 114 343 342 200)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (332 541 455 333 339 292 114 343 342 200)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_539} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_frominteger integer_add integer_inc boolean_shove boolean_pop in4 boolean_not integer_sub boolean_rot boolean_dup in2 in1 exec_dup (integer_rot) integer_min print_integer boolean_frominteger integer_flush integer_sub boolean_invert_first_then_and integer_eq boolean_rot integer_gte tag_boolean_539 boolean_invert_second_then_and)
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 27
Percent parens: 0.074
--- Population Statistics ---
Average total errors in population: 6.709
Median total errors in population: 6
Error averages by case: (0.668 0.459 0.545 0.667 0.661 0.708 0.886 0.657 0.658 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.383
Average program size in population (points): 22.95
Average percent parens in population: 0.152
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5164429
--- Timings ---
Current time: 1559594125537 milliseconds
Total Time:          22.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.6 seconds, 59.3%
Fitness Testing:      6.1 seconds, 26.8%
Report:               3.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 315
Test mean error for best: 0.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -79                
Correct output: -65                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 70                 
Correct output: 4                   | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 39                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 34                  | Program output: 34                 
Correct output: 53                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -76                 | Program output: -66                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 15                 
Correct output: -72                 | Program output: -72                
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 42                 
Correct output: -93                 | Program output: 29                 
Correct output: -70                 | Program output: -25                
Correct output: -79                 | Program output: -34                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 10                 
Correct output: -69                 | Program output: -69                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -56                
Correct output: -35                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -62                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: -51                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -41                
Correct output: -80                 | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -72                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -88                
Correct output: -49                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Lexicase best program: (boolean_stackdepth exec_dup (integer_pop) exec_dup_times () boolean_dup integer_dup_times boolean_eq boolean_frominteger exec_stackdepth boolean_frominteger integer_yank boolean_pop print_boolean integer_lt in1 in3 integer_min boolean_pop in4 integer_dup integer_shove integer_min print_integer exec_dup (integer_eq))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Zero cases best program: (boolean_stackdepth exec_dup (integer_pop) exec_dup_times () boolean_dup integer_dup_times boolean_eq boolean_frominteger exec_stackdepth boolean_frominteger integer_yank boolean_pop print_boolean integer_lt in1 in3 integer_min boolean_pop in4 integer_dup integer_shove integer_min print_integer exec_dup (integer_eq))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 486 493 671 494 220 510 503 743 317)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (99 486 493 671 494 220 510 503 743 317)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean})
Best program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () boolean_eq boolean_invert_first_then_and) integer_div boolean_frominteger boolean_pop integer_lt in1 boolean_and in3 in2 exec_dup (integer_min boolean_pop in4) integer_dup integer_shove print_integer exec_dup (print_boolean))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 28
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 5.464
Median total errors in population: 6
Error averages by case: (0.901 0.514 0.507 0.329 0.506 0.78 0.49 0.497 0.257 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.796
Average program size in population (points): 25.726
Average percent parens in population: 0.152
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.01
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5468428
--- Timings ---
Current time: 1559594127085 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.6 seconds, 60.0%
Fitness Testing:      6.4 seconds, 26.3%
Report:               3.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 70                 
Correct output: 4                   | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 39                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 34                  | Program output: 34                 
Correct output: 53                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 15                 
Correct output: -72                 | Program output: -72                
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: -11                
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 42                 
Correct output: -93                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 10                 
Correct output: -69                 | Program output: -69                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -62                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: -51                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -72                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (51 582 329 576 202 451 718 405 496 206)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (51 582 329 576 202 451 718 405 496 206)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean})
Best program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.984
Median total errors in population: 6
Error averages by case: (0.949 0.418 0.671 0.424 0.798 0.549 0.282 0.595 0.504 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.625
Average program size in population (points): 28.35
Average percent parens in population: 0.165
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.011
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5785120
--- Timings ---
Current time: 1559594128694 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 60.4%
Fitness Testing:      6.7 seconds, 25.9%
Report:               3.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 27


Auto-simplifying with starting size: 27
step: 0
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 500
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 1000
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 1500
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 2000
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 2500
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 3000
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 3500
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 4000
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 4500
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

step: 5000
program: (boolean_stackdepth exec_dup (integer_stackdepth exec_dup_times () exec_k (boolean_eq integer_div boolean_frominteger) (boolean_pop integer_lt in1 boolean_and) in3 in2 exec_dup (integer_min boolean_pop in4)) integer_shove print_integer print_boolean)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 27

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -38                 | Program output: -38                
Correct output: 69                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -67                 | Program output: -67                
Correct output: 12                  | Program output: 12                 
Correct output: 55                  | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -8                  | Program output: -8                 
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 8                  
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 34                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 48                 
Correct output: 54                  | Program output: 70                 
Correct output: 4                   | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 4                   | Program output: 39                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 34                  | Program output: 34                 
Correct output: 53                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: -76                 | Program output: -76                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -2                  | Program output: 15                 
Correct output: -72                 | Program output: -72                
Correct output: -8                  | Program output: 38                 
Correct output: -52                 | Program output: -11                
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -20                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 42                 
Correct output: -93                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -74                 | Program output: 10                 
Correct output: -69                 | Program output: -69                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -10                
Correct output: -64                 | Program output: -64                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -62                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -35                
Correct output: -51                 | Program output: -51                
Correct output: -86                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -6                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -15                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -72                
Correct output: -25                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -97                
Correct output: -49                 | Program output: -49                
;;******************************
