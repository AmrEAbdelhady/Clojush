Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[86 -49 -49 -49] -49] [[-70 86 86 86] -70] [[64 -27 -27 -27] -27] [[88 88 45 88] 45] [[-42 -42 -42 94] -42] [[18 -30 -30 -30] -30] [[-86 84 84 84] -86] [[-68 -68 -68 19] -68] [[-80 -80 -80 98] -80] [[12 -34 -34 -34] -34] [(36 36 36 36) 36] [(-34 -34 -34 -34) -34] [(-20 -20 -20 -20) -20] [(-30 -30 -30 -30) -30] [(-26 -26 -26 -26) -26] [(55 21 94 55) 21] [(26 5 30 91) 5] [(24 55 10 20) 10] [(49 12 71 92) 12] [(100 35 77 22) 22] [(8 93 99 33) 8] [(51 51 17 22) 17] [(51 56 4 50) 4] [(4 94 45 95) 4] [(32 67 52 72) 32] [(24 7 27 22) 7] [(97 34 71 0) 0] [(30 21 39 34) 21] [(10 37 1 58) 1] [(18 78 3 51) 3] [(19 97 57 34) 19] [(48 41 7 99) 7] [(96 1 20 40) 1] [(90 59 44 56) 44] [(24 95 37 56) 24] [(64 67 -7 9) -7] [(46 45 -82 8) -82] [(81 56 92 -5) -5] [(-84 86 -12 54) -84] [(-21 75 17 -17) -21] [(-71 16 -90 8) -90] [(-1 -83 -77 -15) -83] [(78 -43 56 21) -43] [(-38 -72 13 -54) -72] [(100 -57 -77 -14) -77] [(-20 81 8 28) -20] [(26 -2 -81 59) -81] [(34 -40 -34 -16) -40] [(-31 -77 76 -36) -77] [(80 6 -25 14) -25] [(64 50 -19 -99) -99] [(-50 48 74 42) -50] [(-79 8 -35 23) -79] [(-49 -93 55 32) -93] [(-30 76 91 -4) -30] [(84 -32 39 -67) -67] [(-72 57 43 -42) -72] [(67 42 -72 -12) -72] [(-78 18 -90 60) -90] [(88 -32 8 -23) -32] [(59 82 83 -29) -29] [(47 83 -72 -2) -72] [(-12 -29 88 -68) -68] [(9 45 -32 -21) -32] [(-78 -63 4 77) -78] [(0 -94 97 -41) -94] [(-26 6 77 88) -26] [(-14 -14 -63 33) -63] [(83 16 34 -55) -55] [(-77 72 4 -20) -77] [(71 17 -8 -6) -8] [(51 -98 77 -63) -98] [(-6 -93 -100 -58) -100] [(80 -46 -94 -78) -94] [(-37 -71 31 -21) -71] [(2 13 -13 19) -13] [(76 -19 -6 -7) -19] [(-99 -74 69 68) -99] [(84 48 -81 41) -81] [(-98 -52 -93 -17) -98] [(-83 -86 -82 -84) -86] [(-64 -54 -99 -41) -99] [(-82 -5 24 -44) -82] [(-58 18 22 66) -58] [(-18 -9 74 -65) -65] [(80 -59 19 -78) -78] [(-47 23 -15 95) -47] [(-21 59 97 -66) -66] [(40 87 80 21) 21] [(-26 -4 -51 56) -51] [(83 6 -78 -89) -89] [(-60 100 71 24) -60] [(-84 25 57 -78) -84] [(-59 94 16 -66) -66] [(-25 -23 -100 57) -100])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[86 -49 -49 -49] -49]
Train Case:   6 | Input/Output: [[-70 86 86 86] -70]
Train Case:   7 | Input/Output: [[64 -27 -27 -27] -27]
Train Case:   8 | Input/Output: [[88 88 45 88] 45]
Train Case:   9 | Input/Output: [[-42 -42 -42 94] -42]
Train Case:  10 | Input/Output: [[18 -30 -30 -30] -30]
Train Case:  11 | Input/Output: [[-86 84 84 84] -86]
Train Case:  12 | Input/Output: [[-68 -68 -68 19] -68]
Train Case:  13 | Input/Output: [[-80 -80 -80 98] -80]
Train Case:  14 | Input/Output: [[12 -34 -34 -34] -34]
Train Case:  15 | Input/Output: [(36 36 36 36) 36]
Train Case:  16 | Input/Output: [(-34 -34 -34 -34) -34]
Train Case:  17 | Input/Output: [(-20 -20 -20 -20) -20]
Train Case:  18 | Input/Output: [(-30 -30 -30 -30) -30]
Train Case:  19 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  20 | Input/Output: [(55 21 94 55) 21]
Train Case:  21 | Input/Output: [(26 5 30 91) 5]
Train Case:  22 | Input/Output: [(24 55 10 20) 10]
Train Case:  23 | Input/Output: [(49 12 71 92) 12]
Train Case:  24 | Input/Output: [(100 35 77 22) 22]
Train Case:  25 | Input/Output: [(8 93 99 33) 8]
Train Case:  26 | Input/Output: [(51 51 17 22) 17]
Train Case:  27 | Input/Output: [(51 56 4 50) 4]
Train Case:  28 | Input/Output: [(4 94 45 95) 4]
Train Case:  29 | Input/Output: [(32 67 52 72) 32]
Train Case:  30 | Input/Output: [(24 7 27 22) 7]
Train Case:  31 | Input/Output: [(97 34 71 0) 0]
Train Case:  32 | Input/Output: [(30 21 39 34) 21]
Train Case:  33 | Input/Output: [(10 37 1 58) 1]
Train Case:  34 | Input/Output: [(18 78 3 51) 3]
Train Case:  35 | Input/Output: [(19 97 57 34) 19]
Train Case:  36 | Input/Output: [(48 41 7 99) 7]
Train Case:  37 | Input/Output: [(96 1 20 40) 1]
Train Case:  38 | Input/Output: [(90 59 44 56) 44]
Train Case:  39 | Input/Output: [(24 95 37 56) 24]
Train Case:  40 | Input/Output: [(64 67 -7 9) -7]
Train Case:  41 | Input/Output: [(46 45 -82 8) -82]
Train Case:  42 | Input/Output: [(81 56 92 -5) -5]
Train Case:  43 | Input/Output: [(-84 86 -12 54) -84]
Train Case:  44 | Input/Output: [(-21 75 17 -17) -21]
Train Case:  45 | Input/Output: [(-71 16 -90 8) -90]
Train Case:  46 | Input/Output: [(-1 -83 -77 -15) -83]
Train Case:  47 | Input/Output: [(78 -43 56 21) -43]
Train Case:  48 | Input/Output: [(-38 -72 13 -54) -72]
Train Case:  49 | Input/Output: [(100 -57 -77 -14) -77]
Train Case:  50 | Input/Output: [(-20 81 8 28) -20]
Train Case:  51 | Input/Output: [(26 -2 -81 59) -81]
Train Case:  52 | Input/Output: [(34 -40 -34 -16) -40]
Train Case:  53 | Input/Output: [(-31 -77 76 -36) -77]
Train Case:  54 | Input/Output: [(80 6 -25 14) -25]
Train Case:  55 | Input/Output: [(64 50 -19 -99) -99]
Train Case:  56 | Input/Output: [(-50 48 74 42) -50]
Train Case:  57 | Input/Output: [(-79 8 -35 23) -79]
Train Case:  58 | Input/Output: [(-49 -93 55 32) -93]
Train Case:  59 | Input/Output: [(-30 76 91 -4) -30]
Train Case:  60 | Input/Output: [(84 -32 39 -67) -67]
Train Case:  61 | Input/Output: [(-72 57 43 -42) -72]
Train Case:  62 | Input/Output: [(67 42 -72 -12) -72]
Train Case:  63 | Input/Output: [(-78 18 -90 60) -90]
Train Case:  64 | Input/Output: [(88 -32 8 -23) -32]
Train Case:  65 | Input/Output: [(59 82 83 -29) -29]
Train Case:  66 | Input/Output: [(47 83 -72 -2) -72]
Train Case:  67 | Input/Output: [(-12 -29 88 -68) -68]
Train Case:  68 | Input/Output: [(9 45 -32 -21) -32]
Train Case:  69 | Input/Output: [(-78 -63 4 77) -78]
Train Case:  70 | Input/Output: [(0 -94 97 -41) -94]
Train Case:  71 | Input/Output: [(-26 6 77 88) -26]
Train Case:  72 | Input/Output: [(-14 -14 -63 33) -63]
Train Case:  73 | Input/Output: [(83 16 34 -55) -55]
Train Case:  74 | Input/Output: [(-77 72 4 -20) -77]
Train Case:  75 | Input/Output: [(71 17 -8 -6) -8]
Train Case:  76 | Input/Output: [(51 -98 77 -63) -98]
Train Case:  77 | Input/Output: [(-6 -93 -100 -58) -100]
Train Case:  78 | Input/Output: [(80 -46 -94 -78) -94]
Train Case:  79 | Input/Output: [(-37 -71 31 -21) -71]
Train Case:  80 | Input/Output: [(2 13 -13 19) -13]
Train Case:  81 | Input/Output: [(76 -19 -6 -7) -19]
Train Case:  82 | Input/Output: [(-99 -74 69 68) -99]
Train Case:  83 | Input/Output: [(84 48 -81 41) -81]
Train Case:  84 | Input/Output: [(-98 -52 -93 -17) -98]
Train Case:  85 | Input/Output: [(-83 -86 -82 -84) -86]
Train Case:  86 | Input/Output: [(-64 -54 -99 -41) -99]
Train Case:  87 | Input/Output: [(-82 -5 24 -44) -82]
Train Case:  88 | Input/Output: [(-58 18 22 66) -58]
Train Case:  89 | Input/Output: [(-18 -9 74 -65) -65]
Train Case:  90 | Input/Output: [(80 -59 19 -78) -78]
Train Case:  91 | Input/Output: [(-47 23 -15 95) -47]
Train Case:  92 | Input/Output: [(-21 59 97 -66) -66]
Train Case:  93 | Input/Output: [(40 87 80 21) 21]
Train Case:  94 | Input/Output: [(-26 -4 -51 56) -51]
Train Case:  95 | Input/Output: [(83 6 -78 -89) -89]
Train Case:  96 | Input/Output: [(-60 100 71 24) -60]
Train Case:  97 | Input/Output: [(-84 25 57 -78) -84]
Train Case:  98 | Input/Output: [(-59 94 16 -66) -66]
Train Case:  99 | Input/Output: [(-25 -23 -100 57) -100]
Test Case:   0 | Input/Output: [[-65 75 -65 -65] -65]
Test Case:   1 | Input/Output: [[76 76 76 -39] -39]
Test Case:   2 | Input/Output: [[77 69 69 69] 69]
Test Case:   3 | Input/Output: [[67 67 67 65] 65]
Test Case:   4 | Input/Output: [[29 29 -29 29] -29]
Test Case:   5 | Input/Output: [[-3 54 54 54] -3]
Test Case:   6 | Input/Output: [[-57 -79 -57 -57] -79]
Test Case:   7 | Input/Output: [[32 32 32 -93] -93]
Test Case:   8 | Input/Output: [[-13 33 33 33] -13]
Test Case:   9 | Input/Output: [[56 56 56 -87] -87]
Test Case:  10 | Input/Output: [[-91 91 91 91] -91]
Test Case:  11 | Input/Output: [[-64 -64 -64 -14] -64]
Test Case:  12 | Input/Output: [[-80 -80 -80 84] -80]
Test Case:  13 | Input/Output: [[45 -69 -69 -69] -69]
Test Case:  14 | Input/Output: [[90 -38 90 90] -38]
Test Case:  15 | Input/Output: [[91 91 91 -81] -81]
Test Case:  16 | Input/Output: [[45 45 45 -44] -44]
Test Case:  17 | Input/Output: [[96 96 19 96] 19]
Test Case:  18 | Input/Output: [[43 43 43 -77] -77]
Test Case:  19 | Input/Output: [[-95 -3 -3 -3] -95]
Test Case:  20 | Input/Output: [[-48 97 97 97] -48]
Test Case:  21 | Input/Output: [[-57 -42 -42 -42] -57]
Test Case:  22 | Input/Output: [[-38 -38 -38 83] -38]
Test Case:  23 | Input/Output: [[-59 -43 -43 -43] -59]
Test Case:  24 | Input/Output: [[-28 -65 -28 -28] -65]
Test Case:  25 | Input/Output: [[-51 -40 -40 -40] -51]
Test Case:  26 | Input/Output: [[-79 -79 -79 74] -79]
Test Case:  27 | Input/Output: [[50 37 37 37] 37]
Test Case:  28 | Input/Output: [[-56 13 13 13] -56]
Test Case:  29 | Input/Output: [[73 92 73 73] 73]
Test Case:  30 | Input/Output: [[-99 -99 -99 -61] -99]
Test Case:  31 | Input/Output: [[-30 -30 -55 -30] -55]
Test Case:  32 | Input/Output: [[-88 -88 14 -88] -88]
Test Case:  33 | Input/Output: [[61 20 61 61] 20]
Test Case:  34 | Input/Output: [[-15 -15 -15 -15] -15]
Test Case:  35 | Input/Output: [[64 64 64 -53] -53]
Test Case:  36 | Input/Output: [[17 17 17 -9] -9]
Test Case:  37 | Input/Output: [[-61 -61 -58 -61] -61]
Test Case:  38 | Input/Output: [[99 99 -1 99] -1]
Test Case:  39 | Input/Output: [[-95 -95 -71 -95] -95]
Test Case:  40 | Input/Output: [[-70 86 86 86] -70]
Test Case:  41 | Input/Output: [[40 8 40 40] 8]
Test Case:  42 | Input/Output: [[-51 -51 4 -51] -51]
Test Case:  43 | Input/Output: [[31 31 31 -1] -1]
Test Case:  44 | Input/Output: [[-23 -72 -23 -23] -72]
Test Case:  45 | Input/Output: [[-87 88 -87 -87] -87]
Test Case:  46 | Input/Output: [[95 95 -47 95] -47]
Test Case:  47 | Input/Output: [[50 50 -16 50] -16]
Test Case:  48 | Input/Output: [[-42 -63 -42 -42] -63]
Test Case:  49 | Input/Output: [[-32 -32 -40 -32] -40]
Test Case:  50 | Input/Output: [[56 92 92 92] 56]
Test Case:  51 | Input/Output: [[-29 -29 -29 29] -29]
Test Case:  52 | Input/Output: [[-47 -47 -84 -47] -84]
Test Case:  53 | Input/Output: [[-15 -15 -87 -15] -87]
Test Case:  54 | Input/Output: [[68 -48 68 68] -48]
Test Case:  55 | Input/Output: [[-57 -57 -57 46] -57]
Test Case:  56 | Input/Output: [[1 18 1 1] 1]
Test Case:  57 | Input/Output: [[20 64 20 20] 20]
Test Case:  58 | Input/Output: [[5 5 5 -90] -90]
Test Case:  59 | Input/Output: [[-88 -37 -37 -37] -88]
Test Case:  60 | Input/Output: [[-30 -98 -30 -30] -98]
Test Case:  61 | Input/Output: [[86 15 86 86] 15]
Test Case:  62 | Input/Output: [[-69 -69 -69 -70] -70]
Test Case:  63 | Input/Output: [[-83 -83 -83 10] -83]
Test Case:  64 | Input/Output: [[-93 -93 18 -93] -93]
Test Case:  65 | Input/Output: [[-91 -38 -91 -91] -91]
Test Case:  66 | Input/Output: [[48 46 46 46] 46]
Test Case:  67 | Input/Output: [[32 32 32 12] 12]
Test Case:  68 | Input/Output: [[73 73 47 73] 47]
Test Case:  69 | Input/Output: [[-39 -19 -39 -39] -39]
Test Case:  70 | Input/Output: [[56 -84 56 56] -84]
Test Case:  71 | Input/Output: [[92 92 92 46] 46]
Test Case:  72 | Input/Output: [[95 95 95 -24] -24]
Test Case:  73 | Input/Output: [[35 -68 35 35] -68]
Test Case:  74 | Input/Output: [[-85 -29 -29 -29] -85]
Test Case:  75 | Input/Output: [[46 55 46 46] 46]
Test Case:  76 | Input/Output: [[-30 67 67 67] -30]
Test Case:  77 | Input/Output: [[58 58 -77 58] -77]
Test Case:  78 | Input/Output: [[6 6 6 -58] -58]
Test Case:  79 | Input/Output: [[-13 34 34 34] -13]
Test Case:  80 | Input/Output: [[80 80 -39 80] -39]
Test Case:  81 | Input/Output: [[-96 -99 -99 -99] -99]
Test Case:  82 | Input/Output: [[28 -72 28 28] -72]
Test Case:  83 | Input/Output: [[-27 -53 -27 -27] -53]
Test Case:  84 | Input/Output: [[-79 -79 -10 -79] -79]
Test Case:  85 | Input/Output: [[-16 -16 15 -16] -16]
Test Case:  86 | Input/Output: [[72 72 72 -66] -66]
Test Case:  87 | Input/Output: [[75 -37 -37 -37] -37]
Test Case:  88 | Input/Output: [[-45 -38 -38 -38] -45]
Test Case:  89 | Input/Output: [[90 90 90 -85] -85]
Test Case:  90 | Input/Output: [[39 39 39 74] 39]
Test Case:  91 | Input/Output: [[-51 -51 -51 -34] -51]
Test Case:  92 | Input/Output: [[-79 -79 75 -79] -79]
Test Case:  93 | Input/Output: [[-60 -72 -72 -72] -72]
Test Case:  94 | Input/Output: [[-12 -12 -12 13] -12]
Test Case:  95 | Input/Output: [[-19 90 90 90] -19]
Test Case:  96 | Input/Output: [[36 -58 -58 -58] -58]
Test Case:  97 | Input/Output: [[87 87 87 -63] -63]
Test Case:  98 | Input/Output: [[86 86 -100 86] -100]
Test Case:  99 | Input/Output: [[13 60 60 60] 13]
Test Case: 100 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 101 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 102 | Input/Output: [(98 98 98 98) 98]
Test Case: 103 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 104 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 105 | Input/Output: [(64 64 64 64) 64]
Test Case: 106 | Input/Output: [(92 92 92 92) 92]
Test Case: 107 | Input/Output: [(8 8 8 8) 8]
Test Case: 108 | Input/Output: [(71 71 71 71) 71]
Test Case: 109 | Input/Output: [(52 52 52 52) 52]
Test Case: 110 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 111 | Input/Output: [(69 69 69 69) 69]
Test Case: 112 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 113 | Input/Output: [(17 17 17 17) 17]
Test Case: 114 | Input/Output: [(74 74 74 74) 74]
Test Case: 115 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 116 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 117 | Input/Output: [(96 96 96 96) 96]
Test Case: 118 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 119 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 120 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 121 | Input/Output: [(33 33 33 33) 33]
Test Case: 122 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 123 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 124 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 125 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 126 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 127 | Input/Output: [(43 43 43 43) 43]
Test Case: 128 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 129 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 130 | Input/Output: [(59 59 59 59) 59]
Test Case: 131 | Input/Output: [(88 88 88 88) 88]
Test Case: 132 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 133 | Input/Output: [(53 53 53 53) 53]
Test Case: 134 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 135 | Input/Output: [(18 18 18 18) 18]
Test Case: 136 | Input/Output: [(97 97 97 97) 97]
Test Case: 137 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 138 | Input/Output: [(19 19 19 19) 19]
Test Case: 139 | Input/Output: [(23 23 23 23) 23]
Test Case: 140 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 141 | Input/Output: [(52 52 52 52) 52]
Test Case: 142 | Input/Output: [(67 67 67 67) 67]
Test Case: 143 | Input/Output: [(41 41 41 41) 41]
Test Case: 144 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 145 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 146 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 147 | Input/Output: [(59 59 59 59) 59]
Test Case: 148 | Input/Output: [(60 60 60 60) 60]
Test Case: 149 | Input/Output: [(43 43 43 43) 43]
Test Case: 150 | Input/Output: [(83 83 83 83) 83]
Test Case: 151 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 152 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 153 | Input/Output: [(23 23 23 23) 23]
Test Case: 154 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 155 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 156 | Input/Output: [(10 10 10 10) 10]
Test Case: 157 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 158 | Input/Output: [(13 13 13 13) 13]
Test Case: 159 | Input/Output: [(35 35 35 35) 35]
Test Case: 160 | Input/Output: [(60 60 60 60) 60]
Test Case: 161 | Input/Output: [(76 76 76 76) 76]
Test Case: 162 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 163 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 164 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 165 | Input/Output: [(89 89 89 89) 89]
Test Case: 166 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 167 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 168 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 169 | Input/Output: [(75 75 75 75) 75]
Test Case: 170 | Input/Output: [(92 92 92 92) 92]
Test Case: 171 | Input/Output: [(73 73 73 73) 73]
Test Case: 172 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 173 | Input/Output: [(76 76 76 76) 76]
Test Case: 174 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 175 | Input/Output: [(25 25 25 25) 25]
Test Case: 176 | Input/Output: [(73 73 73 73) 73]
Test Case: 177 | Input/Output: [(70 70 70 70) 70]
Test Case: 178 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 179 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 180 | Input/Output: [(32 32 32 32) 32]
Test Case: 181 | Input/Output: [(37 37 37 37) 37]
Test Case: 182 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 183 | Input/Output: [(94 94 94 94) 94]
Test Case: 184 | Input/Output: [(69 69 69 69) 69]
Test Case: 185 | Input/Output: [(48 48 48 48) 48]
Test Case: 186 | Input/Output: [(75 75 75 75) 75]
Test Case: 187 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 188 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 189 | Input/Output: [(4 4 4 4) 4]
Test Case: 190 | Input/Output: [(48 48 48 48) 48]
Test Case: 191 | Input/Output: [(13 13 13 13) 13]
Test Case: 192 | Input/Output: [(99 99 99 99) 99]
Test Case: 193 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 194 | Input/Output: [(4 4 4 4) 4]
Test Case: 195 | Input/Output: [(65 65 65 65) 65]
Test Case: 196 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 197 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 198 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 199 | Input/Output: [(9 9 9 9) 9]
Test Case: 200 | Input/Output: [(43 40 74 45) 40]
Test Case: 201 | Input/Output: [(89 78 6 65) 6]
Test Case: 202 | Input/Output: [(77 55 24 8) 8]
Test Case: 203 | Input/Output: [(20 60 68 72) 20]
Test Case: 204 | Input/Output: [(88 61 28 14) 14]
Test Case: 205 | Input/Output: [(50 27 63 39) 27]
Test Case: 206 | Input/Output: [(90 20 11 40) 11]
Test Case: 207 | Input/Output: [(2 14 99 29) 2]
Test Case: 208 | Input/Output: [(16 82 41 65) 16]
Test Case: 209 | Input/Output: [(30 87 3 94) 3]
Test Case: 210 | Input/Output: [(6 28 28 31) 6]
Test Case: 211 | Input/Output: [(72 52 3 6) 3]
Test Case: 212 | Input/Output: [(2 16 74 74) 2]
Test Case: 213 | Input/Output: [(55 81 42 52) 42]
Test Case: 214 | Input/Output: [(43 8 55 18) 8]
Test Case: 215 | Input/Output: [(41 66 58 61) 41]
Test Case: 216 | Input/Output: [(30 15 1 38) 1]
Test Case: 217 | Input/Output: [(77 22 47 95) 22]
Test Case: 218 | Input/Output: [(21 95 24 55) 21]
Test Case: 219 | Input/Output: [(53 15 74 36) 15]
Test Case: 220 | Input/Output: [(54 92 68 22) 22]
Test Case: 221 | Input/Output: [(97 69 27 46) 27]
Test Case: 222 | Input/Output: [(98 52 0 84) 0]
Test Case: 223 | Input/Output: [(84 80 79 4) 4]
Test Case: 224 | Input/Output: [(82 16 86 46) 16]
Test Case: 225 | Input/Output: [(52 52 53 99) 52]
Test Case: 226 | Input/Output: [(25 38 77 89) 25]
Test Case: 227 | Input/Output: [(39 69 90 72) 39]
Test Case: 228 | Input/Output: [(96 83 48 34) 34]
Test Case: 229 | Input/Output: [(58 40 15 97) 15]
Test Case: 230 | Input/Output: [(89 18 41 10) 10]
Test Case: 231 | Input/Output: [(15 42 75 82) 15]
Test Case: 232 | Input/Output: [(98 55 94 97) 55]
Test Case: 233 | Input/Output: [(66 6 96 66) 6]
Test Case: 234 | Input/Output: [(60 69 71 12) 12]
Test Case: 235 | Input/Output: [(97 56 83 49) 49]
Test Case: 236 | Input/Output: [(38 57 97 54) 38]
Test Case: 237 | Input/Output: [(36 6 10 82) 6]
Test Case: 238 | Input/Output: [(100 14 2 84) 2]
Test Case: 239 | Input/Output: [(91 86 53 79) 53]
Test Case: 240 | Input/Output: [(7 8 7 83) 7]
Test Case: 241 | Input/Output: [(91 100 39 57) 39]
Test Case: 242 | Input/Output: [(84 82 6 47) 6]
Test Case: 243 | Input/Output: [(7 38 94 81) 7]
Test Case: 244 | Input/Output: [(37 9 87 90) 9]
Test Case: 245 | Input/Output: [(55 20 93 8) 8]
Test Case: 246 | Input/Output: [(27 87 51 97) 27]
Test Case: 247 | Input/Output: [(99 29 6 100) 6]
Test Case: 248 | Input/Output: [(23 57 8 45) 8]
Test Case: 249 | Input/Output: [(9 63 43 93) 9]
Test Case: 250 | Input/Output: [(82 63 46 67) 46]
Test Case: 251 | Input/Output: [(51 84 1 94) 1]
Test Case: 252 | Input/Output: [(76 6 73 6) 6]
Test Case: 253 | Input/Output: [(1 86 10 85) 1]
Test Case: 254 | Input/Output: [(33 82 84 16) 16]
Test Case: 255 | Input/Output: [(34 38 77 94) 34]
Test Case: 256 | Input/Output: [(66 36 60 46) 36]
Test Case: 257 | Input/Output: [(59 26 11 79) 11]
Test Case: 258 | Input/Output: [(64 69 8 25) 8]
Test Case: 259 | Input/Output: [(32 38 36 87) 32]
Test Case: 260 | Input/Output: [(74 57 28 84) 28]
Test Case: 261 | Input/Output: [(57 61 68 16) 16]
Test Case: 262 | Input/Output: [(69 62 39 47) 39]
Test Case: 263 | Input/Output: [(14 75 10 58) 10]
Test Case: 264 | Input/Output: [(81 93 2 85) 2]
Test Case: 265 | Input/Output: [(25 8 68 34) 8]
Test Case: 266 | Input/Output: [(21 93 29 98) 21]
Test Case: 267 | Input/Output: [(74 43 2 76) 2]
Test Case: 268 | Input/Output: [(41 53 51 96) 41]
Test Case: 269 | Input/Output: [(30 87 88 64) 30]
Test Case: 270 | Input/Output: [(20 97 50 35) 20]
Test Case: 271 | Input/Output: [(67 84 5 5) 5]
Test Case: 272 | Input/Output: [(63 24 28 92) 24]
Test Case: 273 | Input/Output: [(87 27 12 59) 12]
Test Case: 274 | Input/Output: [(99 65 35 84) 35]
Test Case: 275 | Input/Output: [(82 72 30 39) 30]
Test Case: 276 | Input/Output: [(68 42 64 67) 42]
Test Case: 277 | Input/Output: [(2 76 6 93) 2]
Test Case: 278 | Input/Output: [(77 8 37 58) 8]
Test Case: 279 | Input/Output: [(90 88 75 45) 45]
Test Case: 280 | Input/Output: [(51 31 46 72) 31]
Test Case: 281 | Input/Output: [(48 16 34 95) 16]
Test Case: 282 | Input/Output: [(54 39 69 3) 3]
Test Case: 283 | Input/Output: [(53 66 5 94) 5]
Test Case: 284 | Input/Output: [(90 1 33 33) 1]
Test Case: 285 | Input/Output: [(52 67 59 36) 36]
Test Case: 286 | Input/Output: [(85 6 11 15) 6]
Test Case: 287 | Input/Output: [(97 95 41 97) 41]
Test Case: 288 | Input/Output: [(69 47 20 24) 20]
Test Case: 289 | Input/Output: [(88 92 3 35) 3]
Test Case: 290 | Input/Output: [(43 22 82 61) 22]
Test Case: 291 | Input/Output: [(79 37 51 90) 37]
Test Case: 292 | Input/Output: [(66 87 24 40) 24]
Test Case: 293 | Input/Output: [(90 25 72 19) 19]
Test Case: 294 | Input/Output: [(42 41 10 33) 10]
Test Case: 295 | Input/Output: [(16 80 58 97) 16]
Test Case: 296 | Input/Output: [(10 35 0 5) 0]
Test Case: 297 | Input/Output: [(11 93 88 77) 11]
Test Case: 298 | Input/Output: [(27 9 59 50) 9]
Test Case: 299 | Input/Output: [(85 71 27 18) 18]
Test Case: 300 | Input/Output: [(46 94 78 50) 46]
Test Case: 301 | Input/Output: [(56 41 72 76) 41]
Test Case: 302 | Input/Output: [(58 64 73 67) 58]
Test Case: 303 | Input/Output: [(40 69 80 89) 40]
Test Case: 304 | Input/Output: [(58 85 85 54) 54]
Test Case: 305 | Input/Output: [(43 75 74 36) 36]
Test Case: 306 | Input/Output: [(81 91 43 45) 43]
Test Case: 307 | Input/Output: [(74 33 8 82) 8]
Test Case: 308 | Input/Output: [(26 17 78 79) 17]
Test Case: 309 | Input/Output: [(60 44 97 98) 44]
Test Case: 310 | Input/Output: [(24 7 19 46) 7]
Test Case: 311 | Input/Output: [(79 0 34 77) 0]
Test Case: 312 | Input/Output: [(96 80 49 50) 49]
Test Case: 313 | Input/Output: [(66 88 20 36) 20]
Test Case: 314 | Input/Output: [(11 76 42 72) 11]
Test Case: 315 | Input/Output: [(62 87 15 6) 6]
Test Case: 316 | Input/Output: [(85 20 7 16) 7]
Test Case: 317 | Input/Output: [(90 52 5 28) 5]
Test Case: 318 | Input/Output: [(64 24 59 58) 24]
Test Case: 319 | Input/Output: [(87 51 98 0) 0]
Test Case: 320 | Input/Output: [(17 95 93 38) 17]
Test Case: 321 | Input/Output: [(4 40 100 96) 4]
Test Case: 322 | Input/Output: [(72 47 32 27) 27]
Test Case: 323 | Input/Output: [(35 78 99 64) 35]
Test Case: 324 | Input/Output: [(37 60 89 48) 37]
Test Case: 325 | Input/Output: [(97 65 70 56) 56]
Test Case: 326 | Input/Output: [(94 27 12 80) 12]
Test Case: 327 | Input/Output: [(8 91 88 95) 8]
Test Case: 328 | Input/Output: [(84 69 27 42) 27]
Test Case: 329 | Input/Output: [(60 37 68 9) 9]
Test Case: 330 | Input/Output: [(83 46 9 29) 9]
Test Case: 331 | Input/Output: [(23 80 37 36) 23]
Test Case: 332 | Input/Output: [(63 97 76 72) 63]
Test Case: 333 | Input/Output: [(81 18 60 90) 18]
Test Case: 334 | Input/Output: [(62 40 89 97) 40]
Test Case: 335 | Input/Output: [(19 79 76 12) 12]
Test Case: 336 | Input/Output: [(29 21 80 99) 21]
Test Case: 337 | Input/Output: [(73 64 89 88) 64]
Test Case: 338 | Input/Output: [(78 84 23 70) 23]
Test Case: 339 | Input/Output: [(88 62 13 51) 13]
Test Case: 340 | Input/Output: [(37 39 69 99) 37]
Test Case: 341 | Input/Output: [(42 30 84 87) 30]
Test Case: 342 | Input/Output: [(82 40 21 34) 21]
Test Case: 343 | Input/Output: [(20 68 73 13) 13]
Test Case: 344 | Input/Output: [(15 24 26 91) 15]
Test Case: 345 | Input/Output: [(67 20 62 28) 20]
Test Case: 346 | Input/Output: [(89 100 74 13) 13]
Test Case: 347 | Input/Output: [(59 76 80 52) 52]
Test Case: 348 | Input/Output: [(12 34 19 35) 12]
Test Case: 349 | Input/Output: [(28 56 49 28) 28]
Test Case: 350 | Input/Output: [(29 40 6 99) 6]
Test Case: 351 | Input/Output: [(86 3 45 18) 3]
Test Case: 352 | Input/Output: [(5 68 87 13) 5]
Test Case: 353 | Input/Output: [(80 49 44 37) 37]
Test Case: 354 | Input/Output: [(32 3 41 77) 3]
Test Case: 355 | Input/Output: [(27 37 9 94) 9]
Test Case: 356 | Input/Output: [(59 8 58 42) 8]
Test Case: 357 | Input/Output: [(84 89 34 69) 34]
Test Case: 358 | Input/Output: [(49 69 11 7) 7]
Test Case: 359 | Input/Output: [(26 40 78 36) 26]
Test Case: 360 | Input/Output: [(56 10 61 86) 10]
Test Case: 361 | Input/Output: [(52 90 93 37) 37]
Test Case: 362 | Input/Output: [(98 100 29 24) 24]
Test Case: 363 | Input/Output: [(60 29 21 75) 21]
Test Case: 364 | Input/Output: [(5 69 9 25) 5]
Test Case: 365 | Input/Output: [(21 72 16 66) 16]
Test Case: 366 | Input/Output: [(78 52 37 80) 37]
Test Case: 367 | Input/Output: [(44 36 36 86) 36]
Test Case: 368 | Input/Output: [(53 78 1 58) 1]
Test Case: 369 | Input/Output: [(37 80 82 28) 28]
Test Case: 370 | Input/Output: [(97 82 88 24) 24]
Test Case: 371 | Input/Output: [(71 22 90 44) 22]
Test Case: 372 | Input/Output: [(98 56 48 44) 44]
Test Case: 373 | Input/Output: [(58 41 38 20) 20]
Test Case: 374 | Input/Output: [(92 10 33 54) 10]
Test Case: 375 | Input/Output: [(77 77 11 14) 11]
Test Case: 376 | Input/Output: [(96 6 21 25) 6]
Test Case: 377 | Input/Output: [(52 10 46 51) 10]
Test Case: 378 | Input/Output: [(0 17 35 96) 0]
Test Case: 379 | Input/Output: [(88 2 51 82) 2]
Test Case: 380 | Input/Output: [(52 36 93 42) 36]
Test Case: 381 | Input/Output: [(20 65 36 50) 20]
Test Case: 382 | Input/Output: [(26 3 24 8) 3]
Test Case: 383 | Input/Output: [(73 57 7 20) 7]
Test Case: 384 | Input/Output: [(41 88 29 84) 29]
Test Case: 385 | Input/Output: [(99 50 28 68) 28]
Test Case: 386 | Input/Output: [(10 60 88 23) 10]
Test Case: 387 | Input/Output: [(71 45 77 74) 45]
Test Case: 388 | Input/Output: [(22 77 89 47) 22]
Test Case: 389 | Input/Output: [(82 56 63 60) 56]
Test Case: 390 | Input/Output: [(85 27 100 48) 27]
Test Case: 391 | Input/Output: [(11 53 93 74) 11]
Test Case: 392 | Input/Output: [(99 72 86 2) 2]
Test Case: 393 | Input/Output: [(12 58 19 78) 12]
Test Case: 394 | Input/Output: [(55 77 76 6) 6]
Test Case: 395 | Input/Output: [(88 33 94 26) 26]
Test Case: 396 | Input/Output: [(32 57 42 93) 32]
Test Case: 397 | Input/Output: [(82 31 9 67) 9]
Test Case: 398 | Input/Output: [(16 20 3 23) 3]
Test Case: 399 | Input/Output: [(42 2 51 17) 2]
Test Case: 400 | Input/Output: [(-30 58 21 20) -30]
Test Case: 401 | Input/Output: [(67 -29 -62 55) -62]
Test Case: 402 | Input/Output: [(-61 98 13 -57) -61]
Test Case: 403 | Input/Output: [(-20 -38 28 -33) -38]
Test Case: 404 | Input/Output: [(-45 40 73 -99) -99]
Test Case: 405 | Input/Output: [(97 -5 -66 -13) -66]
Test Case: 406 | Input/Output: [(-68 -41 -83 100) -83]
Test Case: 407 | Input/Output: [(-13 -97 47 28) -97]
Test Case: 408 | Input/Output: [(-84 64 -43 -21) -84]
Test Case: 409 | Input/Output: [(23 0 -31 -77) -77]
Test Case: 410 | Input/Output: [(65 27 61 28) 27]
Test Case: 411 | Input/Output: [(57 -2 -78 -90) -90]
Test Case: 412 | Input/Output: [(12 -49 30 -75) -75]
Test Case: 413 | Input/Output: [(20 -70 19 64) -70]
Test Case: 414 | Input/Output: [(60 -48 -97 80) -97]
Test Case: 415 | Input/Output: [(-95 -37 70 3) -95]
Test Case: 416 | Input/Output: [(-93 90 96 -84) -93]
Test Case: 417 | Input/Output: [(24 23 72 -34) -34]
Test Case: 418 | Input/Output: [(95 -97 -8 55) -97]
Test Case: 419 | Input/Output: [(31 82 -72 88) -72]
Test Case: 420 | Input/Output: [(-74 61 -99 54) -99]
Test Case: 421 | Input/Output: [(96 27 75 -30) -30]
Test Case: 422 | Input/Output: [(-15 87 25 34) -15]
Test Case: 423 | Input/Output: [(35 -65 92 89) -65]
Test Case: 424 | Input/Output: [(28 100 88 28) 28]
Test Case: 425 | Input/Output: [(-78 51 26 30) -78]
Test Case: 426 | Input/Output: [(-86 16 51 -46) -86]
Test Case: 427 | Input/Output: [(15 -26 35 -38) -38]
Test Case: 428 | Input/Output: [(24 11 15 -79) -79]
Test Case: 429 | Input/Output: [(5 -27 35 87) -27]
Test Case: 430 | Input/Output: [(51 96 23 -29) -29]
Test Case: 431 | Input/Output: [(36 -7 80 23) -7]
Test Case: 432 | Input/Output: [(-92 95 27 -83) -92]
Test Case: 433 | Input/Output: [(72 -87 -47 -49) -87]
Test Case: 434 | Input/Output: [(-89 10 -1 16) -89]
Test Case: 435 | Input/Output: [(-50 -87 -84 -2) -87]
Test Case: 436 | Input/Output: [(2 49 47 -87) -87]
Test Case: 437 | Input/Output: [(24 94 -9 88) -9]
Test Case: 438 | Input/Output: [(54 77 -44 63) -44]
Test Case: 439 | Input/Output: [(42 -81 21 21) -81]
Test Case: 440 | Input/Output: [(-67 83 28 -38) -67]
Test Case: 441 | Input/Output: [(-22 -72 -54 -3) -72]
Test Case: 442 | Input/Output: [(-71 -76 -17 -98) -98]
Test Case: 443 | Input/Output: [(-52 -95 18 41) -95]
Test Case: 444 | Input/Output: [(-74 -15 96 10) -74]
Test Case: 445 | Input/Output: [(-18 20 89 9) -18]
Test Case: 446 | Input/Output: [(-29 7 -86 73) -86]
Test Case: 447 | Input/Output: [(42 -40 9 -35) -40]
Test Case: 448 | Input/Output: [(34 72 -16 -49) -49]
Test Case: 449 | Input/Output: [(62 56 78 62) 56]
Test Case: 450 | Input/Output: [(18 -63 24 47) -63]
Test Case: 451 | Input/Output: [(-63 88 -8 -35) -63]
Test Case: 452 | Input/Output: [(18 85 -15 75) -15]
Test Case: 453 | Input/Output: [(-19 29 -71 34) -71]
Test Case: 454 | Input/Output: [(49 36 92 41) 36]
Test Case: 455 | Input/Output: [(13 -41 99 -41) -41]
Test Case: 456 | Input/Output: [(2 77 68 -54) -54]
Test Case: 457 | Input/Output: [(-46 -73 -44 29) -73]
Test Case: 458 | Input/Output: [(-43 42 -51 -81) -81]
Test Case: 459 | Input/Output: [(53 93 15 65) 15]
Test Case: 460 | Input/Output: [(-68 83 48 -39) -68]
Test Case: 461 | Input/Output: [(65 15 -62 -94) -94]
Test Case: 462 | Input/Output: [(1 57 55 87) 1]
Test Case: 463 | Input/Output: [(-65 -78 -2 -2) -78]
Test Case: 464 | Input/Output: [(1 -6 -10 66) -10]
Test Case: 465 | Input/Output: [(59 -3 7 -29) -29]
Test Case: 466 | Input/Output: [(53 11 53 2) 2]
Test Case: 467 | Input/Output: [(74 -65 59 84) -65]
Test Case: 468 | Input/Output: [(-52 89 31 -25) -52]
Test Case: 469 | Input/Output: [(13 70 -95 -56) -95]
Test Case: 470 | Input/Output: [(71 15 -80 99) -80]
Test Case: 471 | Input/Output: [(-29 -50 -94 15) -94]
Test Case: 472 | Input/Output: [(51 40 -55 98) -55]
Test Case: 473 | Input/Output: [(85 -44 50 40) -44]
Test Case: 474 | Input/Output: [(-22 16 25 63) -22]
Test Case: 475 | Input/Output: [(44 -47 4 37) -47]
Test Case: 476 | Input/Output: [(19 -20 44 52) -20]
Test Case: 477 | Input/Output: [(84 7 -10 -97) -97]
Test Case: 478 | Input/Output: [(-27 -19 -54 -97) -97]
Test Case: 479 | Input/Output: [(74 -60 -21 8) -60]
Test Case: 480 | Input/Output: [(-63 30 72 -4) -63]
Test Case: 481 | Input/Output: [(5 -75 9 -55) -75]
Test Case: 482 | Input/Output: [(-89 -30 51 -20) -89]
Test Case: 483 | Input/Output: [(35 99 -53 58) -53]
Test Case: 484 | Input/Output: [(11 71 -85 -40) -85]
Test Case: 485 | Input/Output: [(81 -6 -69 8) -69]
Test Case: 486 | Input/Output: [(34 23 -58 42) -58]
Test Case: 487 | Input/Output: [(-50 -94 -9 54) -94]
Test Case: 488 | Input/Output: [(-77 24 36 -58) -77]
Test Case: 489 | Input/Output: [(87 61 -94 62) -94]
Test Case: 490 | Input/Output: [(76 70 -5 76) -5]
Test Case: 491 | Input/Output: [(-20 -30 -97 -43) -97]
Test Case: 492 | Input/Output: [(91 -46 44 100) -46]
Test Case: 493 | Input/Output: [(0 -41 -9 35) -41]
Test Case: 494 | Input/Output: [(52 18 -3 -51) -51]
Test Case: 495 | Input/Output: [(-17 11 -43 91) -43]
Test Case: 496 | Input/Output: [(61 15 -63 -24) -63]
Test Case: 497 | Input/Output: [(-68 34 33 -17) -68]
Test Case: 498 | Input/Output: [(-8 -69 -28 20) -69]
Test Case: 499 | Input/Output: [(59 28 -1 -51) -51]
Test Case: 500 | Input/Output: [(-21 33 -76 -78) -78]
Test Case: 501 | Input/Output: [(-48 4 -20 4) -48]
Test Case: 502 | Input/Output: [(98 -99 46 -35) -99]
Test Case: 503 | Input/Output: [(82 29 -80 -53) -80]
Test Case: 504 | Input/Output: [(10 5 38 -95) -95]
Test Case: 505 | Input/Output: [(-43 -59 -89 6) -89]
Test Case: 506 | Input/Output: [(-55 -63 73 88) -63]
Test Case: 507 | Input/Output: [(-50 75 -31 -48) -50]
Test Case: 508 | Input/Output: [(72 -44 17 92) -44]
Test Case: 509 | Input/Output: [(73 -67 -37 83) -67]
Test Case: 510 | Input/Output: [(-52 59 8 -66) -66]
Test Case: 511 | Input/Output: [(-32 47 -63 -27) -63]
Test Case: 512 | Input/Output: [(-99 52 -31 78) -99]
Test Case: 513 | Input/Output: [(-34 -4 55 85) -34]
Test Case: 514 | Input/Output: [(-33 -68 -37 44) -68]
Test Case: 515 | Input/Output: [(65 28 -2 86) -2]
Test Case: 516 | Input/Output: [(-47 79 75 -10) -47]
Test Case: 517 | Input/Output: [(-27 -48 -31 -31) -48]
Test Case: 518 | Input/Output: [(78 13 42 59) 13]
Test Case: 519 | Input/Output: [(0 37 -72 -86) -86]
Test Case: 520 | Input/Output: [(33 11 -79 64) -79]
Test Case: 521 | Input/Output: [(52 83 28 34) 28]
Test Case: 522 | Input/Output: [(-62 53 13 80) -62]
Test Case: 523 | Input/Output: [(68 16 94 -66) -66]
Test Case: 524 | Input/Output: [(54 28 72 81) 28]
Test Case: 525 | Input/Output: [(-98 -76 -98 -18) -98]
Test Case: 526 | Input/Output: [(93 -100 -48 24) -100]
Test Case: 527 | Input/Output: [(78 -38 61 80) -38]
Test Case: 528 | Input/Output: [(56 27 34 76) 27]
Test Case: 529 | Input/Output: [(33 -9 -58 1) -58]
Test Case: 530 | Input/Output: [(-48 -100 -29 28) -100]
Test Case: 531 | Input/Output: [(58 -46 -41 1) -46]
Test Case: 532 | Input/Output: [(-15 -19 67 90) -19]
Test Case: 533 | Input/Output: [(-59 4 -51 -72) -72]
Test Case: 534 | Input/Output: [(-84 61 -11 -8) -84]
Test Case: 535 | Input/Output: [(88 65 56 61) 56]
Test Case: 536 | Input/Output: [(79 -61 -97 -64) -97]
Test Case: 537 | Input/Output: [(6 -66 -32 -10) -66]
Test Case: 538 | Input/Output: [(-86 -51 -47 -6) -86]
Test Case: 539 | Input/Output: [(-25 -82 92 88) -82]
Test Case: 540 | Input/Output: [(-29 11 -40 11) -40]
Test Case: 541 | Input/Output: [(-22 -43 64 -84) -84]
Test Case: 542 | Input/Output: [(-64 -87 -36 83) -87]
Test Case: 543 | Input/Output: [(89 68 -26 -74) -74]
Test Case: 544 | Input/Output: [(-67 -89 71 22) -89]
Test Case: 545 | Input/Output: [(-92 63 -10 76) -92]
Test Case: 546 | Input/Output: [(34 -24 38 -53) -53]
Test Case: 547 | Input/Output: [(23 44 -8 -70) -70]
Test Case: 548 | Input/Output: [(40 -36 -82 37) -82]
Test Case: 549 | Input/Output: [(-27 88 -23 -36) -36]
Test Case: 550 | Input/Output: [(-23 73 -64 -82) -82]
Test Case: 551 | Input/Output: [(-74 73 90 -73) -74]
Test Case: 552 | Input/Output: [(3 -15 -24 -84) -84]
Test Case: 553 | Input/Output: [(-1 93 -31 -42) -42]
Test Case: 554 | Input/Output: [(62 62 -27 53) -27]
Test Case: 555 | Input/Output: [(18 32 33 85) 18]
Test Case: 556 | Input/Output: [(1 -86 86 -71) -86]
Test Case: 557 | Input/Output: [(-33 57 46 81) -33]
Test Case: 558 | Input/Output: [(-76 56 -49 -69) -76]
Test Case: 559 | Input/Output: [(35 -60 -74 -12) -74]
Test Case: 560 | Input/Output: [(-37 98 42 75) -37]
Test Case: 561 | Input/Output: [(83 75 -49 -13) -49]
Test Case: 562 | Input/Output: [(-22 -41 -98 54) -98]
Test Case: 563 | Input/Output: [(85 46 -52 88) -52]
Test Case: 564 | Input/Output: [(-60 50 -32 41) -60]
Test Case: 565 | Input/Output: [(-38 -63 83 -77) -77]
Test Case: 566 | Input/Output: [(88 16 -10 -90) -90]
Test Case: 567 | Input/Output: [(-30 86 -63 93) -63]
Test Case: 568 | Input/Output: [(29 11 -100 86) -100]
Test Case: 569 | Input/Output: [(4 61 79 96) 4]
Test Case: 570 | Input/Output: [(-73 -87 -55 11) -87]
Test Case: 571 | Input/Output: [(-31 -6 25 30) -31]
Test Case: 572 | Input/Output: [(94 99 -62 60) -62]
Test Case: 573 | Input/Output: [(-3 27 -31 74) -31]
Test Case: 574 | Input/Output: [(74 18 -7 7) -7]
Test Case: 575 | Input/Output: [(-5 -26 -83 79) -83]
Test Case: 576 | Input/Output: [(-9 14 -58 96) -58]
Test Case: 577 | Input/Output: [(20 94 76 -76) -76]
Test Case: 578 | Input/Output: [(-56 -93 71 93) -93]
Test Case: 579 | Input/Output: [(-32 -92 -56 48) -92]
Test Case: 580 | Input/Output: [(-61 -3 -94 96) -94]
Test Case: 581 | Input/Output: [(-86 -77 -65 -76) -86]
Test Case: 582 | Input/Output: [(-88 -15 12 36) -88]
Test Case: 583 | Input/Output: [(-78 92 -94 -69) -94]
Test Case: 584 | Input/Output: [(67 -18 -42 -17) -42]
Test Case: 585 | Input/Output: [(-96 100 94 5) -96]
Test Case: 586 | Input/Output: [(-22 -35 -17 84) -35]
Test Case: 587 | Input/Output: [(92 83 16 -100) -100]
Test Case: 588 | Input/Output: [(75 -16 23 48) -16]
Test Case: 589 | Input/Output: [(27 -72 -33 -52) -72]
Test Case: 590 | Input/Output: [(71 65 -39 -95) -95]
Test Case: 591 | Input/Output: [(38 25 3 3) 3]
Test Case: 592 | Input/Output: [(-14 60 15 -62) -62]
Test Case: 593 | Input/Output: [(-31 -72 -39 -45) -72]
Test Case: 594 | Input/Output: [(11 -60 33 99) -60]
Test Case: 595 | Input/Output: [(-85 7 -47 -22) -85]
Test Case: 596 | Input/Output: [(-42 74 -25 -64) -64]
Test Case: 597 | Input/Output: [(-45 -16 -99 -91) -99]
Test Case: 598 | Input/Output: [(-20 -20 -52 -78) -78]
Test Case: 599 | Input/Output: [(-23 23 89 88) -23]
Test Case: 600 | Input/Output: [(-97 87 85 -94) -97]
Test Case: 601 | Input/Output: [(7 -80 54 -99) -99]
Test Case: 602 | Input/Output: [(-35 -91 -3 -82) -91]
Test Case: 603 | Input/Output: [(1 -85 97 -92) -92]
Test Case: 604 | Input/Output: [(7 80 -33 -32) -33]
Test Case: 605 | Input/Output: [(-66 13 -35 9) -66]
Test Case: 606 | Input/Output: [(84 46 11 14) 11]
Test Case: 607 | Input/Output: [(-79 -55 -75 -47) -79]
Test Case: 608 | Input/Output: [(83 88 39 -99) -99]
Test Case: 609 | Input/Output: [(-37 56 -1 16) -37]
Test Case: 610 | Input/Output: [(-98 27 -28 -43) -98]
Test Case: 611 | Input/Output: [(79 20 25 78) 20]
Test Case: 612 | Input/Output: [(40 84 -27 -36) -36]
Test Case: 613 | Input/Output: [(65 82 4 -77) -77]
Test Case: 614 | Input/Output: [(28 17 -56 78) -56]
Test Case: 615 | Input/Output: [(98 -90 51 2) -90]
Test Case: 616 | Input/Output: [(-54 -22 -67 29) -67]
Test Case: 617 | Input/Output: [(31 80 46 -15) -15]
Test Case: 618 | Input/Output: [(-64 -64 -46 -57) -64]
Test Case: 619 | Input/Output: [(9 -18 -30 -1) -30]
Test Case: 620 | Input/Output: [(42 69 42 -73) -73]
Test Case: 621 | Input/Output: [(-57 -21 -24 -61) -61]
Test Case: 622 | Input/Output: [(-57 43 -32 53) -57]
Test Case: 623 | Input/Output: [(-74 -17 -42 14) -74]
Test Case: 624 | Input/Output: [(-96 -70 -68 -21) -96]
Test Case: 625 | Input/Output: [(77 89 14 100) 14]
Test Case: 626 | Input/Output: [(-71 -37 78 82) -71]
Test Case: 627 | Input/Output: [(-79 15 -77 -69) -79]
Test Case: 628 | Input/Output: [(-73 0 -71 22) -73]
Test Case: 629 | Input/Output: [(-85 -73 -6 -51) -85]
Test Case: 630 | Input/Output: [(95 -85 -30 64) -85]
Test Case: 631 | Input/Output: [(80 38 63 97) 38]
Test Case: 632 | Input/Output: [(-60 80 -19 -8) -60]
Test Case: 633 | Input/Output: [(-47 -66 -44 98) -66]
Test Case: 634 | Input/Output: [(-45 62 71 -52) -52]
Test Case: 635 | Input/Output: [(27 77 -66 -46) -66]
Test Case: 636 | Input/Output: [(13 13 -17 -54) -54]
Test Case: 637 | Input/Output: [(-60 -43 -87 98) -87]
Test Case: 638 | Input/Output: [(89 -21 18 -92) -92]
Test Case: 639 | Input/Output: [(6 -53 63 -92) -92]
Test Case: 640 | Input/Output: [(1 77 -61 93) -61]
Test Case: 641 | Input/Output: [(45 -22 45 41) -22]
Test Case: 642 | Input/Output: [(-75 -98 61 -22) -98]
Test Case: 643 | Input/Output: [(45 -45 -68 67) -68]
Test Case: 644 | Input/Output: [(-57 -69 -42 77) -69]
Test Case: 645 | Input/Output: [(-5 -68 -41 -77) -77]
Test Case: 646 | Input/Output: [(-60 -11 -24 63) -60]
Test Case: 647 | Input/Output: [(49 29 11 23) 11]
Test Case: 648 | Input/Output: [(-72 -72 63 -85) -85]
Test Case: 649 | Input/Output: [(-44 80 53 75) -44]
Test Case: 650 | Input/Output: [(-48 -20 13 -12) -48]
Test Case: 651 | Input/Output: [(-49 -37 -1 -57) -57]
Test Case: 652 | Input/Output: [(90 3 39 41) 3]
Test Case: 653 | Input/Output: [(75 -25 -29 -25) -29]
Test Case: 654 | Input/Output: [(-98 -56 73 -63) -98]
Test Case: 655 | Input/Output: [(-60 -41 -5 -8) -60]
Test Case: 656 | Input/Output: [(93 -15 86 -4) -15]
Test Case: 657 | Input/Output: [(-32 53 40 52) -32]
Test Case: 658 | Input/Output: [(-68 37 37 96) -68]
Test Case: 659 | Input/Output: [(29 59 84 -62) -62]
Test Case: 660 | Input/Output: [(-10 -67 -67 63) -67]
Test Case: 661 | Input/Output: [(-24 62 -13 89) -24]
Test Case: 662 | Input/Output: [(-5 74 -17 -77) -77]
Test Case: 663 | Input/Output: [(-41 -83 -16 76) -83]
Test Case: 664 | Input/Output: [(-23 -63 -62 41) -63]
Test Case: 665 | Input/Output: [(-22 -57 14 79) -57]
Test Case: 666 | Input/Output: [(10 -22 -22 99) -22]
Test Case: 667 | Input/Output: [(-17 63 24 -97) -97]
Test Case: 668 | Input/Output: [(24 44 8 35) 8]
Test Case: 669 | Input/Output: [(77 69 90 -66) -66]
Test Case: 670 | Input/Output: [(-43 38 27 86) -43]
Test Case: 671 | Input/Output: [(-21 14 -61 -7) -61]
Test Case: 672 | Input/Output: [(6 -62 -31 35) -62]
Test Case: 673 | Input/Output: [(69 -76 -77 11) -77]
Test Case: 674 | Input/Output: [(-35 50 9 -66) -66]
Test Case: 675 | Input/Output: [(-77 58 -6 62) -77]
Test Case: 676 | Input/Output: [(60 -24 -18 -17) -24]
Test Case: 677 | Input/Output: [(-39 -46 94 36) -46]
Test Case: 678 | Input/Output: [(66 4 44 -56) -56]
Test Case: 679 | Input/Output: [(91 4 -32 -69) -69]
Test Case: 680 | Input/Output: [(-7 96 22 -83) -83]
Test Case: 681 | Input/Output: [(-12 93 70 -87) -87]
Test Case: 682 | Input/Output: [(-24 36 -49 51) -49]
Test Case: 683 | Input/Output: [(48 5 33 -32) -32]
Test Case: 684 | Input/Output: [(-66 -47 62 20) -66]
Test Case: 685 | Input/Output: [(27 27 -29 -36) -36]
Test Case: 686 | Input/Output: [(38 14 46 -77) -77]
Test Case: 687 | Input/Output: [(40 -72 -84 93) -84]
Test Case: 688 | Input/Output: [(92 -93 11 70) -93]
Test Case: 689 | Input/Output: [(40 39 33 60) 33]
Test Case: 690 | Input/Output: [(34 -17 75 4) -17]
Test Case: 691 | Input/Output: [(54 -51 2 68) -51]
Test Case: 692 | Input/Output: [(-73 -54 -13 37) -73]
Test Case: 693 | Input/Output: [(11 52 56 20) 11]
Test Case: 694 | Input/Output: [(16 -24 58 -52) -52]
Test Case: 695 | Input/Output: [(-50 -61 41 25) -61]
Test Case: 696 | Input/Output: [(81 43 22 -4) -4]
Test Case: 697 | Input/Output: [(36 41 -60 73) -60]
Test Case: 698 | Input/Output: [(14 -42 -34 -57) -57]
Test Case: 699 | Input/Output: [(-82 0 42 -83) -83]
Test Case: 700 | Input/Output: [(23 -7 51 93) -7]
Test Case: 701 | Input/Output: [(94 42 12 -94) -94]
Test Case: 702 | Input/Output: [(-76 -81 34 -9) -81]
Test Case: 703 | Input/Output: [(-33 63 90 35) -33]
Test Case: 704 | Input/Output: [(-49 -22 36 -73) -73]
Test Case: 705 | Input/Output: [(0 -36 -11 -31) -36]
Test Case: 706 | Input/Output: [(-97 -27 -90 49) -97]
Test Case: 707 | Input/Output: [(-46 -88 -72 80) -88]
Test Case: 708 | Input/Output: [(-82 -69 -56 -5) -82]
Test Case: 709 | Input/Output: [(-82 7 80 -43) -82]
Test Case: 710 | Input/Output: [(-42 -65 -47 50) -65]
Test Case: 711 | Input/Output: [(86 -74 -34 53) -74]
Test Case: 712 | Input/Output: [(-86 21 -93 63) -93]
Test Case: 713 | Input/Output: [(76 95 92 43) 43]
Test Case: 714 | Input/Output: [(-89 82 27 -18) -89]
Test Case: 715 | Input/Output: [(-33 33 -95 -90) -95]
Test Case: 716 | Input/Output: [(87 67 63 -64) -64]
Test Case: 717 | Input/Output: [(-98 -67 16 13) -98]
Test Case: 718 | Input/Output: [(50 -18 -95 54) -95]
Test Case: 719 | Input/Output: [(-21 -13 -65 -98) -98]
Test Case: 720 | Input/Output: [(28 48 15 5) 5]
Test Case: 721 | Input/Output: [(-73 52 88 -64) -73]
Test Case: 722 | Input/Output: [(-24 47 40 48) -24]
Test Case: 723 | Input/Output: [(-52 83 20 -55) -55]
Test Case: 724 | Input/Output: [(-93 -29 -72 -71) -93]
Test Case: 725 | Input/Output: [(1 -78 -48 56) -78]
Test Case: 726 | Input/Output: [(-59 -23 -8 -53) -59]
Test Case: 727 | Input/Output: [(-68 -54 99 -23) -68]
Test Case: 728 | Input/Output: [(7 26 22 53) 7]
Test Case: 729 | Input/Output: [(36 -90 -74 -32) -90]
Test Case: 730 | Input/Output: [(64 92 -84 59) -84]
Test Case: 731 | Input/Output: [(80 -71 -16 -20) -71]
Test Case: 732 | Input/Output: [(37 65 61 -68) -68]
Test Case: 733 | Input/Output: [(25 -89 -91 -65) -91]
Test Case: 734 | Input/Output: [(83 -24 -76 92) -76]
Test Case: 735 | Input/Output: [(85 -34 -8 -98) -98]
Test Case: 736 | Input/Output: [(-14 -55 -37 32) -55]
Test Case: 737 | Input/Output: [(93 -45 36 83) -45]
Test Case: 738 | Input/Output: [(38 -42 24 -42) -42]
Test Case: 739 | Input/Output: [(-50 -32 -88 -83) -88]
Test Case: 740 | Input/Output: [(15 -24 92 62) -24]
Test Case: 741 | Input/Output: [(-87 -38 -87 37) -87]
Test Case: 742 | Input/Output: [(-11 0 40 3) -11]
Test Case: 743 | Input/Output: [(53 26 -50 -76) -76]
Test Case: 744 | Input/Output: [(-73 -62 -3 -22) -73]
Test Case: 745 | Input/Output: [(55 16 -31 60) -31]
Test Case: 746 | Input/Output: [(-39 47 -5 8) -39]
Test Case: 747 | Input/Output: [(91 -51 -49 -19) -51]
Test Case: 748 | Input/Output: [(-27 60 28 75) -27]
Test Case: 749 | Input/Output: [(23 79 21 29) 21]
Test Case: 750 | Input/Output: [(25 30 30 46) 25]
Test Case: 751 | Input/Output: [(88 22 -46 -44) -46]
Test Case: 752 | Input/Output: [(-82 85 -33 -97) -97]
Test Case: 753 | Input/Output: [(-78 95 79 94) -78]
Test Case: 754 | Input/Output: [(16 3 -33 71) -33]
Test Case: 755 | Input/Output: [(86 -85 -26 52) -85]
Test Case: 756 | Input/Output: [(49 6 -71 71) -71]
Test Case: 757 | Input/Output: [(24 -35 17 37) -35]
Test Case: 758 | Input/Output: [(-1 -83 51 10) -83]
Test Case: 759 | Input/Output: [(-89 89 -5 -26) -89]
Test Case: 760 | Input/Output: [(-30 -77 -47 -16) -77]
Test Case: 761 | Input/Output: [(-42 -86 -45 70) -86]
Test Case: 762 | Input/Output: [(49 37 0 26) 0]
Test Case: 763 | Input/Output: [(91 33 -5 39) -5]
Test Case: 764 | Input/Output: [(99 8 37 -40) -40]
Test Case: 765 | Input/Output: [(50 3 -37 -82) -82]
Test Case: 766 | Input/Output: [(-6 -63 44 -81) -81]
Test Case: 767 | Input/Output: [(-26 -18 -86 -95) -95]
Test Case: 768 | Input/Output: [(-25 -80 93 9) -80]
Test Case: 769 | Input/Output: [(11 -46 32 45) -46]
Test Case: 770 | Input/Output: [(40 -90 16 -70) -90]
Test Case: 771 | Input/Output: [(96 -76 50 4) -76]
Test Case: 772 | Input/Output: [(-47 -99 -63 99) -99]
Test Case: 773 | Input/Output: [(55 -51 -61 36) -61]
Test Case: 774 | Input/Output: [(-41 95 100 32) -41]
Test Case: 775 | Input/Output: [(-8 13 -18 -56) -56]
Test Case: 776 | Input/Output: [(50 89 -18 3) -18]
Test Case: 777 | Input/Output: [(11 -63 -54 -69) -69]
Test Case: 778 | Input/Output: [(-20 60 25 -93) -93]
Test Case: 779 | Input/Output: [(-66 -58 -13 86) -66]
Test Case: 780 | Input/Output: [(-98 91 90 72) -98]
Test Case: 781 | Input/Output: [(36 87 -1 -41) -41]
Test Case: 782 | Input/Output: [(75 91 -44 68) -44]
Test Case: 783 | Input/Output: [(-62 73 -53 -94) -94]
Test Case: 784 | Input/Output: [(-36 -3 -22 -31) -36]
Test Case: 785 | Input/Output: [(-50 -22 -23 -59) -59]
Test Case: 786 | Input/Output: [(79 -96 -24 90) -96]
Test Case: 787 | Input/Output: [(-56 -97 -55 -72) -97]
Test Case: 788 | Input/Output: [(-2 -40 -55 -14) -55]
Test Case: 789 | Input/Output: [(-62 23 -64 -81) -81]
Test Case: 790 | Input/Output: [(29 28 82 -4) -4]
Test Case: 791 | Input/Output: [(16 43 23 44) 16]
Test Case: 792 | Input/Output: [(62 15 -15 69) -15]
Test Case: 793 | Input/Output: [(-65 30 -91 -85) -91]
Test Case: 794 | Input/Output: [(92 13 -26 -88) -88]
Test Case: 795 | Input/Output: [(67 36 -79 17) -79]
Test Case: 796 | Input/Output: [(-60 -34 -47 86) -60]
Test Case: 797 | Input/Output: [(-94 -7 -75 -69) -94]
Test Case: 798 | Input/Output: [(3 75 -30 3) -30]
Test Case: 799 | Input/Output: [(26 86 49 0) 0]
Test Case: 800 | Input/Output: [(98 -89 -66 -84) -89]
Test Case: 801 | Input/Output: [(76 33 -92 -68) -92]
Test Case: 802 | Input/Output: [(-70 24 65 -52) -70]
Test Case: 803 | Input/Output: [(23 -30 -12 -28) -30]
Test Case: 804 | Input/Output: [(93 4 96 -21) -21]
Test Case: 805 | Input/Output: [(90 82 15 -43) -43]
Test Case: 806 | Input/Output: [(50 -47 -61 52) -61]
Test Case: 807 | Input/Output: [(11 -25 28 -15) -25]
Test Case: 808 | Input/Output: [(-43 -21 -75 43) -75]
Test Case: 809 | Input/Output: [(68 8 -62 15) -62]
Test Case: 810 | Input/Output: [(72 30 19 52) 19]
Test Case: 811 | Input/Output: [(58 -59 25 -13) -59]
Test Case: 812 | Input/Output: [(22 78 -75 71) -75]
Test Case: 813 | Input/Output: [(-33 76 -3 -72) -72]
Test Case: 814 | Input/Output: [(33 -33 57 56) -33]
Test Case: 815 | Input/Output: [(-74 21 91 68) -74]
Test Case: 816 | Input/Output: [(-84 31 -65 -37) -84]
Test Case: 817 | Input/Output: [(-28 33 -94 92) -94]
Test Case: 818 | Input/Output: [(-8 25 10 3) -8]
Test Case: 819 | Input/Output: [(35 53 -73 68) -73]
Test Case: 820 | Input/Output: [(59 -74 -5 10) -74]
Test Case: 821 | Input/Output: [(43 20 -23 1) -23]
Test Case: 822 | Input/Output: [(-30 -91 12 -52) -91]
Test Case: 823 | Input/Output: [(-63 -50 -18 -32) -63]
Test Case: 824 | Input/Output: [(68 -42 -43 -44) -44]
Test Case: 825 | Input/Output: [(49 -73 -15 12) -73]
Test Case: 826 | Input/Output: [(-13 48 -84 22) -84]
Test Case: 827 | Input/Output: [(45 68 -61 -32) -61]
Test Case: 828 | Input/Output: [(18 20 -11 -45) -45]
Test Case: 829 | Input/Output: [(34 53 -63 -65) -65]
Test Case: 830 | Input/Output: [(47 59 -9 -85) -85]
Test Case: 831 | Input/Output: [(-62 87 32 49) -62]
Test Case: 832 | Input/Output: [(-78 -60 -94 41) -94]
Test Case: 833 | Input/Output: [(4 58 59 54) 4]
Test Case: 834 | Input/Output: [(82 29 -50 -95) -95]
Test Case: 835 | Input/Output: [(20 6 100 -86) -86]
Test Case: 836 | Input/Output: [(-28 -63 35 -23) -63]
Test Case: 837 | Input/Output: [(22 -68 -43 -66) -68]
Test Case: 838 | Input/Output: [(-79 -59 -56 -4) -79]
Test Case: 839 | Input/Output: [(13 20 -72 -30) -72]
Test Case: 840 | Input/Output: [(-27 37 41 -40) -40]
Test Case: 841 | Input/Output: [(61 52 5 -5) -5]
Test Case: 842 | Input/Output: [(41 -11 31 54) -11]
Test Case: 843 | Input/Output: [(74 31 46 -99) -99]
Test Case: 844 | Input/Output: [(83 -98 -12 -20) -98]
Test Case: 845 | Input/Output: [(87 34 -22 -45) -45]
Test Case: 846 | Input/Output: [(-93 93 -76 -60) -93]
Test Case: 847 | Input/Output: [(27 45 -93 56) -93]
Test Case: 848 | Input/Output: [(12 95 -78 -48) -78]
Test Case: 849 | Input/Output: [(-49 -89 76 -59) -89]
Test Case: 850 | Input/Output: [(-7 78 -81 -15) -81]
Test Case: 851 | Input/Output: [(37 27 -19 41) -19]
Test Case: 852 | Input/Output: [(-82 8 -85 -68) -85]
Test Case: 853 | Input/Output: [(41 -96 -76 -43) -96]
Test Case: 854 | Input/Output: [(-34 34 -58 96) -58]
Test Case: 855 | Input/Output: [(79 -3 10 -4) -4]
Test Case: 856 | Input/Output: [(-81 -17 98 -52) -81]
Test Case: 857 | Input/Output: [(78 -75 69 38) -75]
Test Case: 858 | Input/Output: [(7 52 -1 -37) -37]
Test Case: 859 | Input/Output: [(37 48 17 -65) -65]
Test Case: 860 | Input/Output: [(98 91 -85 95) -85]
Test Case: 861 | Input/Output: [(17 76 -16 54) -16]
Test Case: 862 | Input/Output: [(-84 -38 -70 99) -84]
Test Case: 863 | Input/Output: [(-48 26 -84 18) -84]
Test Case: 864 | Input/Output: [(90 76 69 18) 18]
Test Case: 865 | Input/Output: [(59 61 -60 37) -60]
Test Case: 866 | Input/Output: [(-63 -31 -96 40) -96]
Test Case: 867 | Input/Output: [(-60 -65 19 35) -65]
Test Case: 868 | Input/Output: [(-82 -57 -29 -43) -82]
Test Case: 869 | Input/Output: [(84 47 -56 -78) -78]
Test Case: 870 | Input/Output: [(-35 30 -91 -46) -91]
Test Case: 871 | Input/Output: [(-11 -50 -44 65) -50]
Test Case: 872 | Input/Output: [(-90 26 0 71) -90]
Test Case: 873 | Input/Output: [(4 7 -94 -5) -94]
Test Case: 874 | Input/Output: [(-98 38 -72 15) -98]
Test Case: 875 | Input/Output: [(-62 -56 -84 -3) -84]
Test Case: 876 | Input/Output: [(11 -11 -74 -81) -81]
Test Case: 877 | Input/Output: [(30 -56 -25 77) -56]
Test Case: 878 | Input/Output: [(-97 95 -8 -51) -97]
Test Case: 879 | Input/Output: [(-11 -61 -89 -53) -89]
Test Case: 880 | Input/Output: [(-24 20 45 22) -24]
Test Case: 881 | Input/Output: [(-64 81 -24 -1) -64]
Test Case: 882 | Input/Output: [(6 75 -16 -21) -21]
Test Case: 883 | Input/Output: [(95 98 -31 -23) -31]
Test Case: 884 | Input/Output: [(-10 21 23 30) -10]
Test Case: 885 | Input/Output: [(-52 -23 -10 -68) -68]
Test Case: 886 | Input/Output: [(83 -51 -28 -8) -51]
Test Case: 887 | Input/Output: [(-100 18 -84 -66) -100]
Test Case: 888 | Input/Output: [(10 36 -99 27) -99]
Test Case: 889 | Input/Output: [(58 -44 30 -45) -45]
Test Case: 890 | Input/Output: [(-34 67 -70 -27) -70]
Test Case: 891 | Input/Output: [(31 86 -35 27) -35]
Test Case: 892 | Input/Output: [(26 -83 100 -54) -83]
Test Case: 893 | Input/Output: [(1 -46 59 74) -46]
Test Case: 894 | Input/Output: [(-5 90 84 -59) -59]
Test Case: 895 | Input/Output: [(16 -79 78 62) -79]
Test Case: 896 | Input/Output: [(-2 -61 -15 24) -61]
Test Case: 897 | Input/Output: [(-20 -12 -14 33) -20]
Test Case: 898 | Input/Output: [(84 -96 4 -11) -96]
Test Case: 899 | Input/Output: [(74 -22 -81 62) -81]
Test Case: 900 | Input/Output: [(66 9 -32 88) -32]
Test Case: 901 | Input/Output: [(29 -6 -53 87) -53]
Test Case: 902 | Input/Output: [(-26 -28 64 -40) -40]
Test Case: 903 | Input/Output: [(42 -64 -9 1) -64]
Test Case: 904 | Input/Output: [(22 69 -89 -100) -100]
Test Case: 905 | Input/Output: [(97 62 77 53) 53]
Test Case: 906 | Input/Output: [(73 -36 97 72) -36]
Test Case: 907 | Input/Output: [(14 5 -39 75) -39]
Test Case: 908 | Input/Output: [(100 16 9 13) 9]
Test Case: 909 | Input/Output: [(-99 -12 -38 -27) -99]
Test Case: 910 | Input/Output: [(91 89 -65 61) -65]
Test Case: 911 | Input/Output: [(41 -72 -71 -93) -93]
Test Case: 912 | Input/Output: [(-95 -80 -33 27) -95]
Test Case: 913 | Input/Output: [(-94 -38 -81 85) -94]
Test Case: 914 | Input/Output: [(-79 -94 -38 58) -94]
Test Case: 915 | Input/Output: [(-1 -89 22 -15) -89]
Test Case: 916 | Input/Output: [(10 26 -79 37) -79]
Test Case: 917 | Input/Output: [(25 -71 49 -33) -71]
Test Case: 918 | Input/Output: [(-98 -49 -32 29) -98]
Test Case: 919 | Input/Output: [(97 46 -54 -90) -90]
Test Case: 920 | Input/Output: [(-52 65 66 -69) -69]
Test Case: 921 | Input/Output: [(100 69 -92 -62) -92]
Test Case: 922 | Input/Output: [(-7 61 -28 -34) -34]
Test Case: 923 | Input/Output: [(96 12 18 98) 12]
Test Case: 924 | Input/Output: [(-14 -84 -74 35) -84]
Test Case: 925 | Input/Output: [(-89 -18 94 -37) -89]
Test Case: 926 | Input/Output: [(-44 47 15 -39) -44]
Test Case: 927 | Input/Output: [(50 22 -67 65) -67]
Test Case: 928 | Input/Output: [(33 6 -70 -52) -70]
Test Case: 929 | Input/Output: [(-83 -5 2 -24) -83]
Test Case: 930 | Input/Output: [(84 -31 11 96) -31]
Test Case: 931 | Input/Output: [(35 65 -50 22) -50]
Test Case: 932 | Input/Output: [(0 19 52 -46) -46]
Test Case: 933 | Input/Output: [(-28 61 27 -2) -28]
Test Case: 934 | Input/Output: [(33 -44 77 24) -44]
Test Case: 935 | Input/Output: [(84 -25 86 59) -25]
Test Case: 936 | Input/Output: [(23 -83 -76 98) -83]
Test Case: 937 | Input/Output: [(-64 -77 7 -21) -77]
Test Case: 938 | Input/Output: [(-99 -65 -61 -20) -99]
Test Case: 939 | Input/Output: [(-54 65 6 -63) -63]
Test Case: 940 | Input/Output: [(-1 1 -85 90) -85]
Test Case: 941 | Input/Output: [(22 -82 -99 -67) -99]
Test Case: 942 | Input/Output: [(-55 -22 80 89) -55]
Test Case: 943 | Input/Output: [(-59 -44 -22 39) -59]
Test Case: 944 | Input/Output: [(25 29 -20 74) -20]
Test Case: 945 | Input/Output: [(-79 -82 77 47) -82]
Test Case: 946 | Input/Output: [(40 100 -99 0) -99]
Test Case: 947 | Input/Output: [(-33 91 72 17) -33]
Test Case: 948 | Input/Output: [(-18 84 -55 86) -55]
Test Case: 949 | Input/Output: [(-66 -81 87 47) -81]
Test Case: 950 | Input/Output: [(-56 94 3 -99) -99]
Test Case: 951 | Input/Output: [(41 61 -79 -86) -86]
Test Case: 952 | Input/Output: [(47 70 -91 100) -91]
Test Case: 953 | Input/Output: [(-68 -33 59 60) -68]
Test Case: 954 | Input/Output: [(-54 -1 -74 -36) -74]
Test Case: 955 | Input/Output: [(-39 -87 82 36) -87]
Test Case: 956 | Input/Output: [(16 -39 62 3) -39]
Test Case: 957 | Input/Output: [(-59 -62 48 -8) -62]
Test Case: 958 | Input/Output: [(71 -58 -22 6) -58]
Test Case: 959 | Input/Output: [(-30 -79 20 65) -79]
Test Case: 960 | Input/Output: [(41 12 -33 10) -33]
Test Case: 961 | Input/Output: [(54 -7 -78 -87) -87]
Test Case: 962 | Input/Output: [(-32 45 44 64) -32]
Test Case: 963 | Input/Output: [(31 31 -41 -66) -66]
Test Case: 964 | Input/Output: [(-43 -27 60 1) -43]
Test Case: 965 | Input/Output: [(-11 -62 -86 -67) -86]
Test Case: 966 | Input/Output: [(15 -42 -86 -87) -87]
Test Case: 967 | Input/Output: [(-32 -3 49 -37) -37]
Test Case: 968 | Input/Output: [(-37 -86 -37 26) -86]
Test Case: 969 | Input/Output: [(-67 47 -16 -55) -67]
Test Case: 970 | Input/Output: [(50 21 94 17) 17]
Test Case: 971 | Input/Output: [(-53 28 -41 -76) -76]
Test Case: 972 | Input/Output: [(-90 34 21 91) -90]
Test Case: 973 | Input/Output: [(100 99 3 -13) -13]
Test Case: 974 | Input/Output: [(40 97 -37 -94) -94]
Test Case: 975 | Input/Output: [(56 7 65 -42) -42]
Test Case: 976 | Input/Output: [(60 -42 57 -15) -42]
Test Case: 977 | Input/Output: [(-95 -6 85 86) -95]
Test Case: 978 | Input/Output: [(-10 -38 44 21) -38]
Test Case: 979 | Input/Output: [(-95 -26 -75 -6) -95]
Test Case: 980 | Input/Output: [(38 -52 -43 -13) -52]
Test Case: 981 | Input/Output: [(-15 71 76 -58) -58]
Test Case: 982 | Input/Output: [(40 8 83 -29) -29]
Test Case: 983 | Input/Output: [(-72 43 53 -54) -72]
Test Case: 984 | Input/Output: [(44 -56 -60 22) -60]
Test Case: 985 | Input/Output: [(-84 75 -24 26) -84]
Test Case: 986 | Input/Output: [(-21 44 81 30) -21]
Test Case: 987 | Input/Output: [(-63 -96 -100 -88) -100]
Test Case: 988 | Input/Output: [(32 72 -48 -52) -52]
Test Case: 989 | Input/Output: [(11 52 -2 33) -2]
Test Case: 990 | Input/Output: [(77 -90 91 -64) -90]
Test Case: 991 | Input/Output: [(32 -72 70 56) -72]
Test Case: 992 | Input/Output: [(-13 2 -87 20) -87]
Test Case: 993 | Input/Output: [(-16 91 -32 63) -32]
Test Case: 994 | Input/Output: [(30 49 -2 20) -2]
Test Case: 995 | Input/Output: [(-7 7 56 93) -7]
Test Case: 996 | Input/Output: [(-48 69 26 -59) -59]
Test Case: 997 | Input/Output: [(64 -50 -64 12) -64]
Test Case: 998 | Input/Output: [(19 87 53 -78) -78]
Test Case: 999 | Input/Output: [(61 -95 -90 -1) -95]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -98 -1 122 -26 31 -13 88 -55 -116 -100 89 38 -36 -45 -33 -99
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[86 -49 -49 -49] -49] [[-70 86 86 86] -70] [[64 -27 -27 -27] -27] [[88 88 45 88] 45] [[-42 -42 -42 94] -42] [[18 -30 -30 -30] -30] [[-86 84 84 84] -86] [[-68 -68 -68 19] -68] [[-80 -80 -80 98] -80] [[12 -34 -34 -34] -34] [(36 36 36 36) 36] [(-34 -34 -34 -34) -34] [(-20 -20 -20 -20) -20] [(-30 -30 -30 -30) -30] [(-26 -26 -26 -26) -26] [(55 21 94 55) 21] [(26 5 30 91) 5] [(24 55 10 20) 10] [(49 12 71 92) 12] [(100 35 77 22) 22] [(8 93 99 33) 8] [(51 51 17 22) 17] [(51 56 4 50) 4] [(4 94 45 95) 4] [(32 67 52 72) 32] [(24 7 27 22) 7] [(97 34 71 0) 0] [(30 21 39 34) 21] [(10 37 1 58) 1] [(18 78 3 51) 3] [(19 97 57 34) 19] [(48 41 7 99) 7] [(96 1 20 40) 1] [(90 59 44 56) 44] [(24 95 37 56) 24] [(64 67 -7 9) -7] [(46 45 -82 8) -82] [(81 56 92 -5) -5] [(-84 86 -12 54) -84] [(-21 75 17 -17) -21] [(-71 16 -90 8) -90] [(-1 -83 -77 -15) -83] [(78 -43 56 21) -43] [(-38 -72 13 -54) -72] [(100 -57 -77 -14) -77] [(-20 81 8 28) -20] [(26 -2 -81 59) -81] [(34 -40 -34 -16) -40] [(-31 -77 76 -36) -77] [(80 6 -25 14) -25] [(64 50 -19 -99) -99] [(-50 48 74 42) -50] [(-79 8 -35 23) -79] [(-49 -93 55 32) -93] [(-30 76 91 -4) -30] [(84 -32 39 -67) -67] [(-72 57 43 -42) -72] [(67 42 -72 -12) -72] [(-78 18 -90 60) -90] [(88 -32 8 -23) -32] [(59 82 83 -29) -29] [(47 83 -72 -2) -72] [(-12 -29 88 -68) -68] [(9 45 -32 -21) -32] [(-78 -63 4 77) -78] [(0 -94 97 -41) -94] [(-26 6 77 88) -26] [(-14 -14 -63 33) -63] [(83 16 34 -55) -55] [(-77 72 4 -20) -77] [(71 17 -8 -6) -8] [(51 -98 77 -63) -98] [(-6 -93 -100 -58) -100] [(80 -46 -94 -78) -94] [(-37 -71 31 -21) -71] [(2 13 -13 19) -13] [(76 -19 -6 -7) -19] [(-99 -74 69 68) -99] [(84 48 -81 41) -81] [(-98 -52 -93 -17) -98] [(-83 -86 -82 -84) -86] [(-64 -54 -99 -41) -99] [(-82 -5 24 -44) -82] [(-58 18 22 66) -58] [(-18 -9 74 -65) -65] [(80 -59 19 -78) -78] [(-47 23 -15 95) -47] [(-21 59 97 -66) -66] [(40 87 80 21) 21] [(-26 -4 -51 56) -51] [(83 6 -78 -89) -89] [(-60 100 71 24) -60] [(-84 25 57 -78) -84] [(-59 94 16 -66) -66] [(-25 -23 -100 57) -100])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 64                 
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 26                 
Correct output: 10                  | Program output: 24                 
Correct output: 12                  | Program output: 49                 
Correct output: 22                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 24                 
Correct output: 0                   | Program output: 97                 
Correct output: 21                  | Program output: 30                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 48                 
Correct output: 1                   | Program output: 96                 
Correct output: 44                  | Program output: 90                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: 64                 
Correct output: -82                 | Program output: 46                 
Correct output: -5                  | Program output: 81                 
Correct output: -84                 | Program output: -84                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -71                
Correct output: -83                 | Program output: -1                 
Correct output: -43                 | Program output: 78                 
Correct output: -72                 | Program output: -38                
Correct output: -77                 | Program output: 100                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: 26                 
Correct output: -40                 | Program output: 34                 
Correct output: -77                 | Program output: -31                
Correct output: -25                 | Program output: 80                 
Correct output: -99                 | Program output: 64                 
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -49                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: 84                 
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: 67                 
Correct output: -90                 | Program output: -78                
Correct output: -32                 | Program output: 88                 
Correct output: -29                 | Program output: 59                 
Correct output: -72                 | Program output: 47                 
Correct output: -68                 | Program output: -12                
Correct output: -32                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: 71                 
Correct output: -98                 | Program output: 51                 
Correct output: -100                | Program output: -6                 
Correct output: -94                 | Program output: 80                 
Correct output: -71                 | Program output: -37                
Correct output: -13                 | Program output: 2                  
Correct output: -19                 | Program output: 76                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 84                 
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -83                
Correct output: -99                 | Program output: -64                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: 80                 
Correct output: -47                 | Program output: -47                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 40                 
Correct output: -51                 | Program output: -26                
Correct output: -89                 | Program output: 83                 
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction -63} {:close 0, :instruction exec_empty} {:close 3, :instruction exec_y} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction 43} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction tagged_757} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 1, :instruction tag_boolean_667} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction 13} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_k})
Lexicase best program: (boolean_dup_items exec_do*while (integer_sub integer_inc) integer_max integer_pop boolean_dup_items exec_swap (boolean_invert_first_then_and) (integer_mult integer_inc boolean_yankdup) boolean_not integer_mod exec_if (integer_sub integer_lte exec_dup_items boolean_and print_integer integer_gt exec_swap (boolean_flush) (integer_inc boolean_swap exec_yank exec_empty exec_do*range (exec_do*count (integer_lt exec_s_when_autoconstructing (boolean_pop exec_eq) (exec_shove () exec_y (integer_mod integer_fromboolean exec_flush exec_y (integer_dup integer_sub exec_flush exec_s_when_autoconstructing () (boolean_dup) (integer_stackdepth boolean_yank) in1 integer_lt exec_do*times (print_boolean integer_gte exec_empty boolean_frominteger)) boolean_or integer_mod integer_inc boolean_or integer_sub) exec_do*range ()) (integer_mult exec_pop (exec_while (in4 -63 exec_empty exec_y ())) exec_while (boolean_dup_times) 43 integer_gt) boolean_or tagged_757) exec_swap (in1 print_integer) (integer_eq) tag_boolean_667) integer_eq integer_gte) print_boolean exec_flush boolean_frominteger integer_rot) (integer_mod print_integer in3) integer_dup_items 13 boolean_swap exec_s (boolean_invert_first_then_and integer_div boolean_dup_items) () (exec_k () ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 126
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction -63} {:close 0, :instruction exec_empty} {:close 3, :instruction exec_y} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction 43} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction tagged_757} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 1, :instruction tag_boolean_667} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction 13} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_k})
Zero cases best program: (boolean_dup_items exec_do*while (integer_sub integer_inc) integer_max integer_pop boolean_dup_items exec_swap (boolean_invert_first_then_and) (integer_mult integer_inc boolean_yankdup) boolean_not integer_mod exec_if (integer_sub integer_lte exec_dup_items boolean_and print_integer integer_gt exec_swap (boolean_flush) (integer_inc boolean_swap exec_yank exec_empty exec_do*range (exec_do*count (integer_lt exec_s_when_autoconstructing (boolean_pop exec_eq) (exec_shove () exec_y (integer_mod integer_fromboolean exec_flush exec_y (integer_dup integer_sub exec_flush exec_s_when_autoconstructing () (boolean_dup) (integer_stackdepth boolean_yank) in1 integer_lt exec_do*times (print_boolean integer_gte exec_empty boolean_frominteger)) boolean_or integer_mod integer_inc boolean_or integer_sub) exec_do*range ()) (integer_mult exec_pop (exec_while (in4 -63 exec_empty exec_y ())) exec_while (boolean_dup_times) 43 integer_gt) boolean_or tagged_757) exec_swap (in1 print_integer) (integer_eq) tag_boolean_667) integer_eq integer_gte) print_boolean exec_flush boolean_frominteger integer_rot) (integer_mod print_integer in3) integer_dup_items 13 boolean_swap exec_s (boolean_invert_first_then_and integer_div boolean_dup_items) () (exec_k () ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 126
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 9 2 3 7 4 4 5 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 3 9 2 3 7 4 4 5 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction tagged_426} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction -46} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (in1 tagged_426 exec_stackdepth boolean_empty boolean_empty boolean_not boolean_yank print_integer exec_s (exec_eq integer_lte integer_lt boolean_not -46 exec_yankdup) (exec_k_when_autoconstructing () (boolean_xor) boolean_flush boolean_or boolean_and) (integer_max exec_do*times (exec_do*count () print_integer boolean_and integer_shove exec_if (integer_eq integer_dup_times) (integer_mod exec_stackdepth))))
Errors: [1 0 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.991 0.998 0.997 0.993 0.996 0.996 0.995 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.092
Average program size in population (points): 70.288
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 503003
--- Timings ---
Current time: 1559593979704 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.8 seconds, 26.6%
Fitness Testing:      2.0 seconds, 69.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 45                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 94                 
Correct output: 5                   | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 71                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 99                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 45                 
Correct output: 32                  | Program output: 52                 
Correct output: 7                   | Program output: 27                 
Correct output: 0                   | Program output: 71                 
Correct output: 21                  | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 92                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -57                
Correct output: -20                 | Program output: 8                  
Correct output: -81                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 74                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 91                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 43                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 77                 
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 34                 
Correct output: -77                 | Program output: 4                  
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -93                
Correct output: -94                 | Program output: -46                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -54                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 22                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 97                 
Correct output: 21                  | Program output: 80                 
Correct output: -51                 | Program output: -4                 
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 71                 
Correct output: -84                 | Program output: 57                 
Correct output: -66                 | Program output: 16                 
Correct output: -100                | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction -76} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_swap exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer exec_s () (boolean_not integer_rot boolean_empty) (exec_yank) exec_do*times () exec_if () (integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and print_integer integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_mod integer_gte integer_fromboolean integer_shove integer_yankdup) boolean_frominteger integer_inc integer_lte integer_inc) exec_eq) integer_mult boolean_pop integer_dup_times exec_y () exec_s_when_autoconstructing (boolean_empty) (integer_mod integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty exec_k_when_autoconstructing (exec_s (boolean_dup_items integer_inc) (integer_max exec_eq integer_swap) (integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop -76) tag_integer_659 exec_y (integer_flush integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())))) ())))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 123
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction -76} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_swap exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer exec_s () (boolean_not integer_rot boolean_empty) (exec_yank) exec_do*times () exec_if () (integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and print_integer integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_mod integer_gte integer_fromboolean integer_shove integer_yankdup) boolean_frominteger integer_inc integer_lte integer_inc) exec_eq) integer_mult boolean_pop integer_dup_times exec_y () exec_s_when_autoconstructing (boolean_empty) (integer_mod integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty exec_k_when_autoconstructing (exec_s (boolean_dup_items integer_inc) (integer_max exec_eq integer_swap) (integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop -76) tag_integer_659 exec_y (integer_flush integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())))) ())))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 123
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 344 386 344 102 158 102 100 143 386)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (102 344 386 344 102 158 102 100 143 386)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction -76} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_swap exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer exec_s () (boolean_not integer_rot boolean_empty) (exec_yank) exec_do*times () exec_if () (integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and print_integer integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_mod integer_gte integer_fromboolean integer_shove integer_yankdup) boolean_frominteger integer_inc integer_lte integer_inc) exec_eq) integer_mult boolean_pop integer_dup_times exec_y () exec_s_when_autoconstructing (boolean_empty) (integer_mod integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty exec_k_when_autoconstructing (exec_s (boolean_dup_items integer_inc) (integer_max exec_eq integer_swap) (integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop -76) tag_integer_659 exec_y (integer_flush integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())))) ())))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 87
Size: 123
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.833
Median total errors in population: 9
Error averages by case: (0.898 0.656 0.614 0.656 0.898 0.842 0.898 0.9 0.857 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.906
Average program size in population (points): 78.188
Average percent parens in population: 0.268
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1020459
--- Timings ---
Current time: 1559593982176 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.8 seconds, 34.8%
Fitness Testing:      2.8 seconds, 52.8%
Report:               0.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 45                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 94                 
Correct output: 5                   | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 71                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 99                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 45                 
Correct output: 32                  | Program output: 52                 
Correct output: 7                   | Program output: 27                 
Correct output: 0                   | Program output: 71                 
Correct output: 21                  | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 92                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -57                
Correct output: -20                 | Program output: 8                  
Correct output: -81                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 74                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 91                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 43                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 77                 
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 34                 
Correct output: -77                 | Program output: 4                  
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -93                
Correct output: -94                 | Program output: -46                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -54                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 22                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 97                 
Correct output: 21                  | Program output: 80                 
Correct output: -51                 | Program output: -4                 
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 71                 
Correct output: -84                 | Program output: 57                 
Correct output: -66                 | Program output: 16                 
Correct output: -100                | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction -85} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction -76} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_swap exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer exec_s () (boolean_not integer_rot boolean_empty) (exec_yank) exec_do*times () exec_if () (integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and print_integer integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_mod integer_gte integer_fromboolean integer_shove integer_yankdup integer_yankdup) boolean_frominteger integer_inc integer_lte integer_inc) exec_eq) boolean_invert_first_then_and integer_mult -85 boolean_pop integer_dup_times exec_y () exec_s_when_autoconstructing (boolean_empty) (integer_min) (exec_pop (integer_pop exec_while (integer_empty exec_k_when_autoconstructing (boolean_shove boolean_dup_items integer_inc) (integer_max exec_eq integer_swap) integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items -76) tag_integer_659 exec_y (integer_flush integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing ()) ()))))))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 121
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction -85} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction -76} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_swap exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer exec_s () (boolean_not integer_rot boolean_empty) (exec_yank) exec_do*times () exec_if () (integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and print_integer integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_mod integer_gte integer_fromboolean integer_shove integer_yankdup integer_yankdup) boolean_frominteger integer_inc integer_lte integer_inc) exec_eq) boolean_invert_first_then_and integer_mult -85 boolean_pop integer_dup_times exec_y () exec_s_when_autoconstructing (boolean_empty) (integer_min) (exec_pop (integer_pop exec_while (integer_empty exec_k_when_autoconstructing (boolean_shove boolean_dup_items integer_inc) (integer_max exec_eq integer_swap) integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items -76) tag_integer_659 exec_y (integer_flush integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing ()) ()))))))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 121
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 523 283 12 4 29 4 499 514 286)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (12 523 283 12 4 29 4 499 514 286)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction -76} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_swap exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer exec_s () (boolean_not integer_rot exec_yank) (exec_do*times () exec_if () (integer_sub boolean_rot exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and print_integer integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max integer_yankdup exec_do*while (in1 integer_sub exec_do*range () integer_mod integer_gte integer_fromboolean integer_shove integer_yankdup) boolean_frominteger integer_min integer_inc integer_lte integer_inc) exec_eq) integer_mult boolean_pop integer_dup_times exec_y () exec_s_when_autoconstructing (boolean_empty) (integer_mod integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty exec_k_when_autoconstructing (exec_s (boolean_dup_items integer_inc) (integer_max exec_eq integer_swap) (integer_div) print_newline) (boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (integer_rot) exec_y_when_autoconstructing (integer_dup_items integer_pop -76) tag_integer_659 exec_y (integer_flush integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_rot exec_s_when_autoconstructing (boolean_dup_items) () ())) ())))))
Errors: [1 0 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 126
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.834
Median total errors in population: 7
Error averages by case: (0.988 0.477 0.717 0.988 0.996 0.971 0.996 0.501 0.486 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.441
Average program size in population (points): 120.829
Average percent parens in population: 0.284
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1912438
--- Timings ---
Current time: 1559593985220 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.1 seconds, 37.6%
Fitness Testing:      3.8 seconds, 46.7%
Report:               1.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 93                 
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 56                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 37                 
Correct output: 3                   | Program output: 78                 
Correct output: 19                  | Program output: 97                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 95                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 75                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: 81                 
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 48                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 76                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 57                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 82                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: 72                 
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 18                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 59                 
Correct output: 21                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 100                
Correct output: -84                 | Program output: 25                 
Correct output: -66                 | Program output: 94                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer integer_sub exec_s () (boolean_not integer_rot exec_if (boolean_empty) (exec_while (exec_yank) exec_do*times () integer_sub exec_shove (integer_lte integer_mult exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 integer_swap exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () in4 integer_mod integer_gte integer_fromboolean integer_yankdup) boolean_frominteger integer_inc integer_inc) exec_eq) exec_y () integer_mult) (integer_gt boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_pop exec_s_when_autoconstructing (boolean_empty) (integer_mod exec_s (integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty boolean_dup_items integer_dup_items)) (integer_inc) integer_max boolean_rot exec_eq integer_swap) (integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop tag_integer_659 exec_y (integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())))))
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 127
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer integer_sub exec_s () (boolean_not integer_rot exec_if (boolean_empty) (exec_while (exec_yank) exec_do*times () integer_sub exec_shove (integer_lte integer_mult exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 integer_swap exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () in4 integer_mod integer_gte integer_fromboolean integer_yankdup) boolean_frominteger integer_inc integer_inc) exec_eq) exec_y () integer_mult) (integer_gt boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_pop exec_s_when_autoconstructing (boolean_empty) (integer_mod exec_s (integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty boolean_dup_items integer_dup_items)) (integer_inc) integer_max boolean_rot exec_eq integer_swap) (integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop tag_integer_659 exec_y (integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())))))
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 127
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 218 5 22 133 4 27 300 133 218)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (297 218 5 22 133 4 27 300 133 218)
Population mean number of perfect (error zero) cases: 1.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_do*while () print_integer integer_sub exec_s () (boolean_not integer_rot exec_if (boolean_empty) (exec_while (exec_yank) exec_do*times () integer_sub exec_shove (integer_lte integer_mult exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 integer_swap exec_do*times (print_integer integer_max exec_when (integer_yankdup exec_do*while (in1 exec_do*range () in4 integer_mod integer_gte integer_fromboolean integer_yankdup) boolean_frominteger integer_inc integer_inc) exec_eq) exec_y () integer_mult) (integer_gt boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_pop exec_s_when_autoconstructing (boolean_empty) (integer_mod exec_s (integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty boolean_dup_items integer_dup_items)) (integer_inc) integer_max boolean_rot exec_eq integer_swap) (integer_div) boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop tag_integer_659 exec_y (integer_flush boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())))))
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 91
Size: 127
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 8.643
Median total errors in population: 9
Error averages by case: (0.703 0.782 0.995 0.978 0.867 0.996 0.973 0.7 0.867 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.149
Average program size in population (points): 122.988
Average percent parens in population: 0.283
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2856878
--- Timings ---
Current time: 1559593988003 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.2 seconds, 38.2%
Fitness Testing:      4.7 seconds, 43.1%
Report:               2.0 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 45                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 94                 
Correct output: 5                   | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 71                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 99                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 45                 
Correct output: 32                  | Program output: 52                 
Correct output: 7                   | Program output: 27                 
Correct output: 0                   | Program output: 71                 
Correct output: 21                  | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 92                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -57                
Correct output: -20                 | Program output: 8                  
Correct output: -81                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 74                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 91                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 43                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 77                 
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 34                 
Correct output: -77                 | Program output: 4                  
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -93                
Correct output: -94                 | Program output: -46                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -54                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 22                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 97                 
Correct output: 21                  | Program output: 80                 
Correct output: -51                 | Program output: -4                 
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 71                 
Correct output: -84                 | Program output: 57                 
Correct output: -66                 | Program output: 16                 
Correct output: -100                | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_659} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_swap (exec_do*while ()) (print_integer integer_sub exec_s () (integer_rot exec_if (boolean_empty) (exec_while (exec_yank) exec_do*times () integer_yankdup integer_sub exec_shove (integer_lte integer_mult exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max integer_eq exec_when (integer_yankdup exec_do*while (in1 exec_do*range () in4 integer_mod integer_gte integer_fromboolean integer_yankdup) boolean_frominteger integer_inc integer_inc) exec_eq) exec_y () integer_mult) (integer_gt boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_flush boolean_pop exec_eq exec_s_when_autoconstructing (boolean_empty) (integer_mod exec_s (exec_pop (integer_pop boolean_dup_items integer_empty boolean_dup_items integer_dup_items)) (integer_max boolean_rot exec_eq integer_div) (boolean_pop integer_sub integer_rot boolean_invert_first_then_and exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop integer_lte) boolean_stackdepth) (tag_integer_659 integer_flush integer_dec) boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())) ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 128
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_659} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_pop () exec_swap (exec_do*while ()) (print_integer integer_sub exec_s () (integer_rot exec_if (boolean_empty) (exec_while (exec_yank) exec_do*times () integer_yankdup integer_sub exec_shove (integer_lte integer_mult exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_shove) in3 in2 exec_do*times (print_integer integer_max integer_eq exec_when (integer_yankdup exec_do*while (in1 exec_do*range () in4 integer_mod integer_gte integer_fromboolean integer_yankdup) boolean_frominteger integer_inc integer_inc) exec_eq) exec_y () integer_mult) (integer_gt boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_flush boolean_pop exec_eq exec_s_when_autoconstructing (boolean_empty) (integer_mod exec_s (exec_pop (integer_pop boolean_dup_items integer_empty boolean_dup_items integer_dup_items)) (integer_max boolean_rot exec_eq integer_div) (boolean_pop integer_sub integer_rot boolean_invert_first_then_and exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop integer_lte) boolean_stackdepth) (tag_integer_659 integer_flush integer_dec) boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ())) ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 128
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 45 518 79 220 60 184 122 182 187)
Population mean number of elite cases: 1.68
Count of perfect (error zero) individuals by case: (80 45 518 79 220 60 184 122 182 187)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -82} {:close 0, :instruction integer_shove} {:close 1, :instruction -76} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_swap exec_pop () boolean_empty boolean_and exec_pop () exec_do*while () print_integer exec_s () (boolean_shove boolean_not integer_rot boolean_empty) (exec_yank) exec_do*times () exec_if () (integer_sub exec_shove (exec_yankdup integer_lte integer_flush print_integer integer_mod)) integer_dec integer_mod in3 in2 exec_do*times (print_integer in1 in2 integer_max exec_when (boolean_and integer_yankdup exec_do*while (in1 exec_do*range () exec_flush integer_flush integer_mod integer_fromboolean integer_shove integer_yankdup) boolean_frominteger exec_flush integer_lte integer_inc) exec_eq) integer_mult boolean_pop integer_dup_times exec_yank boolean_invert_second_then_and exec_y () boolean_empty integer_mod integer_min exec_pop (exec_dup_times (integer_pop integer_empty exec_swap (boolean_eq exec_k_when_autoconstructing (exec_s (boolean_dup_items exec_dup_times (integer_swap boolean_or) exec_eq integer_swap) (integer_div) (boolean_pop in3 exec_yankdup boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (boolean_shove exec_y_when_autoconstructing (integer_dup_items -82 integer_shove -76) exec_stackdepth) integer_flush boolean_xor exec_swap (boolean_and 63 exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_dup_items))) ()))) ()) ())))
Errors: [1 0 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 94
Size: 128
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 8.323
Median total errors in population: 8
Error averages by case: (0.92 0.955 0.482 0.921 0.78 0.94 0.816 0.878 0.818 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.35
Average program size in population (points): 125.603
Average percent parens in population: 0.280
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3704642
--- Timings ---
Current time: 1559593990580 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.4 seconds, 39.0%
Fitness Testing:      5.6 seconds, 40.9%
Report:               2.7 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 93                 
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 56                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 37                 
Correct output: 3                   | Program output: 78                 
Correct output: 19                  | Program output: 97                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 95                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 75                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: 81                 
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 48                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 76                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 57                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 82                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: 72                 
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 18                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 59                 
Correct output: 21                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 100                
Correct output: -84                 | Program output: 25                 
Correct output: -66                 | Program output: 94                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_do*while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 2, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_rot (exec_do*while ()) (boolean_not) (integer_sub print_integer boolean_not) integer_sub exec_s () (boolean_not boolean_not integer_rot exec_if (boolean_empty) (integer_add boolean_dup_items exec_while (integer_inc) exec_yank) exec_do*times () integer_sub exec_shove (in3 integer_lte boolean_not) exec_if (integer_max integer_mod) () boolean_shove) (in3 in2 integer_swap exec_do*times (print_integer exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_dup_times in4 integer_mod integer_fromboolean integer_yankdup) integer_fromboolean integer_inc) exec_y () integer_mult) boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_pop exec_s_when_autoconstructing (integer_mod integer_min) (exec_pop (integer_pop boolean_dup_items boolean_dup_items integer_dup_items)) (integer_inc) integer_flush integer_max boolean_rot exec_eq integer_div boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (integer_pop tag_integer_659 exec_y (integer_flush exec_swap (boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ()))))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_do*while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 2, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () exec_pop (exec_eq) boolean_empty exec_rot (exec_do*while ()) (boolean_not) (integer_sub print_integer boolean_not) integer_sub exec_s () (boolean_not boolean_not integer_rot exec_if (boolean_empty) (integer_add boolean_dup_items exec_while (integer_inc) exec_yank) exec_do*times () integer_sub exec_shove (in3 integer_lte boolean_not) exec_if (integer_max integer_mod) () boolean_shove) (in3 in2 integer_swap exec_do*times (print_integer exec_when (integer_yankdup exec_do*while (in1 exec_do*range () integer_dup_times in4 integer_mod integer_fromboolean integer_yankdup) integer_fromboolean integer_inc) exec_y () integer_mult) boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_pop exec_s_when_autoconstructing (integer_mod integer_min) (exec_pop (integer_pop boolean_dup_items boolean_dup_items integer_dup_items)) (integer_inc) integer_flush integer_max boolean_rot exec_eq integer_div boolean_pop integer_sub boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot) (integer_pop tag_integer_659 exec_y (integer_flush exec_swap (boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) ()))))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 233 31 121 129 119 32 123 562 119)
Population mean number of elite cases: 1.55
Count of perfect (error zero) individuals by case: (79 233 31 121 129 119 32 123 562 119)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () exec_pop (print_boolean exec_eq) boolean_empty exec_pop () exec_do*while () integer_sub exec_do*range () exec_s () (boolean_not integer_rot exec_if (boolean_empty) (integer_gte exec_while (exec_yank) exec_do*times () integer_sub exec_dup_items exec_shove (integer_mult exec_if (integer_flush integer_mod) () in1 integer_mod boolean_shove) in3 in2 integer_swap exec_do*times (print_integer integer_sub integer_max exec_when (exec_dup_times (exec_do*while (exec_empty) exec_do*range () in4 integer_mod boolean_invert_second_then_and integer_fromboolean exec_yankdup integer_yankdup) boolean_frominteger integer_lte) integer_inc integer_inc) exec_eq) integer_mult) (boolean_pop integer_fromboolean) integer_dup_times exec_y () boolean_pop exec_s_when_autoconstructing (boolean_empty) (exec_shove () integer_mod integer_dup_items exec_s (integer_min) (exec_pop (integer_pop boolean_dup_items integer_empty boolean_dup_items integer_dup_items)) (integer_inc) boolean_frominteger) (integer_max exec_eq integer_empty integer_swap) boolean_pop boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot integer_rot) (exec_y_when_autoconstructing (integer_dup_items integer_pop exec_y (exec_do*while (boolean_xor exec_swap (boolean_and boolean_and 63 exec_y_when_autoconstructing (integer_min boolean_dup_items)) ()))))))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 95
Size: 134
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 8.452
Median total errors in population: 9
Error averages by case: (0.921 0.767 0.969 0.879 0.871 0.881 0.968 0.877 0.438 0.881)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.758
Average program size in population (points): 123.917
Average percent parens in population: 0.275
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4575055
--- Timings ---
Current time: 1559593993400 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.5 seconds, 39.8%
Fitness Testing:      6.5 seconds, 40.0%
Report:               3.2 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 45                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 94                 
Correct output: 5                   | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 71                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 99                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 45                 
Correct output: 32                  | Program output: 52                 
Correct output: 7                   | Program output: 27                 
Correct output: 0                   | Program output: 71                 
Correct output: 21                  | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 92                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -57                
Correct output: -20                 | Program output: 8                  
Correct output: -81                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 74                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 91                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 43                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 77                 
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 34                 
Correct output: -77                 | Program output: 4                  
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -93                
Correct output: -94                 | Program output: -46                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -54                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 22                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 97                 
Correct output: 21                  | Program output: 80                 
Correct output: -51                 | Program output: -4                 
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 71                 
Correct output: -84                 | Program output: 57                 
Correct output: -66                 | Program output: 16                 
Correct output: -100                | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_eq integer_dec boolean_empty exec_pop () exec_do*while () print_integer integer_sub exec_s () (boolean_not integer_rot exec_if (boolean_empty) (exec_yank) exec_do*times () integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_and boolean_shove) (in3 in2 exec_do*times (print_integer integer_max exec_when (exec_pop (in1 exec_do*range () boolean_frominteger exec_swap (integer_gte integer_yankdup) (boolean_frominteger integer_inc integer_inc) integer_flush exec_eq) exec_y () integer_mult) integer_shove) integer_gt boolean_dup_times integer_fromboolean) exec_s (integer_dup_times boolean_pop integer_min exec_y () boolean_pop exec_s_when_autoconstructing (integer_dup_items boolean_empty) (integer_mod exec_s (exec_yank exec_pop (integer_pop boolean_dup_items integer_empty integer_gt boolean_dup_items integer_inc) integer_max boolean_rot exec_eq integer_swap) (integer_div) (boolean_pop integer_sub exec_y_when_autoconstructing (integer_rot) exec_y_when_autoconstructing (integer_dup_items exec_rot (integer_pop exec_y (exec_yankdup) integer_flush boolean_xor boolean_dup_times boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) () ()))) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 127
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_eq integer_dec boolean_empty exec_pop () exec_do*while () print_integer integer_sub exec_s () (boolean_not integer_rot exec_if (boolean_empty) (exec_yank) exec_do*times () integer_sub exec_shove (integer_lte exec_if (integer_flush boolean_invert_first_then_and integer_mod) () integer_dec) integer_mod boolean_and boolean_shove) (in3 in2 exec_do*times (print_integer integer_max exec_when (exec_pop (in1 exec_do*range () boolean_frominteger exec_swap (integer_gte integer_yankdup) (boolean_frominteger integer_inc integer_inc) integer_flush exec_eq) exec_y () integer_mult) integer_shove) integer_gt boolean_dup_times integer_fromboolean) exec_s (integer_dup_times boolean_pop integer_min exec_y () boolean_pop exec_s_when_autoconstructing (integer_dup_items boolean_empty) (integer_mod exec_s (exec_yank exec_pop (integer_pop boolean_dup_items integer_empty integer_gt boolean_dup_items integer_inc) integer_max boolean_rot exec_eq integer_swap) (integer_div) (boolean_pop integer_sub exec_y_when_autoconstructing (integer_rot) exec_y_when_autoconstructing (integer_dup_items exec_rot (integer_pop exec_y (exec_yankdup) integer_flush boolean_xor boolean_dup_times boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)) () ()))) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 127
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 120 597 121 64 20 21 276 68 106)
Population mean number of elite cases: 1.50
Count of perfect (error zero) individuals by case: (105 120 597 121 64 20 21 276 68 106)
Population mean number of perfect (error zero) cases: 1.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_659} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () exec_eq boolean_empty exec_pop () exec_do*while () integer_div print_integer integer_pop integer_sub exec_s () (boolean_not in2 exec_if (boolean_empty) (exec_while (integer_dup_items exec_yank) integer_sub exec_shove (integer_lte integer_mult integer_flush boolean_invert_first_then_and integer_mod)) boolean_not integer_dec) (boolean_invert_first_then_and integer_mod boolean_shove) in3 in2 exec_do*times (print_integer exec_s (integer_max integer_yankdup exec_do*while (in1 exec_do*range () in4 integer_mod boolean_empty integer_gte boolean_and) integer_fromboolean integer_inc exec_eq) (boolean_dup_times integer_mult) (integer_eq integer_gt boolean_pop integer_dec integer_fromboolean) integer_dup_times integer_dup_items exec_y () boolean_pop exec_s_when_autoconstructing (exec_s (integer_min) (exec_pop (integer_pop integer_empty boolean_dup_items boolean_yank integer_flush integer_dup_items)) (integer_inc) print_integer integer_max boolean_rot integer_swap) (integer_div) (integer_sub exec_do*times (boolean_invert_first_then_and boolean_dup_times exec_swap (integer_rot) (exec_y_when_autoconstructing (integer_pop tag_integer_659 exec_y (exec_flush exec_swap (integer_gte integer_flush boolean_xor integer_dup_items exec_swap (boolean_and boolean_dup_items boolean_and boolean_dup_items) ()) ())))))))
Errors: [0 1 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 95
Size: 129
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 8.502
Median total errors in population: 9
Error averages by case: (0.895 0.88 0.403 0.879 0.936 0.98 0.979 0.724 0.932 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.928
Average program size in population (points): 127.588
Average percent parens in population: 0.271
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5509832
--- Timings ---
Current time: 1559593996129 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.6 seconds, 39.8%
Fitness Testing:      7.4 seconds, 38.8%
Report:               4.0 seconds, 21.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 45                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 94                 
Correct output: 5                   | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 71                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 99                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 45                 
Correct output: 32                  | Program output: 52                 
Correct output: 7                   | Program output: 27                 
Correct output: 0                   | Program output: 71                 
Correct output: 21                  | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -71                
Correct output: -83                 | Program output: -1                 
Correct output: -43                 | Program output: 56                 
Correct output: -72                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -49                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: 39                 
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -78                
Correct output: -32                 | Program output: 8                  
Correct output: -29                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -12                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 34                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: 77                 
Correct output: -100                | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -37                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -83                
Correct output: -99                 | Program output: -64                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: 19                 
Correct output: -47                 | Program output: -47                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 80                 
Correct output: -51                 | Program output: -26                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -82} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_pop () boolean_empty exec_s () (boolean_not integer_rot boolean_xor boolean_empty) (exec_yank) exec_do*times () exec_if () (boolean_rot exec_dup (boolean_shove integer_lte integer_flush exec_stackdepth integer_mod)) integer_dec integer_mod integer_div integer_dup_times boolean_shove in3 in2 boolean_dup_items in1 boolean_rot exec_do*times (print_integer in2 integer_max exec_noop exec_when (boolean_and in1 exec_do*range () integer_fromboolean boolean_invert_first_then_and integer_yankdup) boolean_frominteger exec_flush integer_lte exec_eq) boolean_flush integer_mult integer_dup_times exec_yank boolean_invert_second_then_and integer_mod integer_min exec_pop (boolean_invert_first_then_and exec_dup_times (integer_pop integer_empty exec_noop) boolean_eq in4 exec_k_when_autoconstructing (boolean_or) (exec_eq exec_if () (exec_s (exec_swap () (integer_dec) boolean_or) (boolean_dup_times integer_max exec_eq integer_swap) (boolean_dup) integer_div) exec_rot (boolean_rot in3 exec_do*count (integer_mod exec_y_when_autoconstructing (integer_dup_times boolean_shove exec_y_when_autoconstructing (-82 boolean_invert_second_then_and exec_stackdepth) integer_flush boolean_xor print_boolean) 63 exec_y_when_autoconstructing (boolean_dup_items integer_dup_times))) () ())))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 121
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -82} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_pop () boolean_empty exec_s () (boolean_not integer_rot boolean_xor boolean_empty) (exec_yank) exec_do*times () exec_if () (boolean_rot exec_dup (boolean_shove integer_lte integer_flush exec_stackdepth integer_mod)) integer_dec integer_mod integer_div integer_dup_times boolean_shove in3 in2 boolean_dup_items in1 boolean_rot exec_do*times (print_integer in2 integer_max exec_noop exec_when (boolean_and in1 exec_do*range () integer_fromboolean boolean_invert_first_then_and integer_yankdup) boolean_frominteger exec_flush integer_lte exec_eq) boolean_flush integer_mult integer_dup_times exec_yank boolean_invert_second_then_and integer_mod integer_min exec_pop (boolean_invert_first_then_and exec_dup_times (integer_pop integer_empty exec_noop) boolean_eq in4 exec_k_when_autoconstructing (boolean_or) (exec_eq exec_if () (exec_s (exec_swap () (integer_dec) boolean_or) (boolean_dup_times integer_max exec_eq integer_swap) (boolean_dup) integer_div) exec_rot (boolean_rot in3 exec_do*count (integer_mod exec_y_when_autoconstructing (integer_dup_times boolean_shove exec_y_when_autoconstructing (-82 boolean_invert_second_then_and exec_stackdepth) integer_flush boolean_xor print_boolean) 63 exec_y_when_autoconstructing (boolean_dup_items integer_dup_times))) () ())))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 121
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 205 214 206 544 181 189 215 101 211)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (216 205 214 206 544 181 189 215 101 211)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 2, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () boolean_empty integer_mult exec_pop () integer_lt boolean_shove exec_s () (boolean_not boolean_empty) (exec_do*times () exec_if () (boolean_rot exec_dup (integer_sub integer_flush print_integer in3 integer_mod)) integer_dec) integer_mod boolean_shove in3 in2 boolean_dup_items integer_div in1 exec_do*times (print_integer in2 integer_max exec_noop exec_when (boolean_and integer_yankdup in1 exec_do*range () integer_flush integer_mod integer_fromboolean integer_shove boolean_invert_first_then_and integer_yankdup) boolean_frominteger exec_flush integer_lte boolean_stackdepth exec_eq) integer_mult exec_yank boolean_invert_second_then_and boolean_yankdup integer_inc boolean_empty integer_mod exec_pop (exec_dup_times (integer_pop exec_noop) exec_swap (boolean_eq boolean_or) (exec_if () (exec_s (exec_swap () (boolean_dup_items boolean_or) integer_max exec_eq integer_swap) (boolean_dup) (boolean_yankdup boolean_pop exec_rot (exec_do*count (boolean_invert_first_then_and exec_y_when_autoconstructing (integer_dup_times boolean_shove exec_y_when_autoconstructing (integer_dup_items exec_stackdepth) integer_flush integer_rot boolean_xor print_boolean) exec_swap (integer_add) (boolean_and 63 exec_y_when_autoconstructing (boolean_dup_items)))) () ())))))
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 91
Size: 124
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 7.718
Median total errors in population: 9
Error averages by case: (0.784 0.795 0.786 0.794 0.456 0.819 0.811 0.785 0.899 0.789)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.108
Average program size in population (points): 130.644
Average percent parens in population: 0.279
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6435848
--- Timings ---
Current time: 1559593998734 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.7 seconds, 40.0%
Fitness Testing:      8.3 seconds, 37.9%
Report:               4.7 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 93                 
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 56                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 37                 
Correct output: 3                   | Program output: 78                 
Correct output: 19                  | Program output: 97                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 95                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -84                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -71                
Correct output: -83                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -49                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 82                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -12                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -37                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -83                
Correct output: -99                 | Program output: -64                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -47                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 87                 
Correct output: -51                 | Program output: -26                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () boolean_and exec_pop (exec_eq) boolean_shove integer_flush integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_empty) (exec_yank) integer_dec) (exec_do*times () boolean_rot exec_shove (boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_dec) integer_mod in3 exec_do*times (in2 integer_swap in1 exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth exec_do*range () in4 integer_mod boolean_frominteger integer_inc exec_eq) exec_y () boolean_eq integer_mult) exec_dup_items integer_gt exec_while (integer_fromboolean) exec_y () boolean_pop tag_integer_299 boolean_swap) exec_s_when_autoconstructing (boolean_empty) (exec_s (integer_dec exec_flush exec_when (integer_min) exec_pop (integer_empty integer_inc) tag_integer_464 integer_max boolean_rot exec_eq integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ()) ()) ())))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 130
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () boolean_and exec_pop (exec_eq) boolean_shove integer_flush integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_empty) (exec_yank) integer_dec) (exec_do*times () boolean_rot exec_shove (boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_dec) integer_mod in3 exec_do*times (in2 integer_swap in1 exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth exec_do*range () in4 integer_mod boolean_frominteger integer_inc exec_eq) exec_y () boolean_eq integer_mult) exec_dup_items integer_gt exec_while (integer_fromboolean) exec_y () boolean_pop tag_integer_299 boolean_swap) exec_s_when_autoconstructing (boolean_empty) (exec_s (integer_dec exec_flush exec_when (integer_min) exec_pop (integer_empty integer_inc) tag_integer_464 integer_max boolean_rot exec_eq integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ()) ()) ())))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 130
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 548 367 30 3 167 261 379 333 376)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (323 548 367 30 3 167 261 379 333 376)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () boolean_and exec_pop (exec_eq) boolean_shove integer_flush integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_empty) (exec_yank) integer_dec) (exec_do*times () boolean_rot exec_shove (boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_dec) integer_mod in3 exec_do*times (in2 integer_swap in1 exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth exec_do*range () in4 integer_mod boolean_frominteger integer_inc exec_eq) exec_y () boolean_eq integer_mult) exec_dup_items integer_gt exec_while (integer_fromboolean) exec_y () boolean_pop tag_integer_299 boolean_swap) exec_s_when_autoconstructing (boolean_empty) (exec_s (integer_dec exec_flush exec_when (integer_min) exec_pop (integer_empty integer_inc) tag_integer_464 integer_max boolean_rot exec_eq integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ()) ()) ())))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 94
Size: 130
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 7.213
Median total errors in population: 7
Error averages by case: (0.677 0.452 0.633 0.97 0.997 0.833 0.739 0.621 0.667 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.101
Average program size in population (points): 130.859
Average percent parens in population: 0.280
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7431053
--- Timings ---
Current time: 1559594001558 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.9 seconds, 40.3%
Fitness Testing:      9.2 seconds, 37.7%
Report:               5.3 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 570
Test mean error for best: 0.57000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 26                 
Correct output: 10                  | Program output: 24                 
Correct output: 12                  | Program output: 49                 
Correct output: 22                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 24                 
Correct output: 0                   | Program output: 97                 
Correct output: 21                  | Program output: 30                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 48                 
Correct output: 1                   | Program output: 96                 
Correct output: 44                  | Program output: 90                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 81                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -77                
Correct output: -43                 | Program output: 78                 
Correct output: -72                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -49                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: 84                 
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: 88                 
Correct output: -29                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -12                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -37                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: 80                 
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 40                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_pop () exec_eq boolean_empty exec_pop () exec_do*while () integer_sub exec_do*range () boolean_not exec_yankdup integer_rot exec_if (integer_gte integer_gte) (boolean_stackdepth exec_while (exec_yank) exec_do*times () integer_sub exec_shove (in1 integer_mult exec_if (integer_flush integer_mod) () boolean_eq in1 integer_mod boolean_shove) exec_y_when_autoconstructing (boolean_xor in3 exec_do*times (print_integer integer_sub integer_max exec_dup_times (exec_do*while (integer_lt integer_mod integer_fromboolean exec_yankdup integer_yankdup) boolean_frominteger boolean_dup_items integer_inc integer_inc) integer_mult) exec_stackdepth integer_fromboolean) integer_dup_times exec_y () exec_s_when_autoconstructing (integer_dup integer_dup integer_mod integer_dup_items integer_min) (exec_pop (integer_pop exec_noop boolean_dup_items integer_dup_items)) (boolean_yank integer_inc) boolean_frominteger) exec_eq integer_empty boolean_yank boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot integer_rot) (print_newline exec_y_when_autoconstructing (integer_dup_items exec_y (boolean_xor boolean_and 63 integer_swap integer_min exec_flush boolean_dup_items)))))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 110
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_pop () exec_eq boolean_empty exec_pop () exec_do*while () integer_sub exec_do*range () boolean_not exec_yankdup integer_rot exec_if (integer_gte integer_gte) (boolean_stackdepth exec_while (exec_yank) exec_do*times () integer_sub exec_shove (in1 integer_mult exec_if (integer_flush integer_mod) () boolean_eq in1 integer_mod boolean_shove) exec_y_when_autoconstructing (boolean_xor in3 exec_do*times (print_integer integer_sub integer_max exec_dup_times (exec_do*while (integer_lt integer_mod integer_fromboolean exec_yankdup integer_yankdup) boolean_frominteger boolean_dup_items integer_inc integer_inc) integer_mult) exec_stackdepth integer_fromboolean) integer_dup_times exec_y () exec_s_when_autoconstructing (integer_dup integer_dup integer_mod integer_dup_items integer_min) (exec_pop (integer_pop exec_noop boolean_dup_items integer_dup_items)) (boolean_yank integer_inc) boolean_frominteger) exec_eq integer_empty boolean_yank boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot integer_rot) (print_newline exec_y_when_autoconstructing (integer_dup_items exec_y (boolean_xor boolean_and 63 integer_swap integer_min exec_flush boolean_dup_items)))))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 110
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 441 39 37 60 314 424 8 281 92)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (328 441 39 37 60 314 424 8 281 92)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items})
Best program: (exec_pop () exec_swap (boolean_empty exec_pop () integer_sub exec_do*range () boolean_not exec_yankdup) (integer_rot exec_if (integer_gte integer_gte) (exec_while (exec_yank) exec_do*times () integer_sub exec_shove (in1 exec_while (integer_mult exec_if (integer_flush integer_mod) () in1 integer_mod boolean_shove) boolean_invert_second_then_and exec_y_when_autoconstructing (in3 exec_do*times (print_integer integer_sub boolean_eq integer_max exec_when (exec_dup_times (exec_do*while (exec_empty) integer_lt integer_mod boolean_invert_second_then_and integer_fromboolean exec_yankdup integer_yankdup) boolean_frominteger integer_lte) integer_inc integer_inc) exec_eq) integer_mult) exec_stackdepth exec_empty integer_fromboolean) integer_dup_times exec_y () exec_s_when_autoconstructing (exec_shove () integer_dup integer_dup_items integer_min) (exec_pop (integer_pop boolean_dup_items integer_dup_items)) (boolean_yank integer_max integer_inc) boolean_frominteger) integer_max exec_eq integer_empty boolean_pop integer_shove boolean_yank boolean_invert_first_then_and exec_y_when_autoconstructing (exec_swap (integer_rot integer_rot) (exec_y_when_autoconstructing (integer_dup_items exec_y (boolean_xor boolean_and 63 exec_y_when_autoconstructing (integer_swap integer_min exec_flush boolean_dup_items))))))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 90
Size: 121
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.976
Median total errors in population: 8
Error averages by case: (0.672 0.559 0.961 0.963 0.94 0.686 0.576 0.992 0.719 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.606
Average program size in population (points): 126.817
Average percent parens in population: 0.277
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8440886
--- Timings ---
Current time: 1559594004384 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.0 seconds, 40.4%
Fitness Testing:     10.2 seconds, 37.3%
Report:               6.0 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 93                 
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 56                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 37                 
Correct output: 3                   | Program output: 78                 
Correct output: 19                  | Program output: 97                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 95                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 75                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -77                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: 81                 
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 48                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 76                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 57                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 82                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: 72                 
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 18                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 59                 
Correct output: 21                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 100                
Correct output: -84                 | Program output: 25                 
Correct output: -66                 | Program output: 94                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () integer_mod integer_lte exec_pop (exec_eq) boolean_shove integer_flush integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () exec_rot (boolean_rot exec_shove (boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_dec) integer_mod in3 in2 integer_swap exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth boolean_invert_second_then_and in1 integer_stackdepth boolean_eq exec_do*range () in4 boolean_dup_times integer_mod boolean_frominteger integer_pop integer_inc exec_y () boolean_eq integer_mult) exec_if (exec_dup_items integer_gt integer_fromboolean) (boolean_pop tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (integer_dec exec_flush integer_min) (exec_pop (integer_empty integer_inc) integer_max boolean_rot integer_sub exec_eq integer_gte integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ())) ())))) () ()) ())
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 131
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () integer_mod integer_lte exec_pop (exec_eq) boolean_shove integer_flush integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () exec_rot (boolean_rot exec_shove (boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_dec) integer_mod in3 in2 integer_swap exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth boolean_invert_second_then_and in1 integer_stackdepth boolean_eq exec_do*range () in4 boolean_dup_times integer_mod boolean_frominteger integer_pop integer_inc exec_y () boolean_eq integer_mult) exec_if (exec_dup_items integer_gt integer_fromboolean) (boolean_pop tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (integer_dec exec_flush integer_min) (exec_pop (integer_empty integer_inc) integer_max boolean_rot integer_sub exec_eq integer_gte integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items integer_pop exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ())) ())))) () ()) ())
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 131
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 415 429 191 406 285 33 257 34 331)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (16 415 429 191 406 285 33 257 34 331)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () boolean_and exec_pop (boolean_rot boolean_shove integer_pop boolean_yank integer_yankdup integer_max) integer_mod integer_rot boolean_dup_times exec_k_when_autoconstructing (exec_if (boolean_empty) (exec_yank) integer_dec) (exec_do*times () boolean_rot exec_shove (integer_lte integer_mult exec_k_when_autoconstructing (exec_do*range (exec_if (integer_flush integer_mult exec_dup_times (integer_dec) integer_mod in3 in2 integer_swap boolean_and exec_do*times (print_integer integer_dup_items boolean_yank exec_when (in3) boolean_pop integer_yankdup exec_do*while (integer_gte boolean_stackdepth in1 integer_stackdepth in4 integer_mod boolean_frominteger integer_inc exec_y () boolean_eq integer_mult) exec_pop ()) exec_dup_items integer_gt exec_while (integer_fromboolean) boolean_pop tag_integer_299 boolean_swap) (exec_dup_items exec_s_when_autoconstructing (boolean_empty) (exec_flush exec_when (integer_min) exec_pop (integer_empty integer_inc) tag_integer_464 integer_max boolean_rot exec_eq integer_div) (boolean_pop boolean_invert_first_then_and integer_sub in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and boolean_and integer_empty 63 print_exec (integer_mult) exec_y_when_autoconstructing ()))) ())))) ())))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 95
Size: 128
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.603
Median total errors in population: 8
Error averages by case: (0.984 0.585 0.571 0.809 0.594 0.715 0.967 0.743 0.966 0.669)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.991
Average program size in population (points): 123.179
Average percent parens in population: 0.268
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9521535
--- Timings ---
Current time: 1559594007199 milliseconds
Total Time:          30.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.2 seconds, 40.3%
Fitness Testing:     11.2 seconds, 37.0%
Report:               6.8 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 45                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 94                 
Correct output: 5                   | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 71                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 99                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 45                 
Correct output: 32                  | Program output: 52                 
Correct output: 7                   | Program output: 27                 
Correct output: 0                   | Program output: 71                 
Correct output: 21                  | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 20                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 37                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 92                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 17                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -77                
Correct output: -43                 | Program output: 56                 
Correct output: -72                 | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: 76                 
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 74                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: 55                 
Correct output: -30                 | Program output: 91                 
Correct output: -67                 | Program output: 39                 
Correct output: -72                 | Program output: 43                 
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: 8                  
Correct output: -29                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: 4                  
Correct output: -94                 | Program output: 97                 
Correct output: -26                 | Program output: 77                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 34                 
Correct output: -77                 | Program output: 4                  
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: 31                 
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -82                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 24                 
Correct output: -58                 | Program output: 22                 
Correct output: -65                 | Program output: 74                 
Correct output: -78                 | Program output: 19                 
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 97                 
Correct output: 21                  | Program output: 80                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 71                 
Correct output: -84                 | Program output: 57                 
Correct output: -66                 | Program output: 16                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () integer_mod integer_lte exec_pop (exec_eq) boolean_shove integer_flush integer_pop integer_yankdup exec_s () (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () exec_rot (boolean_rot exec_shove (integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_mod exec_if (in3 in2 integer_swap print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth boolean_eq exec_do*range () in4 boolean_dup_times integer_mod boolean_frominteger integer_pop integer_inc exec_y () boolean_eq integer_mult) exec_if (exec_dup_items integer_gt integer_fromboolean) (boolean_pop tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (integer_dec exec_flush integer_min) (exec_pop (integer_empty integer_inc) boolean_rot integer_sub exec_eq integer_gte integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items exec_do*range (exec_y () exec_do*times () integer_flush integer_shove boolean_xor boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ())) ()))) ()))) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 127
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction 63} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () integer_mod integer_lte exec_pop (exec_eq) boolean_shove integer_flush integer_pop integer_yankdup exec_s () (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () exec_rot (boolean_rot exec_shove (integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_mod exec_if (in3 in2 integer_swap print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth boolean_eq exec_do*range () in4 boolean_dup_times integer_mod boolean_frominteger integer_pop integer_inc exec_y () boolean_eq integer_mult) exec_if (exec_dup_items integer_gt integer_fromboolean) (boolean_pop tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (integer_dec exec_flush integer_min) (exec_pop (integer_empty integer_inc) boolean_rot integer_sub exec_eq integer_gte integer_div) (boolean_pop boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (integer_dup_items exec_do*range (exec_y () exec_do*times () integer_flush integer_shove boolean_xor boolean_and integer_empty 63 print_exec (exec_y_when_autoconstructing ())))) ())) ()))) ()))) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 127
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (47 370 584 564 416 46 205 314 149 442)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (47 370 584 564 416 46 205 314 149 442)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction 37} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () integer_mod integer_lte exec_pop (exec_eq) boolean_shove integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () print_boolean) (in3 exec_shove (boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush integer_mod) () integer_mult integer_dec) integer_mod in3 in2 integer_yankdup print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_invert_second_then_and in1 integer_stackdepth boolean_eq exec_do*range () in4 boolean_dup_times integer_mod boolean_frominteger integer_pop integer_inc exec_y () boolean_eq integer_mult) exec_if (integer_gt integer_fromboolean) (boolean_pop 37 tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (integer_dec exec_flush integer_min) (exec_pop (integer_empty integer_inc) integer_max boolean_rot integer_sub exec_eq integer_gte integer_div) (boolean_pop exec_dup_times () boolean_invert_first_then_and in4 exec_swap (integer_dup_items in1 integer_pop exec_do*range (exec_y () integer_flush integer_shove boolean_xor boolean_and print_exec (exec_y_when_autoconstructing ()))) ())) ()))))
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 90
Size: 123
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.863
Median total errors in population: 8
Error averages by case: (0.953 0.63 0.416 0.436 0.584 0.954 0.795 0.686 0.851 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.563
Average program size in population (points): 122.909
Average percent parens in population: 0.271
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10508330
--- Timings ---
Current time: 1559594009934 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.3 seconds, 40.4%
Fitness Testing:     12.1 seconds, 36.8%
Report:               7.4 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 26                 
Correct output: 10                  | Program output: 24                 
Correct output: 12                  | Program output: 49                 
Correct output: 22                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 24                 
Correct output: 0                   | Program output: 97                 
Correct output: 21                  | Program output: 30                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 48                 
Correct output: 1                   | Program output: 96                 
Correct output: 44                  | Program output: 90                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 81                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -57                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -2                 
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -14                
Correct output: -55                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -93                
Correct output: -94                 | Program output: -46                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -54                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 40                 
Correct output: -51                 | Program output: -4                 
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction 68} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_464} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () boolean_and exec_pop (exec_eq) integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_dup_times boolean_empty) (integer_min exec_yank) boolean_or) (integer_dec) exec_do*times () boolean_rot exec_shove (integer_lt boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush 68) () integer_mult integer_mod in1 in3 exec_do*times (in2 exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth exec_k (in1 integer_rot integer_stackdepth exec_do*range () in4 integer_lt integer_mod boolean_frominteger integer_inc exec_eq) (integer_rot boolean_eq exec_while (integer_fromboolean) exec_y () tag_integer_299 boolean_swap) boolean_empty) exec_s (exec_flush integer_dec exec_flush exec_when (exec_pop (integer_empty exec_swap (in4 integer_inc) (tag_integer_464 boolean_rot exec_eq exec_do*range (boolean_pop boolean_invert_first_then_and exec_swap (boolean_pop in2 integer_dup_items integer_pop exec_do*range (exec_y () integer_shove boolean_xor exec_do*range () exec_do*range (exec_pop (boolean_and integer_yank boolean_and boolean_dup_items print_exec (exec_y_when_autoconstructing ()))))) ()))))) () ())))))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 134
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction 68} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_integer_464} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () boolean_and exec_pop (exec_eq) integer_pop boolean_yank integer_yankdup integer_max exec_s () (integer_rot exec_if (boolean_dup_times boolean_empty) (integer_min exec_yank) boolean_or) (integer_dec) exec_do*times () boolean_rot exec_shove (integer_lt boolean_swap) integer_lte integer_mult exec_do*range (exec_if (integer_flush 68) () integer_mult integer_mod in1 in3 exec_do*times (in2 exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth exec_k (in1 integer_rot integer_stackdepth exec_do*range () in4 integer_lt integer_mod boolean_frominteger integer_inc exec_eq) (integer_rot boolean_eq exec_while (integer_fromboolean) exec_y () tag_integer_299 boolean_swap) boolean_empty) exec_s (exec_flush integer_dec exec_flush exec_when (exec_pop (integer_empty exec_swap (in4 integer_inc) (tag_integer_464 boolean_rot exec_eq exec_do*range (boolean_pop boolean_invert_first_then_and exec_swap (boolean_pop in2 integer_dup_items integer_pop exec_do*range (exec_y () integer_shove boolean_xor exec_do*range () exec_do*range (exec_pop (boolean_and integer_yank boolean_and boolean_dup_items print_exec (exec_y_when_autoconstructing ()))))) ()))))) () ())))))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 134
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 137 137 73 277 116 602 164 138 84)
Population mean number of elite cases: 1.81
Count of perfect (error zero) individuals by case: (83 137 137 73 277 116 602 164 138 84)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () boolean_and exec_pop (integer_flush integer_pop boolean_dup_times) boolean_yank integer_yankdup exec_s () (integer_rot exec_if (boolean_dup_times boolean_empty) (exec_yank) boolean_or) (integer_dec) exec_do*times () boolean_rot exec_shove (exec_do*count () boolean_swap) integer_lte integer_mult exec_if (integer_flush 68) () integer_mod integer_mult integer_mod in1 exec_noop in3 exec_do*times (in2 exec_do*times (print_integer integer_dup_items exec_when (boolean_pop integer_yankdup exec_do*while (boolean_stackdepth in1 integer_div integer_stackdepth exec_do*range () in4 integer_mod boolean_frominteger exec_eq) integer_rot boolean_eq exec_while (integer_fromboolean) exec_y () boolean_pop tag_integer_299 boolean_swap) boolean_empty) exec_s (integer_mult integer_dec exec_flush exec_when (integer_min) exec_pop (integer_empty integer_max boolean_rot exec_eq boolean_flush) integer_gt integer_div) (boolean_invert_second_then_and) () boolean_pop integer_empty) boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (in2 exec_flush integer_dup_items integer_pop exec_do*range (integer_eq integer_flush integer_shove exec_swap (boolean_xor integer_yank boolean_and print_exec (exec_y_when_autoconstructing ())) ()))) ())
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 94
Size: 127
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 8.189
Median total errors in population: 8
Error averages by case: (0.917 0.863 0.863 0.927 0.723 0.884 0.398 0.836 0.862 0.916)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.283
Average program size in population (points): 121.257
Average percent parens in population: 0.280
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11413652
--- Timings ---
Current time: 1559594012628 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 40.5%
Fitness Testing:     13.0 seconds, 36.5%
Report:               8.1 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 599
Test mean error for best: 0.59900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -7-7               
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20-20             
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 93                 
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 56                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 3737               
Correct output: 3                   | Program output: 78                 
Correct output: 19                  | Program output: 97                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 95                 
Correct output: -7                  | Program output: -7-7               
Correct output: -82                 | Program output: -82-82             
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: 75                 
Correct output: -90                 | Program output: -90-90             
Correct output: -83                 | Program output: -77-77             
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77-77             
Correct output: -20                 | Program output: 81                 
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34-34             
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25-25             
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: 48                 
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 76                 
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: 57                 
Correct output: -72                 | Program output: -72-72             
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 82                 
Correct output: -72                 | Program output: -72-72             
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: 72                 
Correct output: -8                  | Program output: -8-8               
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6-6               
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93-93             
Correct output: -86                 | Program output: -82                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -5                 
Correct output: -58                 | Program output: 18                 
Correct output: -65                 | Program output: -9                 
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: 59                 
Correct output: 21                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: 100                
Correct output: -84                 | Program output: 25                 
Correct output: -66                 | Program output: 94                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () integer_mod print_boolean boolean_dup integer_lte exec_pop (exec_eq) boolean_shove integer_flush boolean_stackdepth boolean_yank integer_yankdup integer_dup integer_max exec_s () (integer_gte integer_dup) (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () exec_rot (boolean_rot boolean_dup_items boolean_swap) (integer_lte integer_mult exec_do*range (exec_dup_items integer_flush integer_mod)) (integer_mult integer_dec) integer_min integer_mod in3 in2 in3 exec_do*times (print_integer integer_dup_items exec_when (integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth in4 boolean_eq exec_do*range () boolean_dup_times exec_noop integer_mod integer_pop integer_rot integer_inc integer_mult) exec_if (exec_dup_items integer_gt in1) (tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (exec_shove (integer_dec integer_min) integer_empty integer_inc) (integer_max integer_sub exec_while (boolean_stackdepth boolean_invert_first_then_and exec_swap (exec_s (integer_dup_items integer_pop exec_y () integer_flush integer_flush boolean_xor boolean_and integer_empty print_exec (63 exec_y_when_autoconstructing ())) () ()) ())) ()) ())))))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 125
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction tag_integer_299} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () integer_mod print_boolean boolean_dup integer_lte exec_pop (exec_eq) boolean_shove integer_flush boolean_stackdepth boolean_yank integer_yankdup integer_dup integer_max exec_s () (integer_gte integer_dup) (integer_rot exec_if (boolean_empty) (integer_dec) exec_do*times () exec_rot (boolean_rot boolean_dup_items boolean_swap) (integer_lte integer_mult exec_do*range (exec_dup_items integer_flush integer_mod)) (integer_mult integer_dec) integer_min integer_mod in3 in2 in3 exec_do*times (print_integer integer_dup_items exec_when (integer_yankdup exec_do*while (boolean_stackdepth in1 integer_stackdepth in4 boolean_eq exec_do*range () boolean_dup_times exec_noop integer_mod integer_pop integer_rot integer_inc integer_mult) exec_if (exec_dup_items integer_gt in1) (tag_integer_299 exec_s_when_autoconstructing (exec_yank boolean_empty) (exec_s (exec_shove (integer_dec integer_min) integer_empty integer_inc) (integer_max integer_sub exec_while (boolean_stackdepth boolean_invert_first_then_and exec_swap (exec_s (integer_dup_items integer_pop exec_y () integer_flush integer_flush boolean_xor boolean_and integer_empty print_exec (63 exec_y_when_autoconstructing ())) () ()) ())) ()) ())))))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 125
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 137 30 115 330 70 114 31 103 404)
Population mean number of elite cases: 1.70
Count of perfect (error zero) individuals by case: (361 137 30 115 330 70 114 31 103 404)
Population mean number of perfect (error zero) cases: 1.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction 26} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction 63} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () boolean_and exec_pop (boolean_shove exec_dup_times ()) integer_flush boolean_yank integer_yankdup integer_yank integer_max exec_k_when_autoconstructing (exec_s () (integer_shove) (exec_if (exec_yank) (exec_do*times () boolean_rot exec_do*range (exec_if (integer_flush integer_mod) () boolean_xor integer_mult integer_min) exec_s_when_autoconstructing (integer_dup_times) (in4 in3 in2 integer_swap exec_do*times (print_integer integer_dup_items exec_when (exec_do*while (boolean_stackdepth exec_do*range () integer_add in4 integer_shove) boolean_frominteger integer_inc exec_eq) exec_do*range (exec_swap () (boolean_eq exec_dup_items exec_while (exec_y () tag_integer_299 boolean_swap) exec_s_when_autoconstructing (integer_yankdup integer_dec exec_s_when_autoconstructing (exec_when (exec_pop (tag_integer_464 integer_max boolean_rot integer_div) in4 26 exec_swap (integer_dup_items integer_stackdepth integer_pop exec_y () integer_shove boolean_xor in2 boolean_and boolean_and 63 exec_y_when_autoconstructing ()) ())) () ()) () ())))) ()))) ())
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 75
Size: 114
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 8.305
Median total errors in population: 8
Error averages by case: (0.639 0.863 0.97 0.885 0.67 0.93 0.886 0.969 0.897 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.31
Average program size in population (points): 126.368
Average percent parens in population: 0.277
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12401172
--- Timings ---
Current time: 1559594015434 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 40.6%
Fitness Testing:     14.0 seconds, 36.4%
Report:               8.8 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 617
Test mean error for best: 0.61700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 2020202020202020202020202020
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 2020202020202020202020202020
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 2020202020202020202020202020
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 2020202020202020202020202020
Correct output: 5                   | Program output: 2020202020202020202020202020
Correct output: 10                  | Program output: 2020202020202020202020202020
Correct output: 12                  | Program output: 2020202020202020202020202020
Correct output: 22                  | Program output: 2020202020202020202020202020
Correct output: 8                   | Program output: 20202020202020     
Correct output: 17                  | Program output: 2020202020202020202020202020
Correct output: 4                   | Program output: 2020202020202020202020202020
Correct output: 4                   | Program output: 202020             
Correct output: 32                  | Program output: 2020202020202020202020202020
Correct output: 7                   | Program output: 2020202020202020202020202020
Correct output: 0                   | Program output: 2020202020202020202020202020
Correct output: 21                  | Program output: 2020202020202020202020202020
Correct output: 1                   | Program output: 191919191919191919 
Correct output: 3                   | Program output: 2020202020202020202020202020
Correct output: 19                  | Program output: 2020202020202020202020202020
Correct output: 7                   | Program output: 2020202020202020202020202020
Correct output: 1                   | Program output: 2020202020202020202020202020
Correct output: 44                  | Program output: 2020202020202020202020202020
Correct output: 24                  | Program output: 2020202020202020202020202020
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 2020202020202020202020202020
Correct output: -84                 | Program output: -84                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -77                
Correct output: -43                 | Program output: 2020202020202020202020202020
Correct output: -72                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -34                
Correct output: -77                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -49                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: 2020202020202020202020202020
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: 2020202020202020202020202020
Correct output: -29                 | Program output: 2020202020202020202020202020
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -12                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 2020202020202020202020202020
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: 2020202020202020202020202020
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -37                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: 2020202020202020202020202020
Correct output: -47                 | Program output: -47                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 2020202020202020202020202020
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () boolean_and exec_pop (exec_eq) boolean_invert_first_then_and exec_stackdepth integer_pop exec_when (integer_div boolean_yank integer_yankdup boolean_stackdepth integer_fromboolean) exec_s () (integer_rot exec_if (boolean_dup_times boolean_empty) (boolean_empty boolean_not exec_yank) integer_dec) (exec_do*times () boolean_rot exec_shove (boolean_swap) integer_lte boolean_frominteger exec_do*range (exec_if (integer_flush integer_div integer_mod) () integer_mult in1 in3 integer_stackdepth exec_do*times (integer_swap exec_do*times (print_integer boolean_not integer_dup_items exec_yank integer_yankdup integer_empty exec_do*while (in4 boolean_stackdepth integer_rot integer_inc) boolean_frominteger exec_do*range () integer_mod boolean_frominteger boolean_and integer_inc exec_while (integer_fromboolean) exec_y () boolean_pop tag_integer_299 boolean_swap) boolean_empty) boolean_xor integer_dec exec_flush integer_max exec_eq) integer_min) exec_pop (integer_empty tag_integer_464 integer_max exec_empty boolean_rot integer_stackdepth exec_eq exec_do*range (integer_div) boolean_pop exec_k (boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (in2 exec_flush in2 integer_dup_items integer_pop exec_y () integer_flush) integer_flush exec_do*while () exec_stackdepth boolean_xor boolean_and print_exec (exec_y_when_autoconstructing ())) ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 131
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_464} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () boolean_and exec_pop (exec_eq) boolean_invert_first_then_and exec_stackdepth integer_pop exec_when (integer_div boolean_yank integer_yankdup boolean_stackdepth integer_fromboolean) exec_s () (integer_rot exec_if (boolean_dup_times boolean_empty) (boolean_empty boolean_not exec_yank) integer_dec) (exec_do*times () boolean_rot exec_shove (boolean_swap) integer_lte boolean_frominteger exec_do*range (exec_if (integer_flush integer_div integer_mod) () integer_mult in1 in3 integer_stackdepth exec_do*times (integer_swap exec_do*times (print_integer boolean_not integer_dup_items exec_yank integer_yankdup integer_empty exec_do*while (in4 boolean_stackdepth integer_rot integer_inc) boolean_frominteger exec_do*range () integer_mod boolean_frominteger boolean_and integer_inc exec_while (integer_fromboolean) exec_y () boolean_pop tag_integer_299 boolean_swap) boolean_empty) boolean_xor integer_dec exec_flush integer_max exec_eq) integer_min) exec_pop (integer_empty tag_integer_464 integer_max exec_empty boolean_rot integer_stackdepth exec_eq exec_do*range (integer_div) boolean_pop exec_k (boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (in2 exec_flush in2 integer_dup_items integer_pop exec_y () integer_flush) integer_flush exec_do*while () exec_stackdepth boolean_xor boolean_and print_exec (exec_y_when_autoconstructing ())) ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 131
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 175 349 130 183 590 130 193 380 174)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (186 175 349 130 183 590 130 193 380 174)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_299} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction 65} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_shove exec_pop (integer_flush integer_pop boolean_dup_times) boolean_xor boolean_yank integer_yankdup exec_s () (integer_rot exec_stackdepth exec_if (boolean_dup_times boolean_empty) (exec_yank) boolean_or) (integer_dec) exec_do*times () exec_shove (exec_do*count () boolean_swap) integer_mult exec_if (68) () integer_mod integer_mult integer_mod in1 exec_noop boolean_shove in3 exec_do*times (integer_min exec_do*times (print_integer integer_dec integer_dup_items exec_stackdepth) boolean_pop integer_min integer_yankdup exec_do*while (boolean_stackdepth integer_shove integer_div integer_stackdepth exec_do*range () exec_stackdepth in4 integer_lte integer_mod boolean_frominteger exec_eq) integer_rot boolean_eq exec_while (boolean_frominteger) integer_fromboolean) boolean_pop tag_integer_299 print_integer boolean_swap boolean_empty exec_s (exec_flush exec_swap (exec_when (integer_min) exec_pop (integer_empty boolean_yank boolean_rot exec_eq boolean_flush) integer_gt integer_yank integer_div) (exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) boolean_invert_first_then_and in4 exec_swap (integer_yankdup exec_y_when_autoconstructing (in2 exec_flush integer_dup_items integer_pop 65 exec_do*range (integer_eq integer_flush integer_shove exec_swap (boolean_and print_exec (exec_y_when_autoconstructing ())) ()))) ()) () ())
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 98
Size: 132
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.51
Median total errors in population: 7
Error averages by case: (0.814 0.825 0.651 0.87 0.817 0.41 0.87 0.807 0.62 0.826)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.677
Average program size in population (points): 121.086
Average percent parens in population: 0.284
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13397177
--- Timings ---
Current time: 1559594018272 milliseconds
Total Time:          41.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        16.7 seconds, 40.5%
Fitness Testing:     14.9 seconds, 36.2%
Report:               9.5 seconds, 23.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 344
Test mean error for best: 0.34400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 24                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 40                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop () boolean_and exec_pop (integer_flush integer_pop boolean_dup_times) boolean_yank integer_yankdup exec_s () (integer_rot exec_stackdepth exec_if (boolean_dup_times boolean_empty) (exec_yank) boolean_or) (boolean_or integer_dec) boolean_rot exec_shove (exec_do*count () boolean_swap) integer_lte integer_mult exec_if (boolean_stackdepth integer_flush integer_mod) () integer_mult in1 exec_noop in3 exec_do*times (in2 integer_min boolean_pop print_integer integer_dup_items boolean_pop integer_yankdup exec_do*while (boolean_stackdepth boolean_xor) integer_shove integer_div integer_stackdepth integer_empty exec_do*range () integer_lte integer_mod boolean_frominteger exec_do*count (integer_rot boolean_eq exec_while (boolean_frominteger) integer_fromboolean) exec_y () boolean_pop in1 boolean_swap) boolean_empty exec_s (integer_mult exec_swap (exec_when (integer_min) exec_pop (boolean_pop integer_empty integer_max boolean_yank boolean_rot exec_eq boolean_flush) integer_gt integer_yank integer_div) (exec_shove (exec_k_when_autoconstructing (integer_empty) (boolean_invert_first_then_and exec_swap (exec_y_when_autoconstructing (in2 exec_flush integer_dup_items integer_pop exec_do*range (boolean_yankdup) integer_eq integer_flush print_exec (integer_shove exec_swap (in4 boolean_and boolean_pop print_exec (exec_y_when_autoconstructing ())) ()))) ())))) () ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 137
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop () boolean_and exec_pop (integer_flush integer_pop boolean_dup_times) boolean_yank integer_yankdup exec_s () (integer_rot exec_stackdepth exec_if (boolean_dup_times boolean_empty) (exec_yank) boolean_or) (boolean_or integer_dec) boolean_rot exec_shove (exec_do*count () boolean_swap) integer_lte integer_mult exec_if (boolean_stackdepth integer_flush integer_mod) () integer_mult in1 exec_noop in3 exec_do*times (in2 integer_min boolean_pop print_integer integer_dup_items boolean_pop integer_yankdup exec_do*while (boolean_stackdepth boolean_xor) integer_shove integer_div integer_stackdepth integer_empty exec_do*range () integer_lte integer_mod boolean_frominteger exec_do*count (integer_rot boolean_eq exec_while (boolean_frominteger) integer_fromboolean) exec_y () boolean_pop in1 boolean_swap) boolean_empty exec_s (integer_mult exec_swap (exec_when (integer_min) exec_pop (boolean_pop integer_empty integer_max boolean_yank boolean_rot exec_eq boolean_flush) integer_gt integer_yank integer_div) (exec_shove (exec_k_when_autoconstructing (integer_empty) (boolean_invert_first_then_and exec_swap (exec_y_when_autoconstructing (in2 exec_flush integer_dup_items integer_pop exec_do*range (boolean_yankdup) integer_eq integer_flush print_exec (integer_shove exec_swap (in4 boolean_and boolean_pop print_exec (exec_y_when_autoconstructing ())) ()))) ())))) () ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 137
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 287 9 113 41 234 557 255 291 294)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (115 287 9 113 41 234 557 255 291 294)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_k} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction -64} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () boolean_and exec_pop (integer_flush integer_pop boolean_dup_times) boolean_yank integer_yankdup exec_s () (exec_s (integer_rot exec_stackdepth boolean_dup_times integer_mult boolean_empty) (exec_yank) (boolean_or) integer_dec) (exec_do*times () exec_shove (exec_k () () exec_do*count () boolean_eq integer_mult exec_when (68)) integer_mod) exec_shove () exec_do*range (integer_mult integer_mod in1 exec_noop boolean_not in3 boolean_rot exec_do*times (in2 integer_min boolean_eq print_integer integer_fromboolean integer_dup_items boolean_pop boolean_stackdepth integer_shove integer_div exec_do*while (integer_stackdepth exec_do*range () in4 exec_dup_items) integer_lte integer_mod integer_swap exec_eq) integer_rot boolean_eq exec_eq boolean_frominteger) integer_fromboolean boolean_pop exec_do*while (tag_integer_299 boolean_swap) boolean_empty -64 exec_s (integer_mult boolean_dup exec_flush exec_swap (exec_when (integer_min) integer_empty boolean_yank exec_eq boolean_flush) (integer_shove integer_gt integer_pop integer_yank integer_div) boolean_invert_second_then_and) () (integer_empty) boolean_invert_first_then_and in4 exec_swap (exec_y_when_autoconstructing (in4 in2 exec_flush integer_dup_items exec_do*range (integer_eq integer_flush boolean_invert_second_then_and exec_swap (boolean_and print_exec (exec_y_when_autoconstructing ())) ()))) ())
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 101
Size: 136
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.804
Median total errors in population: 9
Error averages by case: (0.885 0.713 0.991 0.887 0.959 0.766 0.443 0.745 0.709 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.649
Average program size in population (points): 119.55
Average percent parens in population: 0.274
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 14339586
--- Timings ---
Current time: 1559594020962 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.8 seconds, 40.5%
Fitness Testing:     15.9 seconds, 36.0%
Report:              10.2 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 276
Test mean error for best: 0.27600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 24                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -84                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -47                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 40                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup integer_rot integer_yank exec_if (boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_dec) (exec_do*times () boolean_rot exec_do*count () boolean_swap) integer_lte integer_mult tag_boolean_94 18 exec_if (integer_flush boolean_not 68) () integer_mod)) integer_mult integer_mod exec_swap () (in1 exec_noop in3 exec_do*times (in2 integer_min integer_min print_integer integer_dup_items integer_fromboolean boolean_stackdepth integer_shove integer_stackdepth exec_do*range () in4 integer_lte boolean_yankdup boolean_frominteger boolean_dup_times exec_eq) print_newline integer_rot boolean_eq exec_while (boolean_frominteger) boolean_and) exec_y () tag_integer_299 boolean_swap boolean_empty exec_s (integer_mult exec_flush exec_swap (exec_when (integer_min) exec_pop (integer_empty integer_max boolean_yank exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) (boolean_invert_first_then_and in4 exec_swap (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_flush integer_shove print_exec (integer_swap exec_y_when_autoconstructing ())))) ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 131
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup integer_rot integer_yank exec_if (boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_dec) (exec_do*times () boolean_rot exec_do*count () boolean_swap) integer_lte integer_mult tag_boolean_94 18 exec_if (integer_flush boolean_not 68) () integer_mod)) integer_mult integer_mod exec_swap () (in1 exec_noop in3 exec_do*times (in2 integer_min integer_min print_integer integer_dup_items integer_fromboolean boolean_stackdepth integer_shove integer_stackdepth exec_do*range () in4 integer_lte boolean_yankdup boolean_frominteger boolean_dup_times exec_eq) print_newline integer_rot boolean_eq exec_while (boolean_frominteger) boolean_and) exec_y () tag_integer_299 boolean_swap boolean_empty exec_s (integer_mult exec_flush exec_swap (exec_when (integer_min) exec_pop (integer_empty integer_max boolean_yank exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) (boolean_invert_first_then_and in4 exec_swap (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_flush integer_shove print_exec (integer_swap exec_y_when_autoconstructing ())))) ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 131
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 592 602 225 139 164 241 11 180 357)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (534 592 602 225 139 164 241 11 180 357)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup integer_rot integer_yank exec_if (boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_dec) (exec_do*times () boolean_rot exec_do*count () boolean_swap) integer_lte integer_mult tag_boolean_94 18 exec_if (integer_flush boolean_not 68) () integer_mod)) integer_mult integer_mod exec_swap () (in1 exec_noop in3 exec_do*times (in2 integer_min integer_min print_integer integer_dup_items integer_fromboolean boolean_stackdepth integer_shove integer_stackdepth exec_do*range () in4 integer_lte boolean_yankdup boolean_frominteger boolean_dup_times exec_eq) print_newline integer_rot boolean_eq exec_while (boolean_frominteger) boolean_and) exec_y () tag_integer_299 boolean_swap boolean_empty exec_s (integer_mult exec_flush exec_swap (exec_when (integer_min) exec_pop (integer_empty integer_max boolean_yank exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) (boolean_invert_first_then_and in4 exec_swap (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_flush integer_shove print_exec (integer_swap exec_y_when_autoconstructing ())))) ())) () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 97
Size: 131
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.955
Median total errors in population: 6
Error averages by case: (0.466 0.408 0.398 0.775 0.861 0.836 0.759 0.989 0.82 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.93
Average program size in population (points): 125.946
Average percent parens in population: 0.261
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 15295722
--- Timings ---
Current time: 1559594023723 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.0 seconds, 40.6%
Fitness Testing:     16.8 seconds, 36.0%
Report:              10.9 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 276
Test mean error for best: 0.27600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 24                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 51                 
Correct output: 4                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 56                 
Correct output: -84                 | Program output: -84                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -29                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -18                
Correct output: -78                 | Program output: -59                
Correct output: -47                 | Program output: -47                
Correct output: -66                 | Program output: -21                
Correct output: 21                  | Program output: 40                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -59                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup exec_do*while (integer_rot integer_yank exec_if (boolean_dup_times boolean_flush exec_do*count (integer_dup) boolean_or) (integer_dec) boolean_invert_first_then_and)) exec_do*times () boolean_rot exec_do*count () boolean_swap) integer_lte integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod integer_mult integer_mod exec_swap () (in1 exec_noop in3 exec_do*times (in2 integer_min integer_min print_integer integer_dup_items integer_fromboolean integer_shove integer_stackdepth exec_do*range () in4 integer_lte boolean_yankdup boolean_frominteger boolean_dup_times exec_eq) print_newline integer_rot boolean_eq exec_while (boolean_frominteger) exec_y () tag_integer_299 boolean_swap) boolean_empty exec_s (integer_mult exec_flush exec_swap (boolean_invert_second_then_and) (exec_when (integer_min) boolean_flush exec_pop (integer_empty integer_max boolean_yank exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) boolean_pop exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) boolean_invert_first_then_and in4 exec_swap (exec_while (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_mod integer_flush integer_shove print_exec (integer_swap exec_y_when_autoconstructing ()))))) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 138
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup exec_do*while (integer_rot integer_yank exec_if (boolean_dup_times boolean_flush exec_do*count (integer_dup) boolean_or) (integer_dec) boolean_invert_first_then_and)) exec_do*times () boolean_rot exec_do*count () boolean_swap) integer_lte integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod integer_mult integer_mod exec_swap () (in1 exec_noop in3 exec_do*times (in2 integer_min integer_min print_integer integer_dup_items integer_fromboolean integer_shove integer_stackdepth exec_do*range () in4 integer_lte boolean_yankdup boolean_frominteger boolean_dup_times exec_eq) print_newline integer_rot boolean_eq exec_while (boolean_frominteger) exec_y () tag_integer_299 boolean_swap) boolean_empty exec_s (integer_mult exec_flush exec_swap (boolean_invert_second_then_and) (exec_when (integer_min) boolean_flush exec_pop (integer_empty integer_max boolean_yank exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) boolean_pop exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) boolean_invert_first_then_and in4 exec_swap (exec_while (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_mod integer_flush integer_shove print_exec (integer_swap exec_y_when_autoconstructing ()))))) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 138
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 223 346 353 363 552 195 102 175 192)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (175 223 346 353 363 552 195 102 175 192)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_add integer_yankdup integer_yank boolean_stackdepth) exec_if (boolean_dup_times boolean_eq boolean_flush exec_do*count (boolean_or) integer_dec) (exec_do*times () boolean_rot exec_s_when_autoconstructing () () (boolean_swap) integer_lte integer_mult tag_boolean_94 18 exec_if (integer_flush boolean_not 68) () integer_mod)) integer_mult integer_mod exec_swap () (in1 exec_noop in3 exec_do*times (in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_do*range () in4 boolean_yankdup boolean_dup_times exec_eq) print_newline integer_rot boolean_eq exec_while (boolean_frominteger) boolean_and) exec_y () tag_integer_299 exec_s_when_autoconstructing () (boolean_swap) (boolean_empty) boolean_shove exec_s (integer_mult exec_flush exec_swap (exec_when (exec_pop (integer_empty integer_max boolean_yank exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () integer_empty) integer_empty boolean_invert_first_then_and in4 integer_stackdepth exec_swap (in2 in4 exec_flush exec_y (exec_do*times (exec_do*range (integer_flush integer_shove print_exec (integer_swap exec_y_when_autoconstructing ()))))) ()) ()) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 99
Size: 139
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.324
Median total errors in population: 8
Error averages by case: (0.825 0.777 0.654 0.647 0.637 0.448 0.805 0.898 0.825 0.808)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.746
Average program size in population (points): 125.243
Average percent parens in population: 0.250
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 16125271
--- Timings ---
Current time: 1559594026377 milliseconds
Total Time:          49.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.1 seconds, 40.6%
Fitness Testing:     17.7 seconds, 35.8%
Report:              11.6 seconds, 23.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 138
Test mean error for best: 0.13800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 22                 
Correct output: 4                   | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: -66                
Correct output: 21                  | Program output: 21                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -89                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction integer_shove} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup integer_yank exec_if (boolean_dup_times boolean_flush boolean_or) (integer_dec) exec_do*times () exec_do*count () boolean_swap) integer_lte tag_boolean_94 integer_shove 18 exec_if (integer_flush boolean_not 68) () integer_mod) integer_mult in1 exec_noop in3 in2 integer_min integer_min in4 integer_min print_integer integer_dup_items integer_fromboolean boolean_stackdepth boolean_dup_times integer_shove exec_do*range () in4 boolean_yankdup integer_flush boolean_frominteger exec_eq print_newline boolean_pop boolean_eq integer_dec exec_while (boolean_frominteger) boolean_and exec_y () tag_integer_299 boolean_swap integer_inc boolean_empty exec_s (boolean_invert_first_then_and integer_mult exec_flush exec_swap (exec_if (exec_when (integer_min) exec_pop (integer_empty integer_max boolean_yank print_newline boolean_empty exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () boolean_and) (integer_empty) boolean_invert_first_then_and in4 exec_swap (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_flush integer_shove print_exec (exec_yank integer_swap exec_y_when_autoconstructing ())))) ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 132
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction integer_shove} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_299} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_empty exec_pop () boolean_and exec_pop (exec_swap (integer_flush integer_pop integer_stackdepth boolean_dup_times) (integer_yankdup integer_yank exec_if (boolean_dup_times boolean_flush boolean_or) (integer_dec) exec_do*times () exec_do*count () boolean_swap) integer_lte tag_boolean_94 integer_shove 18 exec_if (integer_flush boolean_not 68) () integer_mod) integer_mult in1 exec_noop in3 in2 integer_min integer_min in4 integer_min print_integer integer_dup_items integer_fromboolean boolean_stackdepth boolean_dup_times integer_shove exec_do*range () in4 boolean_yankdup integer_flush boolean_frominteger exec_eq print_newline boolean_pop boolean_eq integer_dec exec_while (boolean_frominteger) boolean_and exec_y () tag_integer_299 boolean_swap integer_inc boolean_empty exec_s (boolean_invert_first_then_and integer_mult exec_flush exec_swap (exec_if (exec_when (integer_min) exec_pop (integer_empty integer_max boolean_yank print_newline boolean_empty exec_pop (boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () boolean_and) (integer_empty) boolean_invert_first_then_and in4 exec_swap (in2 in4 exec_flush exec_y (exec_do*range (integer_eq integer_flush integer_shove print_exec (exec_yank integer_swap exec_y_when_autoconstructing ())))) ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 132
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (75 244 263 273 411 221 285 427 237 265)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (75 244 263 273 411 221 285 427 237 265)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_94} {:close 0, :instruction 18} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction 68} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 60} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 87
Size: 119
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.299
Median total errors in population: 10
Error averages by case: (0.925 0.756 0.737 0.727 0.589 0.779 0.715 0.573 0.763 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.211
Average program size in population (points): 130.156
Average percent parens in population: 0.252
Minimum age in population: 18.0
Maximum age in population: 18.0
Average age in population: 18.0
Median age in population: 18.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 16890787
--- Timings ---
Current time: 1559594028734 milliseconds
Total Time:          52.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.2 seconds, 40.8%
Fitness Testing:     18.5 seconds, 35.5%
Report:              12.2 seconds, 23.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 18
Successful program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 119


Auto-simplifying with starting size: 119
step: 0
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 500
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 1000
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 1500
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 2000
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 2500
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 3000
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 3500
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 4000
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 4500
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

step: 5000
program: (integer_empty exec_pop () exec_pop (integer_gt integer_flush integer_pop integer_stackdepth integer_rot integer_yank boolean_dup_times boolean_flush exec_do*count (boolean_or) integer_yankdup boolean_rot exec_do*count () boolean_swap) integer_lte exec_k_when_autoconstructing (integer_mult tag_boolean_94 18 exec_if (integer_flush 68) () integer_mod) () integer_mult exec_swap () (in1 exec_noop in3 exec_do*times (in4 in2 integer_min integer_min print_integer integer_dup_items boolean_stackdepth integer_shove integer_stackdepth exec_flush) exec_do*range () exec_if (integer_lte boolean_yankdup boolean_frominteger boolean_not boolean_dup_times exec_eq) (print_newline integer_rot exec_while (boolean_frominteger) boolean_and) boolean_swap) exec_flush exec_shove (exec_swap (integer_min) (exec_pop (integer_empty integer_max boolean_yank exec_pop (60) boolean_rot boolean_flush) integer_gt integer_yank integer_div) exec_k_when_autoconstructing (boolean_invert_second_then_and) () in4 exec_swap (in2 in4 exec_flush exec_do*range (integer_eq integer_flush integer_shove exec_pop (print_exec (exec_s_when_autoconstructing () (integer_swap exec_y_when_autoconstructing ()) ())))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 119

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 138
Test mean error for best: 0.13800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 45                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: 36                  | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -26                 | Program output: -26                
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 22                 
Correct output: 4                   | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 10                 
Correct output: 3                   | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 44                  | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -84                 | Program output: -12                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -25                 | Program output: -25                
Correct output: -99                 | Program output: -99                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -72                 | Program output: -72                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -71                 | Program output: -71                
Correct output: -13                 | Program output: -13                
Correct output: -19                 | Program output: -19                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -47                 | Program output: -15                
Correct output: -66                 | Program output: -66                
Correct output: 21                  | Program output: 21                 
Correct output: -51                 | Program output: -51                
Correct output: -89                 | Program output: -89                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
;;******************************
