Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[26 46 46 46] 26] [[-4 -4 -2 -4] -4] [[-65 -52 -65 -65] -65] [[65 65 65 -93] -93] [[48 -69 -69 -69] -69] [[100 100 100 -31] -31] [[91 -24 91 91] -24] [[48 48 -90 48] -90] [[15 15 15 -78] -78] [[-84 -84 42 -84] -84] [(-80 -80 -80 -80) -80] [(40 40 40 40) 40] [(-26 -26 -26 -26) -26] [(13 13 13 13) 13] [(-87 -87 -87 -87) -87] [(11 57 20 20) 11] [(14 68 25 0) 0] [(39 96 10 48) 10] [(86 77 94 97) 77] [(62 18 14 84) 14] [(58 84 4 38) 4] [(62 92 62 56) 56] [(75 100 22 29) 22] [(35 94 9 83) 9] [(90 0 64 29) 0] [(1 67 44 7) 1] [(47 58 78 57) 47] [(8 11 42 27) 8] [(95 51 84 43) 43] [(79 65 24 85) 24] [(31 85 41 58) 31] [(2 92 44 26) 2] [(46 44 39 66) 39] [(18 91 4 73) 4] [(41 12 60 59) 12] [(24 -87 15 56) -87] [(-74 97 -3 -95) -95] [(-9 -28 -91 88) -91] [(-56 26 -53 -72) -72] [(-70 -27 -75 -93) -93] [(-62 24 12 94) -62] [(62 -5 -82 -4) -82] [(-66 42 24 -66) -66] [(45 -65 -66 32) -66] [(98 100 20 -42) -42] [(-78 -96 -9 41) -96] [(-50 96 -41 53) -50] [(11 41 69 97) 11] [(22 19 94 93) 19] [(-69 -40 47 27) -69] [(63 -90 -97 99) -97] [(12 -79 57 66) -79] [(-13 66 70 -22) -22] [(34 99 -56 -72) -72] [(97 73 25 77) 25] [(78 -17 -20 -49) -49] [(85 58 88 -17) -17] [(-76 -40 77 22) -76] [(-70 -44 -2 22) -70] [(83 -1 -89 -57) -89] [(-59 -93 87 29) -93] [(-57 82 -52 -83) -83] [(68 -66 -89 -72) -89] [(-32 2 38 -70) -70] [(-6 57 -69 84) -69] [(98 27 -58 -65) -65] [(-21 -3 -53 -34) -53] [(-26 95 71 1) -26] [(27 -76 96 16) -76] [(40 -11 11 -25) -25] [(11 -85 -14 45) -85] [(-96 96 54 79) -96] [(69 35 -93 -56) -93] [(-61 -14 -93 23) -93] [(-13 90 19 -15) -15] [(85 -41 -50 -97) -97] [(85 2 93 -15) -15] [(66 6 42 66) 6] [(-70 -66 -98 51) -98] [(45 65 12 -22) -22] [(46 65 -38 -78) -78] [(11 80 -3 59) -3] [(-56 -14 -89 -80) -89] [(-66 79 -2 17) -66] [(14 8 -2 12) -2] [(-73 -77 -61 -39) -77] [(60 99 46 13) 13] [(64 37 -37 -44) -44] [(81 55 56 -78) -78] [(71 -38 -80 27) -80] [(-27 -18 11 -55) -55] [(1 -1 -10 -77) -77] [(-4 -69 63 -87) -87] [(44 97 -75 -11) -75] [(-15 35 -64 -7) -64])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[26 46 46 46] 26]
Train Case:   6 | Input/Output: [[-4 -4 -2 -4] -4]
Train Case:   7 | Input/Output: [[-65 -52 -65 -65] -65]
Train Case:   8 | Input/Output: [[65 65 65 -93] -93]
Train Case:   9 | Input/Output: [[48 -69 -69 -69] -69]
Train Case:  10 | Input/Output: [[100 100 100 -31] -31]
Train Case:  11 | Input/Output: [[91 -24 91 91] -24]
Train Case:  12 | Input/Output: [[48 48 -90 48] -90]
Train Case:  13 | Input/Output: [[15 15 15 -78] -78]
Train Case:  14 | Input/Output: [[-84 -84 42 -84] -84]
Train Case:  15 | Input/Output: [(-80 -80 -80 -80) -80]
Train Case:  16 | Input/Output: [(40 40 40 40) 40]
Train Case:  17 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  18 | Input/Output: [(13 13 13 13) 13]
Train Case:  19 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  20 | Input/Output: [(11 57 20 20) 11]
Train Case:  21 | Input/Output: [(14 68 25 0) 0]
Train Case:  22 | Input/Output: [(39 96 10 48) 10]
Train Case:  23 | Input/Output: [(86 77 94 97) 77]
Train Case:  24 | Input/Output: [(62 18 14 84) 14]
Train Case:  25 | Input/Output: [(58 84 4 38) 4]
Train Case:  26 | Input/Output: [(62 92 62 56) 56]
Train Case:  27 | Input/Output: [(75 100 22 29) 22]
Train Case:  28 | Input/Output: [(35 94 9 83) 9]
Train Case:  29 | Input/Output: [(90 0 64 29) 0]
Train Case:  30 | Input/Output: [(1 67 44 7) 1]
Train Case:  31 | Input/Output: [(47 58 78 57) 47]
Train Case:  32 | Input/Output: [(8 11 42 27) 8]
Train Case:  33 | Input/Output: [(95 51 84 43) 43]
Train Case:  34 | Input/Output: [(79 65 24 85) 24]
Train Case:  35 | Input/Output: [(31 85 41 58) 31]
Train Case:  36 | Input/Output: [(2 92 44 26) 2]
Train Case:  37 | Input/Output: [(46 44 39 66) 39]
Train Case:  38 | Input/Output: [(18 91 4 73) 4]
Train Case:  39 | Input/Output: [(41 12 60 59) 12]
Train Case:  40 | Input/Output: [(24 -87 15 56) -87]
Train Case:  41 | Input/Output: [(-74 97 -3 -95) -95]
Train Case:  42 | Input/Output: [(-9 -28 -91 88) -91]
Train Case:  43 | Input/Output: [(-56 26 -53 -72) -72]
Train Case:  44 | Input/Output: [(-70 -27 -75 -93) -93]
Train Case:  45 | Input/Output: [(-62 24 12 94) -62]
Train Case:  46 | Input/Output: [(62 -5 -82 -4) -82]
Train Case:  47 | Input/Output: [(-66 42 24 -66) -66]
Train Case:  48 | Input/Output: [(45 -65 -66 32) -66]
Train Case:  49 | Input/Output: [(98 100 20 -42) -42]
Train Case:  50 | Input/Output: [(-78 -96 -9 41) -96]
Train Case:  51 | Input/Output: [(-50 96 -41 53) -50]
Train Case:  52 | Input/Output: [(11 41 69 97) 11]
Train Case:  53 | Input/Output: [(22 19 94 93) 19]
Train Case:  54 | Input/Output: [(-69 -40 47 27) -69]
Train Case:  55 | Input/Output: [(63 -90 -97 99) -97]
Train Case:  56 | Input/Output: [(12 -79 57 66) -79]
Train Case:  57 | Input/Output: [(-13 66 70 -22) -22]
Train Case:  58 | Input/Output: [(34 99 -56 -72) -72]
Train Case:  59 | Input/Output: [(97 73 25 77) 25]
Train Case:  60 | Input/Output: [(78 -17 -20 -49) -49]
Train Case:  61 | Input/Output: [(85 58 88 -17) -17]
Train Case:  62 | Input/Output: [(-76 -40 77 22) -76]
Train Case:  63 | Input/Output: [(-70 -44 -2 22) -70]
Train Case:  64 | Input/Output: [(83 -1 -89 -57) -89]
Train Case:  65 | Input/Output: [(-59 -93 87 29) -93]
Train Case:  66 | Input/Output: [(-57 82 -52 -83) -83]
Train Case:  67 | Input/Output: [(68 -66 -89 -72) -89]
Train Case:  68 | Input/Output: [(-32 2 38 -70) -70]
Train Case:  69 | Input/Output: [(-6 57 -69 84) -69]
Train Case:  70 | Input/Output: [(98 27 -58 -65) -65]
Train Case:  71 | Input/Output: [(-21 -3 -53 -34) -53]
Train Case:  72 | Input/Output: [(-26 95 71 1) -26]
Train Case:  73 | Input/Output: [(27 -76 96 16) -76]
Train Case:  74 | Input/Output: [(40 -11 11 -25) -25]
Train Case:  75 | Input/Output: [(11 -85 -14 45) -85]
Train Case:  76 | Input/Output: [(-96 96 54 79) -96]
Train Case:  77 | Input/Output: [(69 35 -93 -56) -93]
Train Case:  78 | Input/Output: [(-61 -14 -93 23) -93]
Train Case:  79 | Input/Output: [(-13 90 19 -15) -15]
Train Case:  80 | Input/Output: [(85 -41 -50 -97) -97]
Train Case:  81 | Input/Output: [(85 2 93 -15) -15]
Train Case:  82 | Input/Output: [(66 6 42 66) 6]
Train Case:  83 | Input/Output: [(-70 -66 -98 51) -98]
Train Case:  84 | Input/Output: [(45 65 12 -22) -22]
Train Case:  85 | Input/Output: [(46 65 -38 -78) -78]
Train Case:  86 | Input/Output: [(11 80 -3 59) -3]
Train Case:  87 | Input/Output: [(-56 -14 -89 -80) -89]
Train Case:  88 | Input/Output: [(-66 79 -2 17) -66]
Train Case:  89 | Input/Output: [(14 8 -2 12) -2]
Train Case:  90 | Input/Output: [(-73 -77 -61 -39) -77]
Train Case:  91 | Input/Output: [(60 99 46 13) 13]
Train Case:  92 | Input/Output: [(64 37 -37 -44) -44]
Train Case:  93 | Input/Output: [(81 55 56 -78) -78]
Train Case:  94 | Input/Output: [(71 -38 -80 27) -80]
Train Case:  95 | Input/Output: [(-27 -18 11 -55) -55]
Train Case:  96 | Input/Output: [(1 -1 -10 -77) -77]
Train Case:  97 | Input/Output: [(-4 -69 63 -87) -87]
Train Case:  98 | Input/Output: [(44 97 -75 -11) -75]
Train Case:  99 | Input/Output: [(-15 35 -64 -7) -64]
Test Case:   0 | Input/Output: [[57 57 60 57] 57]
Test Case:   1 | Input/Output: [[73 73 73 -4] -4]
Test Case:   2 | Input/Output: [[-34 -34 -34 99] -34]
Test Case:   3 | Input/Output: [[53 84 84 84] 53]
Test Case:   4 | Input/Output: [[12 60 60 60] 12]
Test Case:   5 | Input/Output: [[-9 -9 -9 13] -9]
Test Case:   6 | Input/Output: [[100 39 39 39] 39]
Test Case:   7 | Input/Output: [[3 10 3 3] 3]
Test Case:   8 | Input/Output: [[58 55 55 55] 55]
Test Case:   9 | Input/Output: [[36 36 36 -31] -31]
Test Case:  10 | Input/Output: [[72 72 72 53] 53]
Test Case:  11 | Input/Output: [[-3 -3 -3 87] -3]
Test Case:  12 | Input/Output: [[42 42 42 14] 14]
Test Case:  13 | Input/Output: [[30 30 -38 30] -38]
Test Case:  14 | Input/Output: [[-64 -64 -64 7] -64]
Test Case:  15 | Input/Output: [[-69 73 -69 -69] -69]
Test Case:  16 | Input/Output: [[94 42 94 94] 42]
Test Case:  17 | Input/Output: [[-25 19 19 19] -25]
Test Case:  18 | Input/Output: [[-30 15 15 15] -30]
Test Case:  19 | Input/Output: [[-40 -40 -40 -1] -40]
Test Case:  20 | Input/Output: [[40 40 40 19] 19]
Test Case:  21 | Input/Output: [[-11 -11 -11 28] -11]
Test Case:  22 | Input/Output: [[-40 -40 -40 -91] -91]
Test Case:  23 | Input/Output: [[12 -96 12 12] -96]
Test Case:  24 | Input/Output: [[-70 -70 -95 -70] -95]
Test Case:  25 | Input/Output: [[97 97 97 45] 45]
Test Case:  26 | Input/Output: [[-45 44 -45 -45] -45]
Test Case:  27 | Input/Output: [[-43 -43 -43 -43] -43]
Test Case:  28 | Input/Output: [[56 -64 56 56] -64]
Test Case:  29 | Input/Output: [[99 99 99 100] 99]
Test Case:  30 | Input/Output: [[92 -16 -16 -16] -16]
Test Case:  31 | Input/Output: [[56 56 62 56] 56]
Test Case:  32 | Input/Output: [[88 88 88 -62] -62]
Test Case:  33 | Input/Output: [[73 -9 73 73] -9]
Test Case:  34 | Input/Output: [[-25 -25 -73 -25] -73]
Test Case:  35 | Input/Output: [[84 93 93 93] 84]
Test Case:  36 | Input/Output: [[63 63 83 63] 63]
Test Case:  37 | Input/Output: [[-73 -73 -73 -51] -73]
Test Case:  38 | Input/Output: [[-18 -83 -83 -83] -83]
Test Case:  39 | Input/Output: [[-16 77 -16 -16] -16]
Test Case:  40 | Input/Output: [[-36 70 -36 -36] -36]
Test Case:  41 | Input/Output: [[27 80 27 27] 27]
Test Case:  42 | Input/Output: [[16 16 14 16] 14]
Test Case:  43 | Input/Output: [[94 -94 -94 -94] -94]
Test Case:  44 | Input/Output: [[-76 -55 -55 -55] -76]
Test Case:  45 | Input/Output: [[-13 -13 82 -13] -13]
Test Case:  46 | Input/Output: [[-7 -7 71 -7] -7]
Test Case:  47 | Input/Output: [[-83 -83 -83 -61] -83]
Test Case:  48 | Input/Output: [[43 -28 -28 -28] -28]
Test Case:  49 | Input/Output: [[42 -97 -97 -97] -97]
Test Case:  50 | Input/Output: [[3 72 72 72] 3]
Test Case:  51 | Input/Output: [[97 97 97 97] 97]
Test Case:  52 | Input/Output: [[68 -85 68 68] -85]
Test Case:  53 | Input/Output: [[45 45 32 45] 32]
Test Case:  54 | Input/Output: [[-33 -33 -33 79] -33]
Test Case:  55 | Input/Output: [[-32 33 -32 -32] -32]
Test Case:  56 | Input/Output: [[18 18 -5 18] -5]
Test Case:  57 | Input/Output: [[-54 -80 -80 -80] -80]
Test Case:  58 | Input/Output: [[-59 -59 -6 -59] -59]
Test Case:  59 | Input/Output: [[-46 -46 -41 -46] -46]
Test Case:  60 | Input/Output: [[18 18 -5 18] -5]
Test Case:  61 | Input/Output: [[60 60 60 37] 37]
Test Case:  62 | Input/Output: [[51 70 51 51] 51]
Test Case:  63 | Input/Output: [[-19 -19 26 -19] -19]
Test Case:  64 | Input/Output: [[64 64 53 64] 53]
Test Case:  65 | Input/Output: [[73 60 60 60] 60]
Test Case:  66 | Input/Output: [[-62 -62 18 -62] -62]
Test Case:  67 | Input/Output: [[20 74 74 74] 20]
Test Case:  68 | Input/Output: [[-51 5 5 5] -51]
Test Case:  69 | Input/Output: [[-80 -80 -80 -7] -80]
Test Case:  70 | Input/Output: [[29 29 21 29] 21]
Test Case:  71 | Input/Output: [[15 -29 15 15] -29]
Test Case:  72 | Input/Output: [[42 42 -88 42] -88]
Test Case:  73 | Input/Output: [[37 37 37 -14] -14]
Test Case:  74 | Input/Output: [[75 75 23 75] 23]
Test Case:  75 | Input/Output: [[3 3 3 -22] -22]
Test Case:  76 | Input/Output: [[50 50 50 72] 50]
Test Case:  77 | Input/Output: [[1 -84 1 1] -84]
Test Case:  78 | Input/Output: [[76 76 59 76] 59]
Test Case:  79 | Input/Output: [[-52 -52 -50 -52] -52]
Test Case:  80 | Input/Output: [[-76 -89 -76 -76] -89]
Test Case:  81 | Input/Output: [[-15 -15 -15 34] -15]
Test Case:  82 | Input/Output: [[63 63 60 63] 60]
Test Case:  83 | Input/Output: [[-6 -6 -51 -6] -51]
Test Case:  84 | Input/Output: [[1 -33 1 1] -33]
Test Case:  85 | Input/Output: [[46 7 7 7] 7]
Test Case:  86 | Input/Output: [[25 25 17 25] 17]
Test Case:  87 | Input/Output: [[-33 15 15 15] -33]
Test Case:  88 | Input/Output: [[91 91 57 91] 57]
Test Case:  89 | Input/Output: [[-37 74 74 74] -37]
Test Case:  90 | Input/Output: [[20 20 87 20] 20]
Test Case:  91 | Input/Output: [[26 26 -85 26] -85]
Test Case:  92 | Input/Output: [[-79 22 -79 -79] -79]
Test Case:  93 | Input/Output: [[-97 10 10 10] -97]
Test Case:  94 | Input/Output: [[-57 -57 -57 38] -57]
Test Case:  95 | Input/Output: [[29 29 29 48] 29]
Test Case:  96 | Input/Output: [[-16 -16 -60 -16] -60]
Test Case:  97 | Input/Output: [[-57 -57 -57 30] -57]
Test Case:  98 | Input/Output: [[67 -60 -60 -60] -60]
Test Case:  99 | Input/Output: [[-64 -64 -64 -65] -65]
Test Case: 100 | Input/Output: [(46 46 46 46) 46]
Test Case: 101 | Input/Output: [(75 75 75 75) 75]
Test Case: 102 | Input/Output: [(26 26 26 26) 26]
Test Case: 103 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 104 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 105 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 106 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 107 | Input/Output: [(29 29 29 29) 29]
Test Case: 108 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 109 | Input/Output: [(68 68 68 68) 68]
Test Case: 110 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 111 | Input/Output: [(97 97 97 97) 97]
Test Case: 112 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 113 | Input/Output: [(74 74 74 74) 74]
Test Case: 114 | Input/Output: [(90 90 90 90) 90]
Test Case: 115 | Input/Output: [(70 70 70 70) 70]
Test Case: 116 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 117 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 118 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 119 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 120 | Input/Output: [(98 98 98 98) 98]
Test Case: 121 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 122 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 123 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 124 | Input/Output: [(74 74 74 74) 74]
Test Case: 125 | Input/Output: [(68 68 68 68) 68]
Test Case: 126 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 127 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 128 | Input/Output: [(16 16 16 16) 16]
Test Case: 129 | Input/Output: [(49 49 49 49) 49]
Test Case: 130 | Input/Output: [(3 3 3 3) 3]
Test Case: 131 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 132 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 133 | Input/Output: [(25 25 25 25) 25]
Test Case: 134 | Input/Output: [(42 42 42 42) 42]
Test Case: 135 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 136 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 137 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 138 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 139 | Input/Output: [(77 77 77 77) 77]
Test Case: 140 | Input/Output: [(55 55 55 55) 55]
Test Case: 141 | Input/Output: [(6 6 6 6) 6]
Test Case: 142 | Input/Output: [(68 68 68 68) 68]
Test Case: 143 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 144 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 145 | Input/Output: [(45 45 45 45) 45]
Test Case: 146 | Input/Output: [(0 0 0 0) 0]
Test Case: 147 | Input/Output: [(98 98 98 98) 98]
Test Case: 148 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 149 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 150 | Input/Output: [(89 89 89 89) 89]
Test Case: 151 | Input/Output: [(77 77 77 77) 77]
Test Case: 152 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 153 | Input/Output: [(59 59 59 59) 59]
Test Case: 154 | Input/Output: [(92 92 92 92) 92]
Test Case: 155 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 156 | Input/Output: [(90 90 90 90) 90]
Test Case: 157 | Input/Output: [(79 79 79 79) 79]
Test Case: 158 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 159 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 160 | Input/Output: [(62 62 62 62) 62]
Test Case: 161 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 162 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 163 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 164 | Input/Output: [(84 84 84 84) 84]
Test Case: 165 | Input/Output: [(44 44 44 44) 44]
Test Case: 166 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 167 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 168 | Input/Output: [(23 23 23 23) 23]
Test Case: 169 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 170 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 171 | Input/Output: [(50 50 50 50) 50]
Test Case: 172 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 173 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 174 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 175 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 176 | Input/Output: [(67 67 67 67) 67]
Test Case: 177 | Input/Output: [(71 71 71 71) 71]
Test Case: 178 | Input/Output: [(40 40 40 40) 40]
Test Case: 179 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 180 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 181 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 182 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 183 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 184 | Input/Output: [(0 0 0 0) 0]
Test Case: 185 | Input/Output: [(57 57 57 57) 57]
Test Case: 186 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 187 | Input/Output: [(22 22 22 22) 22]
Test Case: 188 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 189 | Input/Output: [(12 12 12 12) 12]
Test Case: 190 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 191 | Input/Output: [(35 35 35 35) 35]
Test Case: 192 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 193 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 194 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 195 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 196 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 197 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 198 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 199 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 200 | Input/Output: [(54 54 54 27) 27]
Test Case: 201 | Input/Output: [(30 25 26 24) 24]
Test Case: 202 | Input/Output: [(75 66 11 49) 11]
Test Case: 203 | Input/Output: [(50 58 6 3) 3]
Test Case: 204 | Input/Output: [(47 43 31 96) 31]
Test Case: 205 | Input/Output: [(98 26 59 66) 26]
Test Case: 206 | Input/Output: [(96 79 34 64) 34]
Test Case: 207 | Input/Output: [(36 27 51 94) 27]
Test Case: 208 | Input/Output: [(66 77 36 8) 8]
Test Case: 209 | Input/Output: [(56 97 72 19) 19]
Test Case: 210 | Input/Output: [(59 62 38 74) 38]
Test Case: 211 | Input/Output: [(39 25 27 77) 25]
Test Case: 212 | Input/Output: [(29 70 13 50) 13]
Test Case: 213 | Input/Output: [(19 24 22 46) 19]
Test Case: 214 | Input/Output: [(55 53 80 8) 8]
Test Case: 215 | Input/Output: [(25 90 47 76) 25]
Test Case: 216 | Input/Output: [(41 71 95 24) 24]
Test Case: 217 | Input/Output: [(97 19 65 72) 19]
Test Case: 218 | Input/Output: [(33 87 3 16) 3]
Test Case: 219 | Input/Output: [(9 19 2 74) 2]
Test Case: 220 | Input/Output: [(5 49 19 48) 5]
Test Case: 221 | Input/Output: [(22 49 41 5) 5]
Test Case: 222 | Input/Output: [(35 81 74 81) 35]
Test Case: 223 | Input/Output: [(79 34 21 17) 17]
Test Case: 224 | Input/Output: [(25 45 51 25) 25]
Test Case: 225 | Input/Output: [(0 92 48 91) 0]
Test Case: 226 | Input/Output: [(62 11 60 75) 11]
Test Case: 227 | Input/Output: [(13 46 98 78) 13]
Test Case: 228 | Input/Output: [(53 95 98 10) 10]
Test Case: 229 | Input/Output: [(73 54 68 52) 52]
Test Case: 230 | Input/Output: [(45 38 51 34) 34]
Test Case: 231 | Input/Output: [(15 14 98 72) 14]
Test Case: 232 | Input/Output: [(52 80 63 60) 52]
Test Case: 233 | Input/Output: [(41 85 4 81) 4]
Test Case: 234 | Input/Output: [(90 35 22 39) 22]
Test Case: 235 | Input/Output: [(55 66 95 4) 4]
Test Case: 236 | Input/Output: [(98 40 54 69) 40]
Test Case: 237 | Input/Output: [(6 26 49 61) 6]
Test Case: 238 | Input/Output: [(90 62 79 27) 27]
Test Case: 239 | Input/Output: [(54 0 56 16) 0]
Test Case: 240 | Input/Output: [(36 10 53 19) 10]
Test Case: 241 | Input/Output: [(4 95 15 92) 4]
Test Case: 242 | Input/Output: [(19 54 55 28) 19]
Test Case: 243 | Input/Output: [(2 65 20 2) 2]
Test Case: 244 | Input/Output: [(50 38 57 51) 38]
Test Case: 245 | Input/Output: [(55 58 82 21) 21]
Test Case: 246 | Input/Output: [(87 21 35 77) 21]
Test Case: 247 | Input/Output: [(34 52 29 18) 18]
Test Case: 248 | Input/Output: [(10 44 9 25) 9]
Test Case: 249 | Input/Output: [(63 79 87 68) 63]
Test Case: 250 | Input/Output: [(56 40 33 39) 33]
Test Case: 251 | Input/Output: [(4 66 50 54) 4]
Test Case: 252 | Input/Output: [(26 3 3 15) 3]
Test Case: 253 | Input/Output: [(68 47 41 32) 32]
Test Case: 254 | Input/Output: [(92 97 93 88) 88]
Test Case: 255 | Input/Output: [(15 84 36 62) 15]
Test Case: 256 | Input/Output: [(43 5 17 96) 5]
Test Case: 257 | Input/Output: [(76 16 15 73) 15]
Test Case: 258 | Input/Output: [(57 84 56 18) 18]
Test Case: 259 | Input/Output: [(97 62 25 85) 25]
Test Case: 260 | Input/Output: [(68 14 41 59) 14]
Test Case: 261 | Input/Output: [(23 28 30 9) 9]
Test Case: 262 | Input/Output: [(63 26 51 53) 26]
Test Case: 263 | Input/Output: [(20 68 37 61) 20]
Test Case: 264 | Input/Output: [(56 88 16 35) 16]
Test Case: 265 | Input/Output: [(72 23 27 55) 23]
Test Case: 266 | Input/Output: [(73 68 28 80) 28]
Test Case: 267 | Input/Output: [(11 18 35 77) 11]
Test Case: 268 | Input/Output: [(40 58 62 77) 40]
Test Case: 269 | Input/Output: [(31 91 84 61) 31]
Test Case: 270 | Input/Output: [(29 79 58 79) 29]
Test Case: 271 | Input/Output: [(89 57 90 41) 41]
Test Case: 272 | Input/Output: [(75 77 59 23) 23]
Test Case: 273 | Input/Output: [(95 50 59 60) 50]
Test Case: 274 | Input/Output: [(80 22 87 14) 14]
Test Case: 275 | Input/Output: [(0 92 19 0) 0]
Test Case: 276 | Input/Output: [(62 41 5 82) 5]
Test Case: 277 | Input/Output: [(16 6 4 89) 4]
Test Case: 278 | Input/Output: [(23 13 35 72) 13]
Test Case: 279 | Input/Output: [(86 95 40 5) 5]
Test Case: 280 | Input/Output: [(56 52 1 14) 1]
Test Case: 281 | Input/Output: [(73 10 77 82) 10]
Test Case: 282 | Input/Output: [(61 93 47 85) 47]
Test Case: 283 | Input/Output: [(17 25 12 52) 12]
Test Case: 284 | Input/Output: [(18 52 51 38) 18]
Test Case: 285 | Input/Output: [(33 31 73 82) 31]
Test Case: 286 | Input/Output: [(13 85 24 69) 13]
Test Case: 287 | Input/Output: [(94 7 17 44) 7]
Test Case: 288 | Input/Output: [(27 66 78 62) 27]
Test Case: 289 | Input/Output: [(33 54 82 56) 33]
Test Case: 290 | Input/Output: [(9 5 49 5) 5]
Test Case: 291 | Input/Output: [(31 94 52 72) 31]
Test Case: 292 | Input/Output: [(47 22 21 94) 21]
Test Case: 293 | Input/Output: [(28 82 25 1) 1]
Test Case: 294 | Input/Output: [(52 99 24 8) 8]
Test Case: 295 | Input/Output: [(98 28 27 42) 27]
Test Case: 296 | Input/Output: [(48 84 99 93) 48]
Test Case: 297 | Input/Output: [(6 5 83 24) 5]
Test Case: 298 | Input/Output: [(46 68 43 7) 7]
Test Case: 299 | Input/Output: [(13 58 8 42) 8]
Test Case: 300 | Input/Output: [(32 18 6 80) 6]
Test Case: 301 | Input/Output: [(67 29 6 35) 6]
Test Case: 302 | Input/Output: [(89 38 65 25) 25]
Test Case: 303 | Input/Output: [(88 5 99 90) 5]
Test Case: 304 | Input/Output: [(81 45 87 6) 6]
Test Case: 305 | Input/Output: [(69 57 45 94) 45]
Test Case: 306 | Input/Output: [(64 4 35 2) 2]
Test Case: 307 | Input/Output: [(35 21 33 4) 4]
Test Case: 308 | Input/Output: [(12 27 1 48) 1]
Test Case: 309 | Input/Output: [(86 70 64 0) 0]
Test Case: 310 | Input/Output: [(57 98 40 68) 40]
Test Case: 311 | Input/Output: [(68 37 90 98) 37]
Test Case: 312 | Input/Output: [(31 34 8 38) 8]
Test Case: 313 | Input/Output: [(100 51 45 63) 45]
Test Case: 314 | Input/Output: [(50 64 53 84) 50]
Test Case: 315 | Input/Output: [(65 95 31 74) 31]
Test Case: 316 | Input/Output: [(54 54 28 61) 28]
Test Case: 317 | Input/Output: [(29 18 16 88) 16]
Test Case: 318 | Input/Output: [(34 24 85 80) 24]
Test Case: 319 | Input/Output: [(26 63 35 84) 26]
Test Case: 320 | Input/Output: [(12 29 36 38) 12]
Test Case: 321 | Input/Output: [(55 83 46 32) 32]
Test Case: 322 | Input/Output: [(89 78 34 62) 34]
Test Case: 323 | Input/Output: [(74 63 54 41) 41]
Test Case: 324 | Input/Output: [(81 71 56 93) 56]
Test Case: 325 | Input/Output: [(42 86 52 64) 42]
Test Case: 326 | Input/Output: [(61 24 67 26) 24]
Test Case: 327 | Input/Output: [(97 7 7 54) 7]
Test Case: 328 | Input/Output: [(0 23 57 84) 0]
Test Case: 329 | Input/Output: [(39 89 18 41) 18]
Test Case: 330 | Input/Output: [(30 11 48 73) 11]
Test Case: 331 | Input/Output: [(87 40 26 73) 26]
Test Case: 332 | Input/Output: [(62 29 79 59) 29]
Test Case: 333 | Input/Output: [(68 10 35 91) 10]
Test Case: 334 | Input/Output: [(40 37 7 41) 7]
Test Case: 335 | Input/Output: [(81 27 68 62) 27]
Test Case: 336 | Input/Output: [(64 91 13 68) 13]
Test Case: 337 | Input/Output: [(99 58 11 93) 11]
Test Case: 338 | Input/Output: [(55 1 98 90) 1]
Test Case: 339 | Input/Output: [(22 100 98 98) 22]
Test Case: 340 | Input/Output: [(23 10 66 4) 4]
Test Case: 341 | Input/Output: [(16 59 81 42) 16]
Test Case: 342 | Input/Output: [(45 53 33 13) 13]
Test Case: 343 | Input/Output: [(20 82 38 40) 20]
Test Case: 344 | Input/Output: [(19 71 11 53) 11]
Test Case: 345 | Input/Output: [(61 53 79 45) 45]
Test Case: 346 | Input/Output: [(58 22 44 50) 22]
Test Case: 347 | Input/Output: [(63 25 25 48) 25]
Test Case: 348 | Input/Output: [(23 78 48 90) 23]
Test Case: 349 | Input/Output: [(33 57 92 30) 30]
Test Case: 350 | Input/Output: [(32 30 94 57) 30]
Test Case: 351 | Input/Output: [(48 62 61 1) 1]
Test Case: 352 | Input/Output: [(74 14 26 39) 14]
Test Case: 353 | Input/Output: [(79 69 6 0) 0]
Test Case: 354 | Input/Output: [(68 26 24 81) 24]
Test Case: 355 | Input/Output: [(32 47 67 7) 7]
Test Case: 356 | Input/Output: [(37 45 74 88) 37]
Test Case: 357 | Input/Output: [(33 35 22 72) 22]
Test Case: 358 | Input/Output: [(52 21 62 47) 21]
Test Case: 359 | Input/Output: [(98 57 42 80) 42]
Test Case: 360 | Input/Output: [(64 8 31 60) 8]
Test Case: 361 | Input/Output: [(89 37 78 32) 32]
Test Case: 362 | Input/Output: [(14 41 96 66) 14]
Test Case: 363 | Input/Output: [(51 70 56 76) 51]
Test Case: 364 | Input/Output: [(68 87 16 76) 16]
Test Case: 365 | Input/Output: [(66 47 45 70) 45]
Test Case: 366 | Input/Output: [(100 9 92 48) 9]
Test Case: 367 | Input/Output: [(3 22 46 99) 3]
Test Case: 368 | Input/Output: [(0 37 44 68) 0]
Test Case: 369 | Input/Output: [(42 49 77 13) 13]
Test Case: 370 | Input/Output: [(66 4 44 59) 4]
Test Case: 371 | Input/Output: [(54 21 33 78) 21]
Test Case: 372 | Input/Output: [(84 44 57 80) 44]
Test Case: 373 | Input/Output: [(4 57 29 64) 4]
Test Case: 374 | Input/Output: [(14 70 44 1) 1]
Test Case: 375 | Input/Output: [(10 25 57 75) 10]
Test Case: 376 | Input/Output: [(67 53 21 74) 21]
Test Case: 377 | Input/Output: [(70 46 87 74) 46]
Test Case: 378 | Input/Output: [(84 34 49 46) 34]
Test Case: 379 | Input/Output: [(66 75 52 12) 12]
Test Case: 380 | Input/Output: [(100 14 78 71) 14]
Test Case: 381 | Input/Output: [(43 18 4 37) 4]
Test Case: 382 | Input/Output: [(47 48 68 89) 47]
Test Case: 383 | Input/Output: [(7 80 49 78) 7]
Test Case: 384 | Input/Output: [(4 60 60 76) 4]
Test Case: 385 | Input/Output: [(28 22 39 16) 16]
Test Case: 386 | Input/Output: [(98 62 41 44) 41]
Test Case: 387 | Input/Output: [(13 63 8 87) 8]
Test Case: 388 | Input/Output: [(15 82 92 58) 15]
Test Case: 389 | Input/Output: [(62 19 27 39) 19]
Test Case: 390 | Input/Output: [(84 73 78 96) 73]
Test Case: 391 | Input/Output: [(41 93 62 20) 20]
Test Case: 392 | Input/Output: [(49 16 43 39) 16]
Test Case: 393 | Input/Output: [(95 46 92 96) 46]
Test Case: 394 | Input/Output: [(8 88 89 87) 8]
Test Case: 395 | Input/Output: [(48 39 26 2) 2]
Test Case: 396 | Input/Output: [(5 52 27 86) 5]
Test Case: 397 | Input/Output: [(73 24 99 81) 24]
Test Case: 398 | Input/Output: [(89 95 83 35) 35]
Test Case: 399 | Input/Output: [(39 23 21 69) 21]
Test Case: 400 | Input/Output: [(16 69 88 -83) -83]
Test Case: 401 | Input/Output: [(-48 -15 -27 -24) -48]
Test Case: 402 | Input/Output: [(68 -22 -26 26) -26]
Test Case: 403 | Input/Output: [(-85 -31 10 74) -85]
Test Case: 404 | Input/Output: [(48 -70 -46 40) -70]
Test Case: 405 | Input/Output: [(-26 91 22 76) -26]
Test Case: 406 | Input/Output: [(-62 11 83 49) -62]
Test Case: 407 | Input/Output: [(-63 99 51 92) -63]
Test Case: 408 | Input/Output: [(-56 -39 82 41) -56]
Test Case: 409 | Input/Output: [(-62 96 19 -15) -62]
Test Case: 410 | Input/Output: [(-12 6 25 -94) -94]
Test Case: 411 | Input/Output: [(-97 -49 -5 -10) -97]
Test Case: 412 | Input/Output: [(95 10 56 62) 10]
Test Case: 413 | Input/Output: [(79 20 -40 6) -40]
Test Case: 414 | Input/Output: [(11 70 46 -100) -100]
Test Case: 415 | Input/Output: [(-1 33 85 89) -1]
Test Case: 416 | Input/Output: [(79 18 97 91) 18]
Test Case: 417 | Input/Output: [(88 8 87 80) 8]
Test Case: 418 | Input/Output: [(73 -95 -41 -27) -95]
Test Case: 419 | Input/Output: [(41 62 -28 99) -28]
Test Case: 420 | Input/Output: [(9 -16 66 -66) -66]
Test Case: 421 | Input/Output: [(59 -36 -83 56) -83]
Test Case: 422 | Input/Output: [(33 62 -60 -35) -60]
Test Case: 423 | Input/Output: [(-100 -40 6 94) -100]
Test Case: 424 | Input/Output: [(-48 -97 76 -80) -97]
Test Case: 425 | Input/Output: [(-49 40 -27 -14) -49]
Test Case: 426 | Input/Output: [(48 21 -68 -75) -75]
Test Case: 427 | Input/Output: [(-8 88 47 -52) -52]
Test Case: 428 | Input/Output: [(9 -39 -26 -16) -39]
Test Case: 429 | Input/Output: [(-95 -22 25 -14) -95]
Test Case: 430 | Input/Output: [(77 93 -81 -71) -81]
Test Case: 431 | Input/Output: [(-23 80 -74 38) -74]
Test Case: 432 | Input/Output: [(-36 12 -65 66) -65]
Test Case: 433 | Input/Output: [(-51 -98 87 -62) -98]
Test Case: 434 | Input/Output: [(2 -78 -85 -12) -85]
Test Case: 435 | Input/Output: [(98 82 -41 -67) -67]
Test Case: 436 | Input/Output: [(-70 -91 -86 -42) -91]
Test Case: 437 | Input/Output: [(-96 61 61 -91) -96]
Test Case: 438 | Input/Output: [(-5 82 -6 51) -6]
Test Case: 439 | Input/Output: [(4 -28 -66 -15) -66]
Test Case: 440 | Input/Output: [(-57 -99 38 90) -99]
Test Case: 441 | Input/Output: [(5 31 9 24) 5]
Test Case: 442 | Input/Output: [(38 94 -67 45) -67]
Test Case: 443 | Input/Output: [(-4 92 -58 -87) -87]
Test Case: 444 | Input/Output: [(83 28 22 -30) -30]
Test Case: 445 | Input/Output: [(81 -99 41 51) -99]
Test Case: 446 | Input/Output: [(0 -21 62 -71) -71]
Test Case: 447 | Input/Output: [(-70 22 -51 79) -70]
Test Case: 448 | Input/Output: [(36 -39 100 41) -39]
Test Case: 449 | Input/Output: [(24 98 -24 84) -24]
Test Case: 450 | Input/Output: [(37 64 90 43) 37]
Test Case: 451 | Input/Output: [(85 -65 98 -57) -65]
Test Case: 452 | Input/Output: [(-23 -84 56 -62) -84]
Test Case: 453 | Input/Output: [(24 -12 72 30) -12]
Test Case: 454 | Input/Output: [(-97 -43 -87 -31) -97]
Test Case: 455 | Input/Output: [(-91 20 62 -32) -91]
Test Case: 456 | Input/Output: [(56 67 83 -16) -16]
Test Case: 457 | Input/Output: [(-69 -92 -79 -43) -92]
Test Case: 458 | Input/Output: [(27 -22 -95 79) -95]
Test Case: 459 | Input/Output: [(-62 3 5 13) -62]
Test Case: 460 | Input/Output: [(-98 -87 90 -96) -98]
Test Case: 461 | Input/Output: [(-17 17 -93 61) -93]
Test Case: 462 | Input/Output: [(-25 34 20 20) -25]
Test Case: 463 | Input/Output: [(-95 -92 -8 -12) -95]
Test Case: 464 | Input/Output: [(38 -5 41 59) -5]
Test Case: 465 | Input/Output: [(-60 -42 -94 54) -94]
Test Case: 466 | Input/Output: [(63 67 7 89) 7]
Test Case: 467 | Input/Output: [(40 77 -45 43) -45]
Test Case: 468 | Input/Output: [(-82 -56 -88 -69) -88]
Test Case: 469 | Input/Output: [(5 -87 71 21) -87]
Test Case: 470 | Input/Output: [(-35 65 89 -21) -35]
Test Case: 471 | Input/Output: [(62 -26 -4 41) -26]
Test Case: 472 | Input/Output: [(-38 3 -59 63) -59]
Test Case: 473 | Input/Output: [(-44 -32 75 55) -44]
Test Case: 474 | Input/Output: [(-54 77 90 -22) -54]
Test Case: 475 | Input/Output: [(27 48 -6 -15) -15]
Test Case: 476 | Input/Output: [(-85 92 6 11) -85]
Test Case: 477 | Input/Output: [(-25 -6 -56 23) -56]
Test Case: 478 | Input/Output: [(-77 -45 80 48) -77]
Test Case: 479 | Input/Output: [(43 3 12 -55) -55]
Test Case: 480 | Input/Output: [(-53 -64 -64 27) -64]
Test Case: 481 | Input/Output: [(9 -77 -41 -50) -77]
Test Case: 482 | Input/Output: [(94 -50 81 46) -50]
Test Case: 483 | Input/Output: [(-33 63 -2 -89) -89]
Test Case: 484 | Input/Output: [(-72 -5 -20 -87) -87]
Test Case: 485 | Input/Output: [(-43 -24 21 -1) -43]
Test Case: 486 | Input/Output: [(59 -71 41 77) -71]
Test Case: 487 | Input/Output: [(-28 -83 21 12) -83]
Test Case: 488 | Input/Output: [(19 93 86 31) 19]
Test Case: 489 | Input/Output: [(-3 -7 -31 -3) -31]
Test Case: 490 | Input/Output: [(-28 37 44 28) -28]
Test Case: 491 | Input/Output: [(-70 -67 35 -59) -70]
Test Case: 492 | Input/Output: [(90 57 -25 -30) -30]
Test Case: 493 | Input/Output: [(68 11 -54 -85) -85]
Test Case: 494 | Input/Output: [(39 55 -61 -95) -95]
Test Case: 495 | Input/Output: [(71 5 -4 20) -4]
Test Case: 496 | Input/Output: [(27 52 4 97) 4]
Test Case: 497 | Input/Output: [(-32 -80 -35 69) -80]
Test Case: 498 | Input/Output: [(49 -77 -83 88) -83]
Test Case: 499 | Input/Output: [(-51 -2 87 -45) -51]
Test Case: 500 | Input/Output: [(28 81 84 -29) -29]
Test Case: 501 | Input/Output: [(-33 81 -51 71) -51]
Test Case: 502 | Input/Output: [(-50 -1 -2 -44) -50]
Test Case: 503 | Input/Output: [(-24 -84 -38 -3) -84]
Test Case: 504 | Input/Output: [(74 69 -64 -70) -70]
Test Case: 505 | Input/Output: [(11 -77 -40 22) -77]
Test Case: 506 | Input/Output: [(9 -96 -25 -39) -96]
Test Case: 507 | Input/Output: [(-85 -100 -44 -63) -100]
Test Case: 508 | Input/Output: [(-34 69 56 -14) -34]
Test Case: 509 | Input/Output: [(-3 4 -23 72) -23]
Test Case: 510 | Input/Output: [(36 83 16 -77) -77]
Test Case: 511 | Input/Output: [(52 -94 79 -70) -94]
Test Case: 512 | Input/Output: [(93 80 -4 -8) -8]
Test Case: 513 | Input/Output: [(-15 -10 0 -76) -76]
Test Case: 514 | Input/Output: [(4 -7 8 12) -7]
Test Case: 515 | Input/Output: [(-78 56 19 -72) -78]
Test Case: 516 | Input/Output: [(-45 15 -97 23) -97]
Test Case: 517 | Input/Output: [(-65 -60 44 82) -65]
Test Case: 518 | Input/Output: [(-32 -34 -29 -69) -69]
Test Case: 519 | Input/Output: [(-3 18 -24 -52) -52]
Test Case: 520 | Input/Output: [(-87 -79 -73 59) -87]
Test Case: 521 | Input/Output: [(51 65 23 -11) -11]
Test Case: 522 | Input/Output: [(-89 38 69 89) -89]
Test Case: 523 | Input/Output: [(-87 -91 -10 12) -91]
Test Case: 524 | Input/Output: [(90 61 -40 -46) -46]
Test Case: 525 | Input/Output: [(26 -8 78 -33) -33]
Test Case: 526 | Input/Output: [(-7 -71 -58 72) -71]
Test Case: 527 | Input/Output: [(51 -58 86 79) -58]
Test Case: 528 | Input/Output: [(51 -52 71 -20) -52]
Test Case: 529 | Input/Output: [(-11 12 28 96) -11]
Test Case: 530 | Input/Output: [(88 -58 -20 81) -58]
Test Case: 531 | Input/Output: [(-81 76 -100 13) -100]
Test Case: 532 | Input/Output: [(-58 46 -17 -37) -58]
Test Case: 533 | Input/Output: [(51 -26 52 94) -26]
Test Case: 534 | Input/Output: [(27 -93 41 91) -93]
Test Case: 535 | Input/Output: [(-95 57 -26 -83) -95]
Test Case: 536 | Input/Output: [(-85 -14 -16 80) -85]
Test Case: 537 | Input/Output: [(85 -6 10 -50) -50]
Test Case: 538 | Input/Output: [(-11 -84 -47 -5) -84]
Test Case: 539 | Input/Output: [(21 6 10 -6) -6]
Test Case: 540 | Input/Output: [(-33 -58 29 5) -58]
Test Case: 541 | Input/Output: [(26 21 -64 -100) -100]
Test Case: 542 | Input/Output: [(-48 -28 -90 93) -90]
Test Case: 543 | Input/Output: [(-25 52 98 20) -25]
Test Case: 544 | Input/Output: [(-96 -83 65 70) -96]
Test Case: 545 | Input/Output: [(-9 91 80 -76) -76]
Test Case: 546 | Input/Output: [(69 24 -5 -53) -53]
Test Case: 547 | Input/Output: [(-7 -62 77 -9) -62]
Test Case: 548 | Input/Output: [(62 42 -5 12) -5]
Test Case: 549 | Input/Output: [(-93 -47 22 -10) -93]
Test Case: 550 | Input/Output: [(-63 -23 34 -74) -74]
Test Case: 551 | Input/Output: [(-71 -17 -89 -68) -89]
Test Case: 552 | Input/Output: [(31 -15 71 -54) -54]
Test Case: 553 | Input/Output: [(16 -23 14 -88) -88]
Test Case: 554 | Input/Output: [(-76 -12 -30 24) -76]
Test Case: 555 | Input/Output: [(7 45 -8 -73) -73]
Test Case: 556 | Input/Output: [(-69 21 -40 4) -69]
Test Case: 557 | Input/Output: [(43 91 90 76) 43]
Test Case: 558 | Input/Output: [(-57 23 89 -91) -91]
Test Case: 559 | Input/Output: [(-15 -70 58 20) -70]
Test Case: 560 | Input/Output: [(-26 66 -40 -35) -40]
Test Case: 561 | Input/Output: [(72 76 55 57) 55]
Test Case: 562 | Input/Output: [(7 100 78 92) 7]
Test Case: 563 | Input/Output: [(-47 -6 82 96) -47]
Test Case: 564 | Input/Output: [(-73 -2 50 -20) -73]
Test Case: 565 | Input/Output: [(23 -24 25 74) -24]
Test Case: 566 | Input/Output: [(84 -6 76 -7) -7]
Test Case: 567 | Input/Output: [(-98 -86 -65 -23) -98]
Test Case: 568 | Input/Output: [(73 -52 62 -11) -52]
Test Case: 569 | Input/Output: [(46 -61 78 22) -61]
Test Case: 570 | Input/Output: [(81 22 27 -21) -21]
Test Case: 571 | Input/Output: [(66 67 -25 -22) -25]
Test Case: 572 | Input/Output: [(34 -21 -46 -2) -46]
Test Case: 573 | Input/Output: [(-43 -64 13 20) -64]
Test Case: 574 | Input/Output: [(-73 -77 -100 29) -100]
Test Case: 575 | Input/Output: [(-64 77 -26 -61) -64]
Test Case: 576 | Input/Output: [(-71 11 -25 -51) -71]
Test Case: 577 | Input/Output: [(-53 -32 -22 -97) -97]
Test Case: 578 | Input/Output: [(-5 -18 -41 -18) -41]
Test Case: 579 | Input/Output: [(7 18 85 -80) -80]
Test Case: 580 | Input/Output: [(14 -91 -53 4) -91]
Test Case: 581 | Input/Output: [(87 -17 -99 86) -99]
Test Case: 582 | Input/Output: [(-64 -39 -30 -62) -64]
Test Case: 583 | Input/Output: [(79 74 99 55) 55]
Test Case: 584 | Input/Output: [(-42 82 -64 62) -64]
Test Case: 585 | Input/Output: [(26 -63 -80 74) -80]
Test Case: 586 | Input/Output: [(-75 50 -10 -49) -75]
Test Case: 587 | Input/Output: [(23 56 -21 -49) -49]
Test Case: 588 | Input/Output: [(15 -78 17 -67) -78]
Test Case: 589 | Input/Output: [(-10 89 -9 17) -10]
Test Case: 590 | Input/Output: [(19 -97 -28 -49) -97]
Test Case: 591 | Input/Output: [(90 -94 -3 81) -94]
Test Case: 592 | Input/Output: [(-82 -28 -67 -60) -82]
Test Case: 593 | Input/Output: [(85 -89 23 5) -89]
Test Case: 594 | Input/Output: [(-73 74 37 -70) -73]
Test Case: 595 | Input/Output: [(71 35 -53 68) -53]
Test Case: 596 | Input/Output: [(29 76 93 33) 29]
Test Case: 597 | Input/Output: [(-87 81 13 85) -87]
Test Case: 598 | Input/Output: [(21 2 -6 13) -6]
Test Case: 599 | Input/Output: [(-15 91 67 31) -15]
Test Case: 600 | Input/Output: [(-4 82 -10 48) -10]
Test Case: 601 | Input/Output: [(58 32 -65 -76) -76]
Test Case: 602 | Input/Output: [(38 9 71 -34) -34]
Test Case: 603 | Input/Output: [(-22 84 -100 42) -100]
Test Case: 604 | Input/Output: [(73 57 -52 -34) -52]
Test Case: 605 | Input/Output: [(41 -58 41 -79) -79]
Test Case: 606 | Input/Output: [(33 -76 -15 67) -76]
Test Case: 607 | Input/Output: [(-9 67 -24 -37) -37]
Test Case: 608 | Input/Output: [(-99 55 -91 -18) -99]
Test Case: 609 | Input/Output: [(-90 -58 15 86) -90]
Test Case: 610 | Input/Output: [(22 -74 74 83) -74]
Test Case: 611 | Input/Output: [(-35 -38 79 68) -38]
Test Case: 612 | Input/Output: [(32 -15 -60 -24) -60]
Test Case: 613 | Input/Output: [(13 -82 27 15) -82]
Test Case: 614 | Input/Output: [(-95 47 96 -43) -95]
Test Case: 615 | Input/Output: [(95 37 54 99) 37]
Test Case: 616 | Input/Output: [(20 -82 -24 40) -82]
Test Case: 617 | Input/Output: [(-53 58 -30 -66) -66]
Test Case: 618 | Input/Output: [(5 -48 74 76) -48]
Test Case: 619 | Input/Output: [(17 -81 -72 -98) -98]
Test Case: 620 | Input/Output: [(12 31 60 -6) -6]
Test Case: 621 | Input/Output: [(-94 -27 -56 -47) -94]
Test Case: 622 | Input/Output: [(21 62 99 -27) -27]
Test Case: 623 | Input/Output: [(-3 -39 12 -64) -64]
Test Case: 624 | Input/Output: [(-81 27 90 40) -81]
Test Case: 625 | Input/Output: [(63 -32 -24 -25) -32]
Test Case: 626 | Input/Output: [(-43 -63 90 -84) -84]
Test Case: 627 | Input/Output: [(-4 54 -80 60) -80]
Test Case: 628 | Input/Output: [(-28 -43 -61 -19) -61]
Test Case: 629 | Input/Output: [(-38 -12 36 8) -38]
Test Case: 630 | Input/Output: [(98 -71 37 45) -71]
Test Case: 631 | Input/Output: [(-52 31 -53 38) -53]
Test Case: 632 | Input/Output: [(-70 34 -74 45) -74]
Test Case: 633 | Input/Output: [(-92 -31 -68 58) -92]
Test Case: 634 | Input/Output: [(96 -58 68 -78) -78]
Test Case: 635 | Input/Output: [(-85 -36 -75 -59) -85]
Test Case: 636 | Input/Output: [(72 -96 -63 -48) -96]
Test Case: 637 | Input/Output: [(48 -30 -72 -59) -72]
Test Case: 638 | Input/Output: [(27 98 -63 -88) -88]
Test Case: 639 | Input/Output: [(-44 87 98 -8) -44]
Test Case: 640 | Input/Output: [(-25 30 53 41) -25]
Test Case: 641 | Input/Output: [(-36 -79 -78 11) -79]
Test Case: 642 | Input/Output: [(8 51 99 32) 8]
Test Case: 643 | Input/Output: [(-87 13 -36 -8) -87]
Test Case: 644 | Input/Output: [(-44 75 86 82) -44]
Test Case: 645 | Input/Output: [(83 -14 19 -21) -21]
Test Case: 646 | Input/Output: [(-91 41 32 53) -91]
Test Case: 647 | Input/Output: [(69 -87 -86 -16) -87]
Test Case: 648 | Input/Output: [(-92 -12 -21 -27) -92]
Test Case: 649 | Input/Output: [(6 62 -51 64) -51]
Test Case: 650 | Input/Output: [(-95 -76 -95 54) -95]
Test Case: 651 | Input/Output: [(-14 -96 -3 -79) -96]
Test Case: 652 | Input/Output: [(-27 99 8 -80) -80]
Test Case: 653 | Input/Output: [(51 -61 -78 -39) -78]
Test Case: 654 | Input/Output: [(39 -93 24 -25) -93]
Test Case: 655 | Input/Output: [(43 18 7 94) 7]
Test Case: 656 | Input/Output: [(-83 -44 11 84) -83]
Test Case: 657 | Input/Output: [(56 100 54 -92) -92]
Test Case: 658 | Input/Output: [(-26 -24 16 -76) -76]
Test Case: 659 | Input/Output: [(10 18 -99 28) -99]
Test Case: 660 | Input/Output: [(-11 -14 -84 24) -84]
Test Case: 661 | Input/Output: [(41 20 90 -95) -95]
Test Case: 662 | Input/Output: [(2 5 -85 -24) -85]
Test Case: 663 | Input/Output: [(-36 68 -25 -96) -96]
Test Case: 664 | Input/Output: [(35 -77 -11 -61) -77]
Test Case: 665 | Input/Output: [(-30 32 -82 -73) -82]
Test Case: 666 | Input/Output: [(-9 31 -90 19) -90]
Test Case: 667 | Input/Output: [(73 -95 -29 -54) -95]
Test Case: 668 | Input/Output: [(30 11 -25 -76) -76]
Test Case: 669 | Input/Output: [(62 -86 94 -16) -86]
Test Case: 670 | Input/Output: [(94 -57 60 -16) -57]
Test Case: 671 | Input/Output: [(47 31 95 -50) -50]
Test Case: 672 | Input/Output: [(-62 32 35 -1) -62]
Test Case: 673 | Input/Output: [(-13 61 -79 -19) -79]
Test Case: 674 | Input/Output: [(72 36 90 -58) -58]
Test Case: 675 | Input/Output: [(-96 61 -96 -84) -96]
Test Case: 676 | Input/Output: [(-41 -22 65 -81) -81]
Test Case: 677 | Input/Output: [(48 92 27 -15) -15]
Test Case: 678 | Input/Output: [(17 -10 -83 -87) -87]
Test Case: 679 | Input/Output: [(11 -44 -41 -20) -44]
Test Case: 680 | Input/Output: [(72 -93 96 -56) -93]
Test Case: 681 | Input/Output: [(3 18 15 80) 3]
Test Case: 682 | Input/Output: [(76 73 100 -9) -9]
Test Case: 683 | Input/Output: [(66 93 73 -86) -86]
Test Case: 684 | Input/Output: [(80 84 -96 -44) -96]
Test Case: 685 | Input/Output: [(32 -19 -54 96) -54]
Test Case: 686 | Input/Output: [(-57 28 50 -58) -58]
Test Case: 687 | Input/Output: [(69 46 -14 76) -14]
Test Case: 688 | Input/Output: [(74 -99 53 -92) -99]
Test Case: 689 | Input/Output: [(-48 12 1 -39) -48]
Test Case: 690 | Input/Output: [(-68 -26 -20 44) -68]
Test Case: 691 | Input/Output: [(39 -56 -14 -4) -56]
Test Case: 692 | Input/Output: [(16 10 9 80) 9]
Test Case: 693 | Input/Output: [(-15 -62 -27 17) -62]
Test Case: 694 | Input/Output: [(-96 69 -44 -86) -96]
Test Case: 695 | Input/Output: [(52 -31 -85 -44) -85]
Test Case: 696 | Input/Output: [(-7 3 84 -57) -57]
Test Case: 697 | Input/Output: [(-46 15 3 -95) -95]
Test Case: 698 | Input/Output: [(-53 33 37 45) -53]
Test Case: 699 | Input/Output: [(-49 -22 90 39) -49]
Test Case: 700 | Input/Output: [(1 75 -3 -88) -88]
Test Case: 701 | Input/Output: [(-62 -43 -37 48) -62]
Test Case: 702 | Input/Output: [(7 53 83 71) 7]
Test Case: 703 | Input/Output: [(-42 -93 7 99) -93]
Test Case: 704 | Input/Output: [(-1 42 -85 -41) -85]
Test Case: 705 | Input/Output: [(-71 12 61 -32) -71]
Test Case: 706 | Input/Output: [(59 37 99 -9) -9]
Test Case: 707 | Input/Output: [(24 32 51 -24) -24]
Test Case: 708 | Input/Output: [(31 -45 -72 -63) -72]
Test Case: 709 | Input/Output: [(-48 32 68 -64) -64]
Test Case: 710 | Input/Output: [(15 -70 96 -19) -70]
Test Case: 711 | Input/Output: [(-56 47 -97 -45) -97]
Test Case: 712 | Input/Output: [(-54 79 23 -91) -91]
Test Case: 713 | Input/Output: [(12 14 82 -59) -59]
Test Case: 714 | Input/Output: [(94 3 22 38) 3]
Test Case: 715 | Input/Output: [(86 13 -24 45) -24]
Test Case: 716 | Input/Output: [(-47 0 -87 15) -87]
Test Case: 717 | Input/Output: [(24 -24 -22 74) -24]
Test Case: 718 | Input/Output: [(96 -34 -66 71) -66]
Test Case: 719 | Input/Output: [(47 -2 66 22) -2]
Test Case: 720 | Input/Output: [(77 4 -93 -49) -93]
Test Case: 721 | Input/Output: [(-57 81 16 76) -57]
Test Case: 722 | Input/Output: [(-53 97 -73 -93) -93]
Test Case: 723 | Input/Output: [(89 26 8 40) 8]
Test Case: 724 | Input/Output: [(76 19 92 -74) -74]
Test Case: 725 | Input/Output: [(-38 -6 -46 -11) -46]
Test Case: 726 | Input/Output: [(89 94 -44 -85) -85]
Test Case: 727 | Input/Output: [(89 52 -91 -89) -91]
Test Case: 728 | Input/Output: [(14 -55 -72 33) -72]
Test Case: 729 | Input/Output: [(-46 -45 -93 19) -93]
Test Case: 730 | Input/Output: [(-72 16 59 56) -72]
Test Case: 731 | Input/Output: [(-2 -48 75 -1) -48]
Test Case: 732 | Input/Output: [(97 -39 -100 69) -100]
Test Case: 733 | Input/Output: [(-39 -33 -71 48) -71]
Test Case: 734 | Input/Output: [(-35 20 -44 5) -44]
Test Case: 735 | Input/Output: [(-7 98 -95 -53) -95]
Test Case: 736 | Input/Output: [(-10 24 -81 97) -81]
Test Case: 737 | Input/Output: [(76 18 -21 -68) -68]
Test Case: 738 | Input/Output: [(-70 44 9 9) -70]
Test Case: 739 | Input/Output: [(74 -37 -32 76) -37]
Test Case: 740 | Input/Output: [(18 90 45 14) 14]
Test Case: 741 | Input/Output: [(41 38 -70 5) -70]
Test Case: 742 | Input/Output: [(-30 -41 73 -2) -41]
Test Case: 743 | Input/Output: [(-47 -26 -95 -74) -95]
Test Case: 744 | Input/Output: [(46 21 -100 -64) -100]
Test Case: 745 | Input/Output: [(-58 -25 -67 -72) -72]
Test Case: 746 | Input/Output: [(82 -35 -56 25) -56]
Test Case: 747 | Input/Output: [(-33 -90 -39 -43) -90]
Test Case: 748 | Input/Output: [(-74 -87 -57 27) -87]
Test Case: 749 | Input/Output: [(97 79 -43 74) -43]
Test Case: 750 | Input/Output: [(42 58 41 90) 41]
Test Case: 751 | Input/Output: [(83 88 -12 -1) -12]
Test Case: 752 | Input/Output: [(-20 53 -75 -86) -86]
Test Case: 753 | Input/Output: [(27 -86 36 84) -86]
Test Case: 754 | Input/Output: [(-29 -82 87 84) -82]
Test Case: 755 | Input/Output: [(-24 -90 -67 43) -90]
Test Case: 756 | Input/Output: [(93 -41 57 12) -41]
Test Case: 757 | Input/Output: [(8 -39 52 70) -39]
Test Case: 758 | Input/Output: [(-92 -12 -49 71) -92]
Test Case: 759 | Input/Output: [(88 44 -75 -60) -75]
Test Case: 760 | Input/Output: [(2 48 86 87) 2]
Test Case: 761 | Input/Output: [(-27 -23 -30 -91) -91]
Test Case: 762 | Input/Output: [(75 70 -54 31) -54]
Test Case: 763 | Input/Output: [(98 -67 50 -5) -67]
Test Case: 764 | Input/Output: [(64 -75 1 -74) -75]
Test Case: 765 | Input/Output: [(-54 -15 -26 62) -54]
Test Case: 766 | Input/Output: [(68 -90 64 -57) -90]
Test Case: 767 | Input/Output: [(1 13 -49 -87) -87]
Test Case: 768 | Input/Output: [(-22 -81 -66 -58) -81]
Test Case: 769 | Input/Output: [(-36 -80 -100 9) -100]
Test Case: 770 | Input/Output: [(-56 -98 28 -26) -98]
Test Case: 771 | Input/Output: [(96 -62 -79 -66) -79]
Test Case: 772 | Input/Output: [(80 70 -28 -15) -28]
Test Case: 773 | Input/Output: [(57 -15 13 -87) -87]
Test Case: 774 | Input/Output: [(-99 -47 -88 -3) -99]
Test Case: 775 | Input/Output: [(-28 3 14 42) -28]
Test Case: 776 | Input/Output: [(17 -17 38 10) -17]
Test Case: 777 | Input/Output: [(87 -74 18 -35) -74]
Test Case: 778 | Input/Output: [(-49 12 -27 -37) -49]
Test Case: 779 | Input/Output: [(-75 87 -69 -34) -75]
Test Case: 780 | Input/Output: [(-52 91 -88 -10) -88]
Test Case: 781 | Input/Output: [(-81 92 16 91) -81]
Test Case: 782 | Input/Output: [(-34 -21 9 -53) -53]
Test Case: 783 | Input/Output: [(-38 -77 52 -35) -77]
Test Case: 784 | Input/Output: [(17 4 31 37) 4]
Test Case: 785 | Input/Output: [(78 49 17 20) 17]
Test Case: 786 | Input/Output: [(-3 28 -7 -39) -39]
Test Case: 787 | Input/Output: [(-67 -27 -52 25) -67]
Test Case: 788 | Input/Output: [(-54 57 88 95) -54]
Test Case: 789 | Input/Output: [(-99 66 -2 -18) -99]
Test Case: 790 | Input/Output: [(36 -51 -27 51) -51]
Test Case: 791 | Input/Output: [(54 86 1 -11) -11]
Test Case: 792 | Input/Output: [(-15 27 -7 -75) -75]
Test Case: 793 | Input/Output: [(-25 -46 -100 62) -100]
Test Case: 794 | Input/Output: [(-41 6 44 42) -41]
Test Case: 795 | Input/Output: [(-13 -49 -8 -38) -49]
Test Case: 796 | Input/Output: [(-92 -69 23 42) -92]
Test Case: 797 | Input/Output: [(51 -89 76 2) -89]
Test Case: 798 | Input/Output: [(92 70 31 25) 25]
Test Case: 799 | Input/Output: [(-3 -21 -27 92) -27]
Test Case: 800 | Input/Output: [(-4 27 93 -75) -75]
Test Case: 801 | Input/Output: [(92 -47 -27 -88) -88]
Test Case: 802 | Input/Output: [(-1 51 -90 -10) -90]
Test Case: 803 | Input/Output: [(59 16 62 -91) -91]
Test Case: 804 | Input/Output: [(26 -45 85 59) -45]
Test Case: 805 | Input/Output: [(58 -51 46 -64) -64]
Test Case: 806 | Input/Output: [(-75 -28 -4 -69) -75]
Test Case: 807 | Input/Output: [(63 -81 78 83) -81]
Test Case: 808 | Input/Output: [(-11 54 -44 -82) -82]
Test Case: 809 | Input/Output: [(48 -41 81 -98) -98]
Test Case: 810 | Input/Output: [(-27 -69 64 91) -69]
Test Case: 811 | Input/Output: [(-21 -12 -88 60) -88]
Test Case: 812 | Input/Output: [(27 76 -94 6) -94]
Test Case: 813 | Input/Output: [(24 91 -65 41) -65]
Test Case: 814 | Input/Output: [(4 99 -50 -24) -50]
Test Case: 815 | Input/Output: [(-5 -96 20 -74) -96]
Test Case: 816 | Input/Output: [(-37 74 4 -57) -57]
Test Case: 817 | Input/Output: [(4 -2 79 -64) -64]
Test Case: 818 | Input/Output: [(15 -99 -44 -47) -99]
Test Case: 819 | Input/Output: [(57 -50 -97 -86) -97]
Test Case: 820 | Input/Output: [(-22 -77 -22 21) -77]
Test Case: 821 | Input/Output: [(19 -48 -3 87) -48]
Test Case: 822 | Input/Output: [(-22 65 -20 -64) -64]
Test Case: 823 | Input/Output: [(18 -54 52 -28) -54]
Test Case: 824 | Input/Output: [(54 -92 -26 -31) -92]
Test Case: 825 | Input/Output: [(-40 -83 97 20) -83]
Test Case: 826 | Input/Output: [(-100 -85 48 62) -100]
Test Case: 827 | Input/Output: [(-97 69 -96 44) -97]
Test Case: 828 | Input/Output: [(14 24 82 -42) -42]
Test Case: 829 | Input/Output: [(-73 80 -88 16) -88]
Test Case: 830 | Input/Output: [(31 -93 18 -28) -93]
Test Case: 831 | Input/Output: [(82 -70 -78 97) -78]
Test Case: 832 | Input/Output: [(-70 8 -93 24) -93]
Test Case: 833 | Input/Output: [(69 42 58 91) 42]
Test Case: 834 | Input/Output: [(-47 -94 36 22) -94]
Test Case: 835 | Input/Output: [(-47 80 -61 30) -61]
Test Case: 836 | Input/Output: [(69 -53 -50 -85) -85]
Test Case: 837 | Input/Output: [(56 -55 -70 -60) -70]
Test Case: 838 | Input/Output: [(-85 45 74 -9) -85]
Test Case: 839 | Input/Output: [(84 -91 -69 47) -91]
Test Case: 840 | Input/Output: [(64 94 -28 -85) -85]
Test Case: 841 | Input/Output: [(-49 -60 -57 -15) -60]
Test Case: 842 | Input/Output: [(40 78 -86 -4) -86]
Test Case: 843 | Input/Output: [(3 0 -62 -57) -62]
Test Case: 844 | Input/Output: [(-11 -17 4 -81) -81]
Test Case: 845 | Input/Output: [(91 -26 -2 -85) -85]
Test Case: 846 | Input/Output: [(-94 -80 -100 -42) -100]
Test Case: 847 | Input/Output: [(-70 -47 88 74) -70]
Test Case: 848 | Input/Output: [(-76 -98 -78 29) -98]
Test Case: 849 | Input/Output: [(15 -98 98 -27) -98]
Test Case: 850 | Input/Output: [(6 -75 0 31) -75]
Test Case: 851 | Input/Output: [(43 -77 39 -5) -77]
Test Case: 852 | Input/Output: [(-55 -26 23 58) -55]
Test Case: 853 | Input/Output: [(-40 73 42 44) -40]
Test Case: 854 | Input/Output: [(85 -81 -30 -64) -81]
Test Case: 855 | Input/Output: [(99 74 76 44) 44]
Test Case: 856 | Input/Output: [(48 67 51 44) 44]
Test Case: 857 | Input/Output: [(86 -89 -42 -80) -89]
Test Case: 858 | Input/Output: [(-16 -18 -35 94) -35]
Test Case: 859 | Input/Output: [(62 -85 35 62) -85]
Test Case: 860 | Input/Output: [(-71 -42 32 -92) -92]
Test Case: 861 | Input/Output: [(-69 63 -68 -88) -88]
Test Case: 862 | Input/Output: [(25 -72 -99 66) -99]
Test Case: 863 | Input/Output: [(-70 -86 69 52) -86]
Test Case: 864 | Input/Output: [(28 2 100 -90) -90]
Test Case: 865 | Input/Output: [(57 -55 33 -75) -75]
Test Case: 866 | Input/Output: [(-63 89 -38 -5) -63]
Test Case: 867 | Input/Output: [(8 -90 72 34) -90]
Test Case: 868 | Input/Output: [(-100 68 -37 -33) -100]
Test Case: 869 | Input/Output: [(-61 -33 21 -40) -61]
Test Case: 870 | Input/Output: [(-71 -81 36 39) -81]
Test Case: 871 | Input/Output: [(26 -48 -73 11) -73]
Test Case: 872 | Input/Output: [(77 44 -90 97) -90]
Test Case: 873 | Input/Output: [(-94 -75 -98 -66) -98]
Test Case: 874 | Input/Output: [(33 -31 64 73) -31]
Test Case: 875 | Input/Output: [(1 -86 -53 -3) -86]
Test Case: 876 | Input/Output: [(34 94 58 -98) -98]
Test Case: 877 | Input/Output: [(92 84 -31 -8) -31]
Test Case: 878 | Input/Output: [(31 0 -67 29) -67]
Test Case: 879 | Input/Output: [(-21 -98 -29 -94) -98]
Test Case: 880 | Input/Output: [(-5 75 0 17) -5]
Test Case: 881 | Input/Output: [(-25 46 -90 -17) -90]
Test Case: 882 | Input/Output: [(-82 -53 17 91) -82]
Test Case: 883 | Input/Output: [(-21 -69 21 -68) -69]
Test Case: 884 | Input/Output: [(56 80 30 95) 30]
Test Case: 885 | Input/Output: [(-74 -78 51 27) -78]
Test Case: 886 | Input/Output: [(99 23 64 -77) -77]
Test Case: 887 | Input/Output: [(99 -72 59 -7) -72]
Test Case: 888 | Input/Output: [(71 -33 -84 -39) -84]
Test Case: 889 | Input/Output: [(-92 12 -66 55) -92]
Test Case: 890 | Input/Output: [(95 -47 -6 46) -47]
Test Case: 891 | Input/Output: [(-35 -2 67 -5) -35]
Test Case: 892 | Input/Output: [(32 -79 -94 25) -94]
Test Case: 893 | Input/Output: [(-64 -50 -91 77) -91]
Test Case: 894 | Input/Output: [(99 -5 -77 42) -77]
Test Case: 895 | Input/Output: [(25 -76 -34 -13) -76]
Test Case: 896 | Input/Output: [(69 -79 -74 66) -79]
Test Case: 897 | Input/Output: [(91 42 -49 -74) -74]
Test Case: 898 | Input/Output: [(-26 -61 88 -42) -61]
Test Case: 899 | Input/Output: [(56 -91 -17 2) -91]
Test Case: 900 | Input/Output: [(-11 -24 25 47) -24]
Test Case: 901 | Input/Output: [(-81 0 -48 -65) -81]
Test Case: 902 | Input/Output: [(-7 -15 37 16) -15]
Test Case: 903 | Input/Output: [(-79 -47 38 94) -79]
Test Case: 904 | Input/Output: [(-68 49 57 -64) -68]
Test Case: 905 | Input/Output: [(-23 -37 100 -46) -46]
Test Case: 906 | Input/Output: [(-16 23 -85 29) -85]
Test Case: 907 | Input/Output: [(-54 -90 -20 37) -90]
Test Case: 908 | Input/Output: [(-48 23 -94 -90) -94]
Test Case: 909 | Input/Output: [(67 21 -57 -61) -61]
Test Case: 910 | Input/Output: [(67 -10 92 81) -10]
Test Case: 911 | Input/Output: [(93 48 -81 68) -81]
Test Case: 912 | Input/Output: [(52 -8 -87 5) -87]
Test Case: 913 | Input/Output: [(-61 0 67 -91) -91]
Test Case: 914 | Input/Output: [(-58 -51 -31 -49) -58]
Test Case: 915 | Input/Output: [(81 73 -58 93) -58]
Test Case: 916 | Input/Output: [(57 53 48 19) 19]
Test Case: 917 | Input/Output: [(-16 -11 -90 46) -90]
Test Case: 918 | Input/Output: [(-12 -63 -65 -12) -65]
Test Case: 919 | Input/Output: [(-81 22 98 64) -81]
Test Case: 920 | Input/Output: [(-23 -59 80 58) -59]
Test Case: 921 | Input/Output: [(-26 59 -17 -11) -26]
Test Case: 922 | Input/Output: [(-72 -75 -10 -49) -75]
Test Case: 923 | Input/Output: [(9 -44 -4 52) -44]
Test Case: 924 | Input/Output: [(72 -31 -77 -80) -80]
Test Case: 925 | Input/Output: [(70 -4 24 40) -4]
Test Case: 926 | Input/Output: [(14 14 89 40) 14]
Test Case: 927 | Input/Output: [(-45 -64 -84 29) -84]
Test Case: 928 | Input/Output: [(85 4 -45 -60) -60]
Test Case: 929 | Input/Output: [(73 41 -84 -63) -84]
Test Case: 930 | Input/Output: [(-89 -77 97 -7) -89]
Test Case: 931 | Input/Output: [(-2 -54 -93 -34) -93]
Test Case: 932 | Input/Output: [(-97 -3 2 -89) -97]
Test Case: 933 | Input/Output: [(-25 -67 -6 -60) -67]
Test Case: 934 | Input/Output: [(-80 -85 68 31) -85]
Test Case: 935 | Input/Output: [(-46 94 26 78) -46]
Test Case: 936 | Input/Output: [(20 -23 70 47) -23]
Test Case: 937 | Input/Output: [(92 89 96 46) 46]
Test Case: 938 | Input/Output: [(-85 -97 -81 -23) -97]
Test Case: 939 | Input/Output: [(39 -5 95 -90) -90]
Test Case: 940 | Input/Output: [(0 48 24 14) 0]
Test Case: 941 | Input/Output: [(-35 -75 99 -83) -83]
Test Case: 942 | Input/Output: [(46 -1 -98 1) -98]
Test Case: 943 | Input/Output: [(-49 46 9 -68) -68]
Test Case: 944 | Input/Output: [(-40 88 -47 -32) -47]
Test Case: 945 | Input/Output: [(-96 48 30 -22) -96]
Test Case: 946 | Input/Output: [(16 -46 10 -56) -56]
Test Case: 947 | Input/Output: [(47 51 64 -8) -8]
Test Case: 948 | Input/Output: [(84 -61 -62 40) -62]
Test Case: 949 | Input/Output: [(-17 85 73 -33) -33]
Test Case: 950 | Input/Output: [(-66 81 -79 -39) -79]
Test Case: 951 | Input/Output: [(-69 -3 49 65) -69]
Test Case: 952 | Input/Output: [(-23 -80 74 -86) -86]
Test Case: 953 | Input/Output: [(9 -10 37 70) -10]
Test Case: 954 | Input/Output: [(25 -48 75 31) -48]
Test Case: 955 | Input/Output: [(97 96 -39 61) -39]
Test Case: 956 | Input/Output: [(20 -6 97 -21) -21]
Test Case: 957 | Input/Output: [(-80 -43 46 0) -80]
Test Case: 958 | Input/Output: [(37 -72 -10 19) -72]
Test Case: 959 | Input/Output: [(39 70 -81 -43) -81]
Test Case: 960 | Input/Output: [(-39 -70 -45 73) -70]
Test Case: 961 | Input/Output: [(-59 46 82 -16) -59]
Test Case: 962 | Input/Output: [(85 53 -37 91) -37]
Test Case: 963 | Input/Output: [(26 -70 -5 98) -70]
Test Case: 964 | Input/Output: [(-67 -60 7 -73) -73]
Test Case: 965 | Input/Output: [(-16 62 -22 30) -22]
Test Case: 966 | Input/Output: [(-50 -100 -37 20) -100]
Test Case: 967 | Input/Output: [(0 82 -1 -96) -96]
Test Case: 968 | Input/Output: [(-96 -23 -56 -67) -96]
Test Case: 969 | Input/Output: [(-5 -4 26 -89) -89]
Test Case: 970 | Input/Output: [(50 -5 29 87) -5]
Test Case: 971 | Input/Output: [(-19 63 -19 -1) -19]
Test Case: 972 | Input/Output: [(-12 -7 51 -70) -70]
Test Case: 973 | Input/Output: [(-81 -2 46 19) -81]
Test Case: 974 | Input/Output: [(16 70 -27 41) -27]
Test Case: 975 | Input/Output: [(-90 -80 -39 44) -90]
Test Case: 976 | Input/Output: [(2 -16 -91 93) -91]
Test Case: 977 | Input/Output: [(34 -24 -8 49) -24]
Test Case: 978 | Input/Output: [(56 -2 -96 76) -96]
Test Case: 979 | Input/Output: [(70 -64 0 -92) -92]
Test Case: 980 | Input/Output: [(91 57 68 -78) -78]
Test Case: 981 | Input/Output: [(91 16 87 -52) -52]
Test Case: 982 | Input/Output: [(40 62 -13 -74) -74]
Test Case: 983 | Input/Output: [(-28 54 76 93) -28]
Test Case: 984 | Input/Output: [(-98 -67 -26 -11) -98]
Test Case: 985 | Input/Output: [(-47 -79 71 100) -79]
Test Case: 986 | Input/Output: [(-11 -93 -64 -28) -93]
Test Case: 987 | Input/Output: [(89 87 54 79) 54]
Test Case: 988 | Input/Output: [(-100 -51 -30 13) -100]
Test Case: 989 | Input/Output: [(-14 -47 -13 -7) -47]
Test Case: 990 | Input/Output: [(-34 -59 -17 -60) -60]
Test Case: 991 | Input/Output: [(27 77 77 20) 20]
Test Case: 992 | Input/Output: [(4 -54 20 35) -54]
Test Case: 993 | Input/Output: [(93 68 78 -56) -56]
Test Case: 994 | Input/Output: [(3 3 -85 -78) -85]
Test Case: 995 | Input/Output: [(-2 3 25 18) -2]
Test Case: 996 | Input/Output: [(-97 -49 -62 -58) -97]
Test Case: 997 | Input/Output: [(-18 56 -30 -64) -64]
Test Case: 998 | Input/Output: [(-63 -74 -95 -91) -95]
Test Case: 999 | Input/Output: [(43 -86 82 -61) -86]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -36 -108 -66 61 101 -11 -83 116 92 -73 85 51 2 -46 109 -97
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[26 46 46 46] 26] [[-4 -4 -2 -4] -4] [[-65 -52 -65 -65] -65] [[65 65 65 -93] -93] [[48 -69 -69 -69] -69] [[100 100 100 -31] -31] [[91 -24 91 91] -24] [[48 48 -90 48] -90] [[15 15 15 -78] -78] [[-84 -84 42 -84] -84] [(-80 -80 -80 -80) -80] [(40 40 40 40) 40] [(-26 -26 -26 -26) -26] [(13 13 13 13) 13] [(-87 -87 -87 -87) -87] [(11 57 20 20) 11] [(14 68 25 0) 0] [(39 96 10 48) 10] [(86 77 94 97) 77] [(62 18 14 84) 14] [(58 84 4 38) 4] [(62 92 62 56) 56] [(75 100 22 29) 22] [(35 94 9 83) 9] [(90 0 64 29) 0] [(1 67 44 7) 1] [(47 58 78 57) 47] [(8 11 42 27) 8] [(95 51 84 43) 43] [(79 65 24 85) 24] [(31 85 41 58) 31] [(2 92 44 26) 2] [(46 44 39 66) 39] [(18 91 4 73) 4] [(41 12 60 59) 12] [(24 -87 15 56) -87] [(-74 97 -3 -95) -95] [(-9 -28 -91 88) -91] [(-56 26 -53 -72) -72] [(-70 -27 -75 -93) -93] [(-62 24 12 94) -62] [(62 -5 -82 -4) -82] [(-66 42 24 -66) -66] [(45 -65 -66 32) -66] [(98 100 20 -42) -42] [(-78 -96 -9 41) -96] [(-50 96 -41 53) -50] [(11 41 69 97) 11] [(22 19 94 93) 19] [(-69 -40 47 27) -69] [(63 -90 -97 99) -97] [(12 -79 57 66) -79] [(-13 66 70 -22) -22] [(34 99 -56 -72) -72] [(97 73 25 77) 25] [(78 -17 -20 -49) -49] [(85 58 88 -17) -17] [(-76 -40 77 22) -76] [(-70 -44 -2 22) -70] [(83 -1 -89 -57) -89] [(-59 -93 87 29) -93] [(-57 82 -52 -83) -83] [(68 -66 -89 -72) -89] [(-32 2 38 -70) -70] [(-6 57 -69 84) -69] [(98 27 -58 -65) -65] [(-21 -3 -53 -34) -53] [(-26 95 71 1) -26] [(27 -76 96 16) -76] [(40 -11 11 -25) -25] [(11 -85 -14 45) -85] [(-96 96 54 79) -96] [(69 35 -93 -56) -93] [(-61 -14 -93 23) -93] [(-13 90 19 -15) -15] [(85 -41 -50 -97) -97] [(85 2 93 -15) -15] [(66 6 42 66) 6] [(-70 -66 -98 51) -98] [(45 65 12 -22) -22] [(46 65 -38 -78) -78] [(11 80 -3 59) -3] [(-56 -14 -89 -80) -89] [(-66 79 -2 17) -66] [(14 8 -2 12) -2] [(-73 -77 -61 -39) -77] [(60 99 46 13) 13] [(64 37 -37 -44) -44] [(81 55 56 -78) -78] [(71 -38 -80 27) -80] [(-27 -18 11 -55) -55] [(1 -1 -10 -77) -77] [(-4 -69 63 -87) -87] [(44 97 -75 -11) -75] [(-15 35 -64 -7) -64])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -24                 | Program output: 91                 
Correct output: -90                 | Program output: 48                 
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 48                 
Correct output: 77                  | Program output: 97                 
Correct output: 14                  | Program output: 84                 
Correct output: 4                   | Program output: 38                 
Correct output: 56                  | Program output: 56                 
Correct output: 22                  | Program output: 29                 
Correct output: 9                   | Program output: 83                 
Correct output: 0                   | Program output: 29                 
Correct output: 1                   | Program output: 7                  
Correct output: 47                  | Program output: 57                 
Correct output: 8                   | Program output: 27                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 85                 
Correct output: 31                  | Program output: 58                 
Correct output: 2                   | Program output: 26                 
Correct output: 39                  | Program output: 66                 
Correct output: 4                   | Program output: 73                 
Correct output: 12                  | Program output: 59                 
Correct output: -87                 | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 88                 
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 94                 
Correct output: -82                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -66                 | Program output: 32                 
Correct output: -42                 | Program output: -42                
Correct output: -96                 | Program output: 41                 
Correct output: -50                 | Program output: 53                 
Correct output: 11                  | Program output: 97                 
Correct output: 19                  | Program output: 93                 
Correct output: -69                 | Program output: 27                 
Correct output: -97                 | Program output: 99                 
Correct output: -79                 | Program output: 66                 
Correct output: -22                 | Program output: -22                
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 77                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 22                 
Correct output: -70                 | Program output: 22                 
Correct output: -89                 | Program output: -57                
Correct output: -93                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -72                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 84                 
Correct output: -65                 | Program output: -65                
Correct output: -53                 | Program output: -34                
Correct output: -26                 | Program output: 1                  
Correct output: -76                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -85                 | Program output: 45                 
Correct output: -96                 | Program output: 79                 
Correct output: -93                 | Program output: -56                
Correct output: -93                 | Program output: 23                 
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: 6                   | Program output: 66                 
Correct output: -98                 | Program output: 51                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -3                  | Program output: 59                 
Correct output: -89                 | Program output: -80                
Correct output: -66                 | Program output: 17                 
Correct output: -2                  | Program output: 12                 
Correct output: -77                 | Program output: -39                
Correct output: 13                  | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -11                
Correct output: -64                 | Program output: -7                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction -61} {:close 1, :instruction -12} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_3} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_mult boolean_eq integer_dup_items exec_dup_times (boolean_shove) integer_sub integer_add integer_lt print_integer integer_div integer_inc -61 -12 exec_yank integer_mod boolean_xor boolean_pop boolean_invert_second_then_and exec_swap (integer_add integer_add boolean_shove boolean_and print_integer) (exec_shove () boolean_invert_first_then_and tagged_3 exec_do*times () in4 integer_div) integer_mod)
Lexicase best errors: [0 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction -61} {:close 1, :instruction -12} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_3} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_mult boolean_eq integer_dup_items exec_dup_times (boolean_shove) integer_sub integer_add integer_lt print_integer integer_div integer_inc -61 -12 exec_yank integer_mod boolean_xor boolean_pop boolean_invert_second_then_and exec_swap (integer_add integer_add boolean_shove boolean_and print_integer) (exec_shove () boolean_invert_first_then_and tagged_3 exec_do*times () in4 integer_div) integer_mod)
Zero cases best errors: [0 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 3 3 3 3 15 3 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 3 3 3 3 3 15 3 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction 2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Best program: (boolean_xor integer_eq boolean_stackdepth exec_if (exec_do*range (boolean_empty boolean_dup_times) boolean_stackdepth boolean_swap integer_gt 2 exec_yank exec_while (boolean_rot integer_eq integer_shove integer_shove boolean_eq boolean_xor integer_stackdepth) boolean_eq exec_dup_times (in1 integer_yankdup) exec_s_when_autoconstructing (boolean_yank in4 print_integer exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_stackdepth) exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (exec_y_when_autoconstructing () boolean_invert_first_then_and exec_swap (integer_dup_times exec_do*while () integer_yank integer_rot) (exec_pop (exec_yank) boolean_invert_first_then_and) boolean_pop exec_k_when_autoconstructing (boolean_flush boolean_not print_boolean) (boolean_invert_second_then_and exec_if () (exec_when (boolean_eq) integer_yank) exec_when (exec_yankdup boolean_and exec_rot (boolean_shove) (in2 boolean_empty) (integer_mult integer_lte boolean_dup integer_gt integer_swap) boolean_frominteger) boolean_eq exec_y (integer_dup_items integer_lt boolean_rot)) boolean_invert_second_then_and integer_shove) (integer_shove print_exec (integer_inc) integer_mult) print_exec (integer_div) integer_rot boolean_flush)))) () ()) ())
Errors: [0 0 1 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 87
Size: 121
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.997 0.997 0.997 0.997 0.985 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.137
Average program size in population (points): 69.086
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462531
--- Timings ---
Current time: 1559594026947 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.8 seconds, 33.3%
Fitness Testing:      1.4 seconds, 62.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -52                
Correct output: -93                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: 100                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: 48                 
Correct output: -78                 | Program output: 15                 
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 57                 
Correct output: 0                   | Program output: 68                 
Correct output: 10                  | Program output: 96                 
Correct output: 77                  | Program output: 77                 
Correct output: 14                  | Program output: 18                 
Correct output: 4                   | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 22                  | Program output: 100                
Correct output: 9                   | Program output: 94                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 67                 
Correct output: 47                  | Program output: 58                 
Correct output: 8                   | Program output: 11                 
Correct output: 43                  | Program output: 51                 
Correct output: 24                  | Program output: 65                 
Correct output: 31                  | Program output: 85                 
Correct output: 2                   | Program output: 92                 
Correct output: 39                  | Program output: 44                 
Correct output: 4                   | Program output: 91                 
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: 97                 
Correct output: -91                 | Program output: -28                
Correct output: -72                 | Program output: 26                 
Correct output: -93                 | Program output: -27                
Correct output: -62                 | Program output: 24                 
Correct output: -82                 | Program output: -5                 
Correct output: -66                 | Program output: 42                 
Correct output: -66                 | Program output: -65                
Correct output: -42                 | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 96                 
Correct output: 11                  | Program output: 41                 
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -40                
Correct output: -97                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -22                 | Program output: 66                 
Correct output: -72                 | Program output: 99                 
Correct output: 25                  | Program output: 73                 
Correct output: -49                 | Program output: -17                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -40                
Correct output: -70                 | Program output: -44                
Correct output: -89                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: 82                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: 2                  
Correct output: -69                 | Program output: 57                 
Correct output: -65                 | Program output: 27                 
Correct output: -53                 | Program output: -3                 
Correct output: -26                 | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -25                 | Program output: -11                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: 96                 
Correct output: -93                 | Program output: 35                 
Correct output: -93                 | Program output: -14                
Correct output: -15                 | Program output: 90                 
Correct output: -97                 | Program output: -41                
Correct output: -15                 | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -66                
Correct output: -22                 | Program output: 65                 
Correct output: -78                 | Program output: 65                 
Correct output: -3                  | Program output: 80                 
Correct output: -89                 | Program output: -14                
Correct output: -66                 | Program output: 79                 
Correct output: -2                  | Program output: 8                  
Correct output: -77                 | Program output: -77                
Correct output: 13                  | Program output: 99                 
Correct output: -44                 | Program output: 37                 
Correct output: -78                 | Program output: 55                 
Correct output: -80                 | Program output: -38                
Correct output: -55                 | Program output: -18                
Correct output: -77                 | Program output: -1                 
Correct output: -87                 | Program output: -69                
Correct output: -75                 | Program output: 97                 
Correct output: -64                 | Program output: 35                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot})
Lexicase best program: (in2 exec_pop () in2 print_integer boolean_frominteger exec_eq boolean_dup boolean_swap boolean_dup_times integer_swap exec_dup_times (integer_rot))
Lexicase best errors: [0 1 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot})
Zero cases best program: (in2 exec_pop () in2 print_integer boolean_frominteger exec_eq boolean_dup boolean_swap boolean_dup_times integer_swap exec_dup_times (integer_rot))
Zero cases best errors: [0 1 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 243 108 69 213 70 242 246 106 105)
Population mean number of elite cases: 1.51
Count of perfect (error zero) individuals by case: (105 243 108 69 213 70 242 246 106 105)
Population mean number of perfect (error zero) cases: 1.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times})
Best program: (exec_do*count (in2 integer_mult boolean_pop print_integer integer_dec integer_yank exec_noop boolean_flush integer_dec exec_swap (exec_do*times ()) ()))
Errors: [0 1 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 8.493
Median total errors in population: 9
Error averages by case: (0.895 0.757 0.892 0.931 0.787 0.93 0.758 0.754 0.894 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.493
Average program size in population (points): 58.567
Average percent parens in population: 0.268
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 972329
--- Timings ---
Current time: 1559594028972 milliseconds
Total Time:           6.4 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         1.8 seconds, 27.4%
Fitness Testing:      2.2 seconds, 34.8%
Report:               2.3 seconds, 36.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -24                 | Program output: 91                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 77                  | Program output: 94                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 56                  | Program output: 56                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 29                 
Correct output: 1                   | Program output: 7                  
Correct output: 47                  | Program output: 57                 
Correct output: 8                   | Program output: 27                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 41                 
Correct output: 2                   | Program output: 26                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 59                 
Correct output: -87                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -96                 | Program output: -9                 
Correct output: -50                 | Program output: -41                
Correct output: 11                  | Program output: 69                 
Correct output: 19                  | Program output: 93                 
Correct output: -69                 | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -79                 | Program output: 57                 
Correct output: -22                 | Program output: -22                
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 22                 
Correct output: -70                 | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -65                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: 1                  
Correct output: -76                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -85                 | Program output: -14                
Correct output: -96                 | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: 6                   | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -3                  | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -77                 | Program output: -61                
Correct output: 13                  | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_eq boolean_stackdepth exec_if (exec_do*range (integer_swap boolean_empty integer_div boolean_dup_times) boolean_stackdepth exec_do*range (exec_yank exec_while (boolean_rot integer_eq integer_shove integer_shove boolean_eq boolean_xor integer_stackdepth) boolean_eq exec_dup_times (in1 integer_yankdup) exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times exec_do*while () integer_yank integer_rot) (exec_pop (integer_dup_times exec_yank) boolean_invert_first_then_and) boolean_pop exec_k_when_autoconstructing (boolean_not print_boolean) (boolean_invert_second_then_and exec_if () (boolean_pop exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and integer_mod) exec_rot (boolean_shove) (integer_mult integer_lte boolean_dup integer_gt in3 exec_y_when_autoconstructing () boolean_frominteger) (boolean_eq exec_y (integer_lt boolean_rot)) boolean_invert_second_then_and integer_shove) integer_shove print_exec (integer_inc) integer_mult) print_exec (integer_rot boolean_flush)) ()))) ())) () ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 121
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_eq boolean_stackdepth exec_if (exec_do*range (integer_swap boolean_empty integer_div boolean_dup_times) boolean_stackdepth exec_do*range (exec_yank exec_while (boolean_rot integer_eq integer_shove integer_shove boolean_eq boolean_xor integer_stackdepth) boolean_eq exec_dup_times (in1 integer_yankdup) exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times exec_do*while () integer_yank integer_rot) (exec_pop (integer_dup_times exec_yank) boolean_invert_first_then_and) boolean_pop exec_k_when_autoconstructing (boolean_not print_boolean) (boolean_invert_second_then_and exec_if () (boolean_pop exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and integer_mod) exec_rot (boolean_shove) (integer_mult integer_lte boolean_dup integer_gt in3 exec_y_when_autoconstructing () boolean_frominteger) (boolean_eq exec_y (integer_lt boolean_rot)) boolean_invert_second_then_and integer_shove) integer_shove print_exec (integer_inc) integer_mult) print_exec (integer_rot boolean_flush)) ()))) ())) () ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 121
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 117 111 217 214 216 214 60 314 314)
Population mean number of elite cases: 1.91
Count of perfect (error zero) individuals by case: (136 117 111 217 214 216 214 60 314 314)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_137} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Best program: (integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*range (integer_swap boolean_empty boolean_dup_times) boolean_swap integer_gt exec_yank exec_while (boolean_rot integer_fromboolean integer_eq integer_shove integer_shove boolean_eq boolean_xor integer_stackdepth) boolean_eq exec_dup_times (integer_yankdup) boolean_yank in3) () in4 boolean_flush integer_fromboolean integer_min boolean_dup_times exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (exec_y_when_autoconstructing () boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (exec_pop (boolean_invert_first_then_and) boolean_pop boolean_flush boolean_not print_boolean) boolean_invert_second_then_and exec_if () (exec_when (integer_yank) exec_when (exec_yankdup boolean_and exec_rot (boolean_shove) (in2 boolean_pop) (boolean_empty) integer_mult integer_gte integer_lte boolean_dup integer_gt integer_swap) boolean_frominteger) exec_y (integer_lt boolean_rot)) boolean_invert_second_then_and integer_shove) integer_shove print_exec (tag_exec_137 () integer_inc) integer_mult) print_exec (integer_div) integer_rot boolean_flush))
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 87
Size: 115
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 8.087
Median total errors in population: 8
Error averages by case: (0.864 0.883 0.889 0.783 0.786 0.784 0.786 0.94 0.686 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.528
Average program size in population (points): 66.49
Average percent parens in population: 0.291
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1528262
--- Timings ---
Current time: 1559594032822 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.0 seconds, 33.9%
Fitness Testing:      3.2 seconds, 36.5%
Report:               2.5 seconds, 28.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -24                 | Program output: 91                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 77                  | Program output: 94                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 56                  | Program output: 56                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 29                 
Correct output: 1                   | Program output: 7                  
Correct output: 47                  | Program output: 57                 
Correct output: 8                   | Program output: 27                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 41                 
Correct output: 2                   | Program output: 26                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 59                 
Correct output: -87                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -96                 | Program output: -9                 
Correct output: -50                 | Program output: -41                
Correct output: 11                  | Program output: 69                 
Correct output: 19                  | Program output: 93                 
Correct output: -69                 | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -79                 | Program output: 57                 
Correct output: -22                 | Program output: -22                
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 22                 
Correct output: -70                 | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -65                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: 1                  
Correct output: -76                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -85                 | Program output: -14                
Correct output: -96                 | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: 6                   | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -3                  | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -77                 | Program output: -61                
Correct output: 13                  | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_eq boolean_stackdepth exec_if (exec_do*range (boolean_yankdup integer_swap integer_div boolean_dup_times) boolean_stackdepth exec_do*range (exec_yank exec_s_when_autoconstructing () (exec_while (boolean_rot integer_eq integer_shove integer_shove integer_max boolean_eq boolean_xor integer_stackdepth) exec_dup_times (in1 boolean_pop integer_yankdup) exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times exec_do*while () integer_yank integer_rot) (exec_pop (exec_stackdepth integer_dup_times exec_yank) boolean_invert_first_then_and) boolean_pop exec_k_when_autoconstructing (boolean_not print_boolean) (boolean_invert_second_then_and exec_if () (boolean_pop exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and exec_while (integer_mod) exec_rot (boolean_shove) (integer_mult integer_dup_items integer_lte boolean_dup integer_gt in3 exec_y_when_autoconstructing () boolean_frominteger) (boolean_eq exec_y (integer_lt boolean_rot)) boolean_invert_second_then_and integer_shove) integer_shove print_exec (integer_inc) integer_mult) integer_rot boolean_flush)) ()))) ())) () ()) ())) ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 128
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_eq boolean_stackdepth exec_if (exec_do*range (boolean_yankdup integer_swap integer_div boolean_dup_times) boolean_stackdepth exec_do*range (exec_yank exec_s_when_autoconstructing () (exec_while (boolean_rot integer_eq integer_shove integer_shove integer_max boolean_eq boolean_xor integer_stackdepth) exec_dup_times (in1 boolean_pop integer_yankdup) exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times exec_do*while () integer_yank integer_rot) (exec_pop (exec_stackdepth integer_dup_times exec_yank) boolean_invert_first_then_and) boolean_pop exec_k_when_autoconstructing (boolean_not print_boolean) (boolean_invert_second_then_and exec_if () (boolean_pop exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and exec_while (integer_mod) exec_rot (boolean_shove) (integer_mult integer_dup_items integer_lte boolean_dup integer_gt in3 exec_y_when_autoconstructing () boolean_frominteger) (boolean_eq exec_y (integer_lt boolean_rot)) boolean_invert_second_then_and integer_shove) integer_shove print_exec (integer_inc) integer_mult) integer_rot boolean_flush)) ()))) ())) () ()) ())) ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 128
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 188 190 461 188 53 186 461 185 266)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (262 188 190 461 188 53 186 461 185 266)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s})
Best program: (integer_eq exec_yank boolean_stackdepth exec_if (exec_do*range (integer_swap boolean_empty integer_div boolean_dup_times) boolean_stackdepth exec_do*range (exec_yank exec_while (integer_eq integer_shove boolean_eq boolean_xor integer_stackdepth) boolean_eq exec_dup_times (in1 integer_yankdup) exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer exec_y (exec_pop (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times exec_do*while () integer_yank integer_rot) (boolean_invert_first_then_and exec_pop (integer_dup_times exec_yank) boolean_invert_first_then_and) integer_dup_times boolean_pop integer_shove exec_k_when_autoconstructing (boolean_not print_boolean) (boolean_empty boolean_invert_second_then_and exec_if () (exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and exec_rot (boolean_shove) (print_integer integer_mult boolean_dup integer_gt in3 exec_y_when_autoconstructing () boolean_frominteger) (boolean_eq exec_y (integer_lt boolean_rot)) boolean_invert_second_then_and exec_yank integer_shove) integer_shove print_exec (integer_inc) integer_mult) print_exec (integer_rot boolean_flush exec_s () () ()))) ()))) ())) () ())) ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 87
Size: 126
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.56
Median total errors in population: 10
Error averages by case: (0.738 0.812 0.81 0.539 0.812 0.947 0.814 0.539 0.815 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.206
Average program size in population (points): 103.697
Average percent parens in population: 0.277
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2473384
--- Timings ---
Current time: 1559594038079 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         4.2 seconds, 31.8%
Fitness Testing:      4.9 seconds, 36.5%
Report:               4.1 seconds, 30.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -24                 | Program output: 91                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 77                  | Program output: 94                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 56                  | Program output: 56                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 29                 
Correct output: 1                   | Program output: 7                  
Correct output: 47                  | Program output: 57                 
Correct output: 8                   | Program output: 27                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 41                 
Correct output: 2                   | Program output: 26                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 59                 
Correct output: -87                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -96                 | Program output: -9                 
Correct output: -50                 | Program output: -41                
Correct output: 11                  | Program output: 69                 
Correct output: 19                  | Program output: 93                 
Correct output: -69                 | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -79                 | Program output: 57                 
Correct output: -22                 | Program output: -22                
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 22                 
Correct output: -70                 | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -65                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: 1                  
Correct output: -76                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -85                 | Program output: -14                
Correct output: -96                 | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: 6                   | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -3                  | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -77                 | Program output: -61                
Correct output: 13                  | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_eq boolean_stackdepth exec_do*range (integer_swap boolean_dup_times) exec_do*count () exec_do*range (boolean_or exec_yank integer_eq integer_shove exec_do*range () integer_shove exec_empty) boolean_eq boolean_xor integer_stackdepth boolean_eq in1 integer_yankdup exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 boolean_pop) (integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer integer_min) (exec_y (integer_empty exec_while (exec_pop (boolean_eq exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times boolean_dup_times exec_do*while () integer_yank integer_div integer_rot) (exec_pop (integer_dup_times exec_yank) boolean_invert_first_then_and) exec_k_when_autoconstructing (print_boolean) (boolean_invert_second_then_and boolean_pop exec_k (exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and integer_mod) exec_rot (boolean_shove) (exec_do*range (integer_mult integer_lte boolean_empty in3 exec_y_when_autoconstructing () boolean_frominteger) boolean_eq boolean_empty integer_lt boolean_invert_second_then_and integer_shove integer_shove) (integer_shove print_exec (print_exec (integer_rot boolean_flush)))) ())) ())))))) ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_eq boolean_stackdepth exec_do*range (integer_swap boolean_dup_times) exec_do*count () exec_do*range (boolean_or exec_yank integer_eq integer_shove exec_do*range () integer_shove exec_empty) boolean_eq boolean_xor integer_stackdepth boolean_eq in1 integer_yankdup exec_s_when_autoconstructing (boolean_yank exec_pop () in4 in3 boolean_pop) (integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_swap print_integer integer_min) (exec_y (integer_empty exec_while (exec_pop (boolean_eq exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_swap (integer_dup_times boolean_dup_times exec_do*while () integer_yank integer_div integer_rot) (exec_pop (integer_dup_times exec_yank) boolean_invert_first_then_and) exec_k_when_autoconstructing (print_boolean) (boolean_invert_second_then_and boolean_pop exec_k (exec_when (integer_eq integer_yank) exec_when (exec_yankdup boolean_and integer_mod) exec_rot (boolean_shove) (exec_do*range (integer_mult integer_lte boolean_empty in3 exec_y_when_autoconstructing () boolean_frominteger) boolean_eq boolean_empty integer_lt boolean_invert_second_then_and integer_shove integer_shove) (integer_shove print_exec (print_exec (integer_rot boolean_flush)))) ())) ())))))) ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 276 274 93 141 197 334 441 334 2)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (2 276 274 93 141 197 334 441 334 2)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_137} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (integer_eq exec_yankdup exec_do*range (boolean_empty boolean_dup_times) integer_gt exec_yank exec_while (boolean_rot integer_fromboolean integer_eq integer_shove boolean_eq exec_do*times (integer_stackdepth) boolean_flush) boolean_eq exec_dup_times (integer_yankdup) boolean_yank in3 in4 integer_fromboolean integer_min boolean_dup_times exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer exec_y (boolean_empty) integer_empty exec_pop (exec_s_when_autoconstructing () (exec_y_when_autoconstructing () boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank boolean_invert_first_then_and integer_rot) (exec_pop (boolean_invert_first_then_and) boolean_pop boolean_flush boolean_not print_boolean) boolean_invert_second_then_and exec_if () (integer_yank) exec_when (exec_yankdup exec_rot (in2 integer_shove boolean_pop) (boolean_empty) (integer_mult integer_gte integer_lte boolean_dup boolean_frominteger) integer_eq) exec_y (integer_lt boolean_rot)) boolean_shove boolean_invert_second_then_and integer_shove) integer_shove print_exec (tag_exec_137 () integer_inc) integer_mult) print_exec (integer_div) integer_yankdup boolean_yank exec_do*times () integer_stackdepth exec_do*while ())
Errors: [1 0 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 84
Size: 112
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.906
Median total errors in population: 10
Error averages by case: (0.998 0.724 0.726 0.907 0.859 0.803 0.666 0.559 0.666 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.574
Average program size in population (points): 117.843
Average percent parens in population: 0.264
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3575488
--- Timings ---
Current time: 1559594041789 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         5.5 seconds, 29.4%
Fitness Testing:      6.5 seconds, 34.9%
Report:               6.5 seconds, 35.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 198
Test mean error for best: 0.19800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 77                  | Program output: 77                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 56                  | Program output: 56                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 7                  
Correct output: 47                  | Program output: 57                 
Correct output: 8                   | Program output: 11                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 41                 
Correct output: 2                   | Program output: 26                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -41                
Correct output: 11                  | Program output: 41                 
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -79                 | Program output: -79                
Correct output: -22                 | Program output: -22                
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -40                
Correct output: -70                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -65                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: -25                 | Program output: -25                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -3                  | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -77                 | Program output: -77                
Correct output: 13                  | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_137} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_gt boolean_rot integer_eq exec_yankdup integer_yank exec_if (exec_do*range (integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) (in4 integer_stackdepth boolean_flush exec_do*count (integer_fromboolean exec_do*range (integer_min boolean_dup_times integer_min exec_y (exec_k_when_autoconstructing (integer_div) (boolean_swap boolean_and print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 exec_y_when_autoconstructing () boolean_not integer_dup_times exec_dup_items integer_yank integer_rot) (integer_gte) boolean_flush exec_rot (boolean_not boolean_not print_boolean) (exec_if () (exec_when (boolean_frominteger integer_yank) exec_when (exec_yankdup boolean_and boolean_shove) in2 boolean_pop) integer_mult integer_gte integer_lte exec_empty boolean_dup integer_gt boolean_frominteger) (exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () integer_inc) integer_yank) integer_mult) integer_rot integer_div) integer_rot boolean_flush))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 120
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_137} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_gt boolean_rot integer_eq exec_yankdup integer_yank exec_if (exec_do*range (integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) (in4 integer_stackdepth boolean_flush exec_do*count (integer_fromboolean exec_do*range (integer_min boolean_dup_times integer_min exec_y (exec_k_when_autoconstructing (integer_div) (boolean_swap boolean_and print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 exec_y_when_autoconstructing () boolean_not integer_dup_times exec_dup_items integer_yank integer_rot) (integer_gte) boolean_flush exec_rot (boolean_not boolean_not print_boolean) (exec_if () (exec_when (boolean_frominteger integer_yank) exec_when (exec_yankdup boolean_and boolean_shove) in2 boolean_pop) integer_mult integer_gte integer_lte exec_empty boolean_dup integer_gt boolean_frominteger) (exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () integer_inc) integer_yank) integer_mult) integer_rot integer_div) integer_rot boolean_flush))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 120
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 158 282 289 163 252 157 253 93 284)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (275 158 282 289 163 252 157 253 93 284)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 1, :instruction tag_exec_137} {:close 1, :instruction exec_k} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush})
Best program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 93
Size: 120
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.794
Median total errors in population: 10
Error averages by case: (0.725 0.842 0.718 0.711 0.837 0.748 0.843 0.747 0.907 0.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.369
Average program size in population (points): 118.131
Average percent parens in population: 0.259
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4702906
--- Timings ---
Current time: 1559594045774 milliseconds
Total Time:          22.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         6.7 seconds, 30.2%
Fitness Testing:      8.0 seconds, 36.1%
Report:               7.4 seconds, 33.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 5
Successful program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 120


Auto-simplifying with starting size: 120
step: 0
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 500
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 1000
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 1500
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 2000
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 2500
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 3000
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 3500
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 4000
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 4500
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

step: 5000
program: (integer_gt integer_eq exec_yankdup boolean_stackdepth exec_if (exec_do*while (exec_do*range (exec_do*count () integer_swap boolean_empty boolean_swap exec_yank exec_while (integer_fromboolean integer_eq in2 integer_shove integer_shove boolean_eq boolean_yankdup boolean_invert_first_then_and boolean_xor boolean_eq integer_yankdup) boolean_yank in3)) in4 boolean_flush integer_fromboolean integer_min boolean_dup_times integer_min exec_y (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_div) (boolean_swap print_integer boolean_rot exec_y (integer_empty exec_pop (exec_s_when_autoconstructing () (in2 boolean_invert_first_then_and boolean_not integer_dup_times exec_do*while () exec_dup_items integer_yank integer_rot) (integer_gte) boolean_pop boolean_flush exec_pop () boolean_not boolean_not print_boolean) exec_if () (exec_when (boolean_frominteger exec_yankdup boolean_and boolean_shove) in2 boolean_pop) boolean_empty) integer_mult integer_gte integer_yank integer_lte boolean_dup boolean_frominteger) exec_y (exec_if (integer_lt boolean_rot) () boolean_stackdepth boolean_invert_second_then_and integer_gt integer_shove) integer_shove print_exec (tag_exec_137 () exec_k () (integer_inc) integer_yank) integer_mult) boolean_yank integer_rot integer_div) (integer_rot boolean_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 120

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 198
Test mean error for best: 0.19800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 26                  | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -80                 | Program output: -80                
Correct output: 40                  | Program output: 40                 
Correct output: -26                 | Program output: -26                
Correct output: 13                  | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 11                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 77                  | Program output: 77                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 56                  | Program output: 56                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 7                  
Correct output: 47                  | Program output: 57                 
Correct output: 8                   | Program output: 11                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 41                 
Correct output: 2                   | Program output: 26                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -41                
Correct output: 11                  | Program output: 41                 
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -79                 | Program output: -79                
Correct output: -22                 | Program output: -22                
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -40                
Correct output: -70                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -65                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -26                 | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: -25                 | Program output: -25                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: 54                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -15                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -3                  | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -77                 | Program output: -77                
Correct output: 13                  | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
;;******************************
