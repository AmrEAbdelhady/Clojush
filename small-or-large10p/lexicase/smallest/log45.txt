Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -13 -32 -32] -32] [[-71 -41 -71 -71] -71] [[93 93 93 55] 55] [[38 -25 -25 -25] -25] [[78 78 27 78] 27] [[-70 -70 -70 -5] -70] [[-51 -51 -28 -51] -51] [[-60 -60 95 -60] -60] [[-52 56 56 56] -52] [[91 91 98 91] 91] [(55 55 55 55) 55] [(-58 -58 -58 -58) -58] [(-62 -62 -62 -62) -62] [(-51 -51 -51 -51) -51] [(-35 -35 -35 -35) -35] [(91 96 70 28) 28] [(96 18 59 4) 4] [(7 49 39 31) 7] [(71 87 90 76) 71] [(64 23 42 44) 23] [(39 22 41 57) 22] [(64 35 45 78) 35] [(38 13 50 73) 13] [(77 58 72 20) 20] [(29 56 71 81) 29] [(34 5 36 46) 5] [(36 11 64 30) 11] [(33 51 42 34) 33] [(13 50 73 19) 13] [(78 54 73 71) 54] [(89 39 70 43) 39] [(84 99 77 56) 56] [(89 83 12 57) 12] [(21 12 27 65) 12] [(88 82 14 10) 10] [(-49 70 86 -93) -93] [(-71 18 -87 -77) -87] [(18 -63 76 6) -63] [(83 -6 -97 54) -97] [(58 -38 73 -78) -78] [(20 55 -40 -18) -40] [(-15 0 -75 85) -75] [(4 25 47 -61) -61] [(31 40 -51 26) -51] [(-21 41 -10 -75) -75] [(11 40 -9 -22) -22] [(-80 -50 -78 83) -80] [(51 54 -51 62) -51] [(-66 95 -73 -29) -73] [(-83 -39 -66 11) -83] [(71 14 69 -51) -51] [(85 -36 -16 73) -36] [(-49 -58 62 -56) -58] [(-53 -12 100 69) -53] [(-50 -90 83 73) -90] [(72 73 -37 75) -37] [(92 -65 -5 -76) -76] [(64 73 17 -52) -52] [(-22 83 -93 10) -93] [(-75 19 48 63) -75] [(-72 70 24 -47) -72] [(-53 83 -30 -49) -53] [(-22 -62 70 -43) -62] [(85 27 30 26) 26] [(-67 -2 -54 43) -67] [(-3 -95 50 -42) -95] [(-13 -11 85 86) -13] [(-100 99 -23 -63) -100] [(-46 -37 -41 -20) -46] [(-83 38 26 66) -83] [(-69 -89 17 -85) -89] [(89 -94 -70 54) -94] [(81 0 -89 60) -89] [(24 0 -20 -48) -48] [(46 46 -45 -77) -77] [(92 -9 53 -4) -9] [(82 -46 45 -97) -97] [(32 -1 18 -9) -9] [(17 -70 -6 -59) -70] [(3 -24 62 -26) -26] [(-60 67 14 -76) -76] [(-24 15 -19 -24) -24] [(-15 98 75 -62) -62] [(91 67 47 -39) -39] [(49 -23 -9 -85) -85] [(52 -43 34 29) -43] [(-34 56 51 -24) -34] [(31 88 44 -16) -16] [(-45 -92 -10 -94) -94] [(-46 -13 -16 17) -46] [(60 58 -9 90) -9] [(-84 60 91 94) -84] [(-45 1 9 87) -45] [(-17 82 39 -29) -29] [(-77 11 75 -51) -77])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-32 -13 -32 -32] -32]
Train Case:   6 | Input/Output: [[-71 -41 -71 -71] -71]
Train Case:   7 | Input/Output: [[93 93 93 55] 55]
Train Case:   8 | Input/Output: [[38 -25 -25 -25] -25]
Train Case:   9 | Input/Output: [[78 78 27 78] 27]
Train Case:  10 | Input/Output: [[-70 -70 -70 -5] -70]
Train Case:  11 | Input/Output: [[-51 -51 -28 -51] -51]
Train Case:  12 | Input/Output: [[-60 -60 95 -60] -60]
Train Case:  13 | Input/Output: [[-52 56 56 56] -52]
Train Case:  14 | Input/Output: [[91 91 98 91] 91]
Train Case:  15 | Input/Output: [(55 55 55 55) 55]
Train Case:  16 | Input/Output: [(-58 -58 -58 -58) -58]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-51 -51 -51 -51) -51]
Train Case:  19 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  20 | Input/Output: [(91 96 70 28) 28]
Train Case:  21 | Input/Output: [(96 18 59 4) 4]
Train Case:  22 | Input/Output: [(7 49 39 31) 7]
Train Case:  23 | Input/Output: [(71 87 90 76) 71]
Train Case:  24 | Input/Output: [(64 23 42 44) 23]
Train Case:  25 | Input/Output: [(39 22 41 57) 22]
Train Case:  26 | Input/Output: [(64 35 45 78) 35]
Train Case:  27 | Input/Output: [(38 13 50 73) 13]
Train Case:  28 | Input/Output: [(77 58 72 20) 20]
Train Case:  29 | Input/Output: [(29 56 71 81) 29]
Train Case:  30 | Input/Output: [(34 5 36 46) 5]
Train Case:  31 | Input/Output: [(36 11 64 30) 11]
Train Case:  32 | Input/Output: [(33 51 42 34) 33]
Train Case:  33 | Input/Output: [(13 50 73 19) 13]
Train Case:  34 | Input/Output: [(78 54 73 71) 54]
Train Case:  35 | Input/Output: [(89 39 70 43) 39]
Train Case:  36 | Input/Output: [(84 99 77 56) 56]
Train Case:  37 | Input/Output: [(89 83 12 57) 12]
Train Case:  38 | Input/Output: [(21 12 27 65) 12]
Train Case:  39 | Input/Output: [(88 82 14 10) 10]
Train Case:  40 | Input/Output: [(-49 70 86 -93) -93]
Train Case:  41 | Input/Output: [(-71 18 -87 -77) -87]
Train Case:  42 | Input/Output: [(18 -63 76 6) -63]
Train Case:  43 | Input/Output: [(83 -6 -97 54) -97]
Train Case:  44 | Input/Output: [(58 -38 73 -78) -78]
Train Case:  45 | Input/Output: [(20 55 -40 -18) -40]
Train Case:  46 | Input/Output: [(-15 0 -75 85) -75]
Train Case:  47 | Input/Output: [(4 25 47 -61) -61]
Train Case:  48 | Input/Output: [(31 40 -51 26) -51]
Train Case:  49 | Input/Output: [(-21 41 -10 -75) -75]
Train Case:  50 | Input/Output: [(11 40 -9 -22) -22]
Train Case:  51 | Input/Output: [(-80 -50 -78 83) -80]
Train Case:  52 | Input/Output: [(51 54 -51 62) -51]
Train Case:  53 | Input/Output: [(-66 95 -73 -29) -73]
Train Case:  54 | Input/Output: [(-83 -39 -66 11) -83]
Train Case:  55 | Input/Output: [(71 14 69 -51) -51]
Train Case:  56 | Input/Output: [(85 -36 -16 73) -36]
Train Case:  57 | Input/Output: [(-49 -58 62 -56) -58]
Train Case:  58 | Input/Output: [(-53 -12 100 69) -53]
Train Case:  59 | Input/Output: [(-50 -90 83 73) -90]
Train Case:  60 | Input/Output: [(72 73 -37 75) -37]
Train Case:  61 | Input/Output: [(92 -65 -5 -76) -76]
Train Case:  62 | Input/Output: [(64 73 17 -52) -52]
Train Case:  63 | Input/Output: [(-22 83 -93 10) -93]
Train Case:  64 | Input/Output: [(-75 19 48 63) -75]
Train Case:  65 | Input/Output: [(-72 70 24 -47) -72]
Train Case:  66 | Input/Output: [(-53 83 -30 -49) -53]
Train Case:  67 | Input/Output: [(-22 -62 70 -43) -62]
Train Case:  68 | Input/Output: [(85 27 30 26) 26]
Train Case:  69 | Input/Output: [(-67 -2 -54 43) -67]
Train Case:  70 | Input/Output: [(-3 -95 50 -42) -95]
Train Case:  71 | Input/Output: [(-13 -11 85 86) -13]
Train Case:  72 | Input/Output: [(-100 99 -23 -63) -100]
Train Case:  73 | Input/Output: [(-46 -37 -41 -20) -46]
Train Case:  74 | Input/Output: [(-83 38 26 66) -83]
Train Case:  75 | Input/Output: [(-69 -89 17 -85) -89]
Train Case:  76 | Input/Output: [(89 -94 -70 54) -94]
Train Case:  77 | Input/Output: [(81 0 -89 60) -89]
Train Case:  78 | Input/Output: [(24 0 -20 -48) -48]
Train Case:  79 | Input/Output: [(46 46 -45 -77) -77]
Train Case:  80 | Input/Output: [(92 -9 53 -4) -9]
Train Case:  81 | Input/Output: [(82 -46 45 -97) -97]
Train Case:  82 | Input/Output: [(32 -1 18 -9) -9]
Train Case:  83 | Input/Output: [(17 -70 -6 -59) -70]
Train Case:  84 | Input/Output: [(3 -24 62 -26) -26]
Train Case:  85 | Input/Output: [(-60 67 14 -76) -76]
Train Case:  86 | Input/Output: [(-24 15 -19 -24) -24]
Train Case:  87 | Input/Output: [(-15 98 75 -62) -62]
Train Case:  88 | Input/Output: [(91 67 47 -39) -39]
Train Case:  89 | Input/Output: [(49 -23 -9 -85) -85]
Train Case:  90 | Input/Output: [(52 -43 34 29) -43]
Train Case:  91 | Input/Output: [(-34 56 51 -24) -34]
Train Case:  92 | Input/Output: [(31 88 44 -16) -16]
Train Case:  93 | Input/Output: [(-45 -92 -10 -94) -94]
Train Case:  94 | Input/Output: [(-46 -13 -16 17) -46]
Train Case:  95 | Input/Output: [(60 58 -9 90) -9]
Train Case:  96 | Input/Output: [(-84 60 91 94) -84]
Train Case:  97 | Input/Output: [(-45 1 9 87) -45]
Train Case:  98 | Input/Output: [(-17 82 39 -29) -29]
Train Case:  99 | Input/Output: [(-77 11 75 -51) -77]
Test Case:   0 | Input/Output: [[51 51 51 78] 51]
Test Case:   1 | Input/Output: [[-3 34 -3 -3] -3]
Test Case:   2 | Input/Output: [[-17 -45 -45 -45] -45]
Test Case:   3 | Input/Output: [[77 77 77 68] 68]
Test Case:   4 | Input/Output: [[14 14 14 -29] -29]
Test Case:   5 | Input/Output: [[15 15 15 -26] -26]
Test Case:   6 | Input/Output: [[-44 -86 -44 -44] -86]
Test Case:   7 | Input/Output: [[-86 -86 -86 -68] -86]
Test Case:   8 | Input/Output: [[-18 -45 -45 -45] -45]
Test Case:   9 | Input/Output: [[-18 86 86 86] -18]
Test Case:  10 | Input/Output: [[-70 -24 -70 -70] -70]
Test Case:  11 | Input/Output: [[-86 -86 57 -86] -86]
Test Case:  12 | Input/Output: [[-59 48 48 48] -59]
Test Case:  13 | Input/Output: [[88 -93 88 88] -93]
Test Case:  14 | Input/Output: [[59 59 69 59] 59]
Test Case:  15 | Input/Output: [[-3 80 80 80] -3]
Test Case:  16 | Input/Output: [[89 89 41 89] 41]
Test Case:  17 | Input/Output: [[-75 -75 48 -75] -75]
Test Case:  18 | Input/Output: [[68 26 26 26] 26]
Test Case:  19 | Input/Output: [[-8 -8 -8 -38] -38]
Test Case:  20 | Input/Output: [[3 3 -14 3] -14]
Test Case:  21 | Input/Output: [[99 -54 99 99] -54]
Test Case:  22 | Input/Output: [[-77 88 -77 -77] -77]
Test Case:  23 | Input/Output: [[80 -65 80 80] -65]
Test Case:  24 | Input/Output: [[19 -48 -48 -48] -48]
Test Case:  25 | Input/Output: [[-51 -51 67 -51] -51]
Test Case:  26 | Input/Output: [[-10 -10 -64 -10] -64]
Test Case:  27 | Input/Output: [[71 -40 71 71] -40]
Test Case:  28 | Input/Output: [[-13 -13 -13 -2] -13]
Test Case:  29 | Input/Output: [[44 26 26 26] 26]
Test Case:  30 | Input/Output: [[97 97 97 -2] -2]
Test Case:  31 | Input/Output: [[-79 39 39 39] -79]
Test Case:  32 | Input/Output: [[35 35 17 35] 17]
Test Case:  33 | Input/Output: [[83 37 37 37] 37]
Test Case:  34 | Input/Output: [[79 79 79 -83] -83]
Test Case:  35 | Input/Output: [[-20 -93 -20 -20] -93]
Test Case:  36 | Input/Output: [[-62 3 3 3] -62]
Test Case:  37 | Input/Output: [[-4 -93 -4 -4] -93]
Test Case:  38 | Input/Output: [[91 91 91 16] 16]
Test Case:  39 | Input/Output: [[9 9 9 -75] -75]
Test Case:  40 | Input/Output: [[29 82 29 29] 29]
Test Case:  41 | Input/Output: [[-5 62 62 62] -5]
Test Case:  42 | Input/Output: [[4 4 4 -78] -78]
Test Case:  43 | Input/Output: [[-58 67 67 67] -58]
Test Case:  44 | Input/Output: [[-99 -5 -99 -99] -99]
Test Case:  45 | Input/Output: [[-86 65 65 65] -86]
Test Case:  46 | Input/Output: [[88 13 88 88] 13]
Test Case:  47 | Input/Output: [[52 40 40 40] 40]
Test Case:  48 | Input/Output: [[10 -69 10 10] -69]
Test Case:  49 | Input/Output: [[77 -76 77 77] -76]
Test Case:  50 | Input/Output: [[11 11 52 11] 11]
Test Case:  51 | Input/Output: [[-30 -30 0 -30] -30]
Test Case:  52 | Input/Output: [[-25 99 99 99] -25]
Test Case:  53 | Input/Output: [[-9 -9 -9 -6] -9]
Test Case:  54 | Input/Output: [[25 -97 25 25] -97]
Test Case:  55 | Input/Output: [[87 52 52 52] 52]
Test Case:  56 | Input/Output: [[-71 -95 -95 -95] -95]
Test Case:  57 | Input/Output: [[91 -52 91 91] -52]
Test Case:  58 | Input/Output: [[96 -65 96 96] -65]
Test Case:  59 | Input/Output: [[-70 -70 -65 -70] -70]
Test Case:  60 | Input/Output: [[-1 -71 -71 -71] -71]
Test Case:  61 | Input/Output: [[37 37 -64 37] -64]
Test Case:  62 | Input/Output: [[46 -24 46 46] -24]
Test Case:  63 | Input/Output: [[22 -57 22 22] -57]
Test Case:  64 | Input/Output: [[92 92 48 92] 48]
Test Case:  65 | Input/Output: [[40 40 40 -20] -20]
Test Case:  66 | Input/Output: [[74 74 74 4] 4]
Test Case:  67 | Input/Output: [[-15 -15 97 -15] -15]
Test Case:  68 | Input/Output: [[6 6 6 -70] -70]
Test Case:  69 | Input/Output: [[-98 -98 -98 -47] -98]
Test Case:  70 | Input/Output: [[33 33 -87 33] -87]
Test Case:  71 | Input/Output: [[14 14 22 14] 14]
Test Case:  72 | Input/Output: [[-70 47 -70 -70] -70]
Test Case:  73 | Input/Output: [[65 -51 65 65] -51]
Test Case:  74 | Input/Output: [[-10 -10 7 -10] -10]
Test Case:  75 | Input/Output: [[-2 -2 -27 -2] -27]
Test Case:  76 | Input/Output: [[-72 -72 -72 -76] -76]
Test Case:  77 | Input/Output: [[53 -52 -52 -52] -52]
Test Case:  78 | Input/Output: [[46 -13 -13 -13] -13]
Test Case:  79 | Input/Output: [[-67 63 63 63] -67]
Test Case:  80 | Input/Output: [[-24 -24 64 -24] -24]
Test Case:  81 | Input/Output: [[-65 -65 -65 84] -65]
Test Case:  82 | Input/Output: [[44 -6 44 44] -6]
Test Case:  83 | Input/Output: [[35 -97 -97 -97] -97]
Test Case:  84 | Input/Output: [[-62 23 23 23] -62]
Test Case:  85 | Input/Output: [[-71 -71 -91 -71] -91]
Test Case:  86 | Input/Output: [[-14 -14 -14 55] -14]
Test Case:  87 | Input/Output: [[-94 -11 -94 -94] -94]
Test Case:  88 | Input/Output: [[-91 49 49 49] -91]
Test Case:  89 | Input/Output: [[9 9 9 -74] -74]
Test Case:  90 | Input/Output: [[9 30 30 30] 9]
Test Case:  91 | Input/Output: [[-37 13 13 13] -37]
Test Case:  92 | Input/Output: [[89 -21 -21 -21] -21]
Test Case:  93 | Input/Output: [[75 75 75 6] 6]
Test Case:  94 | Input/Output: [[-80 -97 -97 -97] -97]
Test Case:  95 | Input/Output: [[-51 -85 -85 -85] -85]
Test Case:  96 | Input/Output: [[-73 -1 -73 -73] -73]
Test Case:  97 | Input/Output: [[12 12 12 98] 12]
Test Case:  98 | Input/Output: [[-14 52 52 52] -14]
Test Case:  99 | Input/Output: [[-97 58 -97 -97] -97]
Test Case: 100 | Input/Output: [(4 4 4 4) 4]
Test Case: 101 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 102 | Input/Output: [(35 35 35 35) 35]
Test Case: 103 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 104 | Input/Output: [(67 67 67 67) 67]
Test Case: 105 | Input/Output: [(19 19 19 19) 19]
Test Case: 106 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 107 | Input/Output: [(49 49 49 49) 49]
Test Case: 108 | Input/Output: [(16 16 16 16) 16]
Test Case: 109 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 110 | Input/Output: [(48 48 48 48) 48]
Test Case: 111 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 112 | Input/Output: [(92 92 92 92) 92]
Test Case: 113 | Input/Output: [(31 31 31 31) 31]
Test Case: 114 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 115 | Input/Output: [(81 81 81 81) 81]
Test Case: 116 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 117 | Input/Output: [(62 62 62 62) 62]
Test Case: 118 | Input/Output: [(12 12 12 12) 12]
Test Case: 119 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 120 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 121 | Input/Output: [(46 46 46 46) 46]
Test Case: 122 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 123 | Input/Output: [(94 94 94 94) 94]
Test Case: 124 | Input/Output: [(65 65 65 65) 65]
Test Case: 125 | Input/Output: [(64 64 64 64) 64]
Test Case: 126 | Input/Output: [(48 48 48 48) 48]
Test Case: 127 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 128 | Input/Output: [(15 15 15 15) 15]
Test Case: 129 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 130 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 131 | Input/Output: [(31 31 31 31) 31]
Test Case: 132 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 133 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 134 | Input/Output: [(45 45 45 45) 45]
Test Case: 135 | Input/Output: [(16 16 16 16) 16]
Test Case: 136 | Input/Output: [(86 86 86 86) 86]
Test Case: 137 | Input/Output: [(64 64 64 64) 64]
Test Case: 138 | Input/Output: [(38 38 38 38) 38]
Test Case: 139 | Input/Output: [(24 24 24 24) 24]
Test Case: 140 | Input/Output: [(87 87 87 87) 87]
Test Case: 141 | Input/Output: [(87 87 87 87) 87]
Test Case: 142 | Input/Output: [(17 17 17 17) 17]
Test Case: 143 | Input/Output: [(88 88 88 88) 88]
Test Case: 144 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 145 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 146 | Input/Output: [(15 15 15 15) 15]
Test Case: 147 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 148 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 149 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 150 | Input/Output: [(81 81 81 81) 81]
Test Case: 151 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 152 | Input/Output: [(7 7 7 7) 7]
Test Case: 153 | Input/Output: [(56 56 56 56) 56]
Test Case: 154 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 155 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 156 | Input/Output: [(4 4 4 4) 4]
Test Case: 157 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 158 | Input/Output: [(21 21 21 21) 21]
Test Case: 159 | Input/Output: [(17 17 17 17) 17]
Test Case: 160 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 161 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 162 | Input/Output: [(55 55 55 55) 55]
Test Case: 163 | Input/Output: [(10 10 10 10) 10]
Test Case: 164 | Input/Output: [(35 35 35 35) 35]
Test Case: 165 | Input/Output: [(58 58 58 58) 58]
Test Case: 166 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 167 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 168 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 169 | Input/Output: [(20 20 20 20) 20]
Test Case: 170 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 171 | Input/Output: [(13 13 13 13) 13]
Test Case: 172 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 173 | Input/Output: [(93 93 93 93) 93]
Test Case: 174 | Input/Output: [(2 2 2 2) 2]
Test Case: 175 | Input/Output: [(99 99 99 99) 99]
Test Case: 176 | Input/Output: [(82 82 82 82) 82]
Test Case: 177 | Input/Output: [(51 51 51 51) 51]
Test Case: 178 | Input/Output: [(16 16 16 16) 16]
Test Case: 179 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 180 | Input/Output: [(4 4 4 4) 4]
Test Case: 181 | Input/Output: [(64 64 64 64) 64]
Test Case: 182 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 183 | Input/Output: [(75 75 75 75) 75]
Test Case: 184 | Input/Output: [(47 47 47 47) 47]
Test Case: 185 | Input/Output: [(94 94 94 94) 94]
Test Case: 186 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 187 | Input/Output: [(43 43 43 43) 43]
Test Case: 188 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 189 | Input/Output: [(36 36 36 36) 36]
Test Case: 190 | Input/Output: [(27 27 27 27) 27]
Test Case: 191 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 192 | Input/Output: [(34 34 34 34) 34]
Test Case: 193 | Input/Output: [(72 72 72 72) 72]
Test Case: 194 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 195 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 196 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 197 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 198 | Input/Output: [(21 21 21 21) 21]
Test Case: 199 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 200 | Input/Output: [(92 14 2 50) 2]
Test Case: 201 | Input/Output: [(78 41 91 44) 41]
Test Case: 202 | Input/Output: [(38 66 54 13) 13]
Test Case: 203 | Input/Output: [(86 28 52 23) 23]
Test Case: 204 | Input/Output: [(10 5 66 85) 5]
Test Case: 205 | Input/Output: [(98 97 48 68) 48]
Test Case: 206 | Input/Output: [(33 16 76 13) 13]
Test Case: 207 | Input/Output: [(7 77 51 8) 7]
Test Case: 208 | Input/Output: [(87 34 41 3) 3]
Test Case: 209 | Input/Output: [(46 89 4 33) 4]
Test Case: 210 | Input/Output: [(43 41 16 4) 4]
Test Case: 211 | Input/Output: [(16 71 72 88) 16]
Test Case: 212 | Input/Output: [(87 64 0 14) 0]
Test Case: 213 | Input/Output: [(69 99 89 34) 34]
Test Case: 214 | Input/Output: [(60 45 75 90) 45]
Test Case: 215 | Input/Output: [(93 2 3 44) 2]
Test Case: 216 | Input/Output: [(37 67 42 23) 23]
Test Case: 217 | Input/Output: [(99 8 65 33) 8]
Test Case: 218 | Input/Output: [(61 100 88 64) 61]
Test Case: 219 | Input/Output: [(98 48 93 9) 9]
Test Case: 220 | Input/Output: [(86 51 53 0) 0]
Test Case: 221 | Input/Output: [(85 83 29 10) 10]
Test Case: 222 | Input/Output: [(72 49 1 42) 1]
Test Case: 223 | Input/Output: [(90 58 16 39) 16]
Test Case: 224 | Input/Output: [(71 76 55 93) 55]
Test Case: 225 | Input/Output: [(69 59 20 76) 20]
Test Case: 226 | Input/Output: [(33 87 23 9) 9]
Test Case: 227 | Input/Output: [(84 14 12 61) 12]
Test Case: 228 | Input/Output: [(11 9 43 94) 9]
Test Case: 229 | Input/Output: [(59 32 32 78) 32]
Test Case: 230 | Input/Output: [(1 45 10 51) 1]
Test Case: 231 | Input/Output: [(3 62 64 68) 3]
Test Case: 232 | Input/Output: [(24 61 24 66) 24]
Test Case: 233 | Input/Output: [(4 59 58 28) 4]
Test Case: 234 | Input/Output: [(39 60 99 0) 0]
Test Case: 235 | Input/Output: [(61 59 57 57) 57]
Test Case: 236 | Input/Output: [(28 13 1 32) 1]
Test Case: 237 | Input/Output: [(2 74 39 100) 2]
Test Case: 238 | Input/Output: [(49 90 2 45) 2]
Test Case: 239 | Input/Output: [(13 59 89 46) 13]
Test Case: 240 | Input/Output: [(20 72 39 66) 20]
Test Case: 241 | Input/Output: [(31 66 7 27) 7]
Test Case: 242 | Input/Output: [(39 44 41 6) 6]
Test Case: 243 | Input/Output: [(27 87 79 36) 27]
Test Case: 244 | Input/Output: [(32 54 86 54) 32]
Test Case: 245 | Input/Output: [(66 70 83 19) 19]
Test Case: 246 | Input/Output: [(98 6 99 91) 6]
Test Case: 247 | Input/Output: [(5 30 73 45) 5]
Test Case: 248 | Input/Output: [(89 28 32 37) 28]
Test Case: 249 | Input/Output: [(97 20 41 30) 20]
Test Case: 250 | Input/Output: [(10 81 92 36) 10]
Test Case: 251 | Input/Output: [(52 36 15 47) 15]
Test Case: 252 | Input/Output: [(61 66 27 22) 22]
Test Case: 253 | Input/Output: [(21 75 36 48) 21]
Test Case: 254 | Input/Output: [(24 33 37 42) 24]
Test Case: 255 | Input/Output: [(8 79 12 25) 8]
Test Case: 256 | Input/Output: [(50 39 41 56) 39]
Test Case: 257 | Input/Output: [(45 26 54 38) 26]
Test Case: 258 | Input/Output: [(13 54 47 33) 13]
Test Case: 259 | Input/Output: [(98 7 81 71) 7]
Test Case: 260 | Input/Output: [(41 47 51 23) 23]
Test Case: 261 | Input/Output: [(34 45 11 15) 11]
Test Case: 262 | Input/Output: [(78 50 61 28) 28]
Test Case: 263 | Input/Output: [(74 54 91 14) 14]
Test Case: 264 | Input/Output: [(40 36 87 98) 36]
Test Case: 265 | Input/Output: [(99 2 80 29) 2]
Test Case: 266 | Input/Output: [(55 18 28 40) 18]
Test Case: 267 | Input/Output: [(12 45 45 37) 12]
Test Case: 268 | Input/Output: [(21 8 80 41) 8]
Test Case: 269 | Input/Output: [(11 91 45 98) 11]
Test Case: 270 | Input/Output: [(29 25 48 37) 25]
Test Case: 271 | Input/Output: [(28 79 54 93) 28]
Test Case: 272 | Input/Output: [(97 72 21 21) 21]
Test Case: 273 | Input/Output: [(79 37 54 31) 31]
Test Case: 274 | Input/Output: [(62 71 94 73) 62]
Test Case: 275 | Input/Output: [(78 49 56 9) 9]
Test Case: 276 | Input/Output: [(34 48 61 76) 34]
Test Case: 277 | Input/Output: [(20 59 13 36) 13]
Test Case: 278 | Input/Output: [(94 58 76 80) 58]
Test Case: 279 | Input/Output: [(73 98 19 32) 19]
Test Case: 280 | Input/Output: [(83 62 19 99) 19]
Test Case: 281 | Input/Output: [(61 98 37 88) 37]
Test Case: 282 | Input/Output: [(8 46 2 64) 2]
Test Case: 283 | Input/Output: [(94 54 49 4) 4]
Test Case: 284 | Input/Output: [(14 4 52 10) 4]
Test Case: 285 | Input/Output: [(12 97 70 6) 6]
Test Case: 286 | Input/Output: [(50 21 41 29) 21]
Test Case: 287 | Input/Output: [(93 78 4 81) 4]
Test Case: 288 | Input/Output: [(8 57 13 27) 8]
Test Case: 289 | Input/Output: [(56 81 62 20) 20]
Test Case: 290 | Input/Output: [(0 43 89 90) 0]
Test Case: 291 | Input/Output: [(84 44 71 89) 44]
Test Case: 292 | Input/Output: [(36 22 1 69) 1]
Test Case: 293 | Input/Output: [(1 29 96 74) 1]
Test Case: 294 | Input/Output: [(10 18 66 13) 10]
Test Case: 295 | Input/Output: [(68 54 15 1) 1]
Test Case: 296 | Input/Output: [(9 97 89 61) 9]
Test Case: 297 | Input/Output: [(96 52 50 88) 50]
Test Case: 298 | Input/Output: [(16 41 84 7) 7]
Test Case: 299 | Input/Output: [(59 80 64 31) 31]
Test Case: 300 | Input/Output: [(23 74 99 58) 23]
Test Case: 301 | Input/Output: [(97 13 73 87) 13]
Test Case: 302 | Input/Output: [(94 2 39 74) 2]
Test Case: 303 | Input/Output: [(79 50 55 16) 16]
Test Case: 304 | Input/Output: [(75 8 24 74) 8]
Test Case: 305 | Input/Output: [(66 8 54 11) 8]
Test Case: 306 | Input/Output: [(10 26 72 50) 10]
Test Case: 307 | Input/Output: [(73 10 21 14) 10]
Test Case: 308 | Input/Output: [(84 92 49 31) 31]
Test Case: 309 | Input/Output: [(67 67 23 83) 23]
Test Case: 310 | Input/Output: [(92 25 50 80) 25]
Test Case: 311 | Input/Output: [(5 67 35 47) 5]
Test Case: 312 | Input/Output: [(27 20 58 53) 20]
Test Case: 313 | Input/Output: [(73 23 86 52) 23]
Test Case: 314 | Input/Output: [(17 83 81 91) 17]
Test Case: 315 | Input/Output: [(64 5 4 42) 4]
Test Case: 316 | Input/Output: [(42 59 38 98) 38]
Test Case: 317 | Input/Output: [(75 22 47 77) 22]
Test Case: 318 | Input/Output: [(11 0 75 67) 0]
Test Case: 319 | Input/Output: [(29 22 34 18) 18]
Test Case: 320 | Input/Output: [(39 2 84 14) 2]
Test Case: 321 | Input/Output: [(96 86 94 81) 81]
Test Case: 322 | Input/Output: [(77 2 100 98) 2]
Test Case: 323 | Input/Output: [(17 66 59 69) 17]
Test Case: 324 | Input/Output: [(13 46 62 84) 13]
Test Case: 325 | Input/Output: [(3 82 48 52) 3]
Test Case: 326 | Input/Output: [(47 70 77 31) 31]
Test Case: 327 | Input/Output: [(89 69 83 85) 69]
Test Case: 328 | Input/Output: [(50 57 43 42) 42]
Test Case: 329 | Input/Output: [(11 41 51 13) 11]
Test Case: 330 | Input/Output: [(39 71 47 79) 39]
Test Case: 331 | Input/Output: [(60 9 9 2) 2]
Test Case: 332 | Input/Output: [(20 31 14 49) 14]
Test Case: 333 | Input/Output: [(95 5 72 3) 3]
Test Case: 334 | Input/Output: [(16 98 36 78) 16]
Test Case: 335 | Input/Output: [(7 88 98 52) 7]
Test Case: 336 | Input/Output: [(40 57 8 79) 8]
Test Case: 337 | Input/Output: [(22 14 9 15) 9]
Test Case: 338 | Input/Output: [(94 42 66 40) 40]
Test Case: 339 | Input/Output: [(47 39 27 68) 27]
Test Case: 340 | Input/Output: [(40 35 72 87) 35]
Test Case: 341 | Input/Output: [(39 35 25 56) 25]
Test Case: 342 | Input/Output: [(54 55 55 20) 20]
Test Case: 343 | Input/Output: [(53 75 11 39) 11]
Test Case: 344 | Input/Output: [(32 53 97 85) 32]
Test Case: 345 | Input/Output: [(25 41 95 44) 25]
Test Case: 346 | Input/Output: [(16 49 46 98) 16]
Test Case: 347 | Input/Output: [(14 74 62 75) 14]
Test Case: 348 | Input/Output: [(73 29 82 73) 29]
Test Case: 349 | Input/Output: [(9 93 76 47) 9]
Test Case: 350 | Input/Output: [(71 70 67 65) 65]
Test Case: 351 | Input/Output: [(43 0 23 87) 0]
Test Case: 352 | Input/Output: [(66 29 10 8) 8]
Test Case: 353 | Input/Output: [(78 77 1 71) 1]
Test Case: 354 | Input/Output: [(58 20 21 6) 6]
Test Case: 355 | Input/Output: [(23 72 44 68) 23]
Test Case: 356 | Input/Output: [(11 57 48 59) 11]
Test Case: 357 | Input/Output: [(60 49 73 91) 49]
Test Case: 358 | Input/Output: [(31 13 12 70) 12]
Test Case: 359 | Input/Output: [(62 91 28 85) 28]
Test Case: 360 | Input/Output: [(86 23 24 75) 23]
Test Case: 361 | Input/Output: [(29 66 59 100) 29]
Test Case: 362 | Input/Output: [(10 78 39 61) 10]
Test Case: 363 | Input/Output: [(54 23 30 43) 23]
Test Case: 364 | Input/Output: [(65 39 23 3) 3]
Test Case: 365 | Input/Output: [(44 1 95 6) 1]
Test Case: 366 | Input/Output: [(54 81 22 20) 20]
Test Case: 367 | Input/Output: [(42 23 37 4) 4]
Test Case: 368 | Input/Output: [(80 91 5 81) 5]
Test Case: 369 | Input/Output: [(92 11 86 91) 11]
Test Case: 370 | Input/Output: [(83 8 15 1) 1]
Test Case: 371 | Input/Output: [(8 89 44 19) 8]
Test Case: 372 | Input/Output: [(45 90 18 35) 18]
Test Case: 373 | Input/Output: [(40 11 32 42) 11]
Test Case: 374 | Input/Output: [(19 79 39 63) 19]
Test Case: 375 | Input/Output: [(59 19 8 97) 8]
Test Case: 376 | Input/Output: [(44 75 34 43) 34]
Test Case: 377 | Input/Output: [(12 71 93 85) 12]
Test Case: 378 | Input/Output: [(67 62 46 12) 12]
Test Case: 379 | Input/Output: [(19 9 9 34) 9]
Test Case: 380 | Input/Output: [(41 30 32 96) 30]
Test Case: 381 | Input/Output: [(29 50 77 2) 2]
Test Case: 382 | Input/Output: [(29 30 71 32) 29]
Test Case: 383 | Input/Output: [(62 6 70 0) 0]
Test Case: 384 | Input/Output: [(89 44 11 69) 11]
Test Case: 385 | Input/Output: [(95 94 61 34) 34]
Test Case: 386 | Input/Output: [(41 21 70 39) 21]
Test Case: 387 | Input/Output: [(88 50 55 19) 19]
Test Case: 388 | Input/Output: [(1 49 3 17) 1]
Test Case: 389 | Input/Output: [(73 76 67 55) 55]
Test Case: 390 | Input/Output: [(73 42 88 99) 42]
Test Case: 391 | Input/Output: [(43 73 7 95) 7]
Test Case: 392 | Input/Output: [(72 58 49 45) 45]
Test Case: 393 | Input/Output: [(85 71 74 71) 71]
Test Case: 394 | Input/Output: [(69 1 17 93) 1]
Test Case: 395 | Input/Output: [(74 55 25 77) 25]
Test Case: 396 | Input/Output: [(46 58 63 2) 2]
Test Case: 397 | Input/Output: [(34 89 48 53) 34]
Test Case: 398 | Input/Output: [(67 10 19 5) 5]
Test Case: 399 | Input/Output: [(63 47 89 9) 9]
Test Case: 400 | Input/Output: [(-20 -24 84 20) -24]
Test Case: 401 | Input/Output: [(-91 10 17 -78) -91]
Test Case: 402 | Input/Output: [(-19 24 34 79) -19]
Test Case: 403 | Input/Output: [(-97 54 73 19) -97]
Test Case: 404 | Input/Output: [(60 98 50 80) 50]
Test Case: 405 | Input/Output: [(-30 81 7 -25) -30]
Test Case: 406 | Input/Output: [(64 45 -42 38) -42]
Test Case: 407 | Input/Output: [(53 71 80 -75) -75]
Test Case: 408 | Input/Output: [(-21 -40 84 13) -40]
Test Case: 409 | Input/Output: [(32 50 63 -20) -20]
Test Case: 410 | Input/Output: [(0 54 -91 40) -91]
Test Case: 411 | Input/Output: [(62 54 36 79) 36]
Test Case: 412 | Input/Output: [(-98 -20 -18 -69) -98]
Test Case: 413 | Input/Output: [(38 -20 95 90) -20]
Test Case: 414 | Input/Output: [(49 63 42 33) 33]
Test Case: 415 | Input/Output: [(-38 -24 -75 -94) -94]
Test Case: 416 | Input/Output: [(-28 -58 22 40) -58]
Test Case: 417 | Input/Output: [(-38 24 -64 -86) -86]
Test Case: 418 | Input/Output: [(32 -83 39 99) -83]
Test Case: 419 | Input/Output: [(-69 76 -62 97) -69]
Test Case: 420 | Input/Output: [(4 87 -75 49) -75]
Test Case: 421 | Input/Output: [(16 -94 -15 -88) -94]
Test Case: 422 | Input/Output: [(52 -67 -89 -40) -89]
Test Case: 423 | Input/Output: [(-86 44 78 -80) -86]
Test Case: 424 | Input/Output: [(-65 -44 42 21) -65]
Test Case: 425 | Input/Output: [(-48 -71 -40 41) -71]
Test Case: 426 | Input/Output: [(-43 87 73 -74) -74]
Test Case: 427 | Input/Output: [(18 -40 94 90) -40]
Test Case: 428 | Input/Output: [(11 -100 -58 -68) -100]
Test Case: 429 | Input/Output: [(-65 -17 71 -12) -65]
Test Case: 430 | Input/Output: [(31 -49 15 -26) -49]
Test Case: 431 | Input/Output: [(19 55 21 100) 19]
Test Case: 432 | Input/Output: [(24 -93 23 10) -93]
Test Case: 433 | Input/Output: [(30 -3 64 46) -3]
Test Case: 434 | Input/Output: [(-36 86 -11 46) -36]
Test Case: 435 | Input/Output: [(-52 -86 -79 22) -86]
Test Case: 436 | Input/Output: [(20 -64 45 74) -64]
Test Case: 437 | Input/Output: [(-66 -10 -93 33) -93]
Test Case: 438 | Input/Output: [(17 25 -81 -75) -81]
Test Case: 439 | Input/Output: [(51 2 -97 -57) -97]
Test Case: 440 | Input/Output: [(34 52 3 -85) -85]
Test Case: 441 | Input/Output: [(-45 -38 -77 3) -77]
Test Case: 442 | Input/Output: [(-100 54 -2 -89) -100]
Test Case: 443 | Input/Output: [(54 50 37 10) 10]
Test Case: 444 | Input/Output: [(-90 65 -48 -97) -97]
Test Case: 445 | Input/Output: [(-84 -9 -71 38) -84]
Test Case: 446 | Input/Output: [(78 98 72 -44) -44]
Test Case: 447 | Input/Output: [(62 -94 55 -29) -94]
Test Case: 448 | Input/Output: [(-46 2 9 95) -46]
Test Case: 449 | Input/Output: [(37 -1 61 58) -1]
Test Case: 450 | Input/Output: [(-5 96 76 -73) -73]
Test Case: 451 | Input/Output: [(27 4 -42 69) -42]
Test Case: 452 | Input/Output: [(-15 -98 -96 -32) -98]
Test Case: 453 | Input/Output: [(41 83 -71 -95) -95]
Test Case: 454 | Input/Output: [(-69 -53 -25 94) -69]
Test Case: 455 | Input/Output: [(-35 -26 -50 -98) -98]
Test Case: 456 | Input/Output: [(48 56 44 42) 42]
Test Case: 457 | Input/Output: [(57 -37 -13 3) -37]
Test Case: 458 | Input/Output: [(100 -13 89 40) -13]
Test Case: 459 | Input/Output: [(-76 75 -89 -86) -89]
Test Case: 460 | Input/Output: [(52 100 -35 66) -35]
Test Case: 461 | Input/Output: [(-5 17 95 -63) -63]
Test Case: 462 | Input/Output: [(-6 -99 40 -5) -99]
Test Case: 463 | Input/Output: [(2 -37 98 45) -37]
Test Case: 464 | Input/Output: [(37 57 22 -66) -66]
Test Case: 465 | Input/Output: [(-21 59 71 -9) -21]
Test Case: 466 | Input/Output: [(8 75 56 -87) -87]
Test Case: 467 | Input/Output: [(-89 -73 5 -13) -89]
Test Case: 468 | Input/Output: [(45 -67 -18 26) -67]
Test Case: 469 | Input/Output: [(-5 -50 -38 -24) -50]
Test Case: 470 | Input/Output: [(-46 46 -2 16) -46]
Test Case: 471 | Input/Output: [(-83 18 -46 48) -83]
Test Case: 472 | Input/Output: [(-25 -58 13 8) -58]
Test Case: 473 | Input/Output: [(12 -35 -32 -50) -50]
Test Case: 474 | Input/Output: [(24 59 -73 -10) -73]
Test Case: 475 | Input/Output: [(-17 27 -1 -84) -84]
Test Case: 476 | Input/Output: [(59 -7 -42 -53) -53]
Test Case: 477 | Input/Output: [(-50 57 -55 15) -55]
Test Case: 478 | Input/Output: [(70 39 56 -17) -17]
Test Case: 479 | Input/Output: [(-94 -80 -75 -71) -94]
Test Case: 480 | Input/Output: [(21 -36 98 -62) -62]
Test Case: 481 | Input/Output: [(-95 66 -95 -44) -95]
Test Case: 482 | Input/Output: [(81 -34 53 -65) -65]
Test Case: 483 | Input/Output: [(-35 4 -2 -7) -35]
Test Case: 484 | Input/Output: [(-39 -85 -15 -77) -85]
Test Case: 485 | Input/Output: [(52 41 89 -39) -39]
Test Case: 486 | Input/Output: [(-38 29 -9 2) -38]
Test Case: 487 | Input/Output: [(38 -64 -81 -5) -81]
Test Case: 488 | Input/Output: [(49 -73 -98 -63) -98]
Test Case: 489 | Input/Output: [(-10 -65 -24 -21) -65]
Test Case: 490 | Input/Output: [(9 -90 91 23) -90]
Test Case: 491 | Input/Output: [(-22 -91 -1 14) -91]
Test Case: 492 | Input/Output: [(-100 -21 51 -18) -100]
Test Case: 493 | Input/Output: [(16 -7 -53 38) -53]
Test Case: 494 | Input/Output: [(-67 62 18 -78) -78]
Test Case: 495 | Input/Output: [(42 -9 1 35) -9]
Test Case: 496 | Input/Output: [(-44 -92 -54 -50) -92]
Test Case: 497 | Input/Output: [(80 5 97 23) 5]
Test Case: 498 | Input/Output: [(19 67 -69 -49) -69]
Test Case: 499 | Input/Output: [(-5 -100 26 46) -100]
Test Case: 500 | Input/Output: [(-39 -26 -42 -87) -87]
Test Case: 501 | Input/Output: [(48 78 11 -10) -10]
Test Case: 502 | Input/Output: [(-8 75 -28 -6) -28]
Test Case: 503 | Input/Output: [(55 -79 -1 -98) -98]
Test Case: 504 | Input/Output: [(-86 95 -60 63) -86]
Test Case: 505 | Input/Output: [(18 80 -1 -9) -9]
Test Case: 506 | Input/Output: [(87 -78 -18 -29) -78]
Test Case: 507 | Input/Output: [(-46 -22 56 -27) -46]
Test Case: 508 | Input/Output: [(4 16 -90 -43) -90]
Test Case: 509 | Input/Output: [(18 16 -44 13) -44]
Test Case: 510 | Input/Output: [(79 16 -17 46) -17]
Test Case: 511 | Input/Output: [(71 -16 72 -93) -93]
Test Case: 512 | Input/Output: [(-52 -69 -75 42) -75]
Test Case: 513 | Input/Output: [(37 -60 85 -26) -60]
Test Case: 514 | Input/Output: [(75 94 18 33) 18]
Test Case: 515 | Input/Output: [(-80 -94 82 36) -94]
Test Case: 516 | Input/Output: [(33 -68 32 -35) -68]
Test Case: 517 | Input/Output: [(-26 -66 83 -49) -66]
Test Case: 518 | Input/Output: [(-22 -38 -52 5) -52]
Test Case: 519 | Input/Output: [(-91 -94 -52 78) -94]
Test Case: 520 | Input/Output: [(-70 98 -26 -52) -70]
Test Case: 521 | Input/Output: [(-19 -89 43 -36) -89]
Test Case: 522 | Input/Output: [(94 -88 24 29) -88]
Test Case: 523 | Input/Output: [(-21 -69 29 -13) -69]
Test Case: 524 | Input/Output: [(-63 0 10 -25) -63]
Test Case: 525 | Input/Output: [(-83 -4 -8 -12) -83]
Test Case: 526 | Input/Output: [(-25 -89 -3 -81) -89]
Test Case: 527 | Input/Output: [(-58 33 93 -21) -58]
Test Case: 528 | Input/Output: [(-81 90 40 -96) -96]
Test Case: 529 | Input/Output: [(49 -13 -65 72) -65]
Test Case: 530 | Input/Output: [(95 -28 -50 -85) -85]
Test Case: 531 | Input/Output: [(-54 -42 35 -100) -100]
Test Case: 532 | Input/Output: [(-78 62 -63 -15) -78]
Test Case: 533 | Input/Output: [(49 17 42 -34) -34]
Test Case: 534 | Input/Output: [(98 -40 -70 -56) -70]
Test Case: 535 | Input/Output: [(-36 -63 -25 -77) -77]
Test Case: 536 | Input/Output: [(-81 -5 -3 -41) -81]
Test Case: 537 | Input/Output: [(-17 63 -43 2) -43]
Test Case: 538 | Input/Output: [(0 18 21 -40) -40]
Test Case: 539 | Input/Output: [(-63 -15 62 -27) -63]
Test Case: 540 | Input/Output: [(13 12 -50 -38) -50]
Test Case: 541 | Input/Output: [(86 -27 -57 9) -57]
Test Case: 542 | Input/Output: [(6 95 60 96) 6]
Test Case: 543 | Input/Output: [(61 30 69 -48) -48]
Test Case: 544 | Input/Output: [(-66 45 28 -7) -66]
Test Case: 545 | Input/Output: [(-45 43 -18 -96) -96]
Test Case: 546 | Input/Output: [(55 -25 41 1) -25]
Test Case: 547 | Input/Output: [(-19 -74 -13 16) -74]
Test Case: 548 | Input/Output: [(53 72 33 -56) -56]
Test Case: 549 | Input/Output: [(36 -16 -71 -25) -71]
Test Case: 550 | Input/Output: [(49 -4 80 -8) -8]
Test Case: 551 | Input/Output: [(-92 17 17 74) -92]
Test Case: 552 | Input/Output: [(89 28 71 87) 28]
Test Case: 553 | Input/Output: [(-8 -7 -4 26) -8]
Test Case: 554 | Input/Output: [(-64 -49 25 47) -64]
Test Case: 555 | Input/Output: [(30 96 -19 47) -19]
Test Case: 556 | Input/Output: [(49 -9 21 -42) -42]
Test Case: 557 | Input/Output: [(-14 -69 92 42) -69]
Test Case: 558 | Input/Output: [(24 -96 16 40) -96]
Test Case: 559 | Input/Output: [(81 27 91 -17) -17]
Test Case: 560 | Input/Output: [(-70 94 66 93) -70]
Test Case: 561 | Input/Output: [(-76 89 89 6) -76]
Test Case: 562 | Input/Output: [(8 -41 83 -40) -41]
Test Case: 563 | Input/Output: [(-65 -69 30 -77) -77]
Test Case: 564 | Input/Output: [(21 -69 -94 64) -94]
Test Case: 565 | Input/Output: [(89 31 55 -20) -20]
Test Case: 566 | Input/Output: [(49 -28 -2 65) -28]
Test Case: 567 | Input/Output: [(48 90 -39 0) -39]
Test Case: 568 | Input/Output: [(-80 91 -47 13) -80]
Test Case: 569 | Input/Output: [(-17 25 -22 65) -22]
Test Case: 570 | Input/Output: [(88 -91 13 -56) -91]
Test Case: 571 | Input/Output: [(-63 -99 -51 -64) -99]
Test Case: 572 | Input/Output: [(-15 0 2 53) -15]
Test Case: 573 | Input/Output: [(-11 51 -90 -75) -90]
Test Case: 574 | Input/Output: [(-99 75 45 -48) -99]
Test Case: 575 | Input/Output: [(32 12 -100 -50) -100]
Test Case: 576 | Input/Output: [(-32 97 43 -92) -92]
Test Case: 577 | Input/Output: [(27 -43 92 -31) -43]
Test Case: 578 | Input/Output: [(-18 -85 -40 43) -85]
Test Case: 579 | Input/Output: [(-60 7 -30 13) -60]
Test Case: 580 | Input/Output: [(46 5 -14 -53) -53]
Test Case: 581 | Input/Output: [(-76 80 88 -69) -76]
Test Case: 582 | Input/Output: [(21 -73 -19 70) -73]
Test Case: 583 | Input/Output: [(-77 24 -69 91) -77]
Test Case: 584 | Input/Output: [(33 38 11 -79) -79]
Test Case: 585 | Input/Output: [(-58 91 71 -4) -58]
Test Case: 586 | Input/Output: [(-57 -5 93 -34) -57]
Test Case: 587 | Input/Output: [(-39 -27 80 -27) -39]
Test Case: 588 | Input/Output: [(-43 88 89 39) -43]
Test Case: 589 | Input/Output: [(75 60 -43 -9) -43]
Test Case: 590 | Input/Output: [(-66 55 -78 38) -78]
Test Case: 591 | Input/Output: [(21 -58 -82 30) -82]
Test Case: 592 | Input/Output: [(-38 -70 -94 77) -94]
Test Case: 593 | Input/Output: [(-38 -94 -4 -3) -94]
Test Case: 594 | Input/Output: [(-5 -75 -85 -91) -91]
Test Case: 595 | Input/Output: [(-10 33 84 49) -10]
Test Case: 596 | Input/Output: [(-24 97 -32 25) -32]
Test Case: 597 | Input/Output: [(4 -20 -52 85) -52]
Test Case: 598 | Input/Output: [(-31 -81 64 -47) -81]
Test Case: 599 | Input/Output: [(48 -42 -12 -100) -100]
Test Case: 600 | Input/Output: [(-42 -90 33 58) -90]
Test Case: 601 | Input/Output: [(-71 32 16 -40) -71]
Test Case: 602 | Input/Output: [(5 49 -44 -33) -44]
Test Case: 603 | Input/Output: [(-65 54 74 -48) -65]
Test Case: 604 | Input/Output: [(-91 73 91 -3) -91]
Test Case: 605 | Input/Output: [(9 37 -77 40) -77]
Test Case: 606 | Input/Output: [(0 -60 18 99) -60]
Test Case: 607 | Input/Output: [(-41 8 -82 -6) -82]
Test Case: 608 | Input/Output: [(9 -100 49 -8) -100]
Test Case: 609 | Input/Output: [(78 0 -64 -5) -64]
Test Case: 610 | Input/Output: [(-68 11 -65 -65) -68]
Test Case: 611 | Input/Output: [(-12 69 -46 98) -46]
Test Case: 612 | Input/Output: [(-16 43 -97 82) -97]
Test Case: 613 | Input/Output: [(46 66 -83 -73) -83]
Test Case: 614 | Input/Output: [(32 99 -51 -1) -51]
Test Case: 615 | Input/Output: [(-68 -67 -33 -89) -89]
Test Case: 616 | Input/Output: [(12 -47 -75 -41) -75]
Test Case: 617 | Input/Output: [(-98 -89 -17 66) -98]
Test Case: 618 | Input/Output: [(31 -1 -77 -99) -99]
Test Case: 619 | Input/Output: [(-84 10 -35 91) -84]
Test Case: 620 | Input/Output: [(46 -57 68 -91) -91]
Test Case: 621 | Input/Output: [(-94 -33 -62 35) -94]
Test Case: 622 | Input/Output: [(-69 -71 -33 32) -71]
Test Case: 623 | Input/Output: [(-49 -62 2 73) -62]
Test Case: 624 | Input/Output: [(-9 90 10 -11) -11]
Test Case: 625 | Input/Output: [(11 39 31 7) 7]
Test Case: 626 | Input/Output: [(43 -92 74 -45) -92]
Test Case: 627 | Input/Output: [(-52 92 -27 -79) -79]
Test Case: 628 | Input/Output: [(55 88 -12 -88) -88]
Test Case: 629 | Input/Output: [(-35 -8 -42 -34) -42]
Test Case: 630 | Input/Output: [(-95 -39 -24 -94) -95]
Test Case: 631 | Input/Output: [(-20 -86 29 24) -86]
Test Case: 632 | Input/Output: [(70 87 17 -65) -65]
Test Case: 633 | Input/Output: [(61 49 -48 30) -48]
Test Case: 634 | Input/Output: [(8 -55 1 -62) -62]
Test Case: 635 | Input/Output: [(-42 -99 -51 -38) -99]
Test Case: 636 | Input/Output: [(-53 97 -16 20) -53]
Test Case: 637 | Input/Output: [(1 60 -75 26) -75]
Test Case: 638 | Input/Output: [(87 85 -27 -5) -27]
Test Case: 639 | Input/Output: [(3 68 55 78) 3]
Test Case: 640 | Input/Output: [(-94 -32 -2 7) -94]
Test Case: 641 | Input/Output: [(52 90 83 90) 52]
Test Case: 642 | Input/Output: [(-38 -52 -40 81) -52]
Test Case: 643 | Input/Output: [(-75 -9 -15 -5) -75]
Test Case: 644 | Input/Output: [(20 52 3 81) 3]
Test Case: 645 | Input/Output: [(24 -85 -47 20) -85]
Test Case: 646 | Input/Output: [(40 -92 -11 8) -92]
Test Case: 647 | Input/Output: [(64 2 -51 17) -51]
Test Case: 648 | Input/Output: [(-41 -43 27 -67) -67]
Test Case: 649 | Input/Output: [(-3 -54 56 62) -54]
Test Case: 650 | Input/Output: [(-70 -40 -58 92) -70]
Test Case: 651 | Input/Output: [(-87 51 90 -49) -87]
Test Case: 652 | Input/Output: [(-79 -95 46 32) -95]
Test Case: 653 | Input/Output: [(-25 6 66 -89) -89]
Test Case: 654 | Input/Output: [(-34 46 -90 -11) -90]
Test Case: 655 | Input/Output: [(54 39 78 14) 14]
Test Case: 656 | Input/Output: [(-43 52 -40 -57) -57]
Test Case: 657 | Input/Output: [(-18 59 -50 47) -50]
Test Case: 658 | Input/Output: [(-36 0 31 18) -36]
Test Case: 659 | Input/Output: [(-61 -92 29 50) -92]
Test Case: 660 | Input/Output: [(-22 -10 29 12) -22]
Test Case: 661 | Input/Output: [(-14 3 94 89) -14]
Test Case: 662 | Input/Output: [(-74 -51 60 -88) -88]
Test Case: 663 | Input/Output: [(31 16 -13 -28) -28]
Test Case: 664 | Input/Output: [(-99 -45 7 84) -99]
Test Case: 665 | Input/Output: [(-80 -51 89 7) -80]
Test Case: 666 | Input/Output: [(-88 2 -34 -44) -88]
Test Case: 667 | Input/Output: [(53 -91 79 3) -91]
Test Case: 668 | Input/Output: [(-93 48 53 -43) -93]
Test Case: 669 | Input/Output: [(-66 24 -8 -63) -66]
Test Case: 670 | Input/Output: [(-89 -61 22 -65) -89]
Test Case: 671 | Input/Output: [(-89 -51 -9 45) -89]
Test Case: 672 | Input/Output: [(42 82 -53 -95) -95]
Test Case: 673 | Input/Output: [(-21 -29 -100 -22) -100]
Test Case: 674 | Input/Output: [(97 38 4 66) 4]
Test Case: 675 | Input/Output: [(68 -6 -84 70) -84]
Test Case: 676 | Input/Output: [(-75 -64 99 -17) -75]
Test Case: 677 | Input/Output: [(-92 -75 59 -70) -92]
Test Case: 678 | Input/Output: [(73 -20 51 95) -20]
Test Case: 679 | Input/Output: [(83 -37 -73 -100) -100]
Test Case: 680 | Input/Output: [(36 -11 70 43) -11]
Test Case: 681 | Input/Output: [(2 1 75 93) 1]
Test Case: 682 | Input/Output: [(30 -44 61 -94) -94]
Test Case: 683 | Input/Output: [(47 39 87 19) 19]
Test Case: 684 | Input/Output: [(-50 -6 -78 67) -78]
Test Case: 685 | Input/Output: [(74 -59 89 87) -59]
Test Case: 686 | Input/Output: [(-23 -60 93 -52) -60]
Test Case: 687 | Input/Output: [(79 40 -56 -55) -56]
Test Case: 688 | Input/Output: [(-76 -12 1 14) -76]
Test Case: 689 | Input/Output: [(-52 -57 -19 -27) -57]
Test Case: 690 | Input/Output: [(-33 -53 -3 38) -53]
Test Case: 691 | Input/Output: [(36 13 90 50) 13]
Test Case: 692 | Input/Output: [(100 -25 13 35) -25]
Test Case: 693 | Input/Output: [(24 -61 -45 19) -61]
Test Case: 694 | Input/Output: [(-1 -84 -57 94) -84]
Test Case: 695 | Input/Output: [(-64 -94 74 -76) -94]
Test Case: 696 | Input/Output: [(-93 -96 -2 -72) -96]
Test Case: 697 | Input/Output: [(-23 -69 -76 60) -76]
Test Case: 698 | Input/Output: [(-9 -9 30 88) -9]
Test Case: 699 | Input/Output: [(-6 81 -9 -1) -9]
Test Case: 700 | Input/Output: [(-85 20 97 19) -85]
Test Case: 701 | Input/Output: [(16 -14 -84 45) -84]
Test Case: 702 | Input/Output: [(-59 -45 10 23) -59]
Test Case: 703 | Input/Output: [(-28 -57 25 13) -57]
Test Case: 704 | Input/Output: [(-51 92 -53 -57) -57]
Test Case: 705 | Input/Output: [(56 46 -74 -12) -74]
Test Case: 706 | Input/Output: [(-67 -82 -58 56) -82]
Test Case: 707 | Input/Output: [(95 -39 -3 -59) -59]
Test Case: 708 | Input/Output: [(-34 -84 40 71) -84]
Test Case: 709 | Input/Output: [(59 94 72 61) 59]
Test Case: 710 | Input/Output: [(92 31 -42 -30) -42]
Test Case: 711 | Input/Output: [(8 -52 36 60) -52]
Test Case: 712 | Input/Output: [(23 -18 23 -3) -18]
Test Case: 713 | Input/Output: [(-27 71 68 -34) -34]
Test Case: 714 | Input/Output: [(-17 -37 -97 -83) -97]
Test Case: 715 | Input/Output: [(-48 64 2 -15) -48]
Test Case: 716 | Input/Output: [(-67 38 61 -94) -94]
Test Case: 717 | Input/Output: [(-84 -46 -6 43) -84]
Test Case: 718 | Input/Output: [(-21 -98 -7 -10) -98]
Test Case: 719 | Input/Output: [(-97 72 47 -59) -97]
Test Case: 720 | Input/Output: [(-60 1 -27 14) -60]
Test Case: 721 | Input/Output: [(23 97 57 -91) -91]
Test Case: 722 | Input/Output: [(-90 -88 -80 41) -90]
Test Case: 723 | Input/Output: [(-57 77 87 -19) -57]
Test Case: 724 | Input/Output: [(-31 8 -8 -69) -69]
Test Case: 725 | Input/Output: [(40 22 -89 13) -89]
Test Case: 726 | Input/Output: [(71 3 31 -15) -15]
Test Case: 727 | Input/Output: [(30 92 44 -97) -97]
Test Case: 728 | Input/Output: [(26 -94 -20 60) -94]
Test Case: 729 | Input/Output: [(-67 -10 -36 30) -67]
Test Case: 730 | Input/Output: [(66 99 2 66) 2]
Test Case: 731 | Input/Output: [(-9 96 59 -100) -100]
Test Case: 732 | Input/Output: [(70 -94 -3 9) -94]
Test Case: 733 | Input/Output: [(33 97 86 -19) -19]
Test Case: 734 | Input/Output: [(-96 -61 7 39) -96]
Test Case: 735 | Input/Output: [(-27 47 59 -25) -27]
Test Case: 736 | Input/Output: [(46 -96 -41 77) -96]
Test Case: 737 | Input/Output: [(-2 92 94 -49) -49]
Test Case: 738 | Input/Output: [(-59 -65 -50 -56) -65]
Test Case: 739 | Input/Output: [(-99 -82 -100 71) -100]
Test Case: 740 | Input/Output: [(-39 -51 -28 -10) -51]
Test Case: 741 | Input/Output: [(-96 -61 -36 59) -96]
Test Case: 742 | Input/Output: [(4 96 65 43) 4]
Test Case: 743 | Input/Output: [(7 26 54 -77) -77]
Test Case: 744 | Input/Output: [(-39 -26 83 28) -39]
Test Case: 745 | Input/Output: [(46 21 -42 -85) -85]
Test Case: 746 | Input/Output: [(-33 8 88 -24) -33]
Test Case: 747 | Input/Output: [(-82 -94 77 -22) -94]
Test Case: 748 | Input/Output: [(-80 -22 6 -60) -80]
Test Case: 749 | Input/Output: [(-63 23 43 11) -63]
Test Case: 750 | Input/Output: [(-13 85 -6 -3) -13]
Test Case: 751 | Input/Output: [(12 56 -76 -23) -76]
Test Case: 752 | Input/Output: [(70 99 67 71) 67]
Test Case: 753 | Input/Output: [(-68 -63 3 58) -68]
Test Case: 754 | Input/Output: [(24 -11 -13 -96) -96]
Test Case: 755 | Input/Output: [(86 58 46 -26) -26]
Test Case: 756 | Input/Output: [(100 -80 76 83) -80]
Test Case: 757 | Input/Output: [(26 38 -82 78) -82]
Test Case: 758 | Input/Output: [(12 -10 -21 68) -21]
Test Case: 759 | Input/Output: [(-43 -63 -84 -53) -84]
Test Case: 760 | Input/Output: [(42 -8 -43 29) -43]
Test Case: 761 | Input/Output: [(-65 48 -25 81) -65]
Test Case: 762 | Input/Output: [(81 -97 -8 -56) -97]
Test Case: 763 | Input/Output: [(-83 63 -96 87) -96]
Test Case: 764 | Input/Output: [(100 44 -86 -77) -86]
Test Case: 765 | Input/Output: [(13 -90 -83 -70) -90]
Test Case: 766 | Input/Output: [(-2 -71 69 54) -71]
Test Case: 767 | Input/Output: [(-69 -79 -88 4) -88]
Test Case: 768 | Input/Output: [(-26 -69 -61 -66) -69]
Test Case: 769 | Input/Output: [(-90 -48 -34 -68) -90]
Test Case: 770 | Input/Output: [(-73 34 70 52) -73]
Test Case: 771 | Input/Output: [(72 20 -16 -1) -16]
Test Case: 772 | Input/Output: [(-99 -82 63 42) -99]
Test Case: 773 | Input/Output: [(-15 33 -51 70) -51]
Test Case: 774 | Input/Output: [(-5 -66 -13 -30) -66]
Test Case: 775 | Input/Output: [(44 35 -90 -85) -90]
Test Case: 776 | Input/Output: [(-26 -61 78 -83) -83]
Test Case: 777 | Input/Output: [(-81 -64 94 -43) -81]
Test Case: 778 | Input/Output: [(52 12 -10 78) -10]
Test Case: 779 | Input/Output: [(65 -96 -79 59) -96]
Test Case: 780 | Input/Output: [(48 89 70 93) 48]
Test Case: 781 | Input/Output: [(95 36 -79 -73) -79]
Test Case: 782 | Input/Output: [(-96 -63 72 -41) -96]
Test Case: 783 | Input/Output: [(-5 -97 -35 -22) -97]
Test Case: 784 | Input/Output: [(-33 -81 42 75) -81]
Test Case: 785 | Input/Output: [(-66 -42 -82 57) -82]
Test Case: 786 | Input/Output: [(-76 95 -88 -52) -88]
Test Case: 787 | Input/Output: [(44 59 -21 16) -21]
Test Case: 788 | Input/Output: [(-66 42 41 -61) -66]
Test Case: 789 | Input/Output: [(-60 29 -43 71) -60]
Test Case: 790 | Input/Output: [(12 23 -66 64) -66]
Test Case: 791 | Input/Output: [(-21 -46 3 47) -46]
Test Case: 792 | Input/Output: [(-59 6 22 49) -59]
Test Case: 793 | Input/Output: [(17 -68 65 -33) -68]
Test Case: 794 | Input/Output: [(-33 -96 -48 78) -96]
Test Case: 795 | Input/Output: [(-30 -58 84 69) -58]
Test Case: 796 | Input/Output: [(-34 27 -81 9) -81]
Test Case: 797 | Input/Output: [(21 27 87 -22) -22]
Test Case: 798 | Input/Output: [(81 14 70 -69) -69]
Test Case: 799 | Input/Output: [(-19 92 -65 -99) -99]
Test Case: 800 | Input/Output: [(52 81 -96 -84) -96]
Test Case: 801 | Input/Output: [(-47 22 -55 8) -55]
Test Case: 802 | Input/Output: [(-90 80 -100 -22) -100]
Test Case: 803 | Input/Output: [(-43 33 28 -69) -69]
Test Case: 804 | Input/Output: [(-12 31 62 -28) -28]
Test Case: 805 | Input/Output: [(-82 26 -39 -74) -82]
Test Case: 806 | Input/Output: [(-5 -74 27 -58) -74]
Test Case: 807 | Input/Output: [(23 10 89 89) 10]
Test Case: 808 | Input/Output: [(7 -64 70 1) -64]
Test Case: 809 | Input/Output: [(-1 -4 -43 -55) -55]
Test Case: 810 | Input/Output: [(-21 -20 13 82) -21]
Test Case: 811 | Input/Output: [(-97 97 25 46) -97]
Test Case: 812 | Input/Output: [(1 -40 67 -94) -94]
Test Case: 813 | Input/Output: [(-83 54 -18 28) -83]
Test Case: 814 | Input/Output: [(20 50 80 -41) -41]
Test Case: 815 | Input/Output: [(-92 58 78 -67) -92]
Test Case: 816 | Input/Output: [(-90 34 -2 98) -90]
Test Case: 817 | Input/Output: [(27 -2 -74 -38) -74]
Test Case: 818 | Input/Output: [(-9 24 39 -13) -13]
Test Case: 819 | Input/Output: [(-70 -19 -68 -50) -70]
Test Case: 820 | Input/Output: [(37 -31 -39 -26) -39]
Test Case: 821 | Input/Output: [(-87 49 -72 20) -87]
Test Case: 822 | Input/Output: [(66 -56 44 41) -56]
Test Case: 823 | Input/Output: [(-23 -79 -7 59) -79]
Test Case: 824 | Input/Output: [(99 -46 37 19) -46]
Test Case: 825 | Input/Output: [(-72 -63 86 -41) -72]
Test Case: 826 | Input/Output: [(-44 -38 -10 2) -44]
Test Case: 827 | Input/Output: [(-74 61 -2 -82) -82]
Test Case: 828 | Input/Output: [(96 90 -16 36) -16]
Test Case: 829 | Input/Output: [(95 -7 59 34) -7]
Test Case: 830 | Input/Output: [(-85 -23 56 25) -85]
Test Case: 831 | Input/Output: [(-100 55 -47 26) -100]
Test Case: 832 | Input/Output: [(1 -6 -57 -85) -85]
Test Case: 833 | Input/Output: [(-88 -86 -79 27) -88]
Test Case: 834 | Input/Output: [(-97 32 44 -77) -97]
Test Case: 835 | Input/Output: [(62 -1 74 99) -1]
Test Case: 836 | Input/Output: [(-26 97 -39 -87) -87]
Test Case: 837 | Input/Output: [(-42 -89 -1 86) -89]
Test Case: 838 | Input/Output: [(-10 -76 53 38) -76]
Test Case: 839 | Input/Output: [(26 -85 -39 -46) -85]
Test Case: 840 | Input/Output: [(-12 -90 -39 -72) -90]
Test Case: 841 | Input/Output: [(76 7 -52 -20) -52]
Test Case: 842 | Input/Output: [(-61 15 -11 -43) -61]
Test Case: 843 | Input/Output: [(42 84 -60 -90) -90]
Test Case: 844 | Input/Output: [(-70 94 -21 -24) -70]
Test Case: 845 | Input/Output: [(-94 15 -68 -9) -94]
Test Case: 846 | Input/Output: [(47 -37 70 -74) -74]
Test Case: 847 | Input/Output: [(69 -21 12 -26) -26]
Test Case: 848 | Input/Output: [(17 -34 -53 -93) -93]
Test Case: 849 | Input/Output: [(-35 -41 6 81) -41]
Test Case: 850 | Input/Output: [(-38 11 -80 -51) -80]
Test Case: 851 | Input/Output: [(7 21 40 -32) -32]
Test Case: 852 | Input/Output: [(43 14 -4 48) -4]
Test Case: 853 | Input/Output: [(-96 -11 82 -29) -96]
Test Case: 854 | Input/Output: [(-72 28 59 -7) -72]
Test Case: 855 | Input/Output: [(19 23 -65 9) -65]
Test Case: 856 | Input/Output: [(-17 -50 47 77) -50]
Test Case: 857 | Input/Output: [(-54 -47 -30 32) -54]
Test Case: 858 | Input/Output: [(51 -36 -99 25) -99]
Test Case: 859 | Input/Output: [(87 -47 -13 81) -47]
Test Case: 860 | Input/Output: [(28 -65 82 -14) -65]
Test Case: 861 | Input/Output: [(1 81 94 -73) -73]
Test Case: 862 | Input/Output: [(13 -87 -76 71) -87]
Test Case: 863 | Input/Output: [(-100 -74 23 58) -100]
Test Case: 864 | Input/Output: [(-25 -81 10 31) -81]
Test Case: 865 | Input/Output: [(28 90 -59 52) -59]
Test Case: 866 | Input/Output: [(-52 1 26 -14) -52]
Test Case: 867 | Input/Output: [(72 -77 36 29) -77]
Test Case: 868 | Input/Output: [(-83 24 -73 16) -83]
Test Case: 869 | Input/Output: [(47 -93 59 70) -93]
Test Case: 870 | Input/Output: [(-37 -86 34 -14) -86]
Test Case: 871 | Input/Output: [(100 -83 69 0) -83]
Test Case: 872 | Input/Output: [(98 96 -16 -87) -87]
Test Case: 873 | Input/Output: [(48 83 99 100) 48]
Test Case: 874 | Input/Output: [(-72 76 33 -31) -72]
Test Case: 875 | Input/Output: [(-11 -16 1 20) -16]
Test Case: 876 | Input/Output: [(-93 14 -88 52) -93]
Test Case: 877 | Input/Output: [(-74 26 -63 36) -74]
Test Case: 878 | Input/Output: [(-36 -68 -43 89) -68]
Test Case: 879 | Input/Output: [(-65 45 -22 -84) -84]
Test Case: 880 | Input/Output: [(77 -72 34 -75) -75]
Test Case: 881 | Input/Output: [(-35 84 -40 -41) -41]
Test Case: 882 | Input/Output: [(-97 13 -89 -60) -97]
Test Case: 883 | Input/Output: [(67 -11 72 28) -11]
Test Case: 884 | Input/Output: [(92 -18 -56 -79) -79]
Test Case: 885 | Input/Output: [(-76 8 70 31) -76]
Test Case: 886 | Input/Output: [(-72 8 17 -46) -72]
Test Case: 887 | Input/Output: [(-45 -18 -68 -86) -86]
Test Case: 888 | Input/Output: [(5 3 -94 38) -94]
Test Case: 889 | Input/Output: [(-77 -41 -27 -100) -100]
Test Case: 890 | Input/Output: [(-50 -64 -23 96) -64]
Test Case: 891 | Input/Output: [(82 -78 -16 66) -78]
Test Case: 892 | Input/Output: [(87 -5 -42 1) -42]
Test Case: 893 | Input/Output: [(34 97 -48 3) -48]
Test Case: 894 | Input/Output: [(-40 69 -20 2) -40]
Test Case: 895 | Input/Output: [(86 -79 53 75) -79]
Test Case: 896 | Input/Output: [(-88 83 -16 -52) -88]
Test Case: 897 | Input/Output: [(-93 -49 -67 -94) -94]
Test Case: 898 | Input/Output: [(93 -68 36 -37) -68]
Test Case: 899 | Input/Output: [(96 54 71 20) 20]
Test Case: 900 | Input/Output: [(-83 -6 79 21) -83]
Test Case: 901 | Input/Output: [(25 -15 -14 94) -15]
Test Case: 902 | Input/Output: [(-100 33 79 93) -100]
Test Case: 903 | Input/Output: [(-35 67 37 27) -35]
Test Case: 904 | Input/Output: [(-4 1 -1 -82) -82]
Test Case: 905 | Input/Output: [(-97 -23 24 2) -97]
Test Case: 906 | Input/Output: [(91 60 51 -94) -94]
Test Case: 907 | Input/Output: [(-75 -52 59 22) -75]
Test Case: 908 | Input/Output: [(35 47 -89 49) -89]
Test Case: 909 | Input/Output: [(-79 -65 -30 -46) -79]
Test Case: 910 | Input/Output: [(-7 -75 -19 -63) -75]
Test Case: 911 | Input/Output: [(-46 -87 -51 -75) -87]
Test Case: 912 | Input/Output: [(22 -66 -71 90) -71]
Test Case: 913 | Input/Output: [(-51 -43 22 -89) -89]
Test Case: 914 | Input/Output: [(86 -39 -7 -15) -39]
Test Case: 915 | Input/Output: [(77 -68 77 37) -68]
Test Case: 916 | Input/Output: [(-36 31 56 -15) -36]
Test Case: 917 | Input/Output: [(14 32 -27 -69) -69]
Test Case: 918 | Input/Output: [(-41 -30 82 -3) -41]
Test Case: 919 | Input/Output: [(40 -68 -48 -27) -68]
Test Case: 920 | Input/Output: [(-50 -3 -27 62) -50]
Test Case: 921 | Input/Output: [(9 -64 -74 61) -74]
Test Case: 922 | Input/Output: [(-43 -67 -61 76) -67]
Test Case: 923 | Input/Output: [(-27 -80 -42 -85) -85]
Test Case: 924 | Input/Output: [(-75 -32 -67 79) -75]
Test Case: 925 | Input/Output: [(-98 20 58 2) -98]
Test Case: 926 | Input/Output: [(-46 33 84 75) -46]
Test Case: 927 | Input/Output: [(41 65 78 27) 27]
Test Case: 928 | Input/Output: [(55 -3 8 -53) -53]
Test Case: 929 | Input/Output: [(-20 -82 -37 26) -82]
Test Case: 930 | Input/Output: [(-97 -29 -3 74) -97]
Test Case: 931 | Input/Output: [(-26 -23 99 -62) -62]
Test Case: 932 | Input/Output: [(22 65 -10 47) -10]
Test Case: 933 | Input/Output: [(-69 25 6 -71) -71]
Test Case: 934 | Input/Output: [(91 -91 -75 11) -91]
Test Case: 935 | Input/Output: [(6 73 -92 82) -92]
Test Case: 936 | Input/Output: [(81 45 -40 -4) -40]
Test Case: 937 | Input/Output: [(55 97 -30 -10) -30]
Test Case: 938 | Input/Output: [(68 1 -29 83) -29]
Test Case: 939 | Input/Output: [(-68 27 -47 -85) -85]
Test Case: 940 | Input/Output: [(-30 59 35 10) -30]
Test Case: 941 | Input/Output: [(6 -83 -16 -11) -83]
Test Case: 942 | Input/Output: [(-47 -96 -29 -20) -96]
Test Case: 943 | Input/Output: [(-78 10 -100 80) -100]
Test Case: 944 | Input/Output: [(28 23 -78 98) -78]
Test Case: 945 | Input/Output: [(-49 -46 46 -49) -49]
Test Case: 946 | Input/Output: [(38 88 -94 -55) -94]
Test Case: 947 | Input/Output: [(-62 84 -71 48) -71]
Test Case: 948 | Input/Output: [(66 -72 -89 -64) -89]
Test Case: 949 | Input/Output: [(16 -50 13 34) -50]
Test Case: 950 | Input/Output: [(-89 -99 82 60) -99]
Test Case: 951 | Input/Output: [(-72 52 49 32) -72]
Test Case: 952 | Input/Output: [(16 85 19 -100) -100]
Test Case: 953 | Input/Output: [(-55 98 -22 0) -55]
Test Case: 954 | Input/Output: [(91 -65 -89 76) -89]
Test Case: 955 | Input/Output: [(13 -75 53 74) -75]
Test Case: 956 | Input/Output: [(99 -92 -56 25) -92]
Test Case: 957 | Input/Output: [(-39 -4 93 -91) -91]
Test Case: 958 | Input/Output: [(98 64 -33 2) -33]
Test Case: 959 | Input/Output: [(54 39 66 75) 39]
Test Case: 960 | Input/Output: [(-67 -98 32 22) -98]
Test Case: 961 | Input/Output: [(-62 -40 18 -31) -62]
Test Case: 962 | Input/Output: [(-80 -31 -85 45) -85]
Test Case: 963 | Input/Output: [(-26 -44 -64 62) -64]
Test Case: 964 | Input/Output: [(33 59 -81 66) -81]
Test Case: 965 | Input/Output: [(-70 -78 -8 -5) -78]
Test Case: 966 | Input/Output: [(-37 -98 -43 -39) -98]
Test Case: 967 | Input/Output: [(96 93 -61 -12) -61]
Test Case: 968 | Input/Output: [(-26 40 -97 45) -97]
Test Case: 969 | Input/Output: [(52 63 34 68) 34]
Test Case: 970 | Input/Output: [(-37 -93 67 -37) -93]
Test Case: 971 | Input/Output: [(-74 -51 16 45) -74]
Test Case: 972 | Input/Output: [(-70 6 28 -65) -70]
Test Case: 973 | Input/Output: [(53 -81 -58 44) -81]
Test Case: 974 | Input/Output: [(29 78 28 -28) -28]
Test Case: 975 | Input/Output: [(81 -13 -81 82) -81]
Test Case: 976 | Input/Output: [(-9 -45 51 -36) -45]
Test Case: 977 | Input/Output: [(34 2 -41 54) -41]
Test Case: 978 | Input/Output: [(78 30 -71 70) -71]
Test Case: 979 | Input/Output: [(37 -57 -62 -64) -64]
Test Case: 980 | Input/Output: [(15 54 -25 -92) -92]
Test Case: 981 | Input/Output: [(-84 80 65 -96) -96]
Test Case: 982 | Input/Output: [(-18 -1 -70 -25) -70]
Test Case: 983 | Input/Output: [(-27 44 -16 0) -27]
Test Case: 984 | Input/Output: [(-55 75 -9 -11) -55]
Test Case: 985 | Input/Output: [(-57 69 -10 -50) -57]
Test Case: 986 | Input/Output: [(99 96 -71 -21) -71]
Test Case: 987 | Input/Output: [(90 88 94 -91) -91]
Test Case: 988 | Input/Output: [(11 -57 78 -9) -57]
Test Case: 989 | Input/Output: [(56 73 17 -87) -87]
Test Case: 990 | Input/Output: [(-22 -15 58 -42) -42]
Test Case: 991 | Input/Output: [(-4 98 71 38) -4]
Test Case: 992 | Input/Output: [(-40 -16 -24 -28) -40]
Test Case: 993 | Input/Output: [(69 -78 -1 -12) -78]
Test Case: 994 | Input/Output: [(96 -35 82 60) -35]
Test Case: 995 | Input/Output: [(-54 -90 23 -75) -90]
Test Case: 996 | Input/Output: [(-21 -63 62 56) -63]
Test Case: 997 | Input/Output: [(15 -81 89 23) -81]
Test Case: 998 | Input/Output: [(-81 35 18 -39) -81]
Test Case: 999 | Input/Output: [(-52 -62 -6 84) -62]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 6 -13 35 -61 110 -76 -21 103 13 -125 98 118 -29 -71 -89 74
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -13 -32 -32] -32] [[-71 -41 -71 -71] -71] [[93 93 93 55] 55] [[38 -25 -25 -25] -25] [[78 78 27 78] 27] [[-70 -70 -70 -5] -70] [[-51 -51 -28 -51] -51] [[-60 -60 95 -60] -60] [[-52 56 56 56] -52] [[91 91 98 91] 91] [(55 55 55 55) 55] [(-58 -58 -58 -58) -58] [(-62 -62 -62 -62) -62] [(-51 -51 -51 -51) -51] [(-35 -35 -35 -35) -35] [(91 96 70 28) 28] [(96 18 59 4) 4] [(7 49 39 31) 7] [(71 87 90 76) 71] [(64 23 42 44) 23] [(39 22 41 57) 22] [(64 35 45 78) 35] [(38 13 50 73) 13] [(77 58 72 20) 20] [(29 56 71 81) 29] [(34 5 36 46) 5] [(36 11 64 30) 11] [(33 51 42 34) 33] [(13 50 73 19) 13] [(78 54 73 71) 54] [(89 39 70 43) 39] [(84 99 77 56) 56] [(89 83 12 57) 12] [(21 12 27 65) 12] [(88 82 14 10) 10] [(-49 70 86 -93) -93] [(-71 18 -87 -77) -87] [(18 -63 76 6) -63] [(83 -6 -97 54) -97] [(58 -38 73 -78) -78] [(20 55 -40 -18) -40] [(-15 0 -75 85) -75] [(4 25 47 -61) -61] [(31 40 -51 26) -51] [(-21 41 -10 -75) -75] [(11 40 -9 -22) -22] [(-80 -50 -78 83) -80] [(51 54 -51 62) -51] [(-66 95 -73 -29) -73] [(-83 -39 -66 11) -83] [(71 14 69 -51) -51] [(85 -36 -16 73) -36] [(-49 -58 62 -56) -58] [(-53 -12 100 69) -53] [(-50 -90 83 73) -90] [(72 73 -37 75) -37] [(92 -65 -5 -76) -76] [(64 73 17 -52) -52] [(-22 83 -93 10) -93] [(-75 19 48 63) -75] [(-72 70 24 -47) -72] [(-53 83 -30 -49) -53] [(-22 -62 70 -43) -62] [(85 27 30 26) 26] [(-67 -2 -54 43) -67] [(-3 -95 50 -42) -95] [(-13 -11 85 86) -13] [(-100 99 -23 -63) -100] [(-46 -37 -41 -20) -46] [(-83 38 26 66) -83] [(-69 -89 17 -85) -89] [(89 -94 -70 54) -94] [(81 0 -89 60) -89] [(24 0 -20 -48) -48] [(46 46 -45 -77) -77] [(92 -9 53 -4) -9] [(82 -46 45 -97) -97] [(32 -1 18 -9) -9] [(17 -70 -6 -59) -70] [(3 -24 62 -26) -26] [(-60 67 14 -76) -76] [(-24 15 -19 -24) -24] [(-15 98 75 -62) -62] [(91 67 47 -39) -39] [(49 -23 -9 -85) -85] [(52 -43 34 29) -43] [(-34 56 51 -24) -34] [(31 88 44 -16) -16] [(-45 -92 -10 -94) -94] [(-46 -13 -16 17) -46] [(60 58 -9 90) -9] [(-84 60 91 94) -84] [(-45 1 9 87) -45] [(-17 82 39 -29) -29] [(-77 11 75 -51) -77])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: 38                 
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 64                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 78                 
Correct output: 39                  | Program output: 89                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 89                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 88                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: 18                 
Correct output: -97                 | Program output: 83                 
Correct output: -78                 | Program output: 58                 
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 71                 
Correct output: -36                 | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: 92                 
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -22                
Correct output: 26                  | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -3                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -69                
Correct output: -94                 | Program output: 89                 
Correct output: -89                 | Program output: 81                 
Correct output: -48                 | Program output: 24                 
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: 92                 
Correct output: -97                 | Program output: 82                 
Correct output: -9                  | Program output: 32                 
Correct output: -70                 | Program output: 17                 
Correct output: -26                 | Program output: 3                  
Correct output: -76                 | Program output: -60                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 91                 
Correct output: -85                 | Program output: 49                 
Correct output: -43                 | Program output: 52                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 60                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when})
Lexicase best program: (integer_rot in1 print_integer exec_when ())
Lexicase best errors: [1 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 6
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when})
Zero cases best program: (integer_rot in1 print_integer exec_when ())
Zero cases best errors: [1 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 6
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 4 5 5 5 19 4 4 4 13)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (5 4 5 5 5 19 4 4 4 13)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_boolean_178} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_yank})
Best program: (integer_stackdepth integer_rot integer_fromboolean in1 print_integer boolean_or exec_y_when_autoconstructing (boolean_yank) boolean_shove exec_while (boolean_and exec_s_when_autoconstructing (exec_if (in1 in2 boolean_rot integer_shove boolean_invert_second_then_and exec_swap () (boolean_dup) print_exec (exec_y_when_autoconstructing () integer_yankdup boolean_not boolean_swap tag_boolean_178) boolean_dup_times integer_empty integer_mod) (exec_dup (in2 integer_swap integer_gte print_integer exec_dup_items boolean_yankdup print_boolean) exec_yank exec_noop) print_newline integer_stackdepth) (exec_y_when_autoconstructing (exec_do*times () in1 exec_do*range (exec_yank integer_dup integer_inc in4 exec_dup_items integer_dec boolean_swap) exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_gt integer_dec exec_if () (integer_empty exec_k (exec_if (integer_sub integer_dup_times) (exec_dup_times (in4) exec_stackdepth boolean_frominteger boolean_not exec_dup_times (boolean_invert_second_then_and) exec_s_when_autoconstructing (integer_yankdup exec_yankdup integer_pop exec_eq integer_swap exec_dup_times (boolean_rot exec_do*times (exec_do*times (exec_swap (exec_flush boolean_eq integer_yankdup exec_yank exec_k (exec_swap () (exec_yank) exec_k_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank) (integer_yank) ()) ()) ()) ())))) () ())) ()))))) ()))
Errors: [1 1 1 1 0 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 91
Size: 136
Percent parens: 0.331
--- Population Statistics ---
Average total errors in population: 9.932
Median total errors in population: 10
Error averages by case: (0.995 0.996 0.995 0.995 0.995 0.981 0.996 0.996 0.996 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.19
Average program size in population (points): 70.321
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 485645
--- Timings ---
Current time: 1559593930533 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.7%
Fitness Testing:      1.8 seconds, 68.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 57                 
Correct output: 35                  | Program output: 78                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 81                 
Correct output: 5                   | Program output: 46                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 85                 
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: 83                 
Correct output: -51                 | Program output: 62                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: 11                 
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: 69                 
Correct output: -90                 | Program output: 73                 
Correct output: -37                 | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 63                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: 43                 
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: 86                 
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -20                
Correct output: -83                 | Program output: 66                 
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 17                 
Correct output: -9                  | Program output: 90                 
Correct output: -84                 | Program output: 94                 
Correct output: -45                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_447} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_yank integer_gte integer_div exec_do*times (integer_rot in4) exec_if (exec_y_when_autoconstructing () integer_mod print_integer integer_stackdepth exec_dup_times (integer_add integer_dup exec_dup_times () in3 exec_yankdup boolean_dup_times exec_while (exec_do*range (boolean_dup_items integer_div boolean_invert_first_then_and exec_do*while (boolean_shove in3 exec_yank integer_inc exec_s_when_autoconstructing (boolean_stackdepth integer_lt exec_y_when_autoconstructing (integer_min integer_inc exec_do*count (tagged_447) integer_pop) boolean_eq integer_mod) (exec_dup (exec_if (exec_noop integer_gte boolean_pop exec_pop (integer_yankdup integer_dup_times integer_min boolean_xor integer_add boolean_dup_times) integer_pop) (boolean_rot boolean_rot boolean_yankdup boolean_frominteger boolean_dup_times integer_add integer_lt) integer_empty boolean_dup integer_dec exec_y () integer_lt exec_k () () exec_s (in3 boolean_stackdepth exec_do*count (integer_eq integer_dup boolean_swap)) (exec_flush exec_empty) ())) ()))))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 100
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_447} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_yank integer_gte integer_div exec_do*times (integer_rot in4) exec_if (exec_y_when_autoconstructing () integer_mod print_integer integer_stackdepth exec_dup_times (integer_add integer_dup exec_dup_times () in3 exec_yankdup boolean_dup_times exec_while (exec_do*range (boolean_dup_items integer_div boolean_invert_first_then_and exec_do*while (boolean_shove in3 exec_yank integer_inc exec_s_when_autoconstructing (boolean_stackdepth integer_lt exec_y_when_autoconstructing (integer_min integer_inc exec_do*count (tagged_447) integer_pop) boolean_eq integer_mod) (exec_dup (exec_if (exec_noop integer_gte boolean_pop exec_pop (integer_yankdup integer_dup_times integer_min boolean_xor integer_add boolean_dup_times) integer_pop) (boolean_rot boolean_rot boolean_yankdup boolean_frominteger boolean_dup_times integer_add integer_lt) integer_empty boolean_dup integer_dec exec_y () integer_lt exec_k () () exec_s (in3 boolean_stackdepth exec_do*count (integer_eq integer_dup boolean_swap)) (exec_flush exec_empty) ())) ()))))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 100
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 147 559 146 73 316 559 148 148 244)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (146 147 559 146 73 316 559 148 148 244)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_empty} {:close 0, :instruction -54} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove})
Best program: (exec_rot (boolean_and integer_fromboolean exec_stackdepth exec_dup () integer_inc integer_dup_items) () (boolean_dup_times boolean_yankdup integer_min integer_dup integer_rot boolean_dup_times exec_if () (exec_k_when_autoconstructing (boolean_flush integer_yankdup boolean_dup integer_sub) (exec_do*times (exec_noop exec_yankdup) exec_while () exec_stackdepth integer_rot print_boolean boolean_empty boolean_rot in4 print_integer) integer_swap exec_noop exec_empty) -54 integer_shove boolean_dup_times integer_max) exec_pop () exec_rot (exec_s_when_autoconstructing () (boolean_pop integer_empty) (integer_shove boolean_and boolean_shove)) () ())
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 45
Size: 63
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.514
Median total errors in population: 7
Error averages by case: (0.854 0.853 0.441 0.854 0.927 0.684 0.441 0.852 0.852 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.929
Average program size in population (points): 83.631
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 972438
--- Timings ---
Current time: 1559593932805 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         1.8 seconds, 37.7%
Fitness Testing:      2.6 seconds, 54.0%
Report:               0.3 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 465
Test mean error for best: 0.46500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 41                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 50                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 71                 
Correct output: 5                   | Program output: 36                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -66                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: 69                 
Correct output: -90                 | Program output: 73                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 48                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -54                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: 85                 
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -41                
Correct output: -83                 | Program output: 26                 
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -16                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: 91                 
Correct output: -45                 | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_504})
Lexicase best program: (boolean_pop integer_div integer_gte in4 integer_lte in3 integer_min exec_y_when_autoconstructing (exec_y (integer_fromboolean print_integer) in3 exec_flush integer_empty exec_y (in4 exec_k_when_autoconstructing (exec_do*count (boolean_eq integer_lte integer_mult exec_yankdup boolean_not exec_while (integer_rot) integer_dup_items boolean_invert_first_then_and) exec_if (integer_gte exec_dup_items integer_mod integer_lte) (exec_dup_items exec_stackdepth) exec_k (exec_do*range (tag_integer_504)) ()) ())))
Lexicase best errors: [0 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_504})
Zero cases best program: (boolean_pop integer_div integer_gte in4 integer_lte in3 integer_min exec_y_when_autoconstructing (exec_y (integer_fromboolean print_integer) in3 exec_flush integer_empty exec_y (in4 exec_k_when_autoconstructing (exec_do*count (boolean_eq integer_lte integer_mult exec_yankdup boolean_not exec_while (integer_rot) integer_dup_items boolean_invert_first_then_and) exec_if (integer_gte exec_dup_items integer_mod integer_lte) (exec_dup_items exec_stackdepth) exec_k (exec_do*range (tag_integer_504)) ()) ())))
Zero cases best errors: [0 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (616 93 448 6 7 73 454 7 73 91)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (616 93 448 6 7 73 454 7 73 91)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction -4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while})
Best program: (in3 integer_div integer_gte in4 integer_min exec_y_when_autoconstructing (integer_rot exec_y (print_integer) in3 exec_flush boolean_flush exec_dup (integer_empty in4 exec_k_when_autoconstructing (exec_do*count (boolean_eq integer_lte integer_mult exec_yankdup exec_while (integer_rot) integer_gte integer_mod -4 integer_lte) exec_y_when_autoconstructing (exec_do*while ())) ())))
Errors: [0 1 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.132
Median total errors in population: 7
Error averages by case: (0.384 0.907 0.552 0.994 0.993 0.927 0.546 0.993 0.927 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.678
Average program size in population (points): 76.921
Average percent parens in population: 0.263
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1487012
--- Timings ---
Current time: 1559593935576 milliseconds
Total Time:           7.3 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.2 seconds, 43.6%
Fitness Testing:      3.3 seconds, 45.1%
Report:               0.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_div in4 integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot boolean_yankdup print_integer) in3 exec_flush boolean_and print_newline integer_empty in4 exec_k_when_autoconstructing (exec_do*count (in4 integer_lte exec_yankdup boolean_not boolean_not exec_while (integer_rot) boolean_invert_first_then_and) integer_gte exec_dup_items integer_mod integer_lte) (boolean_yank exec_k (tag_integer_504 exec_do*while (exec_do*count (boolean_swap))) ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_div in4 integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot boolean_yankdup print_integer) in3 exec_flush boolean_and print_newline integer_empty in4 exec_k_when_autoconstructing (exec_do*count (in4 integer_lte exec_yankdup boolean_not boolean_not exec_while (integer_rot) boolean_invert_first_then_and) integer_gte exec_dup_items integer_mod integer_lte) (boolean_yank exec_k (tag_integer_504 exec_do*while (exec_do*count (boolean_swap))) ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (615 296 610 155 297 154 155 614 152 155)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (615 296 610 155 297 154 155 614 152 155)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (integer_div in4 integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 exec_flush print_newline exec_s (in4 exec_k_when_autoconstructing (exec_do*count (in4 boolean_not exec_while (integer_rot) boolean_invert_first_then_and) integer_gte exec_dup_items exec_y_when_autoconstructing (integer_mod integer_gte integer_lte) exec_k (boolean_empty exec_do*while (exec_do*count (integer_fromboolean integer_sub))) ()) ()) () ())
Errors: [0 1 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 46
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.797
Median total errors in population: 6
Error averages by case: (0.385 0.704 0.39 0.845 0.703 0.846 0.845 0.386 0.848 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.263
Average program size in population (points): 45.636
Average percent parens in population: 0.249
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2208272
--- Timings ---
Current time: 1559593937635 milliseconds
Total Time:           9.9 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.3 seconds, 43.8%
Fitness Testing:      4.1 seconds, 41.0%
Report:               1.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub})
Lexicase best program: (integer_div in4 integer_shove in2 integer_min exec_y_when_autoconstructing (print_integer) in3 exec_flush print_newline integer_empty in4 exec_k_when_autoconstructing (exec_do*count (exec_stackdepth in4 integer_lte exec_yankdup boolean_not exec_while (exec_k_when_autoconstructing () (integer_rot) boolean_invert_first_then_and) integer_gte exec_do*times (integer_mod integer_lte) exec_k (exec_do*while (exec_do*count (integer_sub))) ())) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub})
Zero cases best program: (integer_div in4 integer_shove in2 integer_min exec_y_when_autoconstructing (print_integer) in3 exec_flush print_newline integer_empty in4 exec_k_when_autoconstructing (exec_do*count (exec_stackdepth in4 integer_lte exec_yankdup boolean_not exec_while (exec_k_when_autoconstructing () (integer_rot) boolean_invert_first_then_and) integer_gte exec_do*times (integer_mod integer_lte) exec_k (exec_do*while (exec_do*count (integer_sub))) ())) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 659 394 606 76 391 606 607 392 191)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (384 659 394 606 76 391 606 607 392 191)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub})
Best program: (in4 in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) boolean_eq in3 exec_flush print_newline integer_empty in4 integer_gte exec_k_when_autoconstructing () (exec_do*count (in4 boolean_swap boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items boolean_invert_first_then_and integer_mod integer_lte) exec_k (tag_integer_504 exec_do*while (exec_do*count (integer_sub))) ())
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.694
Median total errors in population: 5
Error averages by case: (0.616 0.341 0.606 0.394 0.924 0.609 0.394 0.393 0.608 0.809)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.774
Average program size in population (points): 43.608
Average percent parens in population: 0.247
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2679152
--- Timings ---
Current time: 1559593939525 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.6 seconds, 47.3%
Fitness Testing:      4.6 seconds, 38.8%
Report:               1.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 388
Test mean error for best: 0.38800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 82                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: -60                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_div integer_mult in4 integer_shove in1 in2 integer_min boolean_and exec_y_when_autoconstructing (integer_rot boolean_swap print_integer) in3 exec_yank exec_flush print_newline integer_empty in4 exec_do*count (exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items exec_yankdup integer_mod integer_lte exec_k (exec_swap (tag_integer_504 exec_do*while (exec_do*count ())) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_div integer_mult in4 integer_shove in1 in2 integer_min boolean_and exec_y_when_autoconstructing (integer_rot boolean_swap print_integer) in3 exec_yank exec_flush print_newline integer_empty in4 exec_do*count (exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items exec_yankdup integer_mod integer_lte exec_k (exec_swap (tag_integer_504 exec_do*while (exec_do*count ())) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 673 540 102 487 486 101 477 284 101)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (100 673 540 102 487 486 101 477 284 101)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Best program: (integer_div integer_mult in4 integer_shove in1 in2 integer_min boolean_and exec_y_when_autoconstructing (integer_rot boolean_swap print_integer) in3 exec_yank exec_flush print_newline integer_empty in4 exec_do*count (exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items exec_yankdup integer_mod integer_lte exec_k (exec_swap (tag_integer_504 exec_do*while (exec_do*count ())) ()) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.649
Median total errors in population: 5
Error averages by case: (0.9 0.327 0.46 0.898 0.513 0.514 0.899 0.523 0.716 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.222
Average program size in population (points): 43.929
Average percent parens in population: 0.242
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3065883
--- Timings ---
Current time: 1559593941267 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 49.9%
Fitness Testing:      5.0 seconds, 36.9%
Report:               1.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 351
Test mean error for best: 0.35100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 70                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 39                 
Correct output: 71                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 42                 
Correct output: 13                  | Program output: 50                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: -66                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 26                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -16                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_do*range (in3 exec_dup (in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 integer_empty in4 exec_k_when_autoconstructing (exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) integer_gte integer_mod integer_lte) (exec_k (tag_integer_504 exec_do*count (integer_gt integer_sub)) ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_do*range (in3 exec_dup (in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 integer_empty in4 exec_k_when_autoconstructing (exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) integer_gte integer_mod integer_lte) (exec_k (tag_integer_504 exec_do*count (integer_gt integer_sub)) ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 75 404 75 330 672 409 439 401 400)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (439 75 404 75 330 672 409 439 401 400)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Best program: (integer_div exec_do*range (in3 exec_dup (in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 integer_empty in4 exec_k_when_autoconstructing (exec_do*count (integer_lte exec_yankdup exec_while (integer_rot) boolean_invert_first_then_and) integer_gte integer_mod exec_k (tag_integer_504 exec_do*count (exec_do*count (integer_gt integer_sub))) ()) ()))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 29
Size: 41
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.356
Median total errors in population: 6
Error averages by case: (0.561 0.925 0.596 0.925 0.67 0.328 0.591 0.561 0.599 0.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.786
Average program size in population (points): 44.473
Average percent parens in population: 0.239
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3562659
--- Timings ---
Current time: 1559593943414 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.9 seconds, 51.5%
Fitness Testing:      5.5 seconds, 35.8%
Report:               1.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 185
Test mean error for best: 0.18500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_504} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_div integer_mult in4 integer_stackdepth integer_shove in1 in2 integer_min integer_min boolean_and exec_y_when_autoconstructing (integer_rot print_integer) in3 exec_stackdepth exec_yank exec_flush print_newline integer_empty exec_stackdepth exec_do*count (exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items exec_yankdup integer_swap integer_lte exec_k (exec_swap (integer_dup boolean_stackdepth tag_integer_504 integer_gte exec_do*while (exec_do*count ())) ()) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_504} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_div integer_mult in4 integer_stackdepth integer_shove in1 in2 integer_min integer_min boolean_and exec_y_when_autoconstructing (integer_rot print_integer) in3 exec_stackdepth exec_yank exec_flush print_newline integer_empty exec_stackdepth exec_do*count (exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items exec_yankdup integer_swap integer_lte exec_k (exec_swap (integer_dup boolean_stackdepth tag_integer_504 integer_gte exec_do*while (exec_do*count ())) ()) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 487 486 487 265 271 105 660 274 520)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (245 487 486 487 265 271 105 660 274 520)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Best program: (integer_div integer_mult in4 integer_stackdepth integer_shove in1 in2 integer_min integer_min exec_y_when_autoconstructing (boolean_swap print_integer) in3 exec_stackdepth exec_yank integer_lt exec_flush integer_empty in4 exec_do*count (exec_yankdup boolean_not exec_while (integer_rot) boolean_invert_first_then_and) exec_dup_items exec_yankdup integer_mod integer_swap integer_gte integer_lte integer_shove exec_k (exec_swap (integer_dup boolean_stackdepth tag_integer_504 exec_do*while (exec_do*count ())) ()) ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.2
Median total errors in population: 5
Error averages by case: (0.755 0.513 0.514 0.513 0.735 0.729 0.895 0.34 0.726 0.48)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.357
Average program size in population (points): 45.512
Average percent parens in population: 0.246
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4141341
--- Timings ---
Current time: 1559593945287 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 51.4%
Fitness Testing:      6.1 seconds, 34.6%
Report:               2.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 678 611 333 523 522 357 499 590 194)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (522 678 611 333 523 522 357 499 590 194)
Population mean number of perfect (error zero) cases: 4.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_504} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt})
Best program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.171
Median total errors in population: 5
Error averages by case: (0.478 0.322 0.389 0.667 0.477 0.478 0.643 0.501 0.41 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.991
Average program size in population (points): 48.214
Average percent parens in population: 0.232
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.011
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4609843
--- Timings ---
Current time: 1559593947408 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 52.6%
Fitness Testing:      6.5 seconds, 33.8%
Report:               2.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 44


Auto-simplifying with starting size: 44
step: 0
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 500
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 1000
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 1500
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 2000
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 2500
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 3000
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 3500
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 4000
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 4500
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

step: 5000
program: (integer_min exec_do*range (in1 in3 exec_dup (integer_min in4) integer_shove in2 integer_min exec_y_when_autoconstructing (integer_rot print_integer) in3 print_boolean) boolean_invert_second_then_and integer_empty exec_shove (in4 exec_do*while () exec_do*count (in4 integer_lte exec_yankdup boolean_not exec_while (boolean_invert_first_then_and) integer_gte boolean_frominteger exec_yank boolean_pop integer_lte) tag_integer_504 exec_do*count (integer_gt)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 44

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
