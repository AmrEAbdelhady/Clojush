Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-6 9 -6 -6] -6] [[-57 -57 -57 37] -57] [[-56 -56 0 -56] -56] [[12 12 93 12] 12] [[-16 -16 -16 -93] -93] [[3 6 6 6] 3] [[33 -91 -91 -91] -91] [[-1 -21 -1 -1] -21] [[-96 74 74 74] -96] [[-98 -36 -98 -98] -98] [(-95 -95 -95 -95) -95] [(-70 -70 -70 -70) -70] [(-49 -49 -49 -49) -49] [(-75 -75 -75 -75) -75] [(-51 -51 -51 -51) -51] [(20 3 89 86) 3] [(88 29 26 18) 18] [(78 9 50 84) 9] [(87 28 5 73) 5] [(69 63 58 93) 58] [(66 6 92 30) 6] [(3 74 40 64) 3] [(47 96 80 67) 47] [(21 31 55 76) 21] [(58 76 14 28) 14] [(26 87 21 25) 21] [(44 8 77 88) 8] [(73 14 42 43) 14] [(50 17 69 91) 17] [(57 5 77 67) 5] [(30 34 26 26) 26] [(18 52 42 63) 18] [(94 28 6 83) 6] [(33 79 98 43) 33] [(6 85 82 79) 6] [(-64 0 93 35) -64] [(-83 -31 49 -75) -83] [(44 -56 -75 -50) -75] [(88 62 5 -51) -51] [(75 -95 -44 93) -95] [(-60 66 54 -95) -95] [(12 -27 60 -29) -29] [(-99 -50 -70 64) -99] [(67 -15 -79 19) -79] [(20 52 60 38) 20] [(20 -45 19 -6) -45] [(-41 -80 61 47) -80] [(74 -79 -15 -69) -79] [(36 76 13 -34) -34] [(-87 35 -44 70) -87] [(-36 -60 -95 -40) -95] [(24 72 72 73) 24] [(88 84 -45 20) -45] [(44 -62 38 -100) -100] [(-10 72 -17 -77) -77] [(62 -78 -26 -1) -78] [(-43 54 -26 -67) -67] [(26 -24 -38 27) -38] [(-47 74 -81 -35) -81] [(-73 -68 16 74) -73] [(-9 21 -33 -29) -33] [(8 85 12 93) 8] [(39 -97 79 29) -97] [(72 -4 25 84) -4] [(24 83 1 6) 1] [(-92 40 98 40) -92] [(-94 -77 30 -32) -94] [(-65 -86 100 -99) -99] [(87 76 37 -70) -70] [(-15 -14 -31 85) -31] [(-31 -61 54 -52) -61] [(-71 -81 25 -90) -90] [(9 -90 66 -65) -90] [(-13 -56 -75 91) -75] [(20 -52 -79 -55) -79] [(8 10 -47 -56) -56] [(62 51 -41 45) -41] [(31 -62 1 93) -62] [(-93 -8 18 -48) -93] [(-92 86 -43 -88) -92] [(93 -60 99 31) -60] [(48 -82 17 -56) -82] [(6 -72 -74 52) -74] [(26 -57 72 -4) -57] [(70 86 14 17) 14] [(41 -88 -62 4) -88] [(-24 -18 -44 -17) -44] [(5 -94 -43 31) -94] [(-45 -12 27 -90) -90] [(-59 -80 -12 55) -80] [(-81 -25 25 58) -81] [(60 -65 96 -51) -65] [(65 -64 -3 -86) -86] [(27 -30 -55 46) -55] [(54 56 36 53) 36])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-6 9 -6 -6] -6]
Train Case:   6 | Input/Output: [[-57 -57 -57 37] -57]
Train Case:   7 | Input/Output: [[-56 -56 0 -56] -56]
Train Case:   8 | Input/Output: [[12 12 93 12] 12]
Train Case:   9 | Input/Output: [[-16 -16 -16 -93] -93]
Train Case:  10 | Input/Output: [[3 6 6 6] 3]
Train Case:  11 | Input/Output: [[33 -91 -91 -91] -91]
Train Case:  12 | Input/Output: [[-1 -21 -1 -1] -21]
Train Case:  13 | Input/Output: [[-96 74 74 74] -96]
Train Case:  14 | Input/Output: [[-98 -36 -98 -98] -98]
Train Case:  15 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  16 | Input/Output: [(-70 -70 -70 -70) -70]
Train Case:  17 | Input/Output: [(-49 -49 -49 -49) -49]
Train Case:  18 | Input/Output: [(-75 -75 -75 -75) -75]
Train Case:  19 | Input/Output: [(-51 -51 -51 -51) -51]
Train Case:  20 | Input/Output: [(20 3 89 86) 3]
Train Case:  21 | Input/Output: [(88 29 26 18) 18]
Train Case:  22 | Input/Output: [(78 9 50 84) 9]
Train Case:  23 | Input/Output: [(87 28 5 73) 5]
Train Case:  24 | Input/Output: [(69 63 58 93) 58]
Train Case:  25 | Input/Output: [(66 6 92 30) 6]
Train Case:  26 | Input/Output: [(3 74 40 64) 3]
Train Case:  27 | Input/Output: [(47 96 80 67) 47]
Train Case:  28 | Input/Output: [(21 31 55 76) 21]
Train Case:  29 | Input/Output: [(58 76 14 28) 14]
Train Case:  30 | Input/Output: [(26 87 21 25) 21]
Train Case:  31 | Input/Output: [(44 8 77 88) 8]
Train Case:  32 | Input/Output: [(73 14 42 43) 14]
Train Case:  33 | Input/Output: [(50 17 69 91) 17]
Train Case:  34 | Input/Output: [(57 5 77 67) 5]
Train Case:  35 | Input/Output: [(30 34 26 26) 26]
Train Case:  36 | Input/Output: [(18 52 42 63) 18]
Train Case:  37 | Input/Output: [(94 28 6 83) 6]
Train Case:  38 | Input/Output: [(33 79 98 43) 33]
Train Case:  39 | Input/Output: [(6 85 82 79) 6]
Train Case:  40 | Input/Output: [(-64 0 93 35) -64]
Train Case:  41 | Input/Output: [(-83 -31 49 -75) -83]
Train Case:  42 | Input/Output: [(44 -56 -75 -50) -75]
Train Case:  43 | Input/Output: [(88 62 5 -51) -51]
Train Case:  44 | Input/Output: [(75 -95 -44 93) -95]
Train Case:  45 | Input/Output: [(-60 66 54 -95) -95]
Train Case:  46 | Input/Output: [(12 -27 60 -29) -29]
Train Case:  47 | Input/Output: [(-99 -50 -70 64) -99]
Train Case:  48 | Input/Output: [(67 -15 -79 19) -79]
Train Case:  49 | Input/Output: [(20 52 60 38) 20]
Train Case:  50 | Input/Output: [(20 -45 19 -6) -45]
Train Case:  51 | Input/Output: [(-41 -80 61 47) -80]
Train Case:  52 | Input/Output: [(74 -79 -15 -69) -79]
Train Case:  53 | Input/Output: [(36 76 13 -34) -34]
Train Case:  54 | Input/Output: [(-87 35 -44 70) -87]
Train Case:  55 | Input/Output: [(-36 -60 -95 -40) -95]
Train Case:  56 | Input/Output: [(24 72 72 73) 24]
Train Case:  57 | Input/Output: [(88 84 -45 20) -45]
Train Case:  58 | Input/Output: [(44 -62 38 -100) -100]
Train Case:  59 | Input/Output: [(-10 72 -17 -77) -77]
Train Case:  60 | Input/Output: [(62 -78 -26 -1) -78]
Train Case:  61 | Input/Output: [(-43 54 -26 -67) -67]
Train Case:  62 | Input/Output: [(26 -24 -38 27) -38]
Train Case:  63 | Input/Output: [(-47 74 -81 -35) -81]
Train Case:  64 | Input/Output: [(-73 -68 16 74) -73]
Train Case:  65 | Input/Output: [(-9 21 -33 -29) -33]
Train Case:  66 | Input/Output: [(8 85 12 93) 8]
Train Case:  67 | Input/Output: [(39 -97 79 29) -97]
Train Case:  68 | Input/Output: [(72 -4 25 84) -4]
Train Case:  69 | Input/Output: [(24 83 1 6) 1]
Train Case:  70 | Input/Output: [(-92 40 98 40) -92]
Train Case:  71 | Input/Output: [(-94 -77 30 -32) -94]
Train Case:  72 | Input/Output: [(-65 -86 100 -99) -99]
Train Case:  73 | Input/Output: [(87 76 37 -70) -70]
Train Case:  74 | Input/Output: [(-15 -14 -31 85) -31]
Train Case:  75 | Input/Output: [(-31 -61 54 -52) -61]
Train Case:  76 | Input/Output: [(-71 -81 25 -90) -90]
Train Case:  77 | Input/Output: [(9 -90 66 -65) -90]
Train Case:  78 | Input/Output: [(-13 -56 -75 91) -75]
Train Case:  79 | Input/Output: [(20 -52 -79 -55) -79]
Train Case:  80 | Input/Output: [(8 10 -47 -56) -56]
Train Case:  81 | Input/Output: [(62 51 -41 45) -41]
Train Case:  82 | Input/Output: [(31 -62 1 93) -62]
Train Case:  83 | Input/Output: [(-93 -8 18 -48) -93]
Train Case:  84 | Input/Output: [(-92 86 -43 -88) -92]
Train Case:  85 | Input/Output: [(93 -60 99 31) -60]
Train Case:  86 | Input/Output: [(48 -82 17 -56) -82]
Train Case:  87 | Input/Output: [(6 -72 -74 52) -74]
Train Case:  88 | Input/Output: [(26 -57 72 -4) -57]
Train Case:  89 | Input/Output: [(70 86 14 17) 14]
Train Case:  90 | Input/Output: [(41 -88 -62 4) -88]
Train Case:  91 | Input/Output: [(-24 -18 -44 -17) -44]
Train Case:  92 | Input/Output: [(5 -94 -43 31) -94]
Train Case:  93 | Input/Output: [(-45 -12 27 -90) -90]
Train Case:  94 | Input/Output: [(-59 -80 -12 55) -80]
Train Case:  95 | Input/Output: [(-81 -25 25 58) -81]
Train Case:  96 | Input/Output: [(60 -65 96 -51) -65]
Train Case:  97 | Input/Output: [(65 -64 -3 -86) -86]
Train Case:  98 | Input/Output: [(27 -30 -55 46) -55]
Train Case:  99 | Input/Output: [(54 56 36 53) 36]
Test Case:   0 | Input/Output: [[59 59 59 -35] -35]
Test Case:   1 | Input/Output: [[-45 -45 -18 -45] -45]
Test Case:   2 | Input/Output: [[-67 -25 -67 -67] -67]
Test Case:   3 | Input/Output: [[42 -4 42 42] -4]
Test Case:   4 | Input/Output: [[42 -87 42 42] -87]
Test Case:   5 | Input/Output: [[61 -6 -6 -6] -6]
Test Case:   6 | Input/Output: [[44 59 44 44] 44]
Test Case:   7 | Input/Output: [[58 58 -75 58] -75]
Test Case:   8 | Input/Output: [[49 -91 49 49] -91]
Test Case:   9 | Input/Output: [[-46 -46 98 -46] -46]
Test Case:  10 | Input/Output: [[93 -57 93 93] -57]
Test Case:  11 | Input/Output: [[-7 -7 -7 93] -7]
Test Case:  12 | Input/Output: [[-79 -78 -78 -78] -79]
Test Case:  13 | Input/Output: [[-92 -92 -97 -92] -97]
Test Case:  14 | Input/Output: [[-83 -83 -83 55] -83]
Test Case:  15 | Input/Output: [[66 48 66 66] 48]
Test Case:  16 | Input/Output: [[63 63 63 -38] -38]
Test Case:  17 | Input/Output: [[8 40 40 40] 8]
Test Case:  18 | Input/Output: [[19 96 19 19] 19]
Test Case:  19 | Input/Output: [[78 78 78 -43] -43]
Test Case:  20 | Input/Output: [[-49 -81 -81 -81] -81]
Test Case:  21 | Input/Output: [[57 57 57 78] 57]
Test Case:  22 | Input/Output: [[66 57 66 66] 57]
Test Case:  23 | Input/Output: [[-13 -13 -7 -13] -13]
Test Case:  24 | Input/Output: [[67 67 -87 67] -87]
Test Case:  25 | Input/Output: [[44 -50 44 44] -50]
Test Case:  26 | Input/Output: [[-95 -60 -95 -95] -95]
Test Case:  27 | Input/Output: [[-70 8 -70 -70] -70]
Test Case:  28 | Input/Output: [[-47 -47 -91 -47] -91]
Test Case:  29 | Input/Output: [[96 -67 96 96] -67]
Test Case:  30 | Input/Output: [[27 8 8 8] 8]
Test Case:  31 | Input/Output: [[-77 -47 -47 -47] -77]
Test Case:  32 | Input/Output: [[-84 29 29 29] -84]
Test Case:  33 | Input/Output: [[99 99 30 99] 30]
Test Case:  34 | Input/Output: [[-53 -53 75 -53] -53]
Test Case:  35 | Input/Output: [[-77 -33 -77 -77] -77]
Test Case:  36 | Input/Output: [[32 32 -92 32] -92]
Test Case:  37 | Input/Output: [[-19 66 66 66] -19]
Test Case:  38 | Input/Output: [[-54 -54 -49 -54] -54]
Test Case:  39 | Input/Output: [[6 6 6 -85] -85]
Test Case:  40 | Input/Output: [[97 -25 -25 -25] -25]
Test Case:  41 | Input/Output: [[-56 -56 -56 29] -56]
Test Case:  42 | Input/Output: [[-48 -48 -48 -95] -95]
Test Case:  43 | Input/Output: [[-16 -16 -16 -53] -53]
Test Case:  44 | Input/Output: [[-75 -7 -75 -75] -75]
Test Case:  45 | Input/Output: [[-76 -76 -76 88] -76]
Test Case:  46 | Input/Output: [[-68 30 -68 -68] -68]
Test Case:  47 | Input/Output: [[-37 -37 96 -37] -37]
Test Case:  48 | Input/Output: [[52 35 52 52] 35]
Test Case:  49 | Input/Output: [[-62 -62 3 -62] -62]
Test Case:  50 | Input/Output: [[56 56 56 54] 54]
Test Case:  51 | Input/Output: [[-73 23 23 23] -73]
Test Case:  52 | Input/Output: [[65 -25 -25 -25] -25]
Test Case:  53 | Input/Output: [[85 85 85 -98] -98]
Test Case:  54 | Input/Output: [[-68 -68 -81 -68] -81]
Test Case:  55 | Input/Output: [[10 10 10 -90] -90]
Test Case:  56 | Input/Output: [[100 100 85 100] 85]
Test Case:  57 | Input/Output: [[-48 -48 -48 -50] -50]
Test Case:  58 | Input/Output: [[-75 -75 -75 99] -75]
Test Case:  59 | Input/Output: [[-19 100 -19 -19] -19]
Test Case:  60 | Input/Output: [[-34 -8 -34 -34] -34]
Test Case:  61 | Input/Output: [[43 50 50 50] 43]
Test Case:  62 | Input/Output: [[-77 -77 89 -77] -77]
Test Case:  63 | Input/Output: [[67 42 42 42] 42]
Test Case:  64 | Input/Output: [[26 21 26 26] 21]
Test Case:  65 | Input/Output: [[75 75 -2 75] -2]
Test Case:  66 | Input/Output: [[14 14 14 -6] -6]
Test Case:  67 | Input/Output: [[-77 93 93 93] -77]
Test Case:  68 | Input/Output: [[70 70 -99 70] -99]
Test Case:  69 | Input/Output: [[29 29 53 29] 29]
Test Case:  70 | Input/Output: [[96 96 -69 96] -69]
Test Case:  71 | Input/Output: [[-97 -52 -52 -52] -97]
Test Case:  72 | Input/Output: [[50 54 50 50] 50]
Test Case:  73 | Input/Output: [[-2 44 44 44] -2]
Test Case:  74 | Input/Output: [[68 23 23 23] 23]
Test Case:  75 | Input/Output: [[3 3 -77 3] -77]
Test Case:  76 | Input/Output: [[22 -63 -63 -63] -63]
Test Case:  77 | Input/Output: [[79 79 48 79] 48]
Test Case:  78 | Input/Output: [[90 -47 -47 -47] -47]
Test Case:  79 | Input/Output: [[-52 -12 -12 -12] -52]
Test Case:  80 | Input/Output: [[58 58 58 82] 58]
Test Case:  81 | Input/Output: [[-97 9 9 9] -97]
Test Case:  82 | Input/Output: [[38 34 38 38] 34]
Test Case:  83 | Input/Output: [[80 22 80 80] 22]
Test Case:  84 | Input/Output: [[-75 -75 -75 -90] -90]
Test Case:  85 | Input/Output: [[-61 -75 -61 -61] -75]
Test Case:  86 | Input/Output: [[-14 96 96 96] -14]
Test Case:  87 | Input/Output: [[97 97 97 97] 97]
Test Case:  88 | Input/Output: [[-98 -98 -36 -98] -98]
Test Case:  89 | Input/Output: [[-58 42 -58 -58] -58]
Test Case:  90 | Input/Output: [[72 72 72 61] 61]
Test Case:  91 | Input/Output: [[79 80 80 80] 79]
Test Case:  92 | Input/Output: [[-65 -65 84 -65] -65]
Test Case:  93 | Input/Output: [[-96 1 1 1] -96]
Test Case:  94 | Input/Output: [[-93 -93 -55 -93] -93]
Test Case:  95 | Input/Output: [[-46 92 -46 -46] -46]
Test Case:  96 | Input/Output: [[-31 -31 -31 98] -31]
Test Case:  97 | Input/Output: [[57 -45 57 57] -45]
Test Case:  98 | Input/Output: [[-9 -43 -43 -43] -43]
Test Case:  99 | Input/Output: [[-70 -35 -70 -70] -70]
Test Case: 100 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 101 | Input/Output: [(60 60 60 60) 60]
Test Case: 102 | Input/Output: [(34 34 34 34) 34]
Test Case: 103 | Input/Output: [(1 1 1 1) 1]
Test Case: 104 | Input/Output: [(62 62 62 62) 62]
Test Case: 105 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 106 | Input/Output: [(20 20 20 20) 20]
Test Case: 107 | Input/Output: [(87 87 87 87) 87]
Test Case: 108 | Input/Output: [(88 88 88 88) 88]
Test Case: 109 | Input/Output: [(42 42 42 42) 42]
Test Case: 110 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 111 | Input/Output: [(49 49 49 49) 49]
Test Case: 112 | Input/Output: [(93 93 93 93) 93]
Test Case: 113 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 114 | Input/Output: [(80 80 80 80) 80]
Test Case: 115 | Input/Output: [(69 69 69 69) 69]
Test Case: 116 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 117 | Input/Output: [(82 82 82 82) 82]
Test Case: 118 | Input/Output: [(37 37 37 37) 37]
Test Case: 119 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 120 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 121 | Input/Output: [(64 64 64 64) 64]
Test Case: 122 | Input/Output: [(22 22 22 22) 22]
Test Case: 123 | Input/Output: [(76 76 76 76) 76]
Test Case: 124 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 125 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 126 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 127 | Input/Output: [(80 80 80 80) 80]
Test Case: 128 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 129 | Input/Output: [(16 16 16 16) 16]
Test Case: 130 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 131 | Input/Output: [(60 60 60 60) 60]
Test Case: 132 | Input/Output: [(18 18 18 18) 18]
Test Case: 133 | Input/Output: [(39 39 39 39) 39]
Test Case: 134 | Input/Output: [(48 48 48 48) 48]
Test Case: 135 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 136 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 137 | Input/Output: [(80 80 80 80) 80]
Test Case: 138 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 139 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 140 | Input/Output: [(53 53 53 53) 53]
Test Case: 141 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 142 | Input/Output: [(81 81 81 81) 81]
Test Case: 143 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 144 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 145 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 146 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 147 | Input/Output: [(56 56 56 56) 56]
Test Case: 148 | Input/Output: [(58 58 58 58) 58]
Test Case: 149 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 150 | Input/Output: [(41 41 41 41) 41]
Test Case: 151 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 152 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 153 | Input/Output: [(43 43 43 43) 43]
Test Case: 154 | Input/Output: [(52 52 52 52) 52]
Test Case: 155 | Input/Output: [(57 57 57 57) 57]
Test Case: 156 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 157 | Input/Output: [(47 47 47 47) 47]
Test Case: 158 | Input/Output: [(88 88 88 88) 88]
Test Case: 159 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 160 | Input/Output: [(68 68 68 68) 68]
Test Case: 161 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 162 | Input/Output: [(36 36 36 36) 36]
Test Case: 163 | Input/Output: [(24 24 24 24) 24]
Test Case: 164 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 165 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 166 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 167 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 168 | Input/Output: [(46 46 46 46) 46]
Test Case: 169 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 170 | Input/Output: [(35 35 35 35) 35]
Test Case: 171 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 172 | Input/Output: [(64 64 64 64) 64]
Test Case: 173 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 174 | Input/Output: [(59 59 59 59) 59]
Test Case: 175 | Input/Output: [(96 96 96 96) 96]
Test Case: 176 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 177 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 178 | Input/Output: [(89 89 89 89) 89]
Test Case: 179 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 180 | Input/Output: [(72 72 72 72) 72]
Test Case: 181 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 182 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 183 | Input/Output: [(34 34 34 34) 34]
Test Case: 184 | Input/Output: [(44 44 44 44) 44]
Test Case: 185 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 186 | Input/Output: [(15 15 15 15) 15]
Test Case: 187 | Input/Output: [(27 27 27 27) 27]
Test Case: 188 | Input/Output: [(31 31 31 31) 31]
Test Case: 189 | Input/Output: [(29 29 29 29) 29]
Test Case: 190 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 191 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 192 | Input/Output: [(40 40 40 40) 40]
Test Case: 193 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 194 | Input/Output: [(62 62 62 62) 62]
Test Case: 195 | Input/Output: [(72 72 72 72) 72]
Test Case: 196 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 197 | Input/Output: [(58 58 58 58) 58]
Test Case: 198 | Input/Output: [(71 71 71 71) 71]
Test Case: 199 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 200 | Input/Output: [(36 66 32 13) 13]
Test Case: 201 | Input/Output: [(8 88 32 72) 8]
Test Case: 202 | Input/Output: [(80 15 68 96) 15]
Test Case: 203 | Input/Output: [(95 46 40 66) 40]
Test Case: 204 | Input/Output: [(24 9 3 16) 3]
Test Case: 205 | Input/Output: [(55 61 68 71) 55]
Test Case: 206 | Input/Output: [(91 76 26 4) 4]
Test Case: 207 | Input/Output: [(95 95 60 7) 7]
Test Case: 208 | Input/Output: [(17 45 76 27) 17]
Test Case: 209 | Input/Output: [(15 87 64 14) 14]
Test Case: 210 | Input/Output: [(43 75 77 31) 31]
Test Case: 211 | Input/Output: [(53 21 45 3) 3]
Test Case: 212 | Input/Output: [(33 85 85 7) 7]
Test Case: 213 | Input/Output: [(78 13 16 83) 13]
Test Case: 214 | Input/Output: [(38 20 40 74) 20]
Test Case: 215 | Input/Output: [(49 92 96 84) 49]
Test Case: 216 | Input/Output: [(13 4 82 56) 4]
Test Case: 217 | Input/Output: [(33 45 88 36) 33]
Test Case: 218 | Input/Output: [(70 16 92 26) 16]
Test Case: 219 | Input/Output: [(72 75 7 1) 1]
Test Case: 220 | Input/Output: [(73 95 88 89) 73]
Test Case: 221 | Input/Output: [(36 44 1 97) 1]
Test Case: 222 | Input/Output: [(4 28 13 88) 4]
Test Case: 223 | Input/Output: [(60 86 89 17) 17]
Test Case: 224 | Input/Output: [(20 83 69 94) 20]
Test Case: 225 | Input/Output: [(80 46 88 6) 6]
Test Case: 226 | Input/Output: [(44 29 17 16) 16]
Test Case: 227 | Input/Output: [(15 21 65 21) 15]
Test Case: 228 | Input/Output: [(9 37 54 64) 9]
Test Case: 229 | Input/Output: [(27 82 41 76) 27]
Test Case: 230 | Input/Output: [(25 49 47 79) 25]
Test Case: 231 | Input/Output: [(17 81 53 77) 17]
Test Case: 232 | Input/Output: [(43 83 28 57) 28]
Test Case: 233 | Input/Output: [(0 62 34 54) 0]
Test Case: 234 | Input/Output: [(45 66 72 53) 45]
Test Case: 235 | Input/Output: [(31 4 18 94) 4]
Test Case: 236 | Input/Output: [(25 44 83 80) 25]
Test Case: 237 | Input/Output: [(69 63 96 15) 15]
Test Case: 238 | Input/Output: [(11 5 14 0) 0]
Test Case: 239 | Input/Output: [(23 27 10 12) 10]
Test Case: 240 | Input/Output: [(77 40 86 62) 40]
Test Case: 241 | Input/Output: [(28 52 76 0) 0]
Test Case: 242 | Input/Output: [(79 29 95 77) 29]
Test Case: 243 | Input/Output: [(30 13 24 21) 13]
Test Case: 244 | Input/Output: [(11 96 71 100) 11]
Test Case: 245 | Input/Output: [(46 53 77 59) 46]
Test Case: 246 | Input/Output: [(59 19 50 45) 19]
Test Case: 247 | Input/Output: [(68 35 85 79) 35]
Test Case: 248 | Input/Output: [(16 60 16 13) 13]
Test Case: 249 | Input/Output: [(35 82 91 25) 25]
Test Case: 250 | Input/Output: [(46 11 65 25) 11]
Test Case: 251 | Input/Output: [(81 27 29 98) 27]
Test Case: 252 | Input/Output: [(75 61 65 35) 35]
Test Case: 253 | Input/Output: [(37 0 64 50) 0]
Test Case: 254 | Input/Output: [(51 73 53 62) 51]
Test Case: 255 | Input/Output: [(17 41 91 1) 1]
Test Case: 256 | Input/Output: [(38 93 40 51) 38]
Test Case: 257 | Input/Output: [(27 28 61 32) 27]
Test Case: 258 | Input/Output: [(88 70 27 69) 27]
Test Case: 259 | Input/Output: [(62 4 88 63) 4]
Test Case: 260 | Input/Output: [(21 5 86 86) 5]
Test Case: 261 | Input/Output: [(24 14 66 85) 14]
Test Case: 262 | Input/Output: [(41 80 16 100) 16]
Test Case: 263 | Input/Output: [(78 7 9 18) 7]
Test Case: 264 | Input/Output: [(68 41 38 33) 33]
Test Case: 265 | Input/Output: [(54 25 67 10) 10]
Test Case: 266 | Input/Output: [(82 57 40 92) 40]
Test Case: 267 | Input/Output: [(87 66 100 85) 66]
Test Case: 268 | Input/Output: [(13 75 72 51) 13]
Test Case: 269 | Input/Output: [(97 87 15 83) 15]
Test Case: 270 | Input/Output: [(64 62 10 80) 10]
Test Case: 271 | Input/Output: [(32 1 21 99) 1]
Test Case: 272 | Input/Output: [(58 51 98 37) 37]
Test Case: 273 | Input/Output: [(99 88 39 45) 39]
Test Case: 274 | Input/Output: [(96 49 51 16) 16]
Test Case: 275 | Input/Output: [(37 30 86 36) 30]
Test Case: 276 | Input/Output: [(64 67 13 15) 13]
Test Case: 277 | Input/Output: [(45 83 46 72) 45]
Test Case: 278 | Input/Output: [(78 52 23 78) 23]
Test Case: 279 | Input/Output: [(85 67 96 63) 63]
Test Case: 280 | Input/Output: [(91 23 45 40) 23]
Test Case: 281 | Input/Output: [(75 35 38 100) 35]
Test Case: 282 | Input/Output: [(35 41 53 68) 35]
Test Case: 283 | Input/Output: [(33 17 22 58) 17]
Test Case: 284 | Input/Output: [(33 49 34 84) 33]
Test Case: 285 | Input/Output: [(73 98 91 10) 10]
Test Case: 286 | Input/Output: [(62 17 2 36) 2]
Test Case: 287 | Input/Output: [(14 8 52 60) 8]
Test Case: 288 | Input/Output: [(49 7 35 6) 6]
Test Case: 289 | Input/Output: [(9 40 90 41) 9]
Test Case: 290 | Input/Output: [(14 22 18 39) 14]
Test Case: 291 | Input/Output: [(64 47 14 89) 14]
Test Case: 292 | Input/Output: [(35 53 94 66) 35]
Test Case: 293 | Input/Output: [(24 75 89 65) 24]
Test Case: 294 | Input/Output: [(55 86 84 97) 55]
Test Case: 295 | Input/Output: [(61 14 13 36) 13]
Test Case: 296 | Input/Output: [(28 2 57 82) 2]
Test Case: 297 | Input/Output: [(24 49 59 6) 6]
Test Case: 298 | Input/Output: [(41 84 48 39) 39]
Test Case: 299 | Input/Output: [(77 43 54 84) 43]
Test Case: 300 | Input/Output: [(61 29 26 51) 26]
Test Case: 301 | Input/Output: [(9 23 36 91) 9]
Test Case: 302 | Input/Output: [(83 87 94 97) 83]
Test Case: 303 | Input/Output: [(4 98 95 85) 4]
Test Case: 304 | Input/Output: [(83 47 15 38) 15]
Test Case: 305 | Input/Output: [(35 72 2 54) 2]
Test Case: 306 | Input/Output: [(44 90 25 79) 25]
Test Case: 307 | Input/Output: [(21 13 62 37) 13]
Test Case: 308 | Input/Output: [(34 18 87 49) 18]
Test Case: 309 | Input/Output: [(82 23 47 97) 23]
Test Case: 310 | Input/Output: [(90 55 19 83) 19]
Test Case: 311 | Input/Output: [(4 61 25 31) 4]
Test Case: 312 | Input/Output: [(95 45 85 8) 8]
Test Case: 313 | Input/Output: [(82 47 12 52) 12]
Test Case: 314 | Input/Output: [(30 25 46 90) 25]
Test Case: 315 | Input/Output: [(46 3 11 57) 3]
Test Case: 316 | Input/Output: [(41 72 94 19) 19]
Test Case: 317 | Input/Output: [(45 19 34 22) 19]
Test Case: 318 | Input/Output: [(77 77 80 37) 37]
Test Case: 319 | Input/Output: [(56 74 15 10) 10]
Test Case: 320 | Input/Output: [(69 57 11 87) 11]
Test Case: 321 | Input/Output: [(22 66 21 1) 1]
Test Case: 322 | Input/Output: [(91 63 73 62) 62]
Test Case: 323 | Input/Output: [(16 27 14 15) 14]
Test Case: 324 | Input/Output: [(14 83 53 0) 0]
Test Case: 325 | Input/Output: [(19 46 15 74) 15]
Test Case: 326 | Input/Output: [(78 76 91 78) 76]
Test Case: 327 | Input/Output: [(58 35 41 78) 35]
Test Case: 328 | Input/Output: [(16 18 68 67) 16]
Test Case: 329 | Input/Output: [(93 76 32 98) 32]
Test Case: 330 | Input/Output: [(57 31 79 91) 31]
Test Case: 331 | Input/Output: [(2 35 53 83) 2]
Test Case: 332 | Input/Output: [(51 79 75 84) 51]
Test Case: 333 | Input/Output: [(63 60 98 95) 60]
Test Case: 334 | Input/Output: [(45 91 35 28) 28]
Test Case: 335 | Input/Output: [(7 75 14 61) 7]
Test Case: 336 | Input/Output: [(28 53 15 31) 15]
Test Case: 337 | Input/Output: [(99 79 51 79) 51]
Test Case: 338 | Input/Output: [(88 34 2 35) 2]
Test Case: 339 | Input/Output: [(77 16 86 21) 16]
Test Case: 340 | Input/Output: [(5 30 45 24) 5]
Test Case: 341 | Input/Output: [(21 44 12 45) 12]
Test Case: 342 | Input/Output: [(73 39 48 98) 39]
Test Case: 343 | Input/Output: [(60 41 25 5) 5]
Test Case: 344 | Input/Output: [(70 36 82 68) 36]
Test Case: 345 | Input/Output: [(12 84 73 35) 12]
Test Case: 346 | Input/Output: [(40 89 42 87) 40]
Test Case: 347 | Input/Output: [(99 53 77 39) 39]
Test Case: 348 | Input/Output: [(41 73 63 43) 41]
Test Case: 349 | Input/Output: [(37 88 75 94) 37]
Test Case: 350 | Input/Output: [(84 31 7 43) 7]
Test Case: 351 | Input/Output: [(18 43 19 88) 18]
Test Case: 352 | Input/Output: [(75 33 20 8) 8]
Test Case: 353 | Input/Output: [(3 68 31 19) 3]
Test Case: 354 | Input/Output: [(87 99 35 65) 35]
Test Case: 355 | Input/Output: [(25 86 46 98) 25]
Test Case: 356 | Input/Output: [(52 14 39 89) 14]
Test Case: 357 | Input/Output: [(43 91 34 76) 34]
Test Case: 358 | Input/Output: [(100 26 51 60) 26]
Test Case: 359 | Input/Output: [(55 79 72 32) 32]
Test Case: 360 | Input/Output: [(37 22 78 44) 22]
Test Case: 361 | Input/Output: [(71 19 13 19) 13]
Test Case: 362 | Input/Output: [(74 52 18 0) 0]
Test Case: 363 | Input/Output: [(29 24 1 22) 1]
Test Case: 364 | Input/Output: [(36 98 87 67) 36]
Test Case: 365 | Input/Output: [(51 58 85 38) 38]
Test Case: 366 | Input/Output: [(36 96 37 48) 36]
Test Case: 367 | Input/Output: [(82 93 21 99) 21]
Test Case: 368 | Input/Output: [(92 83 66 48) 48]
Test Case: 369 | Input/Output: [(6 93 33 64) 6]
Test Case: 370 | Input/Output: [(9 18 36 51) 9]
Test Case: 371 | Input/Output: [(47 78 76 25) 25]
Test Case: 372 | Input/Output: [(29 23 78 25) 23]
Test Case: 373 | Input/Output: [(73 100 72 67) 67]
Test Case: 374 | Input/Output: [(14 35 25 92) 14]
Test Case: 375 | Input/Output: [(42 52 12 1) 1]
Test Case: 376 | Input/Output: [(57 52 14 58) 14]
Test Case: 377 | Input/Output: [(96 70 53 1) 1]
Test Case: 378 | Input/Output: [(68 74 51 39) 39]
Test Case: 379 | Input/Output: [(75 52 42 14) 14]
Test Case: 380 | Input/Output: [(54 93 30 24) 24]
Test Case: 381 | Input/Output: [(27 32 39 59) 27]
Test Case: 382 | Input/Output: [(56 100 42 63) 42]
Test Case: 383 | Input/Output: [(2 29 39 71) 2]
Test Case: 384 | Input/Output: [(33 13 99 71) 13]
Test Case: 385 | Input/Output: [(95 61 69 94) 61]
Test Case: 386 | Input/Output: [(50 60 60 4) 4]
Test Case: 387 | Input/Output: [(6 50 95 68) 6]
Test Case: 388 | Input/Output: [(29 7 24 41) 7]
Test Case: 389 | Input/Output: [(36 39 32 16) 16]
Test Case: 390 | Input/Output: [(30 82 91 36) 30]
Test Case: 391 | Input/Output: [(29 28 39 79) 28]
Test Case: 392 | Input/Output: [(77 66 35 45) 35]
Test Case: 393 | Input/Output: [(67 4 81 51) 4]
Test Case: 394 | Input/Output: [(52 44 43 59) 43]
Test Case: 395 | Input/Output: [(62 68 15 44) 15]
Test Case: 396 | Input/Output: [(64 63 12 85) 12]
Test Case: 397 | Input/Output: [(89 77 24 6) 6]
Test Case: 398 | Input/Output: [(82 25 53 97) 25]
Test Case: 399 | Input/Output: [(29 88 14 11) 11]
Test Case: 400 | Input/Output: [(68 72 -33 -17) -33]
Test Case: 401 | Input/Output: [(-20 68 -18 -68) -68]
Test Case: 402 | Input/Output: [(81 91 9 43) 9]
Test Case: 403 | Input/Output: [(-24 -23 74 -13) -24]
Test Case: 404 | Input/Output: [(38 63 14 -87) -87]
Test Case: 405 | Input/Output: [(37 -50 -23 -38) -50]
Test Case: 406 | Input/Output: [(-78 48 63 1) -78]
Test Case: 407 | Input/Output: [(49 -46 -86 72) -86]
Test Case: 408 | Input/Output: [(57 92 -47 -33) -47]
Test Case: 409 | Input/Output: [(-90 21 -89 -8) -90]
Test Case: 410 | Input/Output: [(-12 51 -42 -61) -61]
Test Case: 411 | Input/Output: [(6 76 14 47) 6]
Test Case: 412 | Input/Output: [(-5 -26 24 -62) -62]
Test Case: 413 | Input/Output: [(39 -37 19 -8) -37]
Test Case: 414 | Input/Output: [(71 69 52 25) 25]
Test Case: 415 | Input/Output: [(-57 33 89 14) -57]
Test Case: 416 | Input/Output: [(-66 -7 -87 14) -87]
Test Case: 417 | Input/Output: [(-97 6 65 90) -97]
Test Case: 418 | Input/Output: [(-19 -50 -70 33) -70]
Test Case: 419 | Input/Output: [(31 -40 -44 -82) -82]
Test Case: 420 | Input/Output: [(-56 35 -66 -55) -66]
Test Case: 421 | Input/Output: [(55 88 -21 -16) -21]
Test Case: 422 | Input/Output: [(68 -87 -90 4) -90]
Test Case: 423 | Input/Output: [(5 85 30 -42) -42]
Test Case: 424 | Input/Output: [(47 -72 44 27) -72]
Test Case: 425 | Input/Output: [(99 -50 56 -44) -50]
Test Case: 426 | Input/Output: [(50 31 -7 -56) -56]
Test Case: 427 | Input/Output: [(-44 -53 47 27) -53]
Test Case: 428 | Input/Output: [(27 -22 -76 -15) -76]
Test Case: 429 | Input/Output: [(77 -2 37 10) -2]
Test Case: 430 | Input/Output: [(60 16 31 -82) -82]
Test Case: 431 | Input/Output: [(46 6 38 65) 6]
Test Case: 432 | Input/Output: [(38 -27 -4 -57) -57]
Test Case: 433 | Input/Output: [(28 -70 3 90) -70]
Test Case: 434 | Input/Output: [(75 -69 51 -58) -69]
Test Case: 435 | Input/Output: [(84 -32 -83 -18) -83]
Test Case: 436 | Input/Output: [(-1 -49 61 -17) -49]
Test Case: 437 | Input/Output: [(57 24 -77 -89) -89]
Test Case: 438 | Input/Output: [(82 -57 -53 63) -57]
Test Case: 439 | Input/Output: [(-48 65 -75 74) -75]
Test Case: 440 | Input/Output: [(95 45 -45 -100) -100]
Test Case: 441 | Input/Output: [(90 24 -99 -43) -99]
Test Case: 442 | Input/Output: [(62 -95 -32 -1) -95]
Test Case: 443 | Input/Output: [(-40 -12 -6 -30) -40]
Test Case: 444 | Input/Output: [(-51 44 -62 -62) -62]
Test Case: 445 | Input/Output: [(-19 -13 -67 -2) -67]
Test Case: 446 | Input/Output: [(85 45 -89 -37) -89]
Test Case: 447 | Input/Output: [(62 -20 100 -39) -39]
Test Case: 448 | Input/Output: [(-88 57 67 -62) -88]
Test Case: 449 | Input/Output: [(-32 15 -75 -47) -75]
Test Case: 450 | Input/Output: [(39 -27 17 91) -27]
Test Case: 451 | Input/Output: [(69 -12 -97 12) -97]
Test Case: 452 | Input/Output: [(-22 -99 94 93) -99]
Test Case: 453 | Input/Output: [(9 20 21 -34) -34]
Test Case: 454 | Input/Output: [(-71 34 1 73) -71]
Test Case: 455 | Input/Output: [(-83 10 -34 43) -83]
Test Case: 456 | Input/Output: [(-40 70 65 68) -40]
Test Case: 457 | Input/Output: [(8 -23 56 11) -23]
Test Case: 458 | Input/Output: [(21 11 -44 -92) -92]
Test Case: 459 | Input/Output: [(-35 -2 -87 21) -87]
Test Case: 460 | Input/Output: [(68 -5 68 -20) -20]
Test Case: 461 | Input/Output: [(-19 -18 33 46) -19]
Test Case: 462 | Input/Output: [(15 -27 -7 -16) -27]
Test Case: 463 | Input/Output: [(-68 53 -61 -90) -90]
Test Case: 464 | Input/Output: [(12 -75 -93 -48) -93]
Test Case: 465 | Input/Output: [(-98 -9 14 -1) -98]
Test Case: 466 | Input/Output: [(-35 -32 56 -40) -40]
Test Case: 467 | Input/Output: [(83 -78 90 -37) -78]
Test Case: 468 | Input/Output: [(-16 -55 19 -46) -55]
Test Case: 469 | Input/Output: [(3 -19 10 -39) -39]
Test Case: 470 | Input/Output: [(-6 -29 70 -91) -91]
Test Case: 471 | Input/Output: [(-88 19 -47 30) -88]
Test Case: 472 | Input/Output: [(-31 40 90 1) -31]
Test Case: 473 | Input/Output: [(54 28 -9 0) -9]
Test Case: 474 | Input/Output: [(37 55 31 7) 7]
Test Case: 475 | Input/Output: [(63 -16 -86 -60) -86]
Test Case: 476 | Input/Output: [(80 22 84 -45) -45]
Test Case: 477 | Input/Output: [(57 -25 75 -57) -57]
Test Case: 478 | Input/Output: [(-3 -62 -10 60) -62]
Test Case: 479 | Input/Output: [(83 86 -6 5) -6]
Test Case: 480 | Input/Output: [(47 60 -1 -39) -39]
Test Case: 481 | Input/Output: [(64 70 95 29) 29]
Test Case: 482 | Input/Output: [(-10 -62 -54 23) -62]
Test Case: 483 | Input/Output: [(-100 62 -21 -33) -100]
Test Case: 484 | Input/Output: [(-34 -57 9 45) -57]
Test Case: 485 | Input/Output: [(32 91 -45 -35) -45]
Test Case: 486 | Input/Output: [(73 -25 -64 -70) -70]
Test Case: 487 | Input/Output: [(-47 -56 13 -14) -56]
Test Case: 488 | Input/Output: [(11 -78 16 -71) -78]
Test Case: 489 | Input/Output: [(43 -94 41 25) -94]
Test Case: 490 | Input/Output: [(-10 -16 31 -46) -46]
Test Case: 491 | Input/Output: [(70 71 26 16) 16]
Test Case: 492 | Input/Output: [(59 -31 9 -85) -85]
Test Case: 493 | Input/Output: [(-84 34 72 8) -84]
Test Case: 494 | Input/Output: [(76 -25 71 -88) -88]
Test Case: 495 | Input/Output: [(-67 78 58 -18) -67]
Test Case: 496 | Input/Output: [(-37 -92 70 -11) -92]
Test Case: 497 | Input/Output: [(83 48 -13 52) -13]
Test Case: 498 | Input/Output: [(-40 -85 -3 89) -85]
Test Case: 499 | Input/Output: [(-52 60 -83 -30) -83]
Test Case: 500 | Input/Output: [(-17 39 83 95) -17]
Test Case: 501 | Input/Output: [(-3 53 -8 20) -8]
Test Case: 502 | Input/Output: [(-69 -97 88 -42) -97]
Test Case: 503 | Input/Output: [(-42 -13 -14 -42) -42]
Test Case: 504 | Input/Output: [(-88 81 6 -53) -88]
Test Case: 505 | Input/Output: [(42 1 48 -70) -70]
Test Case: 506 | Input/Output: [(-42 72 69 68) -42]
Test Case: 507 | Input/Output: [(-76 -12 85 -61) -76]
Test Case: 508 | Input/Output: [(43 27 15 19) 15]
Test Case: 509 | Input/Output: [(84 57 53 46) 46]
Test Case: 510 | Input/Output: [(-89 47 89 -86) -89]
Test Case: 511 | Input/Output: [(-57 12 83 -46) -57]
Test Case: 512 | Input/Output: [(35 -10 -96 40) -96]
Test Case: 513 | Input/Output: [(15 -95 48 -65) -95]
Test Case: 514 | Input/Output: [(72 44 83 25) 25]
Test Case: 515 | Input/Output: [(76 -84 -58 77) -84]
Test Case: 516 | Input/Output: [(80 86 79 49) 49]
Test Case: 517 | Input/Output: [(70 68 85 -8) -8]
Test Case: 518 | Input/Output: [(-98 -68 33 -88) -98]
Test Case: 519 | Input/Output: [(87 -49 -49 -22) -49]
Test Case: 520 | Input/Output: [(-54 57 15 39) -54]
Test Case: 521 | Input/Output: [(-79 -66 -80 18) -80]
Test Case: 522 | Input/Output: [(-9 52 -84 95) -84]
Test Case: 523 | Input/Output: [(-86 -49 79 -32) -86]
Test Case: 524 | Input/Output: [(-60 -74 92 -82) -82]
Test Case: 525 | Input/Output: [(74 54 58 46) 46]
Test Case: 526 | Input/Output: [(10 -86 9 9) -86]
Test Case: 527 | Input/Output: [(-51 96 -82 -79) -82]
Test Case: 528 | Input/Output: [(95 66 -73 17) -73]
Test Case: 529 | Input/Output: [(-99 1 49 -41) -99]
Test Case: 530 | Input/Output: [(-96 -4 56 -8) -96]
Test Case: 531 | Input/Output: [(37 -44 82 72) -44]
Test Case: 532 | Input/Output: [(13 -68 16 77) -68]
Test Case: 533 | Input/Output: [(62 2 -49 -40) -49]
Test Case: 534 | Input/Output: [(-50 48 98 24) -50]
Test Case: 535 | Input/Output: [(43 52 -53 -13) -53]
Test Case: 536 | Input/Output: [(6 31 1 59) 1]
Test Case: 537 | Input/Output: [(68 68 14 92) 14]
Test Case: 538 | Input/Output: [(6 -29 0 -82) -82]
Test Case: 539 | Input/Output: [(-66 87 -65 97) -66]
Test Case: 540 | Input/Output: [(-25 22 74 47) -25]
Test Case: 541 | Input/Output: [(16 50 -82 8) -82]
Test Case: 542 | Input/Output: [(33 100 -38 29) -38]
Test Case: 543 | Input/Output: [(3 -42 34 -44) -44]
Test Case: 544 | Input/Output: [(-59 -58 61 -94) -94]
Test Case: 545 | Input/Output: [(4 37 0 81) 0]
Test Case: 546 | Input/Output: [(36 20 -45 -66) -66]
Test Case: 547 | Input/Output: [(-49 -66 21 70) -66]
Test Case: 548 | Input/Output: [(-3 -17 15 43) -17]
Test Case: 549 | Input/Output: [(-40 -95 -9 52) -95]
Test Case: 550 | Input/Output: [(64 27 90 16) 16]
Test Case: 551 | Input/Output: [(64 70 55 96) 55]
Test Case: 552 | Input/Output: [(97 57 5 -89) -89]
Test Case: 553 | Input/Output: [(-2 92 60 1) -2]
Test Case: 554 | Input/Output: [(-30 32 -40 -32) -40]
Test Case: 555 | Input/Output: [(-73 -54 31 -26) -73]
Test Case: 556 | Input/Output: [(78 -60 97 6) -60]
Test Case: 557 | Input/Output: [(-86 -28 -73 83) -86]
Test Case: 558 | Input/Output: [(6 82 -13 -64) -64]
Test Case: 559 | Input/Output: [(80 17 10 -80) -80]
Test Case: 560 | Input/Output: [(-62 -48 -70 -62) -70]
Test Case: 561 | Input/Output: [(-69 71 15 22) -69]
Test Case: 562 | Input/Output: [(65 -27 10 5) -27]
Test Case: 563 | Input/Output: [(-25 34 -20 69) -25]
Test Case: 564 | Input/Output: [(75 86 -93 18) -93]
Test Case: 565 | Input/Output: [(-86 -78 -70 17) -86]
Test Case: 566 | Input/Output: [(53 100 12 -38) -38]
Test Case: 567 | Input/Output: [(7 36 -59 58) -59]
Test Case: 568 | Input/Output: [(81 -68 95 -30) -68]
Test Case: 569 | Input/Output: [(-57 -33 25 100) -57]
Test Case: 570 | Input/Output: [(-29 -79 -33 -32) -79]
Test Case: 571 | Input/Output: [(98 -76 -15 -100) -100]
Test Case: 572 | Input/Output: [(21 44 7 -46) -46]
Test Case: 573 | Input/Output: [(-5 -41 76 -58) -58]
Test Case: 574 | Input/Output: [(78 90 37 -57) -57]
Test Case: 575 | Input/Output: [(37 62 -74 32) -74]
Test Case: 576 | Input/Output: [(-47 -52 -58 31) -58]
Test Case: 577 | Input/Output: [(-66 -21 -50 -59) -66]
Test Case: 578 | Input/Output: [(83 -73 -90 -46) -90]
Test Case: 579 | Input/Output: [(-80 -86 84 75) -86]
Test Case: 580 | Input/Output: [(-40 64 48 -79) -79]
Test Case: 581 | Input/Output: [(-69 20 94 46) -69]
Test Case: 582 | Input/Output: [(53 11 -98 -29) -98]
Test Case: 583 | Input/Output: [(99 93 88 -25) -25]
Test Case: 584 | Input/Output: [(-19 16 -70 70) -70]
Test Case: 585 | Input/Output: [(51 41 76 -95) -95]
Test Case: 586 | Input/Output: [(-28 -99 -39 -11) -99]
Test Case: 587 | Input/Output: [(97 68 48 -22) -22]
Test Case: 588 | Input/Output: [(48 -1 -27 -96) -96]
Test Case: 589 | Input/Output: [(-4 78 -45 -99) -99]
Test Case: 590 | Input/Output: [(-97 34 100 14) -97]
Test Case: 591 | Input/Output: [(-3 -51 -52 -79) -79]
Test Case: 592 | Input/Output: [(-9 -7 83 93) -9]
Test Case: 593 | Input/Output: [(5 -55 8 64) -55]
Test Case: 594 | Input/Output: [(44 -62 7 50) -62]
Test Case: 595 | Input/Output: [(-93 -81 94 11) -93]
Test Case: 596 | Input/Output: [(-7 -48 74 12) -48]
Test Case: 597 | Input/Output: [(33 27 50 33) 27]
Test Case: 598 | Input/Output: [(-78 -60 -14 97) -78]
Test Case: 599 | Input/Output: [(-4 75 55 0) -4]
Test Case: 600 | Input/Output: [(80 97 -77 -38) -77]
Test Case: 601 | Input/Output: [(46 71 -15 59) -15]
Test Case: 602 | Input/Output: [(83 -6 33 68) -6]
Test Case: 603 | Input/Output: [(7 -95 -39 30) -95]
Test Case: 604 | Input/Output: [(-60 31 20 -11) -60]
Test Case: 605 | Input/Output: [(95 47 23 -28) -28]
Test Case: 606 | Input/Output: [(8 4 -37 44) -37]
Test Case: 607 | Input/Output: [(-24 -28 -97 -71) -97]
Test Case: 608 | Input/Output: [(35 41 85 -71) -71]
Test Case: 609 | Input/Output: [(-60 -96 -35 32) -96]
Test Case: 610 | Input/Output: [(74 -26 -39 89) -39]
Test Case: 611 | Input/Output: [(-46 -86 -24 14) -86]
Test Case: 612 | Input/Output: [(4 10 34 -59) -59]
Test Case: 613 | Input/Output: [(-2 -48 -55 -43) -55]
Test Case: 614 | Input/Output: [(15 54 29 -42) -42]
Test Case: 615 | Input/Output: [(-94 44 0 79) -94]
Test Case: 616 | Input/Output: [(33 -55 -72 62) -72]
Test Case: 617 | Input/Output: [(45 -28 68 87) -28]
Test Case: 618 | Input/Output: [(-81 93 56 96) -81]
Test Case: 619 | Input/Output: [(-12 -54 -22 12) -54]
Test Case: 620 | Input/Output: [(-66 -36 69 -65) -66]
Test Case: 621 | Input/Output: [(76 -8 -13 41) -13]
Test Case: 622 | Input/Output: [(62 96 -78 -36) -78]
Test Case: 623 | Input/Output: [(45 31 61 -69) -69]
Test Case: 624 | Input/Output: [(48 -44 -78 -53) -78]
Test Case: 625 | Input/Output: [(88 -15 75 44) -15]
Test Case: 626 | Input/Output: [(-8 56 42 43) -8]
Test Case: 627 | Input/Output: [(-69 9 26 78) -69]
Test Case: 628 | Input/Output: [(9 -9 65 9) -9]
Test Case: 629 | Input/Output: [(-42 -42 53 -54) -54]
Test Case: 630 | Input/Output: [(-31 -19 -98 31) -98]
Test Case: 631 | Input/Output: [(92 -64 -12 88) -64]
Test Case: 632 | Input/Output: [(-57 -23 69 54) -57]
Test Case: 633 | Input/Output: [(-59 54 57 -61) -61]
Test Case: 634 | Input/Output: [(94 -13 50 -2) -13]
Test Case: 635 | Input/Output: [(-94 -62 -50 34) -94]
Test Case: 636 | Input/Output: [(100 36 72 -91) -91]
Test Case: 637 | Input/Output: [(-9 46 88 30) -9]
Test Case: 638 | Input/Output: [(83 93 -68 27) -68]
Test Case: 639 | Input/Output: [(21 49 -5 -42) -42]
Test Case: 640 | Input/Output: [(-79 20 82 -43) -79]
Test Case: 641 | Input/Output: [(89 26 10 39) 10]
Test Case: 642 | Input/Output: [(-12 41 -58 26) -58]
Test Case: 643 | Input/Output: [(1 -58 23 -80) -80]
Test Case: 644 | Input/Output: [(88 53 99 -76) -76]
Test Case: 645 | Input/Output: [(56 3 -59 12) -59]
Test Case: 646 | Input/Output: [(-18 -7 -5 -30) -30]
Test Case: 647 | Input/Output: [(19 -12 -22 -49) -49]
Test Case: 648 | Input/Output: [(85 -100 32 45) -100]
Test Case: 649 | Input/Output: [(21 94 -74 -43) -74]
Test Case: 650 | Input/Output: [(35 80 7 13) 7]
Test Case: 651 | Input/Output: [(-1 73 61 -90) -90]
Test Case: 652 | Input/Output: [(84 -90 -72 47) -90]
Test Case: 653 | Input/Output: [(62 57 -16 -93) -93]
Test Case: 654 | Input/Output: [(-16 16 16 48) -16]
Test Case: 655 | Input/Output: [(-51 42 -68 -3) -68]
Test Case: 656 | Input/Output: [(-78 -73 31 -2) -78]
Test Case: 657 | Input/Output: [(82 99 9 -98) -98]
Test Case: 658 | Input/Output: [(29 -26 54 -97) -97]
Test Case: 659 | Input/Output: [(-100 -73 -59 -86) -100]
Test Case: 660 | Input/Output: [(-41 81 32 -8) -41]
Test Case: 661 | Input/Output: [(92 71 11 60) 11]
Test Case: 662 | Input/Output: [(65 -32 81 79) -32]
Test Case: 663 | Input/Output: [(-65 25 85 25) -65]
Test Case: 664 | Input/Output: [(56 96 44 77) 44]
Test Case: 665 | Input/Output: [(-20 -66 90 -80) -80]
Test Case: 666 | Input/Output: [(38 -90 93 43) -90]
Test Case: 667 | Input/Output: [(31 71 -13 -96) -96]
Test Case: 668 | Input/Output: [(60 29 -90 -37) -90]
Test Case: 669 | Input/Output: [(-30 -22 38 93) -30]
Test Case: 670 | Input/Output: [(77 -54 69 40) -54]
Test Case: 671 | Input/Output: [(-14 -6 58 71) -14]
Test Case: 672 | Input/Output: [(43 58 -52 -11) -52]
Test Case: 673 | Input/Output: [(25 -39 -15 53) -39]
Test Case: 674 | Input/Output: [(-78 38 6 83) -78]
Test Case: 675 | Input/Output: [(-15 -90 -75 30) -90]
Test Case: 676 | Input/Output: [(-82 -73 -99 96) -99]
Test Case: 677 | Input/Output: [(26 -86 -59 77) -86]
Test Case: 678 | Input/Output: [(-37 -34 39 -35) -37]
Test Case: 679 | Input/Output: [(58 19 16 91) 16]
Test Case: 680 | Input/Output: [(-33 30 -17 -40) -40]
Test Case: 681 | Input/Output: [(95 76 60 74) 60]
Test Case: 682 | Input/Output: [(81 -38 -37 27) -38]
Test Case: 683 | Input/Output: [(-11 -60 -46 -28) -60]
Test Case: 684 | Input/Output: [(-92 -55 46 44) -92]
Test Case: 685 | Input/Output: [(98 -35 -60 91) -60]
Test Case: 686 | Input/Output: [(-68 30 -29 75) -68]
Test Case: 687 | Input/Output: [(-20 -27 -99 -64) -99]
Test Case: 688 | Input/Output: [(58 -15 100 -74) -74]
Test Case: 689 | Input/Output: [(-75 35 -65 94) -75]
Test Case: 690 | Input/Output: [(-89 -70 -49 -29) -89]
Test Case: 691 | Input/Output: [(78 41 54 -59) -59]
Test Case: 692 | Input/Output: [(11 97 -78 55) -78]
Test Case: 693 | Input/Output: [(45 -40 76 -34) -40]
Test Case: 694 | Input/Output: [(-11 62 80 -92) -92]
Test Case: 695 | Input/Output: [(-45 -41 -43 -29) -45]
Test Case: 696 | Input/Output: [(62 1 11 70) 1]
Test Case: 697 | Input/Output: [(-2 -64 -31 94) -64]
Test Case: 698 | Input/Output: [(20 69 64 57) 20]
Test Case: 699 | Input/Output: [(74 56 33 31) 31]
Test Case: 700 | Input/Output: [(-7 86 89 -73) -73]
Test Case: 701 | Input/Output: [(23 65 -54 -62) -62]
Test Case: 702 | Input/Output: [(-73 -4 -72 -46) -73]
Test Case: 703 | Input/Output: [(25 -85 15 71) -85]
Test Case: 704 | Input/Output: [(-51 94 -52 -28) -52]
Test Case: 705 | Input/Output: [(-59 -94 -18 -16) -94]
Test Case: 706 | Input/Output: [(-81 30 33 12) -81]
Test Case: 707 | Input/Output: [(18 43 -14 -8) -14]
Test Case: 708 | Input/Output: [(-5 -48 64 78) -48]
Test Case: 709 | Input/Output: [(-52 83 62 -22) -52]
Test Case: 710 | Input/Output: [(-55 -34 84 -24) -55]
Test Case: 711 | Input/Output: [(87 28 -39 83) -39]
Test Case: 712 | Input/Output: [(-31 -34 -35 -64) -64]
Test Case: 713 | Input/Output: [(24 27 26 -32) -32]
Test Case: 714 | Input/Output: [(44 -48 80 53) -48]
Test Case: 715 | Input/Output: [(-26 40 95 30) -26]
Test Case: 716 | Input/Output: [(16 -25 34 -62) -62]
Test Case: 717 | Input/Output: [(-39 54 27 84) -39]
Test Case: 718 | Input/Output: [(-9 35 -87 37) -87]
Test Case: 719 | Input/Output: [(-71 2 -50 -33) -71]
Test Case: 720 | Input/Output: [(80 -10 -67 16) -67]
Test Case: 721 | Input/Output: [(58 -24 30 56) -24]
Test Case: 722 | Input/Output: [(31 73 26 -31) -31]
Test Case: 723 | Input/Output: [(25 -37 -5 61) -37]
Test Case: 724 | Input/Output: [(-71 -9 -100 41) -100]
Test Case: 725 | Input/Output: [(-50 -45 27 53) -50]
Test Case: 726 | Input/Output: [(53 34 91 -22) -22]
Test Case: 727 | Input/Output: [(-83 -96 -36 21) -96]
Test Case: 728 | Input/Output: [(-82 63 -26 19) -82]
Test Case: 729 | Input/Output: [(27 -3 18 16) -3]
Test Case: 730 | Input/Output: [(2 -68 22 12) -68]
Test Case: 731 | Input/Output: [(49 -77 -72 71) -77]
Test Case: 732 | Input/Output: [(-63 2 -54 66) -63]
Test Case: 733 | Input/Output: [(66 20 14 11) 11]
Test Case: 734 | Input/Output: [(-80 46 -100 -66) -100]
Test Case: 735 | Input/Output: [(-90 -55 -35 -69) -90]
Test Case: 736 | Input/Output: [(99 -13 -1 -11) -13]
Test Case: 737 | Input/Output: [(23 -94 95 65) -94]
Test Case: 738 | Input/Output: [(-72 84 13 -8) -72]
Test Case: 739 | Input/Output: [(-80 -40 62 26) -80]
Test Case: 740 | Input/Output: [(90 -48 54 -49) -49]
Test Case: 741 | Input/Output: [(-68 -21 -15 61) -68]
Test Case: 742 | Input/Output: [(14 -29 85 -64) -64]
Test Case: 743 | Input/Output: [(-80 71 64 -89) -89]
Test Case: 744 | Input/Output: [(93 71 38 85) 38]
Test Case: 745 | Input/Output: [(-13 -40 -40 -35) -40]
Test Case: 746 | Input/Output: [(27 -9 -4 -57) -57]
Test Case: 747 | Input/Output: [(-23 -100 57 -2) -100]
Test Case: 748 | Input/Output: [(51 -38 -10 -99) -99]
Test Case: 749 | Input/Output: [(94 -47 88 84) -47]
Test Case: 750 | Input/Output: [(-57 100 -86 -2) -86]
Test Case: 751 | Input/Output: [(-96 -16 93 -24) -96]
Test Case: 752 | Input/Output: [(-4 89 -22 31) -22]
Test Case: 753 | Input/Output: [(77 -94 4 -52) -94]
Test Case: 754 | Input/Output: [(-85 -24 83 90) -85]
Test Case: 755 | Input/Output: [(-46 -34 23 76) -46]
Test Case: 756 | Input/Output: [(39 -11 -12 82) -12]
Test Case: 757 | Input/Output: [(78 26 -96 31) -96]
Test Case: 758 | Input/Output: [(-54 -23 -89 -79) -89]
Test Case: 759 | Input/Output: [(-21 36 -97 -8) -97]
Test Case: 760 | Input/Output: [(40 -67 73 95) -67]
Test Case: 761 | Input/Output: [(44 47 -96 -44) -96]
Test Case: 762 | Input/Output: [(-64 74 85 77) -64]
Test Case: 763 | Input/Output: [(-59 34 -60 -39) -60]
Test Case: 764 | Input/Output: [(78 30 18 69) 18]
Test Case: 765 | Input/Output: [(41 41 -61 39) -61]
Test Case: 766 | Input/Output: [(-75 89 58 -30) -75]
Test Case: 767 | Input/Output: [(-50 -9 -68 41) -68]
Test Case: 768 | Input/Output: [(95 -94 -72 -86) -94]
Test Case: 769 | Input/Output: [(49 29 -72 -70) -72]
Test Case: 770 | Input/Output: [(38 -30 -100 -21) -100]
Test Case: 771 | Input/Output: [(-85 81 21 -65) -85]
Test Case: 772 | Input/Output: [(75 24 -65 -61) -65]
Test Case: 773 | Input/Output: [(-82 -74 -25 -98) -98]
Test Case: 774 | Input/Output: [(99 -56 -33 17) -56]
Test Case: 775 | Input/Output: [(-7 -10 -5 33) -10]
Test Case: 776 | Input/Output: [(46 41 26 -94) -94]
Test Case: 777 | Input/Output: [(29 -25 -17 -20) -25]
Test Case: 778 | Input/Output: [(26 -25 3 -85) -85]
Test Case: 779 | Input/Output: [(-23 47 -67 -23) -67]
Test Case: 780 | Input/Output: [(99 -85 63 63) -85]
Test Case: 781 | Input/Output: [(17 -67 -19 49) -67]
Test Case: 782 | Input/Output: [(-35 98 58 -86) -86]
Test Case: 783 | Input/Output: [(82 56 34 -50) -50]
Test Case: 784 | Input/Output: [(15 40 -17 43) -17]
Test Case: 785 | Input/Output: [(-88 74 52 33) -88]
Test Case: 786 | Input/Output: [(-53 75 -99 -79) -99]
Test Case: 787 | Input/Output: [(89 -24 -87 -76) -87]
Test Case: 788 | Input/Output: [(25 95 76 -95) -95]
Test Case: 789 | Input/Output: [(-43 -7 -16 -37) -43]
Test Case: 790 | Input/Output: [(81 -4 -26 -26) -26]
Test Case: 791 | Input/Output: [(-57 -39 -30 -87) -87]
Test Case: 792 | Input/Output: [(86 -4 -74 -19) -74]
Test Case: 793 | Input/Output: [(-79 -92 87 -25) -92]
Test Case: 794 | Input/Output: [(42 -96 5 -65) -96]
Test Case: 795 | Input/Output: [(0 -9 -82 60) -82]
Test Case: 796 | Input/Output: [(6 -41 -41 32) -41]
Test Case: 797 | Input/Output: [(-30 -48 -96 68) -96]
Test Case: 798 | Input/Output: [(92 -7 68 -79) -79]
Test Case: 799 | Input/Output: [(54 15 3 87) 3]
Test Case: 800 | Input/Output: [(88 70 -66 56) -66]
Test Case: 801 | Input/Output: [(94 9 -23 -80) -80]
Test Case: 802 | Input/Output: [(96 27 -30 81) -30]
Test Case: 803 | Input/Output: [(91 -31 -17 -93) -93]
Test Case: 804 | Input/Output: [(-64 -13 26 -21) -64]
Test Case: 805 | Input/Output: [(9 -94 65 -41) -94]
Test Case: 806 | Input/Output: [(94 -20 92 48) -20]
Test Case: 807 | Input/Output: [(39 56 -62 -77) -77]
Test Case: 808 | Input/Output: [(72 51 -35 -47) -47]
Test Case: 809 | Input/Output: [(4 30 2 -92) -92]
Test Case: 810 | Input/Output: [(29 16 -43 57) -43]
Test Case: 811 | Input/Output: [(98 -46 16 -49) -49]
Test Case: 812 | Input/Output: [(-90 -56 -77 -41) -90]
Test Case: 813 | Input/Output: [(-75 -24 -6 -53) -75]
Test Case: 814 | Input/Output: [(16 42 -53 46) -53]
Test Case: 815 | Input/Output: [(-49 -11 57 -21) -49]
Test Case: 816 | Input/Output: [(-32 -75 52 -3) -75]
Test Case: 817 | Input/Output: [(-86 45 -54 -80) -86]
Test Case: 818 | Input/Output: [(-71 -68 -73 6) -73]
Test Case: 819 | Input/Output: [(-66 71 17 -83) -83]
Test Case: 820 | Input/Output: [(16 -43 76 -42) -43]
Test Case: 821 | Input/Output: [(79 -69 67 56) -69]
Test Case: 822 | Input/Output: [(96 -67 -19 -85) -85]
Test Case: 823 | Input/Output: [(54 -39 26 -74) -74]
Test Case: 824 | Input/Output: [(33 -13 -32 0) -32]
Test Case: 825 | Input/Output: [(26 -47 94 30) -47]
Test Case: 826 | Input/Output: [(68 4 40 31) 4]
Test Case: 827 | Input/Output: [(-67 29 -49 48) -67]
Test Case: 828 | Input/Output: [(-11 5 80 80) -11]
Test Case: 829 | Input/Output: [(83 -34 46 -77) -77]
Test Case: 830 | Input/Output: [(-70 -58 -91 -42) -91]
Test Case: 831 | Input/Output: [(-98 99 -14 88) -98]
Test Case: 832 | Input/Output: [(8 -90 -17 29) -90]
Test Case: 833 | Input/Output: [(-39 -79 -37 70) -79]
Test Case: 834 | Input/Output: [(73 -29 71 -29) -29]
Test Case: 835 | Input/Output: [(49 15 33 -65) -65]
Test Case: 836 | Input/Output: [(-58 59 -84 73) -84]
Test Case: 837 | Input/Output: [(-9 -86 -68 -54) -86]
Test Case: 838 | Input/Output: [(63 13 82 16) 13]
Test Case: 839 | Input/Output: [(16 -22 84 -87) -87]
Test Case: 840 | Input/Output: [(61 33 -3 80) -3]
Test Case: 841 | Input/Output: [(-71 22 25 10) -71]
Test Case: 842 | Input/Output: [(1 56 23 -83) -83]
Test Case: 843 | Input/Output: [(39 16 -73 -13) -73]
Test Case: 844 | Input/Output: [(-49 -51 68 87) -51]
Test Case: 845 | Input/Output: [(45 51 -77 90) -77]
Test Case: 846 | Input/Output: [(15 -20 87 90) -20]
Test Case: 847 | Input/Output: [(31 -99 97 -73) -99]
Test Case: 848 | Input/Output: [(-80 -22 -56 53) -80]
Test Case: 849 | Input/Output: [(-58 11 -89 64) -89]
Test Case: 850 | Input/Output: [(-15 2 38 -28) -28]
Test Case: 851 | Input/Output: [(-36 -97 71 30) -97]
Test Case: 852 | Input/Output: [(-4 -8 -75 -53) -75]
Test Case: 853 | Input/Output: [(48 -59 -70 96) -70]
Test Case: 854 | Input/Output: [(-36 -54 39 -47) -54]
Test Case: 855 | Input/Output: [(-22 -80 -97 96) -97]
Test Case: 856 | Input/Output: [(-35 -9 -15 9) -35]
Test Case: 857 | Input/Output: [(63 -82 -5 86) -82]
Test Case: 858 | Input/Output: [(21 -78 -56 60) -78]
Test Case: 859 | Input/Output: [(-23 15 28 -63) -63]
Test Case: 860 | Input/Output: [(-29 69 86 -77) -77]
Test Case: 861 | Input/Output: [(84 -24 -78 -18) -78]
Test Case: 862 | Input/Output: [(-7 -28 -16 91) -28]
Test Case: 863 | Input/Output: [(73 -70 75 -100) -100]
Test Case: 864 | Input/Output: [(-64 46 83 -42) -64]
Test Case: 865 | Input/Output: [(-74 89 57 59) -74]
Test Case: 866 | Input/Output: [(-9 -42 77 -93) -93]
Test Case: 867 | Input/Output: [(60 -15 -6 23) -15]
Test Case: 868 | Input/Output: [(-11 -90 -66 -63) -90]
Test Case: 869 | Input/Output: [(1 -93 -94 -1) -94]
Test Case: 870 | Input/Output: [(-46 55 4 23) -46]
Test Case: 871 | Input/Output: [(60 -46 -20 -72) -72]
Test Case: 872 | Input/Output: [(1 73 47 52) 1]
Test Case: 873 | Input/Output: [(-57 -70 49 82) -70]
Test Case: 874 | Input/Output: [(34 -76 10 4) -76]
Test Case: 875 | Input/Output: [(92 29 55 -94) -94]
Test Case: 876 | Input/Output: [(79 -34 -39 -89) -89]
Test Case: 877 | Input/Output: [(12 -66 91 46) -66]
Test Case: 878 | Input/Output: [(98 96 -44 -10) -44]
Test Case: 879 | Input/Output: [(-73 -31 -13 -8) -73]
Test Case: 880 | Input/Output: [(13 58 -51 -70) -70]
Test Case: 881 | Input/Output: [(-38 21 -65 83) -65]
Test Case: 882 | Input/Output: [(25 -9 98 94) -9]
Test Case: 883 | Input/Output: [(-12 69 -81 0) -81]
Test Case: 884 | Input/Output: [(-75 51 55 72) -75]
Test Case: 885 | Input/Output: [(-30 40 92 -27) -30]
Test Case: 886 | Input/Output: [(-52 28 64 -47) -52]
Test Case: 887 | Input/Output: [(12 80 6 -38) -38]
Test Case: 888 | Input/Output: [(-48 -42 18 -49) -49]
Test Case: 889 | Input/Output: [(69 11 -66 -77) -77]
Test Case: 890 | Input/Output: [(-40 -3 81 -45) -45]
Test Case: 891 | Input/Output: [(87 -14 55 11) -14]
Test Case: 892 | Input/Output: [(88 92 19 35) 19]
Test Case: 893 | Input/Output: [(-44 60 31 80) -44]
Test Case: 894 | Input/Output: [(-53 -25 -50 59) -53]
Test Case: 895 | Input/Output: [(-68 32 47 -82) -82]
Test Case: 896 | Input/Output: [(17 13 -95 -9) -95]
Test Case: 897 | Input/Output: [(74 -68 -61 77) -68]
Test Case: 898 | Input/Output: [(4 45 -32 58) -32]
Test Case: 899 | Input/Output: [(50 96 96 29) 29]
Test Case: 900 | Input/Output: [(-2 25 42 -5) -5]
Test Case: 901 | Input/Output: [(-99 84 -76 -7) -99]
Test Case: 902 | Input/Output: [(-77 -5 -60 35) -77]
Test Case: 903 | Input/Output: [(-43 61 40 -78) -78]
Test Case: 904 | Input/Output: [(14 -21 47 -74) -74]
Test Case: 905 | Input/Output: [(37 -98 -38 -73) -98]
Test Case: 906 | Input/Output: [(-8 -60 94 -6) -60]
Test Case: 907 | Input/Output: [(70 100 5 -51) -51]
Test Case: 908 | Input/Output: [(-21 -94 -77 -58) -94]
Test Case: 909 | Input/Output: [(-93 9 31 6) -93]
Test Case: 910 | Input/Output: [(-76 -93 86 80) -93]
Test Case: 911 | Input/Output: [(62 45 19 25) 19]
Test Case: 912 | Input/Output: [(100 -35 -16 99) -35]
Test Case: 913 | Input/Output: [(-34 -26 35 76) -34]
Test Case: 914 | Input/Output: [(-19 -22 78 -16) -22]
Test Case: 915 | Input/Output: [(37 68 96 82) 37]
Test Case: 916 | Input/Output: [(-27 30 74 3) -27]
Test Case: 917 | Input/Output: [(-15 -18 -7 -50) -50]
Test Case: 918 | Input/Output: [(44 -74 -48 -53) -74]
Test Case: 919 | Input/Output: [(-80 -47 -53 75) -80]
Test Case: 920 | Input/Output: [(34 -93 -14 70) -93]
Test Case: 921 | Input/Output: [(24 -82 7 -80) -82]
Test Case: 922 | Input/Output: [(64 -42 4 -76) -76]
Test Case: 923 | Input/Output: [(-98 3 21 17) -98]
Test Case: 924 | Input/Output: [(96 -44 3 76) -44]
Test Case: 925 | Input/Output: [(16 -57 53 -45) -57]
Test Case: 926 | Input/Output: [(-40 43 -85 -97) -97]
Test Case: 927 | Input/Output: [(43 -63 -66 -20) -66]
Test Case: 928 | Input/Output: [(-37 39 -15 66) -37]
Test Case: 929 | Input/Output: [(-16 74 -97 -12) -97]
Test Case: 930 | Input/Output: [(1 57 -27 -51) -51]
Test Case: 931 | Input/Output: [(-43 65 47 -31) -43]
Test Case: 932 | Input/Output: [(-62 -29 -4 32) -62]
Test Case: 933 | Input/Output: [(-48 74 27 92) -48]
Test Case: 934 | Input/Output: [(100 -67 48 26) -67]
Test Case: 935 | Input/Output: [(5 94 -71 -5) -71]
Test Case: 936 | Input/Output: [(66 38 -39 17) -39]
Test Case: 937 | Input/Output: [(-45 -46 19 -44) -46]
Test Case: 938 | Input/Output: [(42 70 -25 -90) -90]
Test Case: 939 | Input/Output: [(68 -8 27 19) -8]
Test Case: 940 | Input/Output: [(36 28 -41 96) -41]
Test Case: 941 | Input/Output: [(-75 -45 -13 67) -75]
Test Case: 942 | Input/Output: [(23 -87 -47 -45) -87]
Test Case: 943 | Input/Output: [(-89 70 34 33) -89]
Test Case: 944 | Input/Output: [(-29 -58 85 -25) -58]
Test Case: 945 | Input/Output: [(-89 -30 -95 -11) -95]
Test Case: 946 | Input/Output: [(-80 -14 41 73) -80]
Test Case: 947 | Input/Output: [(1 81 -42 40) -42]
Test Case: 948 | Input/Output: [(-44 -6 74 -90) -90]
Test Case: 949 | Input/Output: [(-10 68 57 4) -10]
Test Case: 950 | Input/Output: [(-58 -16 20 -100) -100]
Test Case: 951 | Input/Output: [(-53 -37 75 -87) -87]
Test Case: 952 | Input/Output: [(-67 76 98 -21) -67]
Test Case: 953 | Input/Output: [(-74 -18 -85 -74) -85]
Test Case: 954 | Input/Output: [(-98 89 64 28) -98]
Test Case: 955 | Input/Output: [(-44 50 91 -58) -58]
Test Case: 956 | Input/Output: [(86 88 -27 30) -27]
Test Case: 957 | Input/Output: [(-6 99 -40 -92) -92]
Test Case: 958 | Input/Output: [(-57 -76 19 -63) -76]
Test Case: 959 | Input/Output: [(-98 26 94 -93) -98]
Test Case: 960 | Input/Output: [(80 85 75 -24) -24]
Test Case: 961 | Input/Output: [(20 -37 -99 -36) -99]
Test Case: 962 | Input/Output: [(40 -100 40 -85) -100]
Test Case: 963 | Input/Output: [(11 -24 -74 -44) -74]
Test Case: 964 | Input/Output: [(-82 64 -23 70) -82]
Test Case: 965 | Input/Output: [(-56 18 84 -38) -56]
Test Case: 966 | Input/Output: [(44 -69 31 -36) -69]
Test Case: 967 | Input/Output: [(70 34 86 51) 34]
Test Case: 968 | Input/Output: [(-93 15 -62 26) -93]
Test Case: 969 | Input/Output: [(73 -78 -12 38) -78]
Test Case: 970 | Input/Output: [(30 75 -57 -39) -57]
Test Case: 971 | Input/Output: [(82 30 -44 22) -44]
Test Case: 972 | Input/Output: [(73 28 96 2) 2]
Test Case: 973 | Input/Output: [(-24 54 -57 -98) -98]
Test Case: 974 | Input/Output: [(-3 -36 67 -78) -78]
Test Case: 975 | Input/Output: [(-74 24 41 -29) -74]
Test Case: 976 | Input/Output: [(24 45 38 55) 24]
Test Case: 977 | Input/Output: [(-83 -94 66 70) -94]
Test Case: 978 | Input/Output: [(41 11 -11 27) -11]
Test Case: 979 | Input/Output: [(77 -12 -56 3) -56]
Test Case: 980 | Input/Output: [(43 -15 -64 -22) -64]
Test Case: 981 | Input/Output: [(8 -73 36 -92) -92]
Test Case: 982 | Input/Output: [(38 50 26 -39) -39]
Test Case: 983 | Input/Output: [(64 -39 -5 -63) -63]
Test Case: 984 | Input/Output: [(90 42 -47 -57) -57]
Test Case: 985 | Input/Output: [(1 -45 62 -28) -45]
Test Case: 986 | Input/Output: [(17 70 12 21) 12]
Test Case: 987 | Input/Output: [(-55 27 83 -70) -70]
Test Case: 988 | Input/Output: [(75 -34 -70 98) -70]
Test Case: 989 | Input/Output: [(-63 -79 -27 46) -79]
Test Case: 990 | Input/Output: [(-86 -72 22 -70) -86]
Test Case: 991 | Input/Output: [(-75 88 -41 63) -75]
Test Case: 992 | Input/Output: [(-85 83 -3 55) -85]
Test Case: 993 | Input/Output: [(80 0 -5 -53) -53]
Test Case: 994 | Input/Output: [(-27 -32 -80 -70) -80]
Test Case: 995 | Input/Output: [(96 88 -43 -2) -43]
Test Case: 996 | Input/Output: [(33 -95 -99 -20) -99]
Test Case: 997 | Input/Output: [(90 86 6 29) 6]
Test Case: 998 | Input/Output: [(13 -31 -73 56) -73]
Test Case: 999 | Input/Output: [(34 -28 51 -3) -28]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 79 -104 -79 -54 62 65 62 -75 -6 -51 107 -63 71 -5 90 -17
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-6 9 -6 -6] -6] [[-57 -57 -57 37] -57] [[-56 -56 0 -56] -56] [[12 12 93 12] 12] [[-16 -16 -16 -93] -93] [[3 6 6 6] 3] [[33 -91 -91 -91] -91] [[-1 -21 -1 -1] -21] [[-96 74 74 74] -96] [[-98 -36 -98 -98] -98] [(-95 -95 -95 -95) -95] [(-70 -70 -70 -70) -70] [(-49 -49 -49 -49) -49] [(-75 -75 -75 -75) -75] [(-51 -51 -51 -51) -51] [(20 3 89 86) 3] [(88 29 26 18) 18] [(78 9 50 84) 9] [(87 28 5 73) 5] [(69 63 58 93) 58] [(66 6 92 30) 6] [(3 74 40 64) 3] [(47 96 80 67) 47] [(21 31 55 76) 21] [(58 76 14 28) 14] [(26 87 21 25) 21] [(44 8 77 88) 8] [(73 14 42 43) 14] [(50 17 69 91) 17] [(57 5 77 67) 5] [(30 34 26 26) 26] [(18 52 42 63) 18] [(94 28 6 83) 6] [(33 79 98 43) 33] [(6 85 82 79) 6] [(-64 0 93 35) -64] [(-83 -31 49 -75) -83] [(44 -56 -75 -50) -75] [(88 62 5 -51) -51] [(75 -95 -44 93) -95] [(-60 66 54 -95) -95] [(12 -27 60 -29) -29] [(-99 -50 -70 64) -99] [(67 -15 -79 19) -79] [(20 52 60 38) 20] [(20 -45 19 -6) -45] [(-41 -80 61 47) -80] [(74 -79 -15 -69) -79] [(36 76 13 -34) -34] [(-87 35 -44 70) -87] [(-36 -60 -95 -40) -95] [(24 72 72 73) 24] [(88 84 -45 20) -45] [(44 -62 38 -100) -100] [(-10 72 -17 -77) -77] [(62 -78 -26 -1) -78] [(-43 54 -26 -67) -67] [(26 -24 -38 27) -38] [(-47 74 -81 -35) -81] [(-73 -68 16 74) -73] [(-9 21 -33 -29) -33] [(8 85 12 93) 8] [(39 -97 79 29) -97] [(72 -4 25 84) -4] [(24 83 1 6) 1] [(-92 40 98 40) -92] [(-94 -77 30 -32) -94] [(-65 -86 100 -99) -99] [(87 76 37 -70) -70] [(-15 -14 -31 85) -31] [(-31 -61 54 -52) -61] [(-71 -81 25 -90) -90] [(9 -90 66 -65) -90] [(-13 -56 -75 91) -75] [(20 -52 -79 -55) -79] [(8 10 -47 -56) -56] [(62 51 -41 45) -41] [(31 -62 1 93) -62] [(-93 -8 18 -48) -93] [(-92 86 -43 -88) -92] [(93 -60 99 31) -60] [(48 -82 17 -56) -82] [(6 -72 -74 52) -74] [(26 -57 72 -4) -57] [(70 86 14 17) 14] [(41 -88 -62 4) -88] [(-24 -18 -44 -17) -44] [(5 -94 -43 31) -94] [(-45 -12 27 -90) -90] [(-59 -80 -12 55) -80] [(-81 -25 25 58) -81] [(60 -65 96 -51) -65] [(65 -64 -3 -86) -86] [(27 -30 -55 46) -55] [(54 56 36 53) 36])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -6                  | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -16                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 28                 
Correct output: 58                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 74                 
Correct output: 47                  | Program output: 96                 
Correct output: 21                  | Program output: 31                 
Correct output: 14                  | Program output: 76                 
Correct output: 21                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 34                 
Correct output: 18                  | Program output: 52                 
Correct output: 6                   | Program output: 28                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 85                 
Correct output: -64                 | Program output: 0                  
Correct output: -83                 | Program output: -31                
Correct output: -75                 | Program output: -56                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 66                 
Correct output: -29                 | Program output: -27                
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -15                
Correct output: 20                  | Program output: 52                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: 76                 
Correct output: -87                 | Program output: 35                 
Correct output: -95                 | Program output: -60                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: 84                 
Correct output: -100                | Program output: -62                
Correct output: -77                 | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: 54                 
Correct output: -38                 | Program output: -24                
Correct output: -81                 | Program output: 74                 
Correct output: -73                 | Program output: -68                
Correct output: -33                 | Program output: 21                 
Correct output: 8                   | Program output: 85                 
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 83                 
Correct output: -92                 | Program output: 40                 
Correct output: -94                 | Program output: -77                
Correct output: -99                 | Program output: -86                
Correct output: -70                 | Program output: 76                 
Correct output: -31                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -56                
Correct output: -79                 | Program output: -52                
Correct output: -56                 | Program output: 10                 
Correct output: -41                 | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -8                 
Correct output: -92                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -64                
Correct output: -55                 | Program output: -30                
Correct output: 36                  | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 18} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_494} {:close 1, :instruction print_exec} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_605} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 78} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_870} {:close 0, :instruction integer_max} {:close 1, :instruction -97} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (18 boolean_invert_first_then_and integer_min exec_dup_items print_integer integer_gte in2 boolean_empty exec_if (print_integer exec_while (exec_y_when_autoconstructing (boolean_or integer_dup_items integer_gt integer_dup_items) exec_swap (integer_inc) () in3 integer_flush integer_empty exec_k (integer_mult) (exec_do*range () integer_fromboolean) in1 integer_mod integer_eq exec_y_when_autoconstructing (print_exec (boolean_yankdup boolean_yank integer_fromboolean boolean_yank integer_sub integer_gt integer_eq integer_yankdup integer_eq) tagged_494 print_exec () print_newline) tagged_605 boolean_dup integer_max exec_dup_items integer_gt)) (exec_y_when_autoconstructing (78 integer_dup_times) boolean_dup_times integer_gte integer_dup_times) boolean_frominteger tag_integer_870 integer_max -97 integer_lte integer_max exec_do*while (exec_y (integer_max boolean_invert_first_then_and)))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 18} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_494} {:close 1, :instruction print_exec} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_605} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 78} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_870} {:close 0, :instruction integer_max} {:close 1, :instruction -97} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (18 boolean_invert_first_then_and integer_min exec_dup_items print_integer integer_gte in2 boolean_empty exec_if (print_integer exec_while (exec_y_when_autoconstructing (boolean_or integer_dup_items integer_gt integer_dup_items) exec_swap (integer_inc) () in3 integer_flush integer_empty exec_k (integer_mult) (exec_do*range () integer_fromboolean) in1 integer_mod integer_eq exec_y_when_autoconstructing (print_exec (boolean_yankdup boolean_yank integer_fromboolean boolean_yank integer_sub integer_gt integer_eq integer_yankdup integer_eq) tagged_494 print_exec () print_newline) tagged_605 boolean_dup integer_max exec_dup_items integer_gt)) (exec_y_when_autoconstructing (78 integer_dup_times) boolean_dup_times integer_gte integer_dup_times) boolean_frominteger tag_integer_870 integer_max -97 integer_lte integer_max exec_do*while (exec_y (integer_max boolean_invert_first_then_and)))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 3 3 3 7 5 4 4 17 3)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (12 3 3 3 7 5 4 4 17 3)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_877} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 3, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_pop})
Best program: (boolean_invert_first_then_and tagged_877 boolean_dup integer_eq integer_empty boolean_eq boolean_rot exec_do*times () in2 print_integer integer_sub exec_flush integer_stackdepth boolean_not boolean_stackdepth integer_shove exec_when (integer_add exec_k_when_autoconstructing () () boolean_xor integer_mod) exec_do*times () boolean_flush exec_pop (exec_y (print_integer exec_yank in4 integer_add exec_s (integer_stackdepth boolean_dup_items) (exec_stackdepth exec_if () (boolean_xor) integer_flush integer_pop integer_sub exec_shove () integer_stackdepth boolean_xor boolean_rot) (integer_dup_times) exec_eq integer_mult) integer_dup_items integer_shove) exec_swap () (exec_eq exec_noop) exec_do*times (boolean_eq integer_swap exec_do*while (boolean_xor integer_max integer_max in1) integer_stackdepth) exec_yankdup boolean_eq integer_mod integer_sub exec_do*count (exec_s () (in2) (in1 integer_eq) boolean_not exec_flush print_integer boolean_yankdup integer_fromboolean boolean_invert_second_then_and integer_eq integer_dup exec_eq) in3 integer_pop)
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 79
Size: 101
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 9.939
Median total errors in population: 10
Error averages by case: (0.988 0.997 0.997 0.997 0.993 0.995 0.996 0.996 0.983 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.154
Average program size in population (points): 70.647
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 471127
--- Timings ---
Current time: 1559593907482 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 30.0%
Fitness Testing:      1.7 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 0                  
Correct output: 12                  | Program output: 93                 
Correct output: -93                 | Program output: -16                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -1                 
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 89                 
Correct output: 18                  | Program output: 26                 
Correct output: 9                   | Program output: 50                 
Correct output: 5                   | Program output: 5                  
Correct output: 58                  | Program output: 58                 
Correct output: 6                   | Program output: 92                 
Correct output: 3                   | Program output: 40                 
Correct output: 47                  | Program output: 80                 
Correct output: 21                  | Program output: 55                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 77                 
Correct output: 14                  | Program output: 42                 
Correct output: 17                  | Program output: 69                 
Correct output: 5                   | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 6                   | Program output: 6                  
Correct output: 33                  | Program output: 98                 
Correct output: 6                   | Program output: 82                 
Correct output: -64                 | Program output: 93                 
Correct output: -83                 | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: 5                  
Correct output: -95                 | Program output: -44                
Correct output: -95                 | Program output: 54                 
Correct output: -29                 | Program output: 60                 
Correct output: -99                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 60                 
Correct output: -45                 | Program output: 19                 
Correct output: -80                 | Program output: 61                 
Correct output: -79                 | Program output: -15                
Correct output: -34                 | Program output: 13                 
Correct output: -87                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -17                
Correct output: -78                 | Program output: -26                
Correct output: -67                 | Program output: -26                
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 16                 
Correct output: -33                 | Program output: -33                
Correct output: 8                   | Program output: 12                 
Correct output: -97                 | Program output: 79                 
Correct output: -4                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: 98                 
Correct output: -94                 | Program output: 30                 
Correct output: -99                 | Program output: 100                
Correct output: -70                 | Program output: 37                 
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: 54                 
Correct output: -90                 | Program output: 25                 
Correct output: -90                 | Program output: 66                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -47                
Correct output: -41                 | Program output: -41                
Correct output: -62                 | Program output: 1                  
Correct output: -93                 | Program output: 18                 
Correct output: -92                 | Program output: -43                
Correct output: -60                 | Program output: 99                 
Correct output: -82                 | Program output: 17                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: -88                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -43                
Correct output: -90                 | Program output: 27                 
Correct output: -80                 | Program output: -12                
Correct output: -81                 | Program output: 25                 
Correct output: -65                 | Program output: 96                 
Correct output: -86                 | Program output: -3                 
Correct output: -55                 | Program output: -55                
Correct output: 36                  | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_integer_543} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction -83} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yank})
Lexicase best program: (boolean_or in3 exec_if (exec_s_when_autoconstructing (exec_k () (integer_swap integer_min) print_boolean) (print_integer integer_pop boolean_frominteger) () integer_dup_times boolean_eq exec_if (print_integer boolean_shove exec_dup (integer_dup in1 integer_lt) integer_lte integer_empty) () boolean_swap) (exec_y_when_autoconstructing (exec_y (boolean_dup_times boolean_frominteger integer_add exec_swap (exec_dup (exec_s (boolean_invert_second_then_and integer_shove integer_gte tag_integer_543 integer_shove exec_k_when_autoconstructing (integer_swap exec_if (boolean_invert_second_then_and exec_dup_items exec_while (in1) exec_pop () boolean_flush integer_shove exec_do*count () exec_dup (boolean_eq)) (integer_empty exec_do*count ()) integer_sub integer_sub exec_stackdepth exec_yankdup) (exec_y () -83) print_integer boolean_yank integer_swap exec_shove () boolean_eq boolean_shove) (boolean_shove exec_do*count (boolean_invert_first_then_and integer_lt exec_do*count (boolean_shove integer_swap exec_do*while () boolean_yank))) ())) ()))))
Lexicase best errors: [1 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 105
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_integer_543} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction -83} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yank})
Zero cases best program: (boolean_or in3 exec_if (exec_s_when_autoconstructing (exec_k () (integer_swap integer_min) print_boolean) (print_integer integer_pop boolean_frominteger) () integer_dup_times boolean_eq exec_if (print_integer boolean_shove exec_dup (integer_dup in1 integer_lt) integer_lte integer_empty) () boolean_swap) (exec_y_when_autoconstructing (exec_y (boolean_dup_times boolean_frominteger integer_add exec_swap (exec_dup (exec_s (boolean_invert_second_then_and integer_shove integer_gte tag_integer_543 integer_shove exec_k_when_autoconstructing (integer_swap exec_if (boolean_invert_second_then_and exec_dup_items exec_while (in1) exec_pop () boolean_flush integer_shove exec_do*count () exec_dup (boolean_eq)) (integer_empty exec_do*count ()) integer_sub integer_sub exec_stackdepth exec_yankdup) (exec_y () -83) print_integer boolean_yank integer_swap exec_shove () boolean_eq boolean_shove) (boolean_shove exec_do*count (boolean_invert_first_then_and integer_lt exec_do*count (boolean_shove integer_swap exec_do*while () boolean_yank))) ())) ()))))
Zero cases best errors: [1 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 105
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 320 1000 85 88 89 429 89 2 91)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (328 320 0 85 88 89 429 89 2 91)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 1, :instruction print_exec} {:close 2, :instruction in1})
Best program: (exec_dup_times () exec_k (integer_lt integer_max) () integer_dup_times exec_dup_items integer_div boolean_shove exec_k_when_autoconstructing (in2) (boolean_eq boolean_stackdepth integer_stackdepth integer_yank integer_min exec_dup_items exec_eq) exec_s (boolean_eq) (integer_fromboolean) (boolean_shove in2 integer_lte) boolean_eq boolean_and exec_s () (integer_dec) (exec_noop exec_rot (integer_yank) () (in3 exec_y (print_integer integer_stackdepth integer_yank boolean_shove exec_y_when_autoconstructing (exec_while () integer_yankdup boolean_dup_items boolean_invert_first_then_and exec_noop integer_shove boolean_flush in2 boolean_not boolean_stackdepth integer_flush)) integer_eq integer_div boolean_xor integer_yankdup exec_noop)) boolean_flush exec_s () (exec_dup (integer_shove exec_shove (print_newline exec_shove (print_exec (exec_do*range (exec_yankdup exec_dup_times (integer_stackdepth boolean_invert_first_then_and exec_noop integer_swap exec_dup_items boolean_invert_first_then_and boolean_frominteger boolean_and print_exec () in1))))))) ())
Errors: [1 1 1 0 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 74
Size: 102
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 8.479
Median total errors in population: 9
Error averages by case: (0.672 0.68 1.0 0.915 0.912 0.911 0.571 0.911 0.998 0.909)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 68.772
Average program size in population (points): 89.593
Average percent parens in population: 0.228
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1038589
--- Timings ---
Current time: 1559593910264 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         1.9 seconds, 38.1%
Fitness Testing:      2.6 seconds, 52.6%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: 37                 
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -1                 
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 84                 
Correct output: 5                   | Program output: 73                 
Correct output: 58                  | Program output: 93                 
Correct output: 6                   | Program output: 30                 
Correct output: 3                   | Program output: 64                 
Correct output: 47                  | Program output: 67                 
Correct output: 21                  | Program output: 76                 
Correct output: 14                  | Program output: 28                 
Correct output: 21                  | Program output: 25                 
Correct output: 8                   | Program output: 88                 
Correct output: 14                  | Program output: 43                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 67                 
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 63                 
Correct output: 6                   | Program output: 83                 
Correct output: 33                  | Program output: 43                 
Correct output: 6                   | Program output: 79                 
Correct output: -64                 | Program output: 35                 
Correct output: -83                 | Program output: -75                
Correct output: -75                 | Program output: -50                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: 64                 
Correct output: -79                 | Program output: 19                 
Correct output: 20                  | Program output: 38                 
Correct output: -45                 | Program output: -6                 
Correct output: -80                 | Program output: 47                 
Correct output: -79                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: 70                 
Correct output: -95                 | Program output: -40                
Correct output: 24                  | Program output: 73                 
Correct output: -45                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: 27                 
Correct output: -81                 | Program output: -35                
Correct output: -73                 | Program output: 74                 
Correct output: -33                 | Program output: -29                
Correct output: 8                   | Program output: 93                 
Correct output: -97                 | Program output: 29                 
Correct output: -4                  | Program output: 84                 
Correct output: 1                   | Program output: 6                  
Correct output: -92                 | Program output: 40                 
Correct output: -94                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 85                 
Correct output: -61                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: -75                 | Program output: 91                 
Correct output: -79                 | Program output: -55                
Correct output: -56                 | Program output: -56                
Correct output: -41                 | Program output: 45                 
Correct output: -62                 | Program output: 93                 
Correct output: -93                 | Program output: -48                
Correct output: -92                 | Program output: -88                
Correct output: -60                 | Program output: 31                 
Correct output: -82                 | Program output: -56                
Correct output: -74                 | Program output: 52                 
Correct output: -57                 | Program output: -4                 
Correct output: 14                  | Program output: 17                 
Correct output: -88                 | Program output: 4                  
Correct output: -44                 | Program output: -17                
Correct output: -94                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: 55                 
Correct output: -81                 | Program output: 58                 
Correct output: -65                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 46                 
Correct output: 36                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -38} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush})
Lexicase best program: (exec_while (integer_sub -38 boolean_or boolean_stackdepth integer_dup_items integer_swap) integer_yank integer_lt boolean_not exec_do*times (in1 integer_mult integer_add) 48 boolean_eq boolean_yank exec_while () exec_yankdup print_integer exec_y_when_autoconstructing (integer_mult) boolean_yank exec_pop () integer_pop exec_dup (integer_div integer_inc boolean_xor in4 exec_k_when_autoconstructing (exec_pop (exec_rot (tag_exec_887 () exec_dup () integer_inc exec_do*while (exec_yankdup exec_pop (boolean_yankdup) exec_eq exec_empty integer_yankdup) integer_dup_times boolean_rot exec_pop (in3 49) exec_k (integer_stackdepth integer_empty 51) (integer_swap) integer_shove) (integer_empty exec_dup_items boolean_rot) (exec_pop (exec_shove (exec_while (exec_swap (boolean_empty boolean_invert_second_then_and exec_do*while (exec_if (boolean_dup_times integer_lte) (exec_do*while (exec_flush)))) ())))))) ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -38} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush})
Zero cases best program: (exec_while (integer_sub -38 boolean_or boolean_stackdepth integer_dup_items integer_swap) integer_yank integer_lt boolean_not exec_do*times (in1 integer_mult integer_add) 48 boolean_eq boolean_yank exec_while () exec_yankdup print_integer exec_y_when_autoconstructing (integer_mult) boolean_yank exec_pop () integer_pop exec_dup (integer_div integer_inc boolean_xor in4 exec_k_when_autoconstructing (exec_pop (exec_rot (tag_exec_887 () exec_dup () integer_inc exec_do*while (exec_yankdup exec_pop (boolean_yankdup) exec_eq exec_empty integer_yankdup) integer_dup_times boolean_rot exec_pop (in3 49) exec_k (integer_stackdepth integer_empty 51) (integer_swap) integer_shove) (integer_empty exec_dup_items boolean_rot) (exec_pop (exec_shove (exec_while (exec_swap (boolean_empty boolean_invert_second_then_and exec_do*while (exec_if (boolean_dup_times integer_lte) (exec_do*while (exec_flush)))) ())))))) ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (27 56 333 6 58 184 15 180 516 270)
Population mean number of elite cases: 1.64
Count of perfect (error zero) individuals by case: (27 56 333 6 58 184 15 180 516 270)
Population mean number of perfect (error zero) cases: 1.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction tagged_439} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush})
Best program: (exec_while (integer_sub -38 print_newline boolean_or boolean_stackdepth integer_dup_items integer_swap) integer_yank exec_dup_times (integer_lt exec_empty boolean_not exec_do*times (in1 integer_mult integer_add) 48 boolean_eq boolean_yank integer_mult exec_while () exec_yankdup in4 print_integer exec_y_when_autoconstructing (integer_mult) boolean_yank exec_pop () integer_pop exec_dup (integer_div boolean_xor in4 tagged_439 exec_pop (exec_rot (tag_exec_887 () exec_dup () integer_sub exec_do*while (exec_yankdup exec_pop (boolean_yankdup) boolean_stackdepth exec_eq exec_empty integer_yankdup) boolean_rot integer_dup) (exec_yank exec_pop (in3 49) exec_k (integer_stackdepth boolean_invert_second_then_and integer_empty 51) (integer_swap) exec_if (integer_empty boolean_rot) (exec_pop (exec_while (boolean_empty boolean_invert_second_then_and exec_do*while (boolean_dup_times integer_lte) exec_do*while (exec_flush))))) ()))))
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 72
Size: 97
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 8.355
Median total errors in population: 7
Error averages by case: (0.973 0.944 0.667 0.994 0.942 0.816 0.985 0.82 0.484 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.495
Average program size in population (points): 96.412
Average percent parens in population: 0.245
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1501550
--- Timings ---
Current time: 1559593912376 milliseconds
Total Time:           7.5 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.0 seconds, 40.4%
Fitness Testing:      3.1 seconds, 41.6%
Report:               1.3 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -6                  | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -16                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 28                 
Correct output: 58                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 74                 
Correct output: 47                  | Program output: 96                 
Correct output: 21                  | Program output: 31                 
Correct output: 14                  | Program output: 76                 
Correct output: 21                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 34                 
Correct output: 18                  | Program output: 52                 
Correct output: 6                   | Program output: 28                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 85                 
Correct output: -64                 | Program output: 0                  
Correct output: -83                 | Program output: -31                
Correct output: -75                 | Program output: -56                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 66                 
Correct output: -29                 | Program output: -27                
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -15                
Correct output: 20                  | Program output: 52                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: 76                 
Correct output: -87                 | Program output: 35                 
Correct output: -95                 | Program output: -60                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: 84                 
Correct output: -100                | Program output: -62                
Correct output: -77                 | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: 54                 
Correct output: -38                 | Program output: -24                
Correct output: -81                 | Program output: 74                 
Correct output: -73                 | Program output: -68                
Correct output: -33                 | Program output: 21                 
Correct output: 8                   | Program output: 85                 
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 83                 
Correct output: -92                 | Program output: 40                 
Correct output: -94                 | Program output: -77                
Correct output: -99                 | Program output: -86                
Correct output: -70                 | Program output: 76                 
Correct output: -31                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -56                
Correct output: -79                 | Program output: -52                
Correct output: -56                 | Program output: 10                 
Correct output: -41                 | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -8                 
Correct output: -92                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -64                
Correct output: -55                 | Program output: -30                
Correct output: 36                  | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_877} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 3, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_877 integer_mod integer_empty boolean_eq boolean_rot exec_do*times () in2 print_integer integer_sub exec_flush integer_stackdepth) (boolean_not boolean_stackdepth integer_shove exec_when (exec_k_when_autoconstructing () () exec_shove (integer_mod) exec_do*times () exec_y (exec_pop (print_integer exec_yank integer_add integer_stackdepth boolean_dup_items) exec_if () (integer_flush exec_yank integer_pop integer_sub exec_shove () integer_stackdepth integer_inc boolean_rot) integer_dup_times) integer_mult) integer_shove) boolean_rot exec_swap () (exec_do*times (boolean_eq integer_swap exec_do*while (boolean_xor integer_max integer_max integer_lt) integer_stackdepth) exec_yankdup boolean_eq integer_mod integer_sub exec_do*count (in2) boolean_rot) boolean_not exec_flush print_integer integer_fromboolean boolean_invert_second_then_and integer_dup exec_eq in3 integer_pop)
Lexicase best errors: [0 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_877} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 3, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_877 integer_mod integer_empty boolean_eq boolean_rot exec_do*times () in2 print_integer integer_sub exec_flush integer_stackdepth) (boolean_not boolean_stackdepth integer_shove exec_when (exec_k_when_autoconstructing () () exec_shove (integer_mod) exec_do*times () exec_y (exec_pop (print_integer exec_yank integer_add integer_stackdepth boolean_dup_items) exec_if () (integer_flush exec_yank integer_pop integer_sub exec_shove () integer_stackdepth integer_inc boolean_rot) integer_dup_times) integer_mult) integer_shove) boolean_rot exec_swap () (exec_do*times (boolean_eq integer_swap exec_do*while (boolean_xor integer_max integer_max integer_lt) integer_stackdepth) exec_yankdup boolean_eq integer_mod integer_sub exec_do*count (in2) boolean_rot) boolean_not exec_flush print_integer integer_fromboolean boolean_invert_second_then_and integer_dup exec_eq in3 integer_pop)
Zero cases best errors: [0 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 104 135 131 131 410 369 129 130 131)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (135 104 135 131 131 410 369 129 130 131)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_877} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_pop})
Best program: (boolean_invert_first_then_and tagged_877 integer_dec integer_yankdup boolean_dup integer_eq integer_empty boolean_rot boolean_dup_times exec_do*times () in2 print_integer integer_sub boolean_dup_times exec_flush integer_stackdepth boolean_not boolean_stackdepth boolean_swap integer_shove exec_when (integer_add exec_k_when_autoconstructing () () boolean_xor exec_when (integer_mod) exec_do*times () boolean_flush exec_s_when_autoconstructing (exec_y (print_integer exec_yank in4 boolean_and exec_s (integer_mult) (integer_stackdepth exec_k_when_autoconstructing () (exec_if () (boolean_xor) exec_while () exec_dup_items integer_pop integer_sub integer_max exec_shove () integer_stackdepth integer_min) exec_s_when_autoconstructing (integer_pop boolean_xor boolean_rot) (integer_dup_times) (exec_eq integer_inc integer_yank integer_mult) integer_dup_items exec_swap () (exec_eq integer_min integer_gt exec_k_when_autoconstructing (exec_do*times (boolean_eq integer_swap exec_do*while (in2 boolean_xor integer_max integer_max in1) print_exec (exec_yankdup boolean_eq integer_sub exec_do*count (exec_s () (in2) (in1 boolean_not exec_flush print_integer boolean_yankdup exec_y (integer_fromboolean boolean_invert_second_then_and in3 in2 integer_dup boolean_swap in3) integer_pop))))) ())) ())) () ()))
Errors: [0 1 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 93
Size: 128
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 8.195
Median total errors in population: 8
Error averages by case: (0.865 0.896 0.865 0.869 0.869 0.59 0.631 0.871 0.87 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.026
Average program size in population (points): 90.059
Average percent parens in population: 0.250
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1954828
--- Timings ---
Current time: 1559593914319 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.2 seconds, 44.0%
Fitness Testing:      3.7 seconds, 38.2%
Report:               1.6 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -6                  | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -16                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 28                 
Correct output: 58                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 74                 
Correct output: 47                  | Program output: 96                 
Correct output: 21                  | Program output: 31                 
Correct output: 14                  | Program output: 76                 
Correct output: 21                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 34                 
Correct output: 18                  | Program output: 52                 
Correct output: 6                   | Program output: 28                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 85                 
Correct output: -64                 | Program output: 0                  
Correct output: -83                 | Program output: -31                
Correct output: -75                 | Program output: -56                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: 66                 
Correct output: -29                 | Program output: -27                
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -15                
Correct output: 20                  | Program output: 52                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: 76                 
Correct output: -87                 | Program output: 35                 
Correct output: -95                 | Program output: -60                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: 84                 
Correct output: -100                | Program output: -62                
Correct output: -77                 | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: 54                 
Correct output: -38                 | Program output: -24                
Correct output: -81                 | Program output: 74                 
Correct output: -73                 | Program output: -68                
Correct output: -33                 | Program output: 21                 
Correct output: 8                   | Program output: 85                 
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 83                 
Correct output: -92                 | Program output: 40                 
Correct output: -94                 | Program output: -77                
Correct output: -99                 | Program output: -86                
Correct output: -70                 | Program output: 76                 
Correct output: -31                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -56                
Correct output: -79                 | Program output: -52                
Correct output: -56                 | Program output: 10                 
Correct output: -41                 | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -8                 
Correct output: -92                 | Program output: 86                 
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -64                
Correct output: -55                 | Program output: -30                
Correct output: 36                  | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_877} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 3, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_68} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_invert_first_then_and tagged_877 boolean_dup integer_eq integer_empty boolean_and in2 print_integer exec_flush boolean_not boolean_stackdepth integer_shove integer_add boolean_invert_first_then_and exec_k_when_autoconstructing () () boolean_stackdepth integer_inc boolean_xor exec_do*times () exec_pop (exec_yank print_newline integer_yankdup in4 integer_stackdepth exec_do*range (boolean_dup_items) exec_stackdepth boolean_xor) integer_flush integer_pop integer_sub boolean_stackdepth exec_shove () boolean_dup integer_stackdepth integer_gt boolean_rot exec_k (integer_dup_times) (exec_eq integer_mult) integer_dup_items integer_shove exec_swap () (integer_fromboolean boolean_not tagged_68 exec_do*times (integer_swap exec_do*while (boolean_xor integer_max integer_sub) exec_pop (boolean_invert_second_then_and boolean_stackdepth) in1) integer_stackdepth) boolean_eq integer_yank integer_mod integer_dup_times exec_flush integer_sub exec_do*count (exec_do*range () in2) integer_dup_times in1 boolean_eq integer_eq boolean_not exec_flush print_integer boolean_yankdup boolean_invert_second_then_and integer_eq exec_dup_times () integer_dup exec_eq in1 integer_pop)
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_877} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 3, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_68} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_invert_first_then_and tagged_877 boolean_dup integer_eq integer_empty boolean_and in2 print_integer exec_flush boolean_not boolean_stackdepth integer_shove integer_add boolean_invert_first_then_and exec_k_when_autoconstructing () () boolean_stackdepth integer_inc boolean_xor exec_do*times () exec_pop (exec_yank print_newline integer_yankdup in4 integer_stackdepth exec_do*range (boolean_dup_items) exec_stackdepth boolean_xor) integer_flush integer_pop integer_sub boolean_stackdepth exec_shove () boolean_dup integer_stackdepth integer_gt boolean_rot exec_k (integer_dup_times) (exec_eq integer_mult) integer_dup_items integer_shove exec_swap () (integer_fromboolean boolean_not tagged_68 exec_do*times (integer_swap exec_do*while (boolean_xor integer_max integer_sub) exec_pop (boolean_invert_second_then_and boolean_stackdepth) in1) integer_stackdepth) boolean_eq integer_yank integer_mod integer_dup_times exec_flush integer_sub exec_do*count (exec_do*range () in2) integer_dup_times in1 boolean_eq integer_eq boolean_not exec_flush print_integer boolean_yankdup boolean_invert_second_then_and integer_eq exec_dup_times () integer_dup exec_eq in1 integer_pop)
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 78 91 75 354 356 355 481 83 356)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (80 78 91 75 354 356 355 481 83 356)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_388} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 3, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction tag_boolean_387} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction in3})
Best program: (boolean_invert_first_then_and tagged_388 boolean_dup exec_dup_items boolean_eq boolean_rot exec_do*times () in2 print_integer integer_sub exec_flush exec_k () (integer_stackdepth) boolean_stackdepth integer_shove integer_add exec_k_when_autoconstructing () () boolean_xor exec_do*times () boolean_flush print_integer in4 integer_add exec_s (integer_inc) (boolean_dup integer_stackdepth exec_stackdepth boolean_xor) (integer_flush boolean_or) integer_pop exec_shove () integer_stackdepth boolean_rot in4 integer_mult integer_dup_items integer_shove exec_eq exec_noop exec_do*times (boolean_eq integer_swap exec_do*while (boolean_xor integer_max in1) integer_stackdepth) boolean_eq integer_sub exec_stackdepth in1 print_integer integer_eq exec_flush tag_boolean_387 print_integer integer_fromboolean boolean_invert_second_then_and boolean_pop integer_eq exec_y (integer_dup in3))
Errors: [1 1 1 1 0 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 65
Size: 79
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 7.691
Median total errors in population: 8
Error averages by case: (0.92 0.922 0.909 0.925 0.646 0.644 0.645 0.519 0.917 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.092
Average program size in population (points): 94.608
Average percent parens in population: 0.249
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2336634
--- Timings ---
Current time: 1559593916122 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 47.1%
Fitness Testing:      4.1 seconds, 35.7%
Report:               1.9 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: 3                   | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 78                 
Correct output: 5                   | Program output: 73                 
Correct output: 58                  | Program output: 69                 
Correct output: 6                   | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 47                  | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 28                 
Correct output: 21                  | Program output: 25                 
Correct output: 8                   | Program output: 44                 
Correct output: 14                  | Program output: 43                 
Correct output: 17                  | Program output: 50                 
Correct output: 5                   | Program output: 57                 
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 83                 
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -75                 | Program output: -50                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 75                 
Correct output: -95                 | Program output: -95                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: -45                 | Program output: -6                 
Correct output: -80                 | Program output: -41                
Correct output: -79                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -40                
Correct output: 24                  | Program output: 24                 
Correct output: -45                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: 26                 
Correct output: -81                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -33                 | Program output: -29                
Correct output: 8                   | Program output: 8                  
Correct output: -97                 | Program output: 29                 
Correct output: -4                  | Program output: 72                 
Correct output: 1                   | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -15                
Correct output: -61                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: -75                 | Program output: -13                
Correct output: -79                 | Program output: -55                
Correct output: -56                 | Program output: -56                
Correct output: -41                 | Program output: 45                 
Correct output: -62                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: 31                 
Correct output: -82                 | Program output: -56                
Correct output: -74                 | Program output: 6                  
Correct output: -57                 | Program output: -4                 
Correct output: 14                  | Program output: 17                 
Correct output: -88                 | Program output: 4                  
Correct output: -44                 | Program output: -24                
Correct output: -94                 | Program output: 5                  
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 27                 
Correct output: 36                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction 48} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction 49} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction 51} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush})
Lexicase best program: (exec_while (integer_sub -38 print_newline boolean_or boolean_stackdepth integer_swap) boolean_not exec_do*times (in1 integer_mult integer_add) integer_shove 48 boolean_yank exec_yankdup integer_min print_integer exec_y_when_autoconstructing (integer_mult) exec_pop () exec_dup (integer_div in4 exec_pop (exec_rot (tag_exec_887 () exec_dup () integer_inc exec_do*while (boolean_yank exec_pop (boolean_yankdup) exec_eq exec_empty integer_yankdup) integer_dup_times boolean_rot integer_min integer_dup) (exec_pop (exec_do*while (in3 49) integer_stackdepth integer_empty print_integer 51) integer_swap) (integer_shove) exec_dup_items exec_pop (exec_while (boolean_frominteger) integer_min 14 boolean_invert_second_then_and exec_do*while () integer_lte) exec_do*while (exec_flush))))
Lexicase best errors: [0 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction 48} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction 49} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction 51} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush})
Zero cases best program: (exec_while (integer_sub -38 print_newline boolean_or boolean_stackdepth integer_swap) boolean_not exec_do*times (in1 integer_mult integer_add) integer_shove 48 boolean_yank exec_yankdup integer_min print_integer exec_y_when_autoconstructing (integer_mult) exec_pop () exec_dup (integer_div in4 exec_pop (exec_rot (tag_exec_887 () exec_dup () integer_inc exec_do*while (boolean_yank exec_pop (boolean_yankdup) exec_eq exec_empty integer_yankdup) integer_dup_times boolean_rot integer_min integer_dup) (exec_pop (exec_do*while (in3 49) integer_stackdepth integer_empty print_integer 51) integer_swap) (integer_shove) exec_dup_items exec_pop (exec_while (boolean_frominteger) integer_min 14 boolean_invert_second_then_and exec_do*while () integer_lte) exec_do*while (exec_flush))))
Zero cases best errors: [0 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 243 66 380 199 199 292 56 294 293)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (72 243 66 380 199 199 292 56 294 293)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while})
Best program: (exec_while (integer_sub -38 print_newline boolean_or boolean_stackdepth integer_swap) boolean_or boolean_not exec_do*times (in1 integer_add) integer_shove 48 boolean_eq exec_yankdup integer_min print_integer integer_min exec_pop () exec_dup (integer_min in4 exec_pop (exec_rot (print_newline tag_exec_887 () exec_dup () print_exec () integer_inc exec_do*while (exec_pop (boolean_yankdup) integer_div exec_eq integer_yankdup) integer_dup_times integer_dup) (exec_pop (boolean_pop) in3 exec_s () (49) (exec_k (integer_mult integer_stackdepth integer_empty 51) (boolean_rot) exec_while (boolean_frominteger) 14 boolean_invert_second_then_and exec_if (boolean_dup_times) (boolean_dup_times exec_do*while ()))) ())))
Errors: [0 0 0 0 1 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 81
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.906
Median total errors in population: 7
Error averages by case: (0.928 0.757 0.934 0.62 0.801 0.801 0.708 0.944 0.706 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.398
Average program size in population (points): 95.033
Average percent parens in population: 0.249
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2730077
--- Timings ---
Current time: 1559593917977 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.5 seconds, 49.1%
Fitness Testing:      4.5 seconds, 34.2%
Report:               2.1 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -1                 
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 50                 
Correct output: 5                   | Program output: 5                  
Correct output: 58                  | Program output: 58                 
Correct output: 6                   | Program output: 30                 
Correct output: 3                   | Program output: 40                 
Correct output: 47                  | Program output: 67                 
Correct output: 21                  | Program output: 55                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 77                 
Correct output: 14                  | Program output: 42                 
Correct output: 17                  | Program output: 69                 
Correct output: 5                   | Program output: 67                 
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 6                   | Program output: 6                  
Correct output: 33                  | Program output: 43                 
Correct output: 6                   | Program output: 79                 
Correct output: -64                 | Program output: 35                 
Correct output: -83                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 38                 
Correct output: -45                 | Program output: -6                 
Correct output: -80                 | Program output: 47                 
Correct output: -79                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -26                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 16                 
Correct output: -33                 | Program output: -33                
Correct output: 8                   | Program output: 12                 
Correct output: -97                 | Program output: 29                 
Correct output: -4                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: 40                 
Correct output: -94                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -41                 | Program output: -41                
Correct output: -62                 | Program output: 1                  
Correct output: -93                 | Program output: -48                
Correct output: -92                 | Program output: -88                
Correct output: -60                 | Program output: 31                 
Correct output: -82                 | Program output: -56                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -4                 
Correct output: 14                  | Program output: 14                 
Correct output: -88                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -43                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -12                
Correct output: -81                 | Program output: 25                 
Correct output: -65                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 36                  | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush})
Lexicase best program: (exec_while (integer_sub integer_eq -38 print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_mult integer_shove 48 boolean_eq boolean_yank exec_while () exec_yankdup tagged_331 in3 integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (exec_rot (tag_exec_887 () exec_dup () integer_flush boolean_eq exec_do*while (exec_yankdup exec_stackdepth exec_eq integer_yankdup) integer_dup_times integer_dup) (exec_pop (49) exec_k (integer_stackdepth integer_empty boolean_frominteger) (51) exec_dup_items exec_rot (exec_pop (exec_while (boolean_frominteger) 14 boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_flush)))) () ()) ()) ()))))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush})
Zero cases best program: (exec_while (integer_sub integer_eq -38 print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_mult integer_shove 48 boolean_eq boolean_yank exec_while () exec_yankdup tagged_331 in3 integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (exec_rot (tag_exec_887 () exec_dup () integer_flush boolean_eq exec_do*while (exec_yankdup exec_stackdepth exec_eq integer_yankdup) integer_dup_times integer_dup) (exec_pop (49) exec_k (integer_stackdepth integer_empty boolean_frominteger) (51) exec_dup_items exec_rot (exec_pop (exec_while (boolean_frominteger) 14 boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_flush)))) () ()) ()) ()))))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 156 392 547 233 232 155 107 108 393)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (109 156 392 547 233 232 155 107 108 393)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush})
Best program: (exec_while (integer_sub integer_eq -38 print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_mult integer_shove 48 boolean_eq boolean_yank exec_while () exec_yankdup tagged_331 in3 integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (exec_rot (tag_exec_887 () exec_dup () integer_flush boolean_eq exec_do*while (exec_yankdup exec_stackdepth exec_eq integer_yankdup) integer_dup_times integer_dup) (exec_pop (49) exec_k (integer_stackdepth integer_empty boolean_frominteger) (51) exec_dup_items exec_rot (exec_pop (exec_while (boolean_frominteger) 14 boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_flush)))) () ()) ()) ()))))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 87
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.568
Median total errors in population: 7
Error averages by case: (0.891 0.844 0.608 0.453 0.767 0.768 0.845 0.893 0.892 0.607)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.632
Average program size in population (points): 94.572
Average percent parens in population: 0.253
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3092564
--- Timings ---
Current time: 1559593919839 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.6 seconds, 50.9%
Fitness Testing:      4.9 seconds, 32.7%
Report:               2.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 326
Test mean error for best: 0.32600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -16                
Correct output: 3                   | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 50                 
Correct output: 5                   | Program output: 5                  
Correct output: 58                  | Program output: 58                 
Correct output: 6                   | Program output: 30                 
Correct output: 3                   | Program output: 340                
Correct output: 47                  | Program output: 67                 
Correct output: 21                  | Program output: 55                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 77                 
Correct output: 14                  | Program output: 42                 
Correct output: 17                  | Program output: 69                 
Correct output: 5                   | Program output: 67                 
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 42                 
Correct output: 6                   | Program output: 6                  
Correct output: 33                  | Program output: 43                 
Correct output: 6                   | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -44                
Correct output: -95                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 38                 
Correct output: -45                 | Program output: -6                 
Correct output: -80                 | Program output: -41                
Correct output: -79                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -17                
Correct output: -78                 | Program output: -26                
Correct output: -67                 | Program output: -43                
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 8                   | Program output: 12                 
Correct output: -97                 | Program output: 29                 
Correct output: -4                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -65                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -31                
Correct output: -90                 | Program output: -71                
Correct output: -90                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -41                 | Program output: -41                
Correct output: -62                 | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: 31                 
Correct output: -82                 | Program output: -56                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -4                 
Correct output: 14                  | Program output: 14                 
Correct output: -88                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -43                
Correct output: -90                 | Program output: -45                
Correct output: -80                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 36                  | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush})
Lexicase best program: (boolean_dup exec_while (integer_sub integer_eq -38 print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_mult integer_shove boolean_or 48 boolean_eq exec_while () exec_yankdup tagged_331 in1) in3 integer_min integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (tag_exec_887 () exec_dup () integer_flush boolean_eq exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (49) exec_k (integer_stackdepth boolean_frominteger) (51) exec_dup_items exec_rot (exec_while (boolean_frominteger) 14 boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_flush))) () ()) () ()) ())))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush})
Zero cases best program: (boolean_dup exec_while (integer_sub integer_eq -38 print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_mult integer_shove boolean_or 48 boolean_eq exec_while () exec_yankdup tagged_331 in1) in3 integer_min integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (tag_exec_887 () exec_dup () integer_flush boolean_eq exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (49) exec_k (integer_stackdepth boolean_frominteger) (51) exec_dup_items exec_rot (exec_while (boolean_frominteger) 14 boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_flush))) () ()) () ()) ())))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 76 201 200 78 201 78 75 296 77)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (169 76 201 200 78 201 78 75 296 77)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_887} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 14} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush})
Best program: (exec_while (integer_sub integer_eq -38 print_newline integer_swap) integer_yank boolean_not exec_do*times (in1 integer_mult integer_shove boolean_eq boolean_yank exec_while () in1 exec_yankdup tagged_331 in3 integer_min print_integer integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (exec_rot (tag_exec_887 () exec_dup () integer_flush boolean_eq exec_do*while (exec_yankdup exec_stackdepth integer_gte integer_yankdup) integer_stackdepth integer_dup_times integer_dup) (exec_pop (49) exec_k (integer_stackdepth boolean_frominteger) (51) exec_dup_items exec_rot (exec_pop (exec_while (in3) boolean_frominteger) 14 boolean_invert_second_then_and print_exec (exec_if (exec_pop (exec_flush)) ())) () ()) ()) ())))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 59
Size: 86
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.549
Median total errors in population: 9
Error averages by case: (0.831 0.924 0.799 0.8 0.922 0.799 0.922 0.925 0.704 0.923)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.513
Average program size in population (points): 91.625
Average percent parens in population: 0.287
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.204
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3494986
--- Timings ---
Current time: 1559593921724 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.8 seconds, 51.9%
Fitness Testing:      5.4 seconds, 31.7%
Report:               2.7 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 594
Test mean error for best: 0.59400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: 3                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: 74                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 28                 
Correct output: 58                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 74                 
Correct output: 47                  | Program output: 96                 
Correct output: 21                  | Program output: 31                 
Correct output: 14                  | Program output: 76                 
Correct output: 21                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 34                 
Correct output: 18                  | Program output: 52                 
Correct output: 6                   | Program output: 28                 
Correct output: 33                  | Program output: 79                 
Correct output: 6                   | Program output: 85                 
Correct output: -64                 | Program output: 0                  
Correct output: -83                 | Program output: -75                
Correct output: -75                 | Program output: -56                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -29                 | Program output: -27                
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -15                
Correct output: 20                  | Program output: 52                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: 76                 
Correct output: -87                 | Program output: 35                 
Correct output: -95                 | Program output: -60                
Correct output: 24                  | Program output: 72                 
Correct output: -45                 | Program output: 84                 
Correct output: -100                | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -24                
Correct output: -81                 | Program output: -35                
Correct output: -73                 | Program output: -68                
Correct output: -33                 | Program output: -29                
Correct output: 8                   | Program output: 85                 
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 83                 
Correct output: -92                 | Program output: 40                 
Correct output: -94                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: 76                 
Correct output: -31                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -56                
Correct output: -79                 | Program output: -52                
Correct output: -56                 | Program output: 10                 
Correct output: -41                 | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -48                
Correct output: -92                 | Program output: -88                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -64                
Correct output: -55                 | Program output: -30                
Correct output: 36                  | Program output: 56                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_exec_887} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush})
Lexicase best program: (integer_sub integer_eq -38 integer_swap integer_yank boolean_dup in1 integer_mult integer_shove boolean_and boolean_eq boolean_yank exec_while () exec_yankdup tagged_331 in2 integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (integer_mult tag_exec_887 () integer_flush boolean_eq exec_yankdup exec_stackdepth exec_eq integer_dup_times integer_dup) (exec_pop (49) integer_stackdepth integer_empty 51) exec_dup_items exec_rot (exec_pop (boolean_frominteger) boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (integer_lte exec_flush))) () ())))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_exec_887} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush})
Zero cases best program: (integer_sub integer_eq -38 integer_swap integer_yank boolean_dup in1 integer_mult integer_shove boolean_and boolean_eq boolean_yank exec_while () exec_yankdup tagged_331 in2 integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (integer_mult tag_exec_887 () integer_flush boolean_eq exec_yankdup exec_stackdepth exec_eq integer_dup_times integer_dup) (exec_pop (49) integer_stackdepth integer_empty 51) exec_dup_items exec_rot (exec_pop (boolean_frominteger) boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (integer_lte exec_flush))) () ())))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 150 158 237 237 172 149 66 149 150)
Population mean number of elite cases: 1.61
Count of perfect (error zero) individuals by case: (146 150 158 237 237 172 149 66 149 150)
Population mean number of perfect (error zero) cases: 1.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_exec_887} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction 49} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush})
Best program: (integer_sub integer_eq -38 integer_swap integer_yank boolean_dup in1 integer_mult integer_shove boolean_and boolean_eq boolean_yank exec_while () exec_yankdup tagged_331 in2 integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) exec_dup (integer_div in4 exec_pop (exec_s_when_autoconstructing () (integer_mult tag_exec_887 () integer_flush boolean_eq exec_yankdup exec_stackdepth exec_eq integer_dup_times integer_dup) (exec_pop (49) integer_stackdepth integer_empty 51) exec_dup_items exec_rot (exec_pop (boolean_frominteger) boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (integer_lte exec_flush))) () ())))
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 8.386
Median total errors in population: 10
Error averages by case: (0.854 0.85 0.842 0.763 0.763 0.828 0.851 0.934 0.851 0.85)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.291
Average program size in population (points): 84.701
Average percent parens in population: 0.299
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3887776
--- Timings ---
Current time: 1559593923539 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.9 seconds, 52.8%
Fitness Testing:      5.8 seconds, 30.8%
Report:               3.0 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -16                
Correct output: 3                   | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 58                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 47                  | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -60                
Correct output: -29                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: 24                  | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -62                
Correct output: -77                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -43                
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 8                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -86                
Correct output: -70                 | Program output: 37                 
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -47                
Correct output: -41                 | Program output: -41                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -64                
Correct output: -55                 | Program output: -55                
Correct output: 36                  | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction -38} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (boolean_dup exec_while (integer_sub integer_eq boolean_swap -38 exec_noop print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_shove boolean_or 48 boolean_eq exec_s_when_autoconstructing (integer_dup exec_yankdup tagged_331 in1) (in3 in2 integer_min integer_min exec_do*while () print_integer exec_y_when_autoconstructing (integer_inc integer_div in4 exec_pop (exec_dup () integer_mult) exec_s_when_autoconstructing () (exec_rot (exec_dup () integer_flush exec_k_when_autoconstructing (boolean_eq exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) 49) (exec_k (integer_stackdepth boolean_frominteger) (51) boolean_flush) exec_dup_items exec_rot (exec_while (boolean_frominteger) boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_stackdepth))) () ()) () ()) ())) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.312
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction -38} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (boolean_dup exec_while (integer_sub integer_eq boolean_swap -38 exec_noop print_newline integer_swap) integer_yank boolean_dup boolean_not exec_do*times (in1 integer_shove boolean_or 48 boolean_eq exec_s_when_autoconstructing (integer_dup exec_yankdup tagged_331 in1) (in3 in2 integer_min integer_min exec_do*while () print_integer exec_y_when_autoconstructing (integer_inc integer_div in4 exec_pop (exec_dup () integer_mult) exec_s_when_autoconstructing () (exec_rot (exec_dup () integer_flush exec_k_when_autoconstructing (boolean_eq exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) 49) (exec_k (integer_stackdepth boolean_frominteger) (51) boolean_flush) exec_dup_items exec_rot (exec_while (boolean_frominteger) boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_stackdepth))) () ()) () ()) ())) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.312
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 635 405 183 416 422 187 193 191 154)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (82 635 405 183 416 422 187 193 191 154)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_458} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 48} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_331} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction 49} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_stackdepth})
Best program: (boolean_dup exec_while (integer_sub integer_eq -38 exec_noop print_newline integer_swap) integer_yank boolean_not exec_do*times (in1 tag_integer_458 integer_shove boolean_or 48 boolean_dup_items) exec_while () exec_yankdup integer_lte tagged_331 in3 in2 integer_min integer_min print_integer exec_y_when_autoconstructing (integer_inc integer_mult) integer_div integer_pop in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_dup () integer_flush exec_k_when_autoconstructing (boolean_eq exec_do*while (exec_yankdup exec_dup_items exec_stackdepth integer_dup_times integer_dup) exec_pop (exec_noop) 49) (exec_k (integer_shove boolean_frominteger) (51) exec_dup_items exec_rot (exec_while (boolean_invert_second_then_and exec_if (integer_lte) (exec_pop (exec_flush) exec_stackdepth))) () ())) ()))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 61
Size: 85
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.132
Median total errors in population: 6
Error averages by case: (0.918 0.365 0.595 0.817 0.584 0.578 0.813 0.807 0.809 0.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.984
Average program size in population (points): 75.883
Average percent parens in population: 0.272
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4348316
--- Timings ---
Current time: 1559593925413 milliseconds
Total Time:          20.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 53.4%
Fitness Testing:      6.3 seconds, 30.3%
Report:               3.3 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: 3                   | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 58                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 47                  | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: 24                  | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 8                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -41                 | Program output: -41                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 36                  | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction 48} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 88
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction 48} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 88
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 400 258 596 484 250 397 368 280 463)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (250 400 258 596 484 250 397 368 280 463)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction -38} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction 48} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_331} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction 51} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_stackdepth})
Best program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 63
Size: 88
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.254
Median total errors in population: 6
Error averages by case: (0.75 0.6 0.742 0.404 0.516 0.75 0.603 0.632 0.72 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.079
Average program size in population (points): 88.335
Average percent parens in population: 0.285
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4770014
--- Timings ---
Current time: 1559593927258 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.2 seconds, 54.1%
Fitness Testing:      6.7 seconds, 29.8%
Report:               3.5 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 88


Auto-simplifying with starting size: 88
step: 0
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 500
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 1000
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 1500
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 2000
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 2500
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 3000
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 3500
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 4000
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 4500
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

step: 5000
program: (boolean_dup exec_while (integer_eq -38 exec_while (print_newline integer_swap) integer_yank boolean_dup boolean_not in1 48 boolean_dup_items) boolean_eq exec_while () boolean_invert_second_then_and exec_yankdup integer_min tagged_331 in1 in3 in4 in2 integer_min integer_min integer_min print_integer exec_y_when_autoconstructing (exec_do*while (integer_inc integer_mult) integer_div in4 exec_pop (exec_dup () exec_s_when_autoconstructing () (exec_rot (integer_flush exec_k_when_autoconstructing (exec_do*while (exec_yankdup exec_dup_items exec_stackdepth exec_eq integer_dup_times integer_dup) exec_pop (in4 exec_k (integer_stackdepth boolean_frominteger) (boolean_swap boolean_pop 51) exec_dup_items exec_rot (boolean_empty boolean_frominteger) (boolean_invert_second_then_and exec_if (integer_lte) (exec_flush) exec_stackdepth) ())) ()) () ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 88

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -6                  | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: 3                   | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -21                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 58                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 47                  | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 26                  | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 6                   | Program output: 6                  
Correct output: -64                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: 20                  | Program output: 20                 
Correct output: -45                 | Program output: -45                
Correct output: -80                 | Program output: -80                
Correct output: -79                 | Program output: -79                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: 24                  | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 8                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -4                  | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -56                 | Program output: -56                
Correct output: -41                 | Program output: -41                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: 14                  | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 36                  | Program output: 36                 
;;******************************
