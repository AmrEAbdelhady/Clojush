Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[33 -41 -41 -41] -41] [[91 91 91 -13] -13] [[8 8 91 8] 8] [[-34 -34 -34 -71] -71] [[-69 -60 -69 -69] -69] [[-75 -75 -91 -75] -91] [[7 7 -39 7] -39] [[-71 -71 -76 -71] -76] [[44 44 44 -85] -85] [[34 -15 34 34] -15] [(65 65 65 65) 65] [(85 85 85 85) 85] [(33 33 33 33) 33] [(-28 -28 -28 -28) -28] [(18 18 18 18) 18] [(10 11 35 10) 10] [(84 59 62 56) 56] [(18 9 62 73) 9] [(18 4 6 25) 4] [(14 14 19 99) 14] [(43 84 73 79) 43] [(9 11 2 70) 2] [(31 31 36 38) 31] [(76 5 15 35) 5] [(28 73 76 50) 28] [(90 44 47 96) 44] [(53 82 62 25) 25] [(95 36 44 63) 36] [(74 69 47 99) 47] [(74 64 39 9) 9] [(88 88 96 13) 13] [(24 28 43 78) 24] [(42 27 90 83) 27] [(84 49 71 25) 25] [(8 13 6 56) 6] [(-97 -70 53 -93) -97] [(-15 60 -32 75) -32] [(68 -35 83 -88) -88] [(-93 -5 -59 96) -93] [(19 54 2 0) 0] [(-35 -28 -63 -94) -94] [(10 -6 -13 32) -13] [(-83 -24 -45 -31) -83] [(98 72 76 84) 72] [(66 -72 57 11) -72] [(93 -39 -23 48) -39] [(-79 -88 -26 93) -88] [(-41 60 -35 19) -41] [(87 -50 -12 80) -50] [(-59 25 25 73) -59] [(27 30 74 -49) -49] [(15 -94 -85 -61) -94] [(-37 -26 73 -91) -91] [(20 79 -8 22) -8] [(12 -47 -72 62) -72] [(-82 -29 30 -37) -82] [(-77 -23 36 -16) -77] [(74 -80 -57 52) -80] [(-80 83 -100 -64) -100] [(-64 -67 16 69) -67] [(44 31 -49 -60) -60] [(94 -55 -22 -90) -90] [(0 51 -36 -95) -95] [(48 -45 -83 -73) -83] [(-13 66 55 -5) -13] [(12 87 -85 -54) -85] [(19 -76 -4 -81) -81] [(78 95 -30 83) -30] [(-24 62 91 14) -24] [(5 66 32 -76) -76] [(-83 58 -7 73) -83] [(-88 -55 4 -15) -88] [(-50 90 -60 -77) -77] [(-15 -47 38 9) -47] [(-48 -71 -58 -96) -96] [(-23 -94 -90 -95) -95] [(31 -9 -23 80) -23] [(36 -70 -37 60) -70] [(-32 -41 85 -89) -89] [(22 69 -27 -32) -32] [(-68 -67 -30 -76) -76] [(-55 82 -65 1) -65] [(-20 -2 -3 -81) -81] [(-87 -80 44 79) -87] [(-46 -34 6 -57) -57] [(68 -82 90 100) -82] [(16 71 -67 -57) -67] [(25 16 2 -16) -16] [(71 85 -17 -39) -39] [(-3 -98 35 38) -98] [(99 97 -89 -36) -89] [(-49 85 90 -92) -92] [(-15 0 66 96) -15] [(-55 -59 -42 -20) -59] [(-82 66 -75 -90) -90])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[33 -41 -41 -41] -41]
Train Case:   6 | Input/Output: [[91 91 91 -13] -13]
Train Case:   7 | Input/Output: [[8 8 91 8] 8]
Train Case:   8 | Input/Output: [[-34 -34 -34 -71] -71]
Train Case:   9 | Input/Output: [[-69 -60 -69 -69] -69]
Train Case:  10 | Input/Output: [[-75 -75 -91 -75] -91]
Train Case:  11 | Input/Output: [[7 7 -39 7] -39]
Train Case:  12 | Input/Output: [[-71 -71 -76 -71] -76]
Train Case:  13 | Input/Output: [[44 44 44 -85] -85]
Train Case:  14 | Input/Output: [[34 -15 34 34] -15]
Train Case:  15 | Input/Output: [(65 65 65 65) 65]
Train Case:  16 | Input/Output: [(85 85 85 85) 85]
Train Case:  17 | Input/Output: [(33 33 33 33) 33]
Train Case:  18 | Input/Output: [(-28 -28 -28 -28) -28]
Train Case:  19 | Input/Output: [(18 18 18 18) 18]
Train Case:  20 | Input/Output: [(10 11 35 10) 10]
Train Case:  21 | Input/Output: [(84 59 62 56) 56]
Train Case:  22 | Input/Output: [(18 9 62 73) 9]
Train Case:  23 | Input/Output: [(18 4 6 25) 4]
Train Case:  24 | Input/Output: [(14 14 19 99) 14]
Train Case:  25 | Input/Output: [(43 84 73 79) 43]
Train Case:  26 | Input/Output: [(9 11 2 70) 2]
Train Case:  27 | Input/Output: [(31 31 36 38) 31]
Train Case:  28 | Input/Output: [(76 5 15 35) 5]
Train Case:  29 | Input/Output: [(28 73 76 50) 28]
Train Case:  30 | Input/Output: [(90 44 47 96) 44]
Train Case:  31 | Input/Output: [(53 82 62 25) 25]
Train Case:  32 | Input/Output: [(95 36 44 63) 36]
Train Case:  33 | Input/Output: [(74 69 47 99) 47]
Train Case:  34 | Input/Output: [(74 64 39 9) 9]
Train Case:  35 | Input/Output: [(88 88 96 13) 13]
Train Case:  36 | Input/Output: [(24 28 43 78) 24]
Train Case:  37 | Input/Output: [(42 27 90 83) 27]
Train Case:  38 | Input/Output: [(84 49 71 25) 25]
Train Case:  39 | Input/Output: [(8 13 6 56) 6]
Train Case:  40 | Input/Output: [(-97 -70 53 -93) -97]
Train Case:  41 | Input/Output: [(-15 60 -32 75) -32]
Train Case:  42 | Input/Output: [(68 -35 83 -88) -88]
Train Case:  43 | Input/Output: [(-93 -5 -59 96) -93]
Train Case:  44 | Input/Output: [(19 54 2 0) 0]
Train Case:  45 | Input/Output: [(-35 -28 -63 -94) -94]
Train Case:  46 | Input/Output: [(10 -6 -13 32) -13]
Train Case:  47 | Input/Output: [(-83 -24 -45 -31) -83]
Train Case:  48 | Input/Output: [(98 72 76 84) 72]
Train Case:  49 | Input/Output: [(66 -72 57 11) -72]
Train Case:  50 | Input/Output: [(93 -39 -23 48) -39]
Train Case:  51 | Input/Output: [(-79 -88 -26 93) -88]
Train Case:  52 | Input/Output: [(-41 60 -35 19) -41]
Train Case:  53 | Input/Output: [(87 -50 -12 80) -50]
Train Case:  54 | Input/Output: [(-59 25 25 73) -59]
Train Case:  55 | Input/Output: [(27 30 74 -49) -49]
Train Case:  56 | Input/Output: [(15 -94 -85 -61) -94]
Train Case:  57 | Input/Output: [(-37 -26 73 -91) -91]
Train Case:  58 | Input/Output: [(20 79 -8 22) -8]
Train Case:  59 | Input/Output: [(12 -47 -72 62) -72]
Train Case:  60 | Input/Output: [(-82 -29 30 -37) -82]
Train Case:  61 | Input/Output: [(-77 -23 36 -16) -77]
Train Case:  62 | Input/Output: [(74 -80 -57 52) -80]
Train Case:  63 | Input/Output: [(-80 83 -100 -64) -100]
Train Case:  64 | Input/Output: [(-64 -67 16 69) -67]
Train Case:  65 | Input/Output: [(44 31 -49 -60) -60]
Train Case:  66 | Input/Output: [(94 -55 -22 -90) -90]
Train Case:  67 | Input/Output: [(0 51 -36 -95) -95]
Train Case:  68 | Input/Output: [(48 -45 -83 -73) -83]
Train Case:  69 | Input/Output: [(-13 66 55 -5) -13]
Train Case:  70 | Input/Output: [(12 87 -85 -54) -85]
Train Case:  71 | Input/Output: [(19 -76 -4 -81) -81]
Train Case:  72 | Input/Output: [(78 95 -30 83) -30]
Train Case:  73 | Input/Output: [(-24 62 91 14) -24]
Train Case:  74 | Input/Output: [(5 66 32 -76) -76]
Train Case:  75 | Input/Output: [(-83 58 -7 73) -83]
Train Case:  76 | Input/Output: [(-88 -55 4 -15) -88]
Train Case:  77 | Input/Output: [(-50 90 -60 -77) -77]
Train Case:  78 | Input/Output: [(-15 -47 38 9) -47]
Train Case:  79 | Input/Output: [(-48 -71 -58 -96) -96]
Train Case:  80 | Input/Output: [(-23 -94 -90 -95) -95]
Train Case:  81 | Input/Output: [(31 -9 -23 80) -23]
Train Case:  82 | Input/Output: [(36 -70 -37 60) -70]
Train Case:  83 | Input/Output: [(-32 -41 85 -89) -89]
Train Case:  84 | Input/Output: [(22 69 -27 -32) -32]
Train Case:  85 | Input/Output: [(-68 -67 -30 -76) -76]
Train Case:  86 | Input/Output: [(-55 82 -65 1) -65]
Train Case:  87 | Input/Output: [(-20 -2 -3 -81) -81]
Train Case:  88 | Input/Output: [(-87 -80 44 79) -87]
Train Case:  89 | Input/Output: [(-46 -34 6 -57) -57]
Train Case:  90 | Input/Output: [(68 -82 90 100) -82]
Train Case:  91 | Input/Output: [(16 71 -67 -57) -67]
Train Case:  92 | Input/Output: [(25 16 2 -16) -16]
Train Case:  93 | Input/Output: [(71 85 -17 -39) -39]
Train Case:  94 | Input/Output: [(-3 -98 35 38) -98]
Train Case:  95 | Input/Output: [(99 97 -89 -36) -89]
Train Case:  96 | Input/Output: [(-49 85 90 -92) -92]
Train Case:  97 | Input/Output: [(-15 0 66 96) -15]
Train Case:  98 | Input/Output: [(-55 -59 -42 -20) -59]
Train Case:  99 | Input/Output: [(-82 66 -75 -90) -90]
Test Case:   0 | Input/Output: [[-46 -46 -46 85] -46]
Test Case:   1 | Input/Output: [[-57 -13 -57 -57] -57]
Test Case:   2 | Input/Output: [[3 -72 3 3] -72]
Test Case:   3 | Input/Output: [[-56 15 15 15] -56]
Test Case:   4 | Input/Output: [[-31 -31 67 -31] -31]
Test Case:   5 | Input/Output: [[33 33 99 33] 33]
Test Case:   6 | Input/Output: [[26 26 -38 26] -38]
Test Case:   7 | Input/Output: [[-50 -50 -50 -65] -65]
Test Case:   8 | Input/Output: [[39 39 -95 39] -95]
Test Case:   9 | Input/Output: [[-22 18 18 18] -22]
Test Case:  10 | Input/Output: [[-68 87 -68 -68] -68]
Test Case:  11 | Input/Output: [[20 -20 20 20] -20]
Test Case:  12 | Input/Output: [[88 2 2 2] 2]
Test Case:  13 | Input/Output: [[3 6 3 3] 3]
Test Case:  14 | Input/Output: [[83 83 83 45] 45]
Test Case:  15 | Input/Output: [[-88 -88 -42 -88] -88]
Test Case:  16 | Input/Output: [[-10 80 80 80] -10]
Test Case:  17 | Input/Output: [[36 -33 36 36] -33]
Test Case:  18 | Input/Output: [[1 1 1 -32] -32]
Test Case:  19 | Input/Output: [[18 18 18 32] 18]
Test Case:  20 | Input/Output: [[87 87 87 -79] -79]
Test Case:  21 | Input/Output: [[51 69 51 51] 51]
Test Case:  22 | Input/Output: [[-91 -15 -91 -91] -91]
Test Case:  23 | Input/Output: [[-45 -99 -99 -99] -99]
Test Case:  24 | Input/Output: [[96 96 96 -75] -75]
Test Case:  25 | Input/Output: [[99 39 99 99] 39]
Test Case:  26 | Input/Output: [[67 67 67 5] 5]
Test Case:  27 | Input/Output: [[28 28 28 26] 26]
Test Case:  28 | Input/Output: [[-23 -23 46 -23] -23]
Test Case:  29 | Input/Output: [[31 -100 31 31] -100]
Test Case:  30 | Input/Output: [[-4 -4 20 -4] -4]
Test Case:  31 | Input/Output: [[28 -23 -23 -23] -23]
Test Case:  32 | Input/Output: [[6 6 29 6] 6]
Test Case:  33 | Input/Output: [[8 -57 8 8] -57]
Test Case:  34 | Input/Output: [[95 95 95 38] 38]
Test Case:  35 | Input/Output: [[36 -32 -32 -32] -32]
Test Case:  36 | Input/Output: [[-60 -60 46 -60] -60]
Test Case:  37 | Input/Output: [[88 88 -99 88] -99]
Test Case:  38 | Input/Output: [[58 58 -15 58] -15]
Test Case:  39 | Input/Output: [[-98 -98 -98 80] -98]
Test Case:  40 | Input/Output: [[-80 -80 14 -80] -80]
Test Case:  41 | Input/Output: [[0 0 0 67] 0]
Test Case:  42 | Input/Output: [[28 33 28 28] 28]
Test Case:  43 | Input/Output: [[-98 -98 -73 -98] -98]
Test Case:  44 | Input/Output: [[46 10 46 46] 10]
Test Case:  45 | Input/Output: [[37 37 37 60] 37]
Test Case:  46 | Input/Output: [[-74 -51 -51 -51] -74]
Test Case:  47 | Input/Output: [[-9 -50 -9 -9] -50]
Test Case:  48 | Input/Output: [[77 -48 -48 -48] -48]
Test Case:  49 | Input/Output: [[91 80 80 80] 80]
Test Case:  50 | Input/Output: [[67 67 -86 67] -86]
Test Case:  51 | Input/Output: [[29 -86 29 29] -86]
Test Case:  52 | Input/Output: [[-11 40 -11 -11] -11]
Test Case:  53 | Input/Output: [[82 82 81 82] 81]
Test Case:  54 | Input/Output: [[57 57 57 68] 57]
Test Case:  55 | Input/Output: [[-59 -59 -59 48] -59]
Test Case:  56 | Input/Output: [[-59 68 68 68] -59]
Test Case:  57 | Input/Output: [[-49 -49 -49 -98] -98]
Test Case:  58 | Input/Output: [[85 85 -82 85] -82]
Test Case:  59 | Input/Output: [[-61 -20 -20 -20] -61]
Test Case:  60 | Input/Output: [[71 71 71 71] 71]
Test Case:  61 | Input/Output: [[93 93 93 -98] -98]
Test Case:  62 | Input/Output: [[-56 -56 -9 -56] -56]
Test Case:  63 | Input/Output: [[59 59 28 59] 28]
Test Case:  64 | Input/Output: [[8 78 8 8] 8]
Test Case:  65 | Input/Output: [[-91 -91 -91 13] -91]
Test Case:  66 | Input/Output: [[95 77 95 95] 77]
Test Case:  67 | Input/Output: [[6 -79 -79 -79] -79]
Test Case:  68 | Input/Output: [[-89 -30 -89 -89] -89]
Test Case:  69 | Input/Output: [[32 -19 32 32] -19]
Test Case:  70 | Input/Output: [[52 34 34 34] 34]
Test Case:  71 | Input/Output: [[62 62 62 -13] -13]
Test Case:  72 | Input/Output: [[-36 -36 -36 92] -36]
Test Case:  73 | Input/Output: [[-55 -7 -55 -55] -55]
Test Case:  74 | Input/Output: [[67 -26 -26 -26] -26]
Test Case:  75 | Input/Output: [[-7 58 -7 -7] -7]
Test Case:  76 | Input/Output: [[-32 -32 -32 64] -32]
Test Case:  77 | Input/Output: [[13 13 -23 13] -23]
Test Case:  78 | Input/Output: [[61 -3 -3 -3] -3]
Test Case:  79 | Input/Output: [[-99 -99 84 -99] -99]
Test Case:  80 | Input/Output: [[51 51 51 25] 25]
Test Case:  81 | Input/Output: [[100 54 54 54] 54]
Test Case:  82 | Input/Output: [[18 18 18 41] 18]
Test Case:  83 | Input/Output: [[-57 89 -57 -57] -57]
Test Case:  84 | Input/Output: [[21 -71 -71 -71] -71]
Test Case:  85 | Input/Output: [[63 -96 63 63] -96]
Test Case:  86 | Input/Output: [[22 22 22 1] 1]
Test Case:  87 | Input/Output: [[76 -12 -12 -12] -12]
Test Case:  88 | Input/Output: [[100 19 19 19] 19]
Test Case:  89 | Input/Output: [[-47 75 75 75] -47]
Test Case:  90 | Input/Output: [[-49 -49 -49 -98] -98]
Test Case:  91 | Input/Output: [[-36 -36 -97 -36] -97]
Test Case:  92 | Input/Output: [[-88 -40 -88 -88] -88]
Test Case:  93 | Input/Output: [[-56 22 22 22] -56]
Test Case:  94 | Input/Output: [[20 20 47 20] 20]
Test Case:  95 | Input/Output: [[23 -86 23 23] -86]
Test Case:  96 | Input/Output: [[59 13 59 59] 13]
Test Case:  97 | Input/Output: [[-53 75 -53 -53] -53]
Test Case:  98 | Input/Output: [[95 95 57 95] 57]
Test Case:  99 | Input/Output: [[48 48 48 51] 48]
Test Case: 100 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 101 | Input/Output: [(49 49 49 49) 49]
Test Case: 102 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 103 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 104 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 105 | Input/Output: [(30 30 30 30) 30]
Test Case: 106 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 107 | Input/Output: [(33 33 33 33) 33]
Test Case: 108 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 109 | Input/Output: [(47 47 47 47) 47]
Test Case: 110 | Input/Output: [(29 29 29 29) 29]
Test Case: 111 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 112 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 113 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 114 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 115 | Input/Output: [(69 69 69 69) 69]
Test Case: 116 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 117 | Input/Output: [(95 95 95 95) 95]
Test Case: 118 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 119 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 120 | Input/Output: [(81 81 81 81) 81]
Test Case: 121 | Input/Output: [(22 22 22 22) 22]
Test Case: 122 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 123 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 124 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 125 | Input/Output: [(96 96 96 96) 96]
Test Case: 126 | Input/Output: [(17 17 17 17) 17]
Test Case: 127 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 128 | Input/Output: [(43 43 43 43) 43]
Test Case: 129 | Input/Output: [(36 36 36 36) 36]
Test Case: 130 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 131 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 132 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 133 | Input/Output: [(15 15 15 15) 15]
Test Case: 134 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 135 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 136 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 137 | Input/Output: [(96 96 96 96) 96]
Test Case: 138 | Input/Output: [(9 9 9 9) 9]
Test Case: 139 | Input/Output: [(83 83 83 83) 83]
Test Case: 140 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 141 | Input/Output: [(74 74 74 74) 74]
Test Case: 142 | Input/Output: [(43 43 43 43) 43]
Test Case: 143 | Input/Output: [(72 72 72 72) 72]
Test Case: 144 | Input/Output: [(33 33 33 33) 33]
Test Case: 145 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 146 | Input/Output: [(72 72 72 72) 72]
Test Case: 147 | Input/Output: [(64 64 64 64) 64]
Test Case: 148 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 149 | Input/Output: [(41 41 41 41) 41]
Test Case: 150 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 151 | Input/Output: [(94 94 94 94) 94]
Test Case: 152 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 153 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 154 | Input/Output: [(15 15 15 15) 15]
Test Case: 155 | Input/Output: [(31 31 31 31) 31]
Test Case: 156 | Input/Output: [(49 49 49 49) 49]
Test Case: 157 | Input/Output: [(1 1 1 1) 1]
Test Case: 158 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 159 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 160 | Input/Output: [(14 14 14 14) 14]
Test Case: 161 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 162 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 163 | Input/Output: [(38 38 38 38) 38]
Test Case: 164 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 165 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 166 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 167 | Input/Output: [(41 41 41 41) 41]
Test Case: 168 | Input/Output: [(20 20 20 20) 20]
Test Case: 169 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 170 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 171 | Input/Output: [(53 53 53 53) 53]
Test Case: 172 | Input/Output: [(59 59 59 59) 59]
Test Case: 173 | Input/Output: [(51 51 51 51) 51]
Test Case: 174 | Input/Output: [(68 68 68 68) 68]
Test Case: 175 | Input/Output: [(96 96 96 96) 96]
Test Case: 176 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 177 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 178 | Input/Output: [(98 98 98 98) 98]
Test Case: 179 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 180 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 181 | Input/Output: [(33 33 33 33) 33]
Test Case: 182 | Input/Output: [(97 97 97 97) 97]
Test Case: 183 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 184 | Input/Output: [(96 96 96 96) 96]
Test Case: 185 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 186 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 187 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 188 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 189 | Input/Output: [(66 66 66 66) 66]
Test Case: 190 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 191 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 192 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 193 | Input/Output: [(23 23 23 23) 23]
Test Case: 194 | Input/Output: [(56 56 56 56) 56]
Test Case: 195 | Input/Output: [(52 52 52 52) 52]
Test Case: 196 | Input/Output: [(32 32 32 32) 32]
Test Case: 197 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 198 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 199 | Input/Output: [(29 29 29 29) 29]
Test Case: 200 | Input/Output: [(51 52 55 11) 11]
Test Case: 201 | Input/Output: [(97 89 58 44) 44]
Test Case: 202 | Input/Output: [(88 55 91 1) 1]
Test Case: 203 | Input/Output: [(35 72 59 37) 35]
Test Case: 204 | Input/Output: [(39 39 27 26) 26]
Test Case: 205 | Input/Output: [(6 80 51 12) 6]
Test Case: 206 | Input/Output: [(40 61 5 83) 5]
Test Case: 207 | Input/Output: [(70 68 34 17) 17]
Test Case: 208 | Input/Output: [(71 16 11 83) 11]
Test Case: 209 | Input/Output: [(89 52 45 80) 45]
Test Case: 210 | Input/Output: [(88 11 17 34) 11]
Test Case: 211 | Input/Output: [(65 54 31 72) 31]
Test Case: 212 | Input/Output: [(44 93 34 57) 34]
Test Case: 213 | Input/Output: [(75 76 85 0) 0]
Test Case: 214 | Input/Output: [(62 10 16 73) 10]
Test Case: 215 | Input/Output: [(5 91 71 77) 5]
Test Case: 216 | Input/Output: [(12 4 39 50) 4]
Test Case: 217 | Input/Output: [(54 28 93 22) 22]
Test Case: 218 | Input/Output: [(13 46 92 63) 13]
Test Case: 219 | Input/Output: [(71 42 42 78) 42]
Test Case: 220 | Input/Output: [(18 73 72 58) 18]
Test Case: 221 | Input/Output: [(65 77 53 94) 53]
Test Case: 222 | Input/Output: [(51 51 83 9) 9]
Test Case: 223 | Input/Output: [(99 37 49 5) 5]
Test Case: 224 | Input/Output: [(45 79 32 5) 5]
Test Case: 225 | Input/Output: [(27 34 17 98) 17]
Test Case: 226 | Input/Output: [(8 21 41 21) 8]
Test Case: 227 | Input/Output: [(29 27 78 88) 27]
Test Case: 228 | Input/Output: [(29 93 27 29) 27]
Test Case: 229 | Input/Output: [(73 48 68 72) 48]
Test Case: 230 | Input/Output: [(57 79 71 82) 57]
Test Case: 231 | Input/Output: [(12 81 12 56) 12]
Test Case: 232 | Input/Output: [(38 45 47 73) 38]
Test Case: 233 | Input/Output: [(53 60 20 45) 20]
Test Case: 234 | Input/Output: [(72 4 12 46) 4]
Test Case: 235 | Input/Output: [(77 83 96 19) 19]
Test Case: 236 | Input/Output: [(22 51 45 63) 22]
Test Case: 237 | Input/Output: [(4 50 80 46) 4]
Test Case: 238 | Input/Output: [(15 44 93 64) 15]
Test Case: 239 | Input/Output: [(87 6 93 31) 6]
Test Case: 240 | Input/Output: [(19 26 66 53) 19]
Test Case: 241 | Input/Output: [(36 65 66 49) 36]
Test Case: 242 | Input/Output: [(22 32 3 23) 3]
Test Case: 243 | Input/Output: [(46 67 84 21) 21]
Test Case: 244 | Input/Output: [(53 25 94 43) 25]
Test Case: 245 | Input/Output: [(45 43 30 9) 9]
Test Case: 246 | Input/Output: [(50 43 50 23) 23]
Test Case: 247 | Input/Output: [(8 38 90 72) 8]
Test Case: 248 | Input/Output: [(57 95 34 71) 34]
Test Case: 249 | Input/Output: [(52 59 26 53) 26]
Test Case: 250 | Input/Output: [(54 55 97 89) 54]
Test Case: 251 | Input/Output: [(42 80 100 99) 42]
Test Case: 252 | Input/Output: [(39 70 80 7) 7]
Test Case: 253 | Input/Output: [(36 38 54 76) 36]
Test Case: 254 | Input/Output: [(49 29 49 77) 29]
Test Case: 255 | Input/Output: [(79 45 23 92) 23]
Test Case: 256 | Input/Output: [(14 43 10 55) 10]
Test Case: 257 | Input/Output: [(11 71 12 5) 5]
Test Case: 258 | Input/Output: [(62 95 57 17) 17]
Test Case: 259 | Input/Output: [(38 2 84 4) 2]
Test Case: 260 | Input/Output: [(89 51 34 43) 34]
Test Case: 261 | Input/Output: [(0 58 63 47) 0]
Test Case: 262 | Input/Output: [(45 46 75 64) 45]
Test Case: 263 | Input/Output: [(67 30 39 94) 30]
Test Case: 264 | Input/Output: [(68 96 19 8) 8]
Test Case: 265 | Input/Output: [(31 5 7 6) 5]
Test Case: 266 | Input/Output: [(52 25 97 76) 25]
Test Case: 267 | Input/Output: [(96 39 9 60) 9]
Test Case: 268 | Input/Output: [(79 25 19 4) 4]
Test Case: 269 | Input/Output: [(83 34 90 77) 34]
Test Case: 270 | Input/Output: [(38 54 50 11) 11]
Test Case: 271 | Input/Output: [(37 98 96 87) 37]
Test Case: 272 | Input/Output: [(45 66 43 75) 43]
Test Case: 273 | Input/Output: [(53 86 25 67) 25]
Test Case: 274 | Input/Output: [(100 92 88 16) 16]
Test Case: 275 | Input/Output: [(7 83 32 34) 7]
Test Case: 276 | Input/Output: [(96 45 91 66) 45]
Test Case: 277 | Input/Output: [(43 75 19 2) 2]
Test Case: 278 | Input/Output: [(68 37 56 60) 37]
Test Case: 279 | Input/Output: [(3 19 20 52) 3]
Test Case: 280 | Input/Output: [(4 51 66 0) 0]
Test Case: 281 | Input/Output: [(21 36 6 92) 6]
Test Case: 282 | Input/Output: [(82 2 92 77) 2]
Test Case: 283 | Input/Output: [(36 59 1 79) 1]
Test Case: 284 | Input/Output: [(100 12 45 84) 12]
Test Case: 285 | Input/Output: [(84 40 93 79) 40]
Test Case: 286 | Input/Output: [(64 3 60 78) 3]
Test Case: 287 | Input/Output: [(50 36 73 36) 36]
Test Case: 288 | Input/Output: [(75 38 58 7) 7]
Test Case: 289 | Input/Output: [(29 50 27 23) 23]
Test Case: 290 | Input/Output: [(42 27 39 25) 25]
Test Case: 291 | Input/Output: [(1 39 82 39) 1]
Test Case: 292 | Input/Output: [(81 75 75 83) 75]
Test Case: 293 | Input/Output: [(62 99 9 95) 9]
Test Case: 294 | Input/Output: [(13 72 21 96) 13]
Test Case: 295 | Input/Output: [(50 95 29 42) 29]
Test Case: 296 | Input/Output: [(19 55 63 1) 1]
Test Case: 297 | Input/Output: [(50 18 97 62) 18]
Test Case: 298 | Input/Output: [(10 40 32 42) 10]
Test Case: 299 | Input/Output: [(96 84 81 2) 2]
Test Case: 300 | Input/Output: [(33 70 21 23) 21]
Test Case: 301 | Input/Output: [(74 61 21 97) 21]
Test Case: 302 | Input/Output: [(77 26 82 13) 13]
Test Case: 303 | Input/Output: [(72 59 21 51) 21]
Test Case: 304 | Input/Output: [(35 10 73 88) 10]
Test Case: 305 | Input/Output: [(21 7 9 49) 7]
Test Case: 306 | Input/Output: [(46 32 82 11) 11]
Test Case: 307 | Input/Output: [(6 68 43 45) 6]
Test Case: 308 | Input/Output: [(65 53 77 68) 53]
Test Case: 309 | Input/Output: [(41 57 58 63) 41]
Test Case: 310 | Input/Output: [(24 76 15 89) 15]
Test Case: 311 | Input/Output: [(10 49 30 76) 10]
Test Case: 312 | Input/Output: [(4 61 25 40) 4]
Test Case: 313 | Input/Output: [(80 98 60 58) 58]
Test Case: 314 | Input/Output: [(23 68 19 16) 16]
Test Case: 315 | Input/Output: [(11 50 6 15) 6]
Test Case: 316 | Input/Output: [(48 83 72 81) 48]
Test Case: 317 | Input/Output: [(6 97 37 5) 5]
Test Case: 318 | Input/Output: [(97 82 100 67) 67]
Test Case: 319 | Input/Output: [(86 99 44 67) 44]
Test Case: 320 | Input/Output: [(88 84 11 50) 11]
Test Case: 321 | Input/Output: [(0 39 99 70) 0]
Test Case: 322 | Input/Output: [(98 44 81 17) 17]
Test Case: 323 | Input/Output: [(62 93 45 40) 40]
Test Case: 324 | Input/Output: [(100 73 61 7) 7]
Test Case: 325 | Input/Output: [(22 86 35 42) 22]
Test Case: 326 | Input/Output: [(51 62 65 99) 51]
Test Case: 327 | Input/Output: [(41 45 20 31) 20]
Test Case: 328 | Input/Output: [(54 10 1 33) 1]
Test Case: 329 | Input/Output: [(60 60 53 83) 53]
Test Case: 330 | Input/Output: [(74 72 9 60) 9]
Test Case: 331 | Input/Output: [(94 79 49 99) 49]
Test Case: 332 | Input/Output: [(19 55 51 82) 19]
Test Case: 333 | Input/Output: [(18 7 81 31) 7]
Test Case: 334 | Input/Output: [(38 77 96 5) 5]
Test Case: 335 | Input/Output: [(46 68 42 50) 42]
Test Case: 336 | Input/Output: [(82 43 40 87) 40]
Test Case: 337 | Input/Output: [(63 4 80 7) 4]
Test Case: 338 | Input/Output: [(87 49 53 7) 7]
Test Case: 339 | Input/Output: [(46 11 30 76) 11]
Test Case: 340 | Input/Output: [(95 20 78 9) 9]
Test Case: 341 | Input/Output: [(56 68 62 11) 11]
Test Case: 342 | Input/Output: [(95 91 93 11) 11]
Test Case: 343 | Input/Output: [(89 39 61 20) 20]
Test Case: 344 | Input/Output: [(89 89 90 30) 30]
Test Case: 345 | Input/Output: [(93 63 99 33) 33]
Test Case: 346 | Input/Output: [(92 11 19 68) 11]
Test Case: 347 | Input/Output: [(98 88 12 67) 12]
Test Case: 348 | Input/Output: [(61 35 78 78) 35]
Test Case: 349 | Input/Output: [(86 63 97 79) 63]
Test Case: 350 | Input/Output: [(69 3 51 44) 3]
Test Case: 351 | Input/Output: [(5 67 33 46) 5]
Test Case: 352 | Input/Output: [(7 73 42 14) 7]
Test Case: 353 | Input/Output: [(16 26 22 65) 16]
Test Case: 354 | Input/Output: [(28 47 27 60) 27]
Test Case: 355 | Input/Output: [(28 29 16 40) 16]
Test Case: 356 | Input/Output: [(95 35 2 48) 2]
Test Case: 357 | Input/Output: [(11 80 76 84) 11]
Test Case: 358 | Input/Output: [(35 3 65 2) 2]
Test Case: 359 | Input/Output: [(25 18 67 74) 18]
Test Case: 360 | Input/Output: [(19 22 65 32) 19]
Test Case: 361 | Input/Output: [(82 66 78 41) 41]
Test Case: 362 | Input/Output: [(30 66 86 63) 30]
Test Case: 363 | Input/Output: [(51 62 10 71) 10]
Test Case: 364 | Input/Output: [(42 17 22 15) 15]
Test Case: 365 | Input/Output: [(14 47 68 80) 14]
Test Case: 366 | Input/Output: [(81 49 8 67) 8]
Test Case: 367 | Input/Output: [(96 98 44 68) 44]
Test Case: 368 | Input/Output: [(50 72 23 29) 23]
Test Case: 369 | Input/Output: [(96 22 43 4) 4]
Test Case: 370 | Input/Output: [(28 38 94 16) 16]
Test Case: 371 | Input/Output: [(2 99 46 10) 2]
Test Case: 372 | Input/Output: [(99 30 86 59) 30]
Test Case: 373 | Input/Output: [(19 70 94 87) 19]
Test Case: 374 | Input/Output: [(67 18 63 68) 18]
Test Case: 375 | Input/Output: [(64 29 56 8) 8]
Test Case: 376 | Input/Output: [(57 96 29 51) 29]
Test Case: 377 | Input/Output: [(17 27 59 68) 17]
Test Case: 378 | Input/Output: [(7 43 40 50) 7]
Test Case: 379 | Input/Output: [(87 92 33 27) 27]
Test Case: 380 | Input/Output: [(90 56 23 68) 23]
Test Case: 381 | Input/Output: [(71 18 47 43) 18]
Test Case: 382 | Input/Output: [(59 56 1 33) 1]
Test Case: 383 | Input/Output: [(47 95 45 45) 45]
Test Case: 384 | Input/Output: [(66 37 76 18) 18]
Test Case: 385 | Input/Output: [(41 72 74 82) 41]
Test Case: 386 | Input/Output: [(67 32 8 60) 8]
Test Case: 387 | Input/Output: [(20 58 52 11) 11]
Test Case: 388 | Input/Output: [(61 96 58 14) 14]
Test Case: 389 | Input/Output: [(19 78 37 28) 19]
Test Case: 390 | Input/Output: [(94 31 56 7) 7]
Test Case: 391 | Input/Output: [(68 12 50 83) 12]
Test Case: 392 | Input/Output: [(60 94 100 59) 59]
Test Case: 393 | Input/Output: [(59 43 73 63) 43]
Test Case: 394 | Input/Output: [(38 26 60 72) 26]
Test Case: 395 | Input/Output: [(23 83 7 2) 2]
Test Case: 396 | Input/Output: [(70 64 84 65) 64]
Test Case: 397 | Input/Output: [(22 79 46 85) 22]
Test Case: 398 | Input/Output: [(26 60 1 23) 1]
Test Case: 399 | Input/Output: [(33 63 29 60) 29]
Test Case: 400 | Input/Output: [(1 -89 31 -95) -95]
Test Case: 401 | Input/Output: [(-56 57 82 -96) -96]
Test Case: 402 | Input/Output: [(67 86 15 59) 15]
Test Case: 403 | Input/Output: [(52 -75 1 42) -75]
Test Case: 404 | Input/Output: [(91 -17 -54 -58) -58]
Test Case: 405 | Input/Output: [(78 -63 36 -97) -97]
Test Case: 406 | Input/Output: [(-58 -84 -31 -49) -84]
Test Case: 407 | Input/Output: [(-77 25 81 -94) -94]
Test Case: 408 | Input/Output: [(18 35 24 -57) -57]
Test Case: 409 | Input/Output: [(-46 96 -6 39) -46]
Test Case: 410 | Input/Output: [(32 -64 98 39) -64]
Test Case: 411 | Input/Output: [(-19 -95 16 -99) -99]
Test Case: 412 | Input/Output: [(-43 79 73 -46) -46]
Test Case: 413 | Input/Output: [(-91 26 -25 -8) -91]
Test Case: 414 | Input/Output: [(-23 17 -69 -77) -77]
Test Case: 415 | Input/Output: [(40 79 -82 72) -82]
Test Case: 416 | Input/Output: [(-76 70 -80 -79) -80]
Test Case: 417 | Input/Output: [(-27 -70 42 -96) -96]
Test Case: 418 | Input/Output: [(-38 -43 65 -65) -65]
Test Case: 419 | Input/Output: [(71 60 79 -8) -8]
Test Case: 420 | Input/Output: [(-74 9 55 -28) -74]
Test Case: 421 | Input/Output: [(-17 -99 -65 -87) -99]
Test Case: 422 | Input/Output: [(2 -91 -16 -61) -91]
Test Case: 423 | Input/Output: [(-21 -80 84 -59) -80]
Test Case: 424 | Input/Output: [(-86 46 -92 97) -92]
Test Case: 425 | Input/Output: [(-88 49 -63 27) -88]
Test Case: 426 | Input/Output: [(-97 19 -55 -94) -97]
Test Case: 427 | Input/Output: [(-86 -90 -66 -21) -90]
Test Case: 428 | Input/Output: [(-10 -86 94 -66) -86]
Test Case: 429 | Input/Output: [(-8 -27 60 41) -27]
Test Case: 430 | Input/Output: [(-25 29 -42 -49) -49]
Test Case: 431 | Input/Output: [(83 71 -6 -65) -65]
Test Case: 432 | Input/Output: [(63 63 16 -72) -72]
Test Case: 433 | Input/Output: [(-77 -18 -49 -48) -77]
Test Case: 434 | Input/Output: [(-98 33 72 95) -98]
Test Case: 435 | Input/Output: [(-20 6 -6 -11) -20]
Test Case: 436 | Input/Output: [(17 -69 -99 60) -99]
Test Case: 437 | Input/Output: [(34 41 52 13) 13]
Test Case: 438 | Input/Output: [(-2 40 -68 63) -68]
Test Case: 439 | Input/Output: [(-86 -98 -65 -90) -98]
Test Case: 440 | Input/Output: [(-2 -25 -49 -59) -59]
Test Case: 441 | Input/Output: [(-81 36 21 -90) -90]
Test Case: 442 | Input/Output: [(45 34 -91 -46) -91]
Test Case: 443 | Input/Output: [(-90 -69 -87 86) -90]
Test Case: 444 | Input/Output: [(100 77 -3 4) -3]
Test Case: 445 | Input/Output: [(-25 9 26 39) -25]
Test Case: 446 | Input/Output: [(100 -25 40 92) -25]
Test Case: 447 | Input/Output: [(-47 76 -93 -17) -93]
Test Case: 448 | Input/Output: [(-41 81 53 -38) -41]
Test Case: 449 | Input/Output: [(-65 -31 -43 50) -65]
Test Case: 450 | Input/Output: [(62 84 -48 -44) -48]
Test Case: 451 | Input/Output: [(-13 -34 54 -100) -100]
Test Case: 452 | Input/Output: [(-7 -74 -1 47) -74]
Test Case: 453 | Input/Output: [(-8 25 1 -56) -56]
Test Case: 454 | Input/Output: [(54 -4 -33 -32) -33]
Test Case: 455 | Input/Output: [(-23 87 -21 26) -23]
Test Case: 456 | Input/Output: [(-84 98 -75 -73) -84]
Test Case: 457 | Input/Output: [(98 -20 -2 34) -20]
Test Case: 458 | Input/Output: [(-57 97 -59 59) -59]
Test Case: 459 | Input/Output: [(-17 -4 13 57) -17]
Test Case: 460 | Input/Output: [(-48 45 6 -37) -48]
Test Case: 461 | Input/Output: [(94 63 59 -11) -11]
Test Case: 462 | Input/Output: [(-12 -9 90 -88) -88]
Test Case: 463 | Input/Output: [(95 -44 25 53) -44]
Test Case: 464 | Input/Output: [(3 92 -79 38) -79]
Test Case: 465 | Input/Output: [(-64 37 -95 43) -95]
Test Case: 466 | Input/Output: [(72 -22 -75 37) -75]
Test Case: 467 | Input/Output: [(53 92 69 60) 53]
Test Case: 468 | Input/Output: [(-43 49 -7 -100) -100]
Test Case: 469 | Input/Output: [(-61 -100 -1 22) -100]
Test Case: 470 | Input/Output: [(-57 -100 -100 72) -100]
Test Case: 471 | Input/Output: [(93 -95 40 77) -95]
Test Case: 472 | Input/Output: [(-93 89 -65 14) -93]
Test Case: 473 | Input/Output: [(-46 99 -99 -61) -99]
Test Case: 474 | Input/Output: [(15 52 87 94) 15]
Test Case: 475 | Input/Output: [(67 -13 100 32) -13]
Test Case: 476 | Input/Output: [(-37 23 22 -53) -53]
Test Case: 477 | Input/Output: [(-90 -32 -79 75) -90]
Test Case: 478 | Input/Output: [(-54 -30 -12 -93) -93]
Test Case: 479 | Input/Output: [(64 29 51 86) 29]
Test Case: 480 | Input/Output: [(93 57 -42 60) -42]
Test Case: 481 | Input/Output: [(47 -78 -12 8) -78]
Test Case: 482 | Input/Output: [(29 69 32 23) 23]
Test Case: 483 | Input/Output: [(33 67 -56 -92) -92]
Test Case: 484 | Input/Output: [(57 9 89 29) 9]
Test Case: 485 | Input/Output: [(85 -81 73 35) -81]
Test Case: 486 | Input/Output: [(-13 3 13 -45) -45]
Test Case: 487 | Input/Output: [(-58 -97 74 -91) -97]
Test Case: 488 | Input/Output: [(87 23 61 -95) -95]
Test Case: 489 | Input/Output: [(6 88 -89 49) -89]
Test Case: 490 | Input/Output: [(78 50 -3 -5) -5]
Test Case: 491 | Input/Output: [(-47 -42 5 15) -47]
Test Case: 492 | Input/Output: [(67 -66 85 -20) -66]
Test Case: 493 | Input/Output: [(88 21 -57 68) -57]
Test Case: 494 | Input/Output: [(49 29 40 -13) -13]
Test Case: 495 | Input/Output: [(-6 -83 -7 -79) -83]
Test Case: 496 | Input/Output: [(41 83 -78 97) -78]
Test Case: 497 | Input/Output: [(-25 28 8 71) -25]
Test Case: 498 | Input/Output: [(-6 19 -72 25) -72]
Test Case: 499 | Input/Output: [(91 -46 79 12) -46]
Test Case: 500 | Input/Output: [(51 24 82 97) 24]
Test Case: 501 | Input/Output: [(-42 -55 -5 16) -55]
Test Case: 502 | Input/Output: [(56 34 -37 -2) -37]
Test Case: 503 | Input/Output: [(-65 45 -23 -24) -65]
Test Case: 504 | Input/Output: [(13 -90 -38 52) -90]
Test Case: 505 | Input/Output: [(28 20 -74 -18) -74]
Test Case: 506 | Input/Output: [(72 57 -23 -75) -75]
Test Case: 507 | Input/Output: [(-24 50 96 -62) -62]
Test Case: 508 | Input/Output: [(-91 46 67 -31) -91]
Test Case: 509 | Input/Output: [(-37 -27 19 13) -37]
Test Case: 510 | Input/Output: [(54 43 58 -6) -6]
Test Case: 511 | Input/Output: [(66 68 -44 62) -44]
Test Case: 512 | Input/Output: [(50 -68 11 84) -68]
Test Case: 513 | Input/Output: [(46 -50 58 24) -50]
Test Case: 514 | Input/Output: [(-92 37 48 20) -92]
Test Case: 515 | Input/Output: [(85 99 -49 64) -49]
Test Case: 516 | Input/Output: [(12 2 13 39) 2]
Test Case: 517 | Input/Output: [(91 -49 -55 79) -55]
Test Case: 518 | Input/Output: [(7 34 -71 95) -71]
Test Case: 519 | Input/Output: [(15 -5 77 19) -5]
Test Case: 520 | Input/Output: [(-85 5 -79 70) -85]
Test Case: 521 | Input/Output: [(15 -20 22 50) -20]
Test Case: 522 | Input/Output: [(52 -76 -69 -99) -99]
Test Case: 523 | Input/Output: [(-6 -62 -34 -54) -62]
Test Case: 524 | Input/Output: [(6 -29 -34 2) -34]
Test Case: 525 | Input/Output: [(-52 -36 -82 76) -82]
Test Case: 526 | Input/Output: [(57 78 -88 92) -88]
Test Case: 527 | Input/Output: [(-1 -32 74 -23) -32]
Test Case: 528 | Input/Output: [(-81 92 10 -59) -81]
Test Case: 529 | Input/Output: [(-28 52 89 -32) -32]
Test Case: 530 | Input/Output: [(87 72 -44 33) -44]
Test Case: 531 | Input/Output: [(-29 95 -71 0) -71]
Test Case: 532 | Input/Output: [(72 -22 -25 -42) -42]
Test Case: 533 | Input/Output: [(-96 16 -85 -48) -96]
Test Case: 534 | Input/Output: [(9 73 -77 -80) -80]
Test Case: 535 | Input/Output: [(-77 -71 -61 -50) -77]
Test Case: 536 | Input/Output: [(0 -51 83 -62) -62]
Test Case: 537 | Input/Output: [(97 40 43 -13) -13]
Test Case: 538 | Input/Output: [(23 -47 -58 32) -58]
Test Case: 539 | Input/Output: [(94 -85 -37 99) -85]
Test Case: 540 | Input/Output: [(-85 65 -58 -93) -93]
Test Case: 541 | Input/Output: [(-77 64 90 82) -77]
Test Case: 542 | Input/Output: [(75 34 -19 -49) -49]
Test Case: 543 | Input/Output: [(64 -68 -59 -62) -68]
Test Case: 544 | Input/Output: [(-27 -11 46 82) -27]
Test Case: 545 | Input/Output: [(-28 40 33 12) -28]
Test Case: 546 | Input/Output: [(97 61 -78 85) -78]
Test Case: 547 | Input/Output: [(50 -17 33 -83) -83]
Test Case: 548 | Input/Output: [(-39 26 -19 -41) -41]
Test Case: 549 | Input/Output: [(28 -67 -42 -97) -97]
Test Case: 550 | Input/Output: [(-92 25 94 -16) -92]
Test Case: 551 | Input/Output: [(-33 79 82 -30) -33]
Test Case: 552 | Input/Output: [(19 22 10 -95) -95]
Test Case: 553 | Input/Output: [(8 52 80 -34) -34]
Test Case: 554 | Input/Output: [(30 -92 -58 -55) -92]
Test Case: 555 | Input/Output: [(-81 -81 7 57) -81]
Test Case: 556 | Input/Output: [(14 69 -16 -39) -39]
Test Case: 557 | Input/Output: [(-60 64 -88 -27) -88]
Test Case: 558 | Input/Output: [(-100 29 27 -10) -100]
Test Case: 559 | Input/Output: [(-72 25 29 15) -72]
Test Case: 560 | Input/Output: [(-91 -92 -10 92) -92]
Test Case: 561 | Input/Output: [(60 49 -40 -6) -40]
Test Case: 562 | Input/Output: [(98 -16 -5 -35) -35]
Test Case: 563 | Input/Output: [(-42 -25 26 -57) -57]
Test Case: 564 | Input/Output: [(13 8 -87 14) -87]
Test Case: 565 | Input/Output: [(80 23 57 77) 23]
Test Case: 566 | Input/Output: [(9 71 -12 -1) -12]
Test Case: 567 | Input/Output: [(-43 25 -77 -86) -86]
Test Case: 568 | Input/Output: [(-54 -82 -70 -5) -82]
Test Case: 569 | Input/Output: [(-92 -14 -65 86) -92]
Test Case: 570 | Input/Output: [(98 -59 -55 61) -59]
Test Case: 571 | Input/Output: [(91 56 -14 60) -14]
Test Case: 572 | Input/Output: [(92 98 -70 -60) -70]
Test Case: 573 | Input/Output: [(-83 75 68 48) -83]
Test Case: 574 | Input/Output: [(38 -70 -32 -38) -70]
Test Case: 575 | Input/Output: [(98 98 40 -15) -15]
Test Case: 576 | Input/Output: [(-82 52 -11 96) -82]
Test Case: 577 | Input/Output: [(52 -28 -72 1) -72]
Test Case: 578 | Input/Output: [(-7 96 -92 -59) -92]
Test Case: 579 | Input/Output: [(95 -7 -66 -57) -66]
Test Case: 580 | Input/Output: [(46 -13 79 50) -13]
Test Case: 581 | Input/Output: [(4 -92 10 -45) -92]
Test Case: 582 | Input/Output: [(87 -13 29 22) -13]
Test Case: 583 | Input/Output: [(44 86 -4 -34) -34]
Test Case: 584 | Input/Output: [(-33 -97 4 23) -97]
Test Case: 585 | Input/Output: [(10 -96 -32 44) -96]
Test Case: 586 | Input/Output: [(-95 -23 89 -77) -95]
Test Case: 587 | Input/Output: [(-88 -97 83 -92) -97]
Test Case: 588 | Input/Output: [(96 -87 35 32) -87]
Test Case: 589 | Input/Output: [(90 39 38 94) 38]
Test Case: 590 | Input/Output: [(-76 54 53 -18) -76]
Test Case: 591 | Input/Output: [(-90 -7 -84 -91) -91]
Test Case: 592 | Input/Output: [(19 74 -64 -64) -64]
Test Case: 593 | Input/Output: [(-85 5 1 94) -85]
Test Case: 594 | Input/Output: [(78 -5 -31 31) -31]
Test Case: 595 | Input/Output: [(29 -61 -28 98) -61]
Test Case: 596 | Input/Output: [(-56 -72 98 -88) -88]
Test Case: 597 | Input/Output: [(-68 68 -98 12) -98]
Test Case: 598 | Input/Output: [(-81 -82 -6 34) -82]
Test Case: 599 | Input/Output: [(-68 40 -36 -20) -68]
Test Case: 600 | Input/Output: [(72 -12 59 -55) -55]
Test Case: 601 | Input/Output: [(-56 -45 -100 33) -100]
Test Case: 602 | Input/Output: [(47 -8 -26 99) -26]
Test Case: 603 | Input/Output: [(-97 -85 -92 -44) -97]
Test Case: 604 | Input/Output: [(46 51 -54 5) -54]
Test Case: 605 | Input/Output: [(85 -20 -69 -93) -93]
Test Case: 606 | Input/Output: [(-68 -49 -74 66) -74]
Test Case: 607 | Input/Output: [(-37 6 11 -17) -37]
Test Case: 608 | Input/Output: [(-40 -54 -74 7) -74]
Test Case: 609 | Input/Output: [(45 64 -16 -51) -51]
Test Case: 610 | Input/Output: [(38 -89 -6 33) -89]
Test Case: 611 | Input/Output: [(61 6 1 -78) -78]
Test Case: 612 | Input/Output: [(-57 -67 -73 37) -73]
Test Case: 613 | Input/Output: [(6 29 -51 -76) -76]
Test Case: 614 | Input/Output: [(67 -64 9 15) -64]
Test Case: 615 | Input/Output: [(-7 -34 13 66) -34]
Test Case: 616 | Input/Output: [(51 -3 -80 8) -80]
Test Case: 617 | Input/Output: [(12 28 37 -6) -6]
Test Case: 618 | Input/Output: [(27 -9 -43 -59) -59]
Test Case: 619 | Input/Output: [(-70 -16 69 89) -70]
Test Case: 620 | Input/Output: [(-41 -5 48 7) -41]
Test Case: 621 | Input/Output: [(-97 -31 100 18) -97]
Test Case: 622 | Input/Output: [(1 -80 -62 94) -80]
Test Case: 623 | Input/Output: [(73 88 23 21) 21]
Test Case: 624 | Input/Output: [(80 93 -16 -100) -100]
Test Case: 625 | Input/Output: [(-30 -77 -48 -16) -77]
Test Case: 626 | Input/Output: [(31 -57 -98 77) -98]
Test Case: 627 | Input/Output: [(-62 60 63 69) -62]
Test Case: 628 | Input/Output: [(95 -82 14 -99) -99]
Test Case: 629 | Input/Output: [(14 -56 20 -92) -92]
Test Case: 630 | Input/Output: [(-16 98 -86 42) -86]
Test Case: 631 | Input/Output: [(-16 -38 -47 -10) -47]
Test Case: 632 | Input/Output: [(-85 -31 -88 46) -88]
Test Case: 633 | Input/Output: [(77 -99 -54 -11) -99]
Test Case: 634 | Input/Output: [(-64 -54 -6 74) -64]
Test Case: 635 | Input/Output: [(-83 -18 87 64) -83]
Test Case: 636 | Input/Output: [(16 -70 -88 -43) -88]
Test Case: 637 | Input/Output: [(-49 -5 35 -59) -59]
Test Case: 638 | Input/Output: [(-74 -74 45 54) -74]
Test Case: 639 | Input/Output: [(19 65 -42 -71) -71]
Test Case: 640 | Input/Output: [(7 -26 -9 77) -26]
Test Case: 641 | Input/Output: [(-48 -12 -1 -31) -48]
Test Case: 642 | Input/Output: [(43 -95 -50 -44) -95]
Test Case: 643 | Input/Output: [(7 -52 -31 -21) -52]
Test Case: 644 | Input/Output: [(71 -25 17 -9) -25]
Test Case: 645 | Input/Output: [(-84 -31 -62 70) -84]
Test Case: 646 | Input/Output: [(18 -33 -24 -87) -87]
Test Case: 647 | Input/Output: [(83 62 95 -21) -21]
Test Case: 648 | Input/Output: [(-75 93 -37 -72) -75]
Test Case: 649 | Input/Output: [(18 41 45 -69) -69]
Test Case: 650 | Input/Output: [(-16 36 85 14) -16]
Test Case: 651 | Input/Output: [(-83 -83 -78 -66) -83]
Test Case: 652 | Input/Output: [(-6 -7 -38 -37) -38]
Test Case: 653 | Input/Output: [(95 -19 44 67) -19]
Test Case: 654 | Input/Output: [(11 91 -27 -13) -27]
Test Case: 655 | Input/Output: [(-28 42 14 86) -28]
Test Case: 656 | Input/Output: [(30 -66 -9 12) -66]
Test Case: 657 | Input/Output: [(-73 -91 8 -96) -96]
Test Case: 658 | Input/Output: [(42 -51 87 60) -51]
Test Case: 659 | Input/Output: [(-53 42 82 45) -53]
Test Case: 660 | Input/Output: [(-60 74 13 64) -60]
Test Case: 661 | Input/Output: [(61 -80 37 -51) -80]
Test Case: 662 | Input/Output: [(8 -92 -92 30) -92]
Test Case: 663 | Input/Output: [(-74 61 -43 74) -74]
Test Case: 664 | Input/Output: [(-11 -76 17 -8) -76]
Test Case: 665 | Input/Output: [(-4 -93 33 -39) -93]
Test Case: 666 | Input/Output: [(-12 93 44 35) -12]
Test Case: 667 | Input/Output: [(-24 -84 -80 -67) -84]
Test Case: 668 | Input/Output: [(-88 -32 98 -80) -88]
Test Case: 669 | Input/Output: [(-33 -91 3 -69) -91]
Test Case: 670 | Input/Output: [(12 -53 -75 -60) -75]
Test Case: 671 | Input/Output: [(10 1 -91 -45) -91]
Test Case: 672 | Input/Output: [(-35 -94 -7 -7) -94]
Test Case: 673 | Input/Output: [(-30 -97 17 89) -97]
Test Case: 674 | Input/Output: [(-89 30 58 38) -89]
Test Case: 675 | Input/Output: [(-29 -94 19 80) -94]
Test Case: 676 | Input/Output: [(5 -19 -50 -16) -50]
Test Case: 677 | Input/Output: [(22 1 -68 -81) -81]
Test Case: 678 | Input/Output: [(-85 -74 -27 45) -85]
Test Case: 679 | Input/Output: [(40 52 32 22) 22]
Test Case: 680 | Input/Output: [(-30 69 -60 -40) -60]
Test Case: 681 | Input/Output: [(-17 81 -40 -78) -78]
Test Case: 682 | Input/Output: [(89 -6 91 60) -6]
Test Case: 683 | Input/Output: [(40 -23 -49 69) -49]
Test Case: 684 | Input/Output: [(45 -27 -70 -85) -85]
Test Case: 685 | Input/Output: [(47 76 -63 -27) -63]
Test Case: 686 | Input/Output: [(83 12 -83 76) -83]
Test Case: 687 | Input/Output: [(-19 -89 42 77) -89]
Test Case: 688 | Input/Output: [(-8 -13 100 66) -13]
Test Case: 689 | Input/Output: [(71 -47 79 -50) -50]
Test Case: 690 | Input/Output: [(78 84 -93 84) -93]
Test Case: 691 | Input/Output: [(39 3 55 90) 3]
Test Case: 692 | Input/Output: [(-38 60 -6 -59) -59]
Test Case: 693 | Input/Output: [(-24 60 -97 76) -97]
Test Case: 694 | Input/Output: [(-67 83 14 -86) -86]
Test Case: 695 | Input/Output: [(58 48 23 -90) -90]
Test Case: 696 | Input/Output: [(-66 -96 24 -6) -96]
Test Case: 697 | Input/Output: [(49 87 18 -10) -10]
Test Case: 698 | Input/Output: [(-35 37 69 63) -35]
Test Case: 699 | Input/Output: [(-9 97 -3 -67) -67]
Test Case: 700 | Input/Output: [(-48 52 85 -66) -66]
Test Case: 701 | Input/Output: [(9 -39 -50 61) -50]
Test Case: 702 | Input/Output: [(44 39 -15 67) -15]
Test Case: 703 | Input/Output: [(-67 28 59 17) -67]
Test Case: 704 | Input/Output: [(54 -61 -10 -84) -84]
Test Case: 705 | Input/Output: [(76 -31 35 60) -31]
Test Case: 706 | Input/Output: [(78 -17 -32 93) -32]
Test Case: 707 | Input/Output: [(-33 -67 -11 -11) -67]
Test Case: 708 | Input/Output: [(-41 -24 22 -3) -41]
Test Case: 709 | Input/Output: [(16 -32 -10 -68) -68]
Test Case: 710 | Input/Output: [(17 74 -40 82) -40]
Test Case: 711 | Input/Output: [(-15 37 93 8) -15]
Test Case: 712 | Input/Output: [(33 25 -20 82) -20]
Test Case: 713 | Input/Output: [(-57 -10 85 80) -57]
Test Case: 714 | Input/Output: [(-36 84 87 -8) -36]
Test Case: 715 | Input/Output: [(-5 99 59 -90) -90]
Test Case: 716 | Input/Output: [(-12 -86 -41 40) -86]
Test Case: 717 | Input/Output: [(66 -37 -17 31) -37]
Test Case: 718 | Input/Output: [(66 -14 43 -27) -27]
Test Case: 719 | Input/Output: [(-24 85 -36 -15) -36]
Test Case: 720 | Input/Output: [(63 -28 -48 52) -48]
Test Case: 721 | Input/Output: [(-95 -4 -83 65) -95]
Test Case: 722 | Input/Output: [(84 -80 0 46) -80]
Test Case: 723 | Input/Output: [(-66 -76 -58 75) -76]
Test Case: 724 | Input/Output: [(-81 50 12 95) -81]
Test Case: 725 | Input/Output: [(84 80 -73 6) -73]
Test Case: 726 | Input/Output: [(3 -35 44 -5) -35]
Test Case: 727 | Input/Output: [(60 -38 -51 1) -51]
Test Case: 728 | Input/Output: [(21 -56 -34 -95) -95]
Test Case: 729 | Input/Output: [(-87 -53 63 27) -87]
Test Case: 730 | Input/Output: [(-96 -67 60 -16) -96]
Test Case: 731 | Input/Output: [(50 7 49 -21) -21]
Test Case: 732 | Input/Output: [(-8 24 -19 21) -19]
Test Case: 733 | Input/Output: [(5 60 -14 2) -14]
Test Case: 734 | Input/Output: [(83 16 -26 15) -26]
Test Case: 735 | Input/Output: [(55 -16 -60 -72) -72]
Test Case: 736 | Input/Output: [(42 85 -98 65) -98]
Test Case: 737 | Input/Output: [(-97 27 -54 42) -97]
Test Case: 738 | Input/Output: [(-89 -63 84 17) -89]
Test Case: 739 | Input/Output: [(35 -39 85 6) -39]
Test Case: 740 | Input/Output: [(-24 -94 63 89) -94]
Test Case: 741 | Input/Output: [(-85 -100 -52 -86) -100]
Test Case: 742 | Input/Output: [(-59 -76 -82 -3) -82]
Test Case: 743 | Input/Output: [(41 2 91 93) 2]
Test Case: 744 | Input/Output: [(-78 -61 83 14) -78]
Test Case: 745 | Input/Output: [(-21 -49 70 44) -49]
Test Case: 746 | Input/Output: [(67 81 -45 -29) -45]
Test Case: 747 | Input/Output: [(-67 -77 -18 -60) -77]
Test Case: 748 | Input/Output: [(-80 -31 89 -65) -80]
Test Case: 749 | Input/Output: [(92 34 37 54) 34]
Test Case: 750 | Input/Output: [(72 -12 -84 75) -84]
Test Case: 751 | Input/Output: [(55 90 19 95) 19]
Test Case: 752 | Input/Output: [(-98 -70 10 32) -98]
Test Case: 753 | Input/Output: [(53 -94 91 48) -94]
Test Case: 754 | Input/Output: [(45 -99 -37 -56) -99]
Test Case: 755 | Input/Output: [(92 -5 -19 24) -19]
Test Case: 756 | Input/Output: [(1 -10 80 -71) -71]
Test Case: 757 | Input/Output: [(-95 90 62 100) -95]
Test Case: 758 | Input/Output: [(68 -80 -24 -39) -80]
Test Case: 759 | Input/Output: [(-5 18 60 74) -5]
Test Case: 760 | Input/Output: [(14 -6 0 96) -6]
Test Case: 761 | Input/Output: [(12 -13 -29 -28) -29]
Test Case: 762 | Input/Output: [(-99 -23 44 4) -99]
Test Case: 763 | Input/Output: [(-30 -10 28 -93) -93]
Test Case: 764 | Input/Output: [(-28 37 -90 36) -90]
Test Case: 765 | Input/Output: [(-20 2 -91 44) -91]
Test Case: 766 | Input/Output: [(-80 -97 30 52) -97]
Test Case: 767 | Input/Output: [(17 -40 -58 -69) -69]
Test Case: 768 | Input/Output: [(-29 -5 25 25) -29]
Test Case: 769 | Input/Output: [(38 -43 54 -19) -43]
Test Case: 770 | Input/Output: [(-37 49 -14 42) -37]
Test Case: 771 | Input/Output: [(-83 32 -32 80) -83]
Test Case: 772 | Input/Output: [(40 -10 81 26) -10]
Test Case: 773 | Input/Output: [(-66 -27 -81 -28) -81]
Test Case: 774 | Input/Output: [(-94 -11 -49 -87) -94]
Test Case: 775 | Input/Output: [(5 -22 85 -78) -78]
Test Case: 776 | Input/Output: [(-20 -16 -40 -6) -40]
Test Case: 777 | Input/Output: [(-4 -38 -3 82) -38]
Test Case: 778 | Input/Output: [(-45 41 96 11) -45]
Test Case: 779 | Input/Output: [(-88 1 23 3) -88]
Test Case: 780 | Input/Output: [(-56 3 41 -8) -56]
Test Case: 781 | Input/Output: [(-90 6 -75 79) -90]
Test Case: 782 | Input/Output: [(-34 88 -5 28) -34]
Test Case: 783 | Input/Output: [(-1 -46 -86 46) -86]
Test Case: 784 | Input/Output: [(-55 -23 98 27) -55]
Test Case: 785 | Input/Output: [(83 29 -20 74) -20]
Test Case: 786 | Input/Output: [(-35 -77 42 -38) -77]
Test Case: 787 | Input/Output: [(-55 -82 62 -13) -82]
Test Case: 788 | Input/Output: [(-63 -80 -66 49) -80]
Test Case: 789 | Input/Output: [(20 -79 -17 -22) -79]
Test Case: 790 | Input/Output: [(-23 97 9 -56) -56]
Test Case: 791 | Input/Output: [(-31 -19 81 -48) -48]
Test Case: 792 | Input/Output: [(33 30 90 41) 30]
Test Case: 793 | Input/Output: [(-80 83 14 -19) -80]
Test Case: 794 | Input/Output: [(20 64 46 -64) -64]
Test Case: 795 | Input/Output: [(0 30 -67 55) -67]
Test Case: 796 | Input/Output: [(32 -95 19 -2) -95]
Test Case: 797 | Input/Output: [(99 38 5 76) 5]
Test Case: 798 | Input/Output: [(48 -66 20 -37) -66]
Test Case: 799 | Input/Output: [(48 83 -43 -87) -87]
Test Case: 800 | Input/Output: [(18 -35 -32 62) -35]
Test Case: 801 | Input/Output: [(19 -62 27 -29) -62]
Test Case: 802 | Input/Output: [(25 -68 -79 45) -79]
Test Case: 803 | Input/Output: [(24 -58 -80 16) -80]
Test Case: 804 | Input/Output: [(-89 2 19 31) -89]
Test Case: 805 | Input/Output: [(-69 -28 -88 84) -88]
Test Case: 806 | Input/Output: [(-11 20 -31 -44) -44]
Test Case: 807 | Input/Output: [(23 -34 -67 35) -67]
Test Case: 808 | Input/Output: [(-8 -35 -70 -27) -70]
Test Case: 809 | Input/Output: [(-43 -61 97 -79) -79]
Test Case: 810 | Input/Output: [(-26 3 7 -45) -45]
Test Case: 811 | Input/Output: [(67 -20 90 -22) -22]
Test Case: 812 | Input/Output: [(-73 59 -17 51) -73]
Test Case: 813 | Input/Output: [(39 27 70 78) 27]
Test Case: 814 | Input/Output: [(-16 5 -48 44) -48]
Test Case: 815 | Input/Output: [(17 52 33 -77) -77]
Test Case: 816 | Input/Output: [(43 10 30 -4) -4]
Test Case: 817 | Input/Output: [(-7 -18 35 70) -18]
Test Case: 818 | Input/Output: [(47 -82 -51 -27) -82]
Test Case: 819 | Input/Output: [(-53 -8 28 10) -53]
Test Case: 820 | Input/Output: [(83 -29 -42 -91) -91]
Test Case: 821 | Input/Output: [(-6 48 64 -42) -42]
Test Case: 822 | Input/Output: [(12 40 -18 -94) -94]
Test Case: 823 | Input/Output: [(71 97 57 14) 14]
Test Case: 824 | Input/Output: [(-91 -58 -41 -31) -91]
Test Case: 825 | Input/Output: [(-3 -33 -45 -46) -46]
Test Case: 826 | Input/Output: [(22 9 65 45) 9]
Test Case: 827 | Input/Output: [(-30 -82 -41 39) -82]
Test Case: 828 | Input/Output: [(24 -59 -82 -65) -82]
Test Case: 829 | Input/Output: [(-11 -49 -26 11) -49]
Test Case: 830 | Input/Output: [(9 -38 48 -7) -38]
Test Case: 831 | Input/Output: [(10 84 -93 -97) -97]
Test Case: 832 | Input/Output: [(-65 -83 37 7) -83]
Test Case: 833 | Input/Output: [(-6 55 26 32) -6]
Test Case: 834 | Input/Output: [(-45 16 -14 -68) -68]
Test Case: 835 | Input/Output: [(-84 27 -51 -81) -84]
Test Case: 836 | Input/Output: [(19 94 -90 71) -90]
Test Case: 837 | Input/Output: [(77 -93 -22 18) -93]
Test Case: 838 | Input/Output: [(-74 -50 -76 -35) -76]
Test Case: 839 | Input/Output: [(-60 18 -9 16) -60]
Test Case: 840 | Input/Output: [(-42 -59 -41 -55) -59]
Test Case: 841 | Input/Output: [(28 35 36 -88) -88]
Test Case: 842 | Input/Output: [(-22 -90 48 10) -90]
Test Case: 843 | Input/Output: [(-13 91 79 -45) -45]
Test Case: 844 | Input/Output: [(-1 -60 -91 -24) -91]
Test Case: 845 | Input/Output: [(19 63 -93 68) -93]
Test Case: 846 | Input/Output: [(17 -58 -92 62) -92]
Test Case: 847 | Input/Output: [(98 37 88 -49) -49]
Test Case: 848 | Input/Output: [(-9 2 -57 68) -57]
Test Case: 849 | Input/Output: [(98 -7 -93 24) -93]
Test Case: 850 | Input/Output: [(-48 14 65 33) -48]
Test Case: 851 | Input/Output: [(-10 -23 -9 -20) -23]
Test Case: 852 | Input/Output: [(62 46 -43 -33) -43]
Test Case: 853 | Input/Output: [(-40 -70 -88 11) -88]
Test Case: 854 | Input/Output: [(-50 58 38 12) -50]
Test Case: 855 | Input/Output: [(-64 -36 -84 -52) -84]
Test Case: 856 | Input/Output: [(73 -78 76 19) -78]
Test Case: 857 | Input/Output: [(-67 -29 -63 -53) -67]
Test Case: 858 | Input/Output: [(66 30 -61 -3) -61]
Test Case: 859 | Input/Output: [(-2 -47 14 -14) -47]
Test Case: 860 | Input/Output: [(-81 64 34 -55) -81]
Test Case: 861 | Input/Output: [(25 67 -10 -43) -43]
Test Case: 862 | Input/Output: [(77 -61 -90 -11) -90]
Test Case: 863 | Input/Output: [(38 16 -14 34) -14]
Test Case: 864 | Input/Output: [(-65 41 46 97) -65]
Test Case: 865 | Input/Output: [(89 -73 97 -50) -73]
Test Case: 866 | Input/Output: [(-18 66 -92 -28) -92]
Test Case: 867 | Input/Output: [(-19 35 -16 29) -19]
Test Case: 868 | Input/Output: [(-85 75 -76 92) -85]
Test Case: 869 | Input/Output: [(68 66 85 -99) -99]
Test Case: 870 | Input/Output: [(14 -16 75 -64) -64]
Test Case: 871 | Input/Output: [(-36 -100 -3 46) -100]
Test Case: 872 | Input/Output: [(-58 72 71 24) -58]
Test Case: 873 | Input/Output: [(85 -52 17 -72) -72]
Test Case: 874 | Input/Output: [(47 -21 2 -80) -80]
Test Case: 875 | Input/Output: [(-78 41 25 3) -78]
Test Case: 876 | Input/Output: [(59 23 -91 -6) -91]
Test Case: 877 | Input/Output: [(58 -29 -97 84) -97]
Test Case: 878 | Input/Output: [(32 66 -10 39) -10]
Test Case: 879 | Input/Output: [(-68 -27 -70 83) -70]
Test Case: 880 | Input/Output: [(-42 -9 92 35) -42]
Test Case: 881 | Input/Output: [(53 41 72 -58) -58]
Test Case: 882 | Input/Output: [(3 10 -89 -44) -89]
Test Case: 883 | Input/Output: [(72 40 61 74) 40]
Test Case: 884 | Input/Output: [(-11 25 76 -18) -18]
Test Case: 885 | Input/Output: [(-54 26 -37 -99) -99]
Test Case: 886 | Input/Output: [(-53 60 11 -87) -87]
Test Case: 887 | Input/Output: [(77 -10 8 83) -10]
Test Case: 888 | Input/Output: [(7 -97 30 48) -97]
Test Case: 889 | Input/Output: [(-46 -46 70 -19) -46]
Test Case: 890 | Input/Output: [(-82 9 -30 96) -82]
Test Case: 891 | Input/Output: [(-61 -94 -73 -25) -94]
Test Case: 892 | Input/Output: [(-9 -18 -75 85) -75]
Test Case: 893 | Input/Output: [(-27 17 3 46) -27]
Test Case: 894 | Input/Output: [(-33 22 -97 24) -97]
Test Case: 895 | Input/Output: [(-44 -26 50 11) -44]
Test Case: 896 | Input/Output: [(61 -3 -10 -55) -55]
Test Case: 897 | Input/Output: [(-18 88 -65 -66) -66]
Test Case: 898 | Input/Output: [(50 51 3 46) 3]
Test Case: 899 | Input/Output: [(-68 -75 64 -32) -75]
Test Case: 900 | Input/Output: [(48 -82 -38 63) -82]
Test Case: 901 | Input/Output: [(-99 -59 -53 -79) -99]
Test Case: 902 | Input/Output: [(-94 41 71 52) -94]
Test Case: 903 | Input/Output: [(-38 -22 47 19) -38]
Test Case: 904 | Input/Output: [(-48 -31 -58 48) -58]
Test Case: 905 | Input/Output: [(96 -99 8 -49) -99]
Test Case: 906 | Input/Output: [(-54 55 56 39) -54]
Test Case: 907 | Input/Output: [(42 -92 -48 68) -92]
Test Case: 908 | Input/Output: [(84 31 26 -66) -66]
Test Case: 909 | Input/Output: [(-56 -4 9 57) -56]
Test Case: 910 | Input/Output: [(-68 -29 -66 -36) -68]
Test Case: 911 | Input/Output: [(-63 -74 41 84) -74]
Test Case: 912 | Input/Output: [(-79 -13 23 -67) -79]
Test Case: 913 | Input/Output: [(70 81 -76 -28) -76]
Test Case: 914 | Input/Output: [(62 -44 -9 -97) -97]
Test Case: 915 | Input/Output: [(-11 -97 -74 51) -97]
Test Case: 916 | Input/Output: [(3 -95 71 46) -95]
Test Case: 917 | Input/Output: [(0 -48 -43 43) -48]
Test Case: 918 | Input/Output: [(45 7 -25 71) -25]
Test Case: 919 | Input/Output: [(47 11 69 -35) -35]
Test Case: 920 | Input/Output: [(-18 90 48 60) -18]
Test Case: 921 | Input/Output: [(92 -94 37 43) -94]
Test Case: 922 | Input/Output: [(73 2 -16 -96) -96]
Test Case: 923 | Input/Output: [(94 -22 -7 -69) -69]
Test Case: 924 | Input/Output: [(-40 26 2 61) -40]
Test Case: 925 | Input/Output: [(28 -1 -56 38) -56]
Test Case: 926 | Input/Output: [(-32 -30 -14 57) -32]
Test Case: 927 | Input/Output: [(-91 -13 72 -10) -91]
Test Case: 928 | Input/Output: [(100 94 -24 44) -24]
Test Case: 929 | Input/Output: [(97 84 12 -91) -91]
Test Case: 930 | Input/Output: [(37 -35 -31 -93) -93]
Test Case: 931 | Input/Output: [(-15 90 53 89) -15]
Test Case: 932 | Input/Output: [(49 -39 67 43) -39]
Test Case: 933 | Input/Output: [(-37 2 81 34) -37]
Test Case: 934 | Input/Output: [(-15 -28 71 69) -28]
Test Case: 935 | Input/Output: [(-74 71 24 -71) -74]
Test Case: 936 | Input/Output: [(56 -32 14 56) -32]
Test Case: 937 | Input/Output: [(60 94 -68 -27) -68]
Test Case: 938 | Input/Output: [(69 53 -28 50) -28]
Test Case: 939 | Input/Output: [(-3 4 -61 37) -61]
Test Case: 940 | Input/Output: [(57 -79 41 -64) -79]
Test Case: 941 | Input/Output: [(39 91 99 -15) -15]
Test Case: 942 | Input/Output: [(-6 -8 50 22) -8]
Test Case: 943 | Input/Output: [(-1 -16 -18 31) -18]
Test Case: 944 | Input/Output: [(18 80 -29 87) -29]
Test Case: 945 | Input/Output: [(55 -7 -82 -42) -82]
Test Case: 946 | Input/Output: [(47 -94 59 -87) -94]
Test Case: 947 | Input/Output: [(-45 99 70 -43) -45]
Test Case: 948 | Input/Output: [(94 -89 -13 -26) -89]
Test Case: 949 | Input/Output: [(-85 -60 -48 90) -85]
Test Case: 950 | Input/Output: [(93 98 27 25) 25]
Test Case: 951 | Input/Output: [(11 45 91 -96) -96]
Test Case: 952 | Input/Output: [(-92 -87 34 22) -92]
Test Case: 953 | Input/Output: [(81 52 22 54) 22]
Test Case: 954 | Input/Output: [(17 -44 -95 -10) -95]
Test Case: 955 | Input/Output: [(48 -17 22 -94) -94]
Test Case: 956 | Input/Output: [(-86 -65 74 -26) -86]
Test Case: 957 | Input/Output: [(-58 79 83 46) -58]
Test Case: 958 | Input/Output: [(66 70 -74 62) -74]
Test Case: 959 | Input/Output: [(-66 60 -7 -3) -66]
Test Case: 960 | Input/Output: [(-28 -75 -19 -74) -75]
Test Case: 961 | Input/Output: [(-45 -85 63 -60) -85]
Test Case: 962 | Input/Output: [(51 -36 86 96) -36]
Test Case: 963 | Input/Output: [(-57 -6 -64 92) -64]
Test Case: 964 | Input/Output: [(48 -98 70 94) -98]
Test Case: 965 | Input/Output: [(-88 -61 -59 -72) -88]
Test Case: 966 | Input/Output: [(9 -81 60 42) -81]
Test Case: 967 | Input/Output: [(5 -22 -25 -17) -25]
Test Case: 968 | Input/Output: [(37 15 62 -95) -95]
Test Case: 969 | Input/Output: [(-95 -49 85 91) -95]
Test Case: 970 | Input/Output: [(14 51 24 12) 12]
Test Case: 971 | Input/Output: [(1 6 67 -49) -49]
Test Case: 972 | Input/Output: [(-24 57 82 88) -24]
Test Case: 973 | Input/Output: [(-82 96 -7 90) -82]
Test Case: 974 | Input/Output: [(-100 78 70 -91) -100]
Test Case: 975 | Input/Output: [(-12 -64 70 -92) -92]
Test Case: 976 | Input/Output: [(-77 20 22 53) -77]
Test Case: 977 | Input/Output: [(2 -99 79 -12) -99]
Test Case: 978 | Input/Output: [(41 84 77 43) 41]
Test Case: 979 | Input/Output: [(-9 68 76 78) -9]
Test Case: 980 | Input/Output: [(92 55 41 -4) -4]
Test Case: 981 | Input/Output: [(-90 17 -21 -46) -90]
Test Case: 982 | Input/Output: [(-64 70 -96 -57) -96]
Test Case: 983 | Input/Output: [(-32 62 -63 -10) -63]
Test Case: 984 | Input/Output: [(-67 -86 -52 -23) -86]
Test Case: 985 | Input/Output: [(42 -28 -39 82) -39]
Test Case: 986 | Input/Output: [(76 98 43 -71) -71]
Test Case: 987 | Input/Output: [(40 25 63 -22) -22]
Test Case: 988 | Input/Output: [(31 -30 6 33) -30]
Test Case: 989 | Input/Output: [(81 -1 -69 -10) -69]
Test Case: 990 | Input/Output: [(29 67 89 13) 13]
Test Case: 991 | Input/Output: [(24 -83 -57 -33) -83]
Test Case: 992 | Input/Output: [(-84 -44 3 29) -84]
Test Case: 993 | Input/Output: [(-81 60 83 88) -81]
Test Case: 994 | Input/Output: [(27 25 4 13) 4]
Test Case: 995 | Input/Output: [(-55 -42 -3 -17) -55]
Test Case: 996 | Input/Output: [(-14 -98 -60 -90) -98]
Test Case: 997 | Input/Output: [(23 -21 -36 -57) -57]
Test Case: 998 | Input/Output: [(-43 -22 30 -60) -60]
Test Case: 999 | Input/Output: [(56 -64 -45 16) -64]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 104 16 -23 39 -102 -38 14 13 -22 110 44 42 76 115 70 -113
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[33 -41 -41 -41] -41] [[91 91 91 -13] -13] [[8 8 91 8] 8] [[-34 -34 -34 -71] -71] [[-69 -60 -69 -69] -69] [[-75 -75 -91 -75] -91] [[7 7 -39 7] -39] [[-71 -71 -76 -71] -76] [[44 44 44 -85] -85] [[34 -15 34 34] -15] [(65 65 65 65) 65] [(85 85 85 85) 85] [(33 33 33 33) 33] [(-28 -28 -28 -28) -28] [(18 18 18 18) 18] [(10 11 35 10) 10] [(84 59 62 56) 56] [(18 9 62 73) 9] [(18 4 6 25) 4] [(14 14 19 99) 14] [(43 84 73 79) 43] [(9 11 2 70) 2] [(31 31 36 38) 31] [(76 5 15 35) 5] [(28 73 76 50) 28] [(90 44 47 96) 44] [(53 82 62 25) 25] [(95 36 44 63) 36] [(74 69 47 99) 47] [(74 64 39 9) 9] [(88 88 96 13) 13] [(24 28 43 78) 24] [(42 27 90 83) 27] [(84 49 71 25) 25] [(8 13 6 56) 6] [(-97 -70 53 -93) -97] [(-15 60 -32 75) -32] [(68 -35 83 -88) -88] [(-93 -5 -59 96) -93] [(19 54 2 0) 0] [(-35 -28 -63 -94) -94] [(10 -6 -13 32) -13] [(-83 -24 -45 -31) -83] [(98 72 76 84) 72] [(66 -72 57 11) -72] [(93 -39 -23 48) -39] [(-79 -88 -26 93) -88] [(-41 60 -35 19) -41] [(87 -50 -12 80) -50] [(-59 25 25 73) -59] [(27 30 74 -49) -49] [(15 -94 -85 -61) -94] [(-37 -26 73 -91) -91] [(20 79 -8 22) -8] [(12 -47 -72 62) -72] [(-82 -29 30 -37) -82] [(-77 -23 36 -16) -77] [(74 -80 -57 52) -80] [(-80 83 -100 -64) -100] [(-64 -67 16 69) -67] [(44 31 -49 -60) -60] [(94 -55 -22 -90) -90] [(0 51 -36 -95) -95] [(48 -45 -83 -73) -83] [(-13 66 55 -5) -13] [(12 87 -85 -54) -85] [(19 -76 -4 -81) -81] [(78 95 -30 83) -30] [(-24 62 91 14) -24] [(5 66 32 -76) -76] [(-83 58 -7 73) -83] [(-88 -55 4 -15) -88] [(-50 90 -60 -77) -77] [(-15 -47 38 9) -47] [(-48 -71 -58 -96) -96] [(-23 -94 -90 -95) -95] [(31 -9 -23 80) -23] [(36 -70 -37 60) -70] [(-32 -41 85 -89) -89] [(22 69 -27 -32) -32] [(-68 -67 -30 -76) -76] [(-55 82 -65 1) -65] [(-20 -2 -3 -81) -81] [(-87 -80 44 79) -87] [(-46 -34 6 -57) -57] [(68 -82 90 100) -82] [(16 71 -67 -57) -67] [(25 16 2 -16) -16] [(71 85 -17 -39) -39] [(-3 -98 35 38) -98] [(99 97 -89 -36) -89] [(-49 85 90 -92) -92] [(-15 0 66 96) -15] [(-55 -59 -42 -20) -59] [(-82 66 -75 -90) -90])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: 34                 
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 73                 
Correct output: 4                   | Program output: 25                 
Correct output: 14                  | Program output: 99                 
Correct output: 43                  | Program output: 79                 
Correct output: 2                   | Program output: 70                 
Correct output: 31                  | Program output: 38                 
Correct output: 5                   | Program output: 35                 
Correct output: 28                  | Program output: 50                 
Correct output: 44                  | Program output: 96                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 63                 
Correct output: 47                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 78                 
Correct output: 27                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 56                 
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 32                 
Correct output: -83                 | Program output: -31                
Correct output: 72                  | Program output: 84                 
Correct output: -72                 | Program output: 11                 
Correct output: -39                 | Program output: 48                 
Correct output: -88                 | Program output: 93                 
Correct output: -41                 | Program output: 19                 
Correct output: -50                 | Program output: 80                 
Correct output: -59                 | Program output: 73                 
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: 22                 
Correct output: -72                 | Program output: 62                 
Correct output: -82                 | Program output: -37                
Correct output: -77                 | Program output: -16                
Correct output: -80                 | Program output: 52                 
Correct output: -100                | Program output: -64                
Correct output: -67                 | Program output: 69                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -73                
Correct output: -13                 | Program output: -5                 
Correct output: -85                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: 83                 
Correct output: -24                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 73                 
Correct output: -88                 | Program output: -15                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: 80                 
Correct output: -70                 | Program output: 60                 
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: 1                  
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: 100                
Correct output: -67                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 38                 
Correct output: -89                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: 96                 
Correct output: -59                 | Program output: -20                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_yankdup integer_swap integer_mod exec_yank exec_do*times (exec_eq boolean_invert_second_then_and integer_dup integer_pop in4 print_integer exec_yankdup exec_eq))
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_yankdup integer_swap integer_mod exec_yank exec_do*times (exec_eq boolean_invert_second_then_and integer_dup integer_pop in4 print_integer exec_yankdup exec_eq))
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 5 1 1 2 1 1000 1 1 8)
Population mean number of elite cases: 1.02
Count of perfect (error zero) individuals by case: (1 5 1 1 2 1 0 1 1 8)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq})
Best program: (exec_yankdup integer_swap integer_mod exec_yank exec_do*times (exec_eq boolean_invert_second_then_and integer_dup integer_pop in4 print_integer exec_yankdup exec_eq))
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 9.979
Median total errors in population: 10
Error averages by case: (0.999 0.995 0.999 0.999 0.998 0.999 1.0 0.999 0.999 0.992)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 51.195
Average program size in population (points): 70.516
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 458186
--- Timings ---
Current time: 1559593811463 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.9 seconds, 36.6%
Fitness Testing:      1.5 seconds, 58.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: 34                 
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 73                 
Correct output: 4                   | Program output: 25                 
Correct output: 14                  | Program output: 99                 
Correct output: 43                  | Program output: 79                 
Correct output: 2                   | Program output: 70                 
Correct output: 31                  | Program output: 38                 
Correct output: 5                   | Program output: 35                 
Correct output: 28                  | Program output: 50                 
Correct output: 44                  | Program output: 96                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 63                 
Correct output: 47                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 78                 
Correct output: 27                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 56                 
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 32                 
Correct output: -83                 | Program output: -31                
Correct output: 72                  | Program output: 84                 
Correct output: -72                 | Program output: 11                 
Correct output: -39                 | Program output: 48                 
Correct output: -88                 | Program output: 93                 
Correct output: -41                 | Program output: 19                 
Correct output: -50                 | Program output: 80                 
Correct output: -59                 | Program output: 73                 
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: 22                 
Correct output: -72                 | Program output: 62                 
Correct output: -82                 | Program output: -37                
Correct output: -77                 | Program output: -16                
Correct output: -80                 | Program output: 52                 
Correct output: -100                | Program output: -64                
Correct output: -67                 | Program output: 69                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -73                
Correct output: -13                 | Program output: -5                 
Correct output: -85                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: 83                 
Correct output: -24                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 73                 
Correct output: -88                 | Program output: -15                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: 80                 
Correct output: -70                 | Program output: 60                 
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: 1                  
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: 79                 
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: 100                
Correct output: -67                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 38                 
Correct output: -89                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: 96                 
Correct output: -59                 | Program output: -20                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_yankdup integer_swap integer_mod exec_yank exec_eq boolean_invert_second_then_and integer_dup integer_dup_items integer_pop in4 print_integer exec_yankdup exec_eq)
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_yankdup integer_swap integer_mod exec_yank exec_eq boolean_invert_second_then_and integer_dup integer_dup_items integer_pop in4 print_integer exec_yankdup exec_eq)
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 401 401 84 403 84 85 84 403 645)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (93 401 401 84 403 84 85 84 403 645)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq})
Best program: (integer_swap integer_mod exec_yank exec_do*times (exec_eq boolean_invert_second_then_and integer_dup integer_pop exec_shove (in4 print_integer exec_yankdup exec_eq)))
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.317
Median total errors in population: 8
Error averages by case: (0.907 0.599 0.599 0.916 0.597 0.916 0.915 0.916 0.597 0.355)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.887
Average program size in population (points): 34.785
Average percent parens in population: 0.194
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 790982
--- Timings ---
Current time: 1559593813098 milliseconds
Total Time:           4.3 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.9 seconds, 45.0%
Fitness Testing:      1.9 seconds, 43.8%
Report:               0.4 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 91                 
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: 34                 
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 35                 
Correct output: 56                  | Program output: 62                 
Correct output: 9                   | Program output: 62                 
Correct output: 4                   | Program output: 6                  
Correct output: 14                  | Program output: 19                 
Correct output: 43                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 36                 
Correct output: 5                   | Program output: 15                 
Correct output: 28                  | Program output: 76                 
Correct output: 44                  | Program output: 47                 
Correct output: 25                  | Program output: 62                 
Correct output: 36                  | Program output: 44                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 39                 
Correct output: 13                  | Program output: 96                 
Correct output: 24                  | Program output: 43                 
Correct output: 27                  | Program output: 90                 
Correct output: 25                  | Program output: 71                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: 83                 
Correct output: -93                 | Program output: -59                
Correct output: 0                   | Program output: 2                  
Correct output: -94                 | Program output: -63                
Correct output: -13                 | Program output: -13                
Correct output: -83                 | Program output: -45                
Correct output: 72                  | Program output: 76                 
Correct output: -72                 | Program output: 57                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -26                
Correct output: -41                 | Program output: -35                
Correct output: -50                 | Program output: -12                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: 74                 
Correct output: -94                 | Program output: -85                
Correct output: -91                 | Program output: 73                 
Correct output: -8                  | Program output: -8                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: 30                 
Correct output: -77                 | Program output: 36                 
Correct output: -80                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 16                 
Correct output: -60                 | Program output: -49                
Correct output: -90                 | Program output: -22                
Correct output: -95                 | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 55                 
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -24                 | Program output: 91                 
Correct output: -76                 | Program output: 32                 
Correct output: -83                 | Program output: -7                 
Correct output: -88                 | Program output: 4                  
Correct output: -77                 | Program output: -60                
Correct output: -47                 | Program output: 38                 
Correct output: -96                 | Program output: -58                
Correct output: -95                 | Program output: -90                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -37                
Correct output: -89                 | Program output: 85                 
Correct output: -32                 | Program output: -27                
Correct output: -76                 | Program output: -30                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -3                 
Correct output: -87                 | Program output: 44                 
Correct output: -57                 | Program output: 6                  
Correct output: -82                 | Program output: 90                 
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 2                  
Correct output: -39                 | Program output: -17                
Correct output: -98                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: 90                 
Correct output: -15                 | Program output: 66                 
Correct output: -59                 | Program output: -42                
Correct output: -90                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_do*count (integer_add) exec_k_when_autoconstructing (boolean_yank in3 integer_empty) (integer_lt) print_integer boolean_dup_items boolean_eq exec_k_when_autoconstructing () (exec_eq) exec_shove (boolean_xor exec_yankdup) exec_dup_items exec_while (print_integer boolean_dup_times exec_do*while (integer_rot in4) integer_pop boolean_rot) boolean_stackdepth boolean_dup integer_yankdup integer_gte boolean_rot in4 boolean_dup_items)
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_do*count (integer_add) exec_k_when_autoconstructing (boolean_yank in3 integer_empty) (integer_lt) print_integer boolean_dup_items boolean_eq exec_k_when_autoconstructing () (exec_eq) exec_shove (boolean_xor exec_yankdup) exec_dup_items exec_while (print_integer boolean_dup_times exec_do*while (integer_rot in4) integer_pop boolean_rot) boolean_stackdepth boolean_dup integer_yankdup integer_gte boolean_rot in4 boolean_dup_items)
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 1000 307 79 322 323 307 75 72 71)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (403 0 307 79 322 323 307 75 72 71)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items})
Best program: (integer_gt integer_add exec_k_when_autoconstructing (boolean_yank in3 integer_empty) (integer_lt) print_integer boolean_dup_items in2 boolean_dup_times exec_shove (boolean_xor exec_yankdup) exec_dup_items boolean_dup_times exec_do*while (integer_rot in4) boolean_pop exec_pop (integer_pop integer_empty exec_rot (boolean_stackdepth boolean_dup boolean_dup integer_yankdup integer_gte boolean_rot) (integer_inc in4 boolean_dup_items) ()))
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 8.041
Median total errors in population: 8
Error averages by case: (0.597 1.0 0.693 0.921 0.678 0.677 0.693 0.925 0.928 0.929)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.02
Average program size in population (points): 38.641
Average percent parens in population: 0.232
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1318558
--- Timings ---
Current time: 1559593815426 milliseconds
Total Time:           6.6 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         3.5 seconds, 52.8%
Fitness Testing:      2.5 seconds, 37.3%
Report:               0.5 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -60                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 11                 
Correct output: 56                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 84                 
Correct output: 2                   | Program output: 11                 
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 82                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 64                 
Correct output: 13                  | Program output: 88                 
Correct output: 24                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 13                 
Correct output: -97                 | Program output: -70                
Correct output: -32                 | Program output: 60                 
Correct output: -88                 | Program output: -35                
Correct output: -93                 | Program output: -5                 
Correct output: 0                   | Program output: 54                 
Correct output: -94                 | Program output: -28                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -24                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: 60                 
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -26                
Correct output: -8                  | Program output: 79                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -29                
Correct output: -77                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: 83                 
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: 31                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 51                 
Correct output: -83                 | Program output: -45                
Correct output: -13                 | Program output: 66                 
Correct output: -85                 | Program output: 87                 
Correct output: -81                 | Program output: -76                
Correct output: -30                 | Program output: 95                 
Correct output: -24                 | Program output: 62                 
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 58                 
Correct output: -88                 | Program output: -55                
Correct output: -77                 | Program output: 90                 
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -71                
Correct output: -95                 | Program output: -94                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -41                
Correct output: -32                 | Program output: 69                 
Correct output: -76                 | Program output: -67                
Correct output: -65                 | Program output: 82                 
Correct output: -81                 | Program output: -2                 
Correct output: -87                 | Program output: -80                
Correct output: -57                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: 71                 
Correct output: -16                 | Program output: 16                 
Correct output: -39                 | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: 97                 
Correct output: -92                 | Program output: 85                 
Correct output: -15                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: 66                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s})
Lexicase best program: (integer_dup_items in2 print_integer boolean_eq boolean_stackdepth boolean_dup_times exec_rot (integer_flush exec_dup_items exec_swap (exec_empty exec_s () () ()) ()) () ())
Lexicase best errors: [0 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 21
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s})
Zero cases best program: (integer_dup_items in2 print_integer boolean_eq boolean_stackdepth boolean_dup_times exec_rot (integer_flush exec_dup_items exec_swap (exec_empty exec_s () () ()) ()) () ())
Zero cases best errors: [0 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 21
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 198 197 150 702 148 690 148 148 198)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (148 198 197 150 702 148 690 148 148 198)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_dup integer_dup_items exec_dup_times (in2 print_integer) boolean_dup_times in2 integer_eq exec_rot (-97 integer_flush boolean_stackdepth integer_lte) (boolean_invert_second_then_and exec_dup_items exec_stackdepth exec_y (exec_swap (exec_empty exec_empty exec_s (integer_dup_items in4 exec_k_when_autoconstructing () ()) () ()) ())) ())
Errors: [0 1 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 24
Size: 37
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 7.273
Median total errors in population: 8
Error averages by case: (0.852 0.802 0.803 0.85 0.298 0.852 0.31 0.852 0.852 0.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.198
Average program size in population (points): 37.671
Average percent parens in population: 0.216
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1750471
--- Timings ---
Current time: 1559593818004 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.9 seconds, 56.5%
Fitness Testing:      2.9 seconds, 33.2%
Report:               0.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 91                 
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: 34                 
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 35                 
Correct output: 56                  | Program output: 62                 
Correct output: 9                   | Program output: 62                 
Correct output: 4                   | Program output: 6                  
Correct output: 14                  | Program output: 19                 
Correct output: 43                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 36                 
Correct output: 5                   | Program output: 15                 
Correct output: 28                  | Program output: 76                 
Correct output: 44                  | Program output: 47                 
Correct output: 25                  | Program output: 62                 
Correct output: 36                  | Program output: 44                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 39                 
Correct output: 13                  | Program output: 96                 
Correct output: 24                  | Program output: 43                 
Correct output: 27                  | Program output: 90                 
Correct output: 25                  | Program output: 71                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: 83                 
Correct output: -93                 | Program output: -59                
Correct output: 0                   | Program output: 2                  
Correct output: -94                 | Program output: -63                
Correct output: -13                 | Program output: -13                
Correct output: -83                 | Program output: -45                
Correct output: 72                  | Program output: 76                 
Correct output: -72                 | Program output: 57                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -26                
Correct output: -41                 | Program output: -35                
Correct output: -50                 | Program output: -12                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: 74                 
Correct output: -94                 | Program output: -85                
Correct output: -91                 | Program output: 73                 
Correct output: -8                  | Program output: -8                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: 30                 
Correct output: -77                 | Program output: 36                 
Correct output: -80                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 16                 
Correct output: -60                 | Program output: -49                
Correct output: -90                 | Program output: -22                
Correct output: -95                 | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 55                 
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -24                 | Program output: 91                 
Correct output: -76                 | Program output: 32                 
Correct output: -83                 | Program output: -7                 
Correct output: -88                 | Program output: 4                  
Correct output: -77                 | Program output: -60                
Correct output: -47                 | Program output: 38                 
Correct output: -96                 | Program output: -58                
Correct output: -95                 | Program output: -90                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -37                
Correct output: -89                 | Program output: 85                 
Correct output: -32                 | Program output: -27                
Correct output: -76                 | Program output: -30                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -3                 
Correct output: -87                 | Program output: 44                 
Correct output: -57                 | Program output: 6                  
Correct output: -82                 | Program output: 90                 
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 2                  
Correct output: -39                 | Program output: -17                
Correct output: -98                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: 90                 
Correct output: -15                 | Program output: 66                 
Correct output: -59                 | Program output: -42                
Correct output: -90                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_569} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -97} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_dup_times (tag_boolean_569 in2 in3 print_integer) boolean_invert_second_then_and boolean_stackdepth boolean_dup_times -97 integer_flush boolean_stackdepth integer_empty exec_dup_items exec_stackdepth integer_shove exec_swap (exec_empty exec_empty exec_shove (exec_s (in4 exec_k_when_autoconstructing () ()) () ())) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_569} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -97} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_dup_times (tag_boolean_569 in2 in3 print_integer) boolean_invert_second_then_and boolean_stackdepth boolean_dup_times -97 integer_flush boolean_stackdepth integer_empty exec_dup_items exec_stackdepth integer_shove exec_swap (exec_empty exec_empty exec_shove (exec_s (in4 exec_k_when_autoconstructing () ()) () ())) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 437 438 2 2 271 267 4 267)
Population mean number of elite cases: 1.69
Count of perfect (error zero) individuals by case: (2 2 437 438 2 2 271 267 4 267)
Population mean number of perfect (error zero) cases: 1.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_dup_items in3 print_integer exec_do*count (boolean_stackdepth boolean_dup_times integer_max exec_rot (boolean_swap integer_flush exec_dup_items exec_stackdepth exec_s (exec_y (exec_swap (exec_dup () exec_k (exec_empty exec_empty exec_s (in4 exec_while (exec_s (exec_k_when_autoconstructing () ()) () ())) () ()) ()) ())) () ()) () ()))
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 47
Percent parens: 0.489
--- Population Statistics ---
Average total errors in population: 8.308
Median total errors in population: 8
Error averages by case: (0.998 0.998 0.563 0.562 0.998 0.998 0.729 0.733 0.996 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.519
Average program size in population (points): 39.35
Average percent parens in population: 0.270
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2308592
--- Timings ---
Current time: 1559593820506 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.1 seconds, 54.7%
Fitness Testing:      3.4 seconds, 30.8%
Report:               1.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 11                 
Correct output: 56                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 73                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 73                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 39                 
Correct output: 13                  | Program output: 88                 
Correct output: 24                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -35                
Correct output: -93                 | Program output: -59                
Correct output: 0                   | Program output: 2                  
Correct output: -94                 | Program output: -63                
Correct output: -13                 | Program output: -13                
Correct output: -83                 | Program output: -45                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -26                
Correct output: -8                  | Program output: -8                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -29                
Correct output: -77                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -49                
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: 55                 
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: -24                 | Program output: 62                 
Correct output: -76                 | Program output: 32                 
Correct output: -83                 | Program output: -7                 
Correct output: -88                 | Program output: -55                
Correct output: -77                 | Program output: -60                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -71                
Correct output: -95                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -41                
Correct output: -32                 | Program output: -27                
Correct output: -76                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -3                 
Correct output: -87                 | Program output: -80                
Correct output: -57                 | Program output: -34                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: 2                  
Correct output: -39                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: 85                 
Correct output: -15                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_569} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -97} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_dup_times (tag_boolean_569 in2 exec_when (in3 integer_min print_integer)) boolean_invert_second_then_and boolean_stackdepth boolean_dup_times -97 integer_flush boolean_stackdepth exec_y_when_autoconstructing (integer_empty exec_dup_items exec_stackdepth integer_shove exec_swap (exec_empty exec_empty exec_dup_times (exec_shove (exec_s (exec_k_when_autoconstructing () ()) () ()))) ()))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_569} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -97} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_dup_times (tag_boolean_569 in2 exec_when (in3 integer_min print_integer)) boolean_invert_second_then_and boolean_stackdepth boolean_dup_times -97 integer_flush boolean_stackdepth exec_y_when_autoconstructing (integer_empty exec_dup_items exec_stackdepth integer_shove exec_swap (exec_empty exec_empty exec_dup_times (exec_shove (exec_s (exec_k_when_autoconstructing () ()) () ()))) ()))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 797 178 217 217 396 396 218 392 222)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (171 797 178 217 217 396 396 218 392 222)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_569} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -97} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4})
Best program: (exec_dup_times (tag_boolean_569 in2 in3 integer_min) print_integer boolean_invert_second_then_and boolean_stackdepth boolean_dup_times -97 integer_flush boolean_stackdepth integer_empty exec_dup_items exec_stackdepth exec_swap (exec_empty exec_shove (exec_s (in4) () ())) ())
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.796
Median total errors in population: 6
Error averages by case: (0.829 0.203 0.822 0.783 0.783 0.604 0.604 0.782 0.608 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.193
Average program size in population (points): 32.645
Average percent parens in population: 0.347
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2823478
--- Timings ---
Current time: 1559593822512 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.3 seconds, 53.2%
Fitness Testing:      4.0 seconds, 29.5%
Report:               2.3 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 53                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 64                 
Correct output: 13                  | Program output: 88                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -15                
Correct output: -88                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 19                 
Correct output: -94                 | Program output: -35                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -37                
Correct output: -8                  | Program output: 20                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: 31                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 0                  
Correct output: -83                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: 12                 
Correct output: -81                 | Program output: -76                
Correct output: -30                 | Program output: 78                 
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -71                
Correct output: -95                 | Program output: -94                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -41                
Correct output: -32                 | Program output: 22                 
Correct output: -76                 | Program output: -68                
Correct output: -65                 | Program output: -55                
Correct output: -81                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: 16                 
Correct output: -16                 | Program output: 16                 
Correct output: -39                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: 97                 
Correct output: -92                 | Program output: -49                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction -97} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_k_when_autoconstructing (exec_dup_times (in2 integer_dup in1) in2 integer_min) (print_integer) integer_gt boolean_eq boolean_stackdepth exec_do*count (-97 exec_k_when_autoconstructing (exec_dup_items exec_y (exec_swap (exec_empty exec_empty exec_s (in4 exec_k_when_autoconstructing () ()) () ()) ())) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.405
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction -97} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_k_when_autoconstructing (exec_dup_times (in2 integer_dup in1) in2 integer_min) (print_integer) integer_gt boolean_eq boolean_stackdepth exec_do*count (-97 exec_k_when_autoconstructing (exec_dup_items exec_y (exec_swap (exec_empty exec_empty exec_s (in4 exec_k_when_autoconstructing () ()) () ()) ())) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.405
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 138 138 76 505 78 593 593 788 781)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (138 138 138 76 505 78 593 593 788 781)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4})
Best program: (exec_k_when_autoconstructing (exec_dup_times (integer_dup in1) in2 integer_min) (exec_y (print_integer)) integer_inc boolean_eq boolean_stackdepth exec_rot (-97 exec_dup_items exec_stackdepth exec_y (exec_swap (integer_yankdup exec_empty exec_empty exec_s (exec_do*while (in4)) () ()) ())) () ())
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 23
Size: 38
Percent parens: 0.395
--- Population Statistics ---
Average total errors in population: 6.172
Median total errors in population: 5
Error averages by case: (0.862 0.862 0.862 0.924 0.495 0.922 0.407 0.407 0.212 0.219)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.273
Average program size in population (points): 31.709
Average percent parens in population: 0.317
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3192339
--- Timings ---
Current time: 1559593824669 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 54.5%
Fitness Testing:      4.4 seconds, 28.7%
Report:               2.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 53                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 64                 
Correct output: 13                  | Program output: 88                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -15                
Correct output: -88                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 19                 
Correct output: -94                 | Program output: -35                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -37                
Correct output: -8                  | Program output: 20                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: 31                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 0                  
Correct output: -83                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: 12                 
Correct output: -81                 | Program output: -76                
Correct output: -30                 | Program output: 78                 
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -71                
Correct output: -95                 | Program output: -94                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -41                
Correct output: -32                 | Program output: 22                 
Correct output: -76                 | Program output: -68                
Correct output: -65                 | Program output: -55                
Correct output: -81                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: 16                 
Correct output: -16                 | Program output: 16                 
Correct output: -39                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: 97                 
Correct output: -92                 | Program output: -49                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 1, :instruction tagged_390} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction in4})
Lexicase best program: (integer_dup_items exec_dup_times (integer_dup exec_s_when_autoconstructing () (in1) (in2 integer_min) print_integer) boolean_eq boolean_stackdepth exec_rot (-97 tagged_390) (exec_dup_items in2 exec_stackdepth exec_y (exec_s (in4) () ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.387
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 1, :instruction tagged_390} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction in4})
Zero cases best program: (integer_dup_items exec_dup_times (integer_dup exec_s_when_autoconstructing () (in1) (in2 integer_min) print_integer) boolean_eq boolean_stackdepth exec_rot (-97 tagged_390) (exec_dup_items in2 exec_stackdepth exec_y (exec_s (in4) () ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.387
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 326 547 331 538 468 534 138 330 141)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (329 326 547 331 538 468 534 138 330 141)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_dup_items exec_k_when_autoconstructing (integer_fromboolean exec_dup_times (integer_dup in1) in2 integer_min) (boolean_dup print_integer) boolean_eq boolean_stackdepth exec_rot (-97 exec_dup_items exec_s_when_autoconstructing (exec_stackdepth exec_y (integer_min) integer_dup exec_swap (exec_empty exec_empty exec_s (in4 exec_k_when_autoconstructing () ()) () ()) ()) () ()) () ())
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 26
Size: 44
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 6.318
Median total errors in population: 7
Error averages by case: (0.671 0.674 0.453 0.669 0.462 0.532 0.466 0.862 0.67 0.859)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.034
Average program size in population (points): 32.872
Average percent parens in population: 0.336
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3760425
--- Timings ---
Current time: 1559593827062 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.6 seconds, 53.6%
Fitness Testing:      5.1 seconds, 28.4%
Report:               3.1 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 53                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 64                 
Correct output: 13                  | Program output: 88                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -15                
Correct output: -88                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 19                 
Correct output: -94                 | Program output: -35                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -37                
Correct output: -8                  | Program output: 20                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: 31                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 0                  
Correct output: -83                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: 12                 
Correct output: -81                 | Program output: -76                
Correct output: -30                 | Program output: 78                 
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -71                
Correct output: -95                 | Program output: -94                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -41                
Correct output: -32                 | Program output: 22                 
Correct output: -76                 | Program output: -68                
Correct output: -65                 | Program output: -55                
Correct output: -81                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: 16                 
Correct output: -16                 | Program output: 16                 
Correct output: -39                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: 97                 
Correct output: -92                 | Program output: -49                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction -97} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_k_when_autoconstructing (exec_dup_times (integer_dup in1) in2 integer_min) (print_integer) boolean_eq exec_noop exec_do*times (-97 integer_inc) exec_dup_items exec_stackdepth exec_swap (exec_empty exec_empty integer_div exec_s (in4 exec_k_when_autoconstructing () ()) () ()) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction -97} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_k_when_autoconstructing (exec_dup_times (integer_dup in1) in2 integer_min) (print_integer) boolean_eq exec_noop exec_do*times (-97 integer_inc) exec_dup_items exec_stackdepth exec_swap (exec_empty exec_empty integer_div exec_s (in4 exec_k_when_autoconstructing () ()) () ()) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 562 772 549 70 558 550 498 748 765)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (70 562 772 549 70 558 550 498 748 765)
Population mean number of perfect (error zero) cases: 5.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean})
Best program: (integer_dup_items exec_k_when_autoconstructing (exec_dup_times (integer_min in1) exec_y_when_autoconstructing () integer_shove in2 integer_min) (print_integer) boolean_eq boolean_or exec_y (boolean_swap boolean_stackdepth exec_rot (-97 exec_dup_items exec_stackdepth exec_swap (exec_empty integer_yank exec_empty integer_gte) () exec_s (in4 integer_fromboolean) () ()) () ()))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 41
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 4.858
Median total errors in population: 4
Error averages by case: (0.93 0.438 0.228 0.451 0.93 0.442 0.45 0.502 0.252 0.235)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.079
Average program size in population (points): 36.713
Average percent parens in population: 0.364
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4387343
--- Timings ---
Current time: 1559593829720 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.7 seconds, 52.8%
Fitness Testing:      5.7 seconds, 28.3%
Report:               3.7 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 79                 
Correct output: 2                   | Program output: 11                 
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 50                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 13                 
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: 60                 
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -31                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: 22                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -37                
Correct output: -77                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -73                
Correct output: -13                 | Program output: -5                 
Correct output: -85                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: 83                 
Correct output: -24                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 58                 
Correct output: -88                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: 1                  
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 0, :instruction integer_yank} {:close 3, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_750} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_dup_items integer_min exec_k_when_autoconstructing (exec_if (56 exec_yankdup in2 integer_min) (print_integer)) (exec_rot (-97 integer_yank boolean_dup) () () integer_swap exec_dup_items exec_stackdepth exec_eq exec_y (exec_eq boolean_dup integer_lte) exec_swap (exec_swap () (exec_swap (exec_empty integer_eq exec_k_when_autoconstructing (integer_fromboolean tagged_750 exec_s (in4 exec_k (exec_k_when_autoconstructing () ()) ()) () ()) ()) ())) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 57
Percent parens: 0.421
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 0, :instruction integer_yank} {:close 3, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_750} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_dup_items integer_min exec_k_when_autoconstructing (exec_if (56 exec_yankdup in2 integer_min) (print_integer)) (exec_rot (-97 integer_yank boolean_dup) () () integer_swap exec_dup_items exec_stackdepth exec_eq exec_y (exec_eq boolean_dup integer_lte) exec_swap (exec_swap () (exec_swap (exec_empty integer_eq exec_k_when_autoconstructing (integer_fromboolean tagged_750 exec_s (in4 exec_k (exec_k_when_autoconstructing () ()) ()) () ()) ()) ())) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 57
Percent parens: 0.421
--- Lexicase Population Statistics ---
Count of elite individuals by case: (731 774 651 267 662 8 270 698 662 668)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (731 774 651 267 662 8 270 698 662 668)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction tag_exec_282} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 1, :instruction print_boolean} {:close 3, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_dup_items integer_min exec_k_when_autoconstructing (56 exec_yankdup in2 integer_min) (print_integer) tag_exec_282 (boolean_stackdepth exec_rot (-97 print_boolean) (boolean_dup) ()) integer_swap exec_dup_items exec_y (boolean_dup exec_swap () (integer_yank exec_empty exec_rot () (integer_eq exec_s (in4 exec_k (exec_k_when_autoconstructing () ()) ()) () ()) ())))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 27
Size: 47
Percent parens: 0.426
--- Population Statistics ---
Average total errors in population: 4.609
Median total errors in population: 3
Error averages by case: (0.269 0.226 0.349 0.733 0.338 0.992 0.73 0.302 0.338 0.332)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.102
Average program size in population (points): 41.329
Average percent parens in population: 0.386
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.01
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5146062
--- Timings ---
Current time: 1559593832430 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.8 seconds, 51.3%
Fitness Testing:      6.6 seconds, 28.4%
Report:               4.6 seconds, 19.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 79                 
Correct output: 2                   | Program output: 11                 
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 50                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 13                 
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: 60                 
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -31                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: 22                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -37                
Correct output: -77                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -73                
Correct output: -13                 | Program output: -5                 
Correct output: -85                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: 83                 
Correct output: -24                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 58                 
Correct output: -88                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: 1                  
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 3, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_dup_items integer_min boolean_shove exec_k_when_autoconstructing (56 exec_yankdup in2 integer_min) (print_integer) boolean_stackdepth exec_rot (-97 boolean_dup) () () boolean_rot exec_dup_items exec_stackdepth exec_y (boolean_dup exec_swap (exec_swap () (integer_dec exec_rot () (exec_empty exec_s (exec_yankdup) (in4 exec_k_when_autoconstructing () ()) ()) ())) ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.413
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 3, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_dup_items integer_min boolean_shove exec_k_when_autoconstructing (56 exec_yankdup in2 integer_min) (print_integer) boolean_stackdepth exec_rot (-97 boolean_dup) () () boolean_rot exec_dup_items exec_stackdepth exec_y (boolean_dup exec_swap (exec_swap () (integer_dec exec_rot () (exec_empty exec_s (exec_yankdup) (in4 exec_k_when_autoconstructing () ()) ()) ())) ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.413
--- Lexicase Population Statistics ---
Count of elite individuals by case: (557 384 169 524 407 410 720 547 407 18)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (557 384 169 524 407 410 720 547 407 18)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 3, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_min exec_k_when_autoconstructing (56 exec_yankdup in2 integer_min) (print_integer) boolean_stackdepth exec_rot (-97 boolean_dup) () () integer_swap exec_dup_items exec_stackdepth exec_y (boolean_rot boolean_dup exec_swap (exec_empty in1 integer_eq exec_s (in4 exec_k (exec_k_when_autoconstructing () ()) ()) () ()) ()))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 25
Size: 41
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 5.857
Median total errors in population: 5
Error averages by case: (0.443 0.616 0.831 0.476 0.593 0.59 0.28 0.453 0.593 0.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.911
Average program size in population (points): 48.673
Average percent parens in population: 0.403
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5959420
--- Timings ---
Current time: 1559593835243 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.0 seconds, 50.3%
Fitness Testing:      7.4 seconds, 28.7%
Report:               5.3 seconds, 20.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 79                 
Correct output: 2                   | Program output: 11                 
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 50                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 13                 
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: 60                 
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -31                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: 22                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -37                
Correct output: -77                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -73                
Correct output: -13                 | Program output: -5                 
Correct output: -85                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: 83                 
Correct output: -24                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 58                 
Correct output: -88                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: 1                  
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_dup_times (in1) exec_yankdup integer_stackdepth in2 in4 integer_min print_integer boolean_stackdepth exec_k_when_autoconstructing (integer_div integer_swap boolean_dup_times boolean_empty exec_dup_items boolean_dup_times exec_y (boolean_dup exec_empty integer_swap) exec_empty integer_eq exec_s (exec_k (boolean_and) ()) () ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_dup_times (in1) exec_yankdup integer_stackdepth in2 in4 integer_min print_integer boolean_stackdepth exec_k_when_autoconstructing (integer_div integer_swap boolean_dup_times boolean_empty exec_dup_items boolean_dup_times exec_y (boolean_dup exec_empty integer_swap) exec_empty integer_eq exec_s (exec_k (boolean_and) ()) () ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 161 546 489 485 434 432 490 146 694)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (479 161 546 489 485 434 432 490 146 694)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 56} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction -97} {:close 3, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_gt} {:close 0, :instruction -43} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_dup_items integer_stackdepth integer_inc boolean_shove exec_k_when_autoconstructing (56 exec_yankdup in2 integer_min) (print_integer) exec_stackdepth boolean_stackdepth exec_rot (-97 boolean_dup) () () integer_swap exec_dup_items exec_y (boolean_dup integer_gt) -43 boolean_stackdepth integer_min exec_swap () (integer_dec exec_rot () (exec_empty boolean_dup_times exec_s (integer_rot in4 exec_k (boolean_dup_times) (integer_inc exec_k_when_autoconstructing () ())) () ()) ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 54
Percent parens: 0.352
--- Population Statistics ---
Average total errors in population: 5.644
Median total errors in population: 5
Error averages by case: (0.521 0.839 0.454 0.511 0.515 0.566 0.568 0.51 0.854 0.306)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.242
Average program size in population (points): 47.838
Average percent parens in population: 0.385
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6727845
--- Timings ---
Current time: 1559593837905 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 49.7%
Fitness Testing:      8.2 seconds, 28.7%
Report:               6.1 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: 44                 
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 53                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 64                 
Correct output: 13                  | Program output: 88                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -15                
Correct output: -88                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 19                 
Correct output: -94                 | Program output: -35                
Correct output: -13                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -37                
Correct output: -8                  | Program output: 20                 
Correct output: -72                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: 31                 
Correct output: -90                 | Program output: -55                
Correct output: -95                 | Program output: 0                  
Correct output: -83                 | Program output: -45                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: 12                 
Correct output: -81                 | Program output: -76                
Correct output: -30                 | Program output: 78                 
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: 5                  
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -71                
Correct output: -95                 | Program output: -94                
Correct output: -23                 | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -41                
Correct output: -32                 | Program output: 22                 
Correct output: -76                 | Program output: -68                
Correct output: -65                 | Program output: -55                
Correct output: -81                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: 16                 
Correct output: -16                 | Program output: 16                 
Correct output: -39                 | Program output: 71                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: 97                 
Correct output: -92                 | Program output: -49                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range})
Lexicase best program: (exec_eq integer_mult exec_do*range () exec_k_when_autoconstructing (exec_dup_times (in1) in3 in4 boolean_shove integer_min) (print_integer) boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_div integer_sub) (exec_do*while (integer_lte integer_div exec_dup_items exec_y (boolean_dup exec_empty integer_eq exec_do*range ()))) ()) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range})
Zero cases best program: (exec_eq integer_mult exec_do*range () exec_k_when_autoconstructing (exec_dup_times (in1) in3 in4 boolean_shove integer_min) (print_integer) boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_div integer_sub) (exec_do*while (integer_lte integer_div exec_dup_items exec_y (boolean_dup exec_empty integer_eq exec_do*range ()))) ()) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 376 163 377 703 506 520 162 196 197)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (194 376 163 377 703 506 520 162 196 197)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction tagged_963} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 3, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_swap integer_mult exec_y_when_autoconstructing (exec_k_when_autoconstructing (in1) (boolean_stackdepth) exec_dup_items in2 integer_min) print_integer tagged_963 boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_stackdepth boolean_pop boolean_dup) () () integer_swap exec_dup_items exec_swap (exec_empty boolean_yank in1 exec_yankdup) (exec_rot () (integer_div exec_empty exec_s (in4 exec_k (exec_k_when_autoconstructing () ()) ()) () ()) ())) ())
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 52
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 6.606
Median total errors in population: 6
Error averages by case: (0.806 0.624 0.837 0.623 0.297 0.494 0.48 0.838 0.804 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.161
Average program size in population (points): 46.546
Average percent parens in population: 0.369
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7486212
--- Timings ---
Current time: 1559593840075 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.3 seconds, 49.1%
Fitness Testing:      9.0 seconds, 28.7%
Report:               6.8 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -75                
Correct output: -39                 | Program output: 7                  
Correct output: -76                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: 34                 
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 18                 
Correct output: 4                   | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 90                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 63                 
Correct output: 47                  | Program output: 74                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 42                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 84                 
Correct output: -72                 | Program output: 11                 
Correct output: -39                 | Program output: 48                 
Correct output: -88                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: 20                 
Correct output: -72                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: 52                 
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -64                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -73                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: 78                 
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -15                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: 31                 
Correct output: -70                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: 68                 
Correct output: -67                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -3                 
Correct output: -89                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -55                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 3, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_dup_items integer_mult integer_sub exec_k_when_autoconstructing (exec_dup_times (in1) in2 integer_swap in4 integer_min) (print_integer) boolean_stackdepth boolean_and integer_div boolean_dup exec_y (exec_do*times (boolean_dup exec_swap (exec_empty integer_mult exec_rot () (integer_eq exec_pop (exec_y (boolean_or exec_s (exec_y_when_autoconstructing (in4 integer_shove boolean_dup_times exec_k_when_autoconstructing () ())) () ()))) ()) ())))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 3, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_dup_items integer_mult integer_sub exec_k_when_autoconstructing (exec_dup_times (in1) in2 integer_swap in4 integer_min) (print_integer) boolean_stackdepth boolean_and integer_div boolean_dup exec_y (exec_do*times (boolean_dup exec_swap (exec_empty integer_mult exec_rot () (integer_eq exec_pop (exec_y (boolean_or exec_s (exec_y_when_autoconstructing (in4 integer_shove boolean_dup_times exec_k_when_autoconstructing () ())) () ()))) ()) ())))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 208 405 208 406 346 343 210 310 208)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (210 208 405 208 406 346 343 210 310 208)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction tagged_963} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_dup_items integer_div exec_k_when_autoconstructing (boolean_rot in1) (in2 boolean_frominteger in4 integer_min) print_integer tagged_963 integer_empty integer_dup exec_k_when_autoconstructing (exec_rot (exec_stackdepth integer_rot) (integer_div integer_swap exec_dup_items exec_yankdup) (exec_do*while (integer_shove exec_s (in4 boolean_not) (exec_k (exec_k_when_autoconstructing () ()) ()) ()))) ())
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 44
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 7.146
Median total errors in population: 7
Error averages by case: (0.79 0.792 0.595 0.792 0.594 0.654 0.657 0.79 0.69 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.283
Average program size in population (points): 47.919
Average percent parens in population: 0.362
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8224055
--- Timings ---
Current time: 1559593842193 milliseconds
Total Time:          33.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.5 seconds, 49.4%
Fitness Testing:      9.6 seconds, 29.0%
Report:               7.1 seconds, 21.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: 34                 
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 18                 
Correct output: 4                   | Program output: 6                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 15                 
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 44                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 42                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 76                 
Correct output: -72                 | Program output: 11                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -12                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: -8                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -64                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: -30                
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -15                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: 68                 
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -55                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 3, :instruction boolean_dup} {:close 0, :instruction -59} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4})
Lexicase best program: (integer_yankdup integer_mult exec_k_when_autoconstructing (exec_dup_times (integer_dup_items exec_k_when_autoconstructing (in1) (in4) in3 in4 integer_shove integer_min integer_min) print_integer) () boolean_empty exec_k_when_autoconstructing (exec_yank integer_div boolean_dup) () -59 exec_do*while (integer_lte integer_div exec_y (integer_stackdepth boolean_dup integer_dup integer_eq exec_do*range () exec_s (boolean_and) (boolean_yank in4) ())))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 3, :instruction boolean_dup} {:close 0, :instruction -59} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4})
Zero cases best program: (integer_yankdup integer_mult exec_k_when_autoconstructing (exec_dup_times (integer_dup_items exec_k_when_autoconstructing (in1) (in4) in3 in4 integer_shove integer_min integer_min) print_integer) () boolean_empty exec_k_when_autoconstructing (exec_yank integer_div boolean_dup) () -59 exec_do*while (integer_lte integer_div exec_y (integer_stackdepth boolean_dup integer_dup integer_eq exec_do*range () exec_s (boolean_and) (boolean_yank in4) ())))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (569 309 312 579 141 579 319 320 146 143)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (569 309 312 579 141 579 319 320 146 143)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 3, :instruction boolean_dup} {:close 0, :instruction -59} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4})
Best program: (integer_yankdup integer_mult exec_k_when_autoconstructing (exec_dup_times (integer_dup_items exec_k_when_autoconstructing (in1) (in4) in3 in4 integer_shove integer_min integer_min) print_integer) () boolean_empty exec_k_when_autoconstructing (exec_yank integer_div boolean_dup) () -59 exec_do*while (integer_lte integer_div exec_y (integer_stackdepth boolean_dup integer_dup integer_eq exec_do*range () exec_s (boolean_and) (boolean_yank in4) ())))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.583
Median total errors in population: 5
Error averages by case: (0.431 0.691 0.688 0.421 0.859 0.421 0.681 0.68 0.854 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.949
Average program size in population (points): 44.759
Average percent parens in population: 0.348
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8900622
--- Timings ---
Current time: 1559593844806 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.6 seconds, 49.7%
Fitness Testing:     10.3 seconds, 29.1%
Report:               7.4 seconds, 20.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: -8                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: -30                
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 3, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 3, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 512 655 290 711 291 529 290 409 378)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (288 512 655 290 711 291 529 290 409 378)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 3, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times})
Best program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 5.647
Median total errors in population: 5
Error averages by case: (0.712 0.488 0.345 0.71 0.289 0.709 0.471 0.71 0.591 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.951
Average program size in population (points): 50.305
Average percent parens in population: 0.322
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.01
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9964741
--- Timings ---
Current time: 1559593847795 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 48.8%
Fitness Testing:     11.3 seconds, 29.4%
Report:               8.2 seconds, 21.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 15
Successful program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 54


Auto-simplifying with starting size: 54
step: 0
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 500
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 1000
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 1500
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 2000
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 2500
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 3000
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 3500
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 4000
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 4500
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

step: 5000
program: (print_boolean boolean_eq integer_dup_items exec_s (exec_k_when_autoconstructing (integer_eq in3 integer_shove) (in2 in4 integer_min) in1 integer_min integer_min print_integer) () (boolean_stackdepth exec_k_when_autoconstructing (exec_rot (integer_max boolean_dup) () () exec_swap (exec_do*count (integer_swap integer_dup_items) exec_dup_items integer_swap) () exec_y (in3 exec_empty integer_eq integer_eq) in4 in4 exec_k_when_autoconstructing (integer_inc) (boolean_invert_second_then_and) boolean_dup_times) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 54

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -13                 | Program output: -13                
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -85                
Correct output: -15                 | Program output: -15                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 33                  | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 43                  | Program output: 43                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 28                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 24                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -83                 | Program output: -83                
Correct output: 72                  | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -41                 | Program output: -41                
Correct output: -50                 | Program output: -50                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -8                  | Program output: -8                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -30                 | Program output: -30                
Correct output: -24                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -77                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -16                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
;;******************************
