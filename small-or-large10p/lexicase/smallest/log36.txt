Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-84 -54 -84 -84] -84] [[-15 24 24 24] -15] [[37 -44 37 37] -44] [[-50 31 31 31] -50] [[34 34 -76 34] -76] [[-90 73 -90 -90] -90] [[-83 56 56 56] -83] [[-35 -35 -35 -42] -42] [[63 -11 -11 -11] -11] [[-37 -37 -37 -98] -98] [(-36 -36 -36 -36) -36] [(7 7 7 7) 7] [(92 92 92 92) 92] [(85 85 85 85) 85] [(28 28 28 28) 28] [(57 92 74 93) 57] [(12 52 59 95) 12] [(39 37 93 78) 37] [(15 63 82 82) 15] [(29 40 84 16) 16] [(45 79 77 96) 45] [(64 87 28 49) 28] [(2 16 98 8) 2] [(73 65 96 90) 65] [(51 100 7 71) 7] [(8 71 10 32) 8] [(91 93 65 4) 4] [(35 93 56 4) 4] [(39 43 14 55) 14] [(10 70 4 46) 4] [(29 94 28 61) 28] [(58 27 32 86) 27] [(26 43 87 40) 26] [(56 10 55 22) 10] [(39 83 66 76) 39] [(-6 37 -48 -37) -48] [(55 44 83 49) 44] [(86 54 -87 -97) -97] [(23 -10 35 -8) -10] [(-17 34 58 41) -17] [(-93 65 17 -66) -93] [(8 -72 -85 -89) -89] [(-13 -45 55 -72) -72] [(22 83 -64 -34) -64] [(-2 94 64 -54) -54] [(-86 -84 100 69) -86] [(33 -90 85 -78) -90] [(42 -81 -73 14) -81] [(-3 14 25 -71) -71] [(-57 -72 51 24) -72] [(-25 -4 -47 -83) -83] [(40 78 -77 15) -77] [(-98 -4 -41 -89) -98] [(44 58 40 22) 22] [(25 -44 -44 37) -44] [(-56 -83 -20 -46) -83] [(23 91 76 -27) -27] [(58 94 80 -73) -73] [(-33 -9 -36 2) -36] [(52 -76 16 -62) -76] [(-85 -39 -87 7) -87] [(56 15 40 -71) -71] [(-39 -77 -66 71) -77] [(26 -73 -96 45) -96] [(-77 -42 49 -65) -77] [(12 -48 -58 -14) -58] [(-39 18 42 54) -39] [(-59 42 40 2) -59] [(62 -14 22 -90) -90] [(13 -99 20 61) -99] [(-28 -89 79 63) -89] [(-13 -78 65 -63) -78] [(-91 57 -82 -24) -91] [(-59 58 56 12) -59] [(-67 80 -91 53) -91] [(-35 39 71 71) -35] [(30 -64 -23 65) -64] [(-82 68 20 42) -82] [(-59 -41 -91 61) -91] [(-20 -48 74 -46) -48] [(71 98 -22 -74) -74] [(-58 51 -68 98) -68] [(24 86 94 21) 21] [(5 72 -86 -74) -86] [(-38 93 0 78) -38] [(-70 0 80 -97) -97] [(41 -10 -6 21) -10] [(-91 91 -55 -52) -91] [(56 8 88 -45) -45] [(19 -41 -70 99) -70] [(-24 41 16 -27) -27] [(24 19 37 9) 9] [(-39 -31 -10 81) -39] [(58 98 -81 79) -81] [(-63 -8 4 84) -63])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-84 -54 -84 -84] -84]
Train Case:   6 | Input/Output: [[-15 24 24 24] -15]
Train Case:   7 | Input/Output: [[37 -44 37 37] -44]
Train Case:   8 | Input/Output: [[-50 31 31 31] -50]
Train Case:   9 | Input/Output: [[34 34 -76 34] -76]
Train Case:  10 | Input/Output: [[-90 73 -90 -90] -90]
Train Case:  11 | Input/Output: [[-83 56 56 56] -83]
Train Case:  12 | Input/Output: [[-35 -35 -35 -42] -42]
Train Case:  13 | Input/Output: [[63 -11 -11 -11] -11]
Train Case:  14 | Input/Output: [[-37 -37 -37 -98] -98]
Train Case:  15 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  16 | Input/Output: [(7 7 7 7) 7]
Train Case:  17 | Input/Output: [(92 92 92 92) 92]
Train Case:  18 | Input/Output: [(85 85 85 85) 85]
Train Case:  19 | Input/Output: [(28 28 28 28) 28]
Train Case:  20 | Input/Output: [(57 92 74 93) 57]
Train Case:  21 | Input/Output: [(12 52 59 95) 12]
Train Case:  22 | Input/Output: [(39 37 93 78) 37]
Train Case:  23 | Input/Output: [(15 63 82 82) 15]
Train Case:  24 | Input/Output: [(29 40 84 16) 16]
Train Case:  25 | Input/Output: [(45 79 77 96) 45]
Train Case:  26 | Input/Output: [(64 87 28 49) 28]
Train Case:  27 | Input/Output: [(2 16 98 8) 2]
Train Case:  28 | Input/Output: [(73 65 96 90) 65]
Train Case:  29 | Input/Output: [(51 100 7 71) 7]
Train Case:  30 | Input/Output: [(8 71 10 32) 8]
Train Case:  31 | Input/Output: [(91 93 65 4) 4]
Train Case:  32 | Input/Output: [(35 93 56 4) 4]
Train Case:  33 | Input/Output: [(39 43 14 55) 14]
Train Case:  34 | Input/Output: [(10 70 4 46) 4]
Train Case:  35 | Input/Output: [(29 94 28 61) 28]
Train Case:  36 | Input/Output: [(58 27 32 86) 27]
Train Case:  37 | Input/Output: [(26 43 87 40) 26]
Train Case:  38 | Input/Output: [(56 10 55 22) 10]
Train Case:  39 | Input/Output: [(39 83 66 76) 39]
Train Case:  40 | Input/Output: [(-6 37 -48 -37) -48]
Train Case:  41 | Input/Output: [(55 44 83 49) 44]
Train Case:  42 | Input/Output: [(86 54 -87 -97) -97]
Train Case:  43 | Input/Output: [(23 -10 35 -8) -10]
Train Case:  44 | Input/Output: [(-17 34 58 41) -17]
Train Case:  45 | Input/Output: [(-93 65 17 -66) -93]
Train Case:  46 | Input/Output: [(8 -72 -85 -89) -89]
Train Case:  47 | Input/Output: [(-13 -45 55 -72) -72]
Train Case:  48 | Input/Output: [(22 83 -64 -34) -64]
Train Case:  49 | Input/Output: [(-2 94 64 -54) -54]
Train Case:  50 | Input/Output: [(-86 -84 100 69) -86]
Train Case:  51 | Input/Output: [(33 -90 85 -78) -90]
Train Case:  52 | Input/Output: [(42 -81 -73 14) -81]
Train Case:  53 | Input/Output: [(-3 14 25 -71) -71]
Train Case:  54 | Input/Output: [(-57 -72 51 24) -72]
Train Case:  55 | Input/Output: [(-25 -4 -47 -83) -83]
Train Case:  56 | Input/Output: [(40 78 -77 15) -77]
Train Case:  57 | Input/Output: [(-98 -4 -41 -89) -98]
Train Case:  58 | Input/Output: [(44 58 40 22) 22]
Train Case:  59 | Input/Output: [(25 -44 -44 37) -44]
Train Case:  60 | Input/Output: [(-56 -83 -20 -46) -83]
Train Case:  61 | Input/Output: [(23 91 76 -27) -27]
Train Case:  62 | Input/Output: [(58 94 80 -73) -73]
Train Case:  63 | Input/Output: [(-33 -9 -36 2) -36]
Train Case:  64 | Input/Output: [(52 -76 16 -62) -76]
Train Case:  65 | Input/Output: [(-85 -39 -87 7) -87]
Train Case:  66 | Input/Output: [(56 15 40 -71) -71]
Train Case:  67 | Input/Output: [(-39 -77 -66 71) -77]
Train Case:  68 | Input/Output: [(26 -73 -96 45) -96]
Train Case:  69 | Input/Output: [(-77 -42 49 -65) -77]
Train Case:  70 | Input/Output: [(12 -48 -58 -14) -58]
Train Case:  71 | Input/Output: [(-39 18 42 54) -39]
Train Case:  72 | Input/Output: [(-59 42 40 2) -59]
Train Case:  73 | Input/Output: [(62 -14 22 -90) -90]
Train Case:  74 | Input/Output: [(13 -99 20 61) -99]
Train Case:  75 | Input/Output: [(-28 -89 79 63) -89]
Train Case:  76 | Input/Output: [(-13 -78 65 -63) -78]
Train Case:  77 | Input/Output: [(-91 57 -82 -24) -91]
Train Case:  78 | Input/Output: [(-59 58 56 12) -59]
Train Case:  79 | Input/Output: [(-67 80 -91 53) -91]
Train Case:  80 | Input/Output: [(-35 39 71 71) -35]
Train Case:  81 | Input/Output: [(30 -64 -23 65) -64]
Train Case:  82 | Input/Output: [(-82 68 20 42) -82]
Train Case:  83 | Input/Output: [(-59 -41 -91 61) -91]
Train Case:  84 | Input/Output: [(-20 -48 74 -46) -48]
Train Case:  85 | Input/Output: [(71 98 -22 -74) -74]
Train Case:  86 | Input/Output: [(-58 51 -68 98) -68]
Train Case:  87 | Input/Output: [(24 86 94 21) 21]
Train Case:  88 | Input/Output: [(5 72 -86 -74) -86]
Train Case:  89 | Input/Output: [(-38 93 0 78) -38]
Train Case:  90 | Input/Output: [(-70 0 80 -97) -97]
Train Case:  91 | Input/Output: [(41 -10 -6 21) -10]
Train Case:  92 | Input/Output: [(-91 91 -55 -52) -91]
Train Case:  93 | Input/Output: [(56 8 88 -45) -45]
Train Case:  94 | Input/Output: [(19 -41 -70 99) -70]
Train Case:  95 | Input/Output: [(-24 41 16 -27) -27]
Train Case:  96 | Input/Output: [(24 19 37 9) 9]
Train Case:  97 | Input/Output: [(-39 -31 -10 81) -39]
Train Case:  98 | Input/Output: [(58 98 -81 79) -81]
Train Case:  99 | Input/Output: [(-63 -8 4 84) -63]
Test Case:   0 | Input/Output: [[44 -25 44 44] -25]
Test Case:   1 | Input/Output: [[30 44 30 30] 30]
Test Case:   2 | Input/Output: [[71 78 78 78] 71]
Test Case:   3 | Input/Output: [[-12 -12 13 -12] -12]
Test Case:   4 | Input/Output: [[-19 -19 -19 55] -19]
Test Case:   5 | Input/Output: [[-82 -23 -82 -82] -82]
Test Case:   6 | Input/Output: [[24 24 24 -63] -63]
Test Case:   7 | Input/Output: [[67 67 67 61] 61]
Test Case:   8 | Input/Output: [[-21 -21 -21 -91] -91]
Test Case:   9 | Input/Output: [[-9 56 56 56] -9]
Test Case:  10 | Input/Output: [[-84 -84 -84 23] -84]
Test Case:  11 | Input/Output: [[92 -86 92 92] -86]
Test Case:  12 | Input/Output: [[48 92 92 92] 48]
Test Case:  13 | Input/Output: [[21 21 4 21] 4]
Test Case:  14 | Input/Output: [[-68 -68 -68 80] -68]
Test Case:  15 | Input/Output: [[40 40 40 -75] -75]
Test Case:  16 | Input/Output: [[30 -74 30 30] -74]
Test Case:  17 | Input/Output: [[40 40 40 -70] -70]
Test Case:  18 | Input/Output: [[-80 25 -80 -80] -80]
Test Case:  19 | Input/Output: [[-63 -4 -63 -63] -63]
Test Case:  20 | Input/Output: [[-23 -25 -25 -25] -25]
Test Case:  21 | Input/Output: [[39 -21 -21 -21] -21]
Test Case:  22 | Input/Output: [[58 58 58 -39] -39]
Test Case:  23 | Input/Output: [[42 38 38 38] 38]
Test Case:  24 | Input/Output: [[-34 -34 -34 -19] -34]
Test Case:  25 | Input/Output: [[-78 -18 -78 -78] -78]
Test Case:  26 | Input/Output: [[28 34 34 34] 28]
Test Case:  27 | Input/Output: [[-64 -64 10 -64] -64]
Test Case:  28 | Input/Output: [[-14 28 28 28] -14]
Test Case:  29 | Input/Output: [[13 6 6 6] 6]
Test Case:  30 | Input/Output: [[87 71 71 71] 71]
Test Case:  31 | Input/Output: [[82 82 -88 82] -88]
Test Case:  32 | Input/Output: [[29 29 -44 29] -44]
Test Case:  33 | Input/Output: [[-47 -76 -76 -76] -76]
Test Case:  34 | Input/Output: [[66 66 66 9] 9]
Test Case:  35 | Input/Output: [[83 -63 -63 -63] -63]
Test Case:  36 | Input/Output: [[93 86 86 86] 86]
Test Case:  37 | Input/Output: [[-49 -49 -49 94] -49]
Test Case:  38 | Input/Output: [[-69 -69 -28 -69] -69]
Test Case:  39 | Input/Output: [[-93 -93 -93 94] -93]
Test Case:  40 | Input/Output: [[-83 -94 -94 -94] -94]
Test Case:  41 | Input/Output: [[-34 -34 -34 58] -34]
Test Case:  42 | Input/Output: [[-97 -100 -97 -97] -100]
Test Case:  43 | Input/Output: [[-46 -20 -46 -46] -46]
Test Case:  44 | Input/Output: [[61 61 61 -87] -87]
Test Case:  45 | Input/Output: [[92 -15 92 92] -15]
Test Case:  46 | Input/Output: [[68 68 -24 68] -24]
Test Case:  47 | Input/Output: [[69 -41 -41 -41] -41]
Test Case:  48 | Input/Output: [[-97 8 -97 -97] -97]
Test Case:  49 | Input/Output: [[-52 -52 -33 -52] -52]
Test Case:  50 | Input/Output: [[28 -96 -96 -96] -96]
Test Case:  51 | Input/Output: [[41 41 41 23] 23]
Test Case:  52 | Input/Output: [[-92 -91 -92 -92] -92]
Test Case:  53 | Input/Output: [[17 17 -56 17] -56]
Test Case:  54 | Input/Output: [[91 -60 91 91] -60]
Test Case:  55 | Input/Output: [[-38 -13 -38 -38] -38]
Test Case:  56 | Input/Output: [[57 4 57 57] 4]
Test Case:  57 | Input/Output: [[87 87 63 87] 63]
Test Case:  58 | Input/Output: [[79 -29 79 79] -29]
Test Case:  59 | Input/Output: [[44 44 25 44] 25]
Test Case:  60 | Input/Output: [[-50 78 -50 -50] -50]
Test Case:  61 | Input/Output: [[-35 59 -35 -35] -35]
Test Case:  62 | Input/Output: [[-99 -37 -99 -99] -99]
Test Case:  63 | Input/Output: [[-96 -96 -49 -96] -96]
Test Case:  64 | Input/Output: [[4 41 41 41] 4]
Test Case:  65 | Input/Output: [[-6 -6 -43 -6] -43]
Test Case:  66 | Input/Output: [[-94 -94 -38 -94] -94]
Test Case:  67 | Input/Output: [[29 37 29 29] 29]
Test Case:  68 | Input/Output: [[-100 76 -100 -100] -100]
Test Case:  69 | Input/Output: [[77 -43 -43 -43] -43]
Test Case:  70 | Input/Output: [[36 -23 -23 -23] -23]
Test Case:  71 | Input/Output: [[-52 -52 -68 -52] -68]
Test Case:  72 | Input/Output: [[-98 83 -98 -98] -98]
Test Case:  73 | Input/Output: [[-7 48 -7 -7] -7]
Test Case:  74 | Input/Output: [[39 39 -44 39] -44]
Test Case:  75 | Input/Output: [[64 -14 64 64] -14]
Test Case:  76 | Input/Output: [[-47 -47 6 -47] -47]
Test Case:  77 | Input/Output: [[61 61 13 61] 13]
Test Case:  78 | Input/Output: [[75 17 75 75] 17]
Test Case:  79 | Input/Output: [[30 80 30 30] 30]
Test Case:  80 | Input/Output: [[-21 51 51 51] -21]
Test Case:  81 | Input/Output: [[-27 -27 -27 55] -27]
Test Case:  82 | Input/Output: [[-97 28 28 28] -97]
Test Case:  83 | Input/Output: [[16 -37 16 16] -37]
Test Case:  84 | Input/Output: [[3 -55 3 3] -55]
Test Case:  85 | Input/Output: [[-52 36 -52 -52] -52]
Test Case:  86 | Input/Output: [[79 88 79 79] 79]
Test Case:  87 | Input/Output: [[61 -32 -32 -32] -32]
Test Case:  88 | Input/Output: [[-11 -11 18 -11] -11]
Test Case:  89 | Input/Output: [[22 22 22 -89] -89]
Test Case:  90 | Input/Output: [[-57 73 -57 -57] -57]
Test Case:  91 | Input/Output: [[13 -62 -62 -62] -62]
Test Case:  92 | Input/Output: [[-40 -40 -33 -40] -40]
Test Case:  93 | Input/Output: [[-79 -79 -79 77] -79]
Test Case:  94 | Input/Output: [[44 -91 44 44] -91]
Test Case:  95 | Input/Output: [[-39 -39 -84 -39] -84]
Test Case:  96 | Input/Output: [[33 58 58 58] 33]
Test Case:  97 | Input/Output: [[35 -8 -8 -8] -8]
Test Case:  98 | Input/Output: [[-95 -79 -79 -79] -95]
Test Case:  99 | Input/Output: [[9 -66 9 9] -66]
Test Case: 100 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 101 | Input/Output: [(96 96 96 96) 96]
Test Case: 102 | Input/Output: [(24 24 24 24) 24]
Test Case: 103 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 104 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 105 | Input/Output: [(13 13 13 13) 13]
Test Case: 106 | Input/Output: [(50 50 50 50) 50]
Test Case: 107 | Input/Output: [(64 64 64 64) 64]
Test Case: 108 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 109 | Input/Output: [(68 68 68 68) 68]
Test Case: 110 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 111 | Input/Output: [(82 82 82 82) 82]
Test Case: 112 | Input/Output: [(58 58 58 58) 58]
Test Case: 113 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 114 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 115 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 116 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 117 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 118 | Input/Output: [(16 16 16 16) 16]
Test Case: 119 | Input/Output: [(49 49 49 49) 49]
Test Case: 120 | Input/Output: [(63 63 63 63) 63]
Test Case: 121 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 122 | Input/Output: [(48 48 48 48) 48]
Test Case: 123 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 124 | Input/Output: [(20 20 20 20) 20]
Test Case: 125 | Input/Output: [(59 59 59 59) 59]
Test Case: 126 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 127 | Input/Output: [(40 40 40 40) 40]
Test Case: 128 | Input/Output: [(44 44 44 44) 44]
Test Case: 129 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 130 | Input/Output: [(37 37 37 37) 37]
Test Case: 131 | Input/Output: [(52 52 52 52) 52]
Test Case: 132 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 133 | Input/Output: [(57 57 57 57) 57]
Test Case: 134 | Input/Output: [(73 73 73 73) 73]
Test Case: 135 | Input/Output: [(37 37 37 37) 37]
Test Case: 136 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 137 | Input/Output: [(69 69 69 69) 69]
Test Case: 138 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 139 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 140 | Input/Output: [(25 25 25 25) 25]
Test Case: 141 | Input/Output: [(13 13 13 13) 13]
Test Case: 142 | Input/Output: [(64 64 64 64) 64]
Test Case: 143 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 144 | Input/Output: [(28 28 28 28) 28]
Test Case: 145 | Input/Output: [(51 51 51 51) 51]
Test Case: 146 | Input/Output: [(77 77 77 77) 77]
Test Case: 147 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 148 | Input/Output: [(28 28 28 28) 28]
Test Case: 149 | Input/Output: [(62 62 62 62) 62]
Test Case: 150 | Input/Output: [(48 48 48 48) 48]
Test Case: 151 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 152 | Input/Output: [(37 37 37 37) 37]
Test Case: 153 | Input/Output: [(68 68 68 68) 68]
Test Case: 154 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 155 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 156 | Input/Output: [(89 89 89 89) 89]
Test Case: 157 | Input/Output: [(11 11 11 11) 11]
Test Case: 158 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 159 | Input/Output: [(17 17 17 17) 17]
Test Case: 160 | Input/Output: [(96 96 96 96) 96]
Test Case: 161 | Input/Output: [(6 6 6 6) 6]
Test Case: 162 | Input/Output: [(64 64 64 64) 64]
Test Case: 163 | Input/Output: [(53 53 53 53) 53]
Test Case: 164 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 165 | Input/Output: [(60 60 60 60) 60]
Test Case: 166 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 167 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 168 | Input/Output: [(99 99 99 99) 99]
Test Case: 169 | Input/Output: [(100 100 100 100) 100]
Test Case: 170 | Input/Output: [(26 26 26 26) 26]
Test Case: 171 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 172 | Input/Output: [(64 64 64 64) 64]
Test Case: 173 | Input/Output: [(37 37 37 37) 37]
Test Case: 174 | Input/Output: [(23 23 23 23) 23]
Test Case: 175 | Input/Output: [(64 64 64 64) 64]
Test Case: 176 | Input/Output: [(85 85 85 85) 85]
Test Case: 177 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 178 | Input/Output: [(3 3 3 3) 3]
Test Case: 179 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 180 | Input/Output: [(51 51 51 51) 51]
Test Case: 181 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 182 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 183 | Input/Output: [(53 53 53 53) 53]
Test Case: 184 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 185 | Input/Output: [(14 14 14 14) 14]
Test Case: 186 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 187 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 188 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 189 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 190 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 191 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 192 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 193 | Input/Output: [(62 62 62 62) 62]
Test Case: 194 | Input/Output: [(10 10 10 10) 10]
Test Case: 195 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 196 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 197 | Input/Output: [(26 26 26 26) 26]
Test Case: 198 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 199 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 200 | Input/Output: [(42 90 13 32) 13]
Test Case: 201 | Input/Output: [(12 78 99 31) 12]
Test Case: 202 | Input/Output: [(55 91 86 15) 15]
Test Case: 203 | Input/Output: [(68 42 95 1) 1]
Test Case: 204 | Input/Output: [(47 23 27 69) 23]
Test Case: 205 | Input/Output: [(98 68 7 67) 7]
Test Case: 206 | Input/Output: [(87 67 89 58) 58]
Test Case: 207 | Input/Output: [(77 1 56 34) 1]
Test Case: 208 | Input/Output: [(75 53 95 27) 27]
Test Case: 209 | Input/Output: [(49 9 1 89) 1]
Test Case: 210 | Input/Output: [(6 57 77 54) 6]
Test Case: 211 | Input/Output: [(31 68 86 28) 28]
Test Case: 212 | Input/Output: [(80 94 92 34) 34]
Test Case: 213 | Input/Output: [(66 54 62 40) 40]
Test Case: 214 | Input/Output: [(30 76 53 0) 0]
Test Case: 215 | Input/Output: [(89 64 2 58) 2]
Test Case: 216 | Input/Output: [(47 31 71 60) 31]
Test Case: 217 | Input/Output: [(45 17 71 13) 13]
Test Case: 218 | Input/Output: [(85 47 33 17) 17]
Test Case: 219 | Input/Output: [(34 75 34 41) 34]
Test Case: 220 | Input/Output: [(26 86 62 27) 26]
Test Case: 221 | Input/Output: [(51 17 2 31) 2]
Test Case: 222 | Input/Output: [(95 13 4 35) 4]
Test Case: 223 | Input/Output: [(16 45 94 19) 16]
Test Case: 224 | Input/Output: [(30 27 42 8) 8]
Test Case: 225 | Input/Output: [(19 87 57 52) 19]
Test Case: 226 | Input/Output: [(65 41 31 63) 31]
Test Case: 227 | Input/Output: [(70 27 6 59) 6]
Test Case: 228 | Input/Output: [(22 81 54 29) 22]
Test Case: 229 | Input/Output: [(59 44 21 88) 21]
Test Case: 230 | Input/Output: [(69 1 51 12) 1]
Test Case: 231 | Input/Output: [(89 75 73 87) 73]
Test Case: 232 | Input/Output: [(5 13 79 24) 5]
Test Case: 233 | Input/Output: [(68 51 71 82) 51]
Test Case: 234 | Input/Output: [(72 66 83 31) 31]
Test Case: 235 | Input/Output: [(80 66 77 91) 66]
Test Case: 236 | Input/Output: [(84 16 75 19) 16]
Test Case: 237 | Input/Output: [(58 44 66 44) 44]
Test Case: 238 | Input/Output: [(24 3 83 72) 3]
Test Case: 239 | Input/Output: [(88 17 92 54) 17]
Test Case: 240 | Input/Output: [(19 68 67 28) 19]
Test Case: 241 | Input/Output: [(50 1 2 27) 1]
Test Case: 242 | Input/Output: [(51 41 47 58) 41]
Test Case: 243 | Input/Output: [(0 36 73 58) 0]
Test Case: 244 | Input/Output: [(95 36 12 82) 12]
Test Case: 245 | Input/Output: [(18 77 22 71) 18]
Test Case: 246 | Input/Output: [(42 80 11 51) 11]
Test Case: 247 | Input/Output: [(59 11 35 98) 11]
Test Case: 248 | Input/Output: [(1 49 64 94) 1]
Test Case: 249 | Input/Output: [(69 48 86 83) 48]
Test Case: 250 | Input/Output: [(81 32 17 44) 17]
Test Case: 251 | Input/Output: [(2 45 73 96) 2]
Test Case: 252 | Input/Output: [(5 5 74 49) 5]
Test Case: 253 | Input/Output: [(51 26 28 88) 26]
Test Case: 254 | Input/Output: [(61 94 7 36) 7]
Test Case: 255 | Input/Output: [(57 38 74 12) 12]
Test Case: 256 | Input/Output: [(28 80 66 84) 28]
Test Case: 257 | Input/Output: [(53 91 45 34) 34]
Test Case: 258 | Input/Output: [(0 49 72 44) 0]
Test Case: 259 | Input/Output: [(10 30 83 73) 10]
Test Case: 260 | Input/Output: [(39 54 28 38) 28]
Test Case: 261 | Input/Output: [(66 14 77 55) 14]
Test Case: 262 | Input/Output: [(25 30 54 73) 25]
Test Case: 263 | Input/Output: [(34 64 1 63) 1]
Test Case: 264 | Input/Output: [(30 33 52 23) 23]
Test Case: 265 | Input/Output: [(44 91 77 82) 44]
Test Case: 266 | Input/Output: [(59 88 2 52) 2]
Test Case: 267 | Input/Output: [(85 72 1 90) 1]
Test Case: 268 | Input/Output: [(86 63 80 12) 12]
Test Case: 269 | Input/Output: [(27 15 68 38) 15]
Test Case: 270 | Input/Output: [(84 50 19 30) 19]
Test Case: 271 | Input/Output: [(73 98 3 87) 3]
Test Case: 272 | Input/Output: [(31 58 90 70) 31]
Test Case: 273 | Input/Output: [(65 40 40 11) 11]
Test Case: 274 | Input/Output: [(66 90 91 1) 1]
Test Case: 275 | Input/Output: [(73 45 80 65) 45]
Test Case: 276 | Input/Output: [(69 41 92 74) 41]
Test Case: 277 | Input/Output: [(85 99 53 10) 10]
Test Case: 278 | Input/Output: [(66 81 54 91) 54]
Test Case: 279 | Input/Output: [(71 26 54 28) 26]
Test Case: 280 | Input/Output: [(33 29 31 100) 29]
Test Case: 281 | Input/Output: [(41 30 10 75) 10]
Test Case: 282 | Input/Output: [(29 45 16 92) 16]
Test Case: 283 | Input/Output: [(90 27 100 28) 27]
Test Case: 284 | Input/Output: [(65 76 3 11) 3]
Test Case: 285 | Input/Output: [(79 9 89 21) 9]
Test Case: 286 | Input/Output: [(15 99 61 89) 15]
Test Case: 287 | Input/Output: [(73 27 74 77) 27]
Test Case: 288 | Input/Output: [(9 21 62 60) 9]
Test Case: 289 | Input/Output: [(78 83 44 16) 16]
Test Case: 290 | Input/Output: [(82 28 89 93) 28]
Test Case: 291 | Input/Output: [(79 8 62 89) 8]
Test Case: 292 | Input/Output: [(28 71 91 24) 24]
Test Case: 293 | Input/Output: [(97 52 33 72) 33]
Test Case: 294 | Input/Output: [(57 52 7 43) 7]
Test Case: 295 | Input/Output: [(91 70 33 27) 27]
Test Case: 296 | Input/Output: [(63 43 95 3) 3]
Test Case: 297 | Input/Output: [(62 10 53 56) 10]
Test Case: 298 | Input/Output: [(93 1 88 94) 1]
Test Case: 299 | Input/Output: [(19 41 31 10) 10]
Test Case: 300 | Input/Output: [(9 29 36 51) 9]
Test Case: 301 | Input/Output: [(67 29 7 100) 7]
Test Case: 302 | Input/Output: [(41 58 34 81) 34]
Test Case: 303 | Input/Output: [(100 77 49 72) 49]
Test Case: 304 | Input/Output: [(67 69 3 54) 3]
Test Case: 305 | Input/Output: [(29 32 37 6) 6]
Test Case: 306 | Input/Output: [(59 91 12 29) 12]
Test Case: 307 | Input/Output: [(79 77 47 31) 31]
Test Case: 308 | Input/Output: [(5 99 7 25) 5]
Test Case: 309 | Input/Output: [(23 35 71 14) 14]
Test Case: 310 | Input/Output: [(70 42 54 16) 16]
Test Case: 311 | Input/Output: [(56 4 64 82) 4]
Test Case: 312 | Input/Output: [(21 10 43 71) 10]
Test Case: 313 | Input/Output: [(96 60 68 46) 46]
Test Case: 314 | Input/Output: [(91 9 16 27) 9]
Test Case: 315 | Input/Output: [(46 28 80 93) 28]
Test Case: 316 | Input/Output: [(91 50 89 26) 26]
Test Case: 317 | Input/Output: [(96 34 59 9) 9]
Test Case: 318 | Input/Output: [(12 81 25 83) 12]
Test Case: 319 | Input/Output: [(99 88 2 88) 2]
Test Case: 320 | Input/Output: [(8 5 24 45) 5]
Test Case: 321 | Input/Output: [(74 83 51 50) 50]
Test Case: 322 | Input/Output: [(76 49 23 34) 23]
Test Case: 323 | Input/Output: [(47 95 78 23) 23]
Test Case: 324 | Input/Output: [(69 35 44 82) 35]
Test Case: 325 | Input/Output: [(13 67 13 13) 13]
Test Case: 326 | Input/Output: [(25 22 46 77) 22]
Test Case: 327 | Input/Output: [(34 12 17 98) 12]
Test Case: 328 | Input/Output: [(67 81 18 11) 11]
Test Case: 329 | Input/Output: [(45 80 45 78) 45]
Test Case: 330 | Input/Output: [(16 40 45 89) 16]
Test Case: 331 | Input/Output: [(54 6 83 56) 6]
Test Case: 332 | Input/Output: [(68 61 79 0) 0]
Test Case: 333 | Input/Output: [(93 84 64 95) 64]
Test Case: 334 | Input/Output: [(86 23 10 75) 10]
Test Case: 335 | Input/Output: [(46 43 5 32) 5]
Test Case: 336 | Input/Output: [(95 3 31 74) 3]
Test Case: 337 | Input/Output: [(65 38 81 38) 38]
Test Case: 338 | Input/Output: [(56 69 40 52) 40]
Test Case: 339 | Input/Output: [(47 45 49 100) 45]
Test Case: 340 | Input/Output: [(18 73 10 88) 10]
Test Case: 341 | Input/Output: [(59 59 98 98) 59]
Test Case: 342 | Input/Output: [(69 67 98 96) 67]
Test Case: 343 | Input/Output: [(81 22 44 36) 22]
Test Case: 344 | Input/Output: [(47 85 86 37) 37]
Test Case: 345 | Input/Output: [(94 98 43 25) 25]
Test Case: 346 | Input/Output: [(6 29 77 14) 6]
Test Case: 347 | Input/Output: [(35 51 81 95) 35]
Test Case: 348 | Input/Output: [(70 58 6 60) 6]
Test Case: 349 | Input/Output: [(73 11 42 16) 11]
Test Case: 350 | Input/Output: [(78 16 98 52) 16]
Test Case: 351 | Input/Output: [(88 21 96 23) 21]
Test Case: 352 | Input/Output: [(79 98 11 72) 11]
Test Case: 353 | Input/Output: [(91 34 45 24) 24]
Test Case: 354 | Input/Output: [(88 71 42 47) 42]
Test Case: 355 | Input/Output: [(100 53 30 86) 30]
Test Case: 356 | Input/Output: [(39 78 59 28) 28]
Test Case: 357 | Input/Output: [(48 43 68 75) 43]
Test Case: 358 | Input/Output: [(26 63 99 56) 26]
Test Case: 359 | Input/Output: [(97 49 84 89) 49]
Test Case: 360 | Input/Output: [(13 64 10 35) 10]
Test Case: 361 | Input/Output: [(51 68 9 36) 9]
Test Case: 362 | Input/Output: [(37 55 76 5) 5]
Test Case: 363 | Input/Output: [(29 72 59 50) 29]
Test Case: 364 | Input/Output: [(86 70 29 89) 29]
Test Case: 365 | Input/Output: [(67 41 48 18) 18]
Test Case: 366 | Input/Output: [(69 49 3 52) 3]
Test Case: 367 | Input/Output: [(89 75 83 89) 75]
Test Case: 368 | Input/Output: [(50 6 69 30) 6]
Test Case: 369 | Input/Output: [(16 13 88 52) 13]
Test Case: 370 | Input/Output: [(29 46 22 45) 22]
Test Case: 371 | Input/Output: [(97 99 34 90) 34]
Test Case: 372 | Input/Output: [(77 25 73 1) 1]
Test Case: 373 | Input/Output: [(81 83 21 73) 21]
Test Case: 374 | Input/Output: [(63 86 59 26) 26]
Test Case: 375 | Input/Output: [(63 63 33 38) 33]
Test Case: 376 | Input/Output: [(23 14 66 32) 14]
Test Case: 377 | Input/Output: [(70 78 33 58) 33]
Test Case: 378 | Input/Output: [(6 15 4 29) 4]
Test Case: 379 | Input/Output: [(17 41 84 66) 17]
Test Case: 380 | Input/Output: [(84 71 28 5) 5]
Test Case: 381 | Input/Output: [(68 2 73 35) 2]
Test Case: 382 | Input/Output: [(63 42 92 22) 22]
Test Case: 383 | Input/Output: [(32 48 91 85) 32]
Test Case: 384 | Input/Output: [(49 32 73 71) 32]
Test Case: 385 | Input/Output: [(57 100 19 46) 19]
Test Case: 386 | Input/Output: [(59 95 75 22) 22]
Test Case: 387 | Input/Output: [(13 65 21 13) 13]
Test Case: 388 | Input/Output: [(55 51 28 23) 23]
Test Case: 389 | Input/Output: [(33 42 4 88) 4]
Test Case: 390 | Input/Output: [(49 78 15 30) 15]
Test Case: 391 | Input/Output: [(12 51 13 50) 12]
Test Case: 392 | Input/Output: [(53 26 60 76) 26]
Test Case: 393 | Input/Output: [(100 100 36 53) 36]
Test Case: 394 | Input/Output: [(48 43 95 10) 10]
Test Case: 395 | Input/Output: [(72 6 42 76) 6]
Test Case: 396 | Input/Output: [(15 64 54 19) 15]
Test Case: 397 | Input/Output: [(64 96 99 90) 64]
Test Case: 398 | Input/Output: [(13 16 39 3) 3]
Test Case: 399 | Input/Output: [(64 1 40 40) 1]
Test Case: 400 | Input/Output: [(-95 -37 -55 3) -95]
Test Case: 401 | Input/Output: [(83 -65 -38 54) -65]
Test Case: 402 | Input/Output: [(90 13 -19 -81) -81]
Test Case: 403 | Input/Output: [(58 63 78 -15) -15]
Test Case: 404 | Input/Output: [(62 -58 63 15) -58]
Test Case: 405 | Input/Output: [(38 95 -93 6) -93]
Test Case: 406 | Input/Output: [(72 -91 40 95) -91]
Test Case: 407 | Input/Output: [(-94 53 -75 -90) -94]
Test Case: 408 | Input/Output: [(-91 -45 21 -59) -91]
Test Case: 409 | Input/Output: [(-64 -73 -47 -30) -73]
Test Case: 410 | Input/Output: [(-21 34 22 -10) -21]
Test Case: 411 | Input/Output: [(82 27 -79 -43) -79]
Test Case: 412 | Input/Output: [(-51 -88 20 -100) -100]
Test Case: 413 | Input/Output: [(45 -70 -92 54) -92]
Test Case: 414 | Input/Output: [(-22 -5 -19 -97) -97]
Test Case: 415 | Input/Output: [(72 6 -2 -7) -7]
Test Case: 416 | Input/Output: [(-2 80 -99 -18) -99]
Test Case: 417 | Input/Output: [(77 14 -72 -69) -72]
Test Case: 418 | Input/Output: [(100 53 21 -99) -99]
Test Case: 419 | Input/Output: [(-61 -2 45 -96) -96]
Test Case: 420 | Input/Output: [(-63 -76 -2 20) -76]
Test Case: 421 | Input/Output: [(-96 83 38 -31) -96]
Test Case: 422 | Input/Output: [(95 97 30 57) 30]
Test Case: 423 | Input/Output: [(37 -88 14 39) -88]
Test Case: 424 | Input/Output: [(3 -39 64 -61) -61]
Test Case: 425 | Input/Output: [(5 18 54 -10) -10]
Test Case: 426 | Input/Output: [(-41 -40 -40 -51) -51]
Test Case: 427 | Input/Output: [(55 -49 2 -72) -72]
Test Case: 428 | Input/Output: [(69 54 89 -56) -56]
Test Case: 429 | Input/Output: [(-23 94 -62 -12) -62]
Test Case: 430 | Input/Output: [(-74 3 -73 -31) -74]
Test Case: 431 | Input/Output: [(-49 13 43 91) -49]
Test Case: 432 | Input/Output: [(-28 -88 46 -81) -88]
Test Case: 433 | Input/Output: [(-58 -44 93 75) -58]
Test Case: 434 | Input/Output: [(42 15 74 19) 15]
Test Case: 435 | Input/Output: [(4 29 88 -56) -56]
Test Case: 436 | Input/Output: [(-30 58 96 -4) -30]
Test Case: 437 | Input/Output: [(-21 69 -64 -97) -97]
Test Case: 438 | Input/Output: [(82 64 20 -100) -100]
Test Case: 439 | Input/Output: [(25 51 -1 -64) -64]
Test Case: 440 | Input/Output: [(-88 -58 -26 -82) -88]
Test Case: 441 | Input/Output: [(-7 -7 1 -79) -79]
Test Case: 442 | Input/Output: [(-72 15 91 95) -72]
Test Case: 443 | Input/Output: [(30 33 77 -40) -40]
Test Case: 444 | Input/Output: [(34 77 43 8) 8]
Test Case: 445 | Input/Output: [(23 58 -52 -24) -52]
Test Case: 446 | Input/Output: [(8 -64 -91 -80) -91]
Test Case: 447 | Input/Output: [(80 -34 73 54) -34]
Test Case: 448 | Input/Output: [(88 54 72 49) 49]
Test Case: 449 | Input/Output: [(40 -3 -100 15) -100]
Test Case: 450 | Input/Output: [(4 -18 -35 85) -35]
Test Case: 451 | Input/Output: [(56 35 19 19) 19]
Test Case: 452 | Input/Output: [(-16 -54 -49 -20) -54]
Test Case: 453 | Input/Output: [(-66 4 -80 59) -80]
Test Case: 454 | Input/Output: [(40 93 -85 -87) -87]
Test Case: 455 | Input/Output: [(-80 -90 -55 65) -90]
Test Case: 456 | Input/Output: [(26 -49 -31 -84) -84]
Test Case: 457 | Input/Output: [(46 58 74 11) 11]
Test Case: 458 | Input/Output: [(0 26 80 -97) -97]
Test Case: 459 | Input/Output: [(-31 9 73 40) -31]
Test Case: 460 | Input/Output: [(10 89 29 99) 10]
Test Case: 461 | Input/Output: [(-23 -97 59 -69) -97]
Test Case: 462 | Input/Output: [(68 64 82 -93) -93]
Test Case: 463 | Input/Output: [(96 3 -48 26) -48]
Test Case: 464 | Input/Output: [(96 82 -92 -39) -92]
Test Case: 465 | Input/Output: [(80 37 28 29) 28]
Test Case: 466 | Input/Output: [(46 86 -27 -15) -27]
Test Case: 467 | Input/Output: [(22 -60 100 -38) -60]
Test Case: 468 | Input/Output: [(-33 40 32 73) -33]
Test Case: 469 | Input/Output: [(71 -3 -43 -50) -50]
Test Case: 470 | Input/Output: [(-45 17 -56 -45) -56]
Test Case: 471 | Input/Output: [(34 -42 43 -25) -42]
Test Case: 472 | Input/Output: [(-64 -12 -18 16) -64]
Test Case: 473 | Input/Output: [(96 52 -69 25) -69]
Test Case: 474 | Input/Output: [(-23 5 92 -73) -73]
Test Case: 475 | Input/Output: [(11 89 -90 -5) -90]
Test Case: 476 | Input/Output: [(-21 -72 -30 6) -72]
Test Case: 477 | Input/Output: [(26 -15 -68 -33) -68]
Test Case: 478 | Input/Output: [(-15 -7 4 -57) -57]
Test Case: 479 | Input/Output: [(-24 43 -71 96) -71]
Test Case: 480 | Input/Output: [(-52 -76 30 -55) -76]
Test Case: 481 | Input/Output: [(23 -10 10 55) -10]
Test Case: 482 | Input/Output: [(3 98 -81 -58) -81]
Test Case: 483 | Input/Output: [(17 8 -89 -52) -89]
Test Case: 484 | Input/Output: [(-42 52 42 -24) -42]
Test Case: 485 | Input/Output: [(76 -75 74 77) -75]
Test Case: 486 | Input/Output: [(-82 -83 -51 76) -83]
Test Case: 487 | Input/Output: [(23 -49 51 15) -49]
Test Case: 488 | Input/Output: [(25 5 39 60) 5]
Test Case: 489 | Input/Output: [(-11 -55 -20 94) -55]
Test Case: 490 | Input/Output: [(48 -34 17 -68) -68]
Test Case: 491 | Input/Output: [(-10 68 -43 63) -43]
Test Case: 492 | Input/Output: [(-40 -86 50 66) -86]
Test Case: 493 | Input/Output: [(8 -56 18 77) -56]
Test Case: 494 | Input/Output: [(33 -77 55 59) -77]
Test Case: 495 | Input/Output: [(-11 84 -9 -65) -65]
Test Case: 496 | Input/Output: [(72 -1 -96 87) -96]
Test Case: 497 | Input/Output: [(75 47 64 -60) -60]
Test Case: 498 | Input/Output: [(-32 56 30 -23) -32]
Test Case: 499 | Input/Output: [(-36 -5 -99 -48) -99]
Test Case: 500 | Input/Output: [(-46 56 -31 100) -46]
Test Case: 501 | Input/Output: [(-60 -89 74 -85) -89]
Test Case: 502 | Input/Output: [(-69 -41 89 -53) -69]
Test Case: 503 | Input/Output: [(-35 -27 -92 1) -92]
Test Case: 504 | Input/Output: [(-12 -62 30 -32) -62]
Test Case: 505 | Input/Output: [(-32 -43 -13 39) -43]
Test Case: 506 | Input/Output: [(72 -7 37 75) -7]
Test Case: 507 | Input/Output: [(-76 91 -58 -29) -76]
Test Case: 508 | Input/Output: [(81 60 -76 -51) -76]
Test Case: 509 | Input/Output: [(-91 23 -77 86) -91]
Test Case: 510 | Input/Output: [(37 -16 47 -81) -81]
Test Case: 511 | Input/Output: [(70 -33 -20 69) -33]
Test Case: 512 | Input/Output: [(-12 13 81 -33) -33]
Test Case: 513 | Input/Output: [(59 97 78 -97) -97]
Test Case: 514 | Input/Output: [(33 -66 18 10) -66]
Test Case: 515 | Input/Output: [(-98 -80 61 -75) -98]
Test Case: 516 | Input/Output: [(43 92 76 30) 30]
Test Case: 517 | Input/Output: [(-58 -79 -59 -68) -79]
Test Case: 518 | Input/Output: [(-11 36 -70 11) -70]
Test Case: 519 | Input/Output: [(-9 -75 -47 50) -75]
Test Case: 520 | Input/Output: [(45 10 59 81) 10]
Test Case: 521 | Input/Output: [(-95 84 -2 24) -95]
Test Case: 522 | Input/Output: [(81 -36 45 -26) -36]
Test Case: 523 | Input/Output: [(-48 -39 -5 51) -48]
Test Case: 524 | Input/Output: [(69 15 -58 -60) -60]
Test Case: 525 | Input/Output: [(66 64 31 -97) -97]
Test Case: 526 | Input/Output: [(-25 71 29 -67) -67]
Test Case: 527 | Input/Output: [(14 -18 -48 2) -48]
Test Case: 528 | Input/Output: [(-83 30 -77 -16) -83]
Test Case: 529 | Input/Output: [(-8 35 9 69) -8]
Test Case: 530 | Input/Output: [(-23 -45 53 66) -45]
Test Case: 531 | Input/Output: [(26 -10 -59 -88) -88]
Test Case: 532 | Input/Output: [(-59 91 -42 6) -59]
Test Case: 533 | Input/Output: [(68 55 -28 92) -28]
Test Case: 534 | Input/Output: [(-6 -28 -4 37) -28]
Test Case: 535 | Input/Output: [(46 -73 -10 73) -73]
Test Case: 536 | Input/Output: [(55 86 -10 36) -10]
Test Case: 537 | Input/Output: [(-82 87 85 -33) -82]
Test Case: 538 | Input/Output: [(43 -95 69 11) -95]
Test Case: 539 | Input/Output: [(1 100 -70 -92) -92]
Test Case: 540 | Input/Output: [(70 43 76 -66) -66]
Test Case: 541 | Input/Output: [(-91 63 -21 -23) -91]
Test Case: 542 | Input/Output: [(-20 -91 -1 12) -91]
Test Case: 543 | Input/Output: [(10 -67 87 -11) -67]
Test Case: 544 | Input/Output: [(-37 -91 -12 -92) -92]
Test Case: 545 | Input/Output: [(54 85 69 26) 26]
Test Case: 546 | Input/Output: [(52 82 -68 -97) -97]
Test Case: 547 | Input/Output: [(99 25 68 70) 25]
Test Case: 548 | Input/Output: [(-68 -61 -46 -25) -68]
Test Case: 549 | Input/Output: [(12 99 -10 64) -10]
Test Case: 550 | Input/Output: [(53 -47 -31 -78) -78]
Test Case: 551 | Input/Output: [(42 -28 27 85) -28]
Test Case: 552 | Input/Output: [(34 -38 -32 -28) -38]
Test Case: 553 | Input/Output: [(-53 -81 -90 21) -90]
Test Case: 554 | Input/Output: [(26 -73 83 -15) -73]
Test Case: 555 | Input/Output: [(3 100 -4 -82) -82]
Test Case: 556 | Input/Output: [(51 -74 -24 63) -74]
Test Case: 557 | Input/Output: [(30 -75 54 -92) -92]
Test Case: 558 | Input/Output: [(-52 -72 -2 9) -72]
Test Case: 559 | Input/Output: [(19 -98 -31 56) -98]
Test Case: 560 | Input/Output: [(14 -43 -93 -76) -93]
Test Case: 561 | Input/Output: [(-65 59 -52 35) -65]
Test Case: 562 | Input/Output: [(0 36 6 -77) -77]
Test Case: 563 | Input/Output: [(-72 -95 -8 24) -95]
Test Case: 564 | Input/Output: [(-52 -16 -56 13) -56]
Test Case: 565 | Input/Output: [(-86 44 -53 -84) -86]
Test Case: 566 | Input/Output: [(-50 -18 96 -33) -50]
Test Case: 567 | Input/Output: [(37 41 -36 56) -36]
Test Case: 568 | Input/Output: [(-36 -14 -7 29) -36]
Test Case: 569 | Input/Output: [(74 -28 -98 -51) -98]
Test Case: 570 | Input/Output: [(93 34 -63 -65) -65]
Test Case: 571 | Input/Output: [(-51 -32 74 -7) -51]
Test Case: 572 | Input/Output: [(46 5 52 -36) -36]
Test Case: 573 | Input/Output: [(40 69 -22 77) -22]
Test Case: 574 | Input/Output: [(8 -6 -89 93) -89]
Test Case: 575 | Input/Output: [(-81 -61 -57 -10) -81]
Test Case: 576 | Input/Output: [(-46 -51 3 -55) -55]
Test Case: 577 | Input/Output: [(91 -62 53 92) -62]
Test Case: 578 | Input/Output: [(23 -2 84 -87) -87]
Test Case: 579 | Input/Output: [(32 84 -58 -40) -58]
Test Case: 580 | Input/Output: [(47 48 61 49) 47]
Test Case: 581 | Input/Output: [(-27 10 -37 26) -37]
Test Case: 582 | Input/Output: [(63 -35 45 47) -35]
Test Case: 583 | Input/Output: [(-4 -52 15 44) -52]
Test Case: 584 | Input/Output: [(95 -55 -32 -96) -96]
Test Case: 585 | Input/Output: [(-77 -2 -49 19) -77]
Test Case: 586 | Input/Output: [(23 89 23 -89) -89]
Test Case: 587 | Input/Output: [(2 68 -18 99) -18]
Test Case: 588 | Input/Output: [(-98 -42 -27 13) -98]
Test Case: 589 | Input/Output: [(92 66 -15 49) -15]
Test Case: 590 | Input/Output: [(-72 67 37 52) -72]
Test Case: 591 | Input/Output: [(-28 -62 15 72) -62]
Test Case: 592 | Input/Output: [(49 76 27 44) 27]
Test Case: 593 | Input/Output: [(-65 -38 51 100) -65]
Test Case: 594 | Input/Output: [(67 88 -87 83) -87]
Test Case: 595 | Input/Output: [(64 51 -6 -50) -50]
Test Case: 596 | Input/Output: [(88 96 86 64) 64]
Test Case: 597 | Input/Output: [(49 -37 30 -94) -94]
Test Case: 598 | Input/Output: [(39 94 -72 -19) -72]
Test Case: 599 | Input/Output: [(83 -69 55 94) -69]
Test Case: 600 | Input/Output: [(-75 -97 -24 -41) -97]
Test Case: 601 | Input/Output: [(47 36 45 9) 9]
Test Case: 602 | Input/Output: [(-36 -97 -2 45) -97]
Test Case: 603 | Input/Output: [(-12 -63 -88 53) -88]
Test Case: 604 | Input/Output: [(-19 20 -7 -89) -89]
Test Case: 605 | Input/Output: [(-71 15 -50 2) -71]
Test Case: 606 | Input/Output: [(86 -97 -57 -86) -97]
Test Case: 607 | Input/Output: [(97 -49 -28 -3) -49]
Test Case: 608 | Input/Output: [(47 6 -17 27) -17]
Test Case: 609 | Input/Output: [(92 13 60 -87) -87]
Test Case: 610 | Input/Output: [(53 43 -42 60) -42]
Test Case: 611 | Input/Output: [(7 55 54 88) 7]
Test Case: 612 | Input/Output: [(-99 -23 -27 -94) -99]
Test Case: 613 | Input/Output: [(31 -47 -86 46) -86]
Test Case: 614 | Input/Output: [(-58 57 -7 -74) -74]
Test Case: 615 | Input/Output: [(-69 34 15 14) -69]
Test Case: 616 | Input/Output: [(-96 -86 -19 44) -96]
Test Case: 617 | Input/Output: [(100 98 61 -49) -49]
Test Case: 618 | Input/Output: [(79 8 80 21) 8]
Test Case: 619 | Input/Output: [(-62 0 37 -89) -89]
Test Case: 620 | Input/Output: [(15 -85 -29 87) -85]
Test Case: 621 | Input/Output: [(35 -61 49 25) -61]
Test Case: 622 | Input/Output: [(-84 -13 43 65) -84]
Test Case: 623 | Input/Output: [(-39 54 73 -15) -39]
Test Case: 624 | Input/Output: [(-10 -80 82 56) -80]
Test Case: 625 | Input/Output: [(-67 -53 -84 -21) -84]
Test Case: 626 | Input/Output: [(61 -5 58 -14) -14]
Test Case: 627 | Input/Output: [(-38 -56 0 29) -56]
Test Case: 628 | Input/Output: [(41 -50 -57 -46) -57]
Test Case: 629 | Input/Output: [(-69 -84 50 -82) -84]
Test Case: 630 | Input/Output: [(-51 -50 7 14) -51]
Test Case: 631 | Input/Output: [(-76 41 -36 38) -76]
Test Case: 632 | Input/Output: [(-65 -45 -47 56) -65]
Test Case: 633 | Input/Output: [(65 2 -28 -44) -44]
Test Case: 634 | Input/Output: [(-82 -15 -21 21) -82]
Test Case: 635 | Input/Output: [(92 -44 -55 -10) -55]
Test Case: 636 | Input/Output: [(-41 48 89 66) -41]
Test Case: 637 | Input/Output: [(27 51 -76 -60) -76]
Test Case: 638 | Input/Output: [(42 45 5 -14) -14]
Test Case: 639 | Input/Output: [(-95 59 52 -10) -95]
Test Case: 640 | Input/Output: [(-89 14 -86 -11) -89]
Test Case: 641 | Input/Output: [(54 -61 -52 55) -61]
Test Case: 642 | Input/Output: [(21 7 -87 40) -87]
Test Case: 643 | Input/Output: [(-10 -25 92 94) -25]
Test Case: 644 | Input/Output: [(75 62 -53 -4) -53]
Test Case: 645 | Input/Output: [(30 -40 -32 90) -40]
Test Case: 646 | Input/Output: [(-32 -41 -52 -5) -52]
Test Case: 647 | Input/Output: [(-55 24 -64 57) -64]
Test Case: 648 | Input/Output: [(53 74 -70 40) -70]
Test Case: 649 | Input/Output: [(64 -29 -53 19) -53]
Test Case: 650 | Input/Output: [(-73 -20 -23 96) -73]
Test Case: 651 | Input/Output: [(42 2 82 64) 2]
Test Case: 652 | Input/Output: [(12 64 -71 -54) -71]
Test Case: 653 | Input/Output: [(-32 -25 85 -87) -87]
Test Case: 654 | Input/Output: [(32 10 -86 68) -86]
Test Case: 655 | Input/Output: [(-11 -75 -71 -1) -75]
Test Case: 656 | Input/Output: [(99 -82 -62 21) -82]
Test Case: 657 | Input/Output: [(22 -21 -7 35) -21]
Test Case: 658 | Input/Output: [(60 -85 9 85) -85]
Test Case: 659 | Input/Output: [(83 32 -94 -63) -94]
Test Case: 660 | Input/Output: [(-14 83 -57 10) -57]
Test Case: 661 | Input/Output: [(21 -24 -22 19) -24]
Test Case: 662 | Input/Output: [(-86 69 -3 -80) -86]
Test Case: 663 | Input/Output: [(65 18 80 -66) -66]
Test Case: 664 | Input/Output: [(-4 50 -57 91) -57]
Test Case: 665 | Input/Output: [(-3 70 20 44) -3]
Test Case: 666 | Input/Output: [(65 20 -4 80) -4]
Test Case: 667 | Input/Output: [(-87 2 92 100) -87]
Test Case: 668 | Input/Output: [(-67 -98 -98 59) -98]
Test Case: 669 | Input/Output: [(-79 96 -19 -64) -79]
Test Case: 670 | Input/Output: [(-25 53 52 35) -25]
Test Case: 671 | Input/Output: [(-57 -9 -38 88) -57]
Test Case: 672 | Input/Output: [(76 -96 12 -60) -96]
Test Case: 673 | Input/Output: [(31 40 0 -23) -23]
Test Case: 674 | Input/Output: [(-57 74 93 70) -57]
Test Case: 675 | Input/Output: [(4 -31 62 65) -31]
Test Case: 676 | Input/Output: [(-60 -91 51 -12) -91]
Test Case: 677 | Input/Output: [(-72 83 33 2) -72]
Test Case: 678 | Input/Output: [(-50 5 28 -20) -50]
Test Case: 679 | Input/Output: [(36 78 70 96) 36]
Test Case: 680 | Input/Output: [(-28 20 -85 65) -85]
Test Case: 681 | Input/Output: [(-46 52 -89 99) -89]
Test Case: 682 | Input/Output: [(-59 -28 34 -8) -59]
Test Case: 683 | Input/Output: [(-37 36 33 -11) -37]
Test Case: 684 | Input/Output: [(66 9 87 7) 7]
Test Case: 685 | Input/Output: [(-100 -66 -83 -35) -100]
Test Case: 686 | Input/Output: [(22 -59 -95 -100) -100]
Test Case: 687 | Input/Output: [(97 -93 92 -76) -93]
Test Case: 688 | Input/Output: [(-2 37 38 -9) -9]
Test Case: 689 | Input/Output: [(-36 -83 63 8) -83]
Test Case: 690 | Input/Output: [(15 75 -69 -8) -69]
Test Case: 691 | Input/Output: [(-55 -37 -94 -1) -94]
Test Case: 692 | Input/Output: [(-85 98 -52 -85) -85]
Test Case: 693 | Input/Output: [(-46 -42 -33 -44) -46]
Test Case: 694 | Input/Output: [(-14 60 36 92) -14]
Test Case: 695 | Input/Output: [(-57 -1 -65 77) -65]
Test Case: 696 | Input/Output: [(33 -77 77 62) -77]
Test Case: 697 | Input/Output: [(-51 -21 -17 76) -51]
Test Case: 698 | Input/Output: [(-48 -100 -53 34) -100]
Test Case: 699 | Input/Output: [(65 72 78 -37) -37]
Test Case: 700 | Input/Output: [(-16 58 71 40) -16]
Test Case: 701 | Input/Output: [(-94 63 34 -86) -94]
Test Case: 702 | Input/Output: [(54 17 97 -43) -43]
Test Case: 703 | Input/Output: [(-47 55 -66 -4) -66]
Test Case: 704 | Input/Output: [(54 67 -59 76) -59]
Test Case: 705 | Input/Output: [(59 -23 -65 97) -65]
Test Case: 706 | Input/Output: [(92 -35 3 32) -35]
Test Case: 707 | Input/Output: [(-46 72 89 97) -46]
Test Case: 708 | Input/Output: [(-83 -18 70 61) -83]
Test Case: 709 | Input/Output: [(-18 37 62 34) -18]
Test Case: 710 | Input/Output: [(3 -72 -82 18) -82]
Test Case: 711 | Input/Output: [(29 36 17 85) 17]
Test Case: 712 | Input/Output: [(-20 -13 56 -47) -47]
Test Case: 713 | Input/Output: [(57 -31 -43 -30) -43]
Test Case: 714 | Input/Output: [(40 87 25 13) 13]
Test Case: 715 | Input/Output: [(-5 77 36 -65) -65]
Test Case: 716 | Input/Output: [(51 69 24 -47) -47]
Test Case: 717 | Input/Output: [(-20 -37 -67 30) -67]
Test Case: 718 | Input/Output: [(-54 -2 94 -72) -72]
Test Case: 719 | Input/Output: [(37 52 -32 82) -32]
Test Case: 720 | Input/Output: [(-81 54 -73 -88) -88]
Test Case: 721 | Input/Output: [(31 73 -88 96) -88]
Test Case: 722 | Input/Output: [(85 46 -50 28) -50]
Test Case: 723 | Input/Output: [(25 -21 96 -71) -71]
Test Case: 724 | Input/Output: [(-85 -49 69 -55) -85]
Test Case: 725 | Input/Output: [(-83 82 -35 -18) -83]
Test Case: 726 | Input/Output: [(56 -21 -55 -82) -82]
Test Case: 727 | Input/Output: [(76 15 36 35) 15]
Test Case: 728 | Input/Output: [(-84 -9 18 48) -84]
Test Case: 729 | Input/Output: [(-26 63 44 -98) -98]
Test Case: 730 | Input/Output: [(-73 63 -98 35) -98]
Test Case: 731 | Input/Output: [(-28 74 56 59) -28]
Test Case: 732 | Input/Output: [(16 -28 -55 13) -55]
Test Case: 733 | Input/Output: [(80 -39 -56 -59) -59]
Test Case: 734 | Input/Output: [(23 -84 67 -87) -87]
Test Case: 735 | Input/Output: [(9 37 20 -68) -68]
Test Case: 736 | Input/Output: [(-58 19 -51 -48) -58]
Test Case: 737 | Input/Output: [(8 -56 80 82) -56]
Test Case: 738 | Input/Output: [(-69 20 -70 -17) -70]
Test Case: 739 | Input/Output: [(76 50 -82 67) -82]
Test Case: 740 | Input/Output: [(-81 -4 -15 31) -81]
Test Case: 741 | Input/Output: [(-26 -5 -4 8) -26]
Test Case: 742 | Input/Output: [(-84 32 -99 -35) -99]
Test Case: 743 | Input/Output: [(-13 -86 -61 -88) -88]
Test Case: 744 | Input/Output: [(-6 -52 14 -78) -78]
Test Case: 745 | Input/Output: [(-8 78 -69 53) -69]
Test Case: 746 | Input/Output: [(34 48 50 73) 34]
Test Case: 747 | Input/Output: [(-100 99 45 -3) -100]
Test Case: 748 | Input/Output: [(-40 -44 89 44) -44]
Test Case: 749 | Input/Output: [(5 85 19 41) 5]
Test Case: 750 | Input/Output: [(13 77 -57 -74) -74]
Test Case: 751 | Input/Output: [(85 -32 80 89) -32]
Test Case: 752 | Input/Output: [(-37 84 12 -72) -72]
Test Case: 753 | Input/Output: [(-70 75 30 99) -70]
Test Case: 754 | Input/Output: [(96 -93 -21 -54) -93]
Test Case: 755 | Input/Output: [(84 -92 21 -54) -92]
Test Case: 756 | Input/Output: [(97 7 -87 85) -87]
Test Case: 757 | Input/Output: [(-70 -65 46 72) -70]
Test Case: 758 | Input/Output: [(63 70 -24 51) -24]
Test Case: 759 | Input/Output: [(-22 -7 61 66) -22]
Test Case: 760 | Input/Output: [(-51 -25 96 30) -51]
Test Case: 761 | Input/Output: [(-63 -25 85 18) -63]
Test Case: 762 | Input/Output: [(20 -25 -21 14) -25]
Test Case: 763 | Input/Output: [(-17 -4 5 -38) -38]
Test Case: 764 | Input/Output: [(77 53 45 52) 45]
Test Case: 765 | Input/Output: [(61 -46 65 -23) -46]
Test Case: 766 | Input/Output: [(-63 34 -19 45) -63]
Test Case: 767 | Input/Output: [(82 21 -66 -12) -66]
Test Case: 768 | Input/Output: [(2 15 -25 77) -25]
Test Case: 769 | Input/Output: [(27 -16 -54 -83) -83]
Test Case: 770 | Input/Output: [(66 84 73 -26) -26]
Test Case: 771 | Input/Output: [(76 -76 -23 7) -76]
Test Case: 772 | Input/Output: [(35 -52 64 51) -52]
Test Case: 773 | Input/Output: [(45 -73 43 46) -73]
Test Case: 774 | Input/Output: [(57 25 81 -59) -59]
Test Case: 775 | Input/Output: [(-45 92 -49 59) -49]
Test Case: 776 | Input/Output: [(87 89 69 -42) -42]
Test Case: 777 | Input/Output: [(-53 98 27 -43) -53]
Test Case: 778 | Input/Output: [(13 -53 -35 -72) -72]
Test Case: 779 | Input/Output: [(35 -80 65 86) -80]
Test Case: 780 | Input/Output: [(43 0 -4 -69) -69]
Test Case: 781 | Input/Output: [(-1 9 15 46) -1]
Test Case: 782 | Input/Output: [(29 -61 -7 12) -61]
Test Case: 783 | Input/Output: [(-2 56 6 -58) -58]
Test Case: 784 | Input/Output: [(-71 23 -93 -75) -93]
Test Case: 785 | Input/Output: [(19 16 37 92) 16]
Test Case: 786 | Input/Output: [(17 54 -70 66) -70]
Test Case: 787 | Input/Output: [(68 -40 -14 -12) -40]
Test Case: 788 | Input/Output: [(26 21 -23 4) -23]
Test Case: 789 | Input/Output: [(66 -82 -35 -64) -82]
Test Case: 790 | Input/Output: [(71 78 42 74) 42]
Test Case: 791 | Input/Output: [(38 -43 -25 -50) -50]
Test Case: 792 | Input/Output: [(-14 -46 -72 -89) -89]
Test Case: 793 | Input/Output: [(23 -59 -3 -34) -59]
Test Case: 794 | Input/Output: [(-45 22 10 77) -45]
Test Case: 795 | Input/Output: [(66 -88 -77 -80) -88]
Test Case: 796 | Input/Output: [(-97 -5 32 -86) -97]
Test Case: 797 | Input/Output: [(-49 -27 7 51) -49]
Test Case: 798 | Input/Output: [(-75 1 49 41) -75]
Test Case: 799 | Input/Output: [(31 36 -40 -84) -84]
Test Case: 800 | Input/Output: [(49 92 16 100) 16]
Test Case: 801 | Input/Output: [(35 68 -62 51) -62]
Test Case: 802 | Input/Output: [(-2 95 -3 28) -3]
Test Case: 803 | Input/Output: [(-90 97 -86 78) -90]
Test Case: 804 | Input/Output: [(-3 -13 -40 -45) -45]
Test Case: 805 | Input/Output: [(79 7 -9 94) -9]
Test Case: 806 | Input/Output: [(-96 29 42 99) -96]
Test Case: 807 | Input/Output: [(-92 -68 -54 21) -92]
Test Case: 808 | Input/Output: [(97 -18 -35 93) -35]
Test Case: 809 | Input/Output: [(20 -91 50 15) -91]
Test Case: 810 | Input/Output: [(12 -46 50 -2) -46]
Test Case: 811 | Input/Output: [(46 -95 -72 97) -95]
Test Case: 812 | Input/Output: [(-52 64 -31 -51) -52]
Test Case: 813 | Input/Output: [(15 50 1 67) 1]
Test Case: 814 | Input/Output: [(-52 -35 -21 -10) -52]
Test Case: 815 | Input/Output: [(91 -96 -80 86) -96]
Test Case: 816 | Input/Output: [(-91 -44 -31 65) -91]
Test Case: 817 | Input/Output: [(-27 39 -28 -16) -28]
Test Case: 818 | Input/Output: [(5 2 22 -37) -37]
Test Case: 819 | Input/Output: [(53 95 -17 -5) -17]
Test Case: 820 | Input/Output: [(-86 -47 54 -21) -86]
Test Case: 821 | Input/Output: [(-9 -74 -70 -42) -74]
Test Case: 822 | Input/Output: [(18 1 -26 52) -26]
Test Case: 823 | Input/Output: [(-34 -4 -21 -6) -34]
Test Case: 824 | Input/Output: [(84 -24 42 4) -24]
Test Case: 825 | Input/Output: [(80 44 -23 52) -23]
Test Case: 826 | Input/Output: [(84 -39 -29 39) -39]
Test Case: 827 | Input/Output: [(59 -25 93 49) -25]
Test Case: 828 | Input/Output: [(-81 39 -53 30) -81]
Test Case: 829 | Input/Output: [(-98 -84 -90 -9) -98]
Test Case: 830 | Input/Output: [(25 -1 6 90) -1]
Test Case: 831 | Input/Output: [(21 12 -32 -61) -61]
Test Case: 832 | Input/Output: [(-13 25 -17 82) -17]
Test Case: 833 | Input/Output: [(-87 46 -51 92) -87]
Test Case: 834 | Input/Output: [(42 66 19 -12) -12]
Test Case: 835 | Input/Output: [(30 70 28 -28) -28]
Test Case: 836 | Input/Output: [(20 -62 -55 84) -62]
Test Case: 837 | Input/Output: [(18 -20 -66 -69) -69]
Test Case: 838 | Input/Output: [(-60 54 -2 45) -60]
Test Case: 839 | Input/Output: [(-43 43 -28 -75) -75]
Test Case: 840 | Input/Output: [(-70 43 37 -81) -81]
Test Case: 841 | Input/Output: [(45 80 23 -3) -3]
Test Case: 842 | Input/Output: [(32 -12 77 -75) -75]
Test Case: 843 | Input/Output: [(91 93 -66 -78) -78]
Test Case: 844 | Input/Output: [(-21 -46 -63 -32) -63]
Test Case: 845 | Input/Output: [(-100 -22 -45 71) -100]
Test Case: 846 | Input/Output: [(8 57 -4 -82) -82]
Test Case: 847 | Input/Output: [(-80 -42 -47 -23) -80]
Test Case: 848 | Input/Output: [(-53 53 34 83) -53]
Test Case: 849 | Input/Output: [(78 42 -43 -94) -94]
Test Case: 850 | Input/Output: [(42 94 30 -16) -16]
Test Case: 851 | Input/Output: [(38 58 -72 50) -72]
Test Case: 852 | Input/Output: [(-98 18 57 -79) -98]
Test Case: 853 | Input/Output: [(92 89 28 47) 28]
Test Case: 854 | Input/Output: [(-80 60 50 -73) -80]
Test Case: 855 | Input/Output: [(85 -63 -63 84) -63]
Test Case: 856 | Input/Output: [(24 39 86 -15) -15]
Test Case: 857 | Input/Output: [(86 -46 -39 -82) -82]
Test Case: 858 | Input/Output: [(65 -44 60 62) -44]
Test Case: 859 | Input/Output: [(-79 -81 22 36) -81]
Test Case: 860 | Input/Output: [(-20 -7 -49 -32) -49]
Test Case: 861 | Input/Output: [(-33 92 0 31) -33]
Test Case: 862 | Input/Output: [(-73 -3 -67 99) -73]
Test Case: 863 | Input/Output: [(-55 -4 67 94) -55]
Test Case: 864 | Input/Output: [(-8 -4 27 -41) -41]
Test Case: 865 | Input/Output: [(-36 13 -52 60) -52]
Test Case: 866 | Input/Output: [(-48 -69 30 2) -69]
Test Case: 867 | Input/Output: [(34 -46 -71 66) -71]
Test Case: 868 | Input/Output: [(-59 6 60 51) -59]
Test Case: 869 | Input/Output: [(24 19 91 97) 19]
Test Case: 870 | Input/Output: [(79 39 -75 4) -75]
Test Case: 871 | Input/Output: [(-19 12 -62 -6) -62]
Test Case: 872 | Input/Output: [(-72 -60 -84 -53) -84]
Test Case: 873 | Input/Output: [(53 76 18 10) 10]
Test Case: 874 | Input/Output: [(-85 -78 40 -94) -94]
Test Case: 875 | Input/Output: [(80 -21 -94 -87) -94]
Test Case: 876 | Input/Output: [(-74 -7 72 96) -74]
Test Case: 877 | Input/Output: [(-44 91 65 -43) -44]
Test Case: 878 | Input/Output: [(-29 -71 -35 54) -71]
Test Case: 879 | Input/Output: [(-8 40 -55 52) -55]
Test Case: 880 | Input/Output: [(26 -22 -100 -20) -100]
Test Case: 881 | Input/Output: [(-15 -11 -55 -15) -55]
Test Case: 882 | Input/Output: [(-71 59 100 -20) -71]
Test Case: 883 | Input/Output: [(-37 -94 68 -68) -94]
Test Case: 884 | Input/Output: [(70 -64 9 18) -64]
Test Case: 885 | Input/Output: [(39 -2 -14 -66) -66]
Test Case: 886 | Input/Output: [(50 80 -100 14) -100]
Test Case: 887 | Input/Output: [(36 60 53 53) 36]
Test Case: 888 | Input/Output: [(9 -40 48 -4) -40]
Test Case: 889 | Input/Output: [(59 -28 49 -24) -28]
Test Case: 890 | Input/Output: [(40 -81 97 -97) -97]
Test Case: 891 | Input/Output: [(55 77 20 91) 20]
Test Case: 892 | Input/Output: [(1 55 59 69) 1]
Test Case: 893 | Input/Output: [(29 13 -21 -10) -21]
Test Case: 894 | Input/Output: [(73 30 -46 48) -46]
Test Case: 895 | Input/Output: [(50 -45 61 -52) -52]
Test Case: 896 | Input/Output: [(-48 -5 23 -73) -73]
Test Case: 897 | Input/Output: [(71 35 49 -19) -19]
Test Case: 898 | Input/Output: [(17 -85 39 -71) -85]
Test Case: 899 | Input/Output: [(36 -73 43 76) -73]
Test Case: 900 | Input/Output: [(77 -15 51 38) -15]
Test Case: 901 | Input/Output: [(-36 6 62 -79) -79]
Test Case: 902 | Input/Output: [(-30 -62 90 16) -62]
Test Case: 903 | Input/Output: [(60 -77 -82 -89) -89]
Test Case: 904 | Input/Output: [(-74 -37 67 0) -74]
Test Case: 905 | Input/Output: [(-73 -59 67 -34) -73]
Test Case: 906 | Input/Output: [(32 -35 14 -81) -81]
Test Case: 907 | Input/Output: [(-90 13 89 -81) -90]
Test Case: 908 | Input/Output: [(21 -91 98 36) -91]
Test Case: 909 | Input/Output: [(-86 -70 -74 -43) -86]
Test Case: 910 | Input/Output: [(-71 44 -69 84) -71]
Test Case: 911 | Input/Output: [(74 -40 -19 -80) -80]
Test Case: 912 | Input/Output: [(97 21 51 9) 9]
Test Case: 913 | Input/Output: [(38 11 -4 -33) -33]
Test Case: 914 | Input/Output: [(26 -76 14 -86) -86]
Test Case: 915 | Input/Output: [(-48 93 50 23) -48]
Test Case: 916 | Input/Output: [(76 33 -13 -19) -19]
Test Case: 917 | Input/Output: [(-31 -38 62 -51) -51]
Test Case: 918 | Input/Output: [(8 16 -54 91) -54]
Test Case: 919 | Input/Output: [(-88 -92 -87 -76) -92]
Test Case: 920 | Input/Output: [(84 59 -1 -86) -86]
Test Case: 921 | Input/Output: [(-58 -5 15 -12) -58]
Test Case: 922 | Input/Output: [(-94 38 8 48) -94]
Test Case: 923 | Input/Output: [(69 36 -58 -35) -58]
Test Case: 924 | Input/Output: [(48 -51 20 -59) -59]
Test Case: 925 | Input/Output: [(-12 -44 -54 35) -54]
Test Case: 926 | Input/Output: [(7 -52 85 81) -52]
Test Case: 927 | Input/Output: [(94 -64 -74 -39) -74]
Test Case: 928 | Input/Output: [(-61 -93 -7 -2) -93]
Test Case: 929 | Input/Output: [(34 -32 -36 17) -36]
Test Case: 930 | Input/Output: [(-34 -100 -15 -49) -100]
Test Case: 931 | Input/Output: [(-41 87 38 7) -41]
Test Case: 932 | Input/Output: [(-49 98 2 -59) -59]
Test Case: 933 | Input/Output: [(8 54 -34 55) -34]
Test Case: 934 | Input/Output: [(-76 40 54 -60) -76]
Test Case: 935 | Input/Output: [(-65 -21 -37 -48) -65]
Test Case: 936 | Input/Output: [(-25 1 -85 -39) -85]
Test Case: 937 | Input/Output: [(-21 -83 -34 -40) -83]
Test Case: 938 | Input/Output: [(0 -37 77 44) -37]
Test Case: 939 | Input/Output: [(74 41 -80 -34) -80]
Test Case: 940 | Input/Output: [(-49 17 -17 35) -49]
Test Case: 941 | Input/Output: [(16 -91 32 26) -91]
Test Case: 942 | Input/Output: [(-18 14 -48 62) -48]
Test Case: 943 | Input/Output: [(78 -53 85 78) -53]
Test Case: 944 | Input/Output: [(-67 89 -51 -46) -67]
Test Case: 945 | Input/Output: [(73 50 56 29) 29]
Test Case: 946 | Input/Output: [(-83 53 -79 -85) -85]
Test Case: 947 | Input/Output: [(-48 53 -97 6) -97]
Test Case: 948 | Input/Output: [(-44 -83 -25 -50) -83]
Test Case: 949 | Input/Output: [(-29 -98 -94 23) -98]
Test Case: 950 | Input/Output: [(7 -17 7 -25) -25]
Test Case: 951 | Input/Output: [(22 88 -9 40) -9]
Test Case: 952 | Input/Output: [(72 5 88 45) 5]
Test Case: 953 | Input/Output: [(26 61 -38 -72) -72]
Test Case: 954 | Input/Output: [(-24 -56 -57 -51) -57]
Test Case: 955 | Input/Output: [(-32 -78 80 81) -78]
Test Case: 956 | Input/Output: [(79 41 73 -30) -30]
Test Case: 957 | Input/Output: [(21 -23 97 2) -23]
Test Case: 958 | Input/Output: [(-36 -35 42 -76) -76]
Test Case: 959 | Input/Output: [(58 45 57 -88) -88]
Test Case: 960 | Input/Output: [(5 98 46 -85) -85]
Test Case: 961 | Input/Output: [(-36 -18 49 31) -36]
Test Case: 962 | Input/Output: [(82 77 67 -93) -93]
Test Case: 963 | Input/Output: [(52 -57 59 97) -57]
Test Case: 964 | Input/Output: [(39 -54 -82 70) -82]
Test Case: 965 | Input/Output: [(92 33 -46 17) -46]
Test Case: 966 | Input/Output: [(32 -2 -16 74) -16]
Test Case: 967 | Input/Output: [(-88 61 -32 -96) -96]
Test Case: 968 | Input/Output: [(-43 4 -8 -34) -43]
Test Case: 969 | Input/Output: [(63 -64 63 19) -64]
Test Case: 970 | Input/Output: [(-70 -98 -58 25) -98]
Test Case: 971 | Input/Output: [(-20 -40 -28 -96) -96]
Test Case: 972 | Input/Output: [(59 -53 58 -8) -53]
Test Case: 973 | Input/Output: [(63 6 8 5) 5]
Test Case: 974 | Input/Output: [(-46 83 -68 22) -68]
Test Case: 975 | Input/Output: [(-20 -13 88 87) -20]
Test Case: 976 | Input/Output: [(58 9 65 -66) -66]
Test Case: 977 | Input/Output: [(-77 63 -3 -50) -77]
Test Case: 978 | Input/Output: [(21 50 -46 68) -46]
Test Case: 979 | Input/Output: [(20 -66 -55 90) -66]
Test Case: 980 | Input/Output: [(-12 60 97 -21) -21]
Test Case: 981 | Input/Output: [(29 100 -26 -30) -30]
Test Case: 982 | Input/Output: [(-24 -73 -34 -83) -83]
Test Case: 983 | Input/Output: [(-15 -64 75 3) -64]
Test Case: 984 | Input/Output: [(-1 22 75 -88) -88]
Test Case: 985 | Input/Output: [(-10 -96 -49 -66) -96]
Test Case: 986 | Input/Output: [(60 -53 10 23) -53]
Test Case: 987 | Input/Output: [(-96 -58 59 57) -96]
Test Case: 988 | Input/Output: [(88 -93 -47 -97) -97]
Test Case: 989 | Input/Output: [(-51 24 -50 29) -51]
Test Case: 990 | Input/Output: [(-98 -92 16 69) -98]
Test Case: 991 | Input/Output: [(-60 57 -74 42) -74]
Test Case: 992 | Input/Output: [(-82 -91 -14 -2) -91]
Test Case: 993 | Input/Output: [(56 8 95 19) 8]
Test Case: 994 | Input/Output: [(-38 7 -89 -76) -89]
Test Case: 995 | Input/Output: [(47 62 98 39) 39]
Test Case: 996 | Input/Output: [(-54 64 85 23) -54]
Test Case: 997 | Input/Output: [(-53 55 17 18) -53]
Test Case: 998 | Input/Output: [(94 84 -58 67) -58]
Test Case: 999 | Input/Output: [(93 100 33 -83) -83]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 40 -26 -108 22 29 14 58 -33 40 -120 -1 -95 60 10 19 -78
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-84 -54 -84 -84] -84] [[-15 24 24 24] -15] [[37 -44 37 37] -44] [[-50 31 31 31] -50] [[34 34 -76 34] -76] [[-90 73 -90 -90] -90] [[-83 56 56 56] -83] [[-35 -35 -35 -42] -42] [[63 -11 -11 -11] -11] [[-37 -37 -37 -98] -98] [(-36 -36 -36 -36) -36] [(7 7 7 7) 7] [(92 92 92 92) 92] [(85 85 85 85) 85] [(28 28 28 28) 28] [(57 92 74 93) 57] [(12 52 59 95) 12] [(39 37 93 78) 37] [(15 63 82 82) 15] [(29 40 84 16) 16] [(45 79 77 96) 45] [(64 87 28 49) 28] [(2 16 98 8) 2] [(73 65 96 90) 65] [(51 100 7 71) 7] [(8 71 10 32) 8] [(91 93 65 4) 4] [(35 93 56 4) 4] [(39 43 14 55) 14] [(10 70 4 46) 4] [(29 94 28 61) 28] [(58 27 32 86) 27] [(26 43 87 40) 26] [(56 10 55 22) 10] [(39 83 66 76) 39] [(-6 37 -48 -37) -48] [(55 44 83 49) 44] [(86 54 -87 -97) -97] [(23 -10 35 -8) -10] [(-17 34 58 41) -17] [(-93 65 17 -66) -93] [(8 -72 -85 -89) -89] [(-13 -45 55 -72) -72] [(22 83 -64 -34) -64] [(-2 94 64 -54) -54] [(-86 -84 100 69) -86] [(33 -90 85 -78) -90] [(42 -81 -73 14) -81] [(-3 14 25 -71) -71] [(-57 -72 51 24) -72] [(-25 -4 -47 -83) -83] [(40 78 -77 15) -77] [(-98 -4 -41 -89) -98] [(44 58 40 22) 22] [(25 -44 -44 37) -44] [(-56 -83 -20 -46) -83] [(23 91 76 -27) -27] [(58 94 80 -73) -73] [(-33 -9 -36 2) -36] [(52 -76 16 -62) -76] [(-85 -39 -87 7) -87] [(56 15 40 -71) -71] [(-39 -77 -66 71) -77] [(26 -73 -96 45) -96] [(-77 -42 49 -65) -77] [(12 -48 -58 -14) -58] [(-39 18 42 54) -39] [(-59 42 40 2) -59] [(62 -14 22 -90) -90] [(13 -99 20 61) -99] [(-28 -89 79 63) -89] [(-13 -78 65 -63) -78] [(-91 57 -82 -24) -91] [(-59 58 56 12) -59] [(-67 80 -91 53) -91] [(-35 39 71 71) -35] [(30 -64 -23 65) -64] [(-82 68 20 42) -82] [(-59 -41 -91 61) -91] [(-20 -48 74 -46) -48] [(71 98 -22 -74) -74] [(-58 51 -68 98) -68] [(24 86 94 21) 21] [(5 72 -86 -74) -86] [(-38 93 0 78) -38] [(-70 0 80 -97) -97] [(41 -10 -6 21) -10] [(-91 91 -55 -52) -91] [(56 8 88 -45) -45] [(19 -41 -70 99) -70] [(-24 41 16 -27) -27] [(24 19 37 9) 9] [(-39 -31 -10 81) -39] [(58 98 -81 79) -81] [(-63 -8 4 84) -63])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -54                
Correct output: -15                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: 31                 
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: 73                 
Correct output: -83                 | Program output: 56                 
Correct output: -42                 | Program output: -35                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 92                 
Correct output: 12                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: 15                  | Program output: 63                 
Correct output: 16                  | Program output: 40                 
Correct output: 45                  | Program output: 79                 
Correct output: 28                  | Program output: 87                 
Correct output: 2                   | Program output: 16                 
Correct output: 65                  | Program output: 65                 
Correct output: 7                   | Program output: 100                
Correct output: 8                   | Program output: 71                 
Correct output: 4                   | Program output: 93                 
Correct output: 4                   | Program output: 93                 
Correct output: 14                  | Program output: 43                 
Correct output: 4                   | Program output: 70                 
Correct output: 28                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 43                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 83                 
Correct output: -48                 | Program output: 37                 
Correct output: 44                  | Program output: 44                 
Correct output: -97                 | Program output: 54                 
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 34                 
Correct output: -93                 | Program output: 65                 
Correct output: -89                 | Program output: -72                
Correct output: -72                 | Program output: -45                
Correct output: -64                 | Program output: 83                 
Correct output: -54                 | Program output: 94                 
Correct output: -86                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 14                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -4                 
Correct output: -77                 | Program output: 78                 
Correct output: -98                 | Program output: -4                 
Correct output: 22                  | Program output: 58                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: 91                 
Correct output: -73                 | Program output: 94                 
Correct output: -36                 | Program output: -9                 
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -39                
Correct output: -71                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -73                
Correct output: -77                 | Program output: -42                
Correct output: -58                 | Program output: -48                
Correct output: -39                 | Program output: 18                 
Correct output: -59                 | Program output: 42                 
Correct output: -90                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 57                 
Correct output: -59                 | Program output: 58                 
Correct output: -91                 | Program output: 80                 
Correct output: -35                 | Program output: 39                 
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: 68                 
Correct output: -91                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 98                 
Correct output: -68                 | Program output: 51                 
Correct output: 21                  | Program output: 86                 
Correct output: -86                 | Program output: 72                 
Correct output: -38                 | Program output: 93                 
Correct output: -97                 | Program output: 0                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: 91                 
Correct output: -45                 | Program output: 8                  
Correct output: -70                 | Program output: -41                
Correct output: -27                 | Program output: 41                 
Correct output: 9                   | Program output: 19                 
Correct output: -39                 | Program output: -31                
Correct output: -81                 | Program output: 98                 
Correct output: -63                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_dup () in2 exec_yankdup exec_yank exec_do*range () integer_inc boolean_dup_items exec_dup_times (exec_swap () (in2 integer_lt boolean_swap) integer_mod integer_add boolean_eq) in2 print_integer boolean_pop in3 in4 boolean_eq integer_swap in2 exec_do*count (boolean_rot))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_dup () in2 exec_yankdup exec_yank exec_do*range () integer_inc boolean_dup_items exec_dup_times (exec_swap () (in2 integer_lt boolean_swap) integer_mod integer_add boolean_eq) in2 print_integer boolean_pop in3 in4 boolean_eq integer_swap in2 exec_do*count (boolean_rot))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1 3 1 2 4 3 3 2 3)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (2 1 3 1 2 4 3 3 2 3)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove})
Best program: (boolean_eq exec_noop integer_max exec_y_when_autoconstructing (boolean_eq boolean_and boolean_dup_times in2) exec_y_when_autoconstructing (print_integer integer_flush exec_pop () integer_mult boolean_yankdup exec_dup (integer_shove)))
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 9.976
Median total errors in population: 10
Error averages by case: (0.998 0.999 0.997 0.999 0.998 0.996 0.997 0.997 0.998 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.172
Average program size in population (points): 67.774
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 485670
--- Timings ---
Current time: 1559593878564 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.7 seconds, 27.4%
Fitness Testing:      1.9 seconds, 69.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -54                
Correct output: -15                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: 31                 
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: 73                 
Correct output: -83                 | Program output: 56                 
Correct output: -42                 | Program output: -35                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output:                    
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 92                 
Correct output: 12                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: 15                  | Program output: 63                 
Correct output: 16                  | Program output: 40                 
Correct output: 45                  | Program output: 79                 
Correct output: 28                  | Program output: 87                 
Correct output: 2                   | Program output: 16                 
Correct output: 65                  | Program output: 65                 
Correct output: 7                   | Program output: 100                
Correct output: 8                   | Program output: 71                 
Correct output: 4                   | Program output: 93                 
Correct output: 4                   | Program output: 93                 
Correct output: 14                  | Program output: 43                 
Correct output: 4                   | Program output: 70                 
Correct output: 28                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 43                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 83                 
Correct output: -48                 | Program output: 37                 
Correct output: 44                  | Program output: 44                 
Correct output: -97                 | Program output: 54                 
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 34                 
Correct output: -93                 | Program output: 65                 
Correct output: -89                 | Program output: -72                
Correct output: -72                 | Program output: -45                
Correct output: -64                 | Program output: 83                 
Correct output: -54                 | Program output: 94                 
Correct output: -86                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 14                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -4                 
Correct output: -77                 | Program output: 78                 
Correct output: -98                 | Program output: -4                 
Correct output: 22                  | Program output: 58                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: 91                 
Correct output: -73                 | Program output: 94                 
Correct output: -36                 | Program output: -9                 
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -39                
Correct output: -71                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -73                
Correct output: -77                 | Program output: -42                
Correct output: -58                 | Program output: -48                
Correct output: -39                 | Program output: 18                 
Correct output: -59                 | Program output: 42                 
Correct output: -90                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 57                 
Correct output: -59                 | Program output: 58                 
Correct output: -91                 | Program output: 80                 
Correct output: -35                 | Program output: 39                 
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: 68                 
Correct output: -91                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 98                 
Correct output: -68                 | Program output: 51                 
Correct output: 21                  | Program output: 86                 
Correct output: -86                 | Program output: 72                 
Correct output: -38                 | Program output: 93                 
Correct output: -97                 | Program output: 0                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: 91                 
Correct output: -45                 | Program output: 8                  
Correct output: -70                 | Program output: -41                
Correct output: -27                 | Program output: 41                 
Correct output: 9                   | Program output: 19                 
Correct output: -39                 | Program output: -31                
Correct output: -81                 | Program output: 98                 
Correct output: -63                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_dup () in2 exec_yankdup exec_yank exec_do*range () boolean_dup_items exec_dup_times (exec_swap () (in2 integer_lt boolean_swap) integer_mod integer_add boolean_eq) in2 print_integer in3 in4 boolean_eq integer_swap in2 exec_do*count (boolean_rot))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_dup () in2 exec_yankdup exec_yank exec_do*range () boolean_dup_items exec_dup_times (exec_swap () (in2 integer_lt boolean_swap) integer_mod integer_add boolean_eq) in2 print_integer in3 in4 boolean_eq integer_swap in2 exec_do*count (boolean_rot))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 688 1 177 172 138 374 177 354 374)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (374 688 1 177 172 138 374 177 354 374)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count})
Best program: (exec_dup () in2 exec_yankdup exec_yank exec_do*range () integer_inc boolean_dup_items exec_dup_times (exec_swap () (in2 integer_lt boolean_swap) integer_mod integer_flush integer_add boolean_eq) in2 print_integer in3 boolean_eq integer_swap exec_do*count ())
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.171
Median total errors in population: 6
Error averages by case: (0.626 0.312 0.999 0.823 0.828 0.862 0.626 0.823 0.646 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.243
Average program size in population (points): 55.484
Average percent parens in population: 0.248
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1036867
--- Timings ---
Current time: 1559593880696 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         1.8 seconds, 37.3%
Fitness Testing:      2.6 seconds, 53.7%
Report:               0.3 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -35                
Correct output: -11                 | Program output: 63                 
Correct output: -98                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 29                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 73                 
Correct output: 7                   | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 91                 
Correct output: 4                   | Program output: 35                 
Correct output: 14                  | Program output: 39                 
Correct output: 4                   | Program output: 10                 
Correct output: 28                  | Program output: 29                 
Correct output: 27                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -6                 
Correct output: 44                  | Program output: 55                 
Correct output: -97                 | Program output: 86                 
Correct output: -10                 | Program output: 23                 
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 8                  
Correct output: -72                 | Program output: -13                
Correct output: -64                 | Program output: 22                 
Correct output: -54                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 33                 
Correct output: -81                 | Program output: 42                 
Correct output: -71                 | Program output: -3                 
Correct output: -72                 | Program output: -57                
Correct output: -83                 | Program output: -25                
Correct output: -77                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 44                 
Correct output: -44                 | Program output: 25                 
Correct output: -83                 | Program output: -56                
Correct output: -27                 | Program output: 23                 
Correct output: -73                 | Program output: 58                 
Correct output: -36                 | Program output: -33                
Correct output: -76                 | Program output: 52                 
Correct output: -87                 | Program output: -85                
Correct output: -71                 | Program output: 56                 
Correct output: -77                 | Program output: -39                
Correct output: -96                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 12                 
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: 62                 
Correct output: -99                 | Program output: 13                 
Correct output: -89                 | Program output: -28                
Correct output: -78                 | Program output: -13                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -67                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: 30                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -48                 | Program output: -20                
Correct output: -74                 | Program output: 71                 
Correct output: -68                 | Program output: -58                
Correct output: 21                  | Program output: 24                 
Correct output: -86                 | Program output: 5                  
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -70                
Correct output: -10                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: 56                 
Correct output: -70                 | Program output: 19                 
Correct output: -27                 | Program output: -24                
Correct output: 9                   | Program output: 24                 
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: 58                 
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc exec_do*while (exec_do*count (boolean_pop integer_flush) boolean_pop boolean_flush) exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in1 print_boolean boolean_and print_integer) exec_noop exec_eq exec_noop -82 boolean_swap exec_yank boolean_invert_first_then_and boolean_swap integer_shove boolean_frominteger exec_yank integer_dup_times in2 integer_flush exec_when () boolean_and boolean_xor exec_yank integer_yankdup integer_lt exec_s_when_autoconstructing (integer_inc exec_if (exec_empty exec_dup_times (boolean_invert_second_then_and 89) exec_when (in3) integer_dup_items tagged_936 integer_min) () -15 exec_y_when_autoconstructing (integer_rot) boolean_xor integer_dup) (integer_dup_items) (exec_y (boolean_yank)) integer_stackdepth exec_empty integer_div integer_dup exec_while (exec_do*count (boolean_or integer_pop exec_rot (integer_min) () ())))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc exec_do*while (exec_do*count (boolean_pop integer_flush) boolean_pop boolean_flush) exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in1 print_boolean boolean_and print_integer) exec_noop exec_eq exec_noop -82 boolean_swap exec_yank boolean_invert_first_then_and boolean_swap integer_shove boolean_frominteger exec_yank integer_dup_times in2 integer_flush exec_when () boolean_and boolean_xor exec_yank integer_yankdup integer_lt exec_s_when_autoconstructing (integer_inc exec_if (exec_empty exec_dup_times (boolean_invert_second_then_and 89) exec_when (in3) integer_dup_items tagged_936 integer_min) () -15 exec_y_when_autoconstructing (integer_rot) boolean_xor integer_dup) (integer_dup_items) (exec_y (boolean_yank)) integer_stackdepth exec_empty integer_div integer_dup exec_while (exec_do*count (boolean_or integer_pop exec_rot (integer_min) () ())))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 73 317 86 74 315 73 73 195 316)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (73 73 317 86 74 315 73 73 195 316)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction integer_gt} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min})
Best program: (exec_do*while (exec_do*count (boolean_pop boolean_pop boolean_flush)) exec_stackdepth in1 print_boolean print_integer exec_noop exec_eq exec_noop -82 boolean_yankdup boolean_yank boolean_swap boolean_swap boolean_frominteger integer_dup_times in2 integer_flush integer_dup exec_when () boolean_and boolean_xor integer_lt exec_if (exec_empty exec_do*times (boolean_invert_second_then_and 89) integer_fromboolean exec_s_when_autoconstructing (boolean_shove) (exec_when (exec_pop (integer_dup_items tagged_936 integer_min)) integer_empty -15 exec_y_when_autoconstructing (integer_rot) boolean_xor exec_eq boolean_flush integer_dup) (integer_dup_items) exec_y (integer_gt)) (boolean_yank) exec_empty integer_div integer_dup exec_while (exec_do*count (integer_mod boolean_or integer_dec exec_rot (integer_min) () ())))
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 80
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 8.405
Median total errors in population: 9
Error averages by case: (0.927 0.927 0.683 0.914 0.926 0.685 0.927 0.927 0.805 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.393
Average program size in population (points): 60.552
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1706856
--- Timings ---
Current time: 1559593882935 milliseconds
Total Time:           7.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 42.1%
Fitness Testing:      3.3 seconds, 46.6%
Report:               0.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -35                
Correct output: -11                 | Program output: 63                 
Correct output: -98                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 29                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 64                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 73                 
Correct output: 7                   | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 91                 
Correct output: 4                   | Program output: 35                 
Correct output: 14                  | Program output: 39                 
Correct output: 4                   | Program output: 10                 
Correct output: 28                  | Program output: 29                 
Correct output: 27                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 56                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -6                 
Correct output: 44                  | Program output: 55                 
Correct output: -97                 | Program output: 86                 
Correct output: -10                 | Program output: 23                 
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 8                  
Correct output: -72                 | Program output: -13                
Correct output: -64                 | Program output: 22                 
Correct output: -54                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 33                 
Correct output: -81                 | Program output: 42                 
Correct output: -71                 | Program output: -3                 
Correct output: -72                 | Program output: -57                
Correct output: -83                 | Program output: -25                
Correct output: -77                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 44                 
Correct output: -44                 | Program output: 25                 
Correct output: -83                 | Program output: -56                
Correct output: -27                 | Program output: 23                 
Correct output: -73                 | Program output: 58                 
Correct output: -36                 | Program output: -33                
Correct output: -76                 | Program output: 52                 
Correct output: -87                 | Program output: -85                
Correct output: -71                 | Program output: 56                 
Correct output: -77                 | Program output: -39                
Correct output: -96                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: 12                 
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: 62                 
Correct output: -99                 | Program output: 13                 
Correct output: -89                 | Program output: -28                
Correct output: -78                 | Program output: -13                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -67                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: 30                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -48                 | Program output: -20                
Correct output: -74                 | Program output: 71                 
Correct output: -68                 | Program output: -58                
Correct output: 21                  | Program output: 24                 
Correct output: -86                 | Program output: 5                  
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -70                
Correct output: -10                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: 56                 
Correct output: -70                 | Program output: 19                 
Correct output: -27                 | Program output: -24                
Correct output: 9                   | Program output: 24                 
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: 58                 
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc exec_do*count (integer_flush) integer_flush boolean_flush exec_stackdepth boolean_swap in1 print_boolean print_integer boolean_yank exec_noop exec_eq exec_noop boolean_swap boolean_frominteger integer_dup_times in2 integer_flush exec_shove (exec_when () boolean_and boolean_xor exec_yank integer_lt boolean_dup_times in2 exec_s_when_autoconstructing (exec_empty boolean_eq boolean_invert_second_then_and 89) (integer_fromboolean exec_y (exec_when (exec_do*while () integer_dup_items tagged_936 integer_min)) -15 exec_y_when_autoconstructing (integer_rot) boolean_flush integer_dup) (integer_dup_items) integer_yankdup exec_y (integer_stackdepth) exec_empty) integer_div integer_dup exec_while (exec_do*count (integer_mod boolean_or integer_pop exec_k (integer_stackdepth) (integer_min))))
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc exec_do*count (integer_flush) integer_flush boolean_flush exec_stackdepth boolean_swap in1 print_boolean print_integer boolean_yank exec_noop exec_eq exec_noop boolean_swap boolean_frominteger integer_dup_times in2 integer_flush exec_shove (exec_when () boolean_and boolean_xor exec_yank integer_lt boolean_dup_times in2 exec_s_when_autoconstructing (exec_empty boolean_eq boolean_invert_second_then_and 89) (integer_fromboolean exec_y (exec_when (exec_do*while () integer_dup_items tagged_936 integer_min)) -15 exec_y_when_autoconstructing (integer_rot) boolean_flush integer_dup) (integer_dup_items) integer_yankdup exec_y (integer_stackdepth) exec_empty) integer_div integer_dup exec_while (exec_do*count (integer_mod boolean_or integer_pop exec_k (integer_stackdepth) (integer_min))))
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 302 73 47 634 221 298 223 47 298)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (298 302 73 47 634 221 298 223 47 298)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_118} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 2, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_107} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth})
Best program: (integer_inc exec_do*count (exec_dup_times (boolean_pop boolean_flush)) integer_rot exec_stackdepth exec_k_when_autoconstructing (in1 print_integer) (exec_noop exec_eq exec_noop -82 integer_lt boolean_swap boolean_swap) boolean_frominteger integer_dup_times boolean_invert_first_then_and in2 integer_flush exec_when () boolean_and boolean_xor tag_boolean_118 exec_yank integer_lt exec_if (exec_do*times (boolean_invert_first_then_and integer_lt boolean_invert_second_then_and 89) integer_fromboolean integer_max) (exec_s_when_autoconstructing (exec_when (integer_div exec_do*count () integer_dup_items in1 integer_min)) (exec_y_when_autoconstructing (tagged_107 integer_rot) boolean_flush integer_dup_items) (exec_y (boolean_yank)) integer_stackdepth) exec_empty exec_while (exec_do*count (integer_mod boolean_or integer_pop integer_stackdepth)))
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 58
Size: 76
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.559
Median total errors in population: 7
Error averages by case: (0.702 0.698 0.927 0.953 0.366 0.779 0.702 0.777 0.953 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.167
Average program size in population (points): 66.6
Average percent parens in population: 0.254
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2399783
--- Timings ---
Current time: 1559593885512 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.4 seconds, 45.8%
Fitness Testing:      4.1 seconds, 42.8%
Report:               1.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 24                 
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: 31                 
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 56                 
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 93                 
Correct output: 12                  | Program output: 95                 
Correct output: 37                  | Program output: 78                 
Correct output: 15                  | Program output: 82                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 96                 
Correct output: 28                  | Program output: 49                 
Correct output: 2                   | Program output: 8                  
Correct output: 65                  | Program output: 90                 
Correct output: 7                   | Program output: 71                 
Correct output: 8                   | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 55                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 61                 
Correct output: 27                  | Program output: 86                 
Correct output: 26                  | Program output: 40                 
Correct output: 10                  | Program output: 22                 
Correct output: 39                  | Program output: 76                 
Correct output: -48                 | Program output: -37                
Correct output: 44                  | Program output: 49                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -8                 
Correct output: -17                 | Program output: 41                 
Correct output: -93                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: 69                 
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: 15                 
Correct output: -98                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: 37                 
Correct output: -83                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: 2                  
Correct output: -76                 | Program output: -62                
Correct output: -87                 | Program output: 7                  
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: 71                 
Correct output: -96                 | Program output: 45                 
Correct output: -77                 | Program output: -65                
Correct output: -58                 | Program output: -14                
Correct output: -39                 | Program output: 54                 
Correct output: -59                 | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: 61                 
Correct output: -89                 | Program output: 63                 
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -24                
Correct output: -59                 | Program output: 12                 
Correct output: -91                 | Program output: 53                 
Correct output: -35                 | Program output: 71                 
Correct output: -64                 | Program output: 65                 
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: 61                 
Correct output: -48                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: 98                 
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -74                
Correct output: -38                 | Program output: 78                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: 21                 
Correct output: -91                 | Program output: -52                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 99                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: 81                 
Correct output: -81                 | Program output: 79                 
Correct output: -63                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction -82} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc exec_do*while (exec_do*count (boolean_pop integer_flush) boolean_pop boolean_flush) exec_stackdepth in4 exec_if () (exec_k_when_autoconstructing (boolean_swap) (print_boolean print_integer) -82 integer_inc boolean_swap boolean_swap) boolean_frominteger exec_yank integer_dup_times in2 integer_sub exec_eq exec_when () integer_lt exec_swap (exec_s_when_autoconstructing (exec_do*times (boolean_invert_second_then_and in4 integer_fromboolean exec_when (boolean_xor integer_dup_items integer_min)) -15 exec_y_when_autoconstructing (integer_dup) exec_do*count (exec_y (boolean_yank)) integer_div exec_do*count (integer_shove print_newline integer_mod boolean_or integer_gte integer_pop integer_swap integer_stackdepth) integer_min) () ()) ())
Lexicase best errors: [0 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction -82} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc exec_do*while (exec_do*count (boolean_pop integer_flush) boolean_pop boolean_flush) exec_stackdepth in4 exec_if () (exec_k_when_autoconstructing (boolean_swap) (print_boolean print_integer) -82 integer_inc boolean_swap boolean_swap) boolean_frominteger exec_yank integer_dup_times in2 integer_sub exec_eq exec_when () integer_lt exec_swap (exec_s_when_autoconstructing (exec_do*times (boolean_invert_second_then_and in4 integer_fromboolean exec_when (boolean_xor integer_dup_items integer_min)) -15 exec_y_when_autoconstructing (integer_dup) exec_do*count (exec_y (boolean_yank)) integer_div exec_do*count (integer_shove print_newline integer_mod boolean_or integer_gte integer_pop integer_swap integer_stackdepth) integer_min) () ()) ())
Zero cases best errors: [0 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 76 117 364 117 288 119 288 289 76)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (639 76 117 364 117 288 119 288 289 76)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 1, :instruction 89} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min})
Best program: (integer_inc exec_do*while (exec_do*count (integer_flush) boolean_pop in4 exec_k_when_autoconstructing (boolean_yankdup) (boolean_swap) print_boolean exec_s_when_autoconstructing () (print_integer) (exec_noop -82 boolean_yankdup boolean_swap boolean_swap) integer_flush boolean_frominteger exec_yank integer_dup_times in2 integer_flush) exec_while (integer_sub exec_when () boolean_and boolean_xor exec_yank integer_lt in2 integer_lt exec_rot (exec_do*times (print_newline 89) in4 exec_when (integer_dup_items integer_gt -15 exec_y_when_autoconstructing (integer_rot) boolean_flush boolean_swap integer_dup) exec_do*while () exec_y (boolean_yank)) (integer_div integer_dup) () integer_gt exec_do*count (integer_mod boolean_or integer_pop exec_rot (boolean_invert_second_then_and integer_pop integer_lte exec_dup_items integer_min) () ())))
Errors: [0 1 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 84
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.627
Median total errors in population: 8
Error averages by case: (0.361 0.924 0.883 0.636 0.883 0.712 0.881 0.712 0.711 0.924)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.347
Average program size in population (points): 69.737
Average percent parens in population: 0.257
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3112946
--- Timings ---
Current time: 1559593887632 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.6 seconds, 46.6%
Fitness Testing:      4.8 seconds, 40.0%
Report:               1.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -54                
Correct output: -15                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: 31                 
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: 73                 
Correct output: -83                 | Program output: 56                 
Correct output: -42                 | Program output: -35                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 92                 
Correct output: 12                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: 15                  | Program output: 63                 
Correct output: 16                  | Program output: 40                 
Correct output: 45                  | Program output: 79                 
Correct output: 28                  | Program output: 87                 
Correct output: 2                   | Program output: 16                 
Correct output: 65                  | Program output: 65                 
Correct output: 7                   | Program output: 100                
Correct output: 8                   | Program output: 71                 
Correct output: 4                   | Program output: 93                 
Correct output: 4                   | Program output: 93                 
Correct output: 14                  | Program output: 43                 
Correct output: 4                   | Program output: 70                 
Correct output: 28                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 43                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 83                 
Correct output: -48                 | Program output: 37                 
Correct output: 44                  | Program output: 44                 
Correct output: -97                 | Program output: 54                 
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 34                 
Correct output: -93                 | Program output: 65                 
Correct output: -89                 | Program output: -72                
Correct output: -72                 | Program output: -45                
Correct output: -64                 | Program output: 83                 
Correct output: -54                 | Program output: 94                 
Correct output: -86                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 14                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -4                 
Correct output: -77                 | Program output: 78                 
Correct output: -98                 | Program output: -4                 
Correct output: 22                  | Program output: 58                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: 91                 
Correct output: -73                 | Program output: 94                 
Correct output: -36                 | Program output: -9                 
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -39                
Correct output: -71                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -73                
Correct output: -77                 | Program output: -42                
Correct output: -58                 | Program output: -48                
Correct output: -39                 | Program output: 18                 
Correct output: -59                 | Program output: 42                 
Correct output: -90                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 57                 
Correct output: -59                 | Program output: 58                 
Correct output: -91                 | Program output: 80                 
Correct output: -35                 | Program output: 39                 
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: 68                 
Correct output: -91                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: 98                 
Correct output: -68                 | Program output: 51                 
Correct output: 21                  | Program output: 86                 
Correct output: -86                 | Program output: 72                 
Correct output: -38                 | Program output: 93                 
Correct output: -97                 | Program output: 0                  
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: 91                 
Correct output: -45                 | Program output: 8                  
Correct output: -70                 | Program output: -41                
Correct output: -27                 | Program output: 41                 
Correct output: 9                   | Program output: 19                 
Correct output: -39                 | Program output: -31                
Correct output: -81                 | Program output: 98                 
Correct output: -63                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 2, :instruction boolean_yank} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc exec_do*while (boolean_pop integer_flush) boolean_dup_items boolean_pop boolean_flush in2 exec_k_when_autoconstructing (boolean_swap) (print_boolean exec_s_when_autoconstructing () (print_integer) (exec_dup_items) exec_noop -82 boolean_swap integer_flush integer_dup_times in2 exec_dup () integer_flush) exec_when () boolean_and exec_yank integer_lt exec_s_when_autoconstructing (exec_if (print_boolean exec_do*times (boolean_rot boolean_invert_second_then_and 89) in4 exec_when (boolean_flush) integer_dup_items integer_min) () -15 exec_y_when_autoconstructing (integer_rot) integer_rot integer_dup) (boolean_yank) () integer_dup exec_shove (integer_mod boolean_rot boolean_or integer_stackdepth) integer_min)
Lexicase best errors: [0 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_min} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 2, :instruction boolean_yank} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc exec_do*while (boolean_pop integer_flush) boolean_dup_items boolean_pop boolean_flush in2 exec_k_when_autoconstructing (boolean_swap) (print_boolean exec_s_when_autoconstructing () (print_integer) (exec_dup_items) exec_noop -82 boolean_swap integer_flush integer_dup_times in2 exec_dup () integer_flush) exec_when () boolean_and exec_yank integer_lt exec_s_when_autoconstructing (exec_if (print_boolean exec_do*times (boolean_rot boolean_invert_second_then_and 89) in4 exec_when (boolean_flush) integer_dup_items integer_min) () -15 exec_y_when_autoconstructing (integer_rot) integer_rot integer_dup) (boolean_yank) () integer_dup exec_shove (integer_mod boolean_rot boolean_or integer_stackdepth) integer_min)
Zero cases best errors: [0 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 169 212 384 10 10 232 614 604 233)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (7 169 212 384 10 10 232 614 604 233)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction -82} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 89} {:close 1, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction -15} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_yank} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Best program: (integer_inc boolean_pop integer_flush boolean_dup_items boolean_pop boolean_flush in2 integer_fromboolean exec_k_when_autoconstructing (boolean_swap) (print_boolean print_integer) exec_dup_items exec_noop -82 boolean_yankdup boolean_swap exec_empty integer_flush boolean_dup_times exec_yank integer_dup_times exec_dup_items integer_flush exec_when () boolean_and exec_yank exec_s_when_autoconstructing (exec_if (boolean_invert_second_then_and 89) (exec_rot () (in4 exec_when (boolean_flush) integer_dup_items integer_stackdepth) (-15 exec_y_when_autoconstructing (integer_rot) integer_rot boolean_yank)) integer_dup) () (exec_do*count (print_boolean integer_mod boolean_rot boolean_or exec_rot (integer_stackdepth) (integer_min) ())))
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.525
Median total errors in population: 6
Error averages by case: (0.993 0.831 0.788 0.616 0.99 0.99 0.768 0.386 0.396 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.93
Average program size in population (points): 79.329
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3851723
--- Timings ---
Current time: 1559593889987 milliseconds
Total Time:          14.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 48.1%
Fitness Testing:      5.5 seconds, 39.0%
Report:               1.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 24                 
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: 31                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 56                 
Correct output: -42                 | Program output: -35                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 74                 
Correct output: 12                  | Program output: 59                 
Correct output: 37                  | Program output: 93                 
Correct output: 15                  | Program output: 82                 
Correct output: 16                  | Program output: 84                 
Correct output: 45                  | Program output: 77                 
Correct output: 28                  | Program output: 28                 
Correct output: 2                   | Program output: 98                 
Correct output: 65                  | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 10                 
Correct output: 4                   | Program output: 65                 
Correct output: 4                   | Program output: 56                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 32                 
Correct output: 26                  | Program output: 87                 
Correct output: 10                  | Program output: 55                 
Correct output: 39                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: 44                  | Program output: 83                 
Correct output: -97                 | Program output: -87                
Correct output: -10                 | Program output: 35                 
Correct output: -17                 | Program output: 58                 
Correct output: -93                 | Program output: 17                 
Correct output: -89                 | Program output: -85                
Correct output: -72                 | Program output: 55                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: 64                 
Correct output: -86                 | Program output: 100                
Correct output: -90                 | Program output: 85                 
Correct output: -81                 | Program output: -73                
Correct output: -71                 | Program output: 25                 
Correct output: -72                 | Program output: 51                 
Correct output: -83                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -41                
Correct output: 22                  | Program output: 40                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -20                
Correct output: -27                 | Program output: 76                 
Correct output: -73                 | Program output: 80                 
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 40                 
Correct output: -77                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: 49                 
Correct output: -58                 | Program output: -58                
Correct output: -39                 | Program output: 42                 
Correct output: -59                 | Program output: 40                 
Correct output: -90                 | Program output: 22                 
Correct output: -99                 | Program output: 20                 
Correct output: -89                 | Program output: 79                 
Correct output: -78                 | Program output: 65                 
Correct output: -91                 | Program output: -82                
Correct output: -59                 | Program output: 56                 
Correct output: -91                 | Program output: -91                
Correct output: -35                 | Program output: 71                 
Correct output: -64                 | Program output: -23                
Correct output: -82                 | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: 21                  | Program output: 94                 
Correct output: -86                 | Program output: -86                
Correct output: -38                 | Program output: 0                  
Correct output: -97                 | Program output: 80                 
Correct output: -10                 | Program output: -6                 
Correct output: -91                 | Program output: -55                
Correct output: -45                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 16                 
Correct output: 9                   | Program output: 37                 
Correct output: -39                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_div integer_yank exec_do*while (exec_do*count (exec_stackdepth boolean_pop in1 in1) boolean_invert_second_then_and exec_eq integer_eq exec_y (boolean_flush)) boolean_eq in1 in3 print_boolean boolean_invert_first_then_and print_integer exec_noop exec_eq boolean_eq boolean_yankdup boolean_swap boolean_swap boolean_frominteger exec_yank exec_pop (in2 integer_dup_items exec_yank exec_when () integer_shove boolean_xor exec_yank integer_lt exec_s_when_autoconstructing (exec_empty exec_y (exec_do*times (integer_stackdepth boolean_invert_second_then_and integer_sub exec_pop (integer_sub) exec_when (exec_rot (integer_dup_items tagged_936 exec_y_when_autoconstructing (integer_min)) (exec_y_when_autoconstructing (integer_sub integer_rot) boolean_xor integer_dup_items) (exec_y (integer_stackdepth) boolean_yankdup) exec_empty) integer_dup)) exec_while (boolean_yank integer_mod boolean_or integer_pop exec_rot (integer_stackdepth) (exec_stackdepth integer_min integer_yank) ())) () ()))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_div integer_yank exec_do*while (exec_do*count (exec_stackdepth boolean_pop in1 in1) boolean_invert_second_then_and exec_eq integer_eq exec_y (boolean_flush)) boolean_eq in1 in3 print_boolean boolean_invert_first_then_and print_integer exec_noop exec_eq boolean_eq boolean_yankdup boolean_swap boolean_swap boolean_frominteger exec_yank exec_pop (in2 integer_dup_items exec_yank exec_when () integer_shove boolean_xor exec_yank integer_lt exec_s_when_autoconstructing (exec_empty exec_y (exec_do*times (integer_stackdepth boolean_invert_second_then_and integer_sub exec_pop (integer_sub) exec_when (exec_rot (integer_dup_items tagged_936 exec_y_when_autoconstructing (integer_min)) (exec_y_when_autoconstructing (integer_sub integer_rot) boolean_xor integer_dup_items) (exec_y (integer_stackdepth) boolean_yankdup) exec_empty) integer_dup)) exec_while (boolean_yank integer_mod boolean_or integer_pop exec_rot (integer_stackdepth) (exec_stackdepth integer_min integer_yank) ())) () ()))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 294 53 280 261 53 55 386 53 286)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (385 294 53 280 261 53 55 386 53 286)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte})
Best program: (integer_lte integer_mod integer_gt exec_when (in3 boolean_dup) exec_dup (print_integer exec_eq exec_dup_items boolean_xor exec_do*range (integer_add exec_do*times () exec_do*while () in3 boolean_swap integer_lte exec_shove () boolean_invert_second_then_and boolean_dup_times exec_swap (integer_inc integer_lte) ())))
Errors: [0 1 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.894
Median total errors in population: 8
Error averages by case: (0.615 0.706 0.947 0.72 0.739 0.947 0.945 0.614 0.947 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.86
Average program size in population (points): 82.892
Average percent parens in population: 0.254
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4702573
--- Timings ---
Current time: 1559593892446 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.0 seconds, 48.3%
Fitness Testing:      6.3 seconds, 38.0%
Report:               2.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 73                 
Correct output: 7                   | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 39                 
Correct output: 4                   | Program output: 10                 
Correct output: 28                  | Program output: 29                 
Correct output: 27                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 22                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -37                
Correct output: 44                  | Program output: 49                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -8                 
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: 25                 
Correct output: -83                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: -33                
Correct output: -76                 | Program output: -62                
Correct output: -87                 | Program output: -85                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -39                
Correct output: -96                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -14                
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: 13                 
Correct output: -89                 | Program output: -28                
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -67                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: 30                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -48                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -58                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -74                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: 21                 
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 19                 
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: 58                 
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction 89} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (integer_inc in3 in2 integer_eq boolean_flush exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in1 in4 integer_min) print_boolean print_integer boolean_xor exec_dup (exec_noop exec_swap (exec_eq boolean_dup exec_s (boolean_yankdup boolean_swap boolean_and) (boolean_xor) (boolean_swap) boolean_frominteger integer_flush) () exec_s_when_autoconstructing (integer_lt exec_when () boolean_pop integer_dup_times boolean_xor boolean_invert_second_then_and exec_yank integer_add) (exec_s_when_autoconstructing (exec_empty exec_do*times (89) integer_pop integer_fromboolean exec_when (boolean_xor in1 tagged_936 integer_min)) (exec_y_when_autoconstructing (integer_gt integer_dup boolean_xor boolean_flush integer_dup) integer_dup_items) (exec_y (integer_sub) integer_stackdepth) exec_empty) (exec_while (exec_do*count (integer_mod boolean_or integer_pop exec_dup ()) boolean_or integer_mult in3 integer_min integer_mod integer_div))))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction 89} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (integer_inc in3 in2 integer_eq boolean_flush exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in1 in4 integer_min) print_boolean print_integer boolean_xor exec_dup (exec_noop exec_swap (exec_eq boolean_dup exec_s (boolean_yankdup boolean_swap boolean_and) (boolean_xor) (boolean_swap) boolean_frominteger integer_flush) () exec_s_when_autoconstructing (integer_lt exec_when () boolean_pop integer_dup_times boolean_xor boolean_invert_second_then_and exec_yank integer_add) (exec_s_when_autoconstructing (exec_empty exec_do*times (89) integer_pop integer_fromboolean exec_when (boolean_xor in1 tagged_936 integer_min)) (exec_y_when_autoconstructing (integer_gt integer_dup boolean_xor boolean_flush integer_dup) integer_dup_items) (exec_y (integer_sub) integer_stackdepth) exec_empty) (exec_while (exec_do*count (integer_mod boolean_or integer_pop exec_dup ()) boolean_or integer_mult in3 integer_min integer_mod integer_div))))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 158 223 556 224 639 224 627 313 133)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (135 158 223 556 224 639 224 627 313 133)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod})
Best program: (exec_do*count (in3 in2) integer_flush integer_eq boolean_pop boolean_flush exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in1 in4 integer_min) print_boolean print_integer integer_yank boolean_xor exec_noop integer_gte exec_swap (exec_eq exec_pop (boolean_yankdup exec_noop) boolean_swap boolean_eq boolean_and) (boolean_swap) boolean_frominteger integer_flush integer_lt exec_when () integer_dup_times boolean_invert_second_then_and exec_yank exec_s_when_autoconstructing (exec_empty exec_do*times (integer_fromboolean exec_s_when_autoconstructing (exec_when (integer_max boolean_shove in1 tagged_936 boolean_flush in4 integer_min)) (exec_y_when_autoconstructing (integer_gt boolean_xor exec_s_when_autoconstructing (boolean_flush integer_dup_items) (integer_sub) (boolean_yank integer_stackdepth) exec_empty) exec_while (exec_do*count (integer_mod boolean_or boolean_or integer_mult in3 integer_min integer_mod))) ())) () ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 89
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 6.768
Median total errors in population: 6
Error averages by case: (0.865 0.842 0.777 0.444 0.776 0.361 0.776 0.373 0.687 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.077
Average program size in population (points): 80.176
Average percent parens in population: 0.250
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5526406
--- Timings ---
Current time: 1559593894804 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 48.5%
Fitness Testing:      7.1 seconds, 37.6%
Report:               2.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 28                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 73                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 32                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 22                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: 44                  | Program output: 49                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -8                 
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: 13                 
Correct output: -89                 | Program output: -28                
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -91                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -23                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -68                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc exec_do*count (exec_dup (in3 integer_flush) integer_eq) boolean_invert_second_then_and boolean_pop boolean_flush exec_stackdepth boolean_swap in1 in4 integer_min in3 integer_min print_boolean print_integer exec_noop exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) (boolean_swap) boolean_pop boolean_frominteger integer_flush exec_when () integer_dup_times boolean_xor exec_s () (boolean_invert_second_then_and exec_yank integer_div) (exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 tagged_936 integer_min)) integer_gt boolean_xor integer_pop integer_dup) (boolean_stackdepth) exec_y (integer_sub) integer_stackdepth) (exec_empty) exec_while (exec_do*count (integer_mod boolean_or integer_pop integer_swap integer_mult in3 integer_min))))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc exec_do*count (exec_dup (in3 integer_flush) integer_eq) boolean_invert_second_then_and boolean_pop boolean_flush exec_stackdepth boolean_swap in1 in4 integer_min in3 integer_min print_boolean print_integer exec_noop exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) (boolean_swap) boolean_pop boolean_frominteger integer_flush exec_when () integer_dup_times boolean_xor exec_s () (boolean_invert_second_then_and exec_yank integer_div) (exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 tagged_936 integer_min)) integer_gt boolean_xor integer_pop integer_dup) (boolean_stackdepth) exec_y (integer_sub) integer_stackdepth) (exec_empty) exec_while (exec_do*count (integer_mod boolean_or integer_pop integer_swap integer_mult in3 integer_min))))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 484 332 193 682 482 485 187 157 152)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (330 484 332 193 682 482 485 187 157 152)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Best program: (integer_inc exec_do*count (exec_dup (in3 integer_flush) integer_eq) boolean_invert_second_then_and boolean_pop boolean_flush exec_stackdepth boolean_swap in1 in4 integer_min in3 integer_min print_boolean print_integer exec_noop exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) (boolean_swap) boolean_pop boolean_frominteger integer_flush exec_when () integer_dup_times boolean_xor exec_s () (boolean_invert_second_then_and exec_yank integer_div) (exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 tagged_936 integer_min)) integer_gt boolean_xor integer_pop integer_dup) (boolean_stackdepth) exec_y (integer_sub) integer_stackdepth) (exec_empty) exec_while (exec_do*count (integer_mod boolean_or integer_pop integer_swap integer_mult in3 integer_min))))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 87
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 6.516
Median total errors in population: 6
Error averages by case: (0.67 0.516 0.668 0.807 0.318 0.518 0.515 0.813 0.843 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.196
Average program size in population (points): 82.112
Average percent parens in population: 0.241
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6419293
--- Timings ---
Current time: 1559593897528 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 48.6%
Fitness Testing:      8.0 seconds, 37.4%
Report:               2.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: 31                 
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 56                 
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 92                 
Correct output: 12                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: 15                  | Program output: 63                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 79                 
Correct output: 28                  | Program output: 49                 
Correct output: 2                   | Program output: 8                  
Correct output: 65                  | Program output: 65                 
Correct output: 7                   | Program output: 71                 
Correct output: 8                   | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 43                 
Correct output: 4                   | Program output: 46                 
Correct output: 28                  | Program output: 61                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 76                 
Correct output: -48                 | Program output: -37                
Correct output: 44                  | Program output: 44                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: 34                 
Correct output: -93                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: 15                 
Correct output: -98                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: -9                 
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -73                
Correct output: -77                 | Program output: -65                
Correct output: -58                 | Program output: -48                
Correct output: -39                 | Program output: 18                 
Correct output: -59                 | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -24                
Correct output: -59                 | Program output: 12                 
Correct output: -91                 | Program output: 53                 
Correct output: -35                 | Program output: 39                 
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: 51                 
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -74                
Correct output: -38                 | Program output: 78                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -52                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -41                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: -31                
Correct output: -81                 | Program output: 79                 
Correct output: -63                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction 89} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Lexicase best program: (integer_inc exec_do*count (in3 in2) integer_flush boolean_swap exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in4 in2 integer_min) print_boolean boolean_pop print_integer boolean_xor integer_fromboolean exec_noop exec_swap (exec_eq boolean_yankdup boolean_swap boolean_and) (boolean_swap) boolean_frominteger integer_lt exec_when () integer_dup_times exec_s_when_autoconstructing (exec_empty exec_do*times (89) integer_fromboolean exec_when (in1 tagged_936 exec_y_when_autoconstructing (boolean_xor boolean_flush integer_dup) integer_dup_items) boolean_stackdepth exec_y (exec_while (exec_pop (exec_do*count (integer_mod boolean_or integer_pop exec_shove (boolean_or integer_mult in3 integer_min)))))) () ())
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction 89} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Zero cases best program: (integer_inc exec_do*count (in3 in2) integer_flush boolean_swap exec_stackdepth exec_k_when_autoconstructing (boolean_swap) (in4 in2 integer_min) print_boolean boolean_pop print_integer boolean_xor integer_fromboolean exec_noop exec_swap (exec_eq boolean_yankdup boolean_swap boolean_and) (boolean_swap) boolean_frominteger integer_lt exec_when () integer_dup_times exec_s_when_autoconstructing (exec_empty exec_do*times (89) integer_fromboolean exec_when (in1 tagged_936 exec_y_when_autoconstructing (boolean_xor boolean_flush integer_dup) integer_dup_items) boolean_stackdepth exec_y (exec_while (exec_pop (exec_do*count (integer_mod boolean_or integer_pop exec_shove (boolean_or integer_mult in3 integer_min)))))) () ())
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 348 352 226 228 241 422 420 427 418)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (409 348 352 226 228 241 422 420 427 418)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_68} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction 89} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction -47} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction -3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod})
Best program: (integer_inc exec_do*count (exec_do*range (integer_flush) exec_if (boolean_pop boolean_flush) () exec_stackdepth) exec_k_when_autoconstructing (boolean_swap) (in1 in4 in2 integer_min) print_boolean boolean_yank print_integer boolean_xor exec_noop exec_swap (exec_eq boolean_yankdup boolean_and) (exec_empty boolean_swap) boolean_frominteger exec_stackdepth exec_when () integer_dup_times boolean_xor boolean_invert_second_then_and tag_exec_68 (exec_yank exec_s_when_autoconstructing (exec_dup (boolean_dup exec_empty exec_do*times (exec_s_when_autoconstructing (89) (exec_s_when_autoconstructing (exec_when (in1 -47 tagged_936 exec_y_when_autoconstructing (integer_gt integer_swap) boolean_xor boolean_flush boolean_shove) exec_if (integer_dup_items) (boolean_stackdepth integer_sub) integer_stackdepth) (integer_dup_times exec_empty) (exec_k (-3 exec_while (exec_do*count (integer_pop integer_mult in3 integer_min integer_mod))) ())) ()))) () ()))
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 97
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 6.509
Median total errors in population: 7
Error averages by case: (0.591 0.652 0.648 0.774 0.772 0.759 0.578 0.58 0.573 0.582)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.903
Average program size in population (points): 90.398
Average percent parens in population: 0.235
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7478771
--- Timings ---
Current time: 1559593899999 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.6 seconds, 47.7%
Fitness Testing:      9.0 seconds, 37.0%
Report:               3.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: 34                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 65                 
Correct output: 7                   | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 39                 
Correct output: 4                   | Program output: 10                 
Correct output: 28                  | Program output: 29                 
Correct output: 27                  | Program output: 27                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -37                
Correct output: 44                  | Program output: 44                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -85                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -67                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -58                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -74                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -41                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: 58                 
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_do*count (exec_dup (exec_s (in3 integer_flush) (integer_eq) (boolean_invert_second_then_and) boolean_pop boolean_flush)) exec_stackdepth boolean_rot boolean_swap in1 in2 in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) exec_when () exec_pop (boolean_xor exec_s () (exec_do*while () boolean_invert_second_then_and exec_yank integer_div) (exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt boolean_xor integer_pop boolean_stackdepth) (exec_y (integer_sub) integer_stackdepth) exec_do*count (integer_shove integer_pop integer_swap integer_mult in3 boolean_and)) ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 90
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_do*count (exec_dup (exec_s (in3 integer_flush) (integer_eq) (boolean_invert_second_then_and) boolean_pop boolean_flush)) exec_stackdepth boolean_rot boolean_swap in1 in2 in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) exec_when () exec_pop (boolean_xor exec_s () (exec_do*while () boolean_invert_second_then_and exec_yank integer_div) (exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt boolean_xor integer_pop boolean_stackdepth) (exec_y (integer_sub) integer_stackdepth) exec_do*count (integer_shove integer_pop integer_swap integer_mult in3 boolean_and)) ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 90
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (354 363 358 306 428 650 172 552 423 431)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (354 363 358 306 428 650 172 552 423 431)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_68} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction 89} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction -47} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction -3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod})
Best program: (exec_do*count (exec_do*range (integer_flush) exec_if (boolean_pop boolean_flush) () exec_stackdepth) exec_k_when_autoconstructing (boolean_swap) (in1 in4 in2 integer_min) print_boolean integer_min boolean_yank print_integer boolean_xor exec_swap (exec_eq boolean_yankdup boolean_and) (exec_empty boolean_swap) boolean_frominteger exec_stackdepth exec_when () integer_dup_times boolean_xor boolean_invert_second_then_and boolean_rot tag_exec_68 (exec_yank exec_s_when_autoconstructing (exec_dup (boolean_dup boolean_xor exec_empty exec_do*times (exec_s_when_autoconstructing (89) (exec_s_when_autoconstructing (exec_when (in1 -47 print_boolean) tagged_936 exec_y_when_autoconstructing (integer_gt integer_swap) boolean_xor boolean_empty) (boolean_flush boolean_shove) (exec_if (integer_dup_items) (boolean_stackdepth integer_sub) integer_stackdepth) integer_dup_times exec_empty) (boolean_eq -3 exec_while (exec_do*count (integer_pop integer_mult in3 integer_sub integer_min integer_mod)))))) () ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 99
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.963
Median total errors in population: 5
Error averages by case: (0.646 0.637 0.642 0.694 0.572 0.35 0.828 0.448 0.577 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.445
Average program size in population (points): 87.261
Average percent parens in population: 0.237
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8430741
--- Timings ---
Current time: 1559593902356 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.8 seconds, 48.0%
Fitness Testing:      9.8 seconds, 37.0%
Report:               3.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 28                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 73                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 32                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 22                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: 44                  | Program output: 49                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -8                 
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: 13                 
Correct output: -89                 | Program output: -28                
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -91                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -23                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -68                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 3, :instruction -26} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Lexicase best program: (-26 integer_inc exec_do*count (integer_mod exec_dup (integer_flush) print_boolean integer_eq) boolean_invert_second_then_and boolean_pop integer_fromboolean exec_stackdepth boolean_swap in1 in4 integer_min in3 integer_min print_boolean print_integer boolean_dup_items exec_swap (integer_yank) (boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) boolean_pop boolean_frominteger exec_yankdup integer_flush exec_when () integer_dup_times boolean_xor exec_s () (boolean_invert_second_then_and exec_yank integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_dup_items exec_when (boolean_shove in1 tagged_936 exec_rot (integer_min) () (integer_gt boolean_xor integer_pop integer_dup) boolean_stackdepth) integer_sub) exec_do*count (integer_stackdepth) exec_empty) (exec_while (exec_do*count (integer_mod boolean_or integer_pop integer_swap integer_min exec_do*times () in3 integer_min)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 90
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 3, :instruction -26} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction tagged_936} {:close 0, :instruction exec_rot} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_min})
Zero cases best program: (-26 integer_inc exec_do*count (integer_mod exec_dup (integer_flush) print_boolean integer_eq) boolean_invert_second_then_and boolean_pop integer_fromboolean exec_stackdepth boolean_swap in1 in4 integer_min in3 integer_min print_boolean print_integer boolean_dup_items exec_swap (integer_yank) (boolean_invert_second_then_and boolean_yankdup boolean_swap boolean_and) boolean_pop boolean_frominteger exec_yankdup integer_flush exec_when () integer_dup_times boolean_xor exec_s () (boolean_invert_second_then_and exec_yank integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_dup_items exec_when (boolean_shove in1 tagged_936 exec_rot (integer_min) () (integer_gt boolean_xor integer_pop integer_dup) boolean_stackdepth) integer_sub) exec_do*count (integer_stackdepth) exec_empty) (exec_while (exec_do*count (integer_mod boolean_or integer_pop integer_swap integer_min exec_do*times () in3 integer_min)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 90
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 511 552 320 626 548 512 541 545 325)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (317 511 552 320 626 548 512 541 545 325)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 2, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction -51} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction 89} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_936} {:close 2, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction boolean_and})
Best program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 68
Size: 86
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 5.203
Median total errors in population: 4
Error averages by case: (0.683 0.489 0.448 0.68 0.374 0.452 0.488 0.459 0.455 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.819
Average program size in population (points): 93.774
Average percent parens in population: 0.265
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8982724
--- Timings ---
Current time: 1559593904488 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.9 seconds, 48.7%
Fitness Testing:     10.4 seconds, 36.3%
Report:               4.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 86


Auto-simplifying with starting size: 86
step: 0
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 500
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 1000
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 1500
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 2000
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 2500
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 3000
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 3500
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 4000
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 4500
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

step: 5000
program: (exec_do*count (exec_s (in3 integer_flush) (integer_eq) (exec_y_when_autoconstructing () boolean_pop exec_stackdepth) boolean_eq boolean_rot boolean_swap) in1 in2 exec_dup_times () in4 integer_min boolean_invert_second_then_and in3 integer_min print_boolean print_integer exec_noop -51 exec_swap (exec_eq boolean_shove boolean_invert_second_then_and boolean_yankdup boolean_swap) (boolean_frominteger integer_flush) boolean_flush exec_when () boolean_xor exec_flush boolean_invert_second_then_and integer_div integer_empty boolean_invert_first_then_and exec_s_when_autoconstructing (integer_yank exec_empty 89) (exec_k_when_autoconstructing (integer_pop integer_fromboolean exec_when (exec_when (boolean_shove in1 integer_eq tagged_936 integer_min)) integer_gte integer_gt integer_pop boolean_stackdepth) (integer_sub) integer_stackdepth) (integer_dup_items exec_do*count (integer_shove integer_pop boolean_eq integer_swap integer_mult in3 boolean_and)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 86

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -44                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: 92                  | Program output: 92                 
Correct output: 85                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 28                 
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 73                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 32                 
Correct output: 26                  | Program output: 26                 
Correct output: 10                  | Program output: 22                 
Correct output: 39                  | Program output: 39                 
Correct output: -48                 | Program output: -48                
Correct output: 44                  | Program output: 49                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -8                 
Correct output: -17                 | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -56                
Correct output: -27                 | Program output: -27                
Correct output: -73                 | Program output: -73                
Correct output: -36                 | Program output: -36                
Correct output: -76                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -77                 | Program output: -77                
Correct output: -58                 | Program output: -58                
Correct output: -39                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: 13                 
Correct output: -89                 | Program output: -28                
Correct output: -78                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -91                 | Program output: -91                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -23                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -68                
Correct output: 21                  | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -39                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
;;******************************
