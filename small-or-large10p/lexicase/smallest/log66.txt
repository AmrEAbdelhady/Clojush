Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-65 -65 -65 56] -65] [[47 47 47 63] 47] [[-39 -39 -39 93] -39] [[88 -75 -75 -75] -75] [[-13 29 29 29] -13] [[66 66 -77 66] -77] [[-24 66 -24 -24] -24] [[41 41 59 41] 41] [[-21 -26 -21 -21] -26] [[-65 -65 26 -65] -65] [(31 31 31 31) 31] [(44 44 44 44) 44] [(23 23 23 23) 23] [(58 58 58 58) 58] [(40 40 40 40) 40] [(11 33 64 92) 11] [(66 99 69 73) 66] [(89 87 15 37) 15] [(63 23 37 27) 23] [(32 81 10 68) 10] [(84 34 76 58) 34] [(95 56 10 89) 10] [(56 16 48 87) 16] [(60 56 13 94) 13] [(70 32 35 91) 32] [(70 43 99 25) 25] [(27 62 52 56) 27] [(90 55 19 2) 2] [(77 33 77 84) 33] [(72 15 34 70) 15] [(67 100 56 12) 12] [(91 18 24 55) 18] [(5 87 36 93) 5] [(100 30 39 88) 30] [(64 89 54 86) 54] [(62 -44 -21 -58) -58] [(-90 -44 -100 -73) -100] [(9 33 -33 -25) -33] [(27 10 8 -30) -30] [(50 -59 17 -96) -96] [(-4 22 -70 -60) -70] [(-74 -61 51 34) -74] [(-30 44 -74 -92) -92] [(60 -50 -95 -76) -95] [(-11 34 28 -15) -15] [(1 10 61 -80) -80] [(98 76 -72 -26) -72] [(79 -41 44 -51) -51] [(91 -90 49 -30) -90] [(88 -9 -66 14) -66] [(-25 -89 21 44) -89] [(63 -100 79 46) -100] [(25 -39 -82 -76) -82] [(46 -90 -21 -58) -90] [(10 -40 -51 -22) -51] [(12 -13 64 87) -13] [(78 -28 40 53) -28] [(-100 -18 37 -81) -100] [(50 76 46 43) 43] [(25 23 -18 -36) -36] [(-92 -31 19 12) -92] [(59 -77 21 -100) -100] [(39 -57 -44 -32) -57] [(-60 -22 -8 80) -60] [(65 49 51 -93) -93] [(90 61 -23 77) -23] [(-87 34 31 -98) -98] [(-33 -62 -50 -51) -62] [(12 -100 100 -85) -100] [(20 -99 43 -66) -99] [(-81 -25 26 -77) -81] [(76 27 61 -9) -9] [(-36 82 94 76) -36] [(44 -45 -64 -31) -64] [(29 -56 -10 10) -56] [(34 -73 64 -90) -90] [(-65 -42 92 83) -65] [(-91 -22 -19 -72) -91] [(40 8 -53 -49) -53] [(-19 -54 -58 39) -58] [(-26 80 -98 -69) -98] [(52 30 58 -31) -31] [(-30 86 -82 -89) -89] [(47 4 48 51) 4] [(88 84 67 33) 33] [(36 49 82 49) 36] [(-26 30 -10 22) -26] [(-58 -24 30 -4) -58] [(66 -74 -17 27) -74] [(25 -35 -40 -45) -45] [(84 40 -72 -21) -72] [(49 96 1 -53) -53] [(25 -89 -80 28) -89] [(-76 77 -93 -81) -93] [(-5 -83 75 -95) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-65 -65 -65 56] -65]
Train Case:   6 | Input/Output: [[47 47 47 63] 47]
Train Case:   7 | Input/Output: [[-39 -39 -39 93] -39]
Train Case:   8 | Input/Output: [[88 -75 -75 -75] -75]
Train Case:   9 | Input/Output: [[-13 29 29 29] -13]
Train Case:  10 | Input/Output: [[66 66 -77 66] -77]
Train Case:  11 | Input/Output: [[-24 66 -24 -24] -24]
Train Case:  12 | Input/Output: [[41 41 59 41] 41]
Train Case:  13 | Input/Output: [[-21 -26 -21 -21] -26]
Train Case:  14 | Input/Output: [[-65 -65 26 -65] -65]
Train Case:  15 | Input/Output: [(31 31 31 31) 31]
Train Case:  16 | Input/Output: [(44 44 44 44) 44]
Train Case:  17 | Input/Output: [(23 23 23 23) 23]
Train Case:  18 | Input/Output: [(58 58 58 58) 58]
Train Case:  19 | Input/Output: [(40 40 40 40) 40]
Train Case:  20 | Input/Output: [(11 33 64 92) 11]
Train Case:  21 | Input/Output: [(66 99 69 73) 66]
Train Case:  22 | Input/Output: [(89 87 15 37) 15]
Train Case:  23 | Input/Output: [(63 23 37 27) 23]
Train Case:  24 | Input/Output: [(32 81 10 68) 10]
Train Case:  25 | Input/Output: [(84 34 76 58) 34]
Train Case:  26 | Input/Output: [(95 56 10 89) 10]
Train Case:  27 | Input/Output: [(56 16 48 87) 16]
Train Case:  28 | Input/Output: [(60 56 13 94) 13]
Train Case:  29 | Input/Output: [(70 32 35 91) 32]
Train Case:  30 | Input/Output: [(70 43 99 25) 25]
Train Case:  31 | Input/Output: [(27 62 52 56) 27]
Train Case:  32 | Input/Output: [(90 55 19 2) 2]
Train Case:  33 | Input/Output: [(77 33 77 84) 33]
Train Case:  34 | Input/Output: [(72 15 34 70) 15]
Train Case:  35 | Input/Output: [(67 100 56 12) 12]
Train Case:  36 | Input/Output: [(91 18 24 55) 18]
Train Case:  37 | Input/Output: [(5 87 36 93) 5]
Train Case:  38 | Input/Output: [(100 30 39 88) 30]
Train Case:  39 | Input/Output: [(64 89 54 86) 54]
Train Case:  40 | Input/Output: [(62 -44 -21 -58) -58]
Train Case:  41 | Input/Output: [(-90 -44 -100 -73) -100]
Train Case:  42 | Input/Output: [(9 33 -33 -25) -33]
Train Case:  43 | Input/Output: [(27 10 8 -30) -30]
Train Case:  44 | Input/Output: [(50 -59 17 -96) -96]
Train Case:  45 | Input/Output: [(-4 22 -70 -60) -70]
Train Case:  46 | Input/Output: [(-74 -61 51 34) -74]
Train Case:  47 | Input/Output: [(-30 44 -74 -92) -92]
Train Case:  48 | Input/Output: [(60 -50 -95 -76) -95]
Train Case:  49 | Input/Output: [(-11 34 28 -15) -15]
Train Case:  50 | Input/Output: [(1 10 61 -80) -80]
Train Case:  51 | Input/Output: [(98 76 -72 -26) -72]
Train Case:  52 | Input/Output: [(79 -41 44 -51) -51]
Train Case:  53 | Input/Output: [(91 -90 49 -30) -90]
Train Case:  54 | Input/Output: [(88 -9 -66 14) -66]
Train Case:  55 | Input/Output: [(-25 -89 21 44) -89]
Train Case:  56 | Input/Output: [(63 -100 79 46) -100]
Train Case:  57 | Input/Output: [(25 -39 -82 -76) -82]
Train Case:  58 | Input/Output: [(46 -90 -21 -58) -90]
Train Case:  59 | Input/Output: [(10 -40 -51 -22) -51]
Train Case:  60 | Input/Output: [(12 -13 64 87) -13]
Train Case:  61 | Input/Output: [(78 -28 40 53) -28]
Train Case:  62 | Input/Output: [(-100 -18 37 -81) -100]
Train Case:  63 | Input/Output: [(50 76 46 43) 43]
Train Case:  64 | Input/Output: [(25 23 -18 -36) -36]
Train Case:  65 | Input/Output: [(-92 -31 19 12) -92]
Train Case:  66 | Input/Output: [(59 -77 21 -100) -100]
Train Case:  67 | Input/Output: [(39 -57 -44 -32) -57]
Train Case:  68 | Input/Output: [(-60 -22 -8 80) -60]
Train Case:  69 | Input/Output: [(65 49 51 -93) -93]
Train Case:  70 | Input/Output: [(90 61 -23 77) -23]
Train Case:  71 | Input/Output: [(-87 34 31 -98) -98]
Train Case:  72 | Input/Output: [(-33 -62 -50 -51) -62]
Train Case:  73 | Input/Output: [(12 -100 100 -85) -100]
Train Case:  74 | Input/Output: [(20 -99 43 -66) -99]
Train Case:  75 | Input/Output: [(-81 -25 26 -77) -81]
Train Case:  76 | Input/Output: [(76 27 61 -9) -9]
Train Case:  77 | Input/Output: [(-36 82 94 76) -36]
Train Case:  78 | Input/Output: [(44 -45 -64 -31) -64]
Train Case:  79 | Input/Output: [(29 -56 -10 10) -56]
Train Case:  80 | Input/Output: [(34 -73 64 -90) -90]
Train Case:  81 | Input/Output: [(-65 -42 92 83) -65]
Train Case:  82 | Input/Output: [(-91 -22 -19 -72) -91]
Train Case:  83 | Input/Output: [(40 8 -53 -49) -53]
Train Case:  84 | Input/Output: [(-19 -54 -58 39) -58]
Train Case:  85 | Input/Output: [(-26 80 -98 -69) -98]
Train Case:  86 | Input/Output: [(52 30 58 -31) -31]
Train Case:  87 | Input/Output: [(-30 86 -82 -89) -89]
Train Case:  88 | Input/Output: [(47 4 48 51) 4]
Train Case:  89 | Input/Output: [(88 84 67 33) 33]
Train Case:  90 | Input/Output: [(36 49 82 49) 36]
Train Case:  91 | Input/Output: [(-26 30 -10 22) -26]
Train Case:  92 | Input/Output: [(-58 -24 30 -4) -58]
Train Case:  93 | Input/Output: [(66 -74 -17 27) -74]
Train Case:  94 | Input/Output: [(25 -35 -40 -45) -45]
Train Case:  95 | Input/Output: [(84 40 -72 -21) -72]
Train Case:  96 | Input/Output: [(49 96 1 -53) -53]
Train Case:  97 | Input/Output: [(25 -89 -80 28) -89]
Train Case:  98 | Input/Output: [(-76 77 -93 -81) -93]
Train Case:  99 | Input/Output: [(-5 -83 75 -95) -95]
Test Case:   0 | Input/Output: [[-1 -1 99 -1] -1]
Test Case:   1 | Input/Output: [[10 10 45 10] 10]
Test Case:   2 | Input/Output: [[18 18 -8 18] -8]
Test Case:   3 | Input/Output: [[78 78 78 20] 20]
Test Case:   4 | Input/Output: [[3 3 -83 3] -83]
Test Case:   5 | Input/Output: [[96 -80 96 96] -80]
Test Case:   6 | Input/Output: [[-57 54 -57 -57] -57]
Test Case:   7 | Input/Output: [[-78 56 -78 -78] -78]
Test Case:   8 | Input/Output: [[11 -40 -40 -40] -40]
Test Case:   9 | Input/Output: [[-21 -21 -21 -65] -65]
Test Case:  10 | Input/Output: [[100 99 100 100] 99]
Test Case:  11 | Input/Output: [[-88 -75 -75 -75] -88]
Test Case:  12 | Input/Output: [[4 4 95 4] 4]
Test Case:  13 | Input/Output: [[-48 -48 -48 60] -48]
Test Case:  14 | Input/Output: [[42 100 42 42] 42]
Test Case:  15 | Input/Output: [[47 47 47 42] 42]
Test Case:  16 | Input/Output: [[25 46 25 25] 25]
Test Case:  17 | Input/Output: [[-32 -100 -32 -32] -100]
Test Case:  18 | Input/Output: [[-44 -44 -44 81] -44]
Test Case:  19 | Input/Output: [[64 -23 -23 -23] -23]
Test Case:  20 | Input/Output: [[-31 -31 -71 -31] -71]
Test Case:  21 | Input/Output: [[98 98 31 98] 31]
Test Case:  22 | Input/Output: [[-92 -88 -88 -88] -92]
Test Case:  23 | Input/Output: [[58 -83 -83 -83] -83]
Test Case:  24 | Input/Output: [[34 -37 34 34] -37]
Test Case:  25 | Input/Output: [[40 78 78 78] 40]
Test Case:  26 | Input/Output: [[64 64 -30 64] -30]
Test Case:  27 | Input/Output: [[-99 85 -99 -99] -99]
Test Case:  28 | Input/Output: [[-32 -32 -31 -32] -32]
Test Case:  29 | Input/Output: [[73 73 73 -83] -83]
Test Case:  30 | Input/Output: [[-66 -23 -23 -23] -66]
Test Case:  31 | Input/Output: [[-3 -3 -3 -49] -49]
Test Case:  32 | Input/Output: [[-25 -25 -25 85] -25]
Test Case:  33 | Input/Output: [[2 75 75 75] 2]
Test Case:  34 | Input/Output: [[60 60 -91 60] -91]
Test Case:  35 | Input/Output: [[35 65 35 35] 35]
Test Case:  36 | Input/Output: [[-63 -62 -63 -63] -63]
Test Case:  37 | Input/Output: [[52 -5 52 52] -5]
Test Case:  38 | Input/Output: [[-34 25 -34 -34] -34]
Test Case:  39 | Input/Output: [[-12 -12 -13 -12] -13]
Test Case:  40 | Input/Output: [[89 89 89 44] 44]
Test Case:  41 | Input/Output: [[50 50 -65 50] -65]
Test Case:  42 | Input/Output: [[-18 -94 -94 -94] -94]
Test Case:  43 | Input/Output: [[-25 70 70 70] -25]
Test Case:  44 | Input/Output: [[16 -41 16 16] -41]
Test Case:  45 | Input/Output: [[-67 -67 41 -67] -67]
Test Case:  46 | Input/Output: [[-11 -70 -11 -11] -70]
Test Case:  47 | Input/Output: [[41 82 41 41] 41]
Test Case:  48 | Input/Output: [[-33 10 10 10] -33]
Test Case:  49 | Input/Output: [[-67 -67 95 -67] -67]
Test Case:  50 | Input/Output: [[62 62 62 -15] -15]
Test Case:  51 | Input/Output: [[92 -83 -83 -83] -83]
Test Case:  52 | Input/Output: [[-76 -76 84 -76] -76]
Test Case:  53 | Input/Output: [[23 23 -65 23] -65]
Test Case:  54 | Input/Output: [[-36 -36 -36 -63] -63]
Test Case:  55 | Input/Output: [[-97 -19 -19 -19] -97]
Test Case:  56 | Input/Output: [[65 65 -80 65] -80]
Test Case:  57 | Input/Output: [[-47 4 -47 -47] -47]
Test Case:  58 | Input/Output: [[2 87 2 2] 2]
Test Case:  59 | Input/Output: [[-81 -81 39 -81] -81]
Test Case:  60 | Input/Output: [[-54 -34 -34 -34] -54]
Test Case:  61 | Input/Output: [[48 -61 48 48] -61]
Test Case:  62 | Input/Output: [[-34 -49 -34 -34] -49]
Test Case:  63 | Input/Output: [[-33 -31 -33 -33] -33]
Test Case:  64 | Input/Output: [[-34 0 -34 -34] -34]
Test Case:  65 | Input/Output: [[76 -51 -51 -51] -51]
Test Case:  66 | Input/Output: [[38 37 38 38] 37]
Test Case:  67 | Input/Output: [[-69 -69 -69 75] -69]
Test Case:  68 | Input/Output: [[43 -13 43 43] -13]
Test Case:  69 | Input/Output: [[84 26 84 84] 26]
Test Case:  70 | Input/Output: [[46 46 46 -44] -44]
Test Case:  71 | Input/Output: [[23 -64 23 23] -64]
Test Case:  72 | Input/Output: [[17 -71 17 17] -71]
Test Case:  73 | Input/Output: [[-41 -41 -60 -41] -60]
Test Case:  74 | Input/Output: [[53 53 32 53] 32]
Test Case:  75 | Input/Output: [[28 28 8 28] 8]
Test Case:  76 | Input/Output: [[6 6 -11 6] -11]
Test Case:  77 | Input/Output: [[28 51 51 51] 28]
Test Case:  78 | Input/Output: [[60 60 60 12] 12]
Test Case:  79 | Input/Output: [[22 54 22 22] 22]
Test Case:  80 | Input/Output: [[-58 50 -58 -58] -58]
Test Case:  81 | Input/Output: [[-93 -71 -93 -93] -93]
Test Case:  82 | Input/Output: [[-73 -12 -73 -73] -73]
Test Case:  83 | Input/Output: [[58 58 58 93] 58]
Test Case:  84 | Input/Output: [[96 -41 96 96] -41]
Test Case:  85 | Input/Output: [[-89 -89 -98 -89] -98]
Test Case:  86 | Input/Output: [[-73 -68 -68 -68] -73]
Test Case:  87 | Input/Output: [[-100 -100 22 -100] -100]
Test Case:  88 | Input/Output: [[94 94 94 20] 20]
Test Case:  89 | Input/Output: [[14 14 84 14] 14]
Test Case:  90 | Input/Output: [[-89 -89 -89 -17] -89]
Test Case:  91 | Input/Output: [[23 23 41 23] 23]
Test Case:  92 | Input/Output: [[51 -40 -40 -40] -40]
Test Case:  93 | Input/Output: [[44 44 -43 44] -43]
Test Case:  94 | Input/Output: [[63 -89 -89 -89] -89]
Test Case:  95 | Input/Output: [[97 97 97 -48] -48]
Test Case:  96 | Input/Output: [[-16 82 82 82] -16]
Test Case:  97 | Input/Output: [[-4 99 99 99] -4]
Test Case:  98 | Input/Output: [[-23 22 -23 -23] -23]
Test Case:  99 | Input/Output: [[-23 -23 -14 -23] -23]
Test Case: 100 | Input/Output: [(58 58 58 58) 58]
Test Case: 101 | Input/Output: [(1 1 1 1) 1]
Test Case: 102 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 103 | Input/Output: [(71 71 71 71) 71]
Test Case: 104 | Input/Output: [(79 79 79 79) 79]
Test Case: 105 | Input/Output: [(90 90 90 90) 90]
Test Case: 106 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 107 | Input/Output: [(16 16 16 16) 16]
Test Case: 108 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 109 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 110 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 111 | Input/Output: [(75 75 75 75) 75]
Test Case: 112 | Input/Output: [(22 22 22 22) 22]
Test Case: 113 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 114 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 115 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 116 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 117 | Input/Output: [(74 74 74 74) 74]
Test Case: 118 | Input/Output: [(28 28 28 28) 28]
Test Case: 119 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 120 | Input/Output: [(81 81 81 81) 81]
Test Case: 121 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 122 | Input/Output: [(89 89 89 89) 89]
Test Case: 123 | Input/Output: [(25 25 25 25) 25]
Test Case: 124 | Input/Output: [(60 60 60 60) 60]
Test Case: 125 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 126 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 127 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 128 | Input/Output: [(60 60 60 60) 60]
Test Case: 129 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 130 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 131 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 132 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 133 | Input/Output: [(64 64 64 64) 64]
Test Case: 134 | Input/Output: [(37 37 37 37) 37]
Test Case: 135 | Input/Output: [(0 0 0 0) 0]
Test Case: 136 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 137 | Input/Output: [(98 98 98 98) 98]
Test Case: 138 | Input/Output: [(39 39 39 39) 39]
Test Case: 139 | Input/Output: [(38 38 38 38) 38]
Test Case: 140 | Input/Output: [(60 60 60 60) 60]
Test Case: 141 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 142 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 143 | Input/Output: [(7 7 7 7) 7]
Test Case: 144 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 145 | Input/Output: [(42 42 42 42) 42]
Test Case: 146 | Input/Output: [(76 76 76 76) 76]
Test Case: 147 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 148 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 149 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 150 | Input/Output: [(42 42 42 42) 42]
Test Case: 151 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 152 | Input/Output: [(73 73 73 73) 73]
Test Case: 153 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 154 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 155 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 156 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 157 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 158 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 159 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 160 | Input/Output: [(97 97 97 97) 97]
Test Case: 161 | Input/Output: [(11 11 11 11) 11]
Test Case: 162 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 163 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 164 | Input/Output: [(41 41 41 41) 41]
Test Case: 165 | Input/Output: [(74 74 74 74) 74]
Test Case: 166 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 167 | Input/Output: [(40 40 40 40) 40]
Test Case: 168 | Input/Output: [(59 59 59 59) 59]
Test Case: 169 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 170 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 171 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 172 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 173 | Input/Output: [(18 18 18 18) 18]
Test Case: 174 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 175 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 176 | Input/Output: [(56 56 56 56) 56]
Test Case: 177 | Input/Output: [(81 81 81 81) 81]
Test Case: 178 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 179 | Input/Output: [(100 100 100 100) 100]
Test Case: 180 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 181 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 182 | Input/Output: [(57 57 57 57) 57]
Test Case: 183 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 184 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 185 | Input/Output: [(26 26 26 26) 26]
Test Case: 186 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 187 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 188 | Input/Output: [(21 21 21 21) 21]
Test Case: 189 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 190 | Input/Output: [(52 52 52 52) 52]
Test Case: 191 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 192 | Input/Output: [(58 58 58 58) 58]
Test Case: 193 | Input/Output: [(4 4 4 4) 4]
Test Case: 194 | Input/Output: [(100 100 100 100) 100]
Test Case: 195 | Input/Output: [(15 15 15 15) 15]
Test Case: 196 | Input/Output: [(34 34 34 34) 34]
Test Case: 197 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 198 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 199 | Input/Output: [(34 34 34 34) 34]
Test Case: 200 | Input/Output: [(0 14 17 26) 0]
Test Case: 201 | Input/Output: [(51 77 95 28) 28]
Test Case: 202 | Input/Output: [(40 44 54 8) 8]
Test Case: 203 | Input/Output: [(16 56 80 0) 0]
Test Case: 204 | Input/Output: [(60 35 6 0) 0]
Test Case: 205 | Input/Output: [(77 46 58 96) 46]
Test Case: 206 | Input/Output: [(85 65 68 78) 65]
Test Case: 207 | Input/Output: [(83 67 78 20) 20]
Test Case: 208 | Input/Output: [(72 33 10 68) 10]
Test Case: 209 | Input/Output: [(38 4 47 34) 4]
Test Case: 210 | Input/Output: [(18 18 38 56) 18]
Test Case: 211 | Input/Output: [(49 59 20 91) 20]
Test Case: 212 | Input/Output: [(31 49 83 19) 19]
Test Case: 213 | Input/Output: [(95 22 69 16) 16]
Test Case: 214 | Input/Output: [(50 58 24 33) 24]
Test Case: 215 | Input/Output: [(3 72 26 21) 3]
Test Case: 216 | Input/Output: [(11 87 44 78) 11]
Test Case: 217 | Input/Output: [(83 13 91 75) 13]
Test Case: 218 | Input/Output: [(19 17 53 24) 17]
Test Case: 219 | Input/Output: [(68 94 8 38) 8]
Test Case: 220 | Input/Output: [(76 76 99 39) 39]
Test Case: 221 | Input/Output: [(39 48 59 82) 39]
Test Case: 222 | Input/Output: [(87 65 88 66) 65]
Test Case: 223 | Input/Output: [(96 69 8 56) 8]
Test Case: 224 | Input/Output: [(35 19 19 90) 19]
Test Case: 225 | Input/Output: [(14 100 41 32) 14]
Test Case: 226 | Input/Output: [(12 61 100 43) 12]
Test Case: 227 | Input/Output: [(75 44 56 85) 44]
Test Case: 228 | Input/Output: [(13 46 46 67) 13]
Test Case: 229 | Input/Output: [(31 18 61 90) 18]
Test Case: 230 | Input/Output: [(23 62 91 57) 23]
Test Case: 231 | Input/Output: [(94 61 23 13) 13]
Test Case: 232 | Input/Output: [(82 91 62 64) 62]
Test Case: 233 | Input/Output: [(42 70 3 20) 3]
Test Case: 234 | Input/Output: [(54 50 77 9) 9]
Test Case: 235 | Input/Output: [(53 96 38 100) 38]
Test Case: 236 | Input/Output: [(16 13 36 15) 13]
Test Case: 237 | Input/Output: [(13 44 55 55) 13]
Test Case: 238 | Input/Output: [(55 60 96 73) 55]
Test Case: 239 | Input/Output: [(52 18 74 20) 18]
Test Case: 240 | Input/Output: [(20 86 65 61) 20]
Test Case: 241 | Input/Output: [(46 100 78 20) 20]
Test Case: 242 | Input/Output: [(39 93 81 39) 39]
Test Case: 243 | Input/Output: [(35 40 55 33) 33]
Test Case: 244 | Input/Output: [(22 92 31 83) 22]
Test Case: 245 | Input/Output: [(59 21 27 69) 21]
Test Case: 246 | Input/Output: [(59 54 11 83) 11]
Test Case: 247 | Input/Output: [(27 4 42 29) 4]
Test Case: 248 | Input/Output: [(3 85 100 6) 3]
Test Case: 249 | Input/Output: [(22 1 5 61) 1]
Test Case: 250 | Input/Output: [(11 1 76 63) 1]
Test Case: 251 | Input/Output: [(100 68 59 16) 16]
Test Case: 252 | Input/Output: [(8 60 13 83) 8]
Test Case: 253 | Input/Output: [(81 17 10 77) 10]
Test Case: 254 | Input/Output: [(37 96 49 35) 35]
Test Case: 255 | Input/Output: [(30 88 14 20) 14]
Test Case: 256 | Input/Output: [(96 38 74 54) 38]
Test Case: 257 | Input/Output: [(50 12 29 70) 12]
Test Case: 258 | Input/Output: [(98 11 93 63) 11]
Test Case: 259 | Input/Output: [(9 36 20 36) 9]
Test Case: 260 | Input/Output: [(4 39 5 83) 4]
Test Case: 261 | Input/Output: [(16 98 24 68) 16]
Test Case: 262 | Input/Output: [(98 60 39 1) 1]
Test Case: 263 | Input/Output: [(11 3 91 28) 3]
Test Case: 264 | Input/Output: [(83 2 92 88) 2]
Test Case: 265 | Input/Output: [(56 72 23 100) 23]
Test Case: 266 | Input/Output: [(92 61 58 54) 54]
Test Case: 267 | Input/Output: [(65 100 48 67) 48]
Test Case: 268 | Input/Output: [(58 15 67 18) 15]
Test Case: 269 | Input/Output: [(65 35 100 80) 35]
Test Case: 270 | Input/Output: [(27 48 66 22) 22]
Test Case: 271 | Input/Output: [(32 31 4 39) 4]
Test Case: 272 | Input/Output: [(29 64 9 49) 9]
Test Case: 273 | Input/Output: [(32 35 18 57) 18]
Test Case: 274 | Input/Output: [(45 17 60 49) 17]
Test Case: 275 | Input/Output: [(10 43 4 93) 4]
Test Case: 276 | Input/Output: [(40 66 83 76) 40]
Test Case: 277 | Input/Output: [(17 36 95 55) 17]
Test Case: 278 | Input/Output: [(33 15 50 72) 15]
Test Case: 279 | Input/Output: [(13 93 22 0) 0]
Test Case: 280 | Input/Output: [(21 10 78 19) 10]
Test Case: 281 | Input/Output: [(48 43 80 23) 23]
Test Case: 282 | Input/Output: [(16 69 32 48) 16]
Test Case: 283 | Input/Output: [(68 9 62 70) 9]
Test Case: 284 | Input/Output: [(54 38 65 94) 38]
Test Case: 285 | Input/Output: [(63 69 81 73) 63]
Test Case: 286 | Input/Output: [(12 27 53 15) 12]
Test Case: 287 | Input/Output: [(52 5 53 66) 5]
Test Case: 288 | Input/Output: [(100 62 39 23) 23]
Test Case: 289 | Input/Output: [(66 12 80 91) 12]
Test Case: 290 | Input/Output: [(54 33 50 9) 9]
Test Case: 291 | Input/Output: [(46 97 36 2) 2]
Test Case: 292 | Input/Output: [(67 46 90 55) 46]
Test Case: 293 | Input/Output: [(14 55 30 74) 14]
Test Case: 294 | Input/Output: [(16 88 63 77) 16]
Test Case: 295 | Input/Output: [(33 62 77 42) 33]
Test Case: 296 | Input/Output: [(36 96 100 41) 36]
Test Case: 297 | Input/Output: [(89 11 66 59) 11]
Test Case: 298 | Input/Output: [(77 8 61 27) 8]
Test Case: 299 | Input/Output: [(66 76 15 65) 15]
Test Case: 300 | Input/Output: [(16 49 35 91) 16]
Test Case: 301 | Input/Output: [(28 48 85 46) 28]
Test Case: 302 | Input/Output: [(27 17 43 27) 17]
Test Case: 303 | Input/Output: [(4 35 11 47) 4]
Test Case: 304 | Input/Output: [(93 80 23 65) 23]
Test Case: 305 | Input/Output: [(89 0 41 60) 0]
Test Case: 306 | Input/Output: [(57 38 10 36) 10]
Test Case: 307 | Input/Output: [(15 89 2 63) 2]
Test Case: 308 | Input/Output: [(17 1 79 65) 1]
Test Case: 309 | Input/Output: [(79 27 52 58) 27]
Test Case: 310 | Input/Output: [(98 8 85 39) 8]
Test Case: 311 | Input/Output: [(22 21 53 43) 21]
Test Case: 312 | Input/Output: [(47 30 88 62) 30]
Test Case: 313 | Input/Output: [(78 91 69 84) 69]
Test Case: 314 | Input/Output: [(34 72 70 95) 34]
Test Case: 315 | Input/Output: [(83 85 90 36) 36]
Test Case: 316 | Input/Output: [(63 13 61 89) 13]
Test Case: 317 | Input/Output: [(58 35 1 96) 1]
Test Case: 318 | Input/Output: [(97 95 2 3) 2]
Test Case: 319 | Input/Output: [(95 81 87 2) 2]
Test Case: 320 | Input/Output: [(27 21 54 19) 19]
Test Case: 321 | Input/Output: [(93 83 18 4) 4]
Test Case: 322 | Input/Output: [(16 22 85 38) 16]
Test Case: 323 | Input/Output: [(80 31 88 17) 17]
Test Case: 324 | Input/Output: [(71 16 27 35) 16]
Test Case: 325 | Input/Output: [(55 61 36 87) 36]
Test Case: 326 | Input/Output: [(79 34 66 100) 34]
Test Case: 327 | Input/Output: [(26 69 73 55) 26]
Test Case: 328 | Input/Output: [(12 73 85 31) 12]
Test Case: 329 | Input/Output: [(46 89 10 84) 10]
Test Case: 330 | Input/Output: [(10 47 51 39) 10]
Test Case: 331 | Input/Output: [(35 64 20 73) 20]
Test Case: 332 | Input/Output: [(74 76 40 86) 40]
Test Case: 333 | Input/Output: [(100 34 34 36) 34]
Test Case: 334 | Input/Output: [(44 92 20 89) 20]
Test Case: 335 | Input/Output: [(73 38 1 26) 1]
Test Case: 336 | Input/Output: [(1 75 27 96) 1]
Test Case: 337 | Input/Output: [(25 10 14 13) 10]
Test Case: 338 | Input/Output: [(99 70 44 13) 13]
Test Case: 339 | Input/Output: [(11 22 76 71) 11]
Test Case: 340 | Input/Output: [(56 74 0 41) 0]
Test Case: 341 | Input/Output: [(68 2 33 47) 2]
Test Case: 342 | Input/Output: [(21 91 37 46) 21]
Test Case: 343 | Input/Output: [(66 89 70 46) 46]
Test Case: 344 | Input/Output: [(91 82 88 93) 82]
Test Case: 345 | Input/Output: [(68 69 54 70) 54]
Test Case: 346 | Input/Output: [(54 92 47 81) 47]
Test Case: 347 | Input/Output: [(38 62 80 10) 10]
Test Case: 348 | Input/Output: [(65 19 26 100) 19]
Test Case: 349 | Input/Output: [(16 64 22 19) 16]
Test Case: 350 | Input/Output: [(25 82 7 83) 7]
Test Case: 351 | Input/Output: [(17 86 85 79) 17]
Test Case: 352 | Input/Output: [(11 22 56 1) 1]
Test Case: 353 | Input/Output: [(38 92 58 69) 38]
Test Case: 354 | Input/Output: [(31 91 45 78) 31]
Test Case: 355 | Input/Output: [(62 2 78 83) 2]
Test Case: 356 | Input/Output: [(80 27 89 35) 27]
Test Case: 357 | Input/Output: [(80 5 76 17) 5]
Test Case: 358 | Input/Output: [(86 92 76 61) 61]
Test Case: 359 | Input/Output: [(80 31 60 98) 31]
Test Case: 360 | Input/Output: [(97 45 10 53) 10]
Test Case: 361 | Input/Output: [(2 24 27 31) 2]
Test Case: 362 | Input/Output: [(83 97 55 20) 20]
Test Case: 363 | Input/Output: [(25 81 39 9) 9]
Test Case: 364 | Input/Output: [(82 94 84 53) 53]
Test Case: 365 | Input/Output: [(10 53 81 74) 10]
Test Case: 366 | Input/Output: [(98 17 47 81) 17]
Test Case: 367 | Input/Output: [(62 76 3 29) 3]
Test Case: 368 | Input/Output: [(80 12 11 66) 11]
Test Case: 369 | Input/Output: [(13 18 78 92) 13]
Test Case: 370 | Input/Output: [(77 39 78 87) 39]
Test Case: 371 | Input/Output: [(75 90 99 26) 26]
Test Case: 372 | Input/Output: [(2 78 87 13) 2]
Test Case: 373 | Input/Output: [(84 2 89 98) 2]
Test Case: 374 | Input/Output: [(95 46 30 47) 30]
Test Case: 375 | Input/Output: [(7 92 83 25) 7]
Test Case: 376 | Input/Output: [(0 92 18 92) 0]
Test Case: 377 | Input/Output: [(12 63 14 45) 12]
Test Case: 378 | Input/Output: [(81 0 57 65) 0]
Test Case: 379 | Input/Output: [(71 42 35 64) 35]
Test Case: 380 | Input/Output: [(13 44 20 56) 13]
Test Case: 381 | Input/Output: [(19 55 89 81) 19]
Test Case: 382 | Input/Output: [(67 9 60 94) 9]
Test Case: 383 | Input/Output: [(22 60 69 51) 22]
Test Case: 384 | Input/Output: [(48 62 63 90) 48]
Test Case: 385 | Input/Output: [(61 56 82 67) 56]
Test Case: 386 | Input/Output: [(35 89 32 66) 32]
Test Case: 387 | Input/Output: [(34 71 41 8) 8]
Test Case: 388 | Input/Output: [(99 59 6 7) 6]
Test Case: 389 | Input/Output: [(37 51 56 89) 37]
Test Case: 390 | Input/Output: [(79 3 15 83) 3]
Test Case: 391 | Input/Output: [(75 3 21 51) 3]
Test Case: 392 | Input/Output: [(81 68 15 38) 15]
Test Case: 393 | Input/Output: [(12 22 83 67) 12]
Test Case: 394 | Input/Output: [(13 75 56 53) 13]
Test Case: 395 | Input/Output: [(54 17 64 0) 0]
Test Case: 396 | Input/Output: [(70 30 61 32) 30]
Test Case: 397 | Input/Output: [(99 41 59 26) 26]
Test Case: 398 | Input/Output: [(59 73 100 31) 31]
Test Case: 399 | Input/Output: [(16 98 80 92) 16]
Test Case: 400 | Input/Output: [(71 -10 -23 -89) -89]
Test Case: 401 | Input/Output: [(78 -83 -90 79) -90]
Test Case: 402 | Input/Output: [(93 43 -92 -44) -92]
Test Case: 403 | Input/Output: [(-74 -62 98 -34) -74]
Test Case: 404 | Input/Output: [(-57 49 59 -30) -57]
Test Case: 405 | Input/Output: [(-78 32 -61 91) -78]
Test Case: 406 | Input/Output: [(-75 -40 -62 -4) -75]
Test Case: 407 | Input/Output: [(-36 84 9 -91) -91]
Test Case: 408 | Input/Output: [(38 -12 -16 62) -16]
Test Case: 409 | Input/Output: [(-58 19 14 -67) -67]
Test Case: 410 | Input/Output: [(-30 20 6 82) -30]
Test Case: 411 | Input/Output: [(12 7 9 -77) -77]
Test Case: 412 | Input/Output: [(-58 8 -72 -49) -72]
Test Case: 413 | Input/Output: [(71 -27 28 -55) -55]
Test Case: 414 | Input/Output: [(73 -24 70 68) -24]
Test Case: 415 | Input/Output: [(-22 -91 -94 13) -94]
Test Case: 416 | Input/Output: [(77 82 -88 40) -88]
Test Case: 417 | Input/Output: [(11 20 -40 76) -40]
Test Case: 418 | Input/Output: [(-85 -16 14 89) -85]
Test Case: 419 | Input/Output: [(66 -11 35 -59) -59]
Test Case: 420 | Input/Output: [(-83 66 -85 87) -85]
Test Case: 421 | Input/Output: [(-72 12 93 49) -72]
Test Case: 422 | Input/Output: [(-50 1 -21 58) -50]
Test Case: 423 | Input/Output: [(-58 -28 -31 85) -58]
Test Case: 424 | Input/Output: [(-91 21 -31 -63) -91]
Test Case: 425 | Input/Output: [(64 -86 -93 76) -93]
Test Case: 426 | Input/Output: [(36 -32 -45 84) -45]
Test Case: 427 | Input/Output: [(20 -73 13 99) -73]
Test Case: 428 | Input/Output: [(89 -95 35 -84) -95]
Test Case: 429 | Input/Output: [(-17 -96 24 16) -96]
Test Case: 430 | Input/Output: [(78 -2 74 5) -2]
Test Case: 431 | Input/Output: [(93 -83 78 63) -83]
Test Case: 432 | Input/Output: [(61 49 68 -38) -38]
Test Case: 433 | Input/Output: [(7 29 99 70) 7]
Test Case: 434 | Input/Output: [(70 -26 47 -42) -42]
Test Case: 435 | Input/Output: [(-17 91 -75 85) -75]
Test Case: 436 | Input/Output: [(-65 -10 -5 -14) -65]
Test Case: 437 | Input/Output: [(43 36 47 54) 36]
Test Case: 438 | Input/Output: [(46 -44 -84 -63) -84]
Test Case: 439 | Input/Output: [(72 -20 40 -64) -64]
Test Case: 440 | Input/Output: [(-49 30 35 -92) -92]
Test Case: 441 | Input/Output: [(37 -56 -45 46) -56]
Test Case: 442 | Input/Output: [(56 37 -13 -92) -92]
Test Case: 443 | Input/Output: [(-61 -12 44 32) -61]
Test Case: 444 | Input/Output: [(-28 -40 -42 -24) -42]
Test Case: 445 | Input/Output: [(-65 90 -27 -97) -97]
Test Case: 446 | Input/Output: [(-68 -89 -90 78) -90]
Test Case: 447 | Input/Output: [(-73 -75 -32 -23) -75]
Test Case: 448 | Input/Output: [(19 -40 -35 -65) -65]
Test Case: 449 | Input/Output: [(-51 45 -26 25) -51]
Test Case: 450 | Input/Output: [(-26 90 -41 64) -41]
Test Case: 451 | Input/Output: [(-34 -13 -42 -67) -67]
Test Case: 452 | Input/Output: [(52 -5 -11 -24) -24]
Test Case: 453 | Input/Output: [(-54 41 -21 -70) -70]
Test Case: 454 | Input/Output: [(-56 58 72 56) -56]
Test Case: 455 | Input/Output: [(-1 56 -100 -99) -100]
Test Case: 456 | Input/Output: [(-39 57 -56 -63) -63]
Test Case: 457 | Input/Output: [(36 19 43 56) 19]
Test Case: 458 | Input/Output: [(-16 -32 -2 74) -32]
Test Case: 459 | Input/Output: [(-88 82 96 -1) -88]
Test Case: 460 | Input/Output: [(38 18 69 -21) -21]
Test Case: 461 | Input/Output: [(64 -83 86 73) -83]
Test Case: 462 | Input/Output: [(-62 73 49 39) -62]
Test Case: 463 | Input/Output: [(53 10 -91 75) -91]
Test Case: 464 | Input/Output: [(56 71 83 -93) -93]
Test Case: 465 | Input/Output: [(-2 -24 98 80) -24]
Test Case: 466 | Input/Output: [(-63 -72 -83 89) -83]
Test Case: 467 | Input/Output: [(77 93 47 93) 47]
Test Case: 468 | Input/Output: [(-26 -7 33 4) -26]
Test Case: 469 | Input/Output: [(14 6 -83 94) -83]
Test Case: 470 | Input/Output: [(2 -89 -73 -88) -89]
Test Case: 471 | Input/Output: [(-67 95 41 -9) -67]
Test Case: 472 | Input/Output: [(19 -55 -59 -25) -59]
Test Case: 473 | Input/Output: [(29 100 -65 -7) -65]
Test Case: 474 | Input/Output: [(-82 10 91 87) -82]
Test Case: 475 | Input/Output: [(-57 -79 21 -70) -79]
Test Case: 476 | Input/Output: [(-27 -87 64 8) -87]
Test Case: 477 | Input/Output: [(-11 32 34 -24) -24]
Test Case: 478 | Input/Output: [(-100 100 65 -28) -100]
Test Case: 479 | Input/Output: [(-3 73 29 90) -3]
Test Case: 480 | Input/Output: [(-73 77 49 -19) -73]
Test Case: 481 | Input/Output: [(-66 -86 -35 83) -86]
Test Case: 482 | Input/Output: [(24 -9 59 -72) -72]
Test Case: 483 | Input/Output: [(61 53 93 87) 53]
Test Case: 484 | Input/Output: [(95 34 11 -59) -59]
Test Case: 485 | Input/Output: [(-10 4 93 34) -10]
Test Case: 486 | Input/Output: [(86 -65 17 -51) -65]
Test Case: 487 | Input/Output: [(29 -84 94 8) -84]
Test Case: 488 | Input/Output: [(92 -73 -35 -28) -73]
Test Case: 489 | Input/Output: [(-88 7 -49 -68) -88]
Test Case: 490 | Input/Output: [(68 -32 -79 -74) -79]
Test Case: 491 | Input/Output: [(-87 11 -54 -50) -87]
Test Case: 492 | Input/Output: [(-72 25 34 51) -72]
Test Case: 493 | Input/Output: [(31 -52 8 11) -52]
Test Case: 494 | Input/Output: [(69 50 -82 -42) -82]
Test Case: 495 | Input/Output: [(-40 -81 11 -52) -81]
Test Case: 496 | Input/Output: [(8 6 -88 -51) -88]
Test Case: 497 | Input/Output: [(-3 -69 3 -39) -69]
Test Case: 498 | Input/Output: [(83 -71 -79 7) -79]
Test Case: 499 | Input/Output: [(-33 -77 12 -84) -84]
Test Case: 500 | Input/Output: [(-53 19 81 55) -53]
Test Case: 501 | Input/Output: [(-79 -92 -18 37) -92]
Test Case: 502 | Input/Output: [(53 -65 22 -37) -65]
Test Case: 503 | Input/Output: [(38 -25 -42 -78) -78]
Test Case: 504 | Input/Output: [(-63 -48 -8 51) -63]
Test Case: 505 | Input/Output: [(90 2 -80 -54) -80]
Test Case: 506 | Input/Output: [(-41 47 98 -100) -100]
Test Case: 507 | Input/Output: [(65 90 -24 -68) -68]
Test Case: 508 | Input/Output: [(-25 -88 22 27) -88]
Test Case: 509 | Input/Output: [(-47 -39 98 -58) -58]
Test Case: 510 | Input/Output: [(-3 71 -3 62) -3]
Test Case: 511 | Input/Output: [(-56 28 -98 -8) -98]
Test Case: 512 | Input/Output: [(-39 2 -95 69) -95]
Test Case: 513 | Input/Output: [(-10 24 90 31) -10]
Test Case: 514 | Input/Output: [(-18 -59 -65 52) -65]
Test Case: 515 | Input/Output: [(-13 -93 96 -38) -93]
Test Case: 516 | Input/Output: [(93 -57 67 40) -57]
Test Case: 517 | Input/Output: [(59 78 30 40) 30]
Test Case: 518 | Input/Output: [(54 21 -41 -85) -85]
Test Case: 519 | Input/Output: [(13 32 78 47) 13]
Test Case: 520 | Input/Output: [(39 -8 -68 -25) -68]
Test Case: 521 | Input/Output: [(72 95 93 99) 72]
Test Case: 522 | Input/Output: [(56 -91 57 47) -91]
Test Case: 523 | Input/Output: [(-15 78 -39 -52) -52]
Test Case: 524 | Input/Output: [(1 -47 94 -28) -47]
Test Case: 525 | Input/Output: [(-3 -24 19 -34) -34]
Test Case: 526 | Input/Output: [(-27 -39 40 4) -39]
Test Case: 527 | Input/Output: [(81 74 20 81) 20]
Test Case: 528 | Input/Output: [(-17 -46 45 49) -46]
Test Case: 529 | Input/Output: [(-52 62 -26 76) -52]
Test Case: 530 | Input/Output: [(-17 40 -23 -74) -74]
Test Case: 531 | Input/Output: [(80 -99 -51 74) -99]
Test Case: 532 | Input/Output: [(68 38 -63 28) -63]
Test Case: 533 | Input/Output: [(-91 64 15 49) -91]
Test Case: 534 | Input/Output: [(43 8 -25 -16) -25]
Test Case: 535 | Input/Output: [(86 -55 -5 -94) -94]
Test Case: 536 | Input/Output: [(75 15 38 -60) -60]
Test Case: 537 | Input/Output: [(-47 59 22 80) -47]
Test Case: 538 | Input/Output: [(-58 5 61 -11) -58]
Test Case: 539 | Input/Output: [(57 81 -2 -4) -4]
Test Case: 540 | Input/Output: [(87 81 31 -81) -81]
Test Case: 541 | Input/Output: [(-44 68 36 23) -44]
Test Case: 542 | Input/Output: [(33 -36 -99 -78) -99]
Test Case: 543 | Input/Output: [(-50 -6 -45 54) -50]
Test Case: 544 | Input/Output: [(9 95 73 5) 5]
Test Case: 545 | Input/Output: [(-35 -89 -37 -61) -89]
Test Case: 546 | Input/Output: [(-45 -25 67 36) -45]
Test Case: 547 | Input/Output: [(62 43 14 66) 14]
Test Case: 548 | Input/Output: [(-86 -45 -86 -90) -90]
Test Case: 549 | Input/Output: [(-26 -43 56 -67) -67]
Test Case: 550 | Input/Output: [(-100 74 -48 -89) -100]
Test Case: 551 | Input/Output: [(-84 -65 2 62) -84]
Test Case: 552 | Input/Output: [(-14 41 22 -75) -75]
Test Case: 553 | Input/Output: [(8 14 22 23) 8]
Test Case: 554 | Input/Output: [(-60 -74 -22 -41) -74]
Test Case: 555 | Input/Output: [(29 32 50 90) 29]
Test Case: 556 | Input/Output: [(-69 -6 6 5) -69]
Test Case: 557 | Input/Output: [(-90 86 -75 -49) -90]
Test Case: 558 | Input/Output: [(-81 19 -27 -99) -99]
Test Case: 559 | Input/Output: [(32 -63 14 69) -63]
Test Case: 560 | Input/Output: [(-58 28 -96 68) -96]
Test Case: 561 | Input/Output: [(-40 98 -96 2) -96]
Test Case: 562 | Input/Output: [(18 19 -98 98) -98]
Test Case: 563 | Input/Output: [(-30 -76 -21 -31) -76]
Test Case: 564 | Input/Output: [(35 -67 -66 -26) -67]
Test Case: 565 | Input/Output: [(-93 -58 86 -36) -93]
Test Case: 566 | Input/Output: [(-72 62 47 99) -72]
Test Case: 567 | Input/Output: [(-67 15 72 -96) -96]
Test Case: 568 | Input/Output: [(-38 77 -85 92) -85]
Test Case: 569 | Input/Output: [(-17 30 -64 67) -64]
Test Case: 570 | Input/Output: [(45 -22 -24 19) -24]
Test Case: 571 | Input/Output: [(-59 -83 -98 23) -98]
Test Case: 572 | Input/Output: [(-13 -55 50 -77) -77]
Test Case: 573 | Input/Output: [(-90 3 90 8) -90]
Test Case: 574 | Input/Output: [(10 -35 -23 -74) -74]
Test Case: 575 | Input/Output: [(-51 -69 -13 9) -69]
Test Case: 576 | Input/Output: [(-49 59 -99 -42) -99]
Test Case: 577 | Input/Output: [(74 -3 -25 -16) -25]
Test Case: 578 | Input/Output: [(-98 -42 42 78) -98]
Test Case: 579 | Input/Output: [(-22 18 23 74) -22]
Test Case: 580 | Input/Output: [(-69 -18 -16 63) -69]
Test Case: 581 | Input/Output: [(93 78 -27 -72) -72]
Test Case: 582 | Input/Output: [(93 -72 56 50) -72]
Test Case: 583 | Input/Output: [(59 81 91 84) 59]
Test Case: 584 | Input/Output: [(34 -100 -2 80) -100]
Test Case: 585 | Input/Output: [(40 26 85 -98) -98]
Test Case: 586 | Input/Output: [(55 -17 -13 -16) -17]
Test Case: 587 | Input/Output: [(-6 -64 -100 75) -100]
Test Case: 588 | Input/Output: [(-31 -8 -44 -57) -57]
Test Case: 589 | Input/Output: [(46 -16 -31 82) -31]
Test Case: 590 | Input/Output: [(2 -84 40 -30) -84]
Test Case: 591 | Input/Output: [(-51 85 22 -46) -51]
Test Case: 592 | Input/Output: [(49 -11 -18 -72) -72]
Test Case: 593 | Input/Output: [(22 -63 -94 91) -94]
Test Case: 594 | Input/Output: [(93 87 24 -59) -59]
Test Case: 595 | Input/Output: [(-15 -83 85 -15) -83]
Test Case: 596 | Input/Output: [(87 -84 -63 88) -84]
Test Case: 597 | Input/Output: [(-22 11 90 -85) -85]
Test Case: 598 | Input/Output: [(64 -47 -49 100) -49]
Test Case: 599 | Input/Output: [(-35 -65 75 -56) -65]
Test Case: 600 | Input/Output: [(96 82 36 79) 36]
Test Case: 601 | Input/Output: [(6 -51 -96 -56) -96]
Test Case: 602 | Input/Output: [(-55 19 -9 79) -55]
Test Case: 603 | Input/Output: [(-69 17 -25 1) -69]
Test Case: 604 | Input/Output: [(8 -17 43 13) -17]
Test Case: 605 | Input/Output: [(-46 -43 -42 -91) -91]
Test Case: 606 | Input/Output: [(88 -52 -26 -28) -52]
Test Case: 607 | Input/Output: [(72 -68 -33 -82) -82]
Test Case: 608 | Input/Output: [(-29 9 92 33) -29]
Test Case: 609 | Input/Output: [(76 17 -70 -54) -70]
Test Case: 610 | Input/Output: [(80 38 -75 -22) -75]
Test Case: 611 | Input/Output: [(50 -96 65 9) -96]
Test Case: 612 | Input/Output: [(93 83 61 -57) -57]
Test Case: 613 | Input/Output: [(-1 -34 -52 -38) -52]
Test Case: 614 | Input/Output: [(-86 62 19 75) -86]
Test Case: 615 | Input/Output: [(26 0 57 -39) -39]
Test Case: 616 | Input/Output: [(94 -40 45 -8) -40]
Test Case: 617 | Input/Output: [(59 18 -28 -47) -47]
Test Case: 618 | Input/Output: [(69 -20 -8 100) -20]
Test Case: 619 | Input/Output: [(-73 53 95 -3) -73]
Test Case: 620 | Input/Output: [(-24 -74 -70 -91) -91]
Test Case: 621 | Input/Output: [(-26 -66 -32 -31) -66]
Test Case: 622 | Input/Output: [(-21 2 -93 46) -93]
Test Case: 623 | Input/Output: [(36 7 28 94) 7]
Test Case: 624 | Input/Output: [(-61 50 38 -32) -61]
Test Case: 625 | Input/Output: [(-70 -78 89 81) -78]
Test Case: 626 | Input/Output: [(32 36 -63 19) -63]
Test Case: 627 | Input/Output: [(65 -51 75 74) -51]
Test Case: 628 | Input/Output: [(-66 54 2 70) -66]
Test Case: 629 | Input/Output: [(17 -12 28 -27) -27]
Test Case: 630 | Input/Output: [(20 76 61 -65) -65]
Test Case: 631 | Input/Output: [(-84 67 -51 -69) -84]
Test Case: 632 | Input/Output: [(-36 -79 -53 88) -79]
Test Case: 633 | Input/Output: [(54 1 -71 71) -71]
Test Case: 634 | Input/Output: [(95 34 78 -95) -95]
Test Case: 635 | Input/Output: [(-12 82 85 18) -12]
Test Case: 636 | Input/Output: [(-31 -44 -33 -79) -79]
Test Case: 637 | Input/Output: [(62 65 94 -59) -59]
Test Case: 638 | Input/Output: [(90 58 -29 -74) -74]
Test Case: 639 | Input/Output: [(-71 -30 -33 4) -71]
Test Case: 640 | Input/Output: [(68 -81 -48 -50) -81]
Test Case: 641 | Input/Output: [(-95 -13 -42 -68) -95]
Test Case: 642 | Input/Output: [(1 58 -88 46) -88]
Test Case: 643 | Input/Output: [(39 -87 95 -40) -87]
Test Case: 644 | Input/Output: [(-55 -43 16 -63) -63]
Test Case: 645 | Input/Output: [(53 21 44 -78) -78]
Test Case: 646 | Input/Output: [(-45 91 -61 90) -61]
Test Case: 647 | Input/Output: [(-100 -63 -73 3) -100]
Test Case: 648 | Input/Output: [(3 -70 17 -96) -96]
Test Case: 649 | Input/Output: [(-62 -29 -88 64) -88]
Test Case: 650 | Input/Output: [(83 5 -25 23) -25]
Test Case: 651 | Input/Output: [(89 -89 -100 53) -100]
Test Case: 652 | Input/Output: [(71 -51 77 37) -51]
Test Case: 653 | Input/Output: [(-32 68 36 -85) -85]
Test Case: 654 | Input/Output: [(-72 -99 -92 -74) -99]
Test Case: 655 | Input/Output: [(35 -47 -74 -15) -74]
Test Case: 656 | Input/Output: [(-53 41 -49 56) -53]
Test Case: 657 | Input/Output: [(21 -9 23 -36) -36]
Test Case: 658 | Input/Output: [(-72 67 -68 -17) -72]
Test Case: 659 | Input/Output: [(-64 78 17 -57) -64]
Test Case: 660 | Input/Output: [(-75 28 1 -87) -87]
Test Case: 661 | Input/Output: [(-86 22 -13 -76) -86]
Test Case: 662 | Input/Output: [(-78 57 53 -32) -78]
Test Case: 663 | Input/Output: [(-97 -82 -87 10) -97]
Test Case: 664 | Input/Output: [(93 -82 -72 -47) -82]
Test Case: 665 | Input/Output: [(41 -53 44 -13) -53]
Test Case: 666 | Input/Output: [(-80 1 23 67) -80]
Test Case: 667 | Input/Output: [(-100 47 -7 -76) -100]
Test Case: 668 | Input/Output: [(-74 71 -36 -27) -74]
Test Case: 669 | Input/Output: [(-85 -38 -45 73) -85]
Test Case: 670 | Input/Output: [(0 -3 64 -3) -3]
Test Case: 671 | Input/Output: [(73 -49 -73 13) -73]
Test Case: 672 | Input/Output: [(-65 -30 -42 56) -65]
Test Case: 673 | Input/Output: [(17 23 14 -41) -41]
Test Case: 674 | Input/Output: [(-71 27 59 34) -71]
Test Case: 675 | Input/Output: [(4 -61 -85 79) -85]
Test Case: 676 | Input/Output: [(-83 -51 -22 -31) -83]
Test Case: 677 | Input/Output: [(18 -58 94 -89) -89]
Test Case: 678 | Input/Output: [(22 -30 11 31) -30]
Test Case: 679 | Input/Output: [(-41 -7 -54 -18) -54]
Test Case: 680 | Input/Output: [(-78 -56 31 72) -78]
Test Case: 681 | Input/Output: [(36 -20 70 -9) -20]
Test Case: 682 | Input/Output: [(65 63 83 58) 58]
Test Case: 683 | Input/Output: [(-29 53 -94 -38) -94]
Test Case: 684 | Input/Output: [(91 92 56 82) 56]
Test Case: 685 | Input/Output: [(-6 40 13 -100) -100]
Test Case: 686 | Input/Output: [(-49 52 -81 98) -81]
Test Case: 687 | Input/Output: [(9 -7 53 58) -7]
Test Case: 688 | Input/Output: [(80 63 -81 -1) -81]
Test Case: 689 | Input/Output: [(93 70 20 -96) -96]
Test Case: 690 | Input/Output: [(-7 12 57 -21) -21]
Test Case: 691 | Input/Output: [(16 58 50 1) 1]
Test Case: 692 | Input/Output: [(-64 94 22 32) -64]
Test Case: 693 | Input/Output: [(-87 -49 61 -24) -87]
Test Case: 694 | Input/Output: [(-80 -87 -68 -24) -87]
Test Case: 695 | Input/Output: [(45 -78 83 88) -78]
Test Case: 696 | Input/Output: [(86 -32 -24 46) -32]
Test Case: 697 | Input/Output: [(100 -20 94 29) -20]
Test Case: 698 | Input/Output: [(84 20 -28 -30) -30]
Test Case: 699 | Input/Output: [(65 -37 22 68) -37]
Test Case: 700 | Input/Output: [(61 15 -61 -95) -95]
Test Case: 701 | Input/Output: [(-14 10 -95 -99) -99]
Test Case: 702 | Input/Output: [(-51 44 63 23) -51]
Test Case: 703 | Input/Output: [(9 -88 -32 -17) -88]
Test Case: 704 | Input/Output: [(94 18 77 80) 18]
Test Case: 705 | Input/Output: [(-93 -95 76 -10) -95]
Test Case: 706 | Input/Output: [(-98 -67 -10 -39) -98]
Test Case: 707 | Input/Output: [(-67 41 37 3) -67]
Test Case: 708 | Input/Output: [(-4 -95 -84 61) -95]
Test Case: 709 | Input/Output: [(-38 -51 38 81) -51]
Test Case: 710 | Input/Output: [(27 12 66 93) 12]
Test Case: 711 | Input/Output: [(-82 88 33 -85) -85]
Test Case: 712 | Input/Output: [(12 -41 70 -9) -41]
Test Case: 713 | Input/Output: [(91 2 -31 -42) -42]
Test Case: 714 | Input/Output: [(3 -74 67 40) -74]
Test Case: 715 | Input/Output: [(18 -72 78 99) -72]
Test Case: 716 | Input/Output: [(37 -47 39 37) -47]
Test Case: 717 | Input/Output: [(-54 -82 -27 71) -82]
Test Case: 718 | Input/Output: [(-27 -88 69 -86) -88]
Test Case: 719 | Input/Output: [(83 69 -48 -77) -77]
Test Case: 720 | Input/Output: [(-84 78 -14 -95) -95]
Test Case: 721 | Input/Output: [(-30 41 4 -35) -35]
Test Case: 722 | Input/Output: [(63 62 -47 -55) -55]
Test Case: 723 | Input/Output: [(-65 0 85 -49) -65]
Test Case: 724 | Input/Output: [(68 -24 -46 -21) -46]
Test Case: 725 | Input/Output: [(-39 -11 -59 89) -59]
Test Case: 726 | Input/Output: [(53 -65 -41 -95) -95]
Test Case: 727 | Input/Output: [(11 -58 73 -22) -58]
Test Case: 728 | Input/Output: [(3 66 -96 57) -96]
Test Case: 729 | Input/Output: [(76 25 -90 -83) -90]
Test Case: 730 | Input/Output: [(30 34 -65 94) -65]
Test Case: 731 | Input/Output: [(-3 -50 -92 68) -92]
Test Case: 732 | Input/Output: [(8 27 -79 51) -79]
Test Case: 733 | Input/Output: [(80 -95 8 -28) -95]
Test Case: 734 | Input/Output: [(55 34 -15 -89) -89]
Test Case: 735 | Input/Output: [(99 87 30 -81) -81]
Test Case: 736 | Input/Output: [(-20 -49 61 -2) -49]
Test Case: 737 | Input/Output: [(0 -26 -69 94) -69]
Test Case: 738 | Input/Output: [(89 -79 -72 15) -79]
Test Case: 739 | Input/Output: [(-37 52 -78 26) -78]
Test Case: 740 | Input/Output: [(80 -60 92 -87) -87]
Test Case: 741 | Input/Output: [(-83 34 91 -30) -83]
Test Case: 742 | Input/Output: [(42 -90 53 -63) -90]
Test Case: 743 | Input/Output: [(-48 21 -35 -20) -48]
Test Case: 744 | Input/Output: [(-30 94 75 48) -30]
Test Case: 745 | Input/Output: [(38 56 -35 -45) -45]
Test Case: 746 | Input/Output: [(80 -69 -30 -51) -69]
Test Case: 747 | Input/Output: [(41 50 46 7) 7]
Test Case: 748 | Input/Output: [(-1 -88 -89 -12) -89]
Test Case: 749 | Input/Output: [(-65 94 68 -4) -65]
Test Case: 750 | Input/Output: [(88 74 31 -11) -11]
Test Case: 751 | Input/Output: [(-97 19 -51 -92) -97]
Test Case: 752 | Input/Output: [(-77 9 -88 42) -88]
Test Case: 753 | Input/Output: [(-3 61 20 34) -3]
Test Case: 754 | Input/Output: [(21 -88 22 -72) -88]
Test Case: 755 | Input/Output: [(20 20 7 76) 7]
Test Case: 756 | Input/Output: [(67 87 32 35) 32]
Test Case: 757 | Input/Output: [(96 22 33 61) 22]
Test Case: 758 | Input/Output: [(48 -98 41 -51) -98]
Test Case: 759 | Input/Output: [(-39 -37 39 -78) -78]
Test Case: 760 | Input/Output: [(-76 -21 35 -88) -88]
Test Case: 761 | Input/Output: [(63 57 -32 40) -32]
Test Case: 762 | Input/Output: [(12 16 -34 -99) -99]
Test Case: 763 | Input/Output: [(67 44 -91 35) -91]
Test Case: 764 | Input/Output: [(-39 -11 -7 14) -39]
Test Case: 765 | Input/Output: [(-70 47 -50 -84) -84]
Test Case: 766 | Input/Output: [(-30 -60 58 -88) -88]
Test Case: 767 | Input/Output: [(-60 53 -80 40) -80]
Test Case: 768 | Input/Output: [(-94 -42 62 64) -94]
Test Case: 769 | Input/Output: [(30 53 -55 66) -55]
Test Case: 770 | Input/Output: [(28 38 97 -34) -34]
Test Case: 771 | Input/Output: [(36 -87 80 -27) -87]
Test Case: 772 | Input/Output: [(16 94 30 -40) -40]
Test Case: 773 | Input/Output: [(-30 -52 80 -82) -82]
Test Case: 774 | Input/Output: [(21 47 14 -70) -70]
Test Case: 775 | Input/Output: [(-49 45 53 34) -49]
Test Case: 776 | Input/Output: [(87 67 9 -30) -30]
Test Case: 777 | Input/Output: [(-12 -35 -21 -67) -67]
Test Case: 778 | Input/Output: [(-88 91 -49 -21) -88]
Test Case: 779 | Input/Output: [(-94 -89 28 -65) -94]
Test Case: 780 | Input/Output: [(49 24 -65 60) -65]
Test Case: 781 | Input/Output: [(-29 -8 67 13) -29]
Test Case: 782 | Input/Output: [(75 48 -18 39) -18]
Test Case: 783 | Input/Output: [(-56 -74 -16 -44) -74]
Test Case: 784 | Input/Output: [(10 -35 17 100) -35]
Test Case: 785 | Input/Output: [(6 -5 88 33) -5]
Test Case: 786 | Input/Output: [(-27 15 -5 95) -27]
Test Case: 787 | Input/Output: [(-78 -31 85 17) -78]
Test Case: 788 | Input/Output: [(-67 -78 96 -46) -78]
Test Case: 789 | Input/Output: [(92 -90 54 -17) -90]
Test Case: 790 | Input/Output: [(42 -1 36 4) -1]
Test Case: 791 | Input/Output: [(36 10 90 34) 10]
Test Case: 792 | Input/Output: [(-7 -41 69 3) -41]
Test Case: 793 | Input/Output: [(2 0 -74 54) -74]
Test Case: 794 | Input/Output: [(17 11 -26 47) -26]
Test Case: 795 | Input/Output: [(-24 -92 -68 -82) -92]
Test Case: 796 | Input/Output: [(9 42 65 -55) -55]
Test Case: 797 | Input/Output: [(93 12 -33 -17) -33]
Test Case: 798 | Input/Output: [(-99 -89 24 66) -99]
Test Case: 799 | Input/Output: [(-6 81 -7 34) -7]
Test Case: 800 | Input/Output: [(-99 -32 7 -25) -99]
Test Case: 801 | Input/Output: [(-50 -39 98 33) -50]
Test Case: 802 | Input/Output: [(39 31 8 96) 8]
Test Case: 803 | Input/Output: [(-95 32 9 2) -95]
Test Case: 804 | Input/Output: [(-80 26 89 2) -80]
Test Case: 805 | Input/Output: [(43 62 -82 39) -82]
Test Case: 806 | Input/Output: [(-95 8 -58 -82) -95]
Test Case: 807 | Input/Output: [(-80 11 33 -14) -80]
Test Case: 808 | Input/Output: [(88 -62 -16 35) -62]
Test Case: 809 | Input/Output: [(-63 -74 -75 96) -75]
Test Case: 810 | Input/Output: [(-97 -22 54 98) -97]
Test Case: 811 | Input/Output: [(20 -84 39 11) -84]
Test Case: 812 | Input/Output: [(70 15 -76 91) -76]
Test Case: 813 | Input/Output: [(-72 13 9 54) -72]
Test Case: 814 | Input/Output: [(-56 48 75 -68) -68]
Test Case: 815 | Input/Output: [(-31 -40 92 84) -40]
Test Case: 816 | Input/Output: [(18 -88 91 21) -88]
Test Case: 817 | Input/Output: [(69 -88 -1 -61) -88]
Test Case: 818 | Input/Output: [(-6 -60 -65 -9) -65]
Test Case: 819 | Input/Output: [(70 -77 -97 -61) -97]
Test Case: 820 | Input/Output: [(48 -92 67 44) -92]
Test Case: 821 | Input/Output: [(-9 1 32 84) -9]
Test Case: 822 | Input/Output: [(-56 41 41 -6) -56]
Test Case: 823 | Input/Output: [(35 -45 29 3) -45]
Test Case: 824 | Input/Output: [(33 -44 78 -55) -55]
Test Case: 825 | Input/Output: [(80 78 62 -83) -83]
Test Case: 826 | Input/Output: [(58 -33 -59 87) -59]
Test Case: 827 | Input/Output: [(11 -58 99 50) -58]
Test Case: 828 | Input/Output: [(48 65 31 73) 31]
Test Case: 829 | Input/Output: [(73 56 -51 64) -51]
Test Case: 830 | Input/Output: [(-3 0 61 75) -3]
Test Case: 831 | Input/Output: [(57 34 -70 -12) -70]
Test Case: 832 | Input/Output: [(-41 -32 -72 -5) -72]
Test Case: 833 | Input/Output: [(14 3 98 10) 3]
Test Case: 834 | Input/Output: [(74 81 -95 -68) -95]
Test Case: 835 | Input/Output: [(-6 -60 25 -62) -62]
Test Case: 836 | Input/Output: [(-16 57 -88 -2) -88]
Test Case: 837 | Input/Output: [(-47 64 -4 -14) -47]
Test Case: 838 | Input/Output: [(10 3 8 87) 3]
Test Case: 839 | Input/Output: [(-66 12 -75 -71) -75]
Test Case: 840 | Input/Output: [(-2 -80 -2 85) -80]
Test Case: 841 | Input/Output: [(-13 -48 78 78) -48]
Test Case: 842 | Input/Output: [(95 -98 16 86) -98]
Test Case: 843 | Input/Output: [(-59 2 88 22) -59]
Test Case: 844 | Input/Output: [(9 -53 98 -2) -53]
Test Case: 845 | Input/Output: [(-79 -13 48 2) -79]
Test Case: 846 | Input/Output: [(-69 -73 53 -2) -73]
Test Case: 847 | Input/Output: [(-37 78 -45 52) -45]
Test Case: 848 | Input/Output: [(84 16 -66 -31) -66]
Test Case: 849 | Input/Output: [(-74 54 -82 12) -82]
Test Case: 850 | Input/Output: [(-74 64 -74 43) -74]
Test Case: 851 | Input/Output: [(17 -8 100 -76) -76]
Test Case: 852 | Input/Output: [(-59 34 70 73) -59]
Test Case: 853 | Input/Output: [(41 -18 -23 -84) -84]
Test Case: 854 | Input/Output: [(-62 56 -65 65) -65]
Test Case: 855 | Input/Output: [(-13 -5 63 40) -13]
Test Case: 856 | Input/Output: [(-22 -44 -28 -67) -67]
Test Case: 857 | Input/Output: [(91 -12 1 -72) -72]
Test Case: 858 | Input/Output: [(16 8 -2 -18) -18]
Test Case: 859 | Input/Output: [(53 41 51 -21) -21]
Test Case: 860 | Input/Output: [(-4 -30 43 33) -30]
Test Case: 861 | Input/Output: [(-58 -99 65 -58) -99]
Test Case: 862 | Input/Output: [(43 88 5 30) 5]
Test Case: 863 | Input/Output: [(-53 -89 85 -75) -89]
Test Case: 864 | Input/Output: [(60 8 57 -79) -79]
Test Case: 865 | Input/Output: [(75 -75 44 43) -75]
Test Case: 866 | Input/Output: [(55 -92 -77 96) -92]
Test Case: 867 | Input/Output: [(-61 82 -95 -56) -95]
Test Case: 868 | Input/Output: [(31 43 48 14) 14]
Test Case: 869 | Input/Output: [(34 46 99 0) 0]
Test Case: 870 | Input/Output: [(93 60 -63 45) -63]
Test Case: 871 | Input/Output: [(-66 -46 30 48) -66]
Test Case: 872 | Input/Output: [(-53 96 -16 5) -53]
Test Case: 873 | Input/Output: [(2 -53 -27 -89) -89]
Test Case: 874 | Input/Output: [(70 63 -42 71) -42]
Test Case: 875 | Input/Output: [(66 -49 -75 34) -75]
Test Case: 876 | Input/Output: [(59 -88 -62 -38) -88]
Test Case: 877 | Input/Output: [(78 60 69 -35) -35]
Test Case: 878 | Input/Output: [(-34 73 39 82) -34]
Test Case: 879 | Input/Output: [(63 78 -56 -23) -56]
Test Case: 880 | Input/Output: [(66 69 -48 -84) -84]
Test Case: 881 | Input/Output: [(-63 -87 -16 39) -87]
Test Case: 882 | Input/Output: [(-69 -31 63 -18) -69]
Test Case: 883 | Input/Output: [(-27 74 -31 -70) -70]
Test Case: 884 | Input/Output: [(54 5 10 12) 5]
Test Case: 885 | Input/Output: [(95 90 9 -100) -100]
Test Case: 886 | Input/Output: [(48 92 1 72) 1]
Test Case: 887 | Input/Output: [(-18 50 -60 85) -60]
Test Case: 888 | Input/Output: [(23 -80 82 -80) -80]
Test Case: 889 | Input/Output: [(-51 35 -70 -82) -82]
Test Case: 890 | Input/Output: [(96 -56 -81 31) -81]
Test Case: 891 | Input/Output: [(-71 87 10 -9) -71]
Test Case: 892 | Input/Output: [(-98 74 -80 72) -98]
Test Case: 893 | Input/Output: [(17 -22 -46 83) -46]
Test Case: 894 | Input/Output: [(-75 -59 23 78) -75]
Test Case: 895 | Input/Output: [(-93 56 -48 -30) -93]
Test Case: 896 | Input/Output: [(78 23 -81 81) -81]
Test Case: 897 | Input/Output: [(76 66 -44 37) -44]
Test Case: 898 | Input/Output: [(-17 72 62 26) -17]
Test Case: 899 | Input/Output: [(-88 30 -65 -25) -88]
Test Case: 900 | Input/Output: [(-70 36 -6 31) -70]
Test Case: 901 | Input/Output: [(27 45 90 47) 27]
Test Case: 902 | Input/Output: [(-84 48 46 -56) -84]
Test Case: 903 | Input/Output: [(60 69 -71 42) -71]
Test Case: 904 | Input/Output: [(-62 14 -70 100) -70]
Test Case: 905 | Input/Output: [(14 -66 56 -88) -88]
Test Case: 906 | Input/Output: [(-15 72 -47 27) -47]
Test Case: 907 | Input/Output: [(-50 -67 -38 20) -67]
Test Case: 908 | Input/Output: [(-30 90 -19 -19) -30]
Test Case: 909 | Input/Output: [(-40 -51 45 49) -51]
Test Case: 910 | Input/Output: [(-51 68 -57 93) -57]
Test Case: 911 | Input/Output: [(-48 -62 100 -42) -62]
Test Case: 912 | Input/Output: [(59 -24 43 52) -24]
Test Case: 913 | Input/Output: [(-25 90 -70 17) -70]
Test Case: 914 | Input/Output: [(-13 -98 -86 21) -98]
Test Case: 915 | Input/Output: [(70 80 23 51) 23]
Test Case: 916 | Input/Output: [(23 42 44 56) 23]
Test Case: 917 | Input/Output: [(-29 -26 51 -25) -29]
Test Case: 918 | Input/Output: [(67 5 37 57) 5]
Test Case: 919 | Input/Output: [(100 -73 86 -52) -73]
Test Case: 920 | Input/Output: [(37 -11 5 -59) -59]
Test Case: 921 | Input/Output: [(51 -95 7 -34) -95]
Test Case: 922 | Input/Output: [(-42 -53 14 -63) -63]
Test Case: 923 | Input/Output: [(-50 -84 13 19) -84]
Test Case: 924 | Input/Output: [(-42 -77 -8 -27) -77]
Test Case: 925 | Input/Output: [(-67 52 -54 23) -67]
Test Case: 926 | Input/Output: [(-100 -32 24 42) -100]
Test Case: 927 | Input/Output: [(71 -47 -96 -85) -96]
Test Case: 928 | Input/Output: [(-82 -27 -22 -89) -89]
Test Case: 929 | Input/Output: [(-22 53 -30 12) -30]
Test Case: 930 | Input/Output: [(-51 65 -26 91) -51]
Test Case: 931 | Input/Output: [(86 -61 -34 20) -61]
Test Case: 932 | Input/Output: [(-42 -26 -7 -80) -80]
Test Case: 933 | Input/Output: [(87 9 -64 72) -64]
Test Case: 934 | Input/Output: [(-58 -18 14 -72) -72]
Test Case: 935 | Input/Output: [(80 -1 11 -44) -44]
Test Case: 936 | Input/Output: [(44 -7 86 64) -7]
Test Case: 937 | Input/Output: [(-91 83 -91 53) -91]
Test Case: 938 | Input/Output: [(-2 -9 82 47) -9]
Test Case: 939 | Input/Output: [(-72 80 -33 99) -72]
Test Case: 940 | Input/Output: [(73 82 -63 36) -63]
Test Case: 941 | Input/Output: [(26 -68 48 -17) -68]
Test Case: 942 | Input/Output: [(100 -8 50 99) -8]
Test Case: 943 | Input/Output: [(93 -39 -94 95) -94]
Test Case: 944 | Input/Output: [(21 30 -52 81) -52]
Test Case: 945 | Input/Output: [(32 -2 20 49) -2]
Test Case: 946 | Input/Output: [(72 -71 34 26) -71]
Test Case: 947 | Input/Output: [(97 47 -74 18) -74]
Test Case: 948 | Input/Output: [(49 85 4 33) 4]
Test Case: 949 | Input/Output: [(83 12 -63 -15) -63]
Test Case: 950 | Input/Output: [(-17 31 -12 40) -17]
Test Case: 951 | Input/Output: [(-94 12 -62 -27) -94]
Test Case: 952 | Input/Output: [(73 92 -75 89) -75]
Test Case: 953 | Input/Output: [(-13 22 37 65) -13]
Test Case: 954 | Input/Output: [(-43 -14 -5 -22) -43]
Test Case: 955 | Input/Output: [(-28 -41 53 40) -41]
Test Case: 956 | Input/Output: [(85 21 -53 -72) -72]
Test Case: 957 | Input/Output: [(-78 70 -78 -8) -78]
Test Case: 958 | Input/Output: [(88 58 32 3) 3]
Test Case: 959 | Input/Output: [(-34 -91 99 -47) -91]
Test Case: 960 | Input/Output: [(-49 -85 96 15) -85]
Test Case: 961 | Input/Output: [(-93 74 -34 36) -93]
Test Case: 962 | Input/Output: [(-4 51 84 79) -4]
Test Case: 963 | Input/Output: [(-10 55 -92 -94) -94]
Test Case: 964 | Input/Output: [(66 -56 8 92) -56]
Test Case: 965 | Input/Output: [(-31 -9 60 89) -31]
Test Case: 966 | Input/Output: [(40 -30 17 -66) -66]
Test Case: 967 | Input/Output: [(-53 15 -5 86) -53]
Test Case: 968 | Input/Output: [(82 86 -83 -27) -83]
Test Case: 969 | Input/Output: [(1 -73 28 63) -73]
Test Case: 970 | Input/Output: [(77 -54 -58 -11) -58]
Test Case: 971 | Input/Output: [(-84 -99 -94 -8) -99]
Test Case: 972 | Input/Output: [(8 53 40 -30) -30]
Test Case: 973 | Input/Output: [(-59 100 14 14) -59]
Test Case: 974 | Input/Output: [(36 -48 -86 73) -86]
Test Case: 975 | Input/Output: [(65 -19 13 51) -19]
Test Case: 976 | Input/Output: [(-65 -86 0 -81) -86]
Test Case: 977 | Input/Output: [(20 -16 -4 67) -16]
Test Case: 978 | Input/Output: [(5 -52 43 6) -52]
Test Case: 979 | Input/Output: [(-87 -56 7 50) -87]
Test Case: 980 | Input/Output: [(-43 -37 5 -37) -43]
Test Case: 981 | Input/Output: [(38 -87 17 -94) -94]
Test Case: 982 | Input/Output: [(14 54 75 67) 14]
Test Case: 983 | Input/Output: [(35 -89 -46 68) -89]
Test Case: 984 | Input/Output: [(-99 -12 70 -69) -99]
Test Case: 985 | Input/Output: [(71 -59 65 32) -59]
Test Case: 986 | Input/Output: [(35 30 -63 -43) -63]
Test Case: 987 | Input/Output: [(18 -54 21 83) -54]
Test Case: 988 | Input/Output: [(-48 -57 -43 -4) -57]
Test Case: 989 | Input/Output: [(-96 17 64 -66) -96]
Test Case: 990 | Input/Output: [(-6 -20 -97 -12) -97]
Test Case: 991 | Input/Output: [(23 -31 -71 75) -71]
Test Case: 992 | Input/Output: [(-34 -19 -14 67) -34]
Test Case: 993 | Input/Output: [(-59 13 11 -21) -59]
Test Case: 994 | Input/Output: [(-61 -23 -55 8) -61]
Test Case: 995 | Input/Output: [(-54 -66 33 -92) -92]
Test Case: 996 | Input/Output: [(-15 -61 50 -86) -86]
Test Case: 997 | Input/Output: [(24 2 -65 96) -65]
Test Case: 998 | Input/Output: [(92 20 -5 54) -5]
Test Case: 999 | Input/Output: [(-18 67 61 -51) -51]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -32 -46 119 51 -73 75 82 25 92 -43 -41 111 101 -49 -27 20
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-65 -65 -65 56] -65] [[47 47 47 63] 47] [[-39 -39 -39 93] -39] [[88 -75 -75 -75] -75] [[-13 29 29 29] -13] [[66 66 -77 66] -77] [[-24 66 -24 -24] -24] [[41 41 59 41] 41] [[-21 -26 -21 -21] -26] [[-65 -65 26 -65] -65] [(31 31 31 31) 31] [(44 44 44 44) 44] [(23 23 23 23) 23] [(58 58 58 58) 58] [(40 40 40 40) 40] [(11 33 64 92) 11] [(66 99 69 73) 66] [(89 87 15 37) 15] [(63 23 37 27) 23] [(32 81 10 68) 10] [(84 34 76 58) 34] [(95 56 10 89) 10] [(56 16 48 87) 16] [(60 56 13 94) 13] [(70 32 35 91) 32] [(70 43 99 25) 25] [(27 62 52 56) 27] [(90 55 19 2) 2] [(77 33 77 84) 33] [(72 15 34 70) 15] [(67 100 56 12) 12] [(91 18 24 55) 18] [(5 87 36 93) 5] [(100 30 39 88) 30] [(64 89 54 86) 54] [(62 -44 -21 -58) -58] [(-90 -44 -100 -73) -100] [(9 33 -33 -25) -33] [(27 10 8 -30) -30] [(50 -59 17 -96) -96] [(-4 22 -70 -60) -70] [(-74 -61 51 34) -74] [(-30 44 -74 -92) -92] [(60 -50 -95 -76) -95] [(-11 34 28 -15) -15] [(1 10 61 -80) -80] [(98 76 -72 -26) -72] [(79 -41 44 -51) -51] [(91 -90 49 -30) -90] [(88 -9 -66 14) -66] [(-25 -89 21 44) -89] [(63 -100 79 46) -100] [(25 -39 -82 -76) -82] [(46 -90 -21 -58) -90] [(10 -40 -51 -22) -51] [(12 -13 64 87) -13] [(78 -28 40 53) -28] [(-100 -18 37 -81) -100] [(50 76 46 43) 43] [(25 23 -18 -36) -36] [(-92 -31 19 12) -92] [(59 -77 21 -100) -100] [(39 -57 -44 -32) -57] [(-60 -22 -8 80) -60] [(65 49 51 -93) -93] [(90 61 -23 77) -23] [(-87 34 31 -98) -98] [(-33 -62 -50 -51) -62] [(12 -100 100 -85) -100] [(20 -99 43 -66) -99] [(-81 -25 26 -77) -81] [(76 27 61 -9) -9] [(-36 82 94 76) -36] [(44 -45 -64 -31) -64] [(29 -56 -10 10) -56] [(34 -73 64 -90) -90] [(-65 -42 92 83) -65] [(-91 -22 -19 -72) -91] [(40 8 -53 -49) -53] [(-19 -54 -58 39) -58] [(-26 80 -98 -69) -98] [(52 30 58 -31) -31] [(-30 86 -82 -89) -89] [(47 4 48 51) 4] [(88 84 67 33) 33] [(36 49 82 49) 36] [(-26 30 -10 22) -26] [(-58 -24 30 -4) -58] [(66 -74 -17 27) -74] [(25 -35 -40 -45) -45] [(84 40 -72 -21) -72] [(49 96 1 -53) -53] [(25 -89 -80 28) -89] [(-76 77 -93 -81) -93] [(-5 -83 75 -95) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: 66                 
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 99                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 81                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 62                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 87                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 89                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -44                
Correct output: -33                 | Program output: 33                 
Correct output: -30                 | Program output: 10                 
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: 22                 
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: 44                 
Correct output: -95                 | Program output: -50                
Correct output: -15                 | Program output: 34                 
Correct output: -80                 | Program output: 10                 
Correct output: -72                 | Program output: 76                 
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -40                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 76                 
Correct output: -36                 | Program output: 23                 
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: 34                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -22                
Correct output: -53                 | Program output: 8                  
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: 80                 
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: 30                 
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -35                
Correct output: -72                 | Program output: 40                 
Correct output: -53                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 77                 
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Lexicase best program: (exec_if (in3 exec_y (exec_s_when_autoconstructing (boolean_and exec_stackdepth boolean_frominteger in3 integer_inc boolean_frominteger) () (integer_dup_times exec_y_when_autoconstructing (exec_if (exec_do*count (exec_do*times (exec_do*while (boolean_eq) integer_inc exec_dup_items in2 boolean_and) boolean_eq exec_rot (exec_stackdepth exec_s_when_autoconstructing () (exec_swap (exec_do*range () integer_yank) (exec_eq in4 boolean_and boolean_dup_times print_integer boolean_yankdup boolean_dup_items in1 exec_do*count () exec_when (boolean_invert_first_then_and boolean_invert_second_then_and boolean_or) integer_mult boolean_stackdepth in3 exec_k () (boolean_empty boolean_not exec_swap (integer_pop) (integer_mod print_integer print_boolean) in3) integer_gt exec_shove (integer_gte integer_shove) boolean_stackdepth integer_yankdup) integer_gt integer_pop boolean_xor in2 exec_s (exec_shove (exec_do*range (boolean_and boolean_yank) integer_add boolean_swap exec_empty) boolean_yank) (exec_yank exec_noop boolean_not exec_do*times (exec_do*while () integer_div) print_integer exec_y_when_autoconstructing () integer_flush boolean_empty boolean_invert_second_then_and integer_dup) () exec_shove (boolean_dup_items integer_dup_items) integer_sub integer_swap integer_mod) (integer_max exec_dup_items) integer_min exec_yankdup in1) () ())) ())))) ())
Lexicase best errors: [0 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 133
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Zero cases best program: (exec_if (in3 exec_y (exec_s_when_autoconstructing (boolean_and exec_stackdepth boolean_frominteger in3 integer_inc boolean_frominteger) () (integer_dup_times exec_y_when_autoconstructing (exec_if (exec_do*count (exec_do*times (exec_do*while (boolean_eq) integer_inc exec_dup_items in2 boolean_and) boolean_eq exec_rot (exec_stackdepth exec_s_when_autoconstructing () (exec_swap (exec_do*range () integer_yank) (exec_eq in4 boolean_and boolean_dup_times print_integer boolean_yankdup boolean_dup_items in1 exec_do*count () exec_when (boolean_invert_first_then_and boolean_invert_second_then_and boolean_or) integer_mult boolean_stackdepth in3 exec_k () (boolean_empty boolean_not exec_swap (integer_pop) (integer_mod print_integer print_boolean) in3) integer_gt exec_shove (integer_gte integer_shove) boolean_stackdepth integer_yankdup) integer_gt integer_pop boolean_xor in2 exec_s (exec_shove (exec_do*range (boolean_and boolean_yank) integer_add boolean_swap exec_empty) boolean_yank) (exec_yank exec_noop boolean_not exec_do*times (exec_do*while () integer_div) print_integer exec_y_when_autoconstructing () integer_flush boolean_empty boolean_invert_second_then_and integer_dup) () exec_shove (boolean_dup_items integer_dup_items) integer_sub integer_swap integer_mod) (integer_max exec_dup_items) integer_min exec_yankdup in1) () ())) ())))) ())
Zero cases best errors: [0 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 133
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 5 2 6 1 1 8 2 2 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (5 5 2 6 1 1 8 2 2 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction tagged_810} {:close 0, :instruction integer_lte} {:close 0, :instruction 32} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (in2 boolean_invert_first_then_and integer_div boolean_yankdup exec_y_when_autoconstructing () integer_max exec_k (print_integer boolean_eq exec_dup_times (exec_dup_times () exec_eq exec_dup (boolean_eq) exec_s_when_autoconstructing (boolean_xor exec_if () (exec_do*range (exec_when (boolean_flush boolean_xor) exec_if (boolean_or boolean_dup_times boolean_yankdup) (integer_gt in4) tagged_810 integer_lte 32 integer_min integer_dup) boolean_shove) exec_s_when_autoconstructing () () ()) () ())) ())
Errors: [0 0 1 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 53
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.995 0.995 0.998 0.994 0.999 0.999 0.992 0.998 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.624
Average program size in population (points): 69.681
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 498925
--- Timings ---
Current time: 1559594035586 milliseconds
Total Time:           2.0 seconds
Initialization:       0.1 seconds,  5.3%
Reproduction:         0.8 seconds, 38.5%
Fitness Testing:      1.1 seconds, 56.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: 66                 
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 99                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 81                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 62                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 87                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 89                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -44                
Correct output: -33                 | Program output: 33                 
Correct output: -30                 | Program output: 10                 
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: 22                 
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: 44                 
Correct output: -95                 | Program output: -50                
Correct output: -15                 | Program output: 34                 
Correct output: -80                 | Program output: 10                 
Correct output: -72                 | Program output: 76                 
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -39                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -40                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 76                 
Correct output: -36                 | Program output: 23                 
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: 34                 
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -22                
Correct output: -53                 | Program output: 8                  
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: 80                 
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: 86                 
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: 30                 
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -35                
Correct output: -72                 | Program output: 40                 
Correct output: -53                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 77                 
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction 31} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction -19} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in3})
Lexicase best program: (exec_s (print_integer) (exec_s_when_autoconstructing () (boolean_dup_items integer_stackdepth boolean_swap) (integer_dup) integer_pop exec_y_when_autoconstructing (exec_pop (boolean_empty integer_dec boolean_or) integer_mod in2 print_integer exec_noop integer_rot integer_lte exec_while (integer_min) integer_fromboolean exec_dup_times (print_integer integer_lt)) boolean_shove exec_y () boolean_shove integer_eq in2) (exec_s_when_autoconstructing (exec_pop (boolean_stackdepth exec_flush print_newline exec_flush integer_rot boolean_dup_items exec_k (integer_dup boolean_or exec_k (integer_sub boolean_invert_first_then_and) (integer_stackdepth exec_y (exec_do*range (31 exec_yank integer_gte exec_swap (-19 integer_lt) (exec_y_when_autoconstructing () exec_yank)) integer_dec integer_stackdepth)) integer_stackdepth exec_pop (exec_k (exec_eq exec_if (integer_max exec_empty exec_noop integer_stackdepth boolean_empty) (boolean_invert_first_then_and in2 boolean_invert_first_then_and boolean_or integer_gt)) (exec_yankdup) exec_dup () print_integer integer_mod integer_dup_items integer_yank exec_dup_items exec_rot () (in3) ())) ())) () ()))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 115
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction 31} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction -19} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in3})
Zero cases best program: (exec_s (print_integer) (exec_s_when_autoconstructing () (boolean_dup_items integer_stackdepth boolean_swap) (integer_dup) integer_pop exec_y_when_autoconstructing (exec_pop (boolean_empty integer_dec boolean_or) integer_mod in2 print_integer exec_noop integer_rot integer_lte exec_while (integer_min) integer_fromboolean exec_dup_times (print_integer integer_lt)) boolean_shove exec_y () boolean_shove integer_eq in2) (exec_s_when_autoconstructing (exec_pop (boolean_stackdepth exec_flush print_newline exec_flush integer_rot boolean_dup_items exec_k (integer_dup boolean_or exec_k (integer_sub boolean_invert_first_then_and) (integer_stackdepth exec_y (exec_do*range (31 exec_yank integer_gte exec_swap (-19 integer_lt) (exec_y_when_autoconstructing () exec_yank)) integer_dec integer_stackdepth)) integer_stackdepth exec_pop (exec_k (exec_eq exec_if (integer_max exec_empty exec_noop integer_stackdepth boolean_empty) (boolean_invert_first_then_and in2 boolean_invert_first_then_and boolean_or integer_gt)) (exec_yankdup) exec_dup () print_integer integer_mod integer_dup_items integer_yank exec_dup_items exec_rot () (in3) ())) ())) () ()))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 115
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 52 126 135 122 13 134 134 134 53)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (126 52 126 135 122 13 134 134 134 53)
Population mean number of perfect (error zero) cases: 1.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 0, :instruction tagged_810} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (exec_dup_times () in2 boolean_invert_first_then_and integer_div integer_div boolean_yankdup exec_y_when_autoconstructing () integer_max exec_k (print_integer boolean_eq exec_dup_times (exec_dup_times () exec_dup (boolean_eq) exec_s_when_autoconstructing (boolean_xor exec_if () (exec_do*range (exec_when (exec_if (integer_mult boolean_or boolean_dup_times boolean_yankdup) (integer_gt in4) tagged_810 integer_lte integer_min boolean_eq integer_dup) exec_s_when_autoconstructing () () ()))) () ())) ())
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 53
Percent parens: 0.377
--- Population Statistics ---
Average total errors in population: 8.971
Median total errors in population: 10
Error averages by case: (0.874 0.948 0.874 0.865 0.878 0.987 0.866 0.866 0.866 0.947)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.717
Average program size in population (points): 97.137
Average percent parens in population: 0.273
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1401171
--- Timings ---
Current time: 1559594037624 milliseconds
Total Time:           4.1 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.6 seconds, 39.0%
Fitness Testing:      1.9 seconds, 45.6%
Report:               0.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 56                 
Correct output: 47                  | Program output: 63                 
Correct output: -39                 | Program output: 93                 
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 92                 
Correct output: 66                  | Program output: 73                 
Correct output: 15                  | Program output: 37                 
Correct output: 23                  | Program output: 27                 
Correct output: 10                  | Program output: 68                 
Correct output: 34                  | Program output: 58                 
Correct output: 10                  | Program output: 89                 
Correct output: 16                  | Program output: 87                 
Correct output: 13                  | Program output: 94                 
Correct output: 32                  | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 56                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 84                 
Correct output: 15                  | Program output: 70                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 55                 
Correct output: 5                   | Program output: 93                 
Correct output: 30                  | Program output: 88                 
Correct output: 54                  | Program output: 86                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -73                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: 14                 
Correct output: -89                 | Program output: 44                 
Correct output: -100                | Program output: 46                 
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -22                
Correct output: -13                 | Program output: 87                 
Correct output: -28                 | Program output: 53                 
Correct output: -100                | Program output: -81                
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -32                
Correct output: -60                 | Program output: 80                 
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 77                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 76                 
Correct output: -64                 | Program output: -31                
Correct output: -56                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: 83                 
Correct output: -91                 | Program output: -72                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: 39                 
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: 22                 
Correct output: -58                 | Program output: -4                 
Correct output: -74                 | Program output: 27                 
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: 28                 
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_444} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_571} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_shove boolean_pop boolean_invert_second_then_and boolean_pop integer_gte print_boolean integer_max integer_flush boolean_dup integer_pop boolean_and exec_do*range (print_boolean integer_sub boolean_yankdup boolean_dup exec_shove (boolean_or) integer_sub) boolean_and in4 exec_while (exec_stackdepth boolean_dup boolean_dup_items) boolean_dup exec_yank exec_while () integer_lte exec_empty exec_eq in1 print_integer boolean_rot in4 print_integer exec_yank in3 tag_integer_444 exec_swap () (boolean_xor) exec_do*while () boolean_frominteger exec_k (exec_rot () (integer_fromboolean) () exec_s_when_autoconstructing (exec_pop (exec_dup_items integer_flush integer_eq exec_do*range (integer_lt exec_if (boolean_stackdepth) (integer_add integer_max print_boolean tag_boolean_496 print_exec (exec_dup_times (integer_swap boolean_rot integer_yankdup boolean_not boolean_xor) integer_empty)) exec_yankdup) integer_dup_times) in3) (exec_while (print_newline exec_flush boolean_empty exec_when (integer_mod) integer_add boolean_stackdepth tag_integer_571 exec_yank boolean_yankdup integer_div integer_pop exec_y (boolean_pop))) ()) ())
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 110
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_444} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_496} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_571} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_shove boolean_pop boolean_invert_second_then_and boolean_pop integer_gte print_boolean integer_max integer_flush boolean_dup integer_pop boolean_and exec_do*range (print_boolean integer_sub boolean_yankdup boolean_dup exec_shove (boolean_or) integer_sub) boolean_and in4 exec_while (exec_stackdepth boolean_dup boolean_dup_items) boolean_dup exec_yank exec_while () integer_lte exec_empty exec_eq in1 print_integer boolean_rot in4 print_integer exec_yank in3 tag_integer_444 exec_swap () (boolean_xor) exec_do*while () boolean_frominteger exec_k (exec_rot () (integer_fromboolean) () exec_s_when_autoconstructing (exec_pop (exec_dup_items integer_flush integer_eq exec_do*range (integer_lt exec_if (boolean_stackdepth) (integer_add integer_max print_boolean tag_boolean_496 print_exec (exec_dup_times (integer_swap boolean_rot integer_yankdup boolean_not boolean_xor) integer_empty)) exec_yankdup) integer_dup_times) in3) (exec_while (print_newline exec_flush boolean_empty exec_when (integer_mod) integer_add boolean_stackdepth tag_integer_571 exec_yank boolean_yankdup integer_div integer_pop exec_y (boolean_pop))) ()) ())
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 110
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 178 38 141 88 86 52 330 133 51)
Population mean number of elite cases: 1.33
Count of perfect (error zero) individuals by case: (235 178 38 141 88 86 52 330 133 51)
Population mean number of perfect (error zero) cases: 1.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop})
Best program: (boolean_shove boolean_pop boolean_invert_second_then_and boolean_pop print_boolean integer_lt integer_max boolean_and integer_add exec_do*range (exec_noop print_boolean boolean_yankdup boolean_dup exec_dup () integer_gte exec_shove (exec_shove (boolean_or) integer_sub) exec_while (exec_stackdepth boolean_dup_items)) boolean_dup exec_yank print_integer exec_while () integer_lte boolean_swap print_integer in4 print_integer integer_dup_items in3 exec_when (exec_swap () (boolean_xor) exec_do*while () exec_y_when_autoconstructing (boolean_frominteger exec_rot () (integer_fromboolean) () integer_swap) boolean_yank) exec_pop (integer_flush exec_if (boolean_stackdepth) (integer_add integer_max exec_y_when_autoconstructing (boolean_invert_first_then_and exec_yank) print_boolean print_exec (integer_swap in3 integer_rot exec_dup_times (integer_swap integer_yank in2 integer_yankdup exec_do*range ()) boolean_not boolean_xor) integer_empty)) exec_yankdup integer_dup_times in1 in3 exec_while (exec_if (exec_flush in3 exec_eq) () integer_mod) integer_add boolean_stackdepth exec_yank boolean_yankdup integer_div integer_pop boolean_pop)
Errors: [1 1 1 1 0 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 84
Size: 109
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 8.668
Median total errors in population: 9
Error averages by case: (0.765 0.822 0.962 0.859 0.912 0.914 0.948 0.67 0.867 0.949)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.813
Average program size in population (points): 87.442
Average percent parens in population: 0.277
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2102333
--- Timings ---
Current time: 1559594039511 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 41.1%
Fitness Testing:      2.4 seconds, 40.8%
Report:               1.0 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 56                 
Correct output: 47                  | Program output: 63                 
Correct output: -39                 | Program output: 93                 
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 92                 
Correct output: 66                  | Program output: 73                 
Correct output: 15                  | Program output: 37                 
Correct output: 23                  | Program output: 27                 
Correct output: 10                  | Program output: 68                 
Correct output: 34                  | Program output: 58                 
Correct output: 10                  | Program output: 89                 
Correct output: 16                  | Program output: 87                 
Correct output: 13                  | Program output: 94                 
Correct output: 32                  | Program output: 91                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 56                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 84                 
Correct output: 15                  | Program output: 70                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 55                 
Correct output: 5                   | Program output: 93                 
Correct output: 30                  | Program output: 88                 
Correct output: 54                  | Program output: 86                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -73                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: 14                 
Correct output: -89                 | Program output: 44                 
Correct output: -100                | Program output: 46                 
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -22                
Correct output: -13                 | Program output: 87                 
Correct output: -28                 | Program output: 53                 
Correct output: -100                | Program output: -81                
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -32                
Correct output: -60                 | Program output: 80                 
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 77                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 76                 
Correct output: -64                 | Program output: -31                
Correct output: -56                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: 83                 
Correct output: -91                 | Program output: -72                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: 39                 
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: 22                 
Correct output: -58                 | Program output: -4                 
Correct output: -74                 | Program output: 27                 
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: 28                 
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction -17} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s})
Lexicase best program: (in3 integer_gt integer_max in4 print_integer in3 exec_dup_items exec_k_when_autoconstructing (exec_dup (boolean_flush exec_rot (-17 exec_k_when_autoconstructing (exec_while (integer_lt integer_add integer_rot integer_lt) exec_eq exec_shove (exec_do*while (exec_yankdup exec_yankdup) integer_max exec_k (boolean_rot boolean_dup_items integer_yank boolean_dup_items) (boolean_flush exec_pop (integer_lt boolean_pop) exec_k (boolean_shove print_integer print_boolean integer_dec boolean_pop exec_do*times (integer_add boolean_pop exec_do*while (print_newline boolean_pop exec_dup_times (boolean_flush) integer_div integer_div boolean_invert_second_then_and integer_flush exec_stackdepth) exec_noop) integer_mod) (boolean_xor exec_shove (exec_rot (exec_s_when_autoconstructing (exec_s () () ()) () ()) () ()))))) ()) () ())) ())
Lexicase best errors: [0 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction -17} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s})
Zero cases best program: (in3 integer_gt integer_max in4 print_integer in3 exec_dup_items exec_k_when_autoconstructing (exec_dup (boolean_flush exec_rot (-17 exec_k_when_autoconstructing (exec_while (integer_lt integer_add integer_rot integer_lt) exec_eq exec_shove (exec_do*while (exec_yankdup exec_yankdup) integer_max exec_k (boolean_rot boolean_dup_items integer_yank boolean_dup_items) (boolean_flush exec_pop (integer_lt boolean_pop) exec_k (boolean_shove print_integer print_boolean integer_dec boolean_pop exec_do*times (integer_add boolean_pop exec_do*while (print_newline boolean_pop exec_dup_times (boolean_flush) integer_div integer_div boolean_invert_second_then_and integer_flush exec_stackdepth) exec_noop) integer_mod) (boolean_xor exec_shove (exec_rot (exec_s_when_autoconstructing (exec_s () () ()) () ()) () ()))))) ()) () ())) ())
Zero cases best errors: [0 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 82 83 82 76 237 136 238 139 183)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (238 82 83 82 76 237 136 238 139 183)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_444} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_571} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop})
Best program: (exec_dup_times (boolean_pop boolean_invert_second_then_and boolean_pop integer_dup_times) integer_gte integer_max boolean_dup boolean_and integer_add exec_do*range (print_integer) print_boolean integer_dup boolean_yankdup boolean_dup exec_do*count (exec_dup () exec_pop (exec_shove (boolean_or) integer_sub) boolean_and) in4 exec_while (boolean_invert_second_then_and exec_y (boolean_dup boolean_dup_items)) exec_yank exec_while () integer_lte boolean_swap exec_empty exec_eq print_integer boolean_rot in4 print_integer integer_dup_items in3 tag_integer_444 exec_swap () (boolean_xor) exec_do*while () boolean_stackdepth boolean_frominteger exec_rot () (integer_fromboolean) () boolean_dup_times integer_swap exec_pop (integer_flush exec_do*range (integer_lt exec_if (boolean_stackdepth) (integer_add integer_max exec_y_when_autoconstructing (boolean_invert_first_then_and exec_yank) integer_max) print_boolean in3 integer_swap integer_yank in2 integer_yankdup boolean_not exec_while (boolean_xor) integer_empty)) exec_yankdup integer_sub integer_dup_times exec_if (in3) (integer_eq exec_while (exec_if (exec_flush in3 exec_when (integer_mod) boolean_stackdepth tag_integer_571 exec_yank integer_pop exec_y (boolean_pop)) ())))
Errors: [0 1 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 91
Size: 120
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 8.506
Median total errors in population: 9
Error averages by case: (0.762 0.918 0.917 0.918 0.924 0.763 0.864 0.762 0.861 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.281
Average program size in population (points): 99.413
Average percent parens in population: 0.257
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2789118
--- Timings ---
Current time: 1559594041336 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.3 seconds, 42.2%
Fitness Testing:      2.9 seconds, 37.7%
Report:               1.5 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: 6                  
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: 12                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output:                    
Correct output: 66                  | Program output: 99                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 81                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 62                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 87                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 89                 
Correct output: -58                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 9                  
Correct output: -30                 | Program output: 10                 
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: 6                  
Correct output: -15                 | Program output: 34                 
Correct output: -80                 | Program output: 10                 
Correct output: -72                 | Program output: 12                 
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: 6                  
Correct output: -90                 | Program output: 6                  
Correct output: -51                 | Program output: 10                 
Correct output: -13                 | Program output: -1364              
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 76                 
Correct output: -36                 | Program output: 12                 
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: 6                  
Correct output: -60                 | Program output: -8                 
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: 12                 
Correct output: -98                 | Program output: 34                 
Correct output: -62                 | Program output: -50                
Correct output: -100                | Program output: -100100            
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: 6                  
Correct output: -56                 | Program output: 6                  
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -19                
Correct output: -53                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: 6                  
Correct output: -45                 | Program output: 6                  
Correct output: -72                 | Program output: 12                 
Correct output: -53                 | Program output: 49                 
Correct output: -89                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_flush exec_if (integer_dec) (exec_do*while (boolean_shove in2 in1 integer_stackdepth in2 integer_dup_items boolean_not) integer_stackdepth boolean_yank integer_mult in1) boolean_shove exec_yankdup in3 integer_yankdup print_integer integer_rot integer_yank exec_if () (exec_yank) integer_add boolean_dup_items integer_swap exec_y (exec_dup_items boolean_xor tag_integer_221 boolean_invert_first_then_and) tagged_939 in4 exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (integer_lte boolean_invert_first_then_and integer_swap) exec_y (boolean_or) integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (exec_shove (boolean_xor in1 boolean_frominteger) exec_dup_times (boolean_stackdepth boolean_frominteger) exec_yankdup boolean_rot) integer_max) exec_shove () boolean_yankdup boolean_invert_first_then_and exec_yank boolean_pop)) () ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 88
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_flush exec_if (integer_dec) (exec_do*while (boolean_shove in2 in1 integer_stackdepth in2 integer_dup_items boolean_not) integer_stackdepth boolean_yank integer_mult in1) boolean_shove exec_yankdup in3 integer_yankdup print_integer integer_rot integer_yank exec_if () (exec_yank) integer_add boolean_dup_items integer_swap exec_y (exec_dup_items boolean_xor tag_integer_221 boolean_invert_first_then_and) tagged_939 in4 exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (integer_lte boolean_invert_first_then_and integer_swap) exec_y (boolean_or) integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (exec_shove (boolean_xor in1 boolean_frominteger) exec_dup_times (boolean_stackdepth boolean_frominteger) exec_yankdup boolean_rot) integer_max) exec_shove () boolean_yankdup boolean_invert_first_then_and exec_yank boolean_pop)) () ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 88
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 74 171 224 528 201 73 170 577 375)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (74 74 171 224 528 201 73 170 577 375)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Best program: (boolean_flush exec_if (integer_dec) (exec_do*while (boolean_shove in2 in1 integer_stackdepth in2 integer_dup_items boolean_not) integer_stackdepth boolean_yank integer_mult in1) boolean_shove exec_yankdup in3 integer_yankdup print_integer integer_rot integer_yank exec_if () (exec_yank) integer_add boolean_dup_items integer_swap exec_y (exec_dup_items boolean_xor tag_integer_221 boolean_invert_first_then_and) tagged_939 in4 exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (integer_lte boolean_invert_first_then_and integer_swap) exec_y (boolean_or) integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (exec_shove (boolean_xor in1 boolean_frominteger) exec_dup_times (boolean_stackdepth boolean_frominteger) exec_yankdup boolean_rot) integer_max) exec_shove () boolean_yankdup boolean_invert_first_then_and exec_yank boolean_pop)) () ())
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 88
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.533
Median total errors in population: 8
Error averages by case: (0.926 0.926 0.829 0.776 0.472 0.799 0.927 0.83 0.423 0.625)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.582
Average program size in population (points): 94.757
Average percent parens in population: 0.257
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3638240
--- Timings ---
Current time: 1559594043813 milliseconds
Total Time:           9.7 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.1 seconds, 42.5%
Fitness Testing:      3.6 seconds, 36.6%
Report:               1.9 seconds, 19.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: 88                 
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 59                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 64                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 76                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 35                 
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 24                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 39                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: 62                 
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: 50                 
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: 60                 
Correct output: -15                 | Program output: 28                 
Correct output: -80                 | Program output: 61                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: 79                 
Correct output: -90                 | Program output: 91                 
Correct output: -66                 | Program output: 88                 
Correct output: -89                 | Program output: -25                
Correct output: -100                | Program output: 63                 
Correct output: -82                 | Program output: 25                 
Correct output: -90                 | Program output: 46                 
Correct output: -51                 | Program output: 10                 
Correct output: -13                 | Program output: 12                 
Correct output: -28                 | Program output: 78                 
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 59                 
Correct output: -57                 | Program output: 39                 
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 51                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 31                 
Correct output: -62                 | Program output: -33                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 61                 
Correct output: -36                 | Program output: 94                 
Correct output: -64                 | Program output: 44                 
Correct output: -56                 | Program output: 29                 
Correct output: -90                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 58                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 48                 
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 82                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: 66                 
Correct output: -45                 | Program output: 25                 
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 74} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub})
Lexicase best program: (boolean_flush exec_if (integer_dec) (exec_do*while (integer_lt boolean_pop in1 integer_stackdepth in2 integer_dup_items boolean_not) integer_stackdepth boolean_yank exec_yank) integer_mult exec_yankdup in3 print_integer integer_sub exec_if () (integer_yank boolean_yank boolean_xor exec_do*times (exec_yank) exec_y_when_autoconstructing (integer_add) boolean_frominteger boolean_invert_second_then_and boolean_dup_items boolean_xor tagged_939 in4) exec_rot (integer_lte exec_k () (in2 exec_shove (integer_eq) exec_empty print_exec () integer_lte integer_swap) exec_s (exec_y (integer_div boolean_xor exec_s_when_autoconstructing (integer_pop) (exec_shove (boolean_xor in1 exec_dup () exec_if (boolean_frominteger) (74 boolean_stackdepth boolean_frominteger exec_yankdup integer_max) in3) boolean_yankdup boolean_invert_first_then_and exec_yank boolean_pop boolean_stackdepth) (integer_sub))) () ()) () ())
Lexicase best errors: [1 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 74} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub})
Zero cases best program: (boolean_flush exec_if (integer_dec) (exec_do*while (integer_lt boolean_pop in1 integer_stackdepth in2 integer_dup_items boolean_not) integer_stackdepth boolean_yank exec_yank) integer_mult exec_yankdup in3 print_integer integer_sub exec_if () (integer_yank boolean_yank boolean_xor exec_do*times (exec_yank) exec_y_when_autoconstructing (integer_add) boolean_frominteger boolean_invert_second_then_and boolean_dup_items boolean_xor tagged_939 in4) exec_rot (integer_lte exec_k () (in2 exec_shove (integer_eq) exec_empty print_exec () integer_lte integer_swap) exec_s (exec_y (integer_div boolean_xor exec_s_when_autoconstructing (integer_pop) (exec_shove (boolean_xor in1 exec_dup () exec_if (boolean_frominteger) (74 boolean_stackdepth boolean_frominteger exec_yankdup integer_max) in3) boolean_yankdup boolean_invert_first_then_and exec_yank boolean_pop boolean_stackdepth) (integer_sub))) () ()) () ())
Zero cases best errors: [1 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (60 265 57 7 293 4 265 270 45 254)
Population mean number of elite cases: 1.52
Count of perfect (error zero) individuals by case: (60 265 57 7 293 4 265 270 45 254)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_eq} {:close 1, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth})
Best program: (boolean_frominteger exec_if (integer_dec) (boolean_stackdepth exec_do*while (boolean_shove integer_lt in1 integer_stackdepth boolean_shove in2 integer_dup_items boolean_not) integer_stackdepth print_boolean) integer_mult boolean_shove exec_yankdup boolean_rot in3 print_integer integer_rot integer_yank integer_dup exec_eq boolean_xor exec_yank boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_swap boolean_xor exec_flush tagged_939 in4 exec_rot (exec_k () (in2 exec_shove (integer_eq) print_exec () integer_lte integer_swap) exec_y (integer_div boolean_xor exec_s_when_autoconstructing (integer_pop) (exec_shove (in1 exec_if (boolean_frominteger) (exec_dup_items exec_yankdup integer_max) in1 exec_shove () boolean_dup_times boolean_yankdup boolean_invert_first_then_and exec_yank boolean_stackdepth)) ())) () ())
Errors: [1 0 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 81
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 8.48
Median total errors in population: 9
Error averages by case: (0.94 0.735 0.943 0.993 0.707 0.996 0.735 0.73 0.955 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.18
Average program size in population (points): 85.674
Average percent parens in population: 0.250
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4941956
--- Timings ---
Current time: 1559594045865 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.9 seconds, 39.7%
Fitness Testing:      4.5 seconds, 35.8%
Report:               2.9 seconds, 23.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: 26                 
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 89                 
Correct output: 23                  | Program output: 63                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 84                 
Correct output: 10                  | Program output: 95                 
Correct output: 16                  | Program output: 56                 
Correct output: 13                  | Program output: 60                 
Correct output: 32                  | Program output: 70                 
Correct output: 25                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 180                
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 72                 
Correct output: 12                  | Program output: 67                 
Correct output: 18                  | Program output: 91                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 100                
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: 28                 
Correct output: -80                 | Program output: 61                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 49                 
Correct output: -66                 | Program output: 88                 
Correct output: -89                 | Program output: -25                
Correct output: -100                | Program output: 63                 
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: 12                 
Correct output: -28                 | Program output: 78                 
Correct output: -100                | Program output: 37                 
Correct output: 43                  | Program output: 50                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 21                 
Correct output: -57                 | Program output: -44                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 51                 
Correct output: -23                 | Program output: 90                 
Correct output: -98                 | Program output: 31                 
Correct output: -62                 | Program output: -50                
Correct output: -100                | Program output: 100                
Correct output: -99                 | Program output: 43                 
Correct output: -81                 | Program output: 26                 
Correct output: -9                  | Program output: 61                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: 29                 
Correct output: -90                 | Program output: 64                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -19                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 58                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 47                 
Correct output: 33                  | Program output: 88                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: 30                 
Correct output: -74                 | Program output: 66                 
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tagged_939} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_if (integer_dec) (exec_do*while (in1 integer_stackdepth in2 boolean_not) integer_stackdepth integer_mult in1) in3 boolean_shove exec_yankdup in3 integer_yankdup print_integer integer_rot integer_yank exec_if () (exec_dup (exec_dup_times () exec_yank) boolean_dup_items integer_swap exec_dup_items tag_integer_221 boolean_invert_first_then_and) boolean_stackdepth tagged_939 exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (exec_yankdup integer_lte boolean_invert_first_then_and boolean_xor integer_swap) exec_y (boolean_or) integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (in1 integer_add) boolean_frominteger) boolean_flush exec_dup_times (boolean_frominteger) exec_yankdup boolean_rot) integer_max) (boolean_yankdup boolean_invert_first_then_and boolean_pop) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 81
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tagged_939} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_if (integer_dec) (exec_do*while (in1 integer_stackdepth in2 boolean_not) integer_stackdepth integer_mult in1) in3 boolean_shove exec_yankdup in3 integer_yankdup print_integer integer_rot integer_yank exec_if () (exec_dup (exec_dup_times () exec_yank) boolean_dup_items integer_swap exec_dup_items tag_integer_221 boolean_invert_first_then_and) boolean_stackdepth tagged_939 exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (exec_yankdup integer_lte boolean_invert_first_then_and boolean_xor integer_swap) exec_y (boolean_or) integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (in1 integer_add) boolean_frominteger) boolean_flush exec_dup_times (boolean_frominteger) exec_yankdup boolean_rot) integer_max) (boolean_yankdup boolean_invert_first_then_and boolean_pop) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 81
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 134 344 285 486 102 18 527 489 145)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (482 134 344 285 486 102 18 527 489 145)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_939} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Best program: (boolean_flush exec_if (exec_k_when_autoconstructing (integer_dec) (exec_yank exec_do*while (boolean_shove in1 in2 integer_dec integer_dup_items boolean_not) integer_stackdepth integer_mult in1) boolean_shove in3 in4) (integer_yankdup) print_integer integer_rot integer_yank exec_if () (exec_empty exec_yank) integer_add boolean_dup_items exec_y (exec_dup_items tagged_939 in4) in2 exec_shove (exec_empty exec_pop () integer_lte exec_yank integer_swap) exec_y (integer_div exec_s_when_autoconstructing (integer_fromboolean integer_eq) (integer_pop) (exec_shove (boolean_xor in1 integer_fromboolean boolean_frominteger) exec_dup_times (exec_while (boolean_frominteger) exec_yankdup boolean_rot) integer_max) integer_sub integer_dup_items integer_dec exec_shove () boolean_yankdup integer_flush) boolean_invert_first_then_and exec_yank boolean_pop)
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.988
Median total errors in population: 8
Error averages by case: (0.518 0.866 0.656 0.715 0.514 0.898 0.982 0.473 0.511 0.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.334
Average program size in population (points): 86.751
Average percent parens in population: 0.257
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.396
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6094098
--- Timings ---
Current time: 1559594049004 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.8 seconds, 40.0%
Fitness Testing:      5.3 seconds, 36.5%
Report:               3.3 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 1                  
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 59                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 64                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 76                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 35                 
Correct output: 25                  | Program output: 99                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 24                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 39                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -21                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: 17                 
Correct output: -70                 | Program output: -4                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: 1                  
Correct output: -80                 | Program output: 61                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: 44                 
Correct output: -90                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: 79                 
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: 64                 
Correct output: -28                 | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 21                 
Correct output: -57                 | Program output: -44                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 51                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 1                  
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 100                
Correct output: -99                 | Program output: 43                 
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 61                 
Correct output: -36                 | Program output: 1                  
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -10                
Correct output: -90                 | Program output: 64                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: -26                
Correct output: -31                 | Program output: 58                 
Correct output: -89                 | Program output: -30                
Correct output: 4                   | Program output: 48                 
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 82                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -17                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: -80                
Correct output: -93                 | Program output: -76                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_flush exec_if (integer_dec) (exec_y_when_autoconstructing (exec_do*while (in2 in1 integer_min) integer_stackdepth in2 integer_dup_items boolean_not) boolean_yank integer_mult in3 in1) exec_shove (integer_yank in3 integer_yankdup) print_integer integer_rot integer_yank exec_if () (exec_s () (boolean_dup_items integer_lt) (integer_swap exec_y (integer_gte exec_dup_items boolean_xor tag_integer_221 boolean_invert_first_then_and) integer_min in4) exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (integer_swap) exec_y (integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (integer_min) exec_shove (boolean_xor boolean_flush boolean_frominteger) integer_gte exec_pop (boolean_stackdepth boolean_frominteger) exec_yankdup exec_do*times (integer_max) exec_shove () boolean_yankdup integer_div) exec_yank boolean_pop))) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_flush exec_if (integer_dec) (exec_y_when_autoconstructing (exec_do*while (in2 in1 integer_min) integer_stackdepth in2 integer_dup_items boolean_not) boolean_yank integer_mult in3 in1) exec_shove (integer_yank in3 integer_yankdup) print_integer integer_rot integer_yank exec_if () (exec_s () (boolean_dup_items integer_lt) (integer_swap exec_y (integer_gte exec_dup_items boolean_xor tag_integer_221 boolean_invert_first_then_and) integer_min in4) exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (integer_swap) exec_y (integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (integer_min) exec_shove (boolean_xor boolean_flush boolean_frominteger) integer_gte exec_pop (boolean_stackdepth boolean_frominteger) exec_yankdup exec_do*times (integer_max) exec_shove () boolean_yankdup integer_div) exec_yank boolean_pop))) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 128 145 83 132 192 93 116 131 206)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (200 128 145 83 132 192 93 116 131 206)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop})
Best program: (boolean_flush exec_if (integer_dec) (exec_y_when_autoconstructing (exec_do*while (in2 in1 integer_min) integer_stackdepth in2 integer_dup_items boolean_not) boolean_yank integer_mult in3 in1) exec_shove (integer_yank in3 integer_yankdup) print_integer integer_rot integer_yank exec_if () (exec_s () (boolean_dup_items integer_lt) (integer_swap exec_y (integer_gte exec_dup_items boolean_xor tag_integer_221 boolean_invert_first_then_and) integer_min in4) exec_rot (exec_k () (in2 exec_shove (exec_empty exec_pop () exec_do*range (integer_swap) exec_y (integer_div boolean_xor exec_s_when_autoconstructing (integer_eq) (integer_pop) (integer_min) exec_shove (boolean_xor boolean_flush boolean_frominteger) integer_gte exec_pop (boolean_stackdepth boolean_frominteger) exec_yankdup exec_do*times (integer_max) exec_shove () boolean_yankdup integer_div) exec_yank boolean_pop))) () ()))
Errors: [0 0 0 0 1 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 95
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 8.574
Median total errors in population: 9
Error averages by case: (0.8 0.872 0.855 0.917 0.868 0.808 0.907 0.884 0.869 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.425
Average program size in population (points): 88.448
Average percent parens in population: 0.259
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.418
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7325181
--- Timings ---
Current time: 1559594051797 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.6 seconds, 37.2%
Fitness Testing:      6.2 seconds, 34.9%
Report:               4.8 seconds, 27.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 457
Test mean error for best: 0.45700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 64                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 24                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 39                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: 21                 
Correct output: -100                | Program output: 46                 
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: 64                 
Correct output: -28                 | Program output: 40                 
Correct output: -100                | Program output: -81                
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -44                
Correct output: -60                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 76                 
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: 83                 
Correct output: -91                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 48                 
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -4                 
Correct output: -74                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_flush exec_if (exec_k_when_autoconstructing (integer_dec) (exec_do*while (in2 in2 integer_dup_items boolean_not) integer_stackdepth in1) boolean_shove in4) (exec_pop (integer_yankdup) in1 integer_min print_integer integer_rot integer_stackdepth) integer_yank exec_if () (exec_yank) integer_add exec_s_when_autoconstructing (boolean_dup_items integer_swap exec_y (boolean_frominteger exec_dup_items tag_integer_221 in2 exec_shove (boolean_not) exec_pop () integer_lte integer_swap) exec_y (integer_div exec_s_when_autoconstructing (integer_eq) (integer_pop) (exec_shove (boolean_xor in1 boolean_frominteger) integer_dec exec_dup_times (boolean_frominteger) boolean_rot) integer_max) integer_sub integer_dup_items print_integer) (-8) () exec_shove () boolean_yankdup boolean_empty integer_flush boolean_pop)
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_integer} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_flush exec_if (exec_k_when_autoconstructing (integer_dec) (exec_do*while (in2 in2 integer_dup_items boolean_not) integer_stackdepth in1) boolean_shove in4) (exec_pop (integer_yankdup) in1 integer_min print_integer integer_rot integer_stackdepth) integer_yank exec_if () (exec_yank) integer_add exec_s_when_autoconstructing (boolean_dup_items integer_swap exec_y (boolean_frominteger exec_dup_items tag_integer_221 in2 exec_shove (boolean_not) exec_pop () integer_lte integer_swap) exec_y (integer_div exec_s_when_autoconstructing (integer_eq) (integer_pop) (exec_shove (boolean_xor in1 boolean_frominteger) integer_dec exec_dup_times (boolean_frominteger) boolean_rot) integer_max) integer_sub integer_dup_items print_integer) (-8) () exec_shove () boolean_yankdup boolean_empty integer_flush boolean_pop)
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 252 330 208 687 160 205 208 161 439)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (187 252 330 208 687 160 205 208 161 439)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 2, :instruction -8} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_dup_items boolean_not) integer_stackdepth integer_mult exec_yankdup in4) (exec_pop (integer_yankdup) in3 integer_min print_integer integer_rot boolean_swap integer_yank exec_yank) boolean_invert_second_then_and integer_add) (boolean_dup_items integer_swap exec_y (exec_dup_items tag_integer_221 in4) in2 boolean_dup exec_shove (boolean_dup_items exec_pop () exec_do*range (integer_lte exec_yank integer_yank) integer_swap) integer_mult exec_y (integer_div integer_eq) integer_pop) exec_shove (boolean_xor boolean_invert_second_then_and in1 boolean_frominteger) integer_dec exec_dup_times (boolean_frominteger) integer_lt print_boolean boolean_rot integer_max integer_sub integer_dup_items -8 boolean_yankdup integer_max integer_flush boolean_pop)
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 78
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.163
Median total errors in population: 7
Error averages by case: (0.813 0.748 0.67 0.792 0.313 0.84 0.795 0.792 0.839 0.561)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.438
Average program size in population (points): 88.898
Average percent parens in population: 0.262
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8577682
--- Timings ---
Current time: 1559594055399 milliseconds
Total Time:          20.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.4 seconds, 36.0%
Fitness Testing:      7.1 seconds, 34.7%
Report:               5.9 seconds, 28.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 315
Test mean error for best: 0.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 67                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 50                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_dup_items boolean_not) integer_stackdepth in4 in1) (boolean_shove boolean_yankdup exec_yankdup in4) integer_yankdup) (in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) integer_add) exec_s_when_autoconstructing (boolean_dup_items integer_swap exec_y (exec_yankdup boolean_frominteger exec_dup_items tag_integer_221 in2 boolean_rot exec_pop () integer_lte integer_swap) integer_mod exec_y (integer_div exec_s_when_autoconstructing (boolean_empty integer_eq) (exec_shove (boolean_xor boolean_invert_second_then_and in1 boolean_frominteger) exec_dup_times (boolean_frominteger) in4) (boolean_rot) integer_sub -8)) (exec_shove () boolean_yankdup integer_flush) () boolean_pop)
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_dup_items boolean_not) integer_stackdepth in4 in1) (boolean_shove boolean_yankdup exec_yankdup in4) integer_yankdup) (in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) integer_add) exec_s_when_autoconstructing (boolean_dup_items integer_swap exec_y (exec_yankdup boolean_frominteger exec_dup_items tag_integer_221 in2 boolean_rot exec_pop () integer_lte integer_swap) integer_mod exec_y (integer_div exec_s_when_autoconstructing (boolean_empty integer_eq) (exec_shove (boolean_xor boolean_invert_second_then_and in1 boolean_frominteger) exec_dup_times (boolean_frominteger) in4) (boolean_rot) integer_sub -8)) (exec_shove () boolean_yankdup integer_flush) () boolean_pop)
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 149 249 344 627 110 299 399 148 303)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (327 149 249 344 627 110 299 399 148 303)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 1, :instruction boolean_rot} {:close 2, :instruction -8} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Best program: (exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_dup_items boolean_not) integer_stackdepth in1) (integer_div)) (boolean_shove boolean_yankdup exec_yankdup in4) integer_yankdup in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) integer_add exec_s_when_autoconstructing (boolean_dup_items integer_swap boolean_frominteger exec_dup_items boolean_dup tag_integer_221 in2 boolean_rot exec_pop () integer_lte integer_swap) (integer_mod exec_y (integer_div integer_gt integer_eq) integer_pop) (exec_shove (boolean_xor boolean_invert_second_then_and in1 boolean_frominteger) boolean_frominteger) in4 boolean_rot -8 exec_y (exec_shove () boolean_yankdup integer_flush) boolean_pop)
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.045
Median total errors in population: 7
Error averages by case: (0.673 0.851 0.751 0.656 0.373 0.89 0.701 0.601 0.852 0.697)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.657
Average program size in population (points): 82.03
Average percent parens in population: 0.248
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9852899
--- Timings ---
Current time: 1559594057970 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         8.2 seconds, 34.0%
Fitness Testing:      8.0 seconds, 33.4%
Report:               7.7 seconds, 32.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 325
Test mean error for best: 0.32500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 55                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 67                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 50                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 84                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 1, :instruction boolean_rot} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_if (exec_k_when_autoconstructing (boolean_shove in2 in2 integer_dup_items boolean_not) (in1) boolean_shove boolean_yankdup in4 exec_s_when_autoconstructing (exec_yankdup in4) (in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) boolean_invert_second_then_and integer_add) (exec_s_when_autoconstructing (boolean_dup_items exec_y (boolean_frominteger exec_dup_items tag_integer_221 in2 exec_pop () integer_lte integer_swap) integer_mod exec_y (exec_s_when_autoconstructing (exec_shove (boolean_xor in1 exec_dup_times (boolean_frominteger) in4) boolean_rot) (-8) () exec_shove () integer_flush)) (boolean_pop) ())) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in4} {:close 1, :instruction boolean_rot} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_if (exec_k_when_autoconstructing (boolean_shove in2 in2 integer_dup_items boolean_not) (in1) boolean_shove boolean_yankdup in4 exec_s_when_autoconstructing (exec_yankdup in4) (in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) boolean_invert_second_then_and integer_add) (exec_s_when_autoconstructing (boolean_dup_items exec_y (boolean_frominteger exec_dup_items tag_integer_221 in2 exec_pop () integer_lte integer_swap) integer_mod exec_y (exec_s_when_autoconstructing (exec_shove (boolean_xor in1 exec_dup_times (boolean_frominteger) in4) boolean_rot) (-8) () exec_shove () integer_flush)) (boolean_pop) ())) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (338 295 320 213 238 533 306 318 575 291)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (338 295 320 213 238 533 306 318 575 291)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_389} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod})
Best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_dup_items boolean_not) integer_stackdepth in4 in1) (boolean_shove boolean_yankdup exec_yankdup in4) integer_yankdup) (in1 integer_min print_integer integer_rot integer_yank exec_if () (tag_integer_389 exec_yank) integer_add) exec_s_when_autoconstructing (boolean_dup_items integer_swap exec_y (exec_yankdup boolean_frominteger exec_dup_items tag_integer_221 in2 boolean_rot exec_pop () integer_lte integer_swap) integer_mod exec_y (integer_div exec_s_when_autoconstructing (boolean_empty integer_eq) (exec_shove (boolean_xor in1 boolean_frominteger) exec_dup_times (boolean_frominteger) integer_sub -8) () exec_shove () boolean_yankdup integer_flush)) (boolean_pop integer_mod) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.573
Median total errors in population: 6
Error averages by case: (0.662 0.705 0.68 0.787 0.762 0.467 0.694 0.682 0.425 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.717
Average program size in population (points): 82.848
Average percent parens in population: 0.242
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11131555
--- Timings ---
Current time: 1559594060747 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.0 seconds, 33.7%
Fitness Testing:      8.9 seconds, 33.5%
Report:               8.6 seconds, 32.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 271
Test mean error for best: 0.27100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 76                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 35                 
Correct output: 25                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 77                 
Correct output: 15                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 39                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -11                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 51                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 61                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 52                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 47                 
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_436} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_flush boolean_eq exec_if (exec_do*while (boolean_shove exec_noop in2 in2 integer_dup_items integer_stackdepth boolean_shove exec_yankdup boolean_rot exec_pop (integer_yankdup) in3 integer_min print_integer exec_while (integer_rot boolean_swap boolean_invert_second_then_and integer_add) boolean_dup_items integer_swap boolean_or) exec_y (exec_y (exec_dup_items tag_integer_221 boolean_swap) in2 exec_swap (boolean_dup integer_max exec_shove (integer_gt exec_pop () exec_do*range (exec_flush)) exec_k_when_autoconstructing (integer_lte tagged_436 exec_yank boolean_not) (integer_swap) exec_y (integer_div exec_dup_items exec_s_when_autoconstructing (integer_eq) (integer_flush) (integer_gte exec_stackdepth integer_pop) boolean_xor boolean_frominteger) integer_dec boolean_frominteger) (integer_div integer_gte) integer_lt boolean_rot) integer_max) (boolean_dup_times boolean_flush in3 integer_stackdepth integer_dup_items integer_flush -8) exec_shove () exec_pop (exec_yankdup integer_max integer_flush) integer_max)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 98
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_436} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_flush boolean_eq exec_if (exec_do*while (boolean_shove exec_noop in2 in2 integer_dup_items integer_stackdepth boolean_shove exec_yankdup boolean_rot exec_pop (integer_yankdup) in3 integer_min print_integer exec_while (integer_rot boolean_swap boolean_invert_second_then_and integer_add) boolean_dup_items integer_swap boolean_or) exec_y (exec_y (exec_dup_items tag_integer_221 boolean_swap) in2 exec_swap (boolean_dup integer_max exec_shove (integer_gt exec_pop () exec_do*range (exec_flush)) exec_k_when_autoconstructing (integer_lte tagged_436 exec_yank boolean_not) (integer_swap) exec_y (integer_div exec_dup_items exec_s_when_autoconstructing (integer_eq) (integer_flush) (integer_gte exec_stackdepth integer_pop) boolean_xor boolean_frominteger) integer_dec boolean_frominteger) (integer_div integer_gte) integer_lt boolean_rot) integer_max) (boolean_dup_times boolean_flush in3 integer_stackdepth integer_dup_items integer_flush -8) exec_shove () exec_pop (exec_yankdup integer_max integer_flush) integer_max)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 98
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 167 180 161 154 141 160 657 588 200)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (417 167 180 161 154 141 160 657 588 200)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction -5} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_pop})
Best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (in2 in3 in2 integer_dup_items boolean_eq integer_stackdepth in4 boolean_shove boolean_yankdup integer_pop integer_dec exec_yankdup in1 integer_min print_integer integer_rot integer_yank integer_swap exec_if () (exec_yank) boolean_swap integer_add) in2 exec_s_when_autoconstructing (boolean_dup_items exec_shove (integer_swap exec_yank exec_yankdup boolean_frominteger integer_yankdup exec_dup_items tag_integer_221 exec_pop () boolean_rot integer_lte integer_dup_times integer_swap) integer_mod exec_y (integer_div integer_lt) exec_s_when_autoconstructing (boolean_empty -5 integer_eq) (exec_shove (boolean_xor integer_dup boolean_invert_second_then_and in1 boolean_frominteger) exec_dup_times (in4) boolean_dup_items integer_sub exec_shove () boolean_not integer_flush) () boolean_pop) () ()) ()) ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 64
Size: 84
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.175
Median total errors in population: 7
Error averages by case: (0.583 0.833 0.82 0.839 0.846 0.859 0.84 0.343 0.412 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.394
Average program size in population (points): 80.789
Average percent parens in population: 0.240
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.382
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12382343
--- Timings ---
Current time: 1559594063254 milliseconds
Total Time:          29.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.8 seconds, 33.4%
Fitness Testing:      9.8 seconds, 33.2%
Report:               9.7 seconds, 33.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 328
Test mean error for best: 0.32800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 33                 
Correct output: 66                  | Program output: 69                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 52                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 36                 
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -18                
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -31                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -22                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -25                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -42                
Correct output: -91                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 49                 
Correct output: -26                 | Program output: -10                
Correct output: -58                 | Program output: -24                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_436} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_integer_304} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_eq exec_if (exec_do*while (boolean_shove exec_noop in2 in2 integer_dup_items integer_stackdepth boolean_shove exec_yankdup in4) integer_yankdup) (exec_y_when_autoconstructing (in3 integer_min print_integer exec_while (integer_rot boolean_swap exec_yank exec_dup (integer_div) integer_yank boolean_invert_second_then_and integer_add) integer_swap boolean_or) exec_y (exec_y (exec_dup_items tag_integer_221 in4) exec_swap (in2 boolean_dup exec_shove (exec_k_when_autoconstructing (exec_pop () exec_do*range (exec_flush)) (exec_k_when_autoconstructing (integer_lte tagged_436 exec_yank boolean_not) (integer_swap) exec_y (boolean_invert_second_then_and integer_div exec_dup_items exec_s_when_autoconstructing (integer_eq) (integer_gte exec_stackdepth integer_pop) (in1 boolean_frominteger) integer_dec boolean_frominteger) integer_div integer_lt boolean_rot) integer_max) boolean_dup_times tag_integer_304 integer_yank in3 integer_stackdepth integer_dup_items integer_flush -8) () exec_shove () integer_dec boolean_yankdup exec_yankdup boolean_and integer_max integer_flush)) integer_max)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 103
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_436} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_integer_304} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_eq exec_if (exec_do*while (boolean_shove exec_noop in2 in2 integer_dup_items integer_stackdepth boolean_shove exec_yankdup in4) integer_yankdup) (exec_y_when_autoconstructing (in3 integer_min print_integer exec_while (integer_rot boolean_swap exec_yank exec_dup (integer_div) integer_yank boolean_invert_second_then_and integer_add) integer_swap boolean_or) exec_y (exec_y (exec_dup_items tag_integer_221 in4) exec_swap (in2 boolean_dup exec_shove (exec_k_when_autoconstructing (exec_pop () exec_do*range (exec_flush)) (exec_k_when_autoconstructing (integer_lte tagged_436 exec_yank boolean_not) (integer_swap) exec_y (boolean_invert_second_then_and integer_div exec_dup_items exec_s_when_autoconstructing (integer_eq) (integer_gte exec_stackdepth integer_pop) (in1 boolean_frominteger) integer_dec boolean_frominteger) integer_div integer_lt boolean_rot) integer_max) boolean_dup_times tag_integer_304 integer_yank in3 integer_stackdepth integer_dup_items integer_flush -8) () exec_shove () integer_dec boolean_yankdup exec_yankdup boolean_and integer_max integer_flush)) integer_max)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 103
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 282 337 88 418 290 331 221 422 425)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (423 282 337 88 418 290 331 221 422 425)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_436} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction -8} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max})
Best program: (exec_dup_times (exec_do*while (boolean_shove exec_noop in2 in2 integer_dup_items integer_stackdepth boolean_shove exec_yankdup in4) integer_yankdup) in3 integer_min print_integer in3 integer_rot boolean_swap exec_yank exec_dup (integer_yank boolean_invert_second_then_and integer_add) boolean_dup_items integer_swap boolean_or exec_y (exec_y (exec_dup_items tag_integer_221 in4) exec_swap (in2 boolean_dup boolean_and) (integer_max exec_shove (integer_gt exec_pop () exec_do*range (integer_dup_items) exec_flush)) exec_k_when_autoconstructing (integer_lte tagged_436 exec_yank boolean_not) (integer_swap) exec_y (integer_dup_items integer_div exec_s_when_autoconstructing (integer_eq) (integer_gte exec_stackdepth integer_pop) (boolean_invert_second_then_and in1 boolean_frominteger) integer_dec boolean_frominteger) integer_div integer_gte) integer_lt boolean_rot integer_lte integer_max boolean_dup_times integer_yank in3 integer_stackdepth integer_dup_items integer_flush -8 exec_shove () integer_dec boolean_yankdup exec_yankdup boolean_and integer_max integer_max)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 81
Size: 99
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.763
Median total errors in population: 7
Error averages by case: (0.577 0.718 0.663 0.912 0.582 0.71 0.669 0.779 0.578 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.934
Average program size in population (points): 83.871
Average percent parens in population: 0.238
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13607921
--- Timings ---
Current time: 1559594066724 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        10.6 seconds, 33.3%
Fitness Testing:     10.6 seconds, 33.3%
Report:              10.5 seconds, 33.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 269
Test mean error for best: 0.26900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: 66                 
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 37                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 56                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 64                 
Correct output: -58                 | Program output: -58                
Correct output: -100                | Program output: -90                
Correct output: -33                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -95                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -9                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -76                
Correct output: -90                 | Program output: -58                
Correct output: -51                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 43                 
Correct output: -36                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -57                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: -93                
Correct output: -23                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -51                
Correct output: -100                | Program output: -85                
Correct output: -99                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: -9                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -31                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -49                
Correct output: -58                 | Program output: -54                
Correct output: -98                 | Program output: -69                
Correct output: -31                 | Program output: -31                
Correct output: -89                 | Program output: -89                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -72                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -81                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 2, :instruction -8} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank in4 in3 integer_yankdup) integer_min in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) exec_s_when_autoconstructing (boolean_dup_items exec_y (exec_yankdup boolean_frominteger exec_dup_items tag_integer_221 in2 boolean_rot exec_pop () integer_swap) in4 integer_mod exec_y (integer_div exec_yank) integer_eq) (integer_mod exec_shove (exec_if (boolean_invert_second_then_and exec_y_when_autoconstructing (in1 boolean_frominteger) exec_yank exec_dup_times (boolean_frominteger) boolean_rot) (-8)) boolean_frominteger exec_shove () boolean_yankdup) ()) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 2, :instruction -8} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank in4 in3 integer_yankdup) integer_min in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) exec_s_when_autoconstructing (boolean_dup_items exec_y (exec_yankdup boolean_frominteger exec_dup_items tag_integer_221 in2 boolean_rot exec_pop () integer_swap) in4 integer_mod exec_y (integer_div exec_yank) integer_eq) (integer_mod exec_shove (exec_if (boolean_invert_second_then_and exec_y_when_autoconstructing (in1 boolean_frominteger) exec_yank exec_dup_times (boolean_frominteger) boolean_rot) (-8)) boolean_frominteger exec_shove () boolean_yankdup) ()) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 208 469 387 365 157 362 597 157 127)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (274 208 469 387 365 157 362 597 157 127)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_221} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 boolean_yankdup) in2 integer_yank integer_stackdepth in4 boolean_shove in4) (integer_yankdup) integer_min in1 integer_min print_integer integer_rot integer_yank exec_if () (exec_yank) exec_s_when_autoconstructing (boolean_dup_items exec_y (exec_yankdup boolean_frominteger exec_dup_items tag_integer_221 in2 exec_pop () integer_swap) boolean_and) (integer_div exec_yank) (boolean_empty integer_eq) integer_mod exec_shove (exec_if (boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_frominteger) exec_yank exec_dup_times (boolean_frominteger) boolean_rot) (integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 52
Size: 71
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.897
Median total errors in population: 7
Error averages by case: (0.726 0.792 0.531 0.613 0.635 0.843 0.638 0.403 0.843 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.245
Average program size in population (points): 92.285
Average percent parens in population: 0.230
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14810958
--- Timings ---
Current time: 1559594069539 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        11.4 seconds, 32.3%
Fitness Testing:     11.5 seconds, 32.5%
Report:              12.4 seconds, 34.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 189
Test mean error for best: 0.18900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -11                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_9} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_760} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_9} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_760} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (393 304 436 354 365 115 366 504 221 506)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (393 304 436 354 365 115 366 504 221 506)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_9} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_760} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction -8} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 52
Size: 69
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.436
Median total errors in population: 6
Error averages by case: (0.607 0.696 0.564 0.646 0.635 0.885 0.634 0.496 0.779 0.494)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.162
Average program size in population (points): 81.078
Average percent parens in population: 0.260
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16137604
--- Timings ---
Current time: 1559594071631 milliseconds
Total Time:          38.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.3 seconds, 32.0%
Fitness Testing:     12.4 seconds, 32.5%
Report:              13.5 seconds, 35.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 69


Auto-simplifying with starting size: 69
step: 0
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 500
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1000
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1500
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2000
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2500
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3000
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3500
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4000
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4500
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 5000
program: (boolean_flush exec_if (exec_k_when_autoconstructing (exec_do*while (boolean_shove in2 in2 integer_yank exec_do*while (boolean_shove in3 in4) integer_yankdup) boolean_frominteger integer_min in1 integer_min print_integer integer_yankdup) (integer_rot integer_yank exec_if () (boolean_pop boolean_dup_items exec_y (exec_yankdup exec_dup_items in2 boolean_rot integer_mod exec_y (tag_integer_9 exec_yank) boolean_empty tagged_760 integer_eq) integer_mod exec_shove (exec_if (integer_swap) (boolean_frominteger exec_y_when_autoconstructing (in1 boolean_frominteger) exec_dup_times (boolean_pop) boolean_rot) integer_sub -8)) boolean_frominteger exec_shove () boolean_yankdup)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 189
Test mean error for best: 0.18900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: 47                  | Program output: 47                 
Correct output: -39                 | Program output: -39                
Correct output: -75                 | Program output: -75                
Correct output: -13                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -24                 | Program output: -24                
Correct output: 41                  | Program output: 41                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: 31                  | Program output: 31                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 66                  | Program output: 66                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 13                  | Program output: 13                 
Correct output: 32                  | Program output: 32                 
Correct output: 25                  | Program output: 43                 
Correct output: 27                  | Program output: 27                 
Correct output: 2                   | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 56                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 30                  | Program output: 30                 
Correct output: 54                  | Program output: 54                 
Correct output: -58                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -30                 | Program output: 8                  
Correct output: -96                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -74                
Correct output: -95                 | Program output: -95                
Correct output: -15                 | Program output: -11                
Correct output: -80                 | Program output: 1                  
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -13                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -100                | Program output: -100               
Correct output: 43                  | Program output: 46                 
Correct output: -36                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -93                 | Program output: 49                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: -56                 | Program output: -56                
Correct output: -90                 | Program output: -73                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: -31                 | Program output: 30                 
Correct output: -89                 | Program output: -82                
Correct output: 4                   | Program output: 4                  
Correct output: 33                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: -26                 | Program output: -26                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -95                 | Program output: -83                
;;******************************
