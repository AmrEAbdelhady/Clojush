Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[25 -61 25 25] -61] [[-86 -86 -21 -86] -86] [[39 39 39 -50] -50] [[-90 -90 -90 -16] -90] [[-60 -60 -78 -60] -78] [[-51 -51 -51 38] -51] [[93 93 93 52] 52] [[-16 -16 43 -16] -16] [[-6 -58 -6 -6] -58] [[-16 -16 0 -16] -16] [(-78 -78 -78 -78) -78] [(18 18 18 18) 18] [(-87 -87 -87 -87) -87] [(-11 -11 -11 -11) -11] [(76 76 76 76) 76] [(69 58 35 97) 35] [(14 5 24 24) 5] [(5 84 13 52) 5] [(7 14 95 61) 7] [(6 29 98 36) 6] [(82 9 0 12) 0] [(14 84 10 8) 8] [(72 64 23 4) 4] [(27 84 94 86) 27] [(85 99 72 72) 72] [(94 65 87 40) 40] [(24 65 39 88) 24] [(7 96 80 60) 7] [(18 5 89 29) 5] [(0 6 27 36) 0] [(67 86 95 99) 67] [(96 58 82 36) 36] [(76 6 95 69) 6] [(52 34 38 68) 34] [(76 44 68 62) 44] [(93 -41 7 -25) -41] [(-16 -45 69 96) -45] [(50 -22 -56 -63) -63] [(94 -44 -59 1) -59] [(-15 -26 -25 -59) -59] [(34 -34 16 -86) -86] [(32 -32 8 65) -32] [(3 -73 -40 18) -73] [(30 -100 -93 -71) -100] [(79 -32 -78 -28) -78] [(93 -52 -70 -65) -70] [(69 90 -57 -7) -57] [(3 -41 44 -1) -41] [(-35 74 65 18) -35] [(-2 46 -97 77) -97] [(-55 43 -32 -92) -92] [(-22 -20 -19 73) -22] [(93 -87 93 99) -87] [(67 -43 51 -90) -90] [(19 63 74 52) 19] [(-90 -8 62 -46) -90] [(36 14 -2 -97) -97] [(-55 55 -3 97) -55] [(43 -22 -80 0) -80] [(-91 23 -37 0) -91] [(76 -40 -63 -51) -63] [(-8 -63 85 -36) -63] [(-76 -84 37 -10) -84] [(56 55 53 53) 53] [(-47 88 64 -5) -47] [(29 17 -24 -60) -60] [(95 91 53 -94) -94] [(-84 -15 98 -68) -84] [(93 13 -25 47) -25] [(-6 46 -69 85) -69] [(-32 -82 85 20) -82] [(60 -53 73 46) -53] [(-42 39 15 -36) -42] [(22 36 67 -28) -28] [(49 -15 69 -84) -84] [(79 76 93 -45) -45] [(12 23 57 97) 12] [(-5 -63 13 -81) -81] [(-39 35 -24 -5) -39] [(-38 -8 -91 55) -91] [(34 -47 75 52) -47] [(39 -22 2 4) -22] [(-7 -100 -29 -16) -100] [(90 71 13 -68) -68] [(-12 61 -75 82) -75] [(-86 -50 73 -48) -86] [(52 41 88 -64) -64] [(26 -59 21 -86) -86] [(49 -71 -2 71) -71] [(-81 50 5 25) -81] [(-8 22 98 -23) -23] [(-49 -1 -69 66) -69] [(-14 -86 94 93) -86] [(5 -56 42 -50) -56] [(48 92 82 32) 32])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[25 -61 25 25] -61]
Train Case:   6 | Input/Output: [[-86 -86 -21 -86] -86]
Train Case:   7 | Input/Output: [[39 39 39 -50] -50]
Train Case:   8 | Input/Output: [[-90 -90 -90 -16] -90]
Train Case:   9 | Input/Output: [[-60 -60 -78 -60] -78]
Train Case:  10 | Input/Output: [[-51 -51 -51 38] -51]
Train Case:  11 | Input/Output: [[93 93 93 52] 52]
Train Case:  12 | Input/Output: [[-16 -16 43 -16] -16]
Train Case:  13 | Input/Output: [[-6 -58 -6 -6] -58]
Train Case:  14 | Input/Output: [[-16 -16 0 -16] -16]
Train Case:  15 | Input/Output: [(-78 -78 -78 -78) -78]
Train Case:  16 | Input/Output: [(18 18 18 18) 18]
Train Case:  17 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  18 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  19 | Input/Output: [(76 76 76 76) 76]
Train Case:  20 | Input/Output: [(69 58 35 97) 35]
Train Case:  21 | Input/Output: [(14 5 24 24) 5]
Train Case:  22 | Input/Output: [(5 84 13 52) 5]
Train Case:  23 | Input/Output: [(7 14 95 61) 7]
Train Case:  24 | Input/Output: [(6 29 98 36) 6]
Train Case:  25 | Input/Output: [(82 9 0 12) 0]
Train Case:  26 | Input/Output: [(14 84 10 8) 8]
Train Case:  27 | Input/Output: [(72 64 23 4) 4]
Train Case:  28 | Input/Output: [(27 84 94 86) 27]
Train Case:  29 | Input/Output: [(85 99 72 72) 72]
Train Case:  30 | Input/Output: [(94 65 87 40) 40]
Train Case:  31 | Input/Output: [(24 65 39 88) 24]
Train Case:  32 | Input/Output: [(7 96 80 60) 7]
Train Case:  33 | Input/Output: [(18 5 89 29) 5]
Train Case:  34 | Input/Output: [(0 6 27 36) 0]
Train Case:  35 | Input/Output: [(67 86 95 99) 67]
Train Case:  36 | Input/Output: [(96 58 82 36) 36]
Train Case:  37 | Input/Output: [(76 6 95 69) 6]
Train Case:  38 | Input/Output: [(52 34 38 68) 34]
Train Case:  39 | Input/Output: [(76 44 68 62) 44]
Train Case:  40 | Input/Output: [(93 -41 7 -25) -41]
Train Case:  41 | Input/Output: [(-16 -45 69 96) -45]
Train Case:  42 | Input/Output: [(50 -22 -56 -63) -63]
Train Case:  43 | Input/Output: [(94 -44 -59 1) -59]
Train Case:  44 | Input/Output: [(-15 -26 -25 -59) -59]
Train Case:  45 | Input/Output: [(34 -34 16 -86) -86]
Train Case:  46 | Input/Output: [(32 -32 8 65) -32]
Train Case:  47 | Input/Output: [(3 -73 -40 18) -73]
Train Case:  48 | Input/Output: [(30 -100 -93 -71) -100]
Train Case:  49 | Input/Output: [(79 -32 -78 -28) -78]
Train Case:  50 | Input/Output: [(93 -52 -70 -65) -70]
Train Case:  51 | Input/Output: [(69 90 -57 -7) -57]
Train Case:  52 | Input/Output: [(3 -41 44 -1) -41]
Train Case:  53 | Input/Output: [(-35 74 65 18) -35]
Train Case:  54 | Input/Output: [(-2 46 -97 77) -97]
Train Case:  55 | Input/Output: [(-55 43 -32 -92) -92]
Train Case:  56 | Input/Output: [(-22 -20 -19 73) -22]
Train Case:  57 | Input/Output: [(93 -87 93 99) -87]
Train Case:  58 | Input/Output: [(67 -43 51 -90) -90]
Train Case:  59 | Input/Output: [(19 63 74 52) 19]
Train Case:  60 | Input/Output: [(-90 -8 62 -46) -90]
Train Case:  61 | Input/Output: [(36 14 -2 -97) -97]
Train Case:  62 | Input/Output: [(-55 55 -3 97) -55]
Train Case:  63 | Input/Output: [(43 -22 -80 0) -80]
Train Case:  64 | Input/Output: [(-91 23 -37 0) -91]
Train Case:  65 | Input/Output: [(76 -40 -63 -51) -63]
Train Case:  66 | Input/Output: [(-8 -63 85 -36) -63]
Train Case:  67 | Input/Output: [(-76 -84 37 -10) -84]
Train Case:  68 | Input/Output: [(56 55 53 53) 53]
Train Case:  69 | Input/Output: [(-47 88 64 -5) -47]
Train Case:  70 | Input/Output: [(29 17 -24 -60) -60]
Train Case:  71 | Input/Output: [(95 91 53 -94) -94]
Train Case:  72 | Input/Output: [(-84 -15 98 -68) -84]
Train Case:  73 | Input/Output: [(93 13 -25 47) -25]
Train Case:  74 | Input/Output: [(-6 46 -69 85) -69]
Train Case:  75 | Input/Output: [(-32 -82 85 20) -82]
Train Case:  76 | Input/Output: [(60 -53 73 46) -53]
Train Case:  77 | Input/Output: [(-42 39 15 -36) -42]
Train Case:  78 | Input/Output: [(22 36 67 -28) -28]
Train Case:  79 | Input/Output: [(49 -15 69 -84) -84]
Train Case:  80 | Input/Output: [(79 76 93 -45) -45]
Train Case:  81 | Input/Output: [(12 23 57 97) 12]
Train Case:  82 | Input/Output: [(-5 -63 13 -81) -81]
Train Case:  83 | Input/Output: [(-39 35 -24 -5) -39]
Train Case:  84 | Input/Output: [(-38 -8 -91 55) -91]
Train Case:  85 | Input/Output: [(34 -47 75 52) -47]
Train Case:  86 | Input/Output: [(39 -22 2 4) -22]
Train Case:  87 | Input/Output: [(-7 -100 -29 -16) -100]
Train Case:  88 | Input/Output: [(90 71 13 -68) -68]
Train Case:  89 | Input/Output: [(-12 61 -75 82) -75]
Train Case:  90 | Input/Output: [(-86 -50 73 -48) -86]
Train Case:  91 | Input/Output: [(52 41 88 -64) -64]
Train Case:  92 | Input/Output: [(26 -59 21 -86) -86]
Train Case:  93 | Input/Output: [(49 -71 -2 71) -71]
Train Case:  94 | Input/Output: [(-81 50 5 25) -81]
Train Case:  95 | Input/Output: [(-8 22 98 -23) -23]
Train Case:  96 | Input/Output: [(-49 -1 -69 66) -69]
Train Case:  97 | Input/Output: [(-14 -86 94 93) -86]
Train Case:  98 | Input/Output: [(5 -56 42 -50) -56]
Train Case:  99 | Input/Output: [(48 92 82 32) 32]
Test Case:   0 | Input/Output: [[-24 -10 -10 -10] -24]
Test Case:   1 | Input/Output: [[49 33 49 49] 33]
Test Case:   2 | Input/Output: [[-15 22 22 22] -15]
Test Case:   3 | Input/Output: [[56 56 56 45] 45]
Test Case:   4 | Input/Output: [[66 58 66 66] 58]
Test Case:   5 | Input/Output: [[-27 65 -27 -27] -27]
Test Case:   6 | Input/Output: [[81 81 -95 81] -95]
Test Case:   7 | Input/Output: [[29 -15 -15 -15] -15]
Test Case:   8 | Input/Output: [[51 51 -100 51] -100]
Test Case:   9 | Input/Output: [[-71 -71 -71 -1] -71]
Test Case:  10 | Input/Output: [[-35 -35 -35 68] -35]
Test Case:  11 | Input/Output: [[75 -85 75 75] -85]
Test Case:  12 | Input/Output: [[-42 -46 -46 -46] -46]
Test Case:  13 | Input/Output: [[55 61 55 55] 55]
Test Case:  14 | Input/Output: [[68 68 68 -20] -20]
Test Case:  15 | Input/Output: [[-64 -64 -64 -92] -92]
Test Case:  16 | Input/Output: [[54 82 54 54] 54]
Test Case:  17 | Input/Output: [[65 65 -79 65] -79]
Test Case:  18 | Input/Output: [[4 4 4 20] 4]
Test Case:  19 | Input/Output: [[-49 -49 -49 57] -49]
Test Case:  20 | Input/Output: [[-98 18 18 18] -98]
Test Case:  21 | Input/Output: [[-18 -18 -29 -18] -29]
Test Case:  22 | Input/Output: [[47 -27 47 47] -27]
Test Case:  23 | Input/Output: [[-20 -20 -20 93] -20]
Test Case:  24 | Input/Output: [[-59 -59 17 -59] -59]
Test Case:  25 | Input/Output: [[9 -3 -3 -3] -3]
Test Case:  26 | Input/Output: [[-6 88 88 88] -6]
Test Case:  27 | Input/Output: [[80 80 85 80] 80]
Test Case:  28 | Input/Output: [[94 -62 94 94] -62]
Test Case:  29 | Input/Output: [[-62 -46 -62 -62] -62]
Test Case:  30 | Input/Output: [[68 -33 -33 -33] -33]
Test Case:  31 | Input/Output: [[-7 -42 -42 -42] -42]
Test Case:  32 | Input/Output: [[-75 -75 -75 -29] -75]
Test Case:  33 | Input/Output: [[-14 -14 -76 -14] -76]
Test Case:  34 | Input/Output: [[-64 61 61 61] -64]
Test Case:  35 | Input/Output: [[81 95 95 95] 81]
Test Case:  36 | Input/Output: [[-100 18 -100 -100] -100]
Test Case:  37 | Input/Output: [[-51 11 -51 -51] -51]
Test Case:  38 | Input/Output: [[74 74 74 92] 74]
Test Case:  39 | Input/Output: [[-31 30 30 30] -31]
Test Case:  40 | Input/Output: [[-30 -12 -12 -12] -30]
Test Case:  41 | Input/Output: [[-82 92 92 92] -82]
Test Case:  42 | Input/Output: [[47 47 47 21] 21]
Test Case:  43 | Input/Output: [[-78 -78 -78 -34] -78]
Test Case:  44 | Input/Output: [[84 33 84 84] 33]
Test Case:  45 | Input/Output: [[10 10 31 10] 10]
Test Case:  46 | Input/Output: [[-96 18 18 18] -96]
Test Case:  47 | Input/Output: [[14 14 14 -73] -73]
Test Case:  48 | Input/Output: [[97 68 97 97] 68]
Test Case:  49 | Input/Output: [[-99 88 -99 -99] -99]
Test Case:  50 | Input/Output: [[86 86 31 86] 31]
Test Case:  51 | Input/Output: [[83 83 83 67] 67]
Test Case:  52 | Input/Output: [[-76 -76 -76 88] -76]
Test Case:  53 | Input/Output: [[-35 37 -35 -35] -35]
Test Case:  54 | Input/Output: [[-41 55 -41 -41] -41]
Test Case:  55 | Input/Output: [[26 -76 -76 -76] -76]
Test Case:  56 | Input/Output: [[-68 -18 -18 -18] -68]
Test Case:  57 | Input/Output: [[-72 29 -72 -72] -72]
Test Case:  58 | Input/Output: [[96 96 -73 96] -73]
Test Case:  59 | Input/Output: [[-41 100 -41 -41] -41]
Test Case:  60 | Input/Output: [[14 14 14 67] 14]
Test Case:  61 | Input/Output: [[-44 84 -44 -44] -44]
Test Case:  62 | Input/Output: [[-77 -30 -77 -77] -77]
Test Case:  63 | Input/Output: [[80 80 80 -43] -43]
Test Case:  64 | Input/Output: [[-85 -85 74 -85] -85]
Test Case:  65 | Input/Output: [[14 0 14 14] 0]
Test Case:  66 | Input/Output: [[-28 -18 -28 -28] -28]
Test Case:  67 | Input/Output: [[29 29 71 29] 29]
Test Case:  68 | Input/Output: [[-86 -30 -86 -86] -86]
Test Case:  69 | Input/Output: [[-28 -28 53 -28] -28]
Test Case:  70 | Input/Output: [[29 29 29 62] 29]
Test Case:  71 | Input/Output: [[-92 28 -92 -92] -92]
Test Case:  72 | Input/Output: [[53 71 53 53] 53]
Test Case:  73 | Input/Output: [[35 35 -40 35] -40]
Test Case:  74 | Input/Output: [[-65 -65 -88 -65] -88]
Test Case:  75 | Input/Output: [[-49 -55 -49 -49] -55]
Test Case:  76 | Input/Output: [[75 75 -82 75] -82]
Test Case:  77 | Input/Output: [[-18 -18 -18 34] -18]
Test Case:  78 | Input/Output: [[63 77 77 77] 63]
Test Case:  79 | Input/Output: [[-90 -90 -90 42] -90]
Test Case:  80 | Input/Output: [[-63 -58 -58 -58] -63]
Test Case:  81 | Input/Output: [[1 76 76 76] 1]
Test Case:  82 | Input/Output: [[-29 -29 69 -29] -29]
Test Case:  83 | Input/Output: [[10 -29 10 10] -29]
Test Case:  84 | Input/Output: [[61 88 61 61] 61]
Test Case:  85 | Input/Output: [[-64 -64 -64 -58] -64]
Test Case:  86 | Input/Output: [[-56 -56 80 -56] -56]
Test Case:  87 | Input/Output: [[-12 -12 66 -12] -12]
Test Case:  88 | Input/Output: [[-99 -99 -38 -99] -99]
Test Case:  89 | Input/Output: [[77 73 77 77] 73]
Test Case:  90 | Input/Output: [[-83 -83 18 -83] -83]
Test Case:  91 | Input/Output: [[-99 -89 -99 -99] -99]
Test Case:  92 | Input/Output: [[-87 0 -87 -87] -87]
Test Case:  93 | Input/Output: [[22 33 33 33] 22]
Test Case:  94 | Input/Output: [[-91 -30 -30 -30] -91]
Test Case:  95 | Input/Output: [[87 65 87 87] 65]
Test Case:  96 | Input/Output: [[25 11 11 11] 11]
Test Case:  97 | Input/Output: [[9 9 -6 9] -6]
Test Case:  98 | Input/Output: [[-28 -28 -28 -57] -57]
Test Case:  99 | Input/Output: [[-47 -47 94 -47] -47]
Test Case: 100 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 101 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 102 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 103 | Input/Output: [(47 47 47 47) 47]
Test Case: 104 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 105 | Input/Output: [(66 66 66 66) 66]
Test Case: 106 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 107 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 108 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 109 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 110 | Input/Output: [(41 41 41 41) 41]
Test Case: 111 | Input/Output: [(16 16 16 16) 16]
Test Case: 112 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 113 | Input/Output: [(44 44 44 44) 44]
Test Case: 114 | Input/Output: [(10 10 10 10) 10]
Test Case: 115 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 116 | Input/Output: [(68 68 68 68) 68]
Test Case: 117 | Input/Output: [(19 19 19 19) 19]
Test Case: 118 | Input/Output: [(98 98 98 98) 98]
Test Case: 119 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 120 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 121 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 122 | Input/Output: [(36 36 36 36) 36]
Test Case: 123 | Input/Output: [(1 1 1 1) 1]
Test Case: 124 | Input/Output: [(92 92 92 92) 92]
Test Case: 125 | Input/Output: [(99 99 99 99) 99]
Test Case: 126 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 127 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 128 | Input/Output: [(58 58 58 58) 58]
Test Case: 129 | Input/Output: [(53 53 53 53) 53]
Test Case: 130 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 131 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 132 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 133 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 134 | Input/Output: [(23 23 23 23) 23]
Test Case: 135 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 136 | Input/Output: [(62 62 62 62) 62]
Test Case: 137 | Input/Output: [(27 27 27 27) 27]
Test Case: 138 | Input/Output: [(2 2 2 2) 2]
Test Case: 139 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 140 | Input/Output: [(28 28 28 28) 28]
Test Case: 141 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 142 | Input/Output: [(6 6 6 6) 6]
Test Case: 143 | Input/Output: [(35 35 35 35) 35]
Test Case: 144 | Input/Output: [(33 33 33 33) 33]
Test Case: 145 | Input/Output: [(63 63 63 63) 63]
Test Case: 146 | Input/Output: [(66 66 66 66) 66]
Test Case: 147 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 148 | Input/Output: [(16 16 16 16) 16]
Test Case: 149 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 150 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 151 | Input/Output: [(84 84 84 84) 84]
Test Case: 152 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 153 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 154 | Input/Output: [(85 85 85 85) 85]
Test Case: 155 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 156 | Input/Output: [(19 19 19 19) 19]
Test Case: 157 | Input/Output: [(98 98 98 98) 98]
Test Case: 158 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 159 | Input/Output: [(76 76 76 76) 76]
Test Case: 160 | Input/Output: [(96 96 96 96) 96]
Test Case: 161 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 162 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 163 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 164 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 165 | Input/Output: [(8 8 8 8) 8]
Test Case: 166 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 167 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 168 | Input/Output: [(72 72 72 72) 72]
Test Case: 169 | Input/Output: [(43 43 43 43) 43]
Test Case: 170 | Input/Output: [(88 88 88 88) 88]
Test Case: 171 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 172 | Input/Output: [(15 15 15 15) 15]
Test Case: 173 | Input/Output: [(58 58 58 58) 58]
Test Case: 174 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 175 | Input/Output: [(85 85 85 85) 85]
Test Case: 176 | Input/Output: [(25 25 25 25) 25]
Test Case: 177 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 178 | Input/Output: [(90 90 90 90) 90]
Test Case: 179 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 180 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 181 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 182 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 183 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 184 | Input/Output: [(61 61 61 61) 61]
Test Case: 185 | Input/Output: [(7 7 7 7) 7]
Test Case: 186 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 187 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 188 | Input/Output: [(63 63 63 63) 63]
Test Case: 189 | Input/Output: [(91 91 91 91) 91]
Test Case: 190 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 191 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 192 | Input/Output: [(12 12 12 12) 12]
Test Case: 193 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 194 | Input/Output: [(11 11 11 11) 11]
Test Case: 195 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 196 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 197 | Input/Output: [(83 83 83 83) 83]
Test Case: 198 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 199 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 200 | Input/Output: [(3 14 10 48) 3]
Test Case: 201 | Input/Output: [(86 13 53 66) 13]
Test Case: 202 | Input/Output: [(75 70 19 16) 16]
Test Case: 203 | Input/Output: [(80 38 59 70) 38]
Test Case: 204 | Input/Output: [(82 45 96 67) 45]
Test Case: 205 | Input/Output: [(49 56 77 4) 4]
Test Case: 206 | Input/Output: [(46 22 89 35) 22]
Test Case: 207 | Input/Output: [(97 97 41 61) 41]
Test Case: 208 | Input/Output: [(62 100 35 89) 35]
Test Case: 209 | Input/Output: [(59 69 3 8) 3]
Test Case: 210 | Input/Output: [(85 91 58 31) 31]
Test Case: 211 | Input/Output: [(52 53 47 50) 47]
Test Case: 212 | Input/Output: [(22 28 24 96) 22]
Test Case: 213 | Input/Output: [(99 19 10 68) 10]
Test Case: 214 | Input/Output: [(35 21 61 78) 21]
Test Case: 215 | Input/Output: [(75 54 20 49) 20]
Test Case: 216 | Input/Output: [(3 95 41 29) 3]
Test Case: 217 | Input/Output: [(71 65 87 14) 14]
Test Case: 218 | Input/Output: [(70 63 11 54) 11]
Test Case: 219 | Input/Output: [(9 83 69 60) 9]
Test Case: 220 | Input/Output: [(50 35 88 29) 29]
Test Case: 221 | Input/Output: [(26 62 15 89) 15]
Test Case: 222 | Input/Output: [(77 90 49 7) 7]
Test Case: 223 | Input/Output: [(20 51 42 41) 20]
Test Case: 224 | Input/Output: [(51 90 86 82) 51]
Test Case: 225 | Input/Output: [(25 98 15 93) 15]
Test Case: 226 | Input/Output: [(48 28 67 32) 28]
Test Case: 227 | Input/Output: [(78 28 68 40) 28]
Test Case: 228 | Input/Output: [(85 84 90 79) 79]
Test Case: 229 | Input/Output: [(56 49 70 90) 49]
Test Case: 230 | Input/Output: [(93 56 99 65) 56]
Test Case: 231 | Input/Output: [(94 6 70 17) 6]
Test Case: 232 | Input/Output: [(21 17 0 50) 0]
Test Case: 233 | Input/Output: [(30 62 81 50) 30]
Test Case: 234 | Input/Output: [(41 18 2 40) 2]
Test Case: 235 | Input/Output: [(4 66 23 39) 4]
Test Case: 236 | Input/Output: [(87 53 0 9) 0]
Test Case: 237 | Input/Output: [(68 2 68 23) 2]
Test Case: 238 | Input/Output: [(100 13 88 65) 13]
Test Case: 239 | Input/Output: [(40 86 9 68) 9]
Test Case: 240 | Input/Output: [(25 42 13 69) 13]
Test Case: 241 | Input/Output: [(93 54 55 81) 54]
Test Case: 242 | Input/Output: [(37 58 88 24) 24]
Test Case: 243 | Input/Output: [(79 56 45 23) 23]
Test Case: 244 | Input/Output: [(29 36 25 2) 2]
Test Case: 245 | Input/Output: [(90 30 61 96) 30]
Test Case: 246 | Input/Output: [(28 53 22 24) 22]
Test Case: 247 | Input/Output: [(46 44 0 22) 0]
Test Case: 248 | Input/Output: [(84 15 8 35) 8]
Test Case: 249 | Input/Output: [(21 76 99 68) 21]
Test Case: 250 | Input/Output: [(58 76 84 21) 21]
Test Case: 251 | Input/Output: [(26 23 93 45) 23]
Test Case: 252 | Input/Output: [(24 34 70 94) 24]
Test Case: 253 | Input/Output: [(84 64 28 20) 20]
Test Case: 254 | Input/Output: [(11 86 63 27) 11]
Test Case: 255 | Input/Output: [(56 10 51 96) 10]
Test Case: 256 | Input/Output: [(15 6 3 70) 3]
Test Case: 257 | Input/Output: [(22 20 93 92) 20]
Test Case: 258 | Input/Output: [(68 57 10 15) 10]
Test Case: 259 | Input/Output: [(85 4 60 6) 4]
Test Case: 260 | Input/Output: [(91 33 61 68) 33]
Test Case: 261 | Input/Output: [(97 5 66 70) 5]
Test Case: 262 | Input/Output: [(30 28 9 14) 9]
Test Case: 263 | Input/Output: [(34 56 67 39) 34]
Test Case: 264 | Input/Output: [(43 27 24 9) 9]
Test Case: 265 | Input/Output: [(74 32 74 42) 32]
Test Case: 266 | Input/Output: [(8 95 89 50) 8]
Test Case: 267 | Input/Output: [(1 22 26 41) 1]
Test Case: 268 | Input/Output: [(91 37 47 2) 2]
Test Case: 269 | Input/Output: [(10 6 89 38) 6]
Test Case: 270 | Input/Output: [(5 74 11 57) 5]
Test Case: 271 | Input/Output: [(58 75 37 89) 37]
Test Case: 272 | Input/Output: [(36 98 60 29) 29]
Test Case: 273 | Input/Output: [(54 9 0 99) 0]
Test Case: 274 | Input/Output: [(93 76 59 31) 31]
Test Case: 275 | Input/Output: [(45 42 54 47) 42]
Test Case: 276 | Input/Output: [(23 30 1 78) 1]
Test Case: 277 | Input/Output: [(95 32 68 8) 8]
Test Case: 278 | Input/Output: [(22 90 4 22) 4]
Test Case: 279 | Input/Output: [(17 41 68 49) 17]
Test Case: 280 | Input/Output: [(12 93 95 62) 12]
Test Case: 281 | Input/Output: [(62 78 23 63) 23]
Test Case: 282 | Input/Output: [(14 85 16 51) 14]
Test Case: 283 | Input/Output: [(33 14 24 18) 14]
Test Case: 284 | Input/Output: [(4 37 28 80) 4]
Test Case: 285 | Input/Output: [(65 23 2 83) 2]
Test Case: 286 | Input/Output: [(42 95 72 12) 12]
Test Case: 287 | Input/Output: [(91 19 73 99) 19]
Test Case: 288 | Input/Output: [(27 98 78 29) 27]
Test Case: 289 | Input/Output: [(59 45 61 17) 17]
Test Case: 290 | Input/Output: [(91 99 54 57) 54]
Test Case: 291 | Input/Output: [(2 39 56 77) 2]
Test Case: 292 | Input/Output: [(5 91 16 26) 5]
Test Case: 293 | Input/Output: [(100 6 26 5) 5]
Test Case: 294 | Input/Output: [(56 8 11 69) 8]
Test Case: 295 | Input/Output: [(70 25 83 18) 18]
Test Case: 296 | Input/Output: [(18 64 99 100) 18]
Test Case: 297 | Input/Output: [(86 85 37 98) 37]
Test Case: 298 | Input/Output: [(15 25 16 12) 12]
Test Case: 299 | Input/Output: [(4 96 70 44) 4]
Test Case: 300 | Input/Output: [(100 62 36 43) 36]
Test Case: 301 | Input/Output: [(88 7 73 97) 7]
Test Case: 302 | Input/Output: [(5 5 43 63) 5]
Test Case: 303 | Input/Output: [(28 35 70 99) 28]
Test Case: 304 | Input/Output: [(99 64 24 8) 8]
Test Case: 305 | Input/Output: [(32 97 90 28) 28]
Test Case: 306 | Input/Output: [(16 100 34 19) 16]
Test Case: 307 | Input/Output: [(24 14 79 37) 14]
Test Case: 308 | Input/Output: [(27 92 41 79) 27]
Test Case: 309 | Input/Output: [(89 79 90 58) 58]
Test Case: 310 | Input/Output: [(74 32 65 26) 26]
Test Case: 311 | Input/Output: [(88 81 14 97) 14]
Test Case: 312 | Input/Output: [(73 13 54 35) 13]
Test Case: 313 | Input/Output: [(53 19 75 32) 19]
Test Case: 314 | Input/Output: [(97 22 6 75) 6]
Test Case: 315 | Input/Output: [(78 24 40 33) 24]
Test Case: 316 | Input/Output: [(46 25 36 74) 25]
Test Case: 317 | Input/Output: [(92 69 45 25) 25]
Test Case: 318 | Input/Output: [(53 5 92 32) 5]
Test Case: 319 | Input/Output: [(15 9 91 77) 9]
Test Case: 320 | Input/Output: [(100 41 88 88) 41]
Test Case: 321 | Input/Output: [(10 50 41 18) 10]
Test Case: 322 | Input/Output: [(43 29 35 3) 3]
Test Case: 323 | Input/Output: [(76 64 64 6) 6]
Test Case: 324 | Input/Output: [(39 63 25 45) 25]
Test Case: 325 | Input/Output: [(90 17 93 45) 17]
Test Case: 326 | Input/Output: [(48 20 15 68) 15]
Test Case: 327 | Input/Output: [(100 55 33 29) 29]
Test Case: 328 | Input/Output: [(8 33 38 53) 8]
Test Case: 329 | Input/Output: [(96 41 13 4) 4]
Test Case: 330 | Input/Output: [(36 97 94 91) 36]
Test Case: 331 | Input/Output: [(6 82 10 5) 5]
Test Case: 332 | Input/Output: [(41 20 4 88) 4]
Test Case: 333 | Input/Output: [(80 60 82 50) 50]
Test Case: 334 | Input/Output: [(4 68 2 43) 2]
Test Case: 335 | Input/Output: [(25 15 81 50) 15]
Test Case: 336 | Input/Output: [(74 39 63 5) 5]
Test Case: 337 | Input/Output: [(34 20 15 43) 15]
Test Case: 338 | Input/Output: [(100 15 66 18) 15]
Test Case: 339 | Input/Output: [(45 53 99 87) 45]
Test Case: 340 | Input/Output: [(8 31 16 45) 8]
Test Case: 341 | Input/Output: [(19 73 33 55) 19]
Test Case: 342 | Input/Output: [(38 32 51 20) 20]
Test Case: 343 | Input/Output: [(12 38 15 16) 12]
Test Case: 344 | Input/Output: [(9 80 96 23) 9]
Test Case: 345 | Input/Output: [(59 41 81 21) 21]
Test Case: 346 | Input/Output: [(46 21 20 81) 20]
Test Case: 347 | Input/Output: [(98 99 65 33) 33]
Test Case: 348 | Input/Output: [(27 34 39 24) 24]
Test Case: 349 | Input/Output: [(1 75 68 47) 1]
Test Case: 350 | Input/Output: [(64 20 65 72) 20]
Test Case: 351 | Input/Output: [(98 45 62 42) 42]
Test Case: 352 | Input/Output: [(29 19 73 70) 19]
Test Case: 353 | Input/Output: [(0 10 89 19) 0]
Test Case: 354 | Input/Output: [(78 8 49 73) 8]
Test Case: 355 | Input/Output: [(8 93 90 28) 8]
Test Case: 356 | Input/Output: [(81 18 36 8) 8]
Test Case: 357 | Input/Output: [(89 25 13 24) 13]
Test Case: 358 | Input/Output: [(89 32 78 14) 14]
Test Case: 359 | Input/Output: [(83 65 85 34) 34]
Test Case: 360 | Input/Output: [(1 9 96 86) 1]
Test Case: 361 | Input/Output: [(96 18 39 9) 9]
Test Case: 362 | Input/Output: [(36 58 71 15) 15]
Test Case: 363 | Input/Output: [(74 56 11 82) 11]
Test Case: 364 | Input/Output: [(22 67 34 9) 9]
Test Case: 365 | Input/Output: [(81 67 88 32) 32]
Test Case: 366 | Input/Output: [(34 57 63 98) 34]
Test Case: 367 | Input/Output: [(50 40 99 14) 14]
Test Case: 368 | Input/Output: [(50 17 100 7) 7]
Test Case: 369 | Input/Output: [(6 72 71 89) 6]
Test Case: 370 | Input/Output: [(52 2 90 11) 2]
Test Case: 371 | Input/Output: [(87 91 68 63) 63]
Test Case: 372 | Input/Output: [(50 19 54 8) 8]
Test Case: 373 | Input/Output: [(76 43 35 53) 35]
Test Case: 374 | Input/Output: [(59 78 0 94) 0]
Test Case: 375 | Input/Output: [(20 57 67 53) 20]
Test Case: 376 | Input/Output: [(24 44 15 99) 15]
Test Case: 377 | Input/Output: [(54 53 89 74) 53]
Test Case: 378 | Input/Output: [(33 48 95 83) 33]
Test Case: 379 | Input/Output: [(51 15 95 34) 15]
Test Case: 380 | Input/Output: [(68 25 97 33) 25]
Test Case: 381 | Input/Output: [(57 3 22 70) 3]
Test Case: 382 | Input/Output: [(14 56 71 50) 14]
Test Case: 383 | Input/Output: [(20 60 9 19) 9]
Test Case: 384 | Input/Output: [(20 55 67 69) 20]
Test Case: 385 | Input/Output: [(86 61 14 2) 2]
Test Case: 386 | Input/Output: [(11 2 58 63) 2]
Test Case: 387 | Input/Output: [(5 18 79 15) 5]
Test Case: 388 | Input/Output: [(43 2 29 94) 2]
Test Case: 389 | Input/Output: [(25 8 74 47) 8]
Test Case: 390 | Input/Output: [(16 85 64 58) 16]
Test Case: 391 | Input/Output: [(48 19 1 87) 1]
Test Case: 392 | Input/Output: [(23 97 53 18) 18]
Test Case: 393 | Input/Output: [(15 27 41 16) 15]
Test Case: 394 | Input/Output: [(45 74 70 86) 45]
Test Case: 395 | Input/Output: [(2 4 23 20) 2]
Test Case: 396 | Input/Output: [(8 16 16 72) 8]
Test Case: 397 | Input/Output: [(14 72 0 22) 0]
Test Case: 398 | Input/Output: [(45 27 56 91) 27]
Test Case: 399 | Input/Output: [(23 70 81 37) 23]
Test Case: 400 | Input/Output: [(-93 50 66 -80) -93]
Test Case: 401 | Input/Output: [(21 -81 29 20) -81]
Test Case: 402 | Input/Output: [(36 21 31 -87) -87]
Test Case: 403 | Input/Output: [(54 -70 64 -17) -70]
Test Case: 404 | Input/Output: [(94 -54 40 92) -54]
Test Case: 405 | Input/Output: [(-46 72 -87 0) -87]
Test Case: 406 | Input/Output: [(84 73 51 0) 0]
Test Case: 407 | Input/Output: [(-56 53 -28 32) -56]
Test Case: 408 | Input/Output: [(-84 63 -23 87) -84]
Test Case: 409 | Input/Output: [(-64 39 -74 37) -74]
Test Case: 410 | Input/Output: [(96 64 -26 -94) -94]
Test Case: 411 | Input/Output: [(-5 -43 -74 -29) -74]
Test Case: 412 | Input/Output: [(62 82 92 -18) -18]
Test Case: 413 | Input/Output: [(-75 -27 -75 -73) -75]
Test Case: 414 | Input/Output: [(-2 44 7 60) -2]
Test Case: 415 | Input/Output: [(7 -77 -5 -37) -77]
Test Case: 416 | Input/Output: [(1 -100 12 -85) -100]
Test Case: 417 | Input/Output: [(29 -87 57 42) -87]
Test Case: 418 | Input/Output: [(21 11 -92 3) -92]
Test Case: 419 | Input/Output: [(67 84 43 62) 43]
Test Case: 420 | Input/Output: [(41 -89 17 88) -89]
Test Case: 421 | Input/Output: [(-59 -45 -85 17) -85]
Test Case: 422 | Input/Output: [(67 46 -2 -76) -76]
Test Case: 423 | Input/Output: [(-33 58 -5 -85) -85]
Test Case: 424 | Input/Output: [(100 -93 -54 -14) -93]
Test Case: 425 | Input/Output: [(81 -56 -97 88) -97]
Test Case: 426 | Input/Output: [(72 -20 -15 -13) -20]
Test Case: 427 | Input/Output: [(55 -5 92 34) -5]
Test Case: 428 | Input/Output: [(-47 10 -66 -12) -66]
Test Case: 429 | Input/Output: [(-64 -5 -7 -59) -64]
Test Case: 430 | Input/Output: [(83 77 70 -63) -63]
Test Case: 431 | Input/Output: [(-93 -92 -73 -64) -93]
Test Case: 432 | Input/Output: [(14 -60 -77 15) -77]
Test Case: 433 | Input/Output: [(97 27 23 -80) -80]
Test Case: 434 | Input/Output: [(-39 38 69 -45) -45]
Test Case: 435 | Input/Output: [(46 52 13 23) 13]
Test Case: 436 | Input/Output: [(-94 -39 28 -83) -94]
Test Case: 437 | Input/Output: [(46 57 -68 -87) -87]
Test Case: 438 | Input/Output: [(54 -57 -76 -18) -76]
Test Case: 439 | Input/Output: [(-63 54 -65 -100) -100]
Test Case: 440 | Input/Output: [(38 100 -10 21) -10]
Test Case: 441 | Input/Output: [(-18 -77 30 17) -77]
Test Case: 442 | Input/Output: [(10 -35 8 36) -35]
Test Case: 443 | Input/Output: [(-29 -60 -2 -16) -60]
Test Case: 444 | Input/Output: [(-27 -58 5 21) -58]
Test Case: 445 | Input/Output: [(84 89 -60 78) -60]
Test Case: 446 | Input/Output: [(95 18 -81 -48) -81]
Test Case: 447 | Input/Output: [(59 26 30 44) 26]
Test Case: 448 | Input/Output: [(4 47 -56 -20) -56]
Test Case: 449 | Input/Output: [(-95 46 -74 23) -95]
Test Case: 450 | Input/Output: [(48 -93 -39 -35) -93]
Test Case: 451 | Input/Output: [(-66 -44 -48 48) -66]
Test Case: 452 | Input/Output: [(-46 67 -51 46) -51]
Test Case: 453 | Input/Output: [(-4 1 -59 13) -59]
Test Case: 454 | Input/Output: [(88 0 -12 98) -12]
Test Case: 455 | Input/Output: [(100 -47 -31 -77) -77]
Test Case: 456 | Input/Output: [(72 61 12 96) 12]
Test Case: 457 | Input/Output: [(-96 -54 64 93) -96]
Test Case: 458 | Input/Output: [(6 11 24 22) 6]
Test Case: 459 | Input/Output: [(-62 68 72 -32) -62]
Test Case: 460 | Input/Output: [(-86 100 -62 76) -86]
Test Case: 461 | Input/Output: [(-82 -53 71 -99) -99]
Test Case: 462 | Input/Output: [(-72 -59 64 -50) -72]
Test Case: 463 | Input/Output: [(74 -9 26 22) -9]
Test Case: 464 | Input/Output: [(-72 72 -27 -65) -72]
Test Case: 465 | Input/Output: [(-8 62 95 57) -8]
Test Case: 466 | Input/Output: [(-12 64 20 68) -12]
Test Case: 467 | Input/Output: [(-78 35 -13 -33) -78]
Test Case: 468 | Input/Output: [(11 -99 -94 -44) -99]
Test Case: 469 | Input/Output: [(-19 92 43 -38) -38]
Test Case: 470 | Input/Output: [(-93 43 -28 -64) -93]
Test Case: 471 | Input/Output: [(40 0 16 -97) -97]
Test Case: 472 | Input/Output: [(45 -5 48 84) -5]
Test Case: 473 | Input/Output: [(-69 69 -16 57) -69]
Test Case: 474 | Input/Output: [(22 -25 12 59) -25]
Test Case: 475 | Input/Output: [(-33 62 33 -10) -33]
Test Case: 476 | Input/Output: [(-7 79 -42 -32) -42]
Test Case: 477 | Input/Output: [(-12 95 13 -46) -46]
Test Case: 478 | Input/Output: [(-92 13 -5 6) -92]
Test Case: 479 | Input/Output: [(24 -54 15 11) -54]
Test Case: 480 | Input/Output: [(88 -49 -65 -51) -65]
Test Case: 481 | Input/Output: [(3 64 -74 14) -74]
Test Case: 482 | Input/Output: [(-54 26 55 36) -54]
Test Case: 483 | Input/Output: [(91 54 -28 -95) -95]
Test Case: 484 | Input/Output: [(90 -45 -30 93) -45]
Test Case: 485 | Input/Output: [(35 85 -18 62) -18]
Test Case: 486 | Input/Output: [(15 -3 94 -24) -24]
Test Case: 487 | Input/Output: [(85 -81 78 45) -81]
Test Case: 488 | Input/Output: [(68 -73 -49 82) -73]
Test Case: 489 | Input/Output: [(61 45 46 92) 45]
Test Case: 490 | Input/Output: [(-19 33 -55 36) -55]
Test Case: 491 | Input/Output: [(24 -76 -34 -51) -76]
Test Case: 492 | Input/Output: [(-7 -43 -93 -75) -93]
Test Case: 493 | Input/Output: [(59 -9 29 -95) -95]
Test Case: 494 | Input/Output: [(-61 20 91 -100) -100]
Test Case: 495 | Input/Output: [(25 -61 -28 -7) -61]
Test Case: 496 | Input/Output: [(79 61 10 86) 10]
Test Case: 497 | Input/Output: [(98 -48 -72 23) -72]
Test Case: 498 | Input/Output: [(22 -88 -62 -40) -88]
Test Case: 499 | Input/Output: [(64 -83 64 -96) -96]
Test Case: 500 | Input/Output: [(100 82 67 -64) -64]
Test Case: 501 | Input/Output: [(68 94 89 -84) -84]
Test Case: 502 | Input/Output: [(-40 -35 -53 -84) -84]
Test Case: 503 | Input/Output: [(-14 98 -67 -29) -67]
Test Case: 504 | Input/Output: [(-70 -38 -59 -78) -78]
Test Case: 505 | Input/Output: [(38 30 77 85) 30]
Test Case: 506 | Input/Output: [(40 -99 27 -30) -99]
Test Case: 507 | Input/Output: [(-40 -9 9 -34) -40]
Test Case: 508 | Input/Output: [(91 -81 -93 3) -93]
Test Case: 509 | Input/Output: [(16 16 -81 13) -81]
Test Case: 510 | Input/Output: [(84 -20 69 -85) -85]
Test Case: 511 | Input/Output: [(-2 -80 -36 79) -80]
Test Case: 512 | Input/Output: [(35 2 47 -65) -65]
Test Case: 513 | Input/Output: [(55 -71 -63 -21) -71]
Test Case: 514 | Input/Output: [(-84 65 -56 19) -84]
Test Case: 515 | Input/Output: [(97 -77 -73 -7) -77]
Test Case: 516 | Input/Output: [(28 -6 36 -19) -19]
Test Case: 517 | Input/Output: [(-29 51 -97 -72) -97]
Test Case: 518 | Input/Output: [(-81 -74 68 -6) -81]
Test Case: 519 | Input/Output: [(86 -81 26 -95) -95]
Test Case: 520 | Input/Output: [(-68 34 60 60) -68]
Test Case: 521 | Input/Output: [(19 76 89 9) 9]
Test Case: 522 | Input/Output: [(19 12 49 -8) -8]
Test Case: 523 | Input/Output: [(-40 -62 -51 -84) -84]
Test Case: 524 | Input/Output: [(7 51 -11 25) -11]
Test Case: 525 | Input/Output: [(-7 90 89 -38) -38]
Test Case: 526 | Input/Output: [(-1 100 98 51) -1]
Test Case: 527 | Input/Output: [(-88 -89 -78 -62) -89]
Test Case: 528 | Input/Output: [(43 -81 10 27) -81]
Test Case: 529 | Input/Output: [(85 -87 -60 -66) -87]
Test Case: 530 | Input/Output: [(88 -3 57 -94) -94]
Test Case: 531 | Input/Output: [(24 23 53 -94) -94]
Test Case: 532 | Input/Output: [(84 -54 98 63) -54]
Test Case: 533 | Input/Output: [(74 73 6 -51) -51]
Test Case: 534 | Input/Output: [(62 61 -74 99) -74]
Test Case: 535 | Input/Output: [(-68 83 -89 61) -89]
Test Case: 536 | Input/Output: [(-77 14 3 69) -77]
Test Case: 537 | Input/Output: [(-7 11 86 -40) -40]
Test Case: 538 | Input/Output: [(-30 71 -49 11) -49]
Test Case: 539 | Input/Output: [(37 53 -72 23) -72]
Test Case: 540 | Input/Output: [(-82 -93 86 7) -93]
Test Case: 541 | Input/Output: [(-70 85 80 -20) -70]
Test Case: 542 | Input/Output: [(-37 -32 64 -48) -48]
Test Case: 543 | Input/Output: [(-91 83 19 45) -91]
Test Case: 544 | Input/Output: [(17 7 50 -5) -5]
Test Case: 545 | Input/Output: [(89 -59 22 23) -59]
Test Case: 546 | Input/Output: [(46 -97 85 -43) -97]
Test Case: 547 | Input/Output: [(11 -55 6 92) -55]
Test Case: 548 | Input/Output: [(23 -79 63 -69) -79]
Test Case: 549 | Input/Output: [(-74 -36 48 55) -74]
Test Case: 550 | Input/Output: [(22 34 39 -90) -90]
Test Case: 551 | Input/Output: [(-69 -58 76 -38) -69]
Test Case: 552 | Input/Output: [(23 39 34 89) 23]
Test Case: 553 | Input/Output: [(37 25 -57 -90) -90]
Test Case: 554 | Input/Output: [(66 -51 -72 -17) -72]
Test Case: 555 | Input/Output: [(87 -49 -71 79) -71]
Test Case: 556 | Input/Output: [(15 -41 -99 -56) -99]
Test Case: 557 | Input/Output: [(9 57 -41 -44) -44]
Test Case: 558 | Input/Output: [(-91 82 82 -60) -91]
Test Case: 559 | Input/Output: [(-14 80 -58 100) -58]
Test Case: 560 | Input/Output: [(79 -83 16 -19) -83]
Test Case: 561 | Input/Output: [(64 16 57 -53) -53]
Test Case: 562 | Input/Output: [(7 -96 -41 -41) -96]
Test Case: 563 | Input/Output: [(62 24 -100 26) -100]
Test Case: 564 | Input/Output: [(-52 55 52 -98) -98]
Test Case: 565 | Input/Output: [(69 -87 -8 -2) -87]
Test Case: 566 | Input/Output: [(84 10 90 9) 9]
Test Case: 567 | Input/Output: [(44 93 15 -54) -54]
Test Case: 568 | Input/Output: [(-10 80 -52 16) -52]
Test Case: 569 | Input/Output: [(12 1 -45 -67) -67]
Test Case: 570 | Input/Output: [(55 -32 -35 -91) -91]
Test Case: 571 | Input/Output: [(68 -45 19 43) -45]
Test Case: 572 | Input/Output: [(36 -50 0 23) -50]
Test Case: 573 | Input/Output: [(58 72 31 -8) -8]
Test Case: 574 | Input/Output: [(53 -95 -54 44) -95]
Test Case: 575 | Input/Output: [(-49 -15 14 79) -49]
Test Case: 576 | Input/Output: [(-92 -53 -71 -81) -92]
Test Case: 577 | Input/Output: [(-53 0 35 8) -53]
Test Case: 578 | Input/Output: [(58 87 -63 77) -63]
Test Case: 579 | Input/Output: [(-1 41 -33 -36) -36]
Test Case: 580 | Input/Output: [(-81 -50 42 41) -81]
Test Case: 581 | Input/Output: [(-62 81 95 -60) -62]
Test Case: 582 | Input/Output: [(91 40 -62 64) -62]
Test Case: 583 | Input/Output: [(-26 -32 -25 -82) -82]
Test Case: 584 | Input/Output: [(69 -72 -76 -40) -76]
Test Case: 585 | Input/Output: [(-80 -25 -29 -89) -89]
Test Case: 586 | Input/Output: [(60 77 48 -32) -32]
Test Case: 587 | Input/Output: [(13 -94 -42 -68) -94]
Test Case: 588 | Input/Output: [(68 -81 -1 -31) -81]
Test Case: 589 | Input/Output: [(-55 -3 -4 53) -55]
Test Case: 590 | Input/Output: [(50 34 5 -95) -95]
Test Case: 591 | Input/Output: [(-30 58 47 -5) -30]
Test Case: 592 | Input/Output: [(100 -31 98 81) -31]
Test Case: 593 | Input/Output: [(21 -12 57 45) -12]
Test Case: 594 | Input/Output: [(-41 3 -4 -80) -80]
Test Case: 595 | Input/Output: [(97 -45 30 -38) -45]
Test Case: 596 | Input/Output: [(-18 91 56 60) -18]
Test Case: 597 | Input/Output: [(-74 57 55 -28) -74]
Test Case: 598 | Input/Output: [(24 55 75 -26) -26]
Test Case: 599 | Input/Output: [(-77 91 37 89) -77]
Test Case: 600 | Input/Output: [(78 18 -65 -2) -65]
Test Case: 601 | Input/Output: [(36 51 90 -54) -54]
Test Case: 602 | Input/Output: [(-6 -18 -65 -90) -90]
Test Case: 603 | Input/Output: [(81 -94 -88 -31) -94]
Test Case: 604 | Input/Output: [(-97 67 -20 14) -97]
Test Case: 605 | Input/Output: [(23 -48 72 31) -48]
Test Case: 606 | Input/Output: [(48 76 -58 82) -58]
Test Case: 607 | Input/Output: [(97 -10 -62 77) -62]
Test Case: 608 | Input/Output: [(-74 95 3 95) -74]
Test Case: 609 | Input/Output: [(16 90 79 -49) -49]
Test Case: 610 | Input/Output: [(-17 -50 -27 76) -50]
Test Case: 611 | Input/Output: [(-86 60 -48 76) -86]
Test Case: 612 | Input/Output: [(-97 13 44 -39) -97]
Test Case: 613 | Input/Output: [(7 99 -49 -37) -49]
Test Case: 614 | Input/Output: [(66 54 -55 79) -55]
Test Case: 615 | Input/Output: [(-42 -91 -66 -58) -91]
Test Case: 616 | Input/Output: [(66 99 -70 7) -70]
Test Case: 617 | Input/Output: [(95 -79 3 -25) -79]
Test Case: 618 | Input/Output: [(-38 69 25 -9) -38]
Test Case: 619 | Input/Output: [(69 -35 -57 -77) -77]
Test Case: 620 | Input/Output: [(-23 -99 55 -39) -99]
Test Case: 621 | Input/Output: [(22 -99 -34 -42) -99]
Test Case: 622 | Input/Output: [(68 -52 41 -49) -52]
Test Case: 623 | Input/Output: [(77 -89 50 -100) -100]
Test Case: 624 | Input/Output: [(26 -9 -26 56) -26]
Test Case: 625 | Input/Output: [(-77 10 -82 20) -82]
Test Case: 626 | Input/Output: [(-60 -31 -80 100) -80]
Test Case: 627 | Input/Output: [(46 62 52 25) 25]
Test Case: 628 | Input/Output: [(-18 -6 19 78) -18]
Test Case: 629 | Input/Output: [(-96 -97 -65 -67) -97]
Test Case: 630 | Input/Output: [(52 1 2 73) 1]
Test Case: 631 | Input/Output: [(40 -100 30 -1) -100]
Test Case: 632 | Input/Output: [(75 99 27 -82) -82]
Test Case: 633 | Input/Output: [(6 5 73 -37) -37]
Test Case: 634 | Input/Output: [(22 83 29 20) 20]
Test Case: 635 | Input/Output: [(59 -84 -9 52) -84]
Test Case: 636 | Input/Output: [(48 -42 61 -68) -68]
Test Case: 637 | Input/Output: [(44 83 -87 3) -87]
Test Case: 638 | Input/Output: [(-3 -25 83 -35) -35]
Test Case: 639 | Input/Output: [(-1 23 16 -56) -56]
Test Case: 640 | Input/Output: [(-49 64 86 -98) -98]
Test Case: 641 | Input/Output: [(-75 21 -62 -67) -75]
Test Case: 642 | Input/Output: [(-61 -86 78 -72) -86]
Test Case: 643 | Input/Output: [(-11 -87 -33 2) -87]
Test Case: 644 | Input/Output: [(-81 -24 -60 75) -81]
Test Case: 645 | Input/Output: [(96 88 29 -94) -94]
Test Case: 646 | Input/Output: [(65 -68 71 56) -68]
Test Case: 647 | Input/Output: [(-25 -86 -95 17) -95]
Test Case: 648 | Input/Output: [(67 26 -18 50) -18]
Test Case: 649 | Input/Output: [(54 6 -30 22) -30]
Test Case: 650 | Input/Output: [(-38 -29 76 -79) -79]
Test Case: 651 | Input/Output: [(97 -92 99 31) -92]
Test Case: 652 | Input/Output: [(-40 76 -58 -38) -58]
Test Case: 653 | Input/Output: [(53 3 -5 -98) -98]
Test Case: 654 | Input/Output: [(-70 6 11 71) -70]
Test Case: 655 | Input/Output: [(-36 -85 -66 31) -85]
Test Case: 656 | Input/Output: [(-45 -74 -18 45) -74]
Test Case: 657 | Input/Output: [(72 -24 -71 -38) -71]
Test Case: 658 | Input/Output: [(23 7 -61 64) -61]
Test Case: 659 | Input/Output: [(-23 26 28 21) -23]
Test Case: 660 | Input/Output: [(-46 80 -74 35) -74]
Test Case: 661 | Input/Output: [(33 3 -43 32) -43]
Test Case: 662 | Input/Output: [(-7 17 -20 78) -20]
Test Case: 663 | Input/Output: [(56 19 -20 15) -20]
Test Case: 664 | Input/Output: [(-4 61 -56 77) -56]
Test Case: 665 | Input/Output: [(7 -55 -31 -43) -55]
Test Case: 666 | Input/Output: [(-71 -37 17 55) -71]
Test Case: 667 | Input/Output: [(83 94 91 6) 6]
Test Case: 668 | Input/Output: [(-14 -3 31 31) -14]
Test Case: 669 | Input/Output: [(-2 9 -63 77) -63]
Test Case: 670 | Input/Output: [(-10 -21 -24 -25) -25]
Test Case: 671 | Input/Output: [(-79 20 -74 47) -79]
Test Case: 672 | Input/Output: [(91 -26 71 -90) -90]
Test Case: 673 | Input/Output: [(83 -54 -79 33) -79]
Test Case: 674 | Input/Output: [(-15 -14 26 52) -15]
Test Case: 675 | Input/Output: [(77 26 -34 -62) -62]
Test Case: 676 | Input/Output: [(77 -47 0 59) -47]
Test Case: 677 | Input/Output: [(82 94 86 -93) -93]
Test Case: 678 | Input/Output: [(88 52 92 91) 52]
Test Case: 679 | Input/Output: [(25 -18 67 4) -18]
Test Case: 680 | Input/Output: [(87 -59 9 -70) -70]
Test Case: 681 | Input/Output: [(-98 30 52 79) -98]
Test Case: 682 | Input/Output: [(51 -66 -65 -90) -90]
Test Case: 683 | Input/Output: [(11 84 -12 37) -12]
Test Case: 684 | Input/Output: [(-84 -4 -7 -34) -84]
Test Case: 685 | Input/Output: [(61 -19 -6 -34) -34]
Test Case: 686 | Input/Output: [(82 -96 -33 28) -96]
Test Case: 687 | Input/Output: [(-40 42 48 59) -40]
Test Case: 688 | Input/Output: [(-31 -62 -55 -66) -66]
Test Case: 689 | Input/Output: [(-19 -53 48 15) -53]
Test Case: 690 | Input/Output: [(-58 -62 -74 -23) -74]
Test Case: 691 | Input/Output: [(-87 -57 -98 5) -98]
Test Case: 692 | Input/Output: [(-65 26 41 36) -65]
Test Case: 693 | Input/Output: [(28 -95 -60 -45) -95]
Test Case: 694 | Input/Output: [(69 29 -28 40) -28]
Test Case: 695 | Input/Output: [(57 77 45 -51) -51]
Test Case: 696 | Input/Output: [(-38 -37 -59 11) -59]
Test Case: 697 | Input/Output: [(83 80 28 -7) -7]
Test Case: 698 | Input/Output: [(74 57 -69 35) -69]
Test Case: 699 | Input/Output: [(-100 -37 -73 -98) -100]
Test Case: 700 | Input/Output: [(-79 -56 -65 -73) -79]
Test Case: 701 | Input/Output: [(80 -6 50 70) -6]
Test Case: 702 | Input/Output: [(-29 0 93 25) -29]
Test Case: 703 | Input/Output: [(-76 19 28 -77) -77]
Test Case: 704 | Input/Output: [(-79 -89 -6 -67) -89]
Test Case: 705 | Input/Output: [(-63 -81 -33 14) -81]
Test Case: 706 | Input/Output: [(67 -66 -85 -57) -85]
Test Case: 707 | Input/Output: [(15 74 -14 63) -14]
Test Case: 708 | Input/Output: [(-45 -49 -20 76) -49]
Test Case: 709 | Input/Output: [(2 -16 37 -56) -56]
Test Case: 710 | Input/Output: [(-73 100 -56 43) -73]
Test Case: 711 | Input/Output: [(12 -3 -79 -40) -79]
Test Case: 712 | Input/Output: [(68 60 76 51) 51]
Test Case: 713 | Input/Output: [(69 71 3 -17) -17]
Test Case: 714 | Input/Output: [(-3 -93 -91 -35) -93]
Test Case: 715 | Input/Output: [(66 -35 -58 -7) -58]
Test Case: 716 | Input/Output: [(-59 60 -70 -67) -70]
Test Case: 717 | Input/Output: [(-9 67 -75 -72) -75]
Test Case: 718 | Input/Output: [(98 6 -93 100) -93]
Test Case: 719 | Input/Output: [(72 33 60 -97) -97]
Test Case: 720 | Input/Output: [(-56 -100 87 -43) -100]
Test Case: 721 | Input/Output: [(73 74 22 53) 22]
Test Case: 722 | Input/Output: [(30 -69 -61 -69) -69]
Test Case: 723 | Input/Output: [(9 -60 26 -72) -72]
Test Case: 724 | Input/Output: [(98 4 5 -72) -72]
Test Case: 725 | Input/Output: [(84 69 24 -65) -65]
Test Case: 726 | Input/Output: [(-84 -48 25 -77) -84]
Test Case: 727 | Input/Output: [(49 78 -52 58) -52]
Test Case: 728 | Input/Output: [(-38 67 93 -56) -56]
Test Case: 729 | Input/Output: [(-38 -20 58 82) -38]
Test Case: 730 | Input/Output: [(3 -51 -94 -14) -94]
Test Case: 731 | Input/Output: [(22 59 -18 10) -18]
Test Case: 732 | Input/Output: [(-43 49 -99 31) -99]
Test Case: 733 | Input/Output: [(34 -55 95 -77) -77]
Test Case: 734 | Input/Output: [(62 55 -71 3) -71]
Test Case: 735 | Input/Output: [(-67 -92 49 -49) -92]
Test Case: 736 | Input/Output: [(73 73 73 32) 32]
Test Case: 737 | Input/Output: [(-49 -50 45 -2) -50]
Test Case: 738 | Input/Output: [(-45 25 18 -94) -94]
Test Case: 739 | Input/Output: [(-88 23 51 -19) -88]
Test Case: 740 | Input/Output: [(-8 -1 77 74) -8]
Test Case: 741 | Input/Output: [(-41 5 11 -91) -91]
Test Case: 742 | Input/Output: [(-61 87 26 -40) -61]
Test Case: 743 | Input/Output: [(-90 -8 -67 -84) -90]
Test Case: 744 | Input/Output: [(87 57 36 -84) -84]
Test Case: 745 | Input/Output: [(13 -58 -94 40) -94]
Test Case: 746 | Input/Output: [(79 -20 -65 66) -65]
Test Case: 747 | Input/Output: [(16 -60 -64 -24) -64]
Test Case: 748 | Input/Output: [(-92 -94 1 28) -94]
Test Case: 749 | Input/Output: [(-15 -7 -97 -58) -97]
Test Case: 750 | Input/Output: [(-91 61 62 -15) -91]
Test Case: 751 | Input/Output: [(23 -74 48 19) -74]
Test Case: 752 | Input/Output: [(-14 1 28 27) -14]
Test Case: 753 | Input/Output: [(78 26 49 -69) -69]
Test Case: 754 | Input/Output: [(22 52 -12 -39) -39]
Test Case: 755 | Input/Output: [(-90 85 55 17) -90]
Test Case: 756 | Input/Output: [(40 -69 -60 -17) -69]
Test Case: 757 | Input/Output: [(17 -64 82 2) -64]
Test Case: 758 | Input/Output: [(7 72 3 -80) -80]
Test Case: 759 | Input/Output: [(94 -31 -39 83) -39]
Test Case: 760 | Input/Output: [(33 40 -27 88) -27]
Test Case: 761 | Input/Output: [(30 -61 -39 91) -61]
Test Case: 762 | Input/Output: [(62 -51 86 32) -51]
Test Case: 763 | Input/Output: [(0 -87 28 -25) -87]
Test Case: 764 | Input/Output: [(41 55 -100 23) -100]
Test Case: 765 | Input/Output: [(-27 -76 -21 91) -76]
Test Case: 766 | Input/Output: [(-95 -10 -19 -86) -95]
Test Case: 767 | Input/Output: [(-59 96 -5 -85) -85]
Test Case: 768 | Input/Output: [(-51 -82 2 64) -82]
Test Case: 769 | Input/Output: [(-86 30 -87 -69) -87]
Test Case: 770 | Input/Output: [(85 -16 53 -28) -28]
Test Case: 771 | Input/Output: [(-4 -29 -9 22) -29]
Test Case: 772 | Input/Output: [(-52 -32 69 -27) -52]
Test Case: 773 | Input/Output: [(82 -61 -81 -94) -94]
Test Case: 774 | Input/Output: [(7 53 -81 -34) -81]
Test Case: 775 | Input/Output: [(21 58 39 71) 21]
Test Case: 776 | Input/Output: [(-6 -56 -40 93) -56]
Test Case: 777 | Input/Output: [(11 -70 83 19) -70]
Test Case: 778 | Input/Output: [(80 77 -63 9) -63]
Test Case: 779 | Input/Output: [(-48 -27 93 -93) -93]
Test Case: 780 | Input/Output: [(27 -61 17 -62) -62]
Test Case: 781 | Input/Output: [(-52 20 92 -32) -52]
Test Case: 782 | Input/Output: [(11 -34 51 -72) -72]
Test Case: 783 | Input/Output: [(27 80 -86 36) -86]
Test Case: 784 | Input/Output: [(-11 54 -74 51) -74]
Test Case: 785 | Input/Output: [(30 -34 68 96) -34]
Test Case: 786 | Input/Output: [(-84 69 21 -76) -84]
Test Case: 787 | Input/Output: [(57 -35 70 -14) -35]
Test Case: 788 | Input/Output: [(-19 53 -11 49) -19]
Test Case: 789 | Input/Output: [(39 -92 -50 79) -92]
Test Case: 790 | Input/Output: [(25 43 -46 -73) -73]
Test Case: 791 | Input/Output: [(95 51 -16 85) -16]
Test Case: 792 | Input/Output: [(59 -73 -73 -78) -78]
Test Case: 793 | Input/Output: [(57 73 16 82) 16]
Test Case: 794 | Input/Output: [(13 19 78 -66) -66]
Test Case: 795 | Input/Output: [(-44 93 65 37) -44]
Test Case: 796 | Input/Output: [(-83 20 -32 62) -83]
Test Case: 797 | Input/Output: [(20 -53 -70 -12) -70]
Test Case: 798 | Input/Output: [(-29 50 1 -72) -72]
Test Case: 799 | Input/Output: [(55 -24 -73 21) -73]
Test Case: 800 | Input/Output: [(61 -21 -80 -10) -80]
Test Case: 801 | Input/Output: [(3 99 39 -6) -6]
Test Case: 802 | Input/Output: [(81 -35 -82 -79) -82]
Test Case: 803 | Input/Output: [(19 65 22 -30) -30]
Test Case: 804 | Input/Output: [(-70 33 12 -15) -70]
Test Case: 805 | Input/Output: [(68 79 -75 1) -75]
Test Case: 806 | Input/Output: [(34 -65 -84 4) -84]
Test Case: 807 | Input/Output: [(50 -55 81 85) -55]
Test Case: 808 | Input/Output: [(-56 -76 56 80) -76]
Test Case: 809 | Input/Output: [(17 -71 29 92) -71]
Test Case: 810 | Input/Output: [(-87 56 -46 64) -87]
Test Case: 811 | Input/Output: [(72 -31 -60 -64) -64]
Test Case: 812 | Input/Output: [(-25 -89 -13 13) -89]
Test Case: 813 | Input/Output: [(-89 -65 69 -66) -89]
Test Case: 814 | Input/Output: [(-67 90 -1 -60) -67]
Test Case: 815 | Input/Output: [(38 60 -50 61) -50]
Test Case: 816 | Input/Output: [(5 -60 -72 -51) -72]
Test Case: 817 | Input/Output: [(48 22 62 74) 22]
Test Case: 818 | Input/Output: [(-74 -4 60 59) -74]
Test Case: 819 | Input/Output: [(-22 23 16 44) -22]
Test Case: 820 | Input/Output: [(83 -28 -23 14) -28]
Test Case: 821 | Input/Output: [(-72 82 -22 -43) -72]
Test Case: 822 | Input/Output: [(54 -45 93 36) -45]
Test Case: 823 | Input/Output: [(-90 32 -83 84) -90]
Test Case: 824 | Input/Output: [(-87 -96 -61 61) -96]
Test Case: 825 | Input/Output: [(31 -1 49 -34) -34]
Test Case: 826 | Input/Output: [(-65 -81 -18 -90) -90]
Test Case: 827 | Input/Output: [(85 -69 -91 32) -91]
Test Case: 828 | Input/Output: [(3 8 -100 52) -100]
Test Case: 829 | Input/Output: [(-2 78 90 -50) -50]
Test Case: 830 | Input/Output: [(-65 -36 91 -41) -65]
Test Case: 831 | Input/Output: [(94 -98 -93 75) -98]
Test Case: 832 | Input/Output: [(-33 9 -85 -91) -91]
Test Case: 833 | Input/Output: [(-68 -29 -79 73) -79]
Test Case: 834 | Input/Output: [(-83 97 22 52) -83]
Test Case: 835 | Input/Output: [(80 -40 -15 20) -40]
Test Case: 836 | Input/Output: [(76 92 -58 96) -58]
Test Case: 837 | Input/Output: [(70 -18 21 96) -18]
Test Case: 838 | Input/Output: [(52 -3 -65 -39) -65]
Test Case: 839 | Input/Output: [(-24 -25 -60 70) -60]
Test Case: 840 | Input/Output: [(29 -43 -76 -65) -76]
Test Case: 841 | Input/Output: [(-29 -17 50 58) -29]
Test Case: 842 | Input/Output: [(22 -81 -56 54) -81]
Test Case: 843 | Input/Output: [(48 -15 -80 40) -80]
Test Case: 844 | Input/Output: [(-84 -12 90 92) -84]
Test Case: 845 | Input/Output: [(-62 11 -60 99) -62]
Test Case: 846 | Input/Output: [(22 -54 -85 -4) -85]
Test Case: 847 | Input/Output: [(59 84 -44 -93) -93]
Test Case: 848 | Input/Output: [(-38 24 60 59) -38]
Test Case: 849 | Input/Output: [(-42 61 -79 -96) -96]
Test Case: 850 | Input/Output: [(-44 -2 95 -65) -65]
Test Case: 851 | Input/Output: [(79 -35 52 -50) -50]
Test Case: 852 | Input/Output: [(3 -59 97 41) -59]
Test Case: 853 | Input/Output: [(-63 -35 -23 69) -63]
Test Case: 854 | Input/Output: [(-82 -30 88 -8) -82]
Test Case: 855 | Input/Output: [(58 54 -7 -77) -77]
Test Case: 856 | Input/Output: [(97 -43 94 -27) -43]
Test Case: 857 | Input/Output: [(51 6 80 65) 6]
Test Case: 858 | Input/Output: [(-69 -86 57 -7) -86]
Test Case: 859 | Input/Output: [(-13 22 -44 40) -44]
Test Case: 860 | Input/Output: [(-70 5 31 -34) -70]
Test Case: 861 | Input/Output: [(2 -67 -17 -36) -67]
Test Case: 862 | Input/Output: [(-29 -41 -84 48) -84]
Test Case: 863 | Input/Output: [(6 -85 -69 100) -85]
Test Case: 864 | Input/Output: [(-86 27 -41 -50) -86]
Test Case: 865 | Input/Output: [(-98 11 11 42) -98]
Test Case: 866 | Input/Output: [(2 -9 -16 48) -16]
Test Case: 867 | Input/Output: [(-50 -13 93 -87) -87]
Test Case: 868 | Input/Output: [(37 6 -23 88) -23]
Test Case: 869 | Input/Output: [(-39 -64 52 -75) -75]
Test Case: 870 | Input/Output: [(-88 -7 -8 -42) -88]
Test Case: 871 | Input/Output: [(-43 78 -61 -95) -95]
Test Case: 872 | Input/Output: [(13 33 57 60) 13]
Test Case: 873 | Input/Output: [(19 33 -75 -76) -76]
Test Case: 874 | Input/Output: [(40 -74 -1 63) -74]
Test Case: 875 | Input/Output: [(36 -2 28 93) -2]
Test Case: 876 | Input/Output: [(-27 98 -79 82) -79]
Test Case: 877 | Input/Output: [(-74 95 17 2) -74]
Test Case: 878 | Input/Output: [(-35 -87 75 -84) -87]
Test Case: 879 | Input/Output: [(18 -95 -28 -84) -95]
Test Case: 880 | Input/Output: [(-28 -23 87 -70) -70]
Test Case: 881 | Input/Output: [(28 -12 -14 -29) -29]
Test Case: 882 | Input/Output: [(18 -60 83 33) -60]
Test Case: 883 | Input/Output: [(-76 -97 -69 70) -97]
Test Case: 884 | Input/Output: [(41 -96 46 73) -96]
Test Case: 885 | Input/Output: [(-59 -94 -85 -41) -94]
Test Case: 886 | Input/Output: [(-61 -67 -46 80) -67]
Test Case: 887 | Input/Output: [(-67 -22 19 9) -67]
Test Case: 888 | Input/Output: [(3 -68 -78 -49) -78]
Test Case: 889 | Input/Output: [(57 -5 13 -52) -52]
Test Case: 890 | Input/Output: [(86 75 -74 60) -74]
Test Case: 891 | Input/Output: [(-48 -87 55 -36) -87]
Test Case: 892 | Input/Output: [(-82 10 -7 22) -82]
Test Case: 893 | Input/Output: [(14 10 -8 -10) -10]
Test Case: 894 | Input/Output: [(49 79 87 52) 49]
Test Case: 895 | Input/Output: [(-99 -16 -64 91) -99]
Test Case: 896 | Input/Output: [(-26 -42 -24 -5) -42]
Test Case: 897 | Input/Output: [(2 -53 -56 -12) -56]
Test Case: 898 | Input/Output: [(-96 -99 100 4) -99]
Test Case: 899 | Input/Output: [(-59 -8 -5 87) -59]
Test Case: 900 | Input/Output: [(69 -17 -60 1) -60]
Test Case: 901 | Input/Output: [(3 -83 -42 80) -83]
Test Case: 902 | Input/Output: [(89 89 -56 -47) -56]
Test Case: 903 | Input/Output: [(31 89 -67 20) -67]
Test Case: 904 | Input/Output: [(-54 -25 -1 -60) -60]
Test Case: 905 | Input/Output: [(-70 -99 -59 0) -99]
Test Case: 906 | Input/Output: [(98 37 10 -11) -11]
Test Case: 907 | Input/Output: [(83 22 -86 25) -86]
Test Case: 908 | Input/Output: [(-94 -50 -3 -87) -94]
Test Case: 909 | Input/Output: [(55 66 -52 -17) -52]
Test Case: 910 | Input/Output: [(99 -15 -45 -29) -45]
Test Case: 911 | Input/Output: [(-54 14 -49 42) -54]
Test Case: 912 | Input/Output: [(-86 -87 -21 -71) -87]
Test Case: 913 | Input/Output: [(18 -28 -18 36) -28]
Test Case: 914 | Input/Output: [(97 57 -28 25) -28]
Test Case: 915 | Input/Output: [(84 -20 -98 -41) -98]
Test Case: 916 | Input/Output: [(-60 28 41 -9) -60]
Test Case: 917 | Input/Output: [(-87 93 -98 66) -98]
Test Case: 918 | Input/Output: [(-59 3 94 -49) -59]
Test Case: 919 | Input/Output: [(8 8 44 -50) -50]
Test Case: 920 | Input/Output: [(98 82 23 -62) -62]
Test Case: 921 | Input/Output: [(14 -60 -1 -53) -60]
Test Case: 922 | Input/Output: [(5 35 -43 -48) -48]
Test Case: 923 | Input/Output: [(63 81 -33 -11) -33]
Test Case: 924 | Input/Output: [(-6 -35 -14 81) -35]
Test Case: 925 | Input/Output: [(-31 74 -21 74) -31]
Test Case: 926 | Input/Output: [(-10 31 14 -34) -34]
Test Case: 927 | Input/Output: [(70 49 -19 -80) -80]
Test Case: 928 | Input/Output: [(-2 -84 -98 -41) -98]
Test Case: 929 | Input/Output: [(-89 -92 -48 77) -92]
Test Case: 930 | Input/Output: [(72 83 9 94) 9]
Test Case: 931 | Input/Output: [(-48 72 92 -64) -64]
Test Case: 932 | Input/Output: [(26 89 -56 -10) -56]
Test Case: 933 | Input/Output: [(-3 71 25 -92) -92]
Test Case: 934 | Input/Output: [(16 5 -63 -33) -63]
Test Case: 935 | Input/Output: [(92 -57 -82 39) -82]
Test Case: 936 | Input/Output: [(44 12 -93 -26) -93]
Test Case: 937 | Input/Output: [(47 18 -79 -33) -79]
Test Case: 938 | Input/Output: [(-45 66 -31 43) -45]
Test Case: 939 | Input/Output: [(55 -62 14 73) -62]
Test Case: 940 | Input/Output: [(-89 75 -97 47) -97]
Test Case: 941 | Input/Output: [(71 41 -60 -38) -60]
Test Case: 942 | Input/Output: [(41 -8 90 -13) -13]
Test Case: 943 | Input/Output: [(-91 41 56 83) -91]
Test Case: 944 | Input/Output: [(91 -40 62 -49) -49]
Test Case: 945 | Input/Output: [(75 3 -85 84) -85]
Test Case: 946 | Input/Output: [(-65 -100 -96 44) -100]
Test Case: 947 | Input/Output: [(-3 -97 -65 47) -97]
Test Case: 948 | Input/Output: [(80 8 21 -96) -96]
Test Case: 949 | Input/Output: [(100 -64 21 97) -64]
Test Case: 950 | Input/Output: [(97 -90 11 78) -90]
Test Case: 951 | Input/Output: [(-83 -55 -57 -15) -83]
Test Case: 952 | Input/Output: [(-11 -57 79 18) -57]
Test Case: 953 | Input/Output: [(96 85 -19 58) -19]
Test Case: 954 | Input/Output: [(-65 35 -6 98) -65]
Test Case: 955 | Input/Output: [(98 -16 58 41) -16]
Test Case: 956 | Input/Output: [(56 -83 -38 -50) -83]
Test Case: 957 | Input/Output: [(10 67 -47 34) -47]
Test Case: 958 | Input/Output: [(46 -90 -27 59) -90]
Test Case: 959 | Input/Output: [(-34 17 38 28) -34]
Test Case: 960 | Input/Output: [(64 -27 -54 9) -54]
Test Case: 961 | Input/Output: [(22 -37 45 -36) -37]
Test Case: 962 | Input/Output: [(54 66 -49 -37) -49]
Test Case: 963 | Input/Output: [(-19 60 73 -21) -21]
Test Case: 964 | Input/Output: [(49 -91 -58 22) -91]
Test Case: 965 | Input/Output: [(-28 -34 41 -11) -34]
Test Case: 966 | Input/Output: [(23 -23 -47 -100) -100]
Test Case: 967 | Input/Output: [(35 -98 -83 -12) -98]
Test Case: 968 | Input/Output: [(7 -92 -4 60) -92]
Test Case: 969 | Input/Output: [(-85 24 65 -80) -85]
Test Case: 970 | Input/Output: [(82 4 6 -98) -98]
Test Case: 971 | Input/Output: [(-29 92 92 -56) -56]
Test Case: 972 | Input/Output: [(-99 97 -74 8) -99]
Test Case: 973 | Input/Output: [(-99 -15 99 54) -99]
Test Case: 974 | Input/Output: [(13 -14 -49 -22) -49]
Test Case: 975 | Input/Output: [(-14 87 63 -30) -30]
Test Case: 976 | Input/Output: [(16 -74 -65 61) -74]
Test Case: 977 | Input/Output: [(-23 -31 -66 93) -66]
Test Case: 978 | Input/Output: [(-39 -100 27 4) -100]
Test Case: 979 | Input/Output: [(-43 50 -2 32) -43]
Test Case: 980 | Input/Output: [(66 78 27 28) 27]
Test Case: 981 | Input/Output: [(63 54 98 -35) -35]
Test Case: 982 | Input/Output: [(-42 98 -68 14) -68]
Test Case: 983 | Input/Output: [(-48 17 60 -65) -65]
Test Case: 984 | Input/Output: [(-87 38 -35 -71) -87]
Test Case: 985 | Input/Output: [(57 -26 20 -37) -37]
Test Case: 986 | Input/Output: [(-39 45 -8 30) -39]
Test Case: 987 | Input/Output: [(20 78 -40 -63) -63]
Test Case: 988 | Input/Output: [(42 -20 15 52) -20]
Test Case: 989 | Input/Output: [(21 81 -10 -2) -10]
Test Case: 990 | Input/Output: [(-28 100 18 54) -28]
Test Case: 991 | Input/Output: [(9 21 -58 10) -58]
Test Case: 992 | Input/Output: [(-2 -82 68 6) -82]
Test Case: 993 | Input/Output: [(95 -19 73 77) -19]
Test Case: 994 | Input/Output: [(-81 -89 57 21) -89]
Test Case: 995 | Input/Output: [(-40 -100 66 26) -100]
Test Case: 996 | Input/Output: [(-39 24 -44 38) -44]
Test Case: 997 | Input/Output: [(-27 -1 -49 15) -49]
Test Case: 998 | Input/Output: [(-28 82 94 -49) -49]
Test Case: 999 | Input/Output: [(30 -71 41 10) -71]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 49 47 12 45 -76 -120 121 30 -109 -125 -95 -123 22 -87 24 109
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[25 -61 25 25] -61] [[-86 -86 -21 -86] -86] [[39 39 39 -50] -50] [[-90 -90 -90 -16] -90] [[-60 -60 -78 -60] -78] [[-51 -51 -51 38] -51] [[93 93 93 52] 52] [[-16 -16 43 -16] -16] [[-6 -58 -6 -6] -58] [[-16 -16 0 -16] -16] [(-78 -78 -78 -78) -78] [(18 18 18 18) 18] [(-87 -87 -87 -87) -87] [(-11 -11 -11 -11) -11] [(76 76 76 76) 76] [(69 58 35 97) 35] [(14 5 24 24) 5] [(5 84 13 52) 5] [(7 14 95 61) 7] [(6 29 98 36) 6] [(82 9 0 12) 0] [(14 84 10 8) 8] [(72 64 23 4) 4] [(27 84 94 86) 27] [(85 99 72 72) 72] [(94 65 87 40) 40] [(24 65 39 88) 24] [(7 96 80 60) 7] [(18 5 89 29) 5] [(0 6 27 36) 0] [(67 86 95 99) 67] [(96 58 82 36) 36] [(76 6 95 69) 6] [(52 34 38 68) 34] [(76 44 68 62) 44] [(93 -41 7 -25) -41] [(-16 -45 69 96) -45] [(50 -22 -56 -63) -63] [(94 -44 -59 1) -59] [(-15 -26 -25 -59) -59] [(34 -34 16 -86) -86] [(32 -32 8 65) -32] [(3 -73 -40 18) -73] [(30 -100 -93 -71) -100] [(79 -32 -78 -28) -78] [(93 -52 -70 -65) -70] [(69 90 -57 -7) -57] [(3 -41 44 -1) -41] [(-35 74 65 18) -35] [(-2 46 -97 77) -97] [(-55 43 -32 -92) -92] [(-22 -20 -19 73) -22] [(93 -87 93 99) -87] [(67 -43 51 -90) -90] [(19 63 74 52) 19] [(-90 -8 62 -46) -90] [(36 14 -2 -97) -97] [(-55 55 -3 97) -55] [(43 -22 -80 0) -80] [(-91 23 -37 0) -91] [(76 -40 -63 -51) -63] [(-8 -63 85 -36) -63] [(-76 -84 37 -10) -84] [(56 55 53 53) 53] [(-47 88 64 -5) -47] [(29 17 -24 -60) -60] [(95 91 53 -94) -94] [(-84 -15 98 -68) -84] [(93 13 -25 47) -25] [(-6 46 -69 85) -69] [(-32 -82 85 20) -82] [(60 -53 73 46) -53] [(-42 39 15 -36) -42] [(22 36 67 -28) -28] [(49 -15 69 -84) -84] [(79 76 93 -45) -45] [(12 23 57 97) 12] [(-5 -63 13 -81) -81] [(-39 35 -24 -5) -39] [(-38 -8 -91 55) -91] [(34 -47 75 52) -47] [(39 -22 2 4) -22] [(-7 -100 -29 -16) -100] [(90 71 13 -68) -68] [(-12 61 -75 82) -75] [(-86 -50 73 -48) -86] [(52 41 88 -64) -64] [(26 -59 21 -86) -86] [(49 -71 -2 71) -71] [(-81 50 5 25) -81] [(-8 22 98 -23) -23] [(-49 -1 -69 66) -69] [(-14 -86 94 93) -86] [(5 -56 42 -50) -56] [(48 92 82 32) 32])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 69                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 82                 
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 72                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 94                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 96                 
Correct output: 6                   | Program output: 76                 
Correct output: 34                  | Program output: 52                 
Correct output: 44                  | Program output: 76                 
Correct output: -41                 | Program output: 93                 
Correct output: -45                 | Program output: -16                
Correct output: -63                 | Program output: 50                 
Correct output: -59                 | Program output: 94                 
Correct output: -59                 | Program output: -15                
Correct output: -86                 | Program output: 34                 
Correct output: -32                 | Program output: 32                 
Correct output: -73                 | Program output: 3                  
Correct output: -100                | Program output: 30                 
Correct output: -78                 | Program output: 79                 
Correct output: -70                 | Program output: 93                 
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: 3                  
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: 93                 
Correct output: -90                 | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: 43                 
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: 76                 
Correct output: -63                 | Program output: -8                 
Correct output: -84                 | Program output: -76                
Correct output: 53                  | Program output: 56                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 29                 
Correct output: -94                 | Program output: 95                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 93                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -32                
Correct output: -53                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -5                 
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: 34                 
Correct output: -22                 | Program output: 39                 
Correct output: -100                | Program output: -7                 
Correct output: -68                 | Program output: 90                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 52                 
Correct output: -86                 | Program output: 26                 
Correct output: -71                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -14                
Correct output: -56                 | Program output: 5                  
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_empty} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_239} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_336} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_270} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_385} {:close 1, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte})
Lexicase best program: (exec_k (in1 integer_gt boolean_and integer_mult) (boolean_swap) integer_eq boolean_empty integer_gt integer_empty integer_mod integer_dup exec_empty boolean_and exec_shove () print_integer exec_k_when_autoconstructing (exec_noop exec_noop exec_yankdup integer_rot exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_lte exec_dup_items integer_dup_times integer_div)) (integer_div exec_k_when_autoconstructing (in4 exec_do*range (exec_swap (boolean_invert_first_then_and integer_add exec_do*times (exec_dup_times (integer_stackdepth exec_empty)) integer_add) () boolean_or boolean_invert_second_then_and boolean_rot in3 boolean_empty boolean_swap integer_yankdup tag_boolean_239 exec_do*while (exec_rot (boolean_flush in4) (boolean_flush boolean_shove) (boolean_invert_first_then_and tag_exec_336 (integer_min integer_dup_items tag_integer_270) exec_flush exec_shove () exec_do*count (tag_boolean_385 print_newline) integer_rot exec_s (in1 integer_mod boolean_invert_first_then_and boolean_dup_items boolean_eq boolean_xor) (boolean_swap boolean_yankdup integer_dec boolean_not) (exec_s () (integer_lt in1 boolean_xor exec_eq integer_stackdepth integer_pop) (boolean_dup_times boolean_swap integer_shove boolean_dup_times integer_dec integer_gte)))))) ()))
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 116
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_empty} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_239} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_336} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_270} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_385} {:close 1, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte})
Zero cases best program: (exec_k (in1 integer_gt boolean_and integer_mult) (boolean_swap) integer_eq boolean_empty integer_gt integer_empty integer_mod integer_dup exec_empty boolean_and exec_shove () print_integer exec_k_when_autoconstructing (exec_noop exec_noop exec_yankdup integer_rot exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_lte exec_dup_items integer_dup_times integer_div)) (integer_div exec_k_when_autoconstructing (in4 exec_do*range (exec_swap (boolean_invert_first_then_and integer_add exec_do*times (exec_dup_times (integer_stackdepth exec_empty)) integer_add) () boolean_or boolean_invert_second_then_and boolean_rot in3 boolean_empty boolean_swap integer_yankdup tag_boolean_239 exec_do*while (exec_rot (boolean_flush in4) (boolean_flush boolean_shove) (boolean_invert_first_then_and tag_exec_336 (integer_min integer_dup_items tag_integer_270) exec_flush exec_shove () exec_do*count (tag_boolean_385 print_newline) integer_rot exec_s (in1 integer_mod boolean_invert_first_then_and boolean_dup_items boolean_eq boolean_xor) (boolean_swap boolean_yankdup integer_dec boolean_not) (exec_s () (integer_lt in1 boolean_xor exec_eq integer_stackdepth integer_pop) (boolean_dup_times boolean_swap integer_shove boolean_dup_times integer_dec integer_gte)))))) ()))
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 116
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 2 2 2 2 4 4 4 1 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (8 2 2 2 2 4 4 4 1 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction 14} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 2, :instruction tagged_124} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction 41} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 2, :instruction tagged_628} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_705} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items})
Best program: (exec_shove (exec_empty integer_div boolean_shove exec_s (boolean_dup_items boolean_frominteger) (exec_dup () 14) (exec_do*times (integer_mult tagged_124)) exec_if (boolean_or integer_add 41) (exec_swap (boolean_dup_items exec_when (boolean_and in2 boolean_invert_first_then_and boolean_rot tagged_628)) (boolean_not integer_mod boolean_frominteger) integer_fromboolean integer_sub)) exec_empty exec_swap (in1 print_integer boolean_dup_times integer_flush exec_s () (boolean_and exec_k_when_autoconstructing (exec_dup_times (exec_eq)) (exec_when (tagged_705 exec_do*times (exec_dup_items boolean_invert_first_then_and integer_div integer_stackdepth in1) boolean_empty in4 exec_s_when_autoconstructing (integer_pop) (exec_do*range () exec_eq boolean_not boolean_xor exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and integer_lte integer_dup_items boolean_yank boolean_flush integer_gte) (integer_gte boolean_or) integer_flush exec_k_when_autoconstructing (boolean_flush exec_do*times (boolean_flush boolean_dup_times boolean_dup_items)) ()) ()))) ()) ())
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 73
Size: 104
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.992 0.998 0.998 0.998 0.998 0.996 0.996 0.996 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.121
Average program size in population (points): 68.82
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 492882
--- Timings ---
Current time: 1559593848405 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.9 seconds, 34.5%
Fitness Testing:      1.6 seconds, 61.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output:                    
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 9                  
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -22                
Correct output: -59                 | Program output: -44                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -32                
Correct output: -70                 | Program output: -52                
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 14                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -40                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 55                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 17                 
Correct output: -94                 | Program output: 91                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 13                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: 71                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 41                 
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_min exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger integer_empty boolean_frominteger exec_do*range (exec_do*count (boolean_empty exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup boolean_invert_second_then_and print_integer exec_shove (integer_lt print_integer integer_mult exec_do*while () boolean_flush))
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_min exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger integer_empty boolean_frominteger exec_do*range (exec_do*count (boolean_empty exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup boolean_invert_second_then_and print_integer exec_shove (integer_lt print_integer integer_mult exec_do*while () boolean_flush))
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 73 82 182 178 111 183 236 141 187)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (70 73 82 182 178 111 183 236 141 187)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Best program: (integer_min exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger integer_empty boolean_frominteger exec_do*range (exec_do*count (boolean_empty exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup boolean_invert_second_then_and print_integer exec_shove (integer_lt print_integer integer_mult exec_do*while () boolean_flush))
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.557
Median total errors in population: 19/2
Error averages by case: (0.93 0.927 0.918 0.818 0.822 0.889 0.817 0.764 0.859 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.018
Average program size in population (points): 87.582
Average percent parens in population: 0.257
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1356575
--- Timings ---
Current time: 1559593851109 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.1 seconds, 36.5%
Fitness Testing:      2.7 seconds, 48.1%
Report:               0.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 9                  
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -22                
Correct output: -59                 | Program output: -44                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -32                
Correct output: -70                 | Program output: -52                
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 14                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -40                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 55                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 17                 
Correct output: -94                 | Program output: 91                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 13                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: 71                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 41                 
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (boolean_empty print_integer in1 integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup print_integer exec_shove (integer_lt boolean_xor) print_integer integer_mult exec_do*while () boolean_flush)
Lexicase best errors: [1 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (boolean_empty print_integer in1 integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup print_integer exec_shove (integer_lt boolean_xor) print_integer integer_mult exec_do*while () boolean_flush)
Zero cases best errors: [1 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 242 39 69 91 91 198 198 199 91)
Population mean number of elite cases: 1.31
Count of perfect (error zero) individuals by case: (91 242 39 69 91 91 198 198 199 91)
Population mean number of perfect (error zero) cases: 1.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Best program: (integer_min exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_frominteger integer_empty boolean_frominteger exec_do*range (exec_do*count (integer_dec boolean_empty exec_noop in1 integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup print_integer exec_shove (integer_lt print_integer integer_mult exec_do*while () boolean_flush))
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 8.691
Median total errors in population: 10
Error averages by case: (0.909 0.758 0.961 0.931 0.909 0.909 0.802 0.802 0.801 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.119
Average program size in population (points): 56.349
Average percent parens in population: 0.249
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2005361
--- Timings ---
Current time: 1559593853416 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.3 seconds, 41.1%
Fitness Testing:      3.5 seconds, 43.2%
Report:               1.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 9                  
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -22                
Correct output: -59                 | Program output: -44                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -32                
Correct output: -70                 | Program output: -52                
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 14                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -40                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 55                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 17                 
Correct output: -94                 | Program output: 91                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 13                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: 71                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 41                 
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (integer_lte in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (boolean_empty exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_yankdup boolean_invert_second_then_and print_integer integer_dup_times exec_shove (integer_lt print_integer integer_pop))))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (integer_lte in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (boolean_empty exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_yankdup boolean_invert_second_then_and print_integer integer_dup_times exec_shove (integer_lt print_integer integer_pop))))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 250 176 89 117 90 167 92 208 67)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (134 250 176 89 117 90 167 92 208 67)
Population mean number of perfect (error zero) cases: 1.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_stackdepth})
Best program: (exec_pop (boolean_swap exec_eq boolean_xor) integer_dup_times in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (boolean_empty print_integer in1 integer_flush)) integer_yank) (exec_do*while () boolean_swap)) boolean_yankdup print_integer integer_dup_items exec_shove (integer_lt boolean_xor) print_integer integer_mult exec_do*while () boolean_flush boolean_stackdepth)
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.61
Median total errors in population: 10
Error averages by case: (0.866 0.75 0.824 0.911 0.883 0.91 0.833 0.908 0.792 0.933)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.339
Average program size in population (points): 56.691
Average percent parens in population: 0.250
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2579766
--- Timings ---
Current time: 1559593855537 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.6 seconds, 44.8%
Fitness Testing:      4.1 seconds, 40.2%
Report:               1.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 9                  
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -22                
Correct output: -59                 | Program output: -44                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -32                
Correct output: -70                 | Program output: -52                
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 14                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -40                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 55                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 17                 
Correct output: -94                 | Program output: 91                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 13                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: 71                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 41                 
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while})
Lexicase best program: (integer_min exec_pop (boolean_swap exec_dup_items exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (integer_dec boolean_invert_first_then_and boolean_flush boolean_frominteger integer_empty boolean_yankdup exec_do*range (exec_do*count (boolean_empty integer_lte exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_swap)) exec_empty print_integer exec_shove (integer_lt exec_if () (print_integer integer_mult exec_do*while ())))
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while})
Zero cases best program: (integer_min exec_pop (boolean_swap exec_dup_items exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (integer_dec boolean_invert_first_then_and boolean_flush boolean_frominteger integer_empty boolean_yankdup exec_do*range (exec_do*count (boolean_empty integer_lte exec_noop in1 exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_swap)) exec_empty print_integer exec_shove (integer_lt exec_if () (print_integer integer_mult exec_do*while ())))
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 213 212 92 86 92 91 92 91 215)
Population mean number of elite cases: 1.28
Count of perfect (error zero) individuals by case: (100 213 212 92 86 92 91 92 91 215)
Population mean number of perfect (error zero) cases: 1.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush})
Best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (boolean_empty exec_noop exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_yankdup print_integer integer_dup_times exec_shove (integer_lt boolean_invert_second_then_and print_integer integer_mult boolean_flush))))
Errors: [0 0 0 1 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.716
Median total errors in population: 10
Error averages by case: (0.9 0.787 0.788 0.908 0.914 0.908 0.909 0.908 0.909 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.226
Average program size in population (points): 52.523
Average percent parens in population: 0.250
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3175122
--- Timings ---
Current time: 1559593857651 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.8 seconds, 46.9%
Fitness Testing:      4.7 seconds, 38.2%
Report:               1.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -16                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: 38                 
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 97                 
Correct output: 5                   | Program output: 24                 
Correct output: 5                   | Program output: 52                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 36                 
Correct output: 0                   | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 86                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 88                 
Correct output: 7                   | Program output: 60                 
Correct output: 5                   | Program output: 29                 
Correct output: 0                   | Program output: 36                 
Correct output: 67                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 68                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -25                
Correct output: -45                 | Program output: 96                 
Correct output: -63                 | Program output: -63                
Correct output: -59                 | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 65                 
Correct output: -73                 | Program output: 18                 
Correct output: -100                | Program output: -71                
Correct output: -78                 | Program output: -28                
Correct output: -70                 | Program output: -65                
Correct output: -57                 | Program output: -7                 
Correct output: -41                 | Program output: -1                 
Correct output: -35                 | Program output: 18                 
Correct output: -97                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: 73                 
Correct output: -87                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 52                 
Correct output: -90                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: 97                 
Correct output: -80                 | Program output: 0                  
Correct output: -91                 | Program output: 0                  
Correct output: -63                 | Program output: -51                
Correct output: -63                 | Program output: -36                
Correct output: -84                 | Program output: -10                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 47                 
Correct output: -69                 | Program output: 85                 
Correct output: -82                 | Program output: 20                 
Correct output: -53                 | Program output: 46                 
Correct output: -42                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -5                 
Correct output: -91                 | Program output: 55                 
Correct output: -47                 | Program output: 52                 
Correct output: -22                 | Program output: 4                  
Correct output: -100                | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 82                 
Correct output: -86                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 71                 
Correct output: -81                 | Program output: 25                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: 66                 
Correct output: -86                 | Program output: 93                 
Correct output: -56                 | Program output: -50                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_805} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_dup_items integer_dup integer_flush exec_k_when_autoconstructing (integer_gt exec_if (boolean_empty exec_pop (tag_integer_805 integer_lte boolean_invert_first_then_and integer_pop integer_mult boolean_yankdup boolean_not print_exec (boolean_stackdepth)) print_integer exec_yankdup print_integer boolean_xor boolean_dup) () boolean_empty in4 exec_s (print_integer) (integer_swap exec_pop (boolean_dup_items exec_y (exec_pop (in4 exec_if (exec_stackdepth exec_if (integer_yank) ()) ())))) ()) ())
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_805} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_dup_items integer_dup integer_flush exec_k_when_autoconstructing (integer_gt exec_if (boolean_empty exec_pop (tag_integer_805 integer_lte boolean_invert_first_then_and integer_pop integer_mult boolean_yankdup boolean_not print_exec (boolean_stackdepth)) print_integer exec_yankdup print_integer boolean_xor boolean_dup) () boolean_empty in4 exec_s (print_integer) (integer_swap exec_pop (boolean_dup_items exec_y (exec_pop (in4 exec_if (exec_stackdepth exec_if (integer_yank) ()) ())))) ()) ())
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 132 158 157 153 126 248 134 132 158)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (250 132 158 157 153 126 248 134 132 158)
Population mean number of perfect (error zero) cases: 1.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 2, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction -25} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank})
Best program: (exec_when (exec_k_when_autoconstructing (boolean_dup_times exec_if (exec_do*times (boolean_empty exec_pop (integer_lte boolean_invert_first_then_and boolean_yankdup boolean_xor integer_mult boolean_yank boolean_yankdup integer_add print_exec (boolean_stackdepth)) print_integer exec_dup_times (exec_yankdup integer_stackdepth in4 boolean_invert_first_then_and exec_rot (boolean_xor exec_while () exec_s (print_integer) (exec_k () () integer_div integer_pop exec_y (exec_swap (exec_pop (boolean_stackdepth boolean_or) integer_add in4 exec_dup (-25) integer_mult exec_if (integer_yank) ()) ())) ()) () ()))) ()) ()))
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 69
Percent parens: 0.377
--- Population Statistics ---
Average total errors in population: 8.352
Median total errors in population: 10
Error averages by case: (0.75 0.868 0.842 0.843 0.847 0.874 0.752 0.866 0.868 0.842)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.682
Average program size in population (points): 56.205
Average percent parens in population: 0.256
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3735872
--- Timings ---
Current time: 1559593860175 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.0 seconds, 48.5%
Fitness Testing:      5.3 seconds, 36.8%
Report:               2.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -16                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: 38                 
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 97                 
Correct output: 5                   | Program output: 24                 
Correct output: 5                   | Program output: 52                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 36                 
Correct output: 0                   | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 86                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 88                 
Correct output: 7                   | Program output: 60                 
Correct output: 5                   | Program output: 29                 
Correct output: 0                   | Program output: 36                 
Correct output: 67                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 68                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -25                
Correct output: -45                 | Program output: 96                 
Correct output: -63                 | Program output: -63                
Correct output: -59                 | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 65                 
Correct output: -73                 | Program output: 18                 
Correct output: -100                | Program output: -71                
Correct output: -78                 | Program output: -28                
Correct output: -70                 | Program output: -65                
Correct output: -57                 | Program output: -7                 
Correct output: -41                 | Program output: -1                 
Correct output: -35                 | Program output: 18                 
Correct output: -97                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: 73                 
Correct output: -87                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 52                 
Correct output: -90                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: 97                 
Correct output: -80                 | Program output: 0                  
Correct output: -91                 | Program output: 0                  
Correct output: -63                 | Program output: -51                
Correct output: -63                 | Program output: -36                
Correct output: -84                 | Program output: -10                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 47                 
Correct output: -69                 | Program output: 85                 
Correct output: -82                 | Program output: 20                 
Correct output: -53                 | Program output: 46                 
Correct output: -42                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -5                 
Correct output: -91                 | Program output: 55                 
Correct output: -47                 | Program output: 52                 
Correct output: -22                 | Program output: 4                  
Correct output: -100                | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 82                 
Correct output: -86                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 71                 
Correct output: -81                 | Program output: 25                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: 66                 
Correct output: -86                 | Program output: 93                 
Correct output: -56                 | Program output: -50                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_dup_items exec_do*count (print_integer exec_when (print_boolean exec_k_when_autoconstructing (integer_gt integer_min exec_if (boolean_empty exec_pop (boolean_xor integer_mult integer_mult)) (boolean_yank in1 boolean_stackdepth)) (integer_yankdup) integer_eq boolean_eq in4 integer_stackdepth integer_dup in4 boolean_empty exec_s (print_integer) (integer_eq) (integer_add exec_y_when_autoconstructing (exec_do*range (exec_eq integer_div integer_yankdup exec_y (exec_pop (boolean_xor in4 exec_dup (integer_yank integer_fromboolean) integer_mult integer_max) exec_if (integer_yank) ())))))))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 63
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_dup_items exec_do*count (print_integer exec_when (print_boolean exec_k_when_autoconstructing (integer_gt integer_min exec_if (boolean_empty exec_pop (boolean_xor integer_mult integer_mult)) (boolean_yank in1 boolean_stackdepth)) (integer_yankdup) integer_eq boolean_eq in4 integer_stackdepth integer_dup in4 boolean_empty exec_s (print_integer) (integer_eq) (integer_add exec_y_when_autoconstructing (exec_do*range (exec_eq integer_div integer_yankdup exec_y (exec_pop (boolean_xor in4 exec_dup (integer_yank integer_fromboolean) integer_mult integer_max) exec_if (integer_yank) ())))))))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 63
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 58 241 48 241 242 242 162 6 59)
Population mean number of elite cases: 1.31
Count of perfect (error zero) individuals by case: (7 58 241 48 241 242 242 162 6 59)
Population mean number of perfect (error zero) cases: 1.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_112} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction 62} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup})
Best program: (in3 integer_max exec_rot (integer_add exec_yankdup integer_shove) (boolean_frominteger integer_dec) (boolean_dup_times exec_eq) exec_pop () exec_while (tagged_112 integer_dec integer_div in3) in1 exec_k (exec_s (integer_mult boolean_empty exec_s_when_autoconstructing (integer_yankdup in3 boolean_shove in4) (integer_stackdepth) (exec_eq exec_dup_items exec_dup_items boolean_swap exec_k_when_autoconstructing () (exec_while (exec_do*while () exec_while (integer_inc integer_flush exec_empty boolean_flush integer_rot 62 integer_add) integer_pop integer_dup boolean_rot boolean_shove integer_yankdup integer_yank boolean_invert_first_then_and integer_flush exec_do*range (exec_shove (boolean_yankdup boolean_yankdup integer_dec boolean_shove exec_dup_times (integer_dup in3 exec_yankdup exec_eq exec_if (exec_while (integer_dup boolean_empty integer_mult boolean_invert_second_then_and) boolean_invert_second_then_and) ()) in4 print_integer) exec_yankdup) boolean_not exec_empty print_integer) boolean_or integer_max exec_stackdepth integer_flush exec_s (integer_pop) (integer_min boolean_and exec_dup ()) ()))) () ()) ())
Errors: [1 1 0 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 83
Size: 112
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 8.694
Median total errors in population: 10
Error averages by case: (0.993 0.942 0.759 0.952 0.759 0.758 0.758 0.838 0.994 0.941)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.646
Average program size in population (points): 51.071
Average percent parens in population: 0.259
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4347193
--- Timings ---
Current time: 1559593862462 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.2 seconds, 48.4%
Fitness Testing:      5.9 seconds, 34.9%
Report:               2.7 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -16                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: 38                 
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 97                 
Correct output: 5                   | Program output: 24                 
Correct output: 5                   | Program output: 52                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 36                 
Correct output: 0                   | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 86                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 88                 
Correct output: 7                   | Program output: 60                 
Correct output: 5                   | Program output: 29                 
Correct output: 0                   | Program output: 36                 
Correct output: 67                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 68                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -25                
Correct output: -45                 | Program output: 96                 
Correct output: -63                 | Program output: -63                
Correct output: -59                 | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 65                 
Correct output: -73                 | Program output: 18                 
Correct output: -100                | Program output: -71                
Correct output: -78                 | Program output: -28                
Correct output: -70                 | Program output: -65                
Correct output: -57                 | Program output: -7                 
Correct output: -41                 | Program output: -1                 
Correct output: -35                 | Program output: 18                 
Correct output: -97                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: 73                 
Correct output: -87                 | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 52                 
Correct output: -90                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: 97                 
Correct output: -80                 | Program output: 0                  
Correct output: -91                 | Program output: 0                  
Correct output: -63                 | Program output: -51                
Correct output: -63                 | Program output: -36                
Correct output: -84                 | Program output: -10                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -68                
Correct output: -25                 | Program output: 47                 
Correct output: -69                 | Program output: 85                 
Correct output: -82                 | Program output: 20                 
Correct output: -53                 | Program output: 46                 
Correct output: -42                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -5                 
Correct output: -91                 | Program output: 55                 
Correct output: -47                 | Program output: 52                 
Correct output: -22                 | Program output: 4                  
Correct output: -100                | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 82                 
Correct output: -86                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 71                 
Correct output: -81                 | Program output: 25                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: 66                 
Correct output: -86                 | Program output: 93                 
Correct output: -56                 | Program output: -50                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_integer_805} {:close 0, :instruction tagged_643} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction -25} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_k () () boolean_dup_items exec_when (integer_gt exec_yank boolean_dup_items exec_dup () exec_if (exec_empty exec_pop (boolean_dup_times tag_integer_805 tagged_643 boolean_or integer_yank integer_min boolean_yank integer_add exec_eq integer_yankdup) exec_shove (boolean_dup_times integer_stackdepth integer_fromboolean exec_empty)) (in4 exec_while () boolean_empty exec_s (print_integer) (exec_stackdepth integer_div exec_rot (exec_while (boolean_invert_first_then_and exec_pop (boolean_invert_second_then_and integer_rot boolean_empty exec_dup (-25) exec_if (print_boolean integer_yank) ()))) () ()) ())))
Lexicase best errors: [1 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_integer_805} {:close 0, :instruction tagged_643} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction -25} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_k () () boolean_dup_items exec_when (integer_gt exec_yank boolean_dup_items exec_dup () exec_if (exec_empty exec_pop (boolean_dup_times tag_integer_805 tagged_643 boolean_or integer_yank integer_min boolean_yank integer_add exec_eq integer_yankdup) exec_shove (boolean_dup_times integer_stackdepth integer_fromboolean exec_empty)) (in4 exec_while () boolean_empty exec_s (print_integer) (exec_stackdepth integer_div exec_rot (exec_while (boolean_invert_first_then_and exec_pop (boolean_invert_second_then_and integer_rot boolean_empty exec_dup (-25) exec_if (print_boolean integer_yank) ()))) () ()) ())))
Zero cases best errors: [1 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 139 201 138 112 203 206 205 107 105)
Population mean number of elite cases: 1.55
Count of perfect (error zero) individuals by case: (137 139 201 138 112 203 206 205 107 105)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_805} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_643} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 1, :instruction -25} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank})
Best program: (boolean_dup_items exec_dup () exec_if (boolean_empty exec_pop (tag_integer_805 integer_lte boolean_invert_first_then_and tagged_643 boolean_or integer_add boolean_yank integer_add exec_eq integer_yankdup) boolean_rot) (print_integer exec_yankdup integer_stackdepth exec_empty) in4 boolean_xor boolean_empty print_integer exec_stackdepth integer_div integer_pop boolean_invert_first_then_and exec_pop (exec_s_when_autoconstructing (exec_eq exec_eq boolean_or) (exec_dup (-25) integer_mult exec_if (integer_yank) ()) ()))
Errors: [1 1 0 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 8.447
Median total errors in population: 10
Error averages by case: (0.863 0.861 0.799 0.862 0.888 0.797 0.794 0.795 0.893 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.168
Average program size in population (points): 52.133
Average percent parens in population: 0.264
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4943820
--- Timings ---
Current time: 1559593864507 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.5 seconds, 49.2%
Fitness Testing:      6.6 seconds, 34.1%
Report:               3.1 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 58                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 9                  
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -22                
Correct output: -59                 | Program output: -44                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -32                
Correct output: -70                 | Program output: -52                
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 14                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -40                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 55                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 17                 
Correct output: -94                 | Program output: 91                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 13                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: 71                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 41                 
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (integer_empty boolean_frominteger exec_do*range (exec_do*count (integer_pop boolean_empty exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_and boolean_or boolean_yankdup print_integer exec_shove (integer_empty integer_lt exec_do*while () integer_dup_times)) exec_eq))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (integer_empty boolean_frominteger exec_do*range (exec_do*count (integer_pop boolean_empty exec_dup_items integer_flush)) integer_yank) (exec_do*while () boolean_and boolean_or boolean_yankdup print_integer exec_shove (integer_empty integer_lt exec_do*while () integer_dup_times)) exec_eq))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 21 305 17 244 15 304 250 244 20)
Population mean number of elite cases: 1.51
Count of perfect (error zero) individuals by case: (92 21 305 17 244 15 304 250 244 20)
Population mean number of perfect (error zero) cases: 1.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush})
Best program: (exec_pop (boolean_swap exec_eq boolean_xor) in2 exec_dup (in1 integer_gte in2 integer_swap exec_if (boolean_flush boolean_frominteger boolean_frominteger exec_do*range (exec_do*count (exec_eq boolean_empty exec_noop integer_flush)) integer_yank) (exec_do*while () boolean_yankdup print_integer exec_shove (integer_lt boolean_flush boolean_flush))))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 8.488
Median total errors in population: 9
Error averages by case: (0.908 0.979 0.695 0.983 0.756 0.985 0.696 0.75 0.756 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.348
Average program size in population (points): 52.608
Average percent parens in population: 0.267
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5432716
--- Timings ---
Current time: 1559593866548 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.7 seconds, 50.3%
Fitness Testing:      7.1 seconds, 33.6%
Report:               3.3 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -21                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: 43                 
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: 0                  
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 69                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 82                 
Correct output: 8                   | Program output: 14                 
Correct output: 4                   | Program output: 72                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 85                 
Correct output: 40                  | Program output: 94                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 96                 
Correct output: 6                   | Program output: 76                 
Correct output: 34                  | Program output: 52                 
Correct output: 44                  | Program output: 76                 
Correct output: -41                 | Program output: 7                  
Correct output: -45                 | Program output: 69                 
Correct output: -63                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -25                
Correct output: -86                 | Program output: 16                 
Correct output: -32                 | Program output: 8                  
Correct output: -73                 | Program output: -40                
Correct output: -100                | Program output: -93                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: 69                 
Correct output: -41                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -19                
Correct output: -87                 | Program output: 93                 
Correct output: -90                 | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: 62                 
Correct output: -97                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -63                
Correct output: -63                 | Program output: 85                 
Correct output: -84                 | Program output: 37                 
Correct output: 53                  | Program output: 56                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: 29                 
Correct output: -94                 | Program output: 95                 
Correct output: -84                 | Program output: 98                 
Correct output: -25                 | Program output: 93                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: 85                 
Correct output: -53                 | Program output: 73                 
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: 69                 
Correct output: -45                 | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: 13                 
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -47                 | Program output: 75                 
Correct output: -22                 | Program output: 2                  
Correct output: -100                | Program output: -29                
Correct output: -68                 | Program output: 90                 
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: 73                 
Correct output: -64                 | Program output: 52                 
Correct output: -86                 | Program output: 21                 
Correct output: -71                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: 94                 
Correct output: -56                 | Program output: 42                 
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Lexicase best program: (integer_lt print_boolean in4 in1 in3 exec_k (in2 integer_shove boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or integer_dup_times boolean_not) exec_noop integer_inc exec_do*range (exec_do*count (in3 integer_inc) exec_do*while () integer_max boolean_dup_items exec_noop integer_dup exec_swap (boolean_dup in4 exec_dup () integer_dup_items exec_dup_times () exec_when (integer_yank integer_max)) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Zero cases best program: (integer_lt print_boolean in4 in1 in3 exec_k (in2 integer_shove boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or integer_dup_times boolean_not) exec_noop integer_inc exec_do*range (exec_do*count (in3 integer_inc) exec_do*while () integer_max boolean_dup_items exec_noop integer_dup exec_swap (boolean_dup in4 exec_dup () integer_dup_items exec_dup_times () exec_when (integer_yank integer_max)) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 211 140 121 215 23 109 17 122 17)
Population mean number of elite cases: 1.00
Count of perfect (error zero) individuals by case: (20 211 140 121 215 23 109 17 122 17)
Population mean number of perfect (error zero) cases: 1.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Best program: (integer_lt print_boolean exec_do*times (integer_empty in4 in1 in3 exec_stackdepth exec_k (in2 integer_shove boolean_frominteger print_integer) (exec_y_when_autoconstructing (79 integer_min boolean_swap exec_eq integer_swap)) boolean_or integer_dup_times boolean_not) boolean_stackdepth exec_noop exec_do*range (integer_min exec_do*count (in3 integer_inc) exec_do*while () integer_max boolean_dup_items exec_noop integer_dup exec_swap (boolean_dup in4 exec_dup () integer_dup_items exec_when (integer_yank integer_max)) ()))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 9.005
Median total errors in population: 10
Error averages by case: (0.98 0.789 0.86 0.879 0.785 0.977 0.891 0.983 0.878 0.983)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.146
Average program size in population (points): 46.116
Average percent parens in population: 0.258
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5994862
--- Timings ---
Current time: 1559593868863 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.9 seconds, 51.0%
Fitness Testing:      7.7 seconds, 33.2%
Report:               3.6 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 69                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 52                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -25                
Correct output: -45                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -59                 | Program output: 1                  
Correct output: -59                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 32                 
Correct output: -73                 | Program output: 3                  
Correct output: -100                | Program output: -71                
Correct output: -78                 | Program output: -28                
Correct output: -70                 | Program output: -65                
Correct output: -57                 | Program output: -7                 
Correct output: -41                 | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -51                
Correct output: -63                 | Program output: -36                
Correct output: -84                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: 47                 
Correct output: -69                 | Program output: -6                 
Correct output: -82                 | Program output: -32                
Correct output: -53                 | Program output: 46                 
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -38                
Correct output: -47                 | Program output: 34                 
Correct output: -22                 | Program output: 4                  
Correct output: -100                | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -49                
Correct output: -86                 | Program output: -14                
Correct output: -56                 | Program output: -50                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max})
Lexicase best program: (integer_lt print_boolean in4 in1 in3 exec_k (in2 integer_shove integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (boolean_dup in4 exec_dup () integer_dup_items exec_dup_times () exec_when (integer_max)) ()))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max})
Zero cases best program: (integer_lt print_boolean in4 in1 in3 exec_k (in2 integer_shove integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (boolean_dup in4 exec_dup () integer_dup_items exec_dup_times () exec_when (integer_max)) ()))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 230 313 111 62 81 231 296 178 139)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (485 230 313 111 62 81 231 296 178 139)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank})
Best program: (integer_lt print_boolean in4 in1 in3 integer_shove exec_k (in2 integer_shove integer_min boolean_yankdup boolean_invert_first_then_and print_integer) (exec_y_when_autoconstructing (boolean_xor 79 integer_min exec_dup_items) integer_dup boolean_swap integer_inc integer_pop exec_eq integer_swap) boolean_or exec_empty integer_dup_times integer_gte boolean_not exec_noop integer_inc exec_do*range (exec_yank) exec_do*count (in3 integer_inc) exec_do*while () integer_max integer_empty boolean_dup_items exec_noop integer_dup_items integer_dup exec_pop (exec_swap (boolean_dup in4 exec_dup () integer_dup_items integer_dec exec_dup_times () exec_when (integer_yank)) ()))
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 66
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 7.874
Median total errors in population: 8
Error averages by case: (0.515 0.77 0.687 0.889 0.938 0.919 0.769 0.704 0.822 0.861)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.919
Average program size in population (points): 51.357
Average percent parens in population: 0.242
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6812272
--- Timings ---
Current time: 1559593871162 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.1 seconds, 50.8%
Fitness Testing:      8.5 seconds, 32.9%
Report:               4.1 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 38                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -25                
Correct output: -45                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 8                  
Correct output: -73                 | Program output: -40                
Correct output: -100                | Program output: -93                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -41                 | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -63                
Correct output: -63                 | Program output: -36                
Correct output: -84                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -32                
Correct output: -53                 | Program output: 46                 
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -47                 | Program output: 34                 
Correct output: -22                 | Program output: 2                  
Correct output: -100                | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -14                
Correct output: -56                 | Program output: -50                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Lexicase best program: (print_boolean in4 exec_if (in1 in3 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth) (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank integer_max))))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Zero cases best program: (print_boolean in4 exec_if (in1 in3 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth) (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank integer_max))))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 114 306 281 263 114 147 562 101 71)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (254 114 306 281 263 114 147 562 101 71)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Best program: (print_boolean in4 exec_if (in1 in3 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min boolean_swap exec_eq boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth) (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank integer_max))))
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.787
Median total errors in population: 7
Error averages by case: (0.746 0.886 0.694 0.719 0.737 0.886 0.853 0.438 0.899 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.382
Average program size in population (points): 57.467
Average percent parens in population: 0.229
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7572779
--- Timings ---
Current time: 1559593873761 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.3 seconds, 51.0%
Fitness Testing:      9.2 seconds, 32.9%
Report:               4.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 38                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -25                
Correct output: -45                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 8                  
Correct output: -73                 | Program output: -40                
Correct output: -100                | Program output: -93                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -41                 | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -63                
Correct output: -63                 | Program output: -36                
Correct output: -84                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -32                
Correct output: -53                 | Program output: 46                 
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -47                 | Program output: 34                 
Correct output: -22                 | Program output: 2                  
Correct output: -100                | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -14                
Correct output: -56                 | Program output: -50                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Lexicase best program: (integer_fromboolean print_boolean in4 exec_if (in1 in3 in2 integer_shove integer_min integer_min integer_dup_times boolean_yankdup print_integer) (boolean_frominteger print_integer) boolean_xor 79 integer_min boolean_swap boolean_or boolean_not exec_eq exec_noop exec_do*count (in2 in3 exec_if (integer_inc) (exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank integer_max)) ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Zero cases best program: (integer_fromboolean print_boolean in4 exec_if (in1 in3 in2 integer_shove integer_min integer_min integer_dup_times boolean_yankdup print_integer) (boolean_frominteger print_integer) boolean_xor 79 integer_min boolean_swap boolean_or boolean_not exec_eq exec_noop exec_do*count (in2 in3 exec_if (integer_inc) (exec_do*while () integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank integer_max)) ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 657 309 345 309 331 321 343 657 315)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (340 657 309 345 309 331 321 343 657 315)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Best program: (print_boolean in4 exec_if (in1 in3 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (boolean_xor 79 integer_min exec_eq boolean_or boolean_not) exec_shove (exec_do*range (exec_do*count (in2 in3 integer_gte integer_inc) exec_do*while () in4 integer_max boolean_empty integer_gt) boolean_dup_items exec_s_when_autoconstructing () (exec_stackdepth) (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank integer_max))))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 6.073
Median total errors in population: 6
Error averages by case: (0.66 0.343 0.691 0.655 0.691 0.669 0.679 0.657 0.343 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.153
Average program size in population (points): 55.042
Average percent parens in population: 0.235
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8441977
--- Timings ---
Current time: 1559593876102 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.5 seconds, 50.5%
Fitness Testing:     10.1 seconds, 32.7%
Report:               5.1 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 212
Test mean error for best: 0.21200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 93                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 10                 
Correct output: 4                   | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 58                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -2                 
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -63                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -24                
Correct output: -94                 | Program output: 53                 
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: 22                 
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: 41                 
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -8                 
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 79} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_invert_first_then_and exec_if (in1 in3 in2 integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (79 exec_eq boolean_or boolean_not) exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () boolean_empty boolean_dup_items exec_rot (exec_s_when_autoconstructing () (exec_stackdepth) (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank print_boolean))) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 79} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_invert_first_then_and exec_if (in1 in3 in2 integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger print_integer) exec_y_when_autoconstructing (79 exec_eq boolean_or boolean_not) exec_do*range (exec_do*count (in2 in3 integer_inc) exec_do*while () boolean_empty boolean_dup_items exec_rot (exec_s_when_autoconstructing () (exec_stackdepth) (boolean_dup in4 integer_dup_items exec_dup_times () exec_when (exec_yank print_boolean))) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 323 546 505 330 339 494 361 359 668)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (350 323 546 505 330 339 494 361 359 668)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Best program: (print_boolean in4 exec_if (in3 in2 in1 integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger exec_if () (print_integer) exec_y_when_autoconstructing (boolean_xor 79 boolean_xor)) integer_min integer_rot boolean_swap exec_eq exec_rot (boolean_or boolean_not) (exec_noop exec_do*range (in1 exec_do*count (in2 in3 integer_max integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (boolean_dup in4 boolean_and) (integer_div integer_dup_items exec_dup_times () integer_dup_items exec_when (exec_yank integer_max))))) ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.725
Median total errors in population: 5
Error averages by case: (0.65 0.677 0.454 0.495 0.67 0.661 0.506 0.639 0.641 0.332)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.599
Average program size in population (points): 53.127
Average percent parens in population: 0.234
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9518436
--- Timings ---
Current time: 1559593878931 milliseconds
Total Time:          33.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.7 seconds, 50.2%
Fitness Testing:     11.1 seconds, 33.3%
Report:               5.4 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 115
Test mean error for best: 0.11500
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 38                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -63                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 83} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (print_boolean in4 exec_if (in1 exec_s (in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger exec_flush print_integer) (exec_y_when_autoconstructing (boolean_xor 83 boolean_swap exec_eq boolean_or boolean_not) boolean_not exec_do*count (in2 in3 integer_inc) integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (in4 integer_dup_items exec_dup_times () print_newline) (exec_yank integer_max boolean_stackdepth))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction 83} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (print_boolean in4 exec_if (in1 exec_s (in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger exec_flush print_integer) (exec_y_when_autoconstructing (boolean_xor 83 boolean_swap exec_eq boolean_or boolean_not) boolean_not exec_do*count (in2 in3 integer_inc) integer_max boolean_empty boolean_dup_items exec_s_when_autoconstructing () (in4 integer_dup_items exec_dup_times () print_newline) (exec_yank integer_max boolean_stackdepth))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (456 435 471 343 522 528 471 669 508 450)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (456 435 471 343 522 528 471 669 508 450)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction 79} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max})
Best program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.147
Median total errors in population: 4
Error averages by case: (0.544 0.565 0.529 0.657 0.478 0.472 0.529 0.331 0.492 0.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.749
Average program size in population (points): 52.513
Average percent parens in population: 0.241
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10455690
--- Timings ---
Current time: 1559593881344 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 49.8%
Fitness Testing:     12.0 seconds, 33.4%
Report:               6.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 57


Auto-simplifying with starting size: 57
step: 0
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 500
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1000
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1500
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2000
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2500
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3000
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3500
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4000
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4500
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 5000
program: (in4 exec_if (in1 in3 in2 in2 integer_shove integer_min integer_min boolean_yankdup print_integer) (boolean_frominteger boolean_xor 79 boolean_shove integer_min boolean_swap boolean_or boolean_not) exec_noop exec_do*range (exec_do*count (in2 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_inc) integer_max boolean_empty exec_s_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_do*range (in4 in3 integer_dup_items exec_rot (exec_when (exec_yank integer_max)) () ())) ()) () ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 115
Test mean error for best: 0.11500
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: 52                  | Program output: 52                 
Correct output: -16                 | Program output: -16                
Correct output: -58                 | Program output: -58                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -87                 | Program output: -87                
Correct output: -11                 | Program output: -11                
Correct output: 76                  | Program output: 76                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 14                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 72                  | Program output: 72                 
Correct output: 40                  | Program output: 40                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 67                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 69                 
Correct output: 34                  | Program output: 38                 
Correct output: 44                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -63                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -26                
Correct output: -86                 | Program output: -34                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -41                 | Program output: -41                
Correct output: -35                 | Program output: -35                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -43                
Correct output: 19                  | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -63                 | Program output: -63                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: 53                  | Program output: 53                 
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -69                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -15                
Correct output: -45                 | Program output: -45                
Correct output: 12                  | Program output: 12                 
Correct output: -81                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: 32                  | Program output: 32                 
;;******************************
