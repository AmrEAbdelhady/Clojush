Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-71 -71 -71 -6] -71] [[-25 -25 2 -25] -25] [[-42 -36 -36 -36] -42] [[81 81 81 24] 24] [[-32 -32 -80 -32] -80] [[-81 85 -81 -81] -81] [[-72 -72 -72 -38] -72] [[-3 -3 -3 90] -3] [[-1 74 74 74] -1] [[9 -1 -1 -1] -1] [(48 48 48 48) 48] [(-96 -96 -96 -96) -96] [(-58 -58 -58 -58) -58] [(65 65 65 65) 65] [(37 37 37 37) 37] [(99 35 17 80) 17] [(79 77 2 62) 2] [(31 90 96 100) 31] [(100 69 42 45) 42] [(99 55 15 27) 15] [(59 48 13 79) 13] [(60 64 98 33) 33] [(74 17 13 83) 13] [(26 15 9 42) 9] [(50 86 80 37) 37] [(99 17 40 18) 17] [(75 77 20 93) 20] [(78 69 5 46) 5] [(69 91 79 87) 69] [(6 69 43 7) 6] [(70 84 20 45) 20] [(33 79 5 30) 5] [(86 36 12 79) 12] [(18 38 100 47) 18] [(76 59 77 64) 59] [(54 21 1 95) 1] [(100 -80 -42 94) -80] [(-35 -56 -2 -4) -56] [(-78 -65 -61 74) -78] [(-67 12 45 -11) -67] [(5 8 -33 -49) -49] [(93 24 -72 -53) -72] [(-95 -48 29 52) -95] [(-82 -40 91 42) -82] [(58 35 -26 74) -26] [(46 -19 -50 -69) -69] [(81 -3 -11 -89) -89] [(-40 74 63 92) -40] [(-61 89 -28 -1) -61] [(97 -78 -32 -2) -78] [(-46 -37 -6 45) -46] [(-27 -8 93 41) -27] [(-59 -52 -63 59) -63] [(72 54 45 32) 32] [(-38 -23 -41 -91) -91] [(87 53 -58 96) -58] [(-61 56 38 10) -61] [(-83 1 -71 -73) -83] [(-17 27 -2 9) -17] [(52 -76 -13 -78) -78] [(-38 90 -37 -18) -38] [(51 -62 91 -68) -68] [(41 57 2 37) 2] [(-2 -80 -60 56) -80] [(-86 47 76 -12) -86] [(-52 82 28 -64) -64] [(53 -13 -39 14) -39] [(17 2 70 25) 2] [(-96 -4 -42 63) -96] [(-91 -62 -69 8) -91] [(11 -61 80 63) -61] [(50 100 -30 -34) -34] [(24 94 70 47) 24] [(-64 -84 -15 4) -84] [(91 -2 -42 79) -42] [(46 -49 63 23) -49] [(42 -8 13 -68) -68] [(76 68 -18 -83) -83] [(76 -37 -15 -26) -37] [(-24 97 -44 97) -44] [(36 68 14 -69) -69] [(8 62 -4 -4) -4] [(-28 10 46 66) -28] [(4 59 -62 -83) -83] [(-93 -86 19 74) -93] [(38 61 64 4) 4] [(-50 -79 -63 64) -79] [(-81 -22 67 40) -81] [(-23 100 -50 -76) -76] [(99 38 -43 -32) -43] [(-13 -12 47 -86) -86] [(-92 -1 -57 63) -92] [(70 75 100 44) 44] [(-33 86 -95 -14) -95] [(-85 -74 13 -85) -85])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-71 -71 -71 -6] -71]
Train Case:   6 | Input/Output: [[-25 -25 2 -25] -25]
Train Case:   7 | Input/Output: [[-42 -36 -36 -36] -42]
Train Case:   8 | Input/Output: [[81 81 81 24] 24]
Train Case:   9 | Input/Output: [[-32 -32 -80 -32] -80]
Train Case:  10 | Input/Output: [[-81 85 -81 -81] -81]
Train Case:  11 | Input/Output: [[-72 -72 -72 -38] -72]
Train Case:  12 | Input/Output: [[-3 -3 -3 90] -3]
Train Case:  13 | Input/Output: [[-1 74 74 74] -1]
Train Case:  14 | Input/Output: [[9 -1 -1 -1] -1]
Train Case:  15 | Input/Output: [(48 48 48 48) 48]
Train Case:  16 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  17 | Input/Output: [(-58 -58 -58 -58) -58]
Train Case:  18 | Input/Output: [(65 65 65 65) 65]
Train Case:  19 | Input/Output: [(37 37 37 37) 37]
Train Case:  20 | Input/Output: [(99 35 17 80) 17]
Train Case:  21 | Input/Output: [(79 77 2 62) 2]
Train Case:  22 | Input/Output: [(31 90 96 100) 31]
Train Case:  23 | Input/Output: [(100 69 42 45) 42]
Train Case:  24 | Input/Output: [(99 55 15 27) 15]
Train Case:  25 | Input/Output: [(59 48 13 79) 13]
Train Case:  26 | Input/Output: [(60 64 98 33) 33]
Train Case:  27 | Input/Output: [(74 17 13 83) 13]
Train Case:  28 | Input/Output: [(26 15 9 42) 9]
Train Case:  29 | Input/Output: [(50 86 80 37) 37]
Train Case:  30 | Input/Output: [(99 17 40 18) 17]
Train Case:  31 | Input/Output: [(75 77 20 93) 20]
Train Case:  32 | Input/Output: [(78 69 5 46) 5]
Train Case:  33 | Input/Output: [(69 91 79 87) 69]
Train Case:  34 | Input/Output: [(6 69 43 7) 6]
Train Case:  35 | Input/Output: [(70 84 20 45) 20]
Train Case:  36 | Input/Output: [(33 79 5 30) 5]
Train Case:  37 | Input/Output: [(86 36 12 79) 12]
Train Case:  38 | Input/Output: [(18 38 100 47) 18]
Train Case:  39 | Input/Output: [(76 59 77 64) 59]
Train Case:  40 | Input/Output: [(54 21 1 95) 1]
Train Case:  41 | Input/Output: [(100 -80 -42 94) -80]
Train Case:  42 | Input/Output: [(-35 -56 -2 -4) -56]
Train Case:  43 | Input/Output: [(-78 -65 -61 74) -78]
Train Case:  44 | Input/Output: [(-67 12 45 -11) -67]
Train Case:  45 | Input/Output: [(5 8 -33 -49) -49]
Train Case:  46 | Input/Output: [(93 24 -72 -53) -72]
Train Case:  47 | Input/Output: [(-95 -48 29 52) -95]
Train Case:  48 | Input/Output: [(-82 -40 91 42) -82]
Train Case:  49 | Input/Output: [(58 35 -26 74) -26]
Train Case:  50 | Input/Output: [(46 -19 -50 -69) -69]
Train Case:  51 | Input/Output: [(81 -3 -11 -89) -89]
Train Case:  52 | Input/Output: [(-40 74 63 92) -40]
Train Case:  53 | Input/Output: [(-61 89 -28 -1) -61]
Train Case:  54 | Input/Output: [(97 -78 -32 -2) -78]
Train Case:  55 | Input/Output: [(-46 -37 -6 45) -46]
Train Case:  56 | Input/Output: [(-27 -8 93 41) -27]
Train Case:  57 | Input/Output: [(-59 -52 -63 59) -63]
Train Case:  58 | Input/Output: [(72 54 45 32) 32]
Train Case:  59 | Input/Output: [(-38 -23 -41 -91) -91]
Train Case:  60 | Input/Output: [(87 53 -58 96) -58]
Train Case:  61 | Input/Output: [(-61 56 38 10) -61]
Train Case:  62 | Input/Output: [(-83 1 -71 -73) -83]
Train Case:  63 | Input/Output: [(-17 27 -2 9) -17]
Train Case:  64 | Input/Output: [(52 -76 -13 -78) -78]
Train Case:  65 | Input/Output: [(-38 90 -37 -18) -38]
Train Case:  66 | Input/Output: [(51 -62 91 -68) -68]
Train Case:  67 | Input/Output: [(41 57 2 37) 2]
Train Case:  68 | Input/Output: [(-2 -80 -60 56) -80]
Train Case:  69 | Input/Output: [(-86 47 76 -12) -86]
Train Case:  70 | Input/Output: [(-52 82 28 -64) -64]
Train Case:  71 | Input/Output: [(53 -13 -39 14) -39]
Train Case:  72 | Input/Output: [(17 2 70 25) 2]
Train Case:  73 | Input/Output: [(-96 -4 -42 63) -96]
Train Case:  74 | Input/Output: [(-91 -62 -69 8) -91]
Train Case:  75 | Input/Output: [(11 -61 80 63) -61]
Train Case:  76 | Input/Output: [(50 100 -30 -34) -34]
Train Case:  77 | Input/Output: [(24 94 70 47) 24]
Train Case:  78 | Input/Output: [(-64 -84 -15 4) -84]
Train Case:  79 | Input/Output: [(91 -2 -42 79) -42]
Train Case:  80 | Input/Output: [(46 -49 63 23) -49]
Train Case:  81 | Input/Output: [(42 -8 13 -68) -68]
Train Case:  82 | Input/Output: [(76 68 -18 -83) -83]
Train Case:  83 | Input/Output: [(76 -37 -15 -26) -37]
Train Case:  84 | Input/Output: [(-24 97 -44 97) -44]
Train Case:  85 | Input/Output: [(36 68 14 -69) -69]
Train Case:  86 | Input/Output: [(8 62 -4 -4) -4]
Train Case:  87 | Input/Output: [(-28 10 46 66) -28]
Train Case:  88 | Input/Output: [(4 59 -62 -83) -83]
Train Case:  89 | Input/Output: [(-93 -86 19 74) -93]
Train Case:  90 | Input/Output: [(38 61 64 4) 4]
Train Case:  91 | Input/Output: [(-50 -79 -63 64) -79]
Train Case:  92 | Input/Output: [(-81 -22 67 40) -81]
Train Case:  93 | Input/Output: [(-23 100 -50 -76) -76]
Train Case:  94 | Input/Output: [(99 38 -43 -32) -43]
Train Case:  95 | Input/Output: [(-13 -12 47 -86) -86]
Train Case:  96 | Input/Output: [(-92 -1 -57 63) -92]
Train Case:  97 | Input/Output: [(70 75 100 44) 44]
Train Case:  98 | Input/Output: [(-33 86 -95 -14) -95]
Train Case:  99 | Input/Output: [(-85 -74 13 -85) -85]
Test Case:   0 | Input/Output: [[77 -28 77 77] -28]
Test Case:   1 | Input/Output: [[64 6 64 64] 6]
Test Case:   2 | Input/Output: [[52 -95 -95 -95] -95]
Test Case:   3 | Input/Output: [[-63 -63 42 -63] -63]
Test Case:   4 | Input/Output: [[20 -1 -1 -1] -1]
Test Case:   5 | Input/Output: [[55 35 35 35] 35]
Test Case:   6 | Input/Output: [[26 26 13 26] 13]
Test Case:   7 | Input/Output: [[16 16 16 -84] -84]
Test Case:   8 | Input/Output: [[56 56 56 24] 24]
Test Case:   9 | Input/Output: [[-80 -80 -34 -80] -80]
Test Case:  10 | Input/Output: [[-71 -26 -71 -71] -71]
Test Case:  11 | Input/Output: [[-65 -65 -65 29] -65]
Test Case:  12 | Input/Output: [[81 24 81 81] 24]
Test Case:  13 | Input/Output: [[98 70 98 98] 70]
Test Case:  14 | Input/Output: [[-66 -66 98 -66] -66]
Test Case:  15 | Input/Output: [[13 15 15 15] 13]
Test Case:  16 | Input/Output: [[-63 -74 -63 -63] -74]
Test Case:  17 | Input/Output: [[-22 -22 -22 35] -22]
Test Case:  18 | Input/Output: [[-28 -28 8 -28] -28]
Test Case:  19 | Input/Output: [[68 68 -43 68] -43]
Test Case:  20 | Input/Output: [[-31 -31 -31 -91] -91]
Test Case:  21 | Input/Output: [[-19 -19 -86 -19] -86]
Test Case:  22 | Input/Output: [[12 -52 -52 -52] -52]
Test Case:  23 | Input/Output: [[-42 -42 -42 -46] -46]
Test Case:  24 | Input/Output: [[-96 -35 -96 -96] -96]
Test Case:  25 | Input/Output: [[-47 -47 -47 27] -47]
Test Case:  26 | Input/Output: [[72 -32 -32 -32] -32]
Test Case:  27 | Input/Output: [[0 5 5 5] 0]
Test Case:  28 | Input/Output: [[-84 -84 9 -84] -84]
Test Case:  29 | Input/Output: [[57 57 57 81] 57]
Test Case:  30 | Input/Output: [[-88 62 62 62] -88]
Test Case:  31 | Input/Output: [[19 19 19 -32] -32]
Test Case:  32 | Input/Output: [[70 70 70 -96] -96]
Test Case:  33 | Input/Output: [[-70 35 35 35] -70]
Test Case:  34 | Input/Output: [[-3 47 -3 -3] -3]
Test Case:  35 | Input/Output: [[-91 -91 31 -91] -91]
Test Case:  36 | Input/Output: [[0 0 0 -30] -30]
Test Case:  37 | Input/Output: [[5 85 85 85] 5]
Test Case:  38 | Input/Output: [[-53 -40 -53 -53] -53]
Test Case:  39 | Input/Output: [[-43 -43 -43 -35] -43]
Test Case:  40 | Input/Output: [[83 -100 -100 -100] -100]
Test Case:  41 | Input/Output: [[93 93 93 97] 93]
Test Case:  42 | Input/Output: [[18 18 18 16] 16]
Test Case:  43 | Input/Output: [[78 90 90 90] 78]
Test Case:  44 | Input/Output: [[-24 -24 -24 82] -24]
Test Case:  45 | Input/Output: [[-1 -1 -46 -1] -46]
Test Case:  46 | Input/Output: [[-28 34 -28 -28] -28]
Test Case:  47 | Input/Output: [[17 17 -8 17] -8]
Test Case:  48 | Input/Output: [[14 18 14 14] 14]
Test Case:  49 | Input/Output: [[54 54 54 29] 29]
Test Case:  50 | Input/Output: [[-85 -85 56 -85] -85]
Test Case:  51 | Input/Output: [[64 64 64 -70] -70]
Test Case:  52 | Input/Output: [[-16 -16 82 -16] -16]
Test Case:  53 | Input/Output: [[97 97 -73 97] -73]
Test Case:  54 | Input/Output: [[-23 -23 -23 -58] -58]
Test Case:  55 | Input/Output: [[46 70 46 46] 46]
Test Case:  56 | Input/Output: [[73 73 22 73] 22]
Test Case:  57 | Input/Output: [[-60 -60 -60 60] -60]
Test Case:  58 | Input/Output: [[30 -98 -98 -98] -98]
Test Case:  59 | Input/Output: [[-70 -65 -70 -70] -70]
Test Case:  60 | Input/Output: [[37 37 43 37] 37]
Test Case:  61 | Input/Output: [[82 82 82 82] 82]
Test Case:  62 | Input/Output: [[-42 -42 -30 -42] -42]
Test Case:  63 | Input/Output: [[55 -68 -68 -68] -68]
Test Case:  64 | Input/Output: [[-21 -61 -61 -61] -61]
Test Case:  65 | Input/Output: [[-28 -64 -64 -64] -64]
Test Case:  66 | Input/Output: [[11 -82 -82 -82] -82]
Test Case:  67 | Input/Output: [[-12 -12 -12 71] -12]
Test Case:  68 | Input/Output: [[74 74 -45 74] -45]
Test Case:  69 | Input/Output: [[28 -38 -38 -38] -38]
Test Case:  70 | Input/Output: [[35 35 35 -42] -42]
Test Case:  71 | Input/Output: [[92 31 92 92] 31]
Test Case:  72 | Input/Output: [[-76 -76 -100 -76] -100]
Test Case:  73 | Input/Output: [[91 -67 -67 -67] -67]
Test Case:  74 | Input/Output: [[-44 -44 -44 40] -44]
Test Case:  75 | Input/Output: [[-17 -17 -88 -17] -88]
Test Case:  76 | Input/Output: [[-91 -91 -91 -29] -91]
Test Case:  77 | Input/Output: [[44 44 31 44] 31]
Test Case:  78 | Input/Output: [[-30 -30 -30 -89] -89]
Test Case:  79 | Input/Output: [[-35 -35 39 -35] -35]
Test Case:  80 | Input/Output: [[-30 -89 -30 -30] -89]
Test Case:  81 | Input/Output: [[67 -29 67 67] -29]
Test Case:  82 | Input/Output: [[-88 -88 -88 -30] -88]
Test Case:  83 | Input/Output: [[61 61 64 61] 61]
Test Case:  84 | Input/Output: [[24 24 48 24] 24]
Test Case:  85 | Input/Output: [[90 90 90 44] 44]
Test Case:  86 | Input/Output: [[-16 -16 -16 22] -16]
Test Case:  87 | Input/Output: [[86 86 86 -35] -35]
Test Case:  88 | Input/Output: [[80 13 13 13] 13]
Test Case:  89 | Input/Output: [[13 13 -87 13] -87]
Test Case:  90 | Input/Output: [[74 74 74 -34] -34]
Test Case:  91 | Input/Output: [[-96 -96 -96 41] -96]
Test Case:  92 | Input/Output: [[88 25 88 88] 25]
Test Case:  93 | Input/Output: [[-14 48 48 48] -14]
Test Case:  94 | Input/Output: [[-49 -49 -45 -49] -49]
Test Case:  95 | Input/Output: [[-80 -80 -80 30] -80]
Test Case:  96 | Input/Output: [[-11 21 -11 -11] -11]
Test Case:  97 | Input/Output: [[49 49 -14 49] -14]
Test Case:  98 | Input/Output: [[-20 -19 -19 -19] -20]
Test Case:  99 | Input/Output: [[40 40 40 -60] -60]
Test Case: 100 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 101 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 102 | Input/Output: [(30 30 30 30) 30]
Test Case: 103 | Input/Output: [(21 21 21 21) 21]
Test Case: 104 | Input/Output: [(71 71 71 71) 71]
Test Case: 105 | Input/Output: [(55 55 55 55) 55]
Test Case: 106 | Input/Output: [(42 42 42 42) 42]
Test Case: 107 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 108 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 109 | Input/Output: [(35 35 35 35) 35]
Test Case: 110 | Input/Output: [(6 6 6 6) 6]
Test Case: 111 | Input/Output: [(98 98 98 98) 98]
Test Case: 112 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 113 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 114 | Input/Output: [(69 69 69 69) 69]
Test Case: 115 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 116 | Input/Output: [(97 97 97 97) 97]
Test Case: 117 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 118 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 119 | Input/Output: [(63 63 63 63) 63]
Test Case: 120 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 121 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 122 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 123 | Input/Output: [(84 84 84 84) 84]
Test Case: 124 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 125 | Input/Output: [(27 27 27 27) 27]
Test Case: 126 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 127 | Input/Output: [(89 89 89 89) 89]
Test Case: 128 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 129 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 130 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 131 | Input/Output: [(37 37 37 37) 37]
Test Case: 132 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 133 | Input/Output: [(69 69 69 69) 69]
Test Case: 134 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 135 | Input/Output: [(86 86 86 86) 86]
Test Case: 136 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 137 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 138 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 139 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 140 | Input/Output: [(97 97 97 97) 97]
Test Case: 141 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 142 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 143 | Input/Output: [(48 48 48 48) 48]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 146 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 147 | Input/Output: [(64 64 64 64) 64]
Test Case: 148 | Input/Output: [(8 8 8 8) 8]
Test Case: 149 | Input/Output: [(99 99 99 99) 99]
Test Case: 150 | Input/Output: [(50 50 50 50) 50]
Test Case: 151 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 152 | Input/Output: [(35 35 35 35) 35]
Test Case: 153 | Input/Output: [(46 46 46 46) 46]
Test Case: 154 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 155 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 156 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 157 | Input/Output: [(52 52 52 52) 52]
Test Case: 158 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 159 | Input/Output: [(72 72 72 72) 72]
Test Case: 160 | Input/Output: [(72 72 72 72) 72]
Test Case: 161 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 162 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 163 | Input/Output: [(39 39 39 39) 39]
Test Case: 164 | Input/Output: [(47 47 47 47) 47]
Test Case: 165 | Input/Output: [(9 9 9 9) 9]
Test Case: 166 | Input/Output: [(39 39 39 39) 39]
Test Case: 167 | Input/Output: [(21 21 21 21) 21]
Test Case: 168 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 169 | Input/Output: [(36 36 36 36) 36]
Test Case: 170 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 171 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 172 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 173 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 174 | Input/Output: [(59 59 59 59) 59]
Test Case: 175 | Input/Output: [(38 38 38 38) 38]
Test Case: 176 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 177 | Input/Output: [(13 13 13 13) 13]
Test Case: 178 | Input/Output: [(20 20 20 20) 20]
Test Case: 179 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 180 | Input/Output: [(70 70 70 70) 70]
Test Case: 181 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 182 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 183 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 184 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 185 | Input/Output: [(49 49 49 49) 49]
Test Case: 186 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 187 | Input/Output: [(65 65 65 65) 65]
Test Case: 188 | Input/Output: [(73 73 73 73) 73]
Test Case: 189 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 190 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 191 | Input/Output: [(27 27 27 27) 27]
Test Case: 192 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 193 | Input/Output: [(87 87 87 87) 87]
Test Case: 194 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 195 | Input/Output: [(40 40 40 40) 40]
Test Case: 196 | Input/Output: [(36 36 36 36) 36]
Test Case: 197 | Input/Output: [(41 41 41 41) 41]
Test Case: 198 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 199 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 200 | Input/Output: [(80 53 35 36) 35]
Test Case: 201 | Input/Output: [(77 9 18 73) 9]
Test Case: 202 | Input/Output: [(10 97 45 67) 10]
Test Case: 203 | Input/Output: [(30 95 88 33) 30]
Test Case: 204 | Input/Output: [(7 4 30 54) 4]
Test Case: 205 | Input/Output: [(90 53 67 20) 20]
Test Case: 206 | Input/Output: [(83 16 8 63) 8]
Test Case: 207 | Input/Output: [(35 32 62 27) 27]
Test Case: 208 | Input/Output: [(91 8 94 17) 8]
Test Case: 209 | Input/Output: [(26 66 93 63) 26]
Test Case: 210 | Input/Output: [(82 48 57 50) 48]
Test Case: 211 | Input/Output: [(15 18 55 85) 15]
Test Case: 212 | Input/Output: [(68 26 70 22) 22]
Test Case: 213 | Input/Output: [(80 24 40 5) 5]
Test Case: 214 | Input/Output: [(37 34 90 5) 5]
Test Case: 215 | Input/Output: [(4 93 34 40) 4]
Test Case: 216 | Input/Output: [(30 24 90 92) 24]
Test Case: 217 | Input/Output: [(66 99 51 69) 51]
Test Case: 218 | Input/Output: [(71 92 74 73) 71]
Test Case: 219 | Input/Output: [(32 73 75 39) 32]
Test Case: 220 | Input/Output: [(23 27 62 73) 23]
Test Case: 221 | Input/Output: [(98 7 52 86) 7]
Test Case: 222 | Input/Output: [(48 89 10 2) 2]
Test Case: 223 | Input/Output: [(85 17 29 8) 8]
Test Case: 224 | Input/Output: [(38 96 85 75) 38]
Test Case: 225 | Input/Output: [(43 54 72 53) 43]
Test Case: 226 | Input/Output: [(23 20 41 13) 13]
Test Case: 227 | Input/Output: [(37 2 15 84) 2]
Test Case: 228 | Input/Output: [(5 64 18 34) 5]
Test Case: 229 | Input/Output: [(5 16 74 96) 5]
Test Case: 230 | Input/Output: [(78 34 26 17) 17]
Test Case: 231 | Input/Output: [(80 38 40 47) 38]
Test Case: 232 | Input/Output: [(10 98 27 91) 10]
Test Case: 233 | Input/Output: [(25 70 31 81) 25]
Test Case: 234 | Input/Output: [(54 86 16 91) 16]
Test Case: 235 | Input/Output: [(30 53 0 64) 0]
Test Case: 236 | Input/Output: [(34 31 39 6) 6]
Test Case: 237 | Input/Output: [(48 82 39 26) 26]
Test Case: 238 | Input/Output: [(63 8 97 9) 8]
Test Case: 239 | Input/Output: [(99 53 13 17) 13]
Test Case: 240 | Input/Output: [(2 71 27 15) 2]
Test Case: 241 | Input/Output: [(8 49 11 58) 8]
Test Case: 242 | Input/Output: [(81 46 42 18) 18]
Test Case: 243 | Input/Output: [(23 74 76 25) 23]
Test Case: 244 | Input/Output: [(17 10 39 81) 10]
Test Case: 245 | Input/Output: [(1 69 19 30) 1]
Test Case: 246 | Input/Output: [(25 79 9 22) 9]
Test Case: 247 | Input/Output: [(13 58 43 48) 13]
Test Case: 248 | Input/Output: [(98 13 82 74) 13]
Test Case: 249 | Input/Output: [(20 67 13 37) 13]
Test Case: 250 | Input/Output: [(13 82 69 84) 13]
Test Case: 251 | Input/Output: [(5 83 44 54) 5]
Test Case: 252 | Input/Output: [(94 30 97 96) 30]
Test Case: 253 | Input/Output: [(77 77 60 44) 44]
Test Case: 254 | Input/Output: [(93 86 42 91) 42]
Test Case: 255 | Input/Output: [(79 61 49 16) 16]
Test Case: 256 | Input/Output: [(100 55 60 91) 55]
Test Case: 257 | Input/Output: [(24 35 65 93) 24]
Test Case: 258 | Input/Output: [(45 98 67 57) 45]
Test Case: 259 | Input/Output: [(10 18 92 9) 9]
Test Case: 260 | Input/Output: [(87 78 4 13) 4]
Test Case: 261 | Input/Output: [(27 33 58 95) 27]
Test Case: 262 | Input/Output: [(76 89 80 36) 36]
Test Case: 263 | Input/Output: [(18 45 89 100) 18]
Test Case: 264 | Input/Output: [(11 58 36 22) 11]
Test Case: 265 | Input/Output: [(57 6 47 54) 6]
Test Case: 266 | Input/Output: [(34 11 85 34) 11]
Test Case: 267 | Input/Output: [(99 4 70 40) 4]
Test Case: 268 | Input/Output: [(32 3 30 93) 3]
Test Case: 269 | Input/Output: [(81 67 48 54) 48]
Test Case: 270 | Input/Output: [(54 53 77 2) 2]
Test Case: 271 | Input/Output: [(59 35 37 81) 35]
Test Case: 272 | Input/Output: [(64 64 54 79) 54]
Test Case: 273 | Input/Output: [(20 32 97 49) 20]
Test Case: 274 | Input/Output: [(15 87 64 93) 15]
Test Case: 275 | Input/Output: [(27 28 41 60) 27]
Test Case: 276 | Input/Output: [(15 99 46 29) 15]
Test Case: 277 | Input/Output: [(27 85 80 39) 27]
Test Case: 278 | Input/Output: [(90 40 34 32) 32]
Test Case: 279 | Input/Output: [(58 15 75 20) 15]
Test Case: 280 | Input/Output: [(42 18 86 76) 18]
Test Case: 281 | Input/Output: [(37 84 70 16) 16]
Test Case: 282 | Input/Output: [(36 65 24 17) 17]
Test Case: 283 | Input/Output: [(53 88 66 61) 53]
Test Case: 284 | Input/Output: [(46 97 3 36) 3]
Test Case: 285 | Input/Output: [(9 74 29 22) 9]
Test Case: 286 | Input/Output: [(76 12 56 8) 8]
Test Case: 287 | Input/Output: [(30 59 73 9) 9]
Test Case: 288 | Input/Output: [(86 98 14 74) 14]
Test Case: 289 | Input/Output: [(70 49 79 51) 49]
Test Case: 290 | Input/Output: [(44 30 36 5) 5]
Test Case: 291 | Input/Output: [(9 52 65 20) 9]
Test Case: 292 | Input/Output: [(18 72 87 78) 18]
Test Case: 293 | Input/Output: [(60 20 23 19) 19]
Test Case: 294 | Input/Output: [(25 45 28 0) 0]
Test Case: 295 | Input/Output: [(21 89 69 85) 21]
Test Case: 296 | Input/Output: [(27 13 55 17) 13]
Test Case: 297 | Input/Output: [(52 45 68 56) 45]
Test Case: 298 | Input/Output: [(10 67 51 45) 10]
Test Case: 299 | Input/Output: [(11 16 66 64) 11]
Test Case: 300 | Input/Output: [(45 39 14 92) 14]
Test Case: 301 | Input/Output: [(93 88 3 99) 3]
Test Case: 302 | Input/Output: [(40 50 62 35) 35]
Test Case: 303 | Input/Output: [(93 21 91 31) 21]
Test Case: 304 | Input/Output: [(78 95 83 28) 28]
Test Case: 305 | Input/Output: [(53 25 40 42) 25]
Test Case: 306 | Input/Output: [(33 28 51 68) 28]
Test Case: 307 | Input/Output: [(92 94 90 17) 17]
Test Case: 308 | Input/Output: [(64 52 36 60) 36]
Test Case: 309 | Input/Output: [(41 35 3 13) 3]
Test Case: 310 | Input/Output: [(32 9 78 35) 9]
Test Case: 311 | Input/Output: [(66 12 28 64) 12]
Test Case: 312 | Input/Output: [(94 70 6 8) 6]
Test Case: 313 | Input/Output: [(41 10 41 9) 9]
Test Case: 314 | Input/Output: [(66 76 36 42) 36]
Test Case: 315 | Input/Output: [(45 84 76 65) 45]
Test Case: 316 | Input/Output: [(66 14 8 26) 8]
Test Case: 317 | Input/Output: [(94 87 0 43) 0]
Test Case: 318 | Input/Output: [(90 31 73 17) 17]
Test Case: 319 | Input/Output: [(98 68 76 45) 45]
Test Case: 320 | Input/Output: [(67 95 17 47) 17]
Test Case: 321 | Input/Output: [(44 39 40 0) 0]
Test Case: 322 | Input/Output: [(92 65 73 6) 6]
Test Case: 323 | Input/Output: [(83 72 26 48) 26]
Test Case: 324 | Input/Output: [(79 64 44 88) 44]
Test Case: 325 | Input/Output: [(34 54 11 81) 11]
Test Case: 326 | Input/Output: [(84 38 3 61) 3]
Test Case: 327 | Input/Output: [(39 14 6 14) 6]
Test Case: 328 | Input/Output: [(95 90 94 98) 90]
Test Case: 329 | Input/Output: [(36 20 29 64) 20]
Test Case: 330 | Input/Output: [(81 74 84 34) 34]
Test Case: 331 | Input/Output: [(94 92 45 33) 33]
Test Case: 332 | Input/Output: [(36 24 36 94) 24]
Test Case: 333 | Input/Output: [(88 7 5 58) 5]
Test Case: 334 | Input/Output: [(29 78 70 57) 29]
Test Case: 335 | Input/Output: [(5 42 60 0) 0]
Test Case: 336 | Input/Output: [(28 26 76 74) 26]
Test Case: 337 | Input/Output: [(8 67 32 38) 8]
Test Case: 338 | Input/Output: [(81 97 71 86) 71]
Test Case: 339 | Input/Output: [(54 81 11 58) 11]
Test Case: 340 | Input/Output: [(73 62 35 73) 35]
Test Case: 341 | Input/Output: [(55 79 11 87) 11]
Test Case: 342 | Input/Output: [(10 42 33 85) 10]
Test Case: 343 | Input/Output: [(22 98 35 96) 22]
Test Case: 344 | Input/Output: [(21 93 41 62) 21]
Test Case: 345 | Input/Output: [(32 4 81 84) 4]
Test Case: 346 | Input/Output: [(95 88 73 38) 38]
Test Case: 347 | Input/Output: [(12 36 92 69) 12]
Test Case: 348 | Input/Output: [(54 59 69 6) 6]
Test Case: 349 | Input/Output: [(86 45 20 39) 20]
Test Case: 350 | Input/Output: [(26 24 85 38) 24]
Test Case: 351 | Input/Output: [(96 40 22 81) 22]
Test Case: 352 | Input/Output: [(89 19 92 32) 19]
Test Case: 353 | Input/Output: [(97 1 62 91) 1]
Test Case: 354 | Input/Output: [(22 81 87 75) 22]
Test Case: 355 | Input/Output: [(31 14 28 12) 12]
Test Case: 356 | Input/Output: [(87 91 14 56) 14]
Test Case: 357 | Input/Output: [(45 0 73 63) 0]
Test Case: 358 | Input/Output: [(5 67 39 31) 5]
Test Case: 359 | Input/Output: [(40 36 3 71) 3]
Test Case: 360 | Input/Output: [(76 23 94 100) 23]
Test Case: 361 | Input/Output: [(82 89 45 36) 36]
Test Case: 362 | Input/Output: [(62 23 1 82) 1]
Test Case: 363 | Input/Output: [(66 79 7 52) 7]
Test Case: 364 | Input/Output: [(41 85 29 38) 29]
Test Case: 365 | Input/Output: [(8 54 4 24) 4]
Test Case: 366 | Input/Output: [(98 14 74 27) 14]
Test Case: 367 | Input/Output: [(10 51 33 65) 10]
Test Case: 368 | Input/Output: [(71 45 11 84) 11]
Test Case: 369 | Input/Output: [(53 34 79 26) 26]
Test Case: 370 | Input/Output: [(53 38 15 46) 15]
Test Case: 371 | Input/Output: [(69 21 66 6) 6]
Test Case: 372 | Input/Output: [(67 3 9 13) 3]
Test Case: 373 | Input/Output: [(56 53 38 71) 38]
Test Case: 374 | Input/Output: [(15 84 77 18) 15]
Test Case: 375 | Input/Output: [(8 0 34 14) 0]
Test Case: 376 | Input/Output: [(65 52 60 35) 35]
Test Case: 377 | Input/Output: [(69 32 37 46) 32]
Test Case: 378 | Input/Output: [(61 2 50 25) 2]
Test Case: 379 | Input/Output: [(22 100 6 77) 6]
Test Case: 380 | Input/Output: [(16 34 65 72) 16]
Test Case: 381 | Input/Output: [(48 86 13 71) 13]
Test Case: 382 | Input/Output: [(94 93 21 91) 21]
Test Case: 383 | Input/Output: [(18 43 22 21) 18]
Test Case: 384 | Input/Output: [(31 67 31 4) 4]
Test Case: 385 | Input/Output: [(54 1 66 22) 1]
Test Case: 386 | Input/Output: [(32 34 73 4) 4]
Test Case: 387 | Input/Output: [(36 71 51 30) 30]
Test Case: 388 | Input/Output: [(15 39 67 80) 15]
Test Case: 389 | Input/Output: [(92 75 59 32) 32]
Test Case: 390 | Input/Output: [(83 71 57 93) 57]
Test Case: 391 | Input/Output: [(96 29 67 30) 29]
Test Case: 392 | Input/Output: [(10 63 24 96) 10]
Test Case: 393 | Input/Output: [(71 69 68 11) 11]
Test Case: 394 | Input/Output: [(3 3 81 15) 3]
Test Case: 395 | Input/Output: [(3 84 59 30) 3]
Test Case: 396 | Input/Output: [(57 78 25 53) 25]
Test Case: 397 | Input/Output: [(84 61 33 48) 33]
Test Case: 398 | Input/Output: [(65 21 20 69) 20]
Test Case: 399 | Input/Output: [(17 79 9 36) 9]
Test Case: 400 | Input/Output: [(87 52 -70 -65) -70]
Test Case: 401 | Input/Output: [(91 -76 69 -75) -76]
Test Case: 402 | Input/Output: [(44 -33 -57 -68) -68]
Test Case: 403 | Input/Output: [(87 32 -73 81) -73]
Test Case: 404 | Input/Output: [(-14 25 -39 13) -39]
Test Case: 405 | Input/Output: [(-75 -25 -35 -46) -75]
Test Case: 406 | Input/Output: [(-92 65 -39 -32) -92]
Test Case: 407 | Input/Output: [(47 -55 56 -79) -79]
Test Case: 408 | Input/Output: [(-33 3 98 55) -33]
Test Case: 409 | Input/Output: [(-11 70 -78 49) -78]
Test Case: 410 | Input/Output: [(-97 -61 -71 80) -97]
Test Case: 411 | Input/Output: [(91 -38 -25 -6) -38]
Test Case: 412 | Input/Output: [(-14 46 54 84) -14]
Test Case: 413 | Input/Output: [(-89 -72 -17 -38) -89]
Test Case: 414 | Input/Output: [(-54 55 -47 73) -54]
Test Case: 415 | Input/Output: [(-34 86 62 53) -34]
Test Case: 416 | Input/Output: [(-63 22 90 -13) -63]
Test Case: 417 | Input/Output: [(-4 -46 -79 -36) -79]
Test Case: 418 | Input/Output: [(-39 37 -58 -10) -58]
Test Case: 419 | Input/Output: [(-65 -2 91 97) -65]
Test Case: 420 | Input/Output: [(80 -78 -96 19) -96]
Test Case: 421 | Input/Output: [(-40 -3 93 -49) -49]
Test Case: 422 | Input/Output: [(-30 -71 -92 30) -92]
Test Case: 423 | Input/Output: [(-41 -83 95 -95) -95]
Test Case: 424 | Input/Output: [(39 -31 61 12) -31]
Test Case: 425 | Input/Output: [(89 51 85 8) 8]
Test Case: 426 | Input/Output: [(-7 -66 87 -53) -66]
Test Case: 427 | Input/Output: [(58 -21 -59 -89) -89]
Test Case: 428 | Input/Output: [(-96 11 13 -93) -96]
Test Case: 429 | Input/Output: [(-72 -59 69 -88) -88]
Test Case: 430 | Input/Output: [(-92 -22 -12 -11) -92]
Test Case: 431 | Input/Output: [(-87 43 45 -74) -87]
Test Case: 432 | Input/Output: [(35 7 -83 -74) -83]
Test Case: 433 | Input/Output: [(-82 79 -57 -99) -99]
Test Case: 434 | Input/Output: [(-42 -88 8 3) -88]
Test Case: 435 | Input/Output: [(9 53 11 63) 9]
Test Case: 436 | Input/Output: [(-84 82 -83 -70) -84]
Test Case: 437 | Input/Output: [(77 16 53 13) 13]
Test Case: 438 | Input/Output: [(34 -76 92 -12) -76]
Test Case: 439 | Input/Output: [(-82 67 66 -11) -82]
Test Case: 440 | Input/Output: [(-39 87 -17 10) -39]
Test Case: 441 | Input/Output: [(-37 -16 -70 36) -70]
Test Case: 442 | Input/Output: [(-99 39 -78 87) -99]
Test Case: 443 | Input/Output: [(84 73 -70 77) -70]
Test Case: 444 | Input/Output: [(-13 47 -59 4) -59]
Test Case: 445 | Input/Output: [(89 -44 -84 70) -84]
Test Case: 446 | Input/Output: [(10 72 -1 -74) -74]
Test Case: 447 | Input/Output: [(-27 86 -5 68) -27]
Test Case: 448 | Input/Output: [(-90 -61 -26 -60) -90]
Test Case: 449 | Input/Output: [(75 -11 -64 29) -64]
Test Case: 450 | Input/Output: [(96 -90 80 87) -90]
Test Case: 451 | Input/Output: [(48 -17 -6 -39) -39]
Test Case: 452 | Input/Output: [(94 -45 -57 15) -57]
Test Case: 453 | Input/Output: [(33 -66 -13 -53) -66]
Test Case: 454 | Input/Output: [(55 96 -12 -84) -84]
Test Case: 455 | Input/Output: [(-49 -59 75 -42) -59]
Test Case: 456 | Input/Output: [(-46 36 16 -76) -76]
Test Case: 457 | Input/Output: [(27 -37 27 24) -37]
Test Case: 458 | Input/Output: [(67 88 -73 -48) -73]
Test Case: 459 | Input/Output: [(62 55 28 -56) -56]
Test Case: 460 | Input/Output: [(98 -23 -100 -39) -100]
Test Case: 461 | Input/Output: [(84 100 -81 46) -81]
Test Case: 462 | Input/Output: [(59 -18 64 -79) -79]
Test Case: 463 | Input/Output: [(-3 -40 -42 60) -42]
Test Case: 464 | Input/Output: [(13 -44 74 -63) -63]
Test Case: 465 | Input/Output: [(-32 7 -96 83) -96]
Test Case: 466 | Input/Output: [(23 -99 34 44) -99]
Test Case: 467 | Input/Output: [(14 -9 -44 70) -44]
Test Case: 468 | Input/Output: [(-11 -41 95 -17) -41]
Test Case: 469 | Input/Output: [(-45 -23 -88 44) -88]
Test Case: 470 | Input/Output: [(24 -59 -50 -92) -92]
Test Case: 471 | Input/Output: [(37 30 -53 -32) -53]
Test Case: 472 | Input/Output: [(71 -65 96 -78) -78]
Test Case: 473 | Input/Output: [(-47 28 32 12) -47]
Test Case: 474 | Input/Output: [(83 83 33 -11) -11]
Test Case: 475 | Input/Output: [(-32 -98 -50 -58) -98]
Test Case: 476 | Input/Output: [(33 53 51 -23) -23]
Test Case: 477 | Input/Output: [(-11 -75 -15 -87) -87]
Test Case: 478 | Input/Output: [(-67 -56 14 -2) -67]
Test Case: 479 | Input/Output: [(82 12 43 42) 12]
Test Case: 480 | Input/Output: [(-18 24 53 -67) -67]
Test Case: 481 | Input/Output: [(41 -11 98 -93) -93]
Test Case: 482 | Input/Output: [(32 11 -54 9) -54]
Test Case: 483 | Input/Output: [(-60 -47 -92 -95) -95]
Test Case: 484 | Input/Output: [(-39 -98 65 55) -98]
Test Case: 485 | Input/Output: [(54 -49 -93 -20) -93]
Test Case: 486 | Input/Output: [(-96 -96 -80 5) -96]
Test Case: 487 | Input/Output: [(88 19 89 -45) -45]
Test Case: 488 | Input/Output: [(59 -25 -35 29) -35]
Test Case: 489 | Input/Output: [(-76 -34 11 76) -76]
Test Case: 490 | Input/Output: [(-18 44 11 4) -18]
Test Case: 491 | Input/Output: [(-96 -100 76 -85) -100]
Test Case: 492 | Input/Output: [(92 93 -72 -94) -94]
Test Case: 493 | Input/Output: [(85 -88 40 4) -88]
Test Case: 494 | Input/Output: [(-35 -33 19 -22) -35]
Test Case: 495 | Input/Output: [(48 -8 -56 56) -56]
Test Case: 496 | Input/Output: [(-56 1 62 -90) -90]
Test Case: 497 | Input/Output: [(-97 6 -11 -77) -97]
Test Case: 498 | Input/Output: [(42 -98 20 83) -98]
Test Case: 499 | Input/Output: [(27 -19 -6 66) -19]
Test Case: 500 | Input/Output: [(-74 29 47 36) -74]
Test Case: 501 | Input/Output: [(-2 -70 -26 100) -70]
Test Case: 502 | Input/Output: [(62 34 68 52) 34]
Test Case: 503 | Input/Output: [(-68 25 6 -56) -68]
Test Case: 504 | Input/Output: [(-80 35 -35 84) -80]
Test Case: 505 | Input/Output: [(29 56 -8 34) -8]
Test Case: 506 | Input/Output: [(89 29 -41 51) -41]
Test Case: 507 | Input/Output: [(-79 -6 -60 49) -79]
Test Case: 508 | Input/Output: [(25 69 -15 5) -15]
Test Case: 509 | Input/Output: [(-26 -7 18 22) -26]
Test Case: 510 | Input/Output: [(-45 0 -70 -39) -70]
Test Case: 511 | Input/Output: [(-26 -18 -17 56) -26]
Test Case: 512 | Input/Output: [(-75 -23 19 -13) -75]
Test Case: 513 | Input/Output: [(29 93 43 15) 15]
Test Case: 514 | Input/Output: [(52 -25 -21 95) -25]
Test Case: 515 | Input/Output: [(40 -14 -89 -73) -89]
Test Case: 516 | Input/Output: [(-41 21 45 4) -41]
Test Case: 517 | Input/Output: [(-14 -36 45 100) -36]
Test Case: 518 | Input/Output: [(-72 -66 -45 -16) -72]
Test Case: 519 | Input/Output: [(-75 -71 -94 9) -94]
Test Case: 520 | Input/Output: [(94 -47 -91 -27) -91]
Test Case: 521 | Input/Output: [(-76 49 8 -64) -76]
Test Case: 522 | Input/Output: [(47 -62 100 -70) -70]
Test Case: 523 | Input/Output: [(-18 60 -96 -67) -96]
Test Case: 524 | Input/Output: [(-24 -9 -38 87) -38]
Test Case: 525 | Input/Output: [(-12 -28 67 45) -28]
Test Case: 526 | Input/Output: [(-14 42 -98 -74) -98]
Test Case: 527 | Input/Output: [(70 -94 97 43) -94]
Test Case: 528 | Input/Output: [(-84 -51 78 35) -84]
Test Case: 529 | Input/Output: [(64 -82 78 -24) -82]
Test Case: 530 | Input/Output: [(54 -62 -13 40) -62]
Test Case: 531 | Input/Output: [(8 -44 -15 -2) -44]
Test Case: 532 | Input/Output: [(-33 -57 34 19) -57]
Test Case: 533 | Input/Output: [(-95 -88 61 -54) -95]
Test Case: 534 | Input/Output: [(-82 -45 -77 74) -82]
Test Case: 535 | Input/Output: [(95 -100 -10 -26) -100]
Test Case: 536 | Input/Output: [(-97 -41 -4 0) -97]
Test Case: 537 | Input/Output: [(-1 -93 -77 -70) -93]
Test Case: 538 | Input/Output: [(29 0 -10 -26) -26]
Test Case: 539 | Input/Output: [(-70 -64 -66 -89) -89]
Test Case: 540 | Input/Output: [(43 -81 -31 -34) -81]
Test Case: 541 | Input/Output: [(48 47 -77 -86) -86]
Test Case: 542 | Input/Output: [(69 -98 -74 -3) -98]
Test Case: 543 | Input/Output: [(33 -57 -52 42) -57]
Test Case: 544 | Input/Output: [(-22 38 48 48) -22]
Test Case: 545 | Input/Output: [(-9 13 -65 84) -65]
Test Case: 546 | Input/Output: [(-15 -69 -14 31) -69]
Test Case: 547 | Input/Output: [(3 -73 -4 86) -73]
Test Case: 548 | Input/Output: [(-34 -79 85 12) -79]
Test Case: 549 | Input/Output: [(25 94 48 -89) -89]
Test Case: 550 | Input/Output: [(-64 -95 75 80) -95]
Test Case: 551 | Input/Output: [(82 -65 56 86) -65]
Test Case: 552 | Input/Output: [(-17 -41 -33 5) -41]
Test Case: 553 | Input/Output: [(-8 51 -66 98) -66]
Test Case: 554 | Input/Output: [(-85 48 -63 74) -85]
Test Case: 555 | Input/Output: [(67 23 -28 -71) -71]
Test Case: 556 | Input/Output: [(93 -91 75 42) -91]
Test Case: 557 | Input/Output: [(32 -44 2 57) -44]
Test Case: 558 | Input/Output: [(10 32 52 8) 8]
Test Case: 559 | Input/Output: [(12 -65 1 -61) -65]
Test Case: 560 | Input/Output: [(-32 17 84 -66) -66]
Test Case: 561 | Input/Output: [(92 8 38 72) 8]
Test Case: 562 | Input/Output: [(52 64 -69 26) -69]
Test Case: 563 | Input/Output: [(-71 -18 76 -11) -71]
Test Case: 564 | Input/Output: [(47 17 22 -52) -52]
Test Case: 565 | Input/Output: [(-47 -79 -83 -87) -87]
Test Case: 566 | Input/Output: [(-76 -52 -15 -27) -76]
Test Case: 567 | Input/Output: [(-94 35 -23 34) -94]
Test Case: 568 | Input/Output: [(39 -66 -29 63) -66]
Test Case: 569 | Input/Output: [(19 99 99 91) 19]
Test Case: 570 | Input/Output: [(-51 93 68 67) -51]
Test Case: 571 | Input/Output: [(-55 20 -74 3) -74]
Test Case: 572 | Input/Output: [(-59 2 52 -82) -82]
Test Case: 573 | Input/Output: [(3 -10 -54 -43) -54]
Test Case: 574 | Input/Output: [(56 94 -52 -20) -52]
Test Case: 575 | Input/Output: [(-45 -95 8 38) -95]
Test Case: 576 | Input/Output: [(-77 -42 -16 29) -77]
Test Case: 577 | Input/Output: [(-37 46 -85 2) -85]
Test Case: 578 | Input/Output: [(63 -11 12 -80) -80]
Test Case: 579 | Input/Output: [(53 5 -99 -36) -99]
Test Case: 580 | Input/Output: [(-68 10 -66 59) -68]
Test Case: 581 | Input/Output: [(-73 92 62 61) -73]
Test Case: 582 | Input/Output: [(-59 39 75 -42) -59]
Test Case: 583 | Input/Output: [(66 46 25 69) 25]
Test Case: 584 | Input/Output: [(-45 75 11 18) -45]
Test Case: 585 | Input/Output: [(-79 -88 -35 -14) -88]
Test Case: 586 | Input/Output: [(41 -49 -14 61) -49]
Test Case: 587 | Input/Output: [(-57 64 -30 42) -57]
Test Case: 588 | Input/Output: [(-56 42 -18 91) -56]
Test Case: 589 | Input/Output: [(35 -97 23 -21) -97]
Test Case: 590 | Input/Output: [(-99 69 90 -87) -99]
Test Case: 591 | Input/Output: [(89 4 53 40) 4]
Test Case: 592 | Input/Output: [(-9 77 -37 -62) -62]
Test Case: 593 | Input/Output: [(67 -1 -69 -25) -69]
Test Case: 594 | Input/Output: [(77 95 89 -95) -95]
Test Case: 595 | Input/Output: [(67 -42 59 89) -42]
Test Case: 596 | Input/Output: [(-70 -92 70 54) -92]
Test Case: 597 | Input/Output: [(20 -52 -40 -39) -52]
Test Case: 598 | Input/Output: [(30 -9 -47 -60) -60]
Test Case: 599 | Input/Output: [(-93 4 -85 21) -93]
Test Case: 600 | Input/Output: [(32 51 22 38) 22]
Test Case: 601 | Input/Output: [(-32 11 -25 -83) -83]
Test Case: 602 | Input/Output: [(29 91 21 -12) -12]
Test Case: 603 | Input/Output: [(43 -35 -76 1) -76]
Test Case: 604 | Input/Output: [(-55 -94 86 80) -94]
Test Case: 605 | Input/Output: [(85 -71 56 88) -71]
Test Case: 606 | Input/Output: [(-100 -44 -1 -75) -100]
Test Case: 607 | Input/Output: [(-75 92 -37 -100) -100]
Test Case: 608 | Input/Output: [(50 62 -21 85) -21]
Test Case: 609 | Input/Output: [(-91 85 -28 3) -91]
Test Case: 610 | Input/Output: [(12 -53 43 58) -53]
Test Case: 611 | Input/Output: [(21 40 -33 -58) -58]
Test Case: 612 | Input/Output: [(81 -23 -44 2) -44]
Test Case: 613 | Input/Output: [(32 30 57 49) 30]
Test Case: 614 | Input/Output: [(73 66 92 70) 66]
Test Case: 615 | Input/Output: [(77 43 -57 91) -57]
Test Case: 616 | Input/Output: [(71 93 -75 78) -75]
Test Case: 617 | Input/Output: [(0 -1 24 -37) -37]
Test Case: 618 | Input/Output: [(-52 -65 -88 14) -88]
Test Case: 619 | Input/Output: [(86 72 -59 54) -59]
Test Case: 620 | Input/Output: [(-9 33 -72 -60) -72]
Test Case: 621 | Input/Output: [(72 -3 -32 -44) -44]
Test Case: 622 | Input/Output: [(-70 -36 55 -67) -70]
Test Case: 623 | Input/Output: [(79 -49 -21 15) -49]
Test Case: 624 | Input/Output: [(-23 -87 -28 -5) -87]
Test Case: 625 | Input/Output: [(51 -43 59 29) -43]
Test Case: 626 | Input/Output: [(-6 -38 47 74) -38]
Test Case: 627 | Input/Output: [(-90 55 57 63) -90]
Test Case: 628 | Input/Output: [(-54 66 77 31) -54]
Test Case: 629 | Input/Output: [(73 -70 -97 94) -97]
Test Case: 630 | Input/Output: [(-34 69 -4 -87) -87]
Test Case: 631 | Input/Output: [(-84 92 -39 -67) -84]
Test Case: 632 | Input/Output: [(70 13 27 -78) -78]
Test Case: 633 | Input/Output: [(20 -56 -80 58) -80]
Test Case: 634 | Input/Output: [(-91 84 -76 46) -91]
Test Case: 635 | Input/Output: [(-66 88 -92 66) -92]
Test Case: 636 | Input/Output: [(52 25 45 -58) -58]
Test Case: 637 | Input/Output: [(70 4 70 -67) -67]
Test Case: 638 | Input/Output: [(-60 -26 -30 -91) -91]
Test Case: 639 | Input/Output: [(8 -91 -73 85) -91]
Test Case: 640 | Input/Output: [(-36 -2 -84 41) -84]
Test Case: 641 | Input/Output: [(69 62 -72 -2) -72]
Test Case: 642 | Input/Output: [(82 -40 -30 81) -40]
Test Case: 643 | Input/Output: [(-21 -85 59 69) -85]
Test Case: 644 | Input/Output: [(-89 -45 30 -97) -97]
Test Case: 645 | Input/Output: [(60 87 -53 -67) -67]
Test Case: 646 | Input/Output: [(89 -25 78 97) -25]
Test Case: 647 | Input/Output: [(22 97 66 56) 22]
Test Case: 648 | Input/Output: [(11 -33 54 -16) -33]
Test Case: 649 | Input/Output: [(76 76 -76 69) -76]
Test Case: 650 | Input/Output: [(-3 -52 -98 24) -98]
Test Case: 651 | Input/Output: [(45 35 99 -68) -68]
Test Case: 652 | Input/Output: [(27 67 92 -48) -48]
Test Case: 653 | Input/Output: [(21 77 -5 -92) -92]
Test Case: 654 | Input/Output: [(-99 27 -52 56) -99]
Test Case: 655 | Input/Output: [(40 69 41 72) 40]
Test Case: 656 | Input/Output: [(-3 -59 64 85) -59]
Test Case: 657 | Input/Output: [(-49 81 -68 74) -68]
Test Case: 658 | Input/Output: [(45 -89 11 -43) -89]
Test Case: 659 | Input/Output: [(13 -62 44 -27) -62]
Test Case: 660 | Input/Output: [(62 -86 -26 45) -86]
Test Case: 661 | Input/Output: [(64 29 -45 -97) -97]
Test Case: 662 | Input/Output: [(22 2 4 56) 2]
Test Case: 663 | Input/Output: [(37 -97 70 -66) -97]
Test Case: 664 | Input/Output: [(-54 -7 98 -87) -87]
Test Case: 665 | Input/Output: [(24 94 48 -50) -50]
Test Case: 666 | Input/Output: [(69 65 91 69) 65]
Test Case: 667 | Input/Output: [(-87 -72 -96 -94) -96]
Test Case: 668 | Input/Output: [(-56 55 10 98) -56]
Test Case: 669 | Input/Output: [(-29 63 91 25) -29]
Test Case: 670 | Input/Output: [(63 86 47 -53) -53]
Test Case: 671 | Input/Output: [(-95 -56 -46 24) -95]
Test Case: 672 | Input/Output: [(15 28 61 -86) -86]
Test Case: 673 | Input/Output: [(-57 -50 -18 -74) -74]
Test Case: 674 | Input/Output: [(-91 83 99 -26) -91]
Test Case: 675 | Input/Output: [(39 -58 -70 -49) -70]
Test Case: 676 | Input/Output: [(-58 -31 -14 -42) -58]
Test Case: 677 | Input/Output: [(31 -38 -3 -49) -49]
Test Case: 678 | Input/Output: [(-13 -4 47 65) -13]
Test Case: 679 | Input/Output: [(4 -3 94 95) -3]
Test Case: 680 | Input/Output: [(-94 49 90 -95) -95]
Test Case: 681 | Input/Output: [(33 51 76 -7) -7]
Test Case: 682 | Input/Output: [(3 94 86 33) 3]
Test Case: 683 | Input/Output: [(54 82 0 32) 0]
Test Case: 684 | Input/Output: [(79 92 37 92) 37]
Test Case: 685 | Input/Output: [(50 -94 -90 -18) -94]
Test Case: 686 | Input/Output: [(80 -3 -11 -21) -21]
Test Case: 687 | Input/Output: [(-56 57 -97 -70) -97]
Test Case: 688 | Input/Output: [(58 -55 57 86) -55]
Test Case: 689 | Input/Output: [(64 6 86 57) 6]
Test Case: 690 | Input/Output: [(-74 3 -28 -47) -74]
Test Case: 691 | Input/Output: [(-77 -70 -19 -66) -77]
Test Case: 692 | Input/Output: [(20 28 94 75) 20]
Test Case: 693 | Input/Output: [(94 78 -73 46) -73]
Test Case: 694 | Input/Output: [(-24 -93 -26 -28) -93]
Test Case: 695 | Input/Output: [(-80 -1 -62 -90) -90]
Test Case: 696 | Input/Output: [(16 -83 36 -5) -83]
Test Case: 697 | Input/Output: [(8 19 42 -16) -16]
Test Case: 698 | Input/Output: [(-56 -6 62 -94) -94]
Test Case: 699 | Input/Output: [(-74 61 -62 56) -74]
Test Case: 700 | Input/Output: [(-91 -33 -44 -58) -91]
Test Case: 701 | Input/Output: [(-18 -12 -28 73) -28]
Test Case: 702 | Input/Output: [(6 48 22 -11) -11]
Test Case: 703 | Input/Output: [(-32 85 -7 67) -32]
Test Case: 704 | Input/Output: [(9 -81 -21 -16) -81]
Test Case: 705 | Input/Output: [(-79 84 74 8) -79]
Test Case: 706 | Input/Output: [(-66 20 31 -27) -66]
Test Case: 707 | Input/Output: [(-98 100 -59 42) -98]
Test Case: 708 | Input/Output: [(-17 62 -81 74) -81]
Test Case: 709 | Input/Output: [(-74 -39 35 -33) -74]
Test Case: 710 | Input/Output: [(-97 57 -21 -69) -97]
Test Case: 711 | Input/Output: [(-32 15 53 38) -32]
Test Case: 712 | Input/Output: [(-50 8 -66 50) -66]
Test Case: 713 | Input/Output: [(13 47 -36 -18) -36]
Test Case: 714 | Input/Output: [(-79 -63 22 38) -79]
Test Case: 715 | Input/Output: [(-82 -52 66 -45) -82]
Test Case: 716 | Input/Output: [(-70 -7 60 68) -70]
Test Case: 717 | Input/Output: [(27 -20 18 25) -20]
Test Case: 718 | Input/Output: [(-54 -25 -56 -47) -56]
Test Case: 719 | Input/Output: [(36 -37 -93 30) -93]
Test Case: 720 | Input/Output: [(-80 22 46 -16) -80]
Test Case: 721 | Input/Output: [(83 76 5 40) 5]
Test Case: 722 | Input/Output: [(77 19 -37 40) -37]
Test Case: 723 | Input/Output: [(6 -7 41 86) -7]
Test Case: 724 | Input/Output: [(40 -49 -32 -19) -49]
Test Case: 725 | Input/Output: [(25 6 -12 -8) -12]
Test Case: 726 | Input/Output: [(77 -22 86 17) -22]
Test Case: 727 | Input/Output: [(68 -41 -18 16) -41]
Test Case: 728 | Input/Output: [(35 79 46 87) 35]
Test Case: 729 | Input/Output: [(-46 -4 32 -71) -71]
Test Case: 730 | Input/Output: [(-81 77 80 26) -81]
Test Case: 731 | Input/Output: [(-4 -36 -33 56) -36]
Test Case: 732 | Input/Output: [(-48 87 63 -72) -72]
Test Case: 733 | Input/Output: [(-50 55 -76 36) -76]
Test Case: 734 | Input/Output: [(-50 45 100 61) -50]
Test Case: 735 | Input/Output: [(-43 63 -6 -32) -43]
Test Case: 736 | Input/Output: [(79 -43 -21 56) -43]
Test Case: 737 | Input/Output: [(100 -14 -7 32) -14]
Test Case: 738 | Input/Output: [(50 32 5 -82) -82]
Test Case: 739 | Input/Output: [(95 22 -84 22) -84]
Test Case: 740 | Input/Output: [(33 -26 -21 16) -26]
Test Case: 741 | Input/Output: [(-92 41 100 -25) -92]
Test Case: 742 | Input/Output: [(65 11 -47 -3) -47]
Test Case: 743 | Input/Output: [(7 -13 38 81) -13]
Test Case: 744 | Input/Output: [(-70 96 -7 74) -70]
Test Case: 745 | Input/Output: [(-37 25 12 22) -37]
Test Case: 746 | Input/Output: [(90 12 -59 35) -59]
Test Case: 747 | Input/Output: [(-83 73 9 -63) -83]
Test Case: 748 | Input/Output: [(-29 33 -10 -75) -75]
Test Case: 749 | Input/Output: [(-57 -27 -81 68) -81]
Test Case: 750 | Input/Output: [(-30 8 26 15) -30]
Test Case: 751 | Input/Output: [(-95 -62 55 74) -95]
Test Case: 752 | Input/Output: [(-22 90 65 -53) -53]
Test Case: 753 | Input/Output: [(-86 14 37 27) -86]
Test Case: 754 | Input/Output: [(-73 -94 -75 -80) -94]
Test Case: 755 | Input/Output: [(-91 53 -100 82) -100]
Test Case: 756 | Input/Output: [(-30 -46 12 69) -46]
Test Case: 757 | Input/Output: [(-65 63 55 13) -65]
Test Case: 758 | Input/Output: [(9 -92 -65 57) -92]
Test Case: 759 | Input/Output: [(-21 -31 -22 41) -31]
Test Case: 760 | Input/Output: [(81 -98 -65 -6) -98]
Test Case: 761 | Input/Output: [(92 -16 -35 28) -35]
Test Case: 762 | Input/Output: [(35 -54 -51 -43) -54]
Test Case: 763 | Input/Output: [(-66 51 84 -19) -66]
Test Case: 764 | Input/Output: [(-54 74 -45 -78) -78]
Test Case: 765 | Input/Output: [(-48 92 -16 98) -48]
Test Case: 766 | Input/Output: [(-55 -76 -23 60) -76]
Test Case: 767 | Input/Output: [(-59 -73 2 -38) -73]
Test Case: 768 | Input/Output: [(-47 -21 70 10) -47]
Test Case: 769 | Input/Output: [(-40 -32 30 20) -40]
Test Case: 770 | Input/Output: [(7 -12 -27 -13) -27]
Test Case: 771 | Input/Output: [(88 29 88 37) 29]
Test Case: 772 | Input/Output: [(75 -3 -92 -83) -92]
Test Case: 773 | Input/Output: [(-90 -13 -90 88) -90]
Test Case: 774 | Input/Output: [(37 -26 23 -29) -29]
Test Case: 775 | Input/Output: [(-32 -19 4 48) -32]
Test Case: 776 | Input/Output: [(7 -51 -49 11) -51]
Test Case: 777 | Input/Output: [(-59 -95 64 47) -95]
Test Case: 778 | Input/Output: [(71 63 100 -35) -35]
Test Case: 779 | Input/Output: [(-96 76 -57 40) -96]
Test Case: 780 | Input/Output: [(-88 -61 81 -64) -88]
Test Case: 781 | Input/Output: [(67 -79 56 -66) -79]
Test Case: 782 | Input/Output: [(-52 28 64 49) -52]
Test Case: 783 | Input/Output: [(26 -9 65 -96) -96]
Test Case: 784 | Input/Output: [(-40 68 -93 77) -93]
Test Case: 785 | Input/Output: [(-100 -54 -48 63) -100]
Test Case: 786 | Input/Output: [(45 -59 37 -97) -97]
Test Case: 787 | Input/Output: [(3 -52 41 -89) -89]
Test Case: 788 | Input/Output: [(66 -40 -33 -18) -40]
Test Case: 789 | Input/Output: [(-86 -96 50 -43) -96]
Test Case: 790 | Input/Output: [(-84 -53 -77 50) -84]
Test Case: 791 | Input/Output: [(84 34 -64 -62) -64]
Test Case: 792 | Input/Output: [(-89 -78 72 51) -89]
Test Case: 793 | Input/Output: [(83 42 70 41) 41]
Test Case: 794 | Input/Output: [(-63 -39 40 -9) -63]
Test Case: 795 | Input/Output: [(53 -76 -75 -53) -76]
Test Case: 796 | Input/Output: [(-68 -56 -22 -42) -68]
Test Case: 797 | Input/Output: [(-12 50 25 -43) -43]
Test Case: 798 | Input/Output: [(97 -33 -84 73) -84]
Test Case: 799 | Input/Output: [(-39 98 22 85) -39]
Test Case: 800 | Input/Output: [(-1 -37 -69 -38) -69]
Test Case: 801 | Input/Output: [(13 81 -97 -52) -97]
Test Case: 802 | Input/Output: [(76 68 92 6) 6]
Test Case: 803 | Input/Output: [(11 83 68 -48) -48]
Test Case: 804 | Input/Output: [(49 -37 -75 81) -75]
Test Case: 805 | Input/Output: [(-76 79 46 18) -76]
Test Case: 806 | Input/Output: [(-83 48 -83 -47) -83]
Test Case: 807 | Input/Output: [(-42 25 29 -23) -42]
Test Case: 808 | Input/Output: [(27 22 17 80) 17]
Test Case: 809 | Input/Output: [(-17 -46 97 -58) -58]
Test Case: 810 | Input/Output: [(-69 -49 100 53) -69]
Test Case: 811 | Input/Output: [(14 -7 -92 1) -92]
Test Case: 812 | Input/Output: [(46 -65 36 82) -65]
Test Case: 813 | Input/Output: [(-69 88 67 -32) -69]
Test Case: 814 | Input/Output: [(24 9 -24 -63) -63]
Test Case: 815 | Input/Output: [(2 62 58 -26) -26]
Test Case: 816 | Input/Output: [(-26 37 76 22) -26]
Test Case: 817 | Input/Output: [(-13 -41 -47 18) -47]
Test Case: 818 | Input/Output: [(61 32 -16 39) -16]
Test Case: 819 | Input/Output: [(19 97 12 -22) -22]
Test Case: 820 | Input/Output: [(92 -67 75 24) -67]
Test Case: 821 | Input/Output: [(35 50 57 50) 35]
Test Case: 822 | Input/Output: [(26 17 -11 64) -11]
Test Case: 823 | Input/Output: [(-62 -54 69 41) -62]
Test Case: 824 | Input/Output: [(-85 33 66 -89) -89]
Test Case: 825 | Input/Output: [(82 -76 -90 30) -90]
Test Case: 826 | Input/Output: [(-70 -8 -99 86) -99]
Test Case: 827 | Input/Output: [(-93 9 75 -58) -93]
Test Case: 828 | Input/Output: [(16 31 26 49) 16]
Test Case: 829 | Input/Output: [(-84 44 -4 -56) -84]
Test Case: 830 | Input/Output: [(-89 69 19 17) -89]
Test Case: 831 | Input/Output: [(57 -1 -94 -14) -94]
Test Case: 832 | Input/Output: [(-24 -49 98 -18) -49]
Test Case: 833 | Input/Output: [(77 82 -5 44) -5]
Test Case: 834 | Input/Output: [(45 -31 -77 23) -77]
Test Case: 835 | Input/Output: [(-26 -51 -12 -52) -52]
Test Case: 836 | Input/Output: [(80 -3 -3 55) -3]
Test Case: 837 | Input/Output: [(78 75 -74 16) -74]
Test Case: 838 | Input/Output: [(-39 -37 34 13) -39]
Test Case: 839 | Input/Output: [(-83 -72 -98 34) -98]
Test Case: 840 | Input/Output: [(45 -13 9 -65) -65]
Test Case: 841 | Input/Output: [(12 35 28 -64) -64]
Test Case: 842 | Input/Output: [(29 -5 -98 -25) -98]
Test Case: 843 | Input/Output: [(76 -70 26 -86) -86]
Test Case: 844 | Input/Output: [(-6 18 65 36) -6]
Test Case: 845 | Input/Output: [(78 -75 -19 -94) -94]
Test Case: 846 | Input/Output: [(-22 -12 -52 72) -52]
Test Case: 847 | Input/Output: [(80 -73 25 -42) -73]
Test Case: 848 | Input/Output: [(74 -77 31 1) -77]
Test Case: 849 | Input/Output: [(48 -88 -9 -89) -89]
Test Case: 850 | Input/Output: [(-78 -61 27 -70) -78]
Test Case: 851 | Input/Output: [(76 -74 -29 -48) -74]
Test Case: 852 | Input/Output: [(30 26 66 10) 10]
Test Case: 853 | Input/Output: [(-13 89 -44 -80) -80]
Test Case: 854 | Input/Output: [(64 31 92 12) 12]
Test Case: 855 | Input/Output: [(-60 -59 39 62) -60]
Test Case: 856 | Input/Output: [(-56 29 14 37) -56]
Test Case: 857 | Input/Output: [(-90 70 -34 36) -90]
Test Case: 858 | Input/Output: [(72 78 3 -1) -1]
Test Case: 859 | Input/Output: [(51 80 86 91) 51]
Test Case: 860 | Input/Output: [(-91 42 98 97) -91]
Test Case: 861 | Input/Output: [(57 -81 -85 19) -85]
Test Case: 862 | Input/Output: [(20 20 -44 -49) -49]
Test Case: 863 | Input/Output: [(-90 -100 -86 -59) -100]
Test Case: 864 | Input/Output: [(-100 -5 -13 -92) -100]
Test Case: 865 | Input/Output: [(-42 98 51 77) -42]
Test Case: 866 | Input/Output: [(39 -78 34 4) -78]
Test Case: 867 | Input/Output: [(29 -59 24 -94) -94]
Test Case: 868 | Input/Output: [(-41 -8 21 29) -41]
Test Case: 869 | Input/Output: [(-25 85 66 -77) -77]
Test Case: 870 | Input/Output: [(-72 86 35 -100) -100]
Test Case: 871 | Input/Output: [(-42 -88 -19 21) -88]
Test Case: 872 | Input/Output: [(-77 -35 42 -36) -77]
Test Case: 873 | Input/Output: [(11 -41 -43 77) -43]
Test Case: 874 | Input/Output: [(28 70 -62 -62) -62]
Test Case: 875 | Input/Output: [(-17 -9 -37 94) -37]
Test Case: 876 | Input/Output: [(-13 20 60 23) -13]
Test Case: 877 | Input/Output: [(35 97 31 -47) -47]
Test Case: 878 | Input/Output: [(77 -37 -70 81) -70]
Test Case: 879 | Input/Output: [(-74 -78 -20 3) -78]
Test Case: 880 | Input/Output: [(66 -40 50 61) -40]
Test Case: 881 | Input/Output: [(67 -83 -100 -21) -100]
Test Case: 882 | Input/Output: [(81 86 -77 -28) -77]
Test Case: 883 | Input/Output: [(99 -70 69 35) -70]
Test Case: 884 | Input/Output: [(-76 7 -29 -86) -86]
Test Case: 885 | Input/Output: [(-92 85 -66 44) -92]
Test Case: 886 | Input/Output: [(-53 45 0 23) -53]
Test Case: 887 | Input/Output: [(-24 0 -13 59) -24]
Test Case: 888 | Input/Output: [(-2 100 63 -93) -93]
Test Case: 889 | Input/Output: [(-91 -2 -96 3) -96]
Test Case: 890 | Input/Output: [(-97 -88 19 -87) -97]
Test Case: 891 | Input/Output: [(-57 -68 35 61) -68]
Test Case: 892 | Input/Output: [(-83 -79 -66 12) -83]
Test Case: 893 | Input/Output: [(-37 -96 85 2) -96]
Test Case: 894 | Input/Output: [(-79 -83 -68 -71) -83]
Test Case: 895 | Input/Output: [(10 79 64 -66) -66]
Test Case: 896 | Input/Output: [(48 -76 91 57) -76]
Test Case: 897 | Input/Output: [(-90 52 -93 92) -93]
Test Case: 898 | Input/Output: [(71 -3 -21 -61) -61]
Test Case: 899 | Input/Output: [(-28 -9 78 -43) -43]
Test Case: 900 | Input/Output: [(-74 35 66 55) -74]
Test Case: 901 | Input/Output: [(-92 18 26 -75) -92]
Test Case: 902 | Input/Output: [(-12 -86 93 22) -86]
Test Case: 903 | Input/Output: [(31 43 77 39) 31]
Test Case: 904 | Input/Output: [(28 -2 -96 74) -96]
Test Case: 905 | Input/Output: [(-70 48 -9 65) -70]
Test Case: 906 | Input/Output: [(65 100 83 93) 65]
Test Case: 907 | Input/Output: [(47 -36 84 68) -36]
Test Case: 908 | Input/Output: [(15 17 94 -50) -50]
Test Case: 909 | Input/Output: [(-4 -18 46 -25) -25]
Test Case: 910 | Input/Output: [(-38 90 -60 80) -60]
Test Case: 911 | Input/Output: [(9 47 -87 39) -87]
Test Case: 912 | Input/Output: [(2 55 -33 -56) -56]
Test Case: 913 | Input/Output: [(-3 -68 -2 69) -68]
Test Case: 914 | Input/Output: [(60 -39 -43 46) -43]
Test Case: 915 | Input/Output: [(-43 -59 2 -52) -59]
Test Case: 916 | Input/Output: [(8 83 -55 -88) -88]
Test Case: 917 | Input/Output: [(43 32 74 -28) -28]
Test Case: 918 | Input/Output: [(66 -33 -36 -60) -60]
Test Case: 919 | Input/Output: [(-94 -67 47 46) -94]
Test Case: 920 | Input/Output: [(67 79 58 -18) -18]
Test Case: 921 | Input/Output: [(32 -67 48 45) -67]
Test Case: 922 | Input/Output: [(-51 -51 76 92) -51]
Test Case: 923 | Input/Output: [(-64 5 94 -73) -73]
Test Case: 924 | Input/Output: [(-1 30 -26 -33) -33]
Test Case: 925 | Input/Output: [(97 -90 18 14) -90]
Test Case: 926 | Input/Output: [(64 99 62 14) 14]
Test Case: 927 | Input/Output: [(73 22 -2 2) -2]
Test Case: 928 | Input/Output: [(-23 45 98 32) -23]
Test Case: 929 | Input/Output: [(-31 85 -41 -87) -87]
Test Case: 930 | Input/Output: [(-74 -60 89 67) -74]
Test Case: 931 | Input/Output: [(17 -59 64 -56) -59]
Test Case: 932 | Input/Output: [(5 -10 80 -2) -10]
Test Case: 933 | Input/Output: [(-27 -63 45 7) -63]
Test Case: 934 | Input/Output: [(-64 86 38 -42) -64]
Test Case: 935 | Input/Output: [(49 40 -74 92) -74]
Test Case: 936 | Input/Output: [(-17 89 -70 -5) -70]
Test Case: 937 | Input/Output: [(43 -56 46 71) -56]
Test Case: 938 | Input/Output: [(-42 -31 -99 -27) -99]
Test Case: 939 | Input/Output: [(-70 -64 64 -66) -70]
Test Case: 940 | Input/Output: [(60 98 67 9) 9]
Test Case: 941 | Input/Output: [(-81 -51 -1 -77) -81]
Test Case: 942 | Input/Output: [(-12 -51 12 32) -51]
Test Case: 943 | Input/Output: [(-74 33 -20 93) -74]
Test Case: 944 | Input/Output: [(-74 41 -79 -3) -79]
Test Case: 945 | Input/Output: [(-39 53 54 -77) -77]
Test Case: 946 | Input/Output: [(7 -78 9 26) -78]
Test Case: 947 | Input/Output: [(85 70 80 34) 34]
Test Case: 948 | Input/Output: [(-3 -65 23 65) -65]
Test Case: 949 | Input/Output: [(6 10 -69 72) -69]
Test Case: 950 | Input/Output: [(-90 36 28 -15) -90]
Test Case: 951 | Input/Output: [(11 61 -57 -70) -70]
Test Case: 952 | Input/Output: [(-86 32 11 3) -86]
Test Case: 953 | Input/Output: [(6 -64 84 21) -64]
Test Case: 954 | Input/Output: [(-75 -23 -59 17) -75]
Test Case: 955 | Input/Output: [(64 -11 90 -71) -71]
Test Case: 956 | Input/Output: [(-4 27 53 -65) -65]
Test Case: 957 | Input/Output: [(-84 -14 51 61) -84]
Test Case: 958 | Input/Output: [(75 -98 29 -75) -98]
Test Case: 959 | Input/Output: [(10 -1 21 50) -1]
Test Case: 960 | Input/Output: [(91 6 -11 31) -11]
Test Case: 961 | Input/Output: [(81 -52 -72 99) -72]
Test Case: 962 | Input/Output: [(-92 -82 19 98) -92]
Test Case: 963 | Input/Output: [(-34 88 69 -70) -70]
Test Case: 964 | Input/Output: [(50 70 -37 79) -37]
Test Case: 965 | Input/Output: [(44 72 54 70) 44]
Test Case: 966 | Input/Output: [(-94 100 -69 -57) -94]
Test Case: 967 | Input/Output: [(-99 83 19 53) -99]
Test Case: 968 | Input/Output: [(-22 -3 -81 -54) -81]
Test Case: 969 | Input/Output: [(-41 29 35 93) -41]
Test Case: 970 | Input/Output: [(-34 -75 -63 90) -75]
Test Case: 971 | Input/Output: [(35 66 1 33) 1]
Test Case: 972 | Input/Output: [(-24 77 59 83) -24]
Test Case: 973 | Input/Output: [(-47 42 -59 -69) -69]
Test Case: 974 | Input/Output: [(-59 -4 -66 27) -66]
Test Case: 975 | Input/Output: [(65 -46 75 -99) -99]
Test Case: 976 | Input/Output: [(-49 70 -56 61) -56]
Test Case: 977 | Input/Output: [(-46 -71 50 -21) -71]
Test Case: 978 | Input/Output: [(64 83 90 -40) -40]
Test Case: 979 | Input/Output: [(-76 64 90 37) -76]
Test Case: 980 | Input/Output: [(25 74 79 65) 25]
Test Case: 981 | Input/Output: [(75 -74 -37 66) -74]
Test Case: 982 | Input/Output: [(-2 -46 78 -55) -55]
Test Case: 983 | Input/Output: [(-13 -85 26 93) -85]
Test Case: 984 | Input/Output: [(-92 31 77 -90) -92]
Test Case: 985 | Input/Output: [(-87 -13 30 -76) -87]
Test Case: 986 | Input/Output: [(-38 77 99 -40) -40]
Test Case: 987 | Input/Output: [(72 -99 97 3) -99]
Test Case: 988 | Input/Output: [(21 -80 59 85) -80]
Test Case: 989 | Input/Output: [(39 76 78 67) 39]
Test Case: 990 | Input/Output: [(96 16 25 -33) -33]
Test Case: 991 | Input/Output: [(-24 30 96 49) -24]
Test Case: 992 | Input/Output: [(61 54 -76 99) -76]
Test Case: 993 | Input/Output: [(-7 -8 -78 -22) -78]
Test Case: 994 | Input/Output: [(96 33 77 -65) -65]
Test Case: 995 | Input/Output: [(-49 -77 40 -42) -77]
Test Case: 996 | Input/Output: [(-79 -76 -86 37) -86]
Test Case: 997 | Input/Output: [(-87 -99 18 -11) -99]
Test Case: 998 | Input/Output: [(2 -38 84 43) -38]
Test Case: 999 | Input/Output: [(-18 77 9 59) -18]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -68 94 -9 -66 36 -73 79 -42 42 10 113 -51 -16 11 -66 -47
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-71 -71 -71 -6] -71] [[-25 -25 2 -25] -25] [[-42 -36 -36 -36] -42] [[81 81 81 24] 24] [[-32 -32 -80 -32] -80] [[-81 85 -81 -81] -81] [[-72 -72 -72 -38] -72] [[-3 -3 -3 90] -3] [[-1 74 74 74] -1] [[9 -1 -1 -1] -1] [(48 48 48 48) 48] [(-96 -96 -96 -96) -96] [(-58 -58 -58 -58) -58] [(65 65 65 65) 65] [(37 37 37 37) 37] [(99 35 17 80) 17] [(79 77 2 62) 2] [(31 90 96 100) 31] [(100 69 42 45) 42] [(99 55 15 27) 15] [(59 48 13 79) 13] [(60 64 98 33) 33] [(74 17 13 83) 13] [(26 15 9 42) 9] [(50 86 80 37) 37] [(99 17 40 18) 17] [(75 77 20 93) 20] [(78 69 5 46) 5] [(69 91 79 87) 69] [(6 69 43 7) 6] [(70 84 20 45) 20] [(33 79 5 30) 5] [(86 36 12 79) 12] [(18 38 100 47) 18] [(76 59 77 64) 59] [(54 21 1 95) 1] [(100 -80 -42 94) -80] [(-35 -56 -2 -4) -56] [(-78 -65 -61 74) -78] [(-67 12 45 -11) -67] [(5 8 -33 -49) -49] [(93 24 -72 -53) -72] [(-95 -48 29 52) -95] [(-82 -40 91 42) -82] [(58 35 -26 74) -26] [(46 -19 -50 -69) -69] [(81 -3 -11 -89) -89] [(-40 74 63 92) -40] [(-61 89 -28 -1) -61] [(97 -78 -32 -2) -78] [(-46 -37 -6 45) -46] [(-27 -8 93 41) -27] [(-59 -52 -63 59) -63] [(72 54 45 32) 32] [(-38 -23 -41 -91) -91] [(87 53 -58 96) -58] [(-61 56 38 10) -61] [(-83 1 -71 -73) -83] [(-17 27 -2 9) -17] [(52 -76 -13 -78) -78] [(-38 90 -37 -18) -38] [(51 -62 91 -68) -68] [(41 57 2 37) 2] [(-2 -80 -60 56) -80] [(-86 47 76 -12) -86] [(-52 82 28 -64) -64] [(53 -13 -39 14) -39] [(17 2 70 25) 2] [(-96 -4 -42 63) -96] [(-91 -62 -69 8) -91] [(11 -61 80 63) -61] [(50 100 -30 -34) -34] [(24 94 70 47) 24] [(-64 -84 -15 4) -84] [(91 -2 -42 79) -42] [(46 -49 63 23) -49] [(42 -8 13 -68) -68] [(76 68 -18 -83) -83] [(76 -37 -15 -26) -37] [(-24 97 -44 97) -44] [(36 68 14 -69) -69] [(8 62 -4 -4) -4] [(-28 10 46 66) -28] [(4 59 -62 -83) -83] [(-93 -86 19 74) -93] [(38 61 64 4) 4] [(-50 -79 -63 64) -79] [(-81 -22 67 40) -81] [(-23 100 -50 -76) -76] [(99 38 -43 -32) -43] [(-13 -12 47 -86) -86] [(-92 -1 -57 63) -92] [(70 75 100 44) 44] [(-33 86 -95 -14) -95] [(-85 -74 13 -85) -85])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 2                  
Correct output: -42                 | Program output: -36                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: 74                 
Correct output: -1                  | Program output: -1                 
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 80                 
Correct output: 17                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 69                  | Program output: 79                 
Correct output: 6                   | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 100                
Correct output: 59                  | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -80                 | Program output: -42                
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -61                
Correct output: -67                 | Program output: 45                 
Correct output: -49                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 29                 
Correct output: -82                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -69                 | Program output: -50                
Correct output: -89                 | Program output: -11                
Correct output: -40                 | Program output: 63                 
Correct output: -61                 | Program output: -28                
Correct output: -78                 | Program output: -32                
Correct output: -46                 | Program output: -6                 
Correct output: -27                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 32                  | Program output: 45                 
Correct output: -91                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 38                 
Correct output: -83                 | Program output: -71                
Correct output: -17                 | Program output: -2                 
Correct output: -78                 | Program output: -13                
Correct output: -38                 | Program output: -37                
Correct output: -68                 | Program output: 91                 
Correct output: 2                   | Program output: 2                  
Correct output: -80                 | Program output: -60                
Correct output: -86                 | Program output: 76                 
Correct output: -64                 | Program output: 28                 
Correct output: -39                 | Program output: -39                
Correct output: 2                   | Program output: 70                 
Correct output: -96                 | Program output: -42                
Correct output: -91                 | Program output: -69                
Correct output: -61                 | Program output: 80                 
Correct output: -34                 | Program output: -30                
Correct output: 24                  | Program output: 70                 
Correct output: -84                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -49                 | Program output: 63                 
Correct output: -68                 | Program output: 13                 
Correct output: -83                 | Program output: -18                
Correct output: -37                 | Program output: -15                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: 14                 
Correct output: -4                  | Program output: -4                 
Correct output: -28                 | Program output: 46                 
Correct output: -83                 | Program output: -62                
Correct output: -93                 | Program output: 19                 
Correct output: 4                   | Program output: 64                 
Correct output: -79                 | Program output: -63                
Correct output: -81                 | Program output: 67                 
Correct output: -76                 | Program output: -50                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: 47                 
Correct output: -92                 | Program output: -57                
Correct output: 44                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_330} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_876} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_dup_times (print_integer exec_dup (integer_dup_items boolean_pop boolean_empty) integer_stackdepth integer_max) boolean_eq integer_sub exec_shove (exec_while (tagged_330) boolean_pop) exec_do*while (integer_gt exec_s_when_autoconstructing () (boolean_frominteger tag_integer_876 exec_do*while () exec_shove (boolean_pop exec_s () (boolean_or integer_yank exec_swap (exec_do*times ()) (exec_shove (in3 exec_s (integer_dup_times boolean_not) (print_boolean boolean_shove exec_do*range (print_integer) boolean_pop integer_flush boolean_shove boolean_eq exec_stackdepth boolean_stackdepth boolean_swap integer_dup print_boolean boolean_invert_first_then_and exec_flush) (integer_mod) boolean_xor print_integer integer_gt boolean_eq exec_swap (print_newline exec_do*count ()) ()))) ())) ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 80
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction tagged_330} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_876} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_dup_times (print_integer exec_dup (integer_dup_items boolean_pop boolean_empty) integer_stackdepth integer_max) boolean_eq integer_sub exec_shove (exec_while (tagged_330) boolean_pop) exec_do*while (integer_gt exec_s_when_autoconstructing () (boolean_frominteger tag_integer_876 exec_do*while () exec_shove (boolean_pop exec_s () (boolean_or integer_yank exec_swap (exec_do*times ()) (exec_shove (in3 exec_s (integer_dup_times boolean_not) (print_boolean boolean_shove exec_do*range (print_integer) boolean_pop integer_flush boolean_shove boolean_eq exec_stackdepth boolean_stackdepth boolean_swap integer_dup print_boolean boolean_invert_first_then_and exec_flush) (integer_mod) boolean_xor print_integer integer_gt boolean_eq exec_swap (print_newline exec_do*count ()) ()))) ())) ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 80
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 5 4 10 2 10 1 1 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 2 5 4 10 2 10 1 1 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction exec_while} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -97} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction 97} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range})
Best program: (exec_y_when_autoconstructing (exec_while () exec_while (integer_swap)) exec_noop exec_eq integer_gte exec_k_when_autoconstructing (in3 integer_dup integer_yankdup exec_empty) (integer_swap exec_dup (boolean_flush integer_max integer_gte print_boolean print_integer boolean_yankdup exec_yank) boolean_pop) exec_yankdup integer_eq exec_eq integer_min exec_do*range (in1 exec_do*while () boolean_and exec_dup_times (exec_rot (integer_add integer_max exec_pop (boolean_or print_integer exec_if (integer_empty) (print_newline exec_s_when_autoconstructing (integer_sub print_newline integer_rot integer_add exec_s_when_autoconstructing (integer_dup integer_inc integer_div integer_stackdepth integer_yankdup -97 integer_gt boolean_and boolean_shove boolean_dup exec_eq) (boolean_yankdup exec_yankdup exec_s_when_autoconstructing (boolean_shove integer_lt exec_dup_times (exec_s_when_autoconstructing (exec_do*times (integer_div integer_stackdepth boolean_xor 97) integer_shove integer_gt integer_inc) (in2 boolean_empty print_boolean integer_inc) () exec_yankdup exec_dup_items exec_k_when_autoconstructing (integer_yankdup) (integer_dup) boolean_rot exec_when () integer_shove integer_rot exec_do*while (exec_k (integer_lte boolean_invert_first_then_and) () exec_do*range ()))) () ()) ()) () ()))) () ())))
Errors: [0 0 1 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 90
Size: 127
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 9.959
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.995 0.996 0.99 0.998 0.99 0.999 0.999 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.445
Average program size in population (points): 70.739
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 490322
--- Timings ---
Current time: 1559593829021 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         1.0 seconds, 38.8%
Fitness Testing:      1.5 seconds, 56.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -42                 | Program output: -42                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -1                  | Program output: 9                  
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 79                 
Correct output: 31                  | Program output: 31                 
Correct output: 42                  | Program output: 100                
Correct output: 15                  | Program output: 99                 
Correct output: 13                  | Program output: 59                 
Correct output: 33                  | Program output: 60                 
Correct output: 13                  | Program output: 74                 
Correct output: 9                   | Program output: 26                 
Correct output: 37                  | Program output: 50                 
Correct output: 17                  | Program output: 99                 
Correct output: 20                  | Program output: 75                 
Correct output: 5                   | Program output: 78                 
Correct output: 69                  | Program output: 69                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 70                 
Correct output: 5                   | Program output: 33                 
Correct output: 12                  | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 76                 
Correct output: 1                   | Program output: 54                 
Correct output: -80                 | Program output: 100                
Correct output: -56                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 5                  
Correct output: -72                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 58                 
Correct output: -69                 | Program output: 46                 
Correct output: -89                 | Program output: 81                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 97                 
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -63                 | Program output: -59                
Correct output: 32                  | Program output: 72                 
Correct output: -91                 | Program output: -38                
Correct output: -58                 | Program output: 87                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -68                 | Program output: 51                 
Correct output: 2                   | Program output: 41                 
Correct output: -80                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -52                
Correct output: -39                 | Program output: 53                 
Correct output: 2                   | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 11                 
Correct output: -34                 | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: -84                 | Program output: -64                
Correct output: -42                 | Program output: 91                 
Correct output: -49                 | Program output: 46                 
Correct output: -68                 | Program output: 42                 
Correct output: -83                 | Program output: 76                 
Correct output: -37                 | Program output: 76                 
Correct output: -44                 | Program output: -24                
Correct output: -69                 | Program output: 36                 
Correct output: -4                  | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -83                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: 4                   | Program output: 38                 
Correct output: -79                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -23                
Correct output: -43                 | Program output: 99                 
Correct output: -86                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 70                 
Correct output: -95                 | Program output: -33                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_707} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_902} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_563} {:close 0, :instruction print_exec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 print_integer integer_swap integer_min exec_k_when_autoconstructing (print_integer integer_dec integer_yankdup integer_add tagged_707) () boolean_dup_items exec_swap (exec_dup () exec_rot (integer_rot) (exec_k_when_autoconstructing () (exec_rot (integer_div) (tagged_902 boolean_eq exec_when (integer_dup boolean_eq integer_mod exec_y (integer_dup_times) print_integer integer_lte exec_noop boolean_stackdepth)) (boolean_not integer_dec exec_y_when_autoconstructing (integer_empty exec_dup_items exec_dup (exec_yankdup) integer_div exec_pop (boolean_empty integer_dup_items exec_noop integer_shove integer_max exec_flush exec_yankdup boolean_eq boolean_dup_items integer_dup_items boolean_yankdup exec_s (integer_sub integer_fromboolean integer_swap in3 exec_swap (print_integer boolean_empty integer_max integer_gte) (boolean_dup_times exec_eq integer_rot integer_yank boolean_invert_first_then_and exec_pop (exec_do*times (integer_yank exec_eq integer_swap) exec_rot () (boolean_empty integer_eq tagged_563) (print_exec (exec_if () (exec_empty integer_gt boolean_frominteger)) print_integer exec_when () integer_gt) exec_yank) integer_gte) exec_eq) (boolean_invert_second_then_and integer_gt) (exec_when (exec_y () integer_add exec_s (15 in2) (boolean_and exec_do*count (integer_lte print_integer exec_noop) integer_lte) ()))))))) ()) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 138
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_707} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_902} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_563} {:close 0, :instruction print_exec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 print_integer integer_swap integer_min exec_k_when_autoconstructing (print_integer integer_dec integer_yankdup integer_add tagged_707) () boolean_dup_items exec_swap (exec_dup () exec_rot (integer_rot) (exec_k_when_autoconstructing () (exec_rot (integer_div) (tagged_902 boolean_eq exec_when (integer_dup boolean_eq integer_mod exec_y (integer_dup_times) print_integer integer_lte exec_noop boolean_stackdepth)) (boolean_not integer_dec exec_y_when_autoconstructing (integer_empty exec_dup_items exec_dup (exec_yankdup) integer_div exec_pop (boolean_empty integer_dup_items exec_noop integer_shove integer_max exec_flush exec_yankdup boolean_eq boolean_dup_items integer_dup_items boolean_yankdup exec_s (integer_sub integer_fromboolean integer_swap in3 exec_swap (print_integer boolean_empty integer_max integer_gte) (boolean_dup_times exec_eq integer_rot integer_yank boolean_invert_first_then_and exec_pop (exec_do*times (integer_yank exec_eq integer_swap) exec_rot () (boolean_empty integer_eq tagged_563) (print_exec (exec_if () (exec_empty integer_gt boolean_frominteger)) print_integer exec_when () integer_gt) exec_yank) integer_gte) exec_eq) (boolean_invert_second_then_and integer_gt) (exec_when (exec_y () integer_add exec_s (15 in2) (boolean_and exec_do*count (integer_lte print_integer exec_noop) integer_lte) ()))))))) ()) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 138
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 139 186 138 14 130 137 370 355 267)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (368 139 186 138 14 130 137 370 355 267)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction tagged_707} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_902} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_563} {:close 0, :instruction print_exec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Best program: (in1 exec_k_when_autoconstructing (boolean_rot print_integer) (integer_swap exec_k_when_autoconstructing (print_integer integer_dec integer_yankdup integer_add integer_max tagged_707) () boolean_dup_items exec_swap (exec_dup () exec_rot (boolean_pop integer_eq exec_rot (tagged_902 boolean_eq boolean_eq integer_mod exec_y (integer_dup_times) print_integer exec_noop boolean_stackdepth) () (boolean_not integer_dec exec_y_when_autoconstructing (exec_do*count (integer_empty exec_dup_items boolean_flush integer_min boolean_empty integer_dup_items exec_noop integer_shove integer_max exec_flush exec_yankdup boolean_eq integer_dup_items boolean_yankdup exec_s (integer_sub integer_fromboolean integer_swap in3 print_integer boolean_empty integer_max boolean_dup_times exec_eq integer_rot boolean_invert_first_then_and exec_pop (exec_do*times (integer_yank boolean_yank) exec_eq integer_swap) integer_dup exec_rot () (boolean_empty exec_pop (integer_gte integer_eq tagged_563) print_exec (exec_if () (exec_empty boolean_frominteger)) print_integer exec_when () integer_mod integer_gt) (exec_yank) integer_gte) (exec_eq) (boolean_invert_second_then_and integer_gt) exec_when (exec_y () integer_add exec_s (15 in2) (integer_lte print_integer exec_noop) (integer_lte)))))) () ()) ()))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 94
Size: 129
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.896
Median total errors in population: 10
Error averages by case: (0.632 0.861 0.814 0.862 0.986 0.87 0.863 0.63 0.645 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.44
Average program size in population (points): 96.199
Average percent parens in population: 0.282
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1223434
--- Timings ---
Current time: 1559593831194 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.0 seconds, 39.6%
Fitness Testing:      2.2 seconds, 44.5%
Report:               0.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 2                  
Correct output: -42                 | Program output: -36                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: 74                 
Correct output: -1                  | Program output: -1                 
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 80                 
Correct output: 17                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 69                  | Program output: 79                 
Correct output: 6                   | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 100                
Correct output: 59                  | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -80                 | Program output: -42                
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -61                
Correct output: -67                 | Program output: 45                 
Correct output: -49                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 29                 
Correct output: -82                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -69                 | Program output: -50                
Correct output: -89                 | Program output: -11                
Correct output: -40                 | Program output: 63                 
Correct output: -61                 | Program output: -28                
Correct output: -78                 | Program output: -32                
Correct output: -46                 | Program output: -6                 
Correct output: -27                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 32                  | Program output: 45                 
Correct output: -91                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 38                 
Correct output: -83                 | Program output: -71                
Correct output: -17                 | Program output: -2                 
Correct output: -78                 | Program output: -13                
Correct output: -38                 | Program output: -37                
Correct output: -68                 | Program output: 91                 
Correct output: 2                   | Program output: 2                  
Correct output: -80                 | Program output: -60                
Correct output: -86                 | Program output: 76                 
Correct output: -64                 | Program output: 28                 
Correct output: -39                 | Program output: -39                
Correct output: 2                   | Program output: 70                 
Correct output: -96                 | Program output: -42                
Correct output: -91                 | Program output: -69                
Correct output: -61                 | Program output: 80                 
Correct output: -34                 | Program output: -30                
Correct output: 24                  | Program output: 70                 
Correct output: -84                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -49                 | Program output: 63                 
Correct output: -68                 | Program output: 13                 
Correct output: -83                 | Program output: -18                
Correct output: -37                 | Program output: -15                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: 14                 
Correct output: -4                  | Program output: -4                 
Correct output: -28                 | Program output: 46                 
Correct output: -83                 | Program output: -62                
Correct output: -93                 | Program output: 19                 
Correct output: 4                   | Program output: 64                 
Correct output: -79                 | Program output: -63                
Correct output: -81                 | Program output: 67                 
Correct output: -76                 | Program output: -50                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: 47                 
Correct output: -92                 | Program output: -57                
Correct output: 44                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_330} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_876} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Lexicase best program: (print_integer exec_dup (boolean_stackdepth) boolean_pop boolean_empty integer_stackdepth integer_sub exec_shove (boolean_frominteger tagged_330) boolean_pop exec_do*while (integer_gt exec_s_when_autoconstructing () (boolean_frominteger tag_integer_876 exec_do*while () exec_shove (exec_s () (boolean_or exec_y_when_autoconstructing (integer_yank exec_swap (exec_do*times ()) (exec_shove (in3 exec_s (integer_dup_times boolean_not) (print_boolean print_integer integer_sub boolean_shove exec_do*range (print_integer) boolean_pop integer_flush boolean_shove boolean_eq exec_stackdepth boolean_stackdepth boolean_swap integer_dup print_boolean boolean_invert_first_then_and exec_flush) (integer_mod) print_integer boolean_dup) exec_swap (boolean_yank print_newline exec_do*while (exec_do*count ())) ()))) ())) ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_330} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_876} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count})
Zero cases best program: (print_integer exec_dup (boolean_stackdepth) boolean_pop boolean_empty integer_stackdepth integer_sub exec_shove (boolean_frominteger tagged_330) boolean_pop exec_do*while (integer_gt exec_s_when_autoconstructing () (boolean_frominteger tag_integer_876 exec_do*while () exec_shove (exec_s () (boolean_or exec_y_when_autoconstructing (integer_yank exec_swap (exec_do*times ()) (exec_shove (in3 exec_s (integer_dup_times boolean_not) (print_boolean print_integer integer_sub boolean_shove exec_do*range (print_integer) boolean_pop integer_flush boolean_shove boolean_eq exec_stackdepth boolean_stackdepth boolean_swap integer_dup print_boolean boolean_invert_first_then_and exec_flush) (integer_mod) print_integer boolean_dup) exec_swap (boolean_yank print_newline exec_do*while (exec_do*count ())) ()))) ())) ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (381 373 58 379 2 60 57 431 480 57)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (381 373 58 379 2 60 57 431 480 57)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -97} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction 97} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range})
Best program: (exec_y_when_autoconstructing (exec_while () exec_while (exec_noop) exec_eq) integer_gte exec_k_when_autoconstructing (in3 integer_dup integer_yankdup exec_empty) (integer_swap exec_y_when_autoconstructing (exec_dup (boolean_flush integer_max integer_gte print_boolean print_integer boolean_yankdup exec_yank) boolean_swap exec_do*while (exec_yankdup integer_eq exec_eq integer_min exec_do*range (in1 exec_do*while () boolean_and integer_pop) exec_dup_times (exec_rot (print_boolean boolean_not) (integer_add integer_max exec_pop (boolean_or exec_if (print_newline exec_s_when_autoconstructing (integer_sub exec_noop integer_rot integer_add exec_s_when_autoconstructing (integer_max integer_inc integer_div integer_stackdepth integer_yankdup -97 boolean_and boolean_shove exec_eq) (boolean_yankdup exec_s_when_autoconstructing (boolean_shove integer_lt exec_dup_times (exec_s_when_autoconstructing (exec_do*times (integer_div integer_stackdepth boolean_xor 97) integer_shove integer_gt integer_inc) (in2 boolean_empty boolean_empty print_boolean integer_inc) () exec_yankdup integer_yankdup) integer_dup) (boolean_rot exec_when () integer_shove integer_rot exec_do*while (exec_k (integer_lte exec_do*range ()) ())) ()) ()) () ()) ())) ())))))
Errors: [1 1 0 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 87
Size: 124
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 10
Error averages by case: (0.619 0.627 0.942 0.621 0.998 0.94 0.943 0.569 0.52 0.943)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.096
Average program size in population (points): 100.686
Average percent parens in population: 0.273
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2017845
--- Timings ---
Current time: 1559593833582 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.2 seconds, 43.1%
Fitness Testing:      3.0 seconds, 40.9%
Report:               1.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -42                 | Program output: -42                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -1                  | Program output: 9                  
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 79                 
Correct output: 31                  | Program output: 31                 
Correct output: 42                  | Program output: 100                
Correct output: 15                  | Program output: 99                 
Correct output: 13                  | Program output: 59                 
Correct output: 33                  | Program output: 60                 
Correct output: 13                  | Program output: 74                 
Correct output: 9                   | Program output: 26                 
Correct output: 37                  | Program output: 50                 
Correct output: 17                  | Program output: 99                 
Correct output: 20                  | Program output: 75                 
Correct output: 5                   | Program output: 78                 
Correct output: 69                  | Program output: 69                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 70                 
Correct output: 5                   | Program output: 33                 
Correct output: 12                  | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 76                 
Correct output: 1                   | Program output: 54                 
Correct output: -80                 | Program output: 100                
Correct output: -56                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 5                  
Correct output: -72                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 58                 
Correct output: -69                 | Program output: 46                 
Correct output: -89                 | Program output: 81                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 97                 
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -63                 | Program output: -59                
Correct output: 32                  | Program output: 72                 
Correct output: -91                 | Program output: -38                
Correct output: -58                 | Program output: 87                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -68                 | Program output: 51                 
Correct output: 2                   | Program output: 41                 
Correct output: -80                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -52                
Correct output: -39                 | Program output: 53                 
Correct output: 2                   | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 11                 
Correct output: -34                 | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: -84                 | Program output: -64                
Correct output: -42                 | Program output: 91                 
Correct output: -49                 | Program output: 46                 
Correct output: -68                 | Program output: 42                 
Correct output: -83                 | Program output: 76                 
Correct output: -37                 | Program output: 76                 
Correct output: -44                 | Program output: -24                
Correct output: -69                 | Program output: 36                 
Correct output: -4                  | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -83                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: 4                   | Program output: 38                 
Correct output: -79                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -23                
Correct output: -43                 | Program output: 99                 
Correct output: -86                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 70                 
Correct output: -95                 | Program output: -33                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_707} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_902} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_563} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gte} {:close 0, :instruction -41} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 exec_k_when_autoconstructing (boolean_rot print_integer) (integer_swap exec_k_when_autoconstructing (print_integer integer_dec integer_yankdup integer_add tagged_707) () exec_swap (exec_dup () exec_rot (integer_rot) (integer_eq exec_k_when_autoconstructing () (exec_rot (boolean_empty tagged_902 print_boolean boolean_eq boolean_dup) (integer_min integer_mod exec_y (exec_shove (integer_dup_times) print_integer exec_noop boolean_stackdepth)) (exec_eq boolean_not exec_do*count (integer_dup_times exec_dup_items integer_div integer_yank exec_pop (integer_min integer_dup_items integer_dup_items exec_noop integer_pop integer_max exec_flush boolean_shove exec_yankdup boolean_dup_items print_boolean integer_dup_items boolean_yankdup integer_sub integer_fromboolean integer_swap in3 print_integer integer_min boolean_empty integer_max integer_gte) boolean_dup_times integer_rot boolean_eq boolean_invert_first_then_and in3) exec_do*times (integer_yank integer_swap) boolean_or integer_dup integer_lt boolean_empty exec_pop (exec_when (tagged_563) print_exec (exec_dup_items boolean_rot) in3 exec_if () (boolean_frominteger)) print_integer exec_when () integer_gt) integer_gte) -41 exec_pop (exec_eq) boolean_invert_second_then_and integer_gt) (exec_when (exec_y () integer_add boolean_swap integer_dup 15 in2) exec_do*count (integer_lte print_integer exec_noop) integer_lte)) ()))
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 134
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 2, :instruction tagged_707} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_902} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction tagged_563} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gte} {:close 0, :instruction -41} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 exec_k_when_autoconstructing (boolean_rot print_integer) (integer_swap exec_k_when_autoconstructing (print_integer integer_dec integer_yankdup integer_add tagged_707) () exec_swap (exec_dup () exec_rot (integer_rot) (integer_eq exec_k_when_autoconstructing () (exec_rot (boolean_empty tagged_902 print_boolean boolean_eq boolean_dup) (integer_min integer_mod exec_y (exec_shove (integer_dup_times) print_integer exec_noop boolean_stackdepth)) (exec_eq boolean_not exec_do*count (integer_dup_times exec_dup_items integer_div integer_yank exec_pop (integer_min integer_dup_items integer_dup_items exec_noop integer_pop integer_max exec_flush boolean_shove exec_yankdup boolean_dup_items print_boolean integer_dup_items boolean_yankdup integer_sub integer_fromboolean integer_swap in3 print_integer integer_min boolean_empty integer_max integer_gte) boolean_dup_times integer_rot boolean_eq boolean_invert_first_then_and in3) exec_do*times (integer_yank integer_swap) boolean_or integer_dup integer_lt boolean_empty exec_pop (exec_when (tagged_563) print_exec (exec_dup_items boolean_rot) in3 exec_if () (boolean_frominteger)) print_integer exec_when () integer_gt) integer_gte) -41 exec_pop (exec_eq) boolean_invert_second_then_and integer_gt) (exec_when (exec_y () integer_add boolean_swap integer_dup 15 in2) exec_do*count (integer_lte print_integer exec_noop) integer_lte)) ()))
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 134
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 198 200 2 522 208 1 213 207 199)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (199 198 200 2 522 208 1 213 207 199)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 2, :instruction tagged_707} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 1, :instruction exec_rot} {:close 0, :instruction tagged_796} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction integer_lte})
Best program: (in1 exec_k_when_autoconstructing (boolean_rot print_integer) (integer_rot boolean_rot integer_swap exec_while (print_integer integer_inc integer_dec integer_dec integer_yankdup integer_add boolean_not tagged_707)) exec_k (boolean_dup_items exec_k_when_autoconstructing () (exec_rot (integer_div) (boolean_eq boolean_eq integer_dup_times) (print_integer exec_noop boolean_stackdepth)) exec_eq boolean_not integer_dec integer_sub exec_y_when_autoconstructing (integer_empty exec_dup_items exec_yankdup) integer_div exec_pop (integer_min boolean_empty integer_dup_items exec_noop boolean_invert_first_then_and boolean_rot exec_shove (integer_max exec_flush integer_dup_items boolean_eq integer_dup_items boolean_yankdup exec_s (integer_sub integer_fromboolean integer_swap boolean_empty integer_empty) (integer_max in2 integer_rot boolean_eq boolean_invert_first_then_and boolean_pop exec_do*times (exec_eq integer_swap) integer_dup print_newline exec_rot () (tagged_796 boolean_swap) (boolean_empty exec_pop (integer_dec integer_eq integer_dup_items integer_dup_times) exec_if () (boolean_frominteger)) boolean_dup_times boolean_dup) (integer_gt) integer_gte) integer_max) boolean_shove exec_eq) (boolean_invert_second_then_and print_exec (integer_gt) exec_when (in2 exec_y () integer_add exec_s (exec_yankdup in2) (exec_do*count (print_integer in1 exec_noop) in4) (integer_lte))))
Errors: [0 0 0 1 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 101
Size: 132
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 8.051
Median total errors in population: 9
Error averages by case: (0.801 0.802 0.8 0.998 0.478 0.792 0.999 0.787 0.793 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.955
Average program size in population (points): 98.876
Average percent parens in population: 0.273
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2697687
--- Timings ---
Current time: 1559593835768 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.4 seconds, 45.2%
Fitness Testing:      3.7 seconds, 38.3%
Report:               1.5 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 2                  
Correct output: -42                 | Program output: -36                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: 74                 
Correct output: -1                  | Program output: -1                 
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 80                 
Correct output: 17                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 69                  | Program output: 79                 
Correct output: 6                   | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 100                
Correct output: 59                  | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -80                 | Program output: -42                
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -61                
Correct output: -67                 | Program output: 45                 
Correct output: -49                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 29                 
Correct output: -82                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -69                 | Program output: -50                
Correct output: -89                 | Program output: -11                
Correct output: -40                 | Program output: 63                 
Correct output: -61                 | Program output: -28                
Correct output: -78                 | Program output: -32                
Correct output: -46                 | Program output: -6                 
Correct output: -27                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 32                  | Program output: 45                 
Correct output: -91                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 38                 
Correct output: -83                 | Program output: -71                
Correct output: -17                 | Program output: -2                 
Correct output: -78                 | Program output: -13                
Correct output: -38                 | Program output: -37                
Correct output: -68                 | Program output: 91                 
Correct output: 2                   | Program output: 2                  
Correct output: -80                 | Program output: -60                
Correct output: -86                 | Program output: 76                 
Correct output: -64                 | Program output: 28                 
Correct output: -39                 | Program output: -39                
Correct output: 2                   | Program output: 70                 
Correct output: -96                 | Program output: -42                
Correct output: -91                 | Program output: -69                
Correct output: -61                 | Program output: 80                 
Correct output: -34                 | Program output: -30                
Correct output: 24                  | Program output: 70                 
Correct output: -84                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -49                 | Program output: 63                 
Correct output: -68                 | Program output: 13                 
Correct output: -83                 | Program output: -18                
Correct output: -37                 | Program output: -15                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: 14                 
Correct output: -4                  | Program output: -4                 
Correct output: -28                 | Program output: 46                 
Correct output: -83                 | Program output: -62                
Correct output: -93                 | Program output: 19                 
Correct output: 4                   | Program output: 64                 
Correct output: -79                 | Program output: -63                
Correct output: -81                 | Program output: 67                 
Correct output: -76                 | Program output: -50                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: 47                 
Correct output: -92                 | Program output: -57                
Correct output: 44                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction tag_boolean_249} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_integer_211} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -97} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop})
Lexicase best program: (tag_boolean_249 exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_while (exec_do*times (integer_swap)) in3 integer_dup integer_yankdup exec_empty) tag_integer_211 integer_swap boolean_flush integer_max print_integer boolean_empty exec_yank) (boolean_pop) (exec_yankdup exec_eq integer_min integer_flush boolean_shove integer_lte integer_sub) in1 exec_do*while () exec_do*times (boolean_and exec_rot (exec_pop (integer_div boolean_or print_integer exec_if (integer_empty) (print_newline exec_s_when_autoconstructing (exec_while (print_newline integer_rot exec_s_when_autoconstructing (print_integer integer_dup exec_pop (integer_div integer_stackdepth integer_mod integer_yankdup -97 boolean_not boolean_and boolean_shove exec_y (boolean_dup boolean_and exec_eq) integer_dup_items exec_s_when_autoconstructing (boolean_shove exec_dup_times (integer_mult integer_shove integer_gt in2 boolean_empty print_boolean exec_yankdup exec_dup_items exec_while () exec_k_when_autoconstructing (integer_yankdup) (integer_dup integer_dup) boolean_rot boolean_dup_items integer_eq integer_rot integer_dup exec_do*range (boolean_pop))) () ())) () ())) () ()))) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 113
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction tag_boolean_249} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_integer_211} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -97} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop})
Zero cases best program: (tag_boolean_249 exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_while (exec_do*times (integer_swap)) in3 integer_dup integer_yankdup exec_empty) tag_integer_211 integer_swap boolean_flush integer_max print_integer boolean_empty exec_yank) (boolean_pop) (exec_yankdup exec_eq integer_min integer_flush boolean_shove integer_lte integer_sub) in1 exec_do*while () exec_do*times (boolean_and exec_rot (exec_pop (integer_div boolean_or print_integer exec_if (integer_empty) (print_newline exec_s_when_autoconstructing (exec_while (print_newline integer_rot exec_s_when_autoconstructing (print_integer integer_dup exec_pop (integer_div integer_stackdepth integer_mod integer_yankdup -97 boolean_not boolean_and boolean_shove exec_y (boolean_dup boolean_and exec_eq) integer_dup_items exec_s_when_autoconstructing (boolean_shove exec_dup_times (integer_mult integer_shove integer_gt in2 boolean_empty print_boolean exec_yankdup exec_dup_items exec_while () exec_k_when_autoconstructing (integer_yankdup) (integer_dup integer_dup) boolean_rot boolean_dup_items integer_eq integer_rot integer_dup exec_do*range (boolean_pop))) () ())) () ())) () ()))) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 113
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (563 128 284 136 134 137 127 14 133 281)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (563 128 284 136 134 137 127 14 133 281)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction tagged_330} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_876} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count})
Best program: (exec_dup_times (exec_dup (integer_dup_items boolean_pop boolean_empty) integer_stackdepth exec_eq) exec_dup (exec_eq) boolean_eq in3 tagged_330 boolean_pop exec_do*while (integer_inc integer_gt exec_s_when_autoconstructing () (tag_integer_876 exec_swap (integer_div boolean_pop exec_s () (integer_dec boolean_or integer_yank exec_swap (exec_do*times ()) (exec_shove (in3 exec_s (integer_dup_times boolean_shove exec_do*range (print_integer) boolean_pop integer_flush boolean_eq exec_do*range (exec_stackdepth boolean_stackdepth boolean_swap boolean_not in4 integer_dup boolean_invert_first_then_and exec_empty exec_flush) integer_mod) (print_integer integer_gt exec_swap (exec_do*count ()) ()) ()))) ()) ()) ()))
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 77
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 8.063
Median total errors in population: 8
Error averages by case: (0.437 0.872 0.716 0.864 0.866 0.863 0.873 0.986 0.867 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.427
Average program size in population (points): 115.554
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3462364
--- Timings ---
Current time: 1559593838280 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.6 seconds, 46.7%
Fitness Testing:      4.4 seconds, 37.1%
Report:               1.8 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -42                 | Program output: -42                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -1                  | Program output: 9                  
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 79                 
Correct output: 31                  | Program output: 31                 
Correct output: 42                  | Program output: 100                
Correct output: 15                  | Program output: 99                 
Correct output: 13                  | Program output: 59                 
Correct output: 33                  | Program output: 60                 
Correct output: 13                  | Program output: 74                 
Correct output: 9                   | Program output: 26                 
Correct output: 37                  | Program output: 50                 
Correct output: 17                  | Program output: 99                 
Correct output: 20                  | Program output: 75                 
Correct output: 5                   | Program output: 78                 
Correct output: 69                  | Program output: 69                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 70                 
Correct output: 5                   | Program output: 33                 
Correct output: 12                  | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 76                 
Correct output: 1                   | Program output: 54                 
Correct output: -80                 | Program output: 100                
Correct output: -56                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 5                  
Correct output: -72                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 58                 
Correct output: -69                 | Program output: 46                 
Correct output: -89                 | Program output: 81                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 97                 
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -63                 | Program output: -59                
Correct output: 32                  | Program output: 72                 
Correct output: -91                 | Program output: -38                
Correct output: -58                 | Program output: 87                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -68                 | Program output: 51                 
Correct output: 2                   | Program output: 41                 
Correct output: -80                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -52                
Correct output: -39                 | Program output: 53                 
Correct output: 2                   | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 11                 
Correct output: -34                 | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: -84                 | Program output: -64                
Correct output: -42                 | Program output: 91                 
Correct output: -49                 | Program output: 46                 
Correct output: -68                 | Program output: 42                 
Correct output: -83                 | Program output: 76                 
Correct output: -37                 | Program output: 76                 
Correct output: -44                 | Program output: -24                
Correct output: -69                 | Program output: 36                 
Correct output: -4                  | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -83                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: 4                   | Program output: 38                 
Correct output: -79                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -23                
Correct output: -43                 | Program output: 99                 
Correct output: -86                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 70                 
Correct output: -95                 | Program output: -33                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction tagged_707} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction tagged_902} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 exec_k_when_autoconstructing (boolean_rot print_integer) (integer_add exec_s_when_autoconstructing () (integer_swap boolean_xor print_integer) (integer_yankdup boolean_and integer_add boolean_invert_first_then_and) tagged_707) exec_do*range (exec_rot (integer_rot) (exec_k_when_autoconstructing () (integer_stackdepth boolean_frominteger)) (tagged_902 boolean_eq boolean_eq exec_y (integer_dup_times) print_integer exec_noop boolean_stackdepth)) boolean_not integer_dec exec_do*count (exec_do*count (integer_empty exec_dup_items exec_yankdup) boolean_xor) integer_div exec_pop (integer_min boolean_empty integer_dup_items integer_shove print_exec (exec_dup (boolean_dup_items integer_dup_items exec_s (integer_sub exec_dup (integer_fromboolean integer_swap exec_do*count (integer_lt integer_dup) print_integer boolean_empty integer_flush exec_eq integer_rot boolean_eq print_newline boolean_invert_first_then_and exec_do*times (exec_eq integer_yank integer_div integer_swap) boolean_empty exec_pop (exec_y_when_autoconstructing (in2 print_exec (in3 in3 exec_eq) exec_if () (exec_empty boolean_frominteger)) print_integer integer_gt) exec_yank) integer_gte) (exec_eq) (integer_empty boolean_invert_second_then_and exec_do*times (exec_k () (integer_gt) exec_s (15 in2) (integer_rot exec_noop) (integer_lte)))))))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 129
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction tagged_707} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction tagged_902} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 exec_k_when_autoconstructing (boolean_rot print_integer) (integer_add exec_s_when_autoconstructing () (integer_swap boolean_xor print_integer) (integer_yankdup boolean_and integer_add boolean_invert_first_then_and) tagged_707) exec_do*range (exec_rot (integer_rot) (exec_k_when_autoconstructing () (integer_stackdepth boolean_frominteger)) (tagged_902 boolean_eq boolean_eq exec_y (integer_dup_times) print_integer exec_noop boolean_stackdepth)) boolean_not integer_dec exec_do*count (exec_do*count (integer_empty exec_dup_items exec_yankdup) boolean_xor) integer_div exec_pop (integer_min boolean_empty integer_dup_items integer_shove print_exec (exec_dup (boolean_dup_items integer_dup_items exec_s (integer_sub exec_dup (integer_fromboolean integer_swap exec_do*count (integer_lt integer_dup) print_integer boolean_empty integer_flush exec_eq integer_rot boolean_eq print_newline boolean_invert_first_then_and exec_do*times (exec_eq integer_yank integer_div integer_swap) boolean_empty exec_pop (exec_y_when_autoconstructing (in2 print_exec (in3 in3 exec_eq) exec_if () (exec_empty boolean_frominteger)) print_integer integer_gt) exec_yank) integer_gte) (exec_eq) (integer_empty boolean_invert_second_then_and exec_do*times (exec_k () (integer_gt) exec_s (15 in2) (integer_rot exec_noop) (integer_lte)))))))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 129
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (55 49 475 64 66 262 72 376 65 64)
Population mean number of elite cases: 1.55
Count of perfect (error zero) individuals by case: (55 49 475 64 66 262 72 376 65 64)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 2, :instruction tagged_707} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction tagged_563} {:close 0, :instruction in3} {:close 1, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_noop})
Best program: (in1 integer_yankdup exec_y_when_autoconstructing (exec_rot (integer_swap integer_fromboolean exec_do*range (exec_k_when_autoconstructing (print_integer exec_dup_times (integer_yankdup integer_swap integer_dup_items tagged_707)) (integer_rot integer_mod exec_swap (integer_swap exec_rot (integer_rot) (integer_inc exec_k_when_autoconstructing (integer_eq exec_rot (integer_div) (boolean_eq integer_mod integer_dup_times) (print_integer exec_noop boolean_stackdepth)) (boolean_not boolean_not integer_dec exec_y_when_autoconstructing (integer_empty exec_yankdup) integer_div exec_pop (boolean_empty boolean_not exec_noop integer_shove integer_max boolean_eq boolean_dup_items exec_while () integer_dup_items boolean_yankdup in3 boolean_invert_first_then_and integer_gte) exec_eq integer_rot integer_dup_times boolean_invert_first_then_and exec_pop (exec_do*range (exec_do*times (boolean_stackdepth) boolean_not exec_do*range () integer_dup boolean_empty integer_stackdepth exec_shove (integer_swap boolean_stackdepth exec_swap () (tagged_563) in3 exec_if () (exec_dup () boolean_frominteger)) integer_gt exec_when () integer_gt) integer_fromboolean exec_yank) integer_lt integer_gte) integer_max exec_k_when_autoconstructing (exec_eq exec_eq) (exec_when (exec_swap () () integer_empty exec_y () integer_add exec_s (exec_do*count (integer_lte) exec_noop) () ()))) ()) ()))) () ()))
Errors: [1 1 0 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 94
Size: 137
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.452
Median total errors in population: 10
Error averages by case: (0.945 0.951 0.525 0.936 0.934 0.738 0.928 0.624 0.935 0.936)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.699
Average program size in population (points): 100.318
Average percent parens in population: 0.294
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4108157
--- Timings ---
Current time: 1559593840471 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 47.3%
Fitness Testing:      5.0 seconds, 35.4%
Report:               2.4 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -42                 | Program output: -42                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: -1                 
Correct output: -1                  | Program output: 9                  
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 79                 
Correct output: 31                  | Program output: 31                 
Correct output: 42                  | Program output: 100                
Correct output: 15                  | Program output: 99                 
Correct output: 13                  | Program output: 59                 
Correct output: 33                  | Program output: 60                 
Correct output: 13                  | Program output: 74                 
Correct output: 9                   | Program output: 26                 
Correct output: 37                  | Program output: 50                 
Correct output: 17                  | Program output: 99                 
Correct output: 20                  | Program output: 75                 
Correct output: 5                   | Program output: 78                 
Correct output: 69                  | Program output: 69                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 70                 
Correct output: 5                   | Program output: 33                 
Correct output: 12                  | Program output: 86                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 76                 
Correct output: 1                   | Program output: 54                 
Correct output: -80                 | Program output: 100                
Correct output: -56                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -49                 | Program output: 5                  
Correct output: -72                 | Program output: 93                 
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: 58                 
Correct output: -69                 | Program output: 46                 
Correct output: -89                 | Program output: 81                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 97                 
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -63                 | Program output: -59                
Correct output: 32                  | Program output: 72                 
Correct output: -91                 | Program output: -38                
Correct output: -58                 | Program output: 87                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: 52                 
Correct output: -38                 | Program output: -38                
Correct output: -68                 | Program output: 51                 
Correct output: 2                   | Program output: 41                 
Correct output: -80                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -64                 | Program output: -52                
Correct output: -39                 | Program output: 53                 
Correct output: 2                   | Program output: 17                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 11                 
Correct output: -34                 | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: -84                 | Program output: -64                
Correct output: -42                 | Program output: 91                 
Correct output: -49                 | Program output: 46                 
Correct output: -68                 | Program output: 42                 
Correct output: -83                 | Program output: 76                 
Correct output: -37                 | Program output: 76                 
Correct output: -44                 | Program output: -24                
Correct output: -69                 | Program output: 36                 
Correct output: -4                  | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -83                 | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: 4                   | Program output: 38                 
Correct output: -79                 | Program output: -50                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -23                
Correct output: -43                 | Program output: 99                 
Correct output: -86                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 70                 
Correct output: -95                 | Program output: -33                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_246} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction -97} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction 97} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s})
Lexicase best program: (exec_rot (exec_y_when_autoconstructing (integer_rot exec_while (integer_sub tag_exec_246 (integer_swap)) exec_noop) integer_shove integer_gte integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_gte exec_do*range (boolean_flush integer_max print_boolean in4 print_integer boolean_invert_first_then_and) integer_mod boolean_yankdup exec_yank) (boolean_stackdepth integer_eq integer_min exec_y () exec_do*range (exec_yankdup) in1 boolean_and exec_rot (exec_yank exec_pop (exec_yankdup exec_dup (exec_if (integer_dup print_newline exec_s_when_autoconstructing (integer_sub exec_s_when_autoconstructing (integer_stackdepth integer_dup exec_if (integer_inc integer_div boolean_or integer_shove -97 integer_fromboolean) (boolean_xor integer_gt boolean_and boolean_stackdepth boolean_shove exec_do*times () boolean_dup exec_s_when_autoconstructing (boolean_shove integer_lt integer_stackdepth 97) (integer_shove integer_gt exec_yank integer_swap boolean_frominteger) (boolean_empty boolean_stackdepth print_boolean exec_yankdup exec_dup () boolean_eq in2)) integer_dup) (boolean_rot exec_s_when_autoconstructing (integer_eq) (boolean_shove) (in1 exec_s (integer_rot exec_do*while (exec_do*range (boolean_and boolean_swap integer_min exec_s () () ()))) () ())) ()) () ()) ()))) () ()) ())
Lexicase best errors: [1 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 136
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_246} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction -97} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction 97} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s})
Zero cases best program: (exec_rot (exec_y_when_autoconstructing (integer_rot exec_while (integer_sub tag_exec_246 (integer_swap)) exec_noop) integer_shove integer_gte integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_gte exec_do*range (boolean_flush integer_max print_boolean in4 print_integer boolean_invert_first_then_and) integer_mod boolean_yankdup exec_yank) (boolean_stackdepth integer_eq integer_min exec_y () exec_do*range (exec_yankdup) in1 boolean_and exec_rot (exec_yank exec_pop (exec_yankdup exec_dup (exec_if (integer_dup print_newline exec_s_when_autoconstructing (integer_sub exec_s_when_autoconstructing (integer_stackdepth integer_dup exec_if (integer_inc integer_div boolean_or integer_shove -97 integer_fromboolean) (boolean_xor integer_gt boolean_and boolean_stackdepth boolean_shove exec_do*times () boolean_dup exec_s_when_autoconstructing (boolean_shove integer_lt integer_stackdepth 97) (integer_shove integer_gt exec_yank integer_swap boolean_frominteger) (boolean_empty boolean_stackdepth print_boolean exec_yankdup exec_dup () boolean_eq in2)) integer_dup) (boolean_rot exec_s_when_autoconstructing (integer_eq) (boolean_shove) (in1 exec_s (integer_rot exec_do*while (exec_do*range (boolean_and boolean_swap integer_min exec_s () () ()))) () ())) ()) () ()) ()))) () ()) ())
Zero cases best errors: [1 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 136
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 138 230 103 132 491 104 630 630 132)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (232 138 230 103 132 491 104 630 630 132)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 2, :instruction tagged_707} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_902} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_773} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_942} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_442} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction 15} {:close 1, :instruction in2} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte})
Best program: (in1 print_integer integer_swap integer_swap print_integer boolean_yank integer_dec tagged_707 integer_inc in2 boolean_dup_items boolean_yank exec_swap (exec_dup () exec_rot (integer_rot) (exec_dup_items exec_do*count (exec_k_when_autoconstructing () (integer_inc exec_rot (exec_yank integer_div) (tagged_902 boolean_pop integer_swap boolean_eq integer_mod integer_dup exec_y (integer_dup_times) boolean_stackdepth) () boolean_not integer_dec exec_do*count (tag_exec_773 (integer_div exec_pop (integer_min boolean_empty integer_dup_items in1 integer_dup exec_swap (exec_s () (integer_max exec_yankdup exec_y_when_autoconstructing (boolean_dup_items integer_sub integer_dup_items exec_stackdepth exec_s (integer_sub integer_fromboolean exec_if (print_integer boolean_empty exec_s (boolean_yank) (boolean_dup_times in2) (exec_flush integer_rot exec_k (print_exec (boolean_eq boolean_invert_first_then_and exec_pop (tag_integer_942 integer_div exec_do*times (integer_dup exec_eq integer_fromboolean integer_swap) integer_dec exec_stackdepth exec_do*while (integer_dup tag_boolean_442 exec_rot () (exec_pop (integer_eq boolean_eq boolean_invert_second_then_and integer_dup_items) boolean_stackdepth boolean_frominteger) () exec_k_when_autoconstructing (exec_k (print_integer exec_when () exec_yank) (integer_gte) integer_sub exec_eq) (boolean_invert_second_then_and exec_when (exec_y () integer_add 15 in2) integer_fromboolean)) boolean_shove exec_do*count (integer_lte print_integer integer_lte)))) ())) ()) () ())) ()) ())))))) ()) ())
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 109
Size: 158
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.178
Median total errors in population: 7
Error averages by case: (0.768 0.862 0.77 0.897 0.868 0.509 0.896 0.37 0.37 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.064
Average program size in population (points): 125.741
Average percent parens in population: 0.291
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4833594
--- Timings ---
Current time: 1559593843166 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.9 seconds, 47.5%
Fitness Testing:      5.8 seconds, 34.8%
Report:               2.8 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 656
Test mean error for best: 0.65600
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 2                  
Correct output: -42                 | Program output: -36                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: 74                 
Correct output: -1                  | Program output: -1                 
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 80                 
Correct output: 17                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 69                  | Program output: 79                 
Correct output: 6                   | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 100                
Correct output: 59                  | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -80                 | Program output: -42                
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -61                
Correct output: -67                 | Program output: 45                 
Correct output: -49                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 29                 
Correct output: -82                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -69                 | Program output: -50                
Correct output: -89                 | Program output: -11                
Correct output: -40                 | Program output: 63                 
Correct output: -61                 | Program output: -28                
Correct output: -78                 | Program output: -32                
Correct output: -46                 | Program output: -6                 
Correct output: -27                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 32                  | Program output: 45                 
Correct output: -91                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 38                 
Correct output: -83                 | Program output: -71                
Correct output: -17                 | Program output: -2                 
Correct output: -78                 | Program output: -13                
Correct output: -38                 | Program output: -37                
Correct output: -68                 | Program output: 91                 
Correct output: 2                   | Program output: 2                  
Correct output: -80                 | Program output: -60                
Correct output: -86                 | Program output: 76                 
Correct output: -64                 | Program output: 28                 
Correct output: -39                 | Program output: -39                
Correct output: 2                   | Program output: 70                 
Correct output: -96                 | Program output: -42                
Correct output: -91                 | Program output: -69                
Correct output: -61                 | Program output: 80                 
Correct output: -34                 | Program output: -30                
Correct output: 24                  | Program output: 70                 
Correct output: -84                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -49                 | Program output: 63                 
Correct output: -68                 | Program output: 13                 
Correct output: -83                 | Program output: -18                
Correct output: -37                 | Program output: -15                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: 14                 
Correct output: -4                  | Program output: -4                 
Correct output: -28                 | Program output: 46                 
Correct output: -83                 | Program output: -62                
Correct output: -93                 | Program output: 19                 
Correct output: 4                   | Program output: 64                 
Correct output: -79                 | Program output: -63                
Correct output: -81                 | Program output: 67                 
Correct output: -76                 | Program output: -50                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: 47                 
Correct output: -92                 | Program output: -57                
Correct output: 44                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction tagged_914} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_dup_items integer_dup_times in2 tagged_914 integer_fromboolean boolean_dup_times exec_do*range (integer_eq boolean_frominteger) boolean_yankdup exec_s_when_autoconstructing (in3 exec_swap (print_integer boolean_and boolean_frominteger boolean_invert_first_then_and boolean_rot integer_shove) () boolean_rot) (exec_empty boolean_not integer_max) (exec_pop (in1 boolean_and integer_lte integer_yankdup integer_add boolean_dup_items) boolean_dup_times) integer_fromboolean integer_add integer_empty exec_rot (boolean_yankdup) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction tagged_914} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_dup_items integer_dup_times in2 tagged_914 integer_fromboolean boolean_dup_times exec_do*range (integer_eq boolean_frominteger) boolean_yankdup exec_s_when_autoconstructing (in3 exec_swap (print_integer boolean_and boolean_frominteger boolean_invert_first_then_and boolean_rot integer_shove) () boolean_rot) (exec_empty boolean_not integer_max) (exec_pop (in1 boolean_and integer_lte integer_yankdup integer_add boolean_dup_items) boolean_dup_times) integer_fromboolean integer_add integer_empty exec_rot (boolean_yankdup) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 109 108 570 580 523 108 108 110 152)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (109 109 108 570 580 523 108 108 110 152)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 1, :instruction 97} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction tagged_541} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s})
Best program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 100
Size: 139
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 7.523
Median total errors in population: 7
Error averages by case: (0.891 0.891 0.892 0.43 0.42 0.477 0.892 0.892 0.89 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.912
Average program size in population (points): 124.736
Average percent parens in population: 0.293
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5489663
--- Timings ---
Current time: 1559593845746 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 46.9%
Fitness Testing:      6.4 seconds, 33.5%
Report:               3.7 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 139


Auto-simplifying with starting size: 139
step: 0
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 500
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 1000
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 1500
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 2000
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 2500
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 3000
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 3500
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 4000
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 4500
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

step: 5000
program: (exec_dup_items exec_y_when_autoconstructing (exec_while (integer_swap)) exec_when (exec_noop) exec_y_when_autoconstructing (integer_mult integer_gte integer_dup_items integer_gte exec_k_when_autoconstructing (boolean_eq in3 integer_swap) (exec_empty) integer_swap boolean_flush integer_gt) integer_gte integer_gte in2 print_boolean integer_shove print_integer exec_yank boolean_pop exec_yankdup integer_lt integer_eq exec_y_when_autoconstructing (integer_min exec_y () exec_do*range (in1 exec_do*while () boolean_and exec_rot (exec_pop (exec_flush boolean_dup exec_if (boolean_dup_times) (print_newline boolean_rot exec_s_when_autoconstructing (integer_sub print_exec (integer_add exec_s_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_div boolean_or boolean_or integer_shove boolean_frominteger) (integer_swap boolean_dup_items integer_fromboolean) (integer_gt exec_do*count () in1 integer_div boolean_and boolean_shove integer_max exec_do*times () boolean_xor exec_s_when_autoconstructing (boolean_shove boolean_stackdepth integer_lt in3) (exec_dup_times (exec_do*times (integer_div 97) integer_shove integer_gt exec_dup_items integer_swap print_boolean boolean_swap exec_dup_items boolean_stackdepth) integer_yankdup) (exec_do*range (integer_dup) tagged_541 exec_when () boolean_yank integer_eq) boolean_shove) exec_do*count (exec_do*while (exec_do*range (boolean_and exec_s () () ()))))) () ()))) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 139

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 656
Test mean error for best: 0.65600
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 2                  
Correct output: -42                 | Program output: -36                
Correct output: 24                  | Program output: 81                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -72                 | Program output: -72                
Correct output: -3                  | Program output: -3                 
Correct output: -1                  | Program output: 74                 
Correct output: -1                  | Program output: -1                 
Correct output: 48                  | Program output: 48                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: 65                  | Program output: 65                 
Correct output: 37                  | Program output: 37                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 15                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 98                 
Correct output: 13                  | Program output: 13                 
Correct output: 9                   | Program output: 9                  
Correct output: 37                  | Program output: 80                 
Correct output: 17                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 69                  | Program output: 79                 
Correct output: 6                   | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 18                  | Program output: 100                
Correct output: 59                  | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -80                 | Program output: -42                
Correct output: -56                 | Program output: -2                 
Correct output: -78                 | Program output: -61                
Correct output: -67                 | Program output: 45                 
Correct output: -49                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: 29                 
Correct output: -82                 | Program output: 91                 
Correct output: -26                 | Program output: -26                
Correct output: -69                 | Program output: -50                
Correct output: -89                 | Program output: -11                
Correct output: -40                 | Program output: 63                 
Correct output: -61                 | Program output: -28                
Correct output: -78                 | Program output: -32                
Correct output: -46                 | Program output: -6                 
Correct output: -27                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 32                  | Program output: 45                 
Correct output: -91                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 38                 
Correct output: -83                 | Program output: -71                
Correct output: -17                 | Program output: -2                 
Correct output: -78                 | Program output: -13                
Correct output: -38                 | Program output: -37                
Correct output: -68                 | Program output: 91                 
Correct output: 2                   | Program output: 2                  
Correct output: -80                 | Program output: -60                
Correct output: -86                 | Program output: 76                 
Correct output: -64                 | Program output: 28                 
Correct output: -39                 | Program output: -39                
Correct output: 2                   | Program output: 70                 
Correct output: -96                 | Program output: -42                
Correct output: -91                 | Program output: -69                
Correct output: -61                 | Program output: 80                 
Correct output: -34                 | Program output: -30                
Correct output: 24                  | Program output: 70                 
Correct output: -84                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -49                 | Program output: 63                 
Correct output: -68                 | Program output: 13                 
Correct output: -83                 | Program output: -18                
Correct output: -37                 | Program output: -15                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: 14                 
Correct output: -4                  | Program output: -4                 
Correct output: -28                 | Program output: 46                 
Correct output: -83                 | Program output: -62                
Correct output: -93                 | Program output: 19                 
Correct output: 4                   | Program output: 64                 
Correct output: -79                 | Program output: -63                
Correct output: -81                 | Program output: 67                 
Correct output: -76                 | Program output: -50                
Correct output: -43                 | Program output: -43                
Correct output: -86                 | Program output: 47                 
Correct output: -92                 | Program output: -57                
Correct output: 44                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 13                 
;;******************************
