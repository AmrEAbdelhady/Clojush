Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-25 -25 -25 90] -25] [[-26 -26 -10 -26] -26] [[25 25 -79 25] -79] [[63 63 63 -69] -69] [[65 65 -95 65] -95] [[6 6 6 -75] -75] [[-47 -47 -47 -66] -66] [[-7 53 53 53] -7] [[74 74 74 43] 43] [[-99 -99 45 -99] -99] [(-94 -94 -94 -94) -94] [(34 34 34 34) 34] [(81 81 81 81) 81] [(-39 -39 -39 -39) -39] [(-60 -60 -60 -60) -60] [(6 10 26 60) 6] [(23 88 45 30) 23] [(25 85 49 48) 25] [(61 78 17 9) 9] [(50 83 54 12) 12] [(48 82 96 69) 48] [(83 96 53 69) 53] [(88 1 49 100) 1] [(4 67 69 50) 4] [(0 62 50 74) 0] [(38 2 40 33) 2] [(39 46 40 54) 39] [(68 44 50 55) 44] [(72 23 22 51) 22] [(50 23 65 52) 23] [(89 4 90 35) 4] [(71 52 0 95) 0] [(22 6 73 65) 6] [(7 25 16 77) 7] [(97 20 46 14) 14] [(60 70 -80 58) -80] [(-93 -91 3 -6) -93] [(-20 3 27 -15) -20] [(-62 99 -32 -90) -90] [(82 17 10 41) 10] [(-79 -70 69 -26) -79] [(3 -78 50 38) -78] [(38 50 55 -49) -49] [(67 -18 -45 -61) -61] [(87 -44 -57 -87) -87] [(-92 -34 82 9) -92] [(9 6 -46 -1) -46] [(-95 29 -98 69) -98] [(17 -98 8 -58) -98] [(41 1 63 -55) -55] [(-77 49 87 96) -77] [(61 37 0 -12) -12] [(50 94 -71 -60) -71] [(-15 18 -55 34) -55] [(56 -42 -13 68) -42] [(-45 -58 96 20) -58] [(87 92 -58 12) -58] [(71 45 -59 23) -59] [(22 99 91 -89) -89] [(95 -17 -18 -66) -66] [(13 -19 -77 44) -77] [(93 -41 36 91) -41] [(-15 -49 0 -60) -60] [(-90 -86 47 47) -90] [(81 15 -71 19) -71] [(84 16 6 -67) -67] [(-19 -25 95 97) -25] [(90 47 21 -39) -39] [(-36 -33 -6 62) -36] [(-73 62 74 -100) -100] [(71 -28 63 -17) -28] [(77 61 -32 -94) -94] [(-45 12 -38 20) -45] [(32 -16 66 -98) -98] [(97 84 -34 7) -34] [(12 -97 -28 60) -97] [(25 -71 -92 -11) -92] [(-3 -39 20 -48) -48] [(-23 -11 53 64) -23] [(57 8 -99 -43) -99] [(100 97 26 -57) -57] [(92 -83 46 -57) -83] [(88 35 -42 15) -42] [(44 78 -16 -39) -39] [(-47 70 60 -30) -47] [(-43 -92 0 -53) -92] [(44 -69 75 -61) -69] [(83 -29 24 -32) -32] [(-68 -23 -90 97) -90] [(52 72 -44 7) -44] [(98 -36 -85 -42) -85] [(32 -12 4 39) -12] [(91 100 78 -89) -89] [(40 -8 70 89) -8] [(-96 42 16 -45) -96])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-25 -25 -25 90] -25]
Train Case:   6 | Input/Output: [[-26 -26 -10 -26] -26]
Train Case:   7 | Input/Output: [[25 25 -79 25] -79]
Train Case:   8 | Input/Output: [[63 63 63 -69] -69]
Train Case:   9 | Input/Output: [[65 65 -95 65] -95]
Train Case:  10 | Input/Output: [[6 6 6 -75] -75]
Train Case:  11 | Input/Output: [[-47 -47 -47 -66] -66]
Train Case:  12 | Input/Output: [[-7 53 53 53] -7]
Train Case:  13 | Input/Output: [[74 74 74 43] 43]
Train Case:  14 | Input/Output: [[-99 -99 45 -99] -99]
Train Case:  15 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  16 | Input/Output: [(34 34 34 34) 34]
Train Case:  17 | Input/Output: [(81 81 81 81) 81]
Train Case:  18 | Input/Output: [(-39 -39 -39 -39) -39]
Train Case:  19 | Input/Output: [(-60 -60 -60 -60) -60]
Train Case:  20 | Input/Output: [(6 10 26 60) 6]
Train Case:  21 | Input/Output: [(23 88 45 30) 23]
Train Case:  22 | Input/Output: [(25 85 49 48) 25]
Train Case:  23 | Input/Output: [(61 78 17 9) 9]
Train Case:  24 | Input/Output: [(50 83 54 12) 12]
Train Case:  25 | Input/Output: [(48 82 96 69) 48]
Train Case:  26 | Input/Output: [(83 96 53 69) 53]
Train Case:  27 | Input/Output: [(88 1 49 100) 1]
Train Case:  28 | Input/Output: [(4 67 69 50) 4]
Train Case:  29 | Input/Output: [(0 62 50 74) 0]
Train Case:  30 | Input/Output: [(38 2 40 33) 2]
Train Case:  31 | Input/Output: [(39 46 40 54) 39]
Train Case:  32 | Input/Output: [(68 44 50 55) 44]
Train Case:  33 | Input/Output: [(72 23 22 51) 22]
Train Case:  34 | Input/Output: [(50 23 65 52) 23]
Train Case:  35 | Input/Output: [(89 4 90 35) 4]
Train Case:  36 | Input/Output: [(71 52 0 95) 0]
Train Case:  37 | Input/Output: [(22 6 73 65) 6]
Train Case:  38 | Input/Output: [(7 25 16 77) 7]
Train Case:  39 | Input/Output: [(97 20 46 14) 14]
Train Case:  40 | Input/Output: [(60 70 -80 58) -80]
Train Case:  41 | Input/Output: [(-93 -91 3 -6) -93]
Train Case:  42 | Input/Output: [(-20 3 27 -15) -20]
Train Case:  43 | Input/Output: [(-62 99 -32 -90) -90]
Train Case:  44 | Input/Output: [(82 17 10 41) 10]
Train Case:  45 | Input/Output: [(-79 -70 69 -26) -79]
Train Case:  46 | Input/Output: [(3 -78 50 38) -78]
Train Case:  47 | Input/Output: [(38 50 55 -49) -49]
Train Case:  48 | Input/Output: [(67 -18 -45 -61) -61]
Train Case:  49 | Input/Output: [(87 -44 -57 -87) -87]
Train Case:  50 | Input/Output: [(-92 -34 82 9) -92]
Train Case:  51 | Input/Output: [(9 6 -46 -1) -46]
Train Case:  52 | Input/Output: [(-95 29 -98 69) -98]
Train Case:  53 | Input/Output: [(17 -98 8 -58) -98]
Train Case:  54 | Input/Output: [(41 1 63 -55) -55]
Train Case:  55 | Input/Output: [(-77 49 87 96) -77]
Train Case:  56 | Input/Output: [(61 37 0 -12) -12]
Train Case:  57 | Input/Output: [(50 94 -71 -60) -71]
Train Case:  58 | Input/Output: [(-15 18 -55 34) -55]
Train Case:  59 | Input/Output: [(56 -42 -13 68) -42]
Train Case:  60 | Input/Output: [(-45 -58 96 20) -58]
Train Case:  61 | Input/Output: [(87 92 -58 12) -58]
Train Case:  62 | Input/Output: [(71 45 -59 23) -59]
Train Case:  63 | Input/Output: [(22 99 91 -89) -89]
Train Case:  64 | Input/Output: [(95 -17 -18 -66) -66]
Train Case:  65 | Input/Output: [(13 -19 -77 44) -77]
Train Case:  66 | Input/Output: [(93 -41 36 91) -41]
Train Case:  67 | Input/Output: [(-15 -49 0 -60) -60]
Train Case:  68 | Input/Output: [(-90 -86 47 47) -90]
Train Case:  69 | Input/Output: [(81 15 -71 19) -71]
Train Case:  70 | Input/Output: [(84 16 6 -67) -67]
Train Case:  71 | Input/Output: [(-19 -25 95 97) -25]
Train Case:  72 | Input/Output: [(90 47 21 -39) -39]
Train Case:  73 | Input/Output: [(-36 -33 -6 62) -36]
Train Case:  74 | Input/Output: [(-73 62 74 -100) -100]
Train Case:  75 | Input/Output: [(71 -28 63 -17) -28]
Train Case:  76 | Input/Output: [(77 61 -32 -94) -94]
Train Case:  77 | Input/Output: [(-45 12 -38 20) -45]
Train Case:  78 | Input/Output: [(32 -16 66 -98) -98]
Train Case:  79 | Input/Output: [(97 84 -34 7) -34]
Train Case:  80 | Input/Output: [(12 -97 -28 60) -97]
Train Case:  81 | Input/Output: [(25 -71 -92 -11) -92]
Train Case:  82 | Input/Output: [(-3 -39 20 -48) -48]
Train Case:  83 | Input/Output: [(-23 -11 53 64) -23]
Train Case:  84 | Input/Output: [(57 8 -99 -43) -99]
Train Case:  85 | Input/Output: [(100 97 26 -57) -57]
Train Case:  86 | Input/Output: [(92 -83 46 -57) -83]
Train Case:  87 | Input/Output: [(88 35 -42 15) -42]
Train Case:  88 | Input/Output: [(44 78 -16 -39) -39]
Train Case:  89 | Input/Output: [(-47 70 60 -30) -47]
Train Case:  90 | Input/Output: [(-43 -92 0 -53) -92]
Train Case:  91 | Input/Output: [(44 -69 75 -61) -69]
Train Case:  92 | Input/Output: [(83 -29 24 -32) -32]
Train Case:  93 | Input/Output: [(-68 -23 -90 97) -90]
Train Case:  94 | Input/Output: [(52 72 -44 7) -44]
Train Case:  95 | Input/Output: [(98 -36 -85 -42) -85]
Train Case:  96 | Input/Output: [(32 -12 4 39) -12]
Train Case:  97 | Input/Output: [(91 100 78 -89) -89]
Train Case:  98 | Input/Output: [(40 -8 70 89) -8]
Train Case:  99 | Input/Output: [(-96 42 16 -45) -96]
Test Case:   0 | Input/Output: [[84 62 84 84] 62]
Test Case:   1 | Input/Output: [[46 -9 -9 -9] -9]
Test Case:   2 | Input/Output: [[-77 -77 -77 -31] -77]
Test Case:   3 | Input/Output: [[-70 -70 -77 -70] -77]
Test Case:   4 | Input/Output: [[93 93 67 93] 67]
Test Case:   5 | Input/Output: [[50 24 50 50] 24]
Test Case:   6 | Input/Output: [[-34 -34 25 -34] -34]
Test Case:   7 | Input/Output: [[-95 -95 -39 -95] -95]
Test Case:   8 | Input/Output: [[67 -62 -62 -62] -62]
Test Case:   9 | Input/Output: [[-87 22 -87 -87] -87]
Test Case:  10 | Input/Output: [[87 87 87 33] 33]
Test Case:  11 | Input/Output: [[63 78 63 63] 63]
Test Case:  12 | Input/Output: [[66 66 66 -63] -63]
Test Case:  13 | Input/Output: [[92 -45 -45 -45] -45]
Test Case:  14 | Input/Output: [[94 94 94 78] 78]
Test Case:  15 | Input/Output: [[28 28 28 -61] -61]
Test Case:  16 | Input/Output: [[-89 -89 -89 48] -89]
Test Case:  17 | Input/Output: [[-83 -83 -37 -83] -83]
Test Case:  18 | Input/Output: [[37 4 37 37] 4]
Test Case:  19 | Input/Output: [[40 40 34 40] 34]
Test Case:  20 | Input/Output: [[-37 -37 -37 -15] -37]
Test Case:  21 | Input/Output: [[-75 71 71 71] -75]
Test Case:  22 | Input/Output: [[26 74 26 26] 26]
Test Case:  23 | Input/Output: [[9 9 -2 9] -2]
Test Case:  24 | Input/Output: [[70 -4 70 70] -4]
Test Case:  25 | Input/Output: [[3 3 -68 3] -68]
Test Case:  26 | Input/Output: [[74 74 74 52] 52]
Test Case:  27 | Input/Output: [[76 76 76 -5] -5]
Test Case:  28 | Input/Output: [[-31 35 -31 -31] -31]
Test Case:  29 | Input/Output: [[48 51 48 48] 48]
Test Case:  30 | Input/Output: [[-5 -38 -38 -38] -38]
Test Case:  31 | Input/Output: [[-32 -32 53 -32] -32]
Test Case:  32 | Input/Output: [[-1 -66 -66 -66] -66]
Test Case:  33 | Input/Output: [[42 42 -98 42] -98]
Test Case:  34 | Input/Output: [[-25 86 86 86] -25]
Test Case:  35 | Input/Output: [[-90 -91 -91 -91] -91]
Test Case:  36 | Input/Output: [[14 14 14 -13] -13]
Test Case:  37 | Input/Output: [[24 24 24 17] 17]
Test Case:  38 | Input/Output: [[69 -10 -10 -10] -10]
Test Case:  39 | Input/Output: [[-45 46 46 46] -45]
Test Case:  40 | Input/Output: [[-8 -8 -4 -8] -8]
Test Case:  41 | Input/Output: [[2 2 87 2] 2]
Test Case:  42 | Input/Output: [[60 64 60 60] 60]
Test Case:  43 | Input/Output: [[-20 87 -20 -20] -20]
Test Case:  44 | Input/Output: [[79 79 -89 79] -89]
Test Case:  45 | Input/Output: [[98 -48 -48 -48] -48]
Test Case:  46 | Input/Output: [[-73 -73 -73 -31] -73]
Test Case:  47 | Input/Output: [[-24 13 -24 -24] -24]
Test Case:  48 | Input/Output: [[54 54 25 54] 25]
Test Case:  49 | Input/Output: [[64 64 -88 64] -88]
Test Case:  50 | Input/Output: [[-5 -5 -5 48] -5]
Test Case:  51 | Input/Output: [[60 60 60 29] 29]
Test Case:  52 | Input/Output: [[69 -84 69 69] -84]
Test Case:  53 | Input/Output: [[22 22 22 -16] -16]
Test Case:  54 | Input/Output: [[94 -9 94 94] -9]
Test Case:  55 | Input/Output: [[29 -92 -92 -92] -92]
Test Case:  56 | Input/Output: [[1 -88 -88 -88] -88]
Test Case:  57 | Input/Output: [[-73 80 80 80] -73]
Test Case:  58 | Input/Output: [[-52 -52 -52 -19] -52]
Test Case:  59 | Input/Output: [[74 74 74 -46] -46]
Test Case:  60 | Input/Output: [[38 -46 -46 -46] -46]
Test Case:  61 | Input/Output: [[45 45 45 -70] -70]
Test Case:  62 | Input/Output: [[-68 -68 -68 -20] -68]
Test Case:  63 | Input/Output: [[-44 -44 -96 -44] -96]
Test Case:  64 | Input/Output: [[-28 62 62 62] -28]
Test Case:  65 | Input/Output: [[24 24 -45 24] -45]
Test Case:  66 | Input/Output: [[-43 81 81 81] -43]
Test Case:  67 | Input/Output: [[83 37 83 83] 37]
Test Case:  68 | Input/Output: [[-40 -40 -40 91] -40]
Test Case:  69 | Input/Output: [[98 88 88 88] 88]
Test Case:  70 | Input/Output: [[54 54 -88 54] -88]
Test Case:  71 | Input/Output: [[-45 -45 51 -45] -45]
Test Case:  72 | Input/Output: [[-10 -10 -25 -10] -25]
Test Case:  73 | Input/Output: [[-99 -99 -99 39] -99]
Test Case:  74 | Input/Output: [[-34 -88 -34 -34] -88]
Test Case:  75 | Input/Output: [[27 27 -2 27] -2]
Test Case:  76 | Input/Output: [[-8 39 -8 -8] -8]
Test Case:  77 | Input/Output: [[-35 -35 -35 -39] -39]
Test Case:  78 | Input/Output: [[72 -55 -55 -55] -55]
Test Case:  79 | Input/Output: [[46 10 10 10] 10]
Test Case:  80 | Input/Output: [[-9 66 -9 -9] -9]
Test Case:  81 | Input/Output: [[-7 -7 -22 -7] -22]
Test Case:  82 | Input/Output: [[-79 -79 -79 81] -79]
Test Case:  83 | Input/Output: [[57 -86 57 57] -86]
Test Case:  84 | Input/Output: [[28 -83 28 28] -83]
Test Case:  85 | Input/Output: [[40 -6 -6 -6] -6]
Test Case:  86 | Input/Output: [[54 54 54 97] 54]
Test Case:  87 | Input/Output: [[11 11 -74 11] -74]
Test Case:  88 | Input/Output: [[-26 -26 74 -26] -26]
Test Case:  89 | Input/Output: [[-23 -23 -23 80] -23]
Test Case:  90 | Input/Output: [[79 -72 79 79] -72]
Test Case:  91 | Input/Output: [[62 62 62 -52] -52]
Test Case:  92 | Input/Output: [[-37 -37 -37 -71] -71]
Test Case:  93 | Input/Output: [[100 100 -24 100] -24]
Test Case:  94 | Input/Output: [[-52 -52 -52 24] -52]
Test Case:  95 | Input/Output: [[-48 75 -48 -48] -48]
Test Case:  96 | Input/Output: [[53 53 53 -23] -23]
Test Case:  97 | Input/Output: [[22 22 22 -85] -85]
Test Case:  98 | Input/Output: [[45 27 45 45] 27]
Test Case:  99 | Input/Output: [[-92 62 62 62] -92]
Test Case: 100 | Input/Output: [(68 68 68 68) 68]
Test Case: 101 | Input/Output: [(11 11 11 11) 11]
Test Case: 102 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 103 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 104 | Input/Output: [(71 71 71 71) 71]
Test Case: 105 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 106 | Input/Output: [(65 65 65 65) 65]
Test Case: 107 | Input/Output: [(7 7 7 7) 7]
Test Case: 108 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 109 | Input/Output: [(45 45 45 45) 45]
Test Case: 110 | Input/Output: [(15 15 15 15) 15]
Test Case: 111 | Input/Output: [(51 51 51 51) 51]
Test Case: 112 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 113 | Input/Output: [(78 78 78 78) 78]
Test Case: 114 | Input/Output: [(45 45 45 45) 45]
Test Case: 115 | Input/Output: [(5 5 5 5) 5]
Test Case: 116 | Input/Output: [(64 64 64 64) 64]
Test Case: 117 | Input/Output: [(95 95 95 95) 95]
Test Case: 118 | Input/Output: [(65 65 65 65) 65]
Test Case: 119 | Input/Output: [(17 17 17 17) 17]
Test Case: 120 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 121 | Input/Output: [(37 37 37 37) 37]
Test Case: 122 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 123 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 124 | Input/Output: [(67 67 67 67) 67]
Test Case: 125 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 126 | Input/Output: [(21 21 21 21) 21]
Test Case: 127 | Input/Output: [(11 11 11 11) 11]
Test Case: 128 | Input/Output: [(84 84 84 84) 84]
Test Case: 129 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 130 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 131 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 132 | Input/Output: [(37 37 37 37) 37]
Test Case: 133 | Input/Output: [(19 19 19 19) 19]
Test Case: 134 | Input/Output: [(32 32 32 32) 32]
Test Case: 135 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 136 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 137 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 138 | Input/Output: [(35 35 35 35) 35]
Test Case: 139 | Input/Output: [(23 23 23 23) 23]
Test Case: 140 | Input/Output: [(78 78 78 78) 78]
Test Case: 141 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 142 | Input/Output: [(24 24 24 24) 24]
Test Case: 143 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 144 | Input/Output: [(88 88 88 88) 88]
Test Case: 145 | Input/Output: [(68 68 68 68) 68]
Test Case: 146 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 147 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 148 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 149 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 150 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 151 | Input/Output: [(53 53 53 53) 53]
Test Case: 152 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 153 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 154 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 155 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 156 | Input/Output: [(15 15 15 15) 15]
Test Case: 157 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 158 | Input/Output: [(57 57 57 57) 57]
Test Case: 159 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 160 | Input/Output: [(48 48 48 48) 48]
Test Case: 161 | Input/Output: [(37 37 37 37) 37]
Test Case: 162 | Input/Output: [(85 85 85 85) 85]
Test Case: 163 | Input/Output: [(29 29 29 29) 29]
Test Case: 164 | Input/Output: [(97 97 97 97) 97]
Test Case: 165 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 166 | Input/Output: [(26 26 26 26) 26]
Test Case: 167 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 168 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 169 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 170 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 171 | Input/Output: [(49 49 49 49) 49]
Test Case: 172 | Input/Output: [(37 37 37 37) 37]
Test Case: 173 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 174 | Input/Output: [(20 20 20 20) 20]
Test Case: 175 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 176 | Input/Output: [(15 15 15 15) 15]
Test Case: 177 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 178 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 179 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 180 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 181 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 182 | Input/Output: [(78 78 78 78) 78]
Test Case: 183 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 184 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 185 | Input/Output: [(97 97 97 97) 97]
Test Case: 186 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 187 | Input/Output: [(68 68 68 68) 68]
Test Case: 188 | Input/Output: [(63 63 63 63) 63]
Test Case: 189 | Input/Output: [(30 30 30 30) 30]
Test Case: 190 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 191 | Input/Output: [(20 20 20 20) 20]
Test Case: 192 | Input/Output: [(2 2 2 2) 2]
Test Case: 193 | Input/Output: [(100 100 100 100) 100]
Test Case: 194 | Input/Output: [(6 6 6 6) 6]
Test Case: 195 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 196 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 197 | Input/Output: [(32 32 32 32) 32]
Test Case: 198 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 199 | Input/Output: [(20 20 20 20) 20]
Test Case: 200 | Input/Output: [(33 46 27 34) 27]
Test Case: 201 | Input/Output: [(87 100 100 76) 76]
Test Case: 202 | Input/Output: [(59 1 75 25) 1]
Test Case: 203 | Input/Output: [(60 94 86 46) 46]
Test Case: 204 | Input/Output: [(28 3 79 48) 3]
Test Case: 205 | Input/Output: [(86 98 50 85) 50]
Test Case: 206 | Input/Output: [(36 18 56 12) 12]
Test Case: 207 | Input/Output: [(10 64 6 46) 6]
Test Case: 208 | Input/Output: [(16 9 10 4) 4]
Test Case: 209 | Input/Output: [(48 1 38 63) 1]
Test Case: 210 | Input/Output: [(90 25 3 67) 3]
Test Case: 211 | Input/Output: [(65 61 59 75) 59]
Test Case: 212 | Input/Output: [(73 53 26 93) 26]
Test Case: 213 | Input/Output: [(71 82 94 87) 71]
Test Case: 214 | Input/Output: [(95 5 40 45) 5]
Test Case: 215 | Input/Output: [(4 3 70 8) 3]
Test Case: 216 | Input/Output: [(65 41 83 77) 41]
Test Case: 217 | Input/Output: [(23 12 55 49) 12]
Test Case: 218 | Input/Output: [(72 89 59 65) 59]
Test Case: 219 | Input/Output: [(71 78 94 22) 22]
Test Case: 220 | Input/Output: [(64 60 89 78) 60]
Test Case: 221 | Input/Output: [(14 28 39 85) 14]
Test Case: 222 | Input/Output: [(62 42 75 9) 9]
Test Case: 223 | Input/Output: [(11 7 15 55) 7]
Test Case: 224 | Input/Output: [(98 86 21 52) 21]
Test Case: 225 | Input/Output: [(2 61 86 9) 2]
Test Case: 226 | Input/Output: [(44 100 61 50) 44]
Test Case: 227 | Input/Output: [(77 5 58 71) 5]
Test Case: 228 | Input/Output: [(31 74 25 97) 25]
Test Case: 229 | Input/Output: [(49 64 81 95) 49]
Test Case: 230 | Input/Output: [(46 67 83 62) 46]
Test Case: 231 | Input/Output: [(94 15 68 72) 15]
Test Case: 232 | Input/Output: [(23 4 21 37) 4]
Test Case: 233 | Input/Output: [(63 72 13 89) 13]
Test Case: 234 | Input/Output: [(3 0 60 82) 0]
Test Case: 235 | Input/Output: [(24 45 64 15) 15]
Test Case: 236 | Input/Output: [(75 24 56 76) 24]
Test Case: 237 | Input/Output: [(13 39 32 42) 13]
Test Case: 238 | Input/Output: [(38 68 97 97) 38]
Test Case: 239 | Input/Output: [(73 40 22 92) 22]
Test Case: 240 | Input/Output: [(0 81 12 65) 0]
Test Case: 241 | Input/Output: [(55 0 27 17) 0]
Test Case: 242 | Input/Output: [(58 98 86 29) 29]
Test Case: 243 | Input/Output: [(92 73 6 89) 6]
Test Case: 244 | Input/Output: [(93 87 17 63) 17]
Test Case: 245 | Input/Output: [(21 90 1 55) 1]
Test Case: 246 | Input/Output: [(37 98 20 69) 20]
Test Case: 247 | Input/Output: [(31 95 28 92) 28]
Test Case: 248 | Input/Output: [(91 46 35 80) 35]
Test Case: 249 | Input/Output: [(19 48 57 23) 19]
Test Case: 250 | Input/Output: [(31 32 5 20) 5]
Test Case: 251 | Input/Output: [(83 59 53 13) 13]
Test Case: 252 | Input/Output: [(97 38 82 44) 38]
Test Case: 253 | Input/Output: [(73 22 35 67) 22]
Test Case: 254 | Input/Output: [(20 15 41 89) 15]
Test Case: 255 | Input/Output: [(10 4 3 87) 3]
Test Case: 256 | Input/Output: [(33 1 12 21) 1]
Test Case: 257 | Input/Output: [(2 87 53 15) 2]
Test Case: 258 | Input/Output: [(53 7 87 48) 7]
Test Case: 259 | Input/Output: [(100 39 100 35) 35]
Test Case: 260 | Input/Output: [(50 54 100 77) 50]
Test Case: 261 | Input/Output: [(55 44 33 59) 33]
Test Case: 262 | Input/Output: [(99 27 89 14) 14]
Test Case: 263 | Input/Output: [(39 2 42 22) 2]
Test Case: 264 | Input/Output: [(35 8 73 26) 8]
Test Case: 265 | Input/Output: [(26 91 59 61) 26]
Test Case: 266 | Input/Output: [(34 21 18 85) 18]
Test Case: 267 | Input/Output: [(8 4 43 19) 4]
Test Case: 268 | Input/Output: [(72 41 69 21) 21]
Test Case: 269 | Input/Output: [(4 44 74 5) 4]
Test Case: 270 | Input/Output: [(58 18 11 52) 11]
Test Case: 271 | Input/Output: [(17 20 29 83) 17]
Test Case: 272 | Input/Output: [(18 11 3 90) 3]
Test Case: 273 | Input/Output: [(54 11 69 21) 11]
Test Case: 274 | Input/Output: [(92 87 2 4) 2]
Test Case: 275 | Input/Output: [(20 71 26 72) 20]
Test Case: 276 | Input/Output: [(88 88 16 49) 16]
Test Case: 277 | Input/Output: [(87 72 60 76) 60]
Test Case: 278 | Input/Output: [(38 79 14 99) 14]
Test Case: 279 | Input/Output: [(66 85 70 47) 47]
Test Case: 280 | Input/Output: [(3 26 95 58) 3]
Test Case: 281 | Input/Output: [(39 95 1 27) 1]
Test Case: 282 | Input/Output: [(79 68 48 99) 48]
Test Case: 283 | Input/Output: [(30 19 23 67) 19]
Test Case: 284 | Input/Output: [(49 34 75 0) 0]
Test Case: 285 | Input/Output: [(84 96 37 49) 37]
Test Case: 286 | Input/Output: [(94 28 48 98) 28]
Test Case: 287 | Input/Output: [(5 57 28 61) 5]
Test Case: 288 | Input/Output: [(75 86 79 100) 75]
Test Case: 289 | Input/Output: [(7 81 28 82) 7]
Test Case: 290 | Input/Output: [(55 91 97 68) 55]
Test Case: 291 | Input/Output: [(2 86 7 24) 2]
Test Case: 292 | Input/Output: [(65 58 18 64) 18]
Test Case: 293 | Input/Output: [(91 20 100 34) 20]
Test Case: 294 | Input/Output: [(24 25 90 84) 24]
Test Case: 295 | Input/Output: [(36 63 94 91) 36]
Test Case: 296 | Input/Output: [(34 20 26 98) 20]
Test Case: 297 | Input/Output: [(24 2 71 59) 2]
Test Case: 298 | Input/Output: [(50 47 96 97) 47]
Test Case: 299 | Input/Output: [(60 43 51 26) 26]
Test Case: 300 | Input/Output: [(11 78 26 80) 11]
Test Case: 301 | Input/Output: [(93 28 30 12) 12]
Test Case: 302 | Input/Output: [(80 14 9 73) 9]
Test Case: 303 | Input/Output: [(56 2 63 20) 2]
Test Case: 304 | Input/Output: [(91 71 88 21) 21]
Test Case: 305 | Input/Output: [(26 28 49 41) 26]
Test Case: 306 | Input/Output: [(90 69 86 99) 69]
Test Case: 307 | Input/Output: [(6 45 12 88) 6]
Test Case: 308 | Input/Output: [(19 20 56 14) 14]
Test Case: 309 | Input/Output: [(84 92 26 59) 26]
Test Case: 310 | Input/Output: [(9 41 1 1) 1]
Test Case: 311 | Input/Output: [(93 89 14 62) 14]
Test Case: 312 | Input/Output: [(45 55 68 83) 45]
Test Case: 313 | Input/Output: [(87 100 82 10) 10]
Test Case: 314 | Input/Output: [(91 31 65 52) 31]
Test Case: 315 | Input/Output: [(2 92 18 51) 2]
Test Case: 316 | Input/Output: [(75 67 46 18) 18]
Test Case: 317 | Input/Output: [(26 74 16 76) 16]
Test Case: 318 | Input/Output: [(21 17 2 34) 2]
Test Case: 319 | Input/Output: [(65 12 1 67) 1]
Test Case: 320 | Input/Output: [(81 50 76 80) 50]
Test Case: 321 | Input/Output: [(0 44 43 88) 0]
Test Case: 322 | Input/Output: [(64 14 55 35) 14]
Test Case: 323 | Input/Output: [(100 100 34 72) 34]
Test Case: 324 | Input/Output: [(57 10 71 90) 10]
Test Case: 325 | Input/Output: [(15 22 5 91) 5]
Test Case: 326 | Input/Output: [(32 17 66 86) 17]
Test Case: 327 | Input/Output: [(34 100 22 41) 22]
Test Case: 328 | Input/Output: [(64 87 49 64) 49]
Test Case: 329 | Input/Output: [(56 39 80 97) 39]
Test Case: 330 | Input/Output: [(97 7 18 68) 7]
Test Case: 331 | Input/Output: [(4 89 85 27) 4]
Test Case: 332 | Input/Output: [(19 88 14 94) 14]
Test Case: 333 | Input/Output: [(100 40 76 1) 1]
Test Case: 334 | Input/Output: [(89 77 34 91) 34]
Test Case: 335 | Input/Output: [(96 40 29 4) 4]
Test Case: 336 | Input/Output: [(20 29 37 33) 20]
Test Case: 337 | Input/Output: [(43 13 40 40) 13]
Test Case: 338 | Input/Output: [(45 51 56 66) 45]
Test Case: 339 | Input/Output: [(9 37 13 61) 9]
Test Case: 340 | Input/Output: [(78 58 98 69) 58]
Test Case: 341 | Input/Output: [(34 70 75 93) 34]
Test Case: 342 | Input/Output: [(6 88 40 23) 6]
Test Case: 343 | Input/Output: [(60 4 40 53) 4]
Test Case: 344 | Input/Output: [(73 4 41 63) 4]
Test Case: 345 | Input/Output: [(68 94 0 88) 0]
Test Case: 346 | Input/Output: [(35 69 96 57) 35]
Test Case: 347 | Input/Output: [(49 88 100 6) 6]
Test Case: 348 | Input/Output: [(40 90 60 0) 0]
Test Case: 349 | Input/Output: [(33 1 94 35) 1]
Test Case: 350 | Input/Output: [(99 5 89 43) 5]
Test Case: 351 | Input/Output: [(58 44 47 94) 44]
Test Case: 352 | Input/Output: [(29 89 43 93) 29]
Test Case: 353 | Input/Output: [(29 48 51 60) 29]
Test Case: 354 | Input/Output: [(89 56 78 88) 56]
Test Case: 355 | Input/Output: [(14 32 34 86) 14]
Test Case: 356 | Input/Output: [(71 43 40 68) 40]
Test Case: 357 | Input/Output: [(93 39 89 92) 39]
Test Case: 358 | Input/Output: [(81 98 14 84) 14]
Test Case: 359 | Input/Output: [(29 69 85 94) 29]
Test Case: 360 | Input/Output: [(44 69 63 42) 42]
Test Case: 361 | Input/Output: [(78 59 77 71) 59]
Test Case: 362 | Input/Output: [(10 50 3 57) 3]
Test Case: 363 | Input/Output: [(82 69 60 48) 48]
Test Case: 364 | Input/Output: [(70 8 92 96) 8]
Test Case: 365 | Input/Output: [(8 86 71 92) 8]
Test Case: 366 | Input/Output: [(2 3 1 13) 1]
Test Case: 367 | Input/Output: [(16 10 42 64) 10]
Test Case: 368 | Input/Output: [(8 54 77 32) 8]
Test Case: 369 | Input/Output: [(77 72 46 69) 46]
Test Case: 370 | Input/Output: [(71 23 6 3) 3]
Test Case: 371 | Input/Output: [(51 23 9 72) 9]
Test Case: 372 | Input/Output: [(85 68 67 54) 54]
Test Case: 373 | Input/Output: [(27 78 47 62) 27]
Test Case: 374 | Input/Output: [(51 64 81 88) 51]
Test Case: 375 | Input/Output: [(63 92 10 92) 10]
Test Case: 376 | Input/Output: [(64 13 55 67) 13]
Test Case: 377 | Input/Output: [(3 94 91 45) 3]
Test Case: 378 | Input/Output: [(18 93 22 87) 18]
Test Case: 379 | Input/Output: [(24 14 8 41) 8]
Test Case: 380 | Input/Output: [(41 27 81 90) 27]
Test Case: 381 | Input/Output: [(33 14 64 44) 14]
Test Case: 382 | Input/Output: [(33 37 13 57) 13]
Test Case: 383 | Input/Output: [(8 31 8 57) 8]
Test Case: 384 | Input/Output: [(14 16 21 100) 14]
Test Case: 385 | Input/Output: [(0 21 7 35) 0]
Test Case: 386 | Input/Output: [(86 13 18 32) 13]
Test Case: 387 | Input/Output: [(35 94 16 34) 16]
Test Case: 388 | Input/Output: [(86 53 11 23) 11]
Test Case: 389 | Input/Output: [(24 86 46 56) 24]
Test Case: 390 | Input/Output: [(83 74 71 43) 43]
Test Case: 391 | Input/Output: [(89 25 57 53) 25]
Test Case: 392 | Input/Output: [(24 67 60 40) 24]
Test Case: 393 | Input/Output: [(32 46 98 31) 31]
Test Case: 394 | Input/Output: [(86 10 84 100) 10]
Test Case: 395 | Input/Output: [(92 97 29 24) 24]
Test Case: 396 | Input/Output: [(4 79 58 25) 4]
Test Case: 397 | Input/Output: [(51 14 19 21) 14]
Test Case: 398 | Input/Output: [(52 56 39 9) 9]
Test Case: 399 | Input/Output: [(28 97 73 25) 25]
Test Case: 400 | Input/Output: [(-96 -7 -95 -78) -96]
Test Case: 401 | Input/Output: [(-69 93 -61 -46) -69]
Test Case: 402 | Input/Output: [(91 -13 25 16) -13]
Test Case: 403 | Input/Output: [(66 12 2 -91) -91]
Test Case: 404 | Input/Output: [(23 28 51 7) 7]
Test Case: 405 | Input/Output: [(-35 -38 25 -54) -54]
Test Case: 406 | Input/Output: [(0 -22 96 -75) -75]
Test Case: 407 | Input/Output: [(93 -76 -15 -30) -76]
Test Case: 408 | Input/Output: [(60 32 -6 -61) -61]
Test Case: 409 | Input/Output: [(83 89 98 -93) -93]
Test Case: 410 | Input/Output: [(55 74 -28 -99) -99]
Test Case: 411 | Input/Output: [(32 -78 87 43) -78]
Test Case: 412 | Input/Output: [(86 49 -22 -14) -22]
Test Case: 413 | Input/Output: [(67 -73 55 17) -73]
Test Case: 414 | Input/Output: [(-81 79 -9 76) -81]
Test Case: 415 | Input/Output: [(-70 -72 21 -87) -87]
Test Case: 416 | Input/Output: [(75 6 12 -25) -25]
Test Case: 417 | Input/Output: [(-19 1 -14 79) -19]
Test Case: 418 | Input/Output: [(-54 -35 7 9) -54]
Test Case: 419 | Input/Output: [(-79 83 6 -71) -79]
Test Case: 420 | Input/Output: [(36 77 -59 -98) -98]
Test Case: 421 | Input/Output: [(59 54 97 70) 54]
Test Case: 422 | Input/Output: [(50 83 25 14) 14]
Test Case: 423 | Input/Output: [(31 94 87 14) 14]
Test Case: 424 | Input/Output: [(34 44 84 -41) -41]
Test Case: 425 | Input/Output: [(-75 -89 -88 9) -89]
Test Case: 426 | Input/Output: [(1 30 -84 37) -84]
Test Case: 427 | Input/Output: [(-28 -12 -33 -1) -33]
Test Case: 428 | Input/Output: [(-5 -27 -21 8) -27]
Test Case: 429 | Input/Output: [(85 -60 42 91) -60]
Test Case: 430 | Input/Output: [(10 1 71 70) 1]
Test Case: 431 | Input/Output: [(-88 95 14 77) -88]
Test Case: 432 | Input/Output: [(-80 -11 -70 -12) -80]
Test Case: 433 | Input/Output: [(-44 53 -1 -81) -81]
Test Case: 434 | Input/Output: [(21 84 -15 -75) -75]
Test Case: 435 | Input/Output: [(-92 58 59 -92) -92]
Test Case: 436 | Input/Output: [(-96 60 -29 48) -96]
Test Case: 437 | Input/Output: [(-25 -34 33 73) -34]
Test Case: 438 | Input/Output: [(-19 30 5 8) -19]
Test Case: 439 | Input/Output: [(73 -47 -92 92) -92]
Test Case: 440 | Input/Output: [(36 -81 -37 -53) -81]
Test Case: 441 | Input/Output: [(-72 -29 59 -92) -92]
Test Case: 442 | Input/Output: [(-10 -59 16 60) -59]
Test Case: 443 | Input/Output: [(-13 -12 -1 -6) -13]
Test Case: 444 | Input/Output: [(-65 -18 -11 -92) -92]
Test Case: 445 | Input/Output: [(-4 -74 -14 -100) -100]
Test Case: 446 | Input/Output: [(-81 17 30 -30) -81]
Test Case: 447 | Input/Output: [(62 -62 -27 -61) -62]
Test Case: 448 | Input/Output: [(-78 94 15 4) -78]
Test Case: 449 | Input/Output: [(77 62 -54 -40) -54]
Test Case: 450 | Input/Output: [(54 86 18 -72) -72]
Test Case: 451 | Input/Output: [(-34 -56 -16 31) -56]
Test Case: 452 | Input/Output: [(-65 -66 78 34) -66]
Test Case: 453 | Input/Output: [(-13 39 91 -46) -46]
Test Case: 454 | Input/Output: [(-34 84 -14 -81) -81]
Test Case: 455 | Input/Output: [(-73 62 37 6) -73]
Test Case: 456 | Input/Output: [(-71 -29 36 -60) -71]
Test Case: 457 | Input/Output: [(-81 57 79 53) -81]
Test Case: 458 | Input/Output: [(-56 -20 64 80) -56]
Test Case: 459 | Input/Output: [(-40 -79 -12 7) -79]
Test Case: 460 | Input/Output: [(24 39 16 53) 16]
Test Case: 461 | Input/Output: [(-42 15 -82 80) -82]
Test Case: 462 | Input/Output: [(-59 -4 -71 90) -71]
Test Case: 463 | Input/Output: [(-38 73 90 20) -38]
Test Case: 464 | Input/Output: [(79 -65 -70 48) -70]
Test Case: 465 | Input/Output: [(46 68 -38 -97) -97]
Test Case: 466 | Input/Output: [(62 97 2 67) 2]
Test Case: 467 | Input/Output: [(74 -17 -46 -18) -46]
Test Case: 468 | Input/Output: [(70 35 -80 87) -80]
Test Case: 469 | Input/Output: [(-98 -68 87 -1) -98]
Test Case: 470 | Input/Output: [(-59 -2 -83 -2) -83]
Test Case: 471 | Input/Output: [(-82 -5 -100 34) -100]
Test Case: 472 | Input/Output: [(76 63 -31 37) -31]
Test Case: 473 | Input/Output: [(-58 -6 21 -63) -63]
Test Case: 474 | Input/Output: [(76 -1 -67 8) -67]
Test Case: 475 | Input/Output: [(9 73 -11 -86) -86]
Test Case: 476 | Input/Output: [(57 -38 23 -33) -38]
Test Case: 477 | Input/Output: [(93 88 -89 -46) -89]
Test Case: 478 | Input/Output: [(-26 49 -69 12) -69]
Test Case: 479 | Input/Output: [(81 -52 -61 -57) -61]
Test Case: 480 | Input/Output: [(-92 70 -39 38) -92]
Test Case: 481 | Input/Output: [(11 67 -62 -97) -97]
Test Case: 482 | Input/Output: [(-3 20 -60 91) -60]
Test Case: 483 | Input/Output: [(-72 -66 90 -96) -96]
Test Case: 484 | Input/Output: [(-54 15 -89 -61) -89]
Test Case: 485 | Input/Output: [(26 -22 82 -99) -99]
Test Case: 486 | Input/Output: [(9 -57 -24 -1) -57]
Test Case: 487 | Input/Output: [(-85 -75 -5 96) -85]
Test Case: 488 | Input/Output: [(-51 -63 25 20) -63]
Test Case: 489 | Input/Output: [(31 86 -37 91) -37]
Test Case: 490 | Input/Output: [(-45 -27 45 94) -45]
Test Case: 491 | Input/Output: [(-47 64 -30 1) -47]
Test Case: 492 | Input/Output: [(73 63 -40 -47) -47]
Test Case: 493 | Input/Output: [(-56 61 12 63) -56]
Test Case: 494 | Input/Output: [(-92 -28 46 36) -92]
Test Case: 495 | Input/Output: [(51 18 -68 78) -68]
Test Case: 496 | Input/Output: [(63 90 91 -49) -49]
Test Case: 497 | Input/Output: [(-13 -92 -10 71) -92]
Test Case: 498 | Input/Output: [(24 -65 -71 -88) -88]
Test Case: 499 | Input/Output: [(29 59 -99 52) -99]
Test Case: 500 | Input/Output: [(26 -73 -54 1) -73]
Test Case: 501 | Input/Output: [(94 -53 10 29) -53]
Test Case: 502 | Input/Output: [(-50 40 -89 -26) -89]
Test Case: 503 | Input/Output: [(-70 99 45 73) -70]
Test Case: 504 | Input/Output: [(-67 50 -72 -28) -72]
Test Case: 505 | Input/Output: [(-78 73 75 57) -78]
Test Case: 506 | Input/Output: [(3 -23 5 -59) -59]
Test Case: 507 | Input/Output: [(-50 9 -50 -87) -87]
Test Case: 508 | Input/Output: [(41 28 21 94) 21]
Test Case: 509 | Input/Output: [(0 -54 42 17) -54]
Test Case: 510 | Input/Output: [(18 50 -100 -62) -100]
Test Case: 511 | Input/Output: [(15 55 58 -15) -15]
Test Case: 512 | Input/Output: [(53 -22 92 87) -22]
Test Case: 513 | Input/Output: [(90 51 -37 65) -37]
Test Case: 514 | Input/Output: [(28 20 -82 -46) -82]
Test Case: 515 | Input/Output: [(-19 28 41 -92) -92]
Test Case: 516 | Input/Output: [(-72 53 -5 -47) -72]
Test Case: 517 | Input/Output: [(77 55 61 78) 55]
Test Case: 518 | Input/Output: [(26 -85 -57 79) -85]
Test Case: 519 | Input/Output: [(-10 -60 -38 62) -60]
Test Case: 520 | Input/Output: [(55 53 20 -92) -92]
Test Case: 521 | Input/Output: [(-1 -47 52 -83) -83]
Test Case: 522 | Input/Output: [(0 88 37 23) 0]
Test Case: 523 | Input/Output: [(-37 82 71 85) -37]
Test Case: 524 | Input/Output: [(51 -35 -14 -14) -35]
Test Case: 525 | Input/Output: [(-28 -26 61 67) -28]
Test Case: 526 | Input/Output: [(-37 -63 -31 70) -63]
Test Case: 527 | Input/Output: [(-31 -28 79 -1) -31]
Test Case: 528 | Input/Output: [(37 -31 39 28) -31]
Test Case: 529 | Input/Output: [(69 40 64 39) 39]
Test Case: 530 | Input/Output: [(-21 -85 -30 86) -85]
Test Case: 531 | Input/Output: [(23 -43 23 32) -43]
Test Case: 532 | Input/Output: [(-68 -18 47 -80) -80]
Test Case: 533 | Input/Output: [(98 -73 74 3) -73]
Test Case: 534 | Input/Output: [(-8 30 100 85) -8]
Test Case: 535 | Input/Output: [(72 59 -90 -68) -90]
Test Case: 536 | Input/Output: [(-88 -49 17 19) -88]
Test Case: 537 | Input/Output: [(6 -56 3 -12) -56]
Test Case: 538 | Input/Output: [(61 -46 -19 77) -46]
Test Case: 539 | Input/Output: [(-32 49 -43 -15) -43]
Test Case: 540 | Input/Output: [(-88 9 -31 13) -88]
Test Case: 541 | Input/Output: [(52 -36 -75 -30) -75]
Test Case: 542 | Input/Output: [(-1 -36 35 67) -36]
Test Case: 543 | Input/Output: [(76 -25 62 -65) -65]
Test Case: 544 | Input/Output: [(-84 -89 72 76) -89]
Test Case: 545 | Input/Output: [(6 -94 -96 44) -96]
Test Case: 546 | Input/Output: [(44 -46 -26 83) -46]
Test Case: 547 | Input/Output: [(-41 -41 -28 7) -41]
Test Case: 548 | Input/Output: [(96 90 78 -30) -30]
Test Case: 549 | Input/Output: [(58 -95 85 81) -95]
Test Case: 550 | Input/Output: [(-13 -92 14 26) -92]
Test Case: 551 | Input/Output: [(-45 82 59 65) -45]
Test Case: 552 | Input/Output: [(34 13 -10 -90) -90]
Test Case: 553 | Input/Output: [(34 72 18 -70) -70]
Test Case: 554 | Input/Output: [(77 -63 -88 67) -88]
Test Case: 555 | Input/Output: [(90 -78 -53 -21) -78]
Test Case: 556 | Input/Output: [(75 -12 -30 41) -30]
Test Case: 557 | Input/Output: [(-78 -28 -56 79) -78]
Test Case: 558 | Input/Output: [(21 -91 -80 -86) -91]
Test Case: 559 | Input/Output: [(-20 57 -94 2) -94]
Test Case: 560 | Input/Output: [(-93 -75 -63 -68) -93]
Test Case: 561 | Input/Output: [(-46 80 -42 56) -46]
Test Case: 562 | Input/Output: [(7 -13 51 -32) -32]
Test Case: 563 | Input/Output: [(-45 -66 -50 18) -66]
Test Case: 564 | Input/Output: [(-88 -2 48 82) -88]
Test Case: 565 | Input/Output: [(-17 4 88 24) -17]
Test Case: 566 | Input/Output: [(74 -93 69 69) -93]
Test Case: 567 | Input/Output: [(10 -91 29 71) -91]
Test Case: 568 | Input/Output: [(-98 15 81 37) -98]
Test Case: 569 | Input/Output: [(2 50 34 -56) -56]
Test Case: 570 | Input/Output: [(16 6 51 -98) -98]
Test Case: 571 | Input/Output: [(-91 -39 -19 6) -91]
Test Case: 572 | Input/Output: [(-26 63 -36 23) -36]
Test Case: 573 | Input/Output: [(62 54 7 -28) -28]
Test Case: 574 | Input/Output: [(-91 55 -31 42) -91]
Test Case: 575 | Input/Output: [(91 -81 -92 27) -92]
Test Case: 576 | Input/Output: [(-95 77 -22 38) -95]
Test Case: 577 | Input/Output: [(-88 -97 44 18) -97]
Test Case: 578 | Input/Output: [(-30 59 52 52) -30]
Test Case: 579 | Input/Output: [(-22 41 99 3) -22]
Test Case: 580 | Input/Output: [(79 70 -39 7) -39]
Test Case: 581 | Input/Output: [(-64 -40 42 100) -64]
Test Case: 582 | Input/Output: [(-90 -73 64 74) -90]
Test Case: 583 | Input/Output: [(-23 27 39 88) -23]
Test Case: 584 | Input/Output: [(15 60 -42 -100) -100]
Test Case: 585 | Input/Output: [(75 48 -41 59) -41]
Test Case: 586 | Input/Output: [(65 -51 -55 -10) -55]
Test Case: 587 | Input/Output: [(7 39 -11 -54) -54]
Test Case: 588 | Input/Output: [(6 73 -50 -99) -99]
Test Case: 589 | Input/Output: [(-21 -61 -51 -97) -97]
Test Case: 590 | Input/Output: [(99 13 46 -99) -99]
Test Case: 591 | Input/Output: [(-10 -15 95 -99) -99]
Test Case: 592 | Input/Output: [(-36 -79 6 -10) -79]
Test Case: 593 | Input/Output: [(-52 53 -40 -88) -88]
Test Case: 594 | Input/Output: [(54 -61 -22 48) -61]
Test Case: 595 | Input/Output: [(60 85 63 -69) -69]
Test Case: 596 | Input/Output: [(-87 12 -100 98) -100]
Test Case: 597 | Input/Output: [(15 42 -21 95) -21]
Test Case: 598 | Input/Output: [(-45 -56 -45 -41) -56]
Test Case: 599 | Input/Output: [(91 -90 3 -60) -90]
Test Case: 600 | Input/Output: [(25 97 23 -48) -48]
Test Case: 601 | Input/Output: [(86 65 80 -95) -95]
Test Case: 602 | Input/Output: [(1 -19 97 51) -19]
Test Case: 603 | Input/Output: [(25 -21 71 -58) -58]
Test Case: 604 | Input/Output: [(35 -10 3 10) -10]
Test Case: 605 | Input/Output: [(34 25 -29 43) -29]
Test Case: 606 | Input/Output: [(11 82 74 34) 11]
Test Case: 607 | Input/Output: [(-55 -72 -4 -64) -72]
Test Case: 608 | Input/Output: [(-57 99 24 -3) -57]
Test Case: 609 | Input/Output: [(36 -48 -47 -82) -82]
Test Case: 610 | Input/Output: [(68 60 -75 3) -75]
Test Case: 611 | Input/Output: [(54 36 50 88) 36]
Test Case: 612 | Input/Output: [(-53 18 -57 13) -57]
Test Case: 613 | Input/Output: [(-38 12 -72 74) -72]
Test Case: 614 | Input/Output: [(76 -2 50 63) -2]
Test Case: 615 | Input/Output: [(24 47 -63 11) -63]
Test Case: 616 | Input/Output: [(0 -18 -74 27) -74]
Test Case: 617 | Input/Output: [(29 83 88 -100) -100]
Test Case: 618 | Input/Output: [(73 -14 48 27) -14]
Test Case: 619 | Input/Output: [(-87 -89 -13 -71) -89]
Test Case: 620 | Input/Output: [(5 59 36 -32) -32]
Test Case: 621 | Input/Output: [(-24 94 92 -55) -55]
Test Case: 622 | Input/Output: [(-14 -58 59 -67) -67]
Test Case: 623 | Input/Output: [(64 -24 27 51) -24]
Test Case: 624 | Input/Output: [(-50 44 -44 -35) -50]
Test Case: 625 | Input/Output: [(45 46 15 57) 15]
Test Case: 626 | Input/Output: [(67 12 -66 62) -66]
Test Case: 627 | Input/Output: [(88 20 14 23) 14]
Test Case: 628 | Input/Output: [(41 -56 -97 -96) -97]
Test Case: 629 | Input/Output: [(-47 30 53 -22) -47]
Test Case: 630 | Input/Output: [(44 -24 -12 -20) -24]
Test Case: 631 | Input/Output: [(67 32 -35 1) -35]
Test Case: 632 | Input/Output: [(91 27 -46 19) -46]
Test Case: 633 | Input/Output: [(78 -99 -16 -13) -99]
Test Case: 634 | Input/Output: [(-80 -17 57 99) -80]
Test Case: 635 | Input/Output: [(1 58 8 22) 1]
Test Case: 636 | Input/Output: [(-18 17 -48 -72) -72]
Test Case: 637 | Input/Output: [(-75 -79 94 -13) -79]
Test Case: 638 | Input/Output: [(-3 34 -28 34) -28]
Test Case: 639 | Input/Output: [(58 56 8 0) 0]
Test Case: 640 | Input/Output: [(38 -17 -89 -53) -89]
Test Case: 641 | Input/Output: [(-63 67 93 -40) -63]
Test Case: 642 | Input/Output: [(-51 92 -79 68) -79]
Test Case: 643 | Input/Output: [(-7 -92 -11 -86) -92]
Test Case: 644 | Input/Output: [(-75 -76 59 10) -76]
Test Case: 645 | Input/Output: [(24 -22 -19 6) -22]
Test Case: 646 | Input/Output: [(88 62 74 74) 62]
Test Case: 647 | Input/Output: [(47 -24 43 66) -24]
Test Case: 648 | Input/Output: [(73 -88 88 53) -88]
Test Case: 649 | Input/Output: [(-34 69 8 -89) -89]
Test Case: 650 | Input/Output: [(36 -59 -62 67) -62]
Test Case: 651 | Input/Output: [(-1 1 45 -85) -85]
Test Case: 652 | Input/Output: [(83 21 16 -11) -11]
Test Case: 653 | Input/Output: [(-50 -44 -79 67) -79]
Test Case: 654 | Input/Output: [(94 -30 0 9) -30]
Test Case: 655 | Input/Output: [(56 -85 82 91) -85]
Test Case: 656 | Input/Output: [(68 -13 18 32) -13]
Test Case: 657 | Input/Output: [(40 6 -13 -90) -90]
Test Case: 658 | Input/Output: [(-9 -16 38 -19) -19]
Test Case: 659 | Input/Output: [(-22 12 45 -84) -84]
Test Case: 660 | Input/Output: [(52 25 26 -93) -93]
Test Case: 661 | Input/Output: [(36 92 -63 4) -63]
Test Case: 662 | Input/Output: [(42 -10 -29 -98) -98]
Test Case: 663 | Input/Output: [(77 34 -82 96) -82]
Test Case: 664 | Input/Output: [(94 38 -15 7) -15]
Test Case: 665 | Input/Output: [(46 13 37 49) 13]
Test Case: 666 | Input/Output: [(52 10 88 -71) -71]
Test Case: 667 | Input/Output: [(-91 -2 -74 -29) -91]
Test Case: 668 | Input/Output: [(-79 33 89 96) -79]
Test Case: 669 | Input/Output: [(-53 11 -3 88) -53]
Test Case: 670 | Input/Output: [(80 70 -3 -57) -57]
Test Case: 671 | Input/Output: [(88 55 27 10) 10]
Test Case: 672 | Input/Output: [(-50 -16 -58 -13) -58]
Test Case: 673 | Input/Output: [(24 -81 3 91) -81]
Test Case: 674 | Input/Output: [(-22 93 93 61) -22]
Test Case: 675 | Input/Output: [(34 64 26 -67) -67]
Test Case: 676 | Input/Output: [(11 88 -28 -22) -28]
Test Case: 677 | Input/Output: [(66 77 84 82) 66]
Test Case: 678 | Input/Output: [(72 -88 -6 50) -88]
Test Case: 679 | Input/Output: [(-64 38 -96 61) -96]
Test Case: 680 | Input/Output: [(79 -23 -92 46) -92]
Test Case: 681 | Input/Output: [(-39 12 84 -57) -57]
Test Case: 682 | Input/Output: [(-16 -80 -68 -57) -80]
Test Case: 683 | Input/Output: [(53 -46 -6 -52) -52]
Test Case: 684 | Input/Output: [(40 -51 -19 -4) -51]
Test Case: 685 | Input/Output: [(-3 -43 -91 74) -91]
Test Case: 686 | Input/Output: [(77 75 -42 14) -42]
Test Case: 687 | Input/Output: [(-31 -58 -22 -34) -58]
Test Case: 688 | Input/Output: [(-5 -39 65 -43) -43]
Test Case: 689 | Input/Output: [(41 27 -65 36) -65]
Test Case: 690 | Input/Output: [(-64 100 -2 -82) -82]
Test Case: 691 | Input/Output: [(19 57 -74 -39) -74]
Test Case: 692 | Input/Output: [(58 -74 -95 38) -95]
Test Case: 693 | Input/Output: [(86 36 -99 -62) -99]
Test Case: 694 | Input/Output: [(3 98 4 6) 3]
Test Case: 695 | Input/Output: [(71 -72 67 -50) -72]
Test Case: 696 | Input/Output: [(27 25 73 -35) -35]
Test Case: 697 | Input/Output: [(-63 17 18 -11) -63]
Test Case: 698 | Input/Output: [(-50 4 -29 -12) -50]
Test Case: 699 | Input/Output: [(-62 94 10 31) -62]
Test Case: 700 | Input/Output: [(-35 -88 6 -68) -88]
Test Case: 701 | Input/Output: [(78 34 -69 49) -69]
Test Case: 702 | Input/Output: [(-100 -15 -2 -81) -100]
Test Case: 703 | Input/Output: [(46 27 71 22) 22]
Test Case: 704 | Input/Output: [(95 29 29 74) 29]
Test Case: 705 | Input/Output: [(-56 39 6 -26) -56]
Test Case: 706 | Input/Output: [(-63 38 -6 -87) -87]
Test Case: 707 | Input/Output: [(-99 -86 -64 99) -99]
Test Case: 708 | Input/Output: [(-27 4 51 -60) -60]
Test Case: 709 | Input/Output: [(40 -27 -78 -32) -78]
Test Case: 710 | Input/Output: [(-53 -27 -78 -39) -78]
Test Case: 711 | Input/Output: [(57 43 63 24) 24]
Test Case: 712 | Input/Output: [(76 12 -16 48) -16]
Test Case: 713 | Input/Output: [(-23 20 -73 37) -73]
Test Case: 714 | Input/Output: [(-48 -9 61 -24) -48]
Test Case: 715 | Input/Output: [(-96 -10 -37 -9) -96]
Test Case: 716 | Input/Output: [(10 -76 -22 98) -76]
Test Case: 717 | Input/Output: [(-59 54 72 32) -59]
Test Case: 718 | Input/Output: [(20 -70 55 41) -70]
Test Case: 719 | Input/Output: [(36 -97 94 11) -97]
Test Case: 720 | Input/Output: [(78 -81 91 40) -81]
Test Case: 721 | Input/Output: [(-73 5 -78 89) -78]
Test Case: 722 | Input/Output: [(25 23 56 -18) -18]
Test Case: 723 | Input/Output: [(31 -77 -42 -57) -77]
Test Case: 724 | Input/Output: [(74 79 62 30) 30]
Test Case: 725 | Input/Output: [(39 -86 58 -4) -86]
Test Case: 726 | Input/Output: [(79 49 -50 -19) -50]
Test Case: 727 | Input/Output: [(-20 -20 -62 33) -62]
Test Case: 728 | Input/Output: [(-56 -6 30 -53) -56]
Test Case: 729 | Input/Output: [(100 -74 1 -20) -74]
Test Case: 730 | Input/Output: [(10 72 7 -83) -83]
Test Case: 731 | Input/Output: [(-14 88 14 -31) -31]
Test Case: 732 | Input/Output: [(-48 45 83 -37) -48]
Test Case: 733 | Input/Output: [(-37 56 73 8) -37]
Test Case: 734 | Input/Output: [(-47 -26 -10 48) -47]
Test Case: 735 | Input/Output: [(-33 -10 43 -51) -51]
Test Case: 736 | Input/Output: [(-86 25 -73 74) -86]
Test Case: 737 | Input/Output: [(69 18 30 -35) -35]
Test Case: 738 | Input/Output: [(100 -35 30 3) -35]
Test Case: 739 | Input/Output: [(3 85 -55 50) -55]
Test Case: 740 | Input/Output: [(-16 4 -16 -57) -57]
Test Case: 741 | Input/Output: [(-88 71 -49 78) -88]
Test Case: 742 | Input/Output: [(-74 14 61 -35) -74]
Test Case: 743 | Input/Output: [(-43 -69 76 -75) -75]
Test Case: 744 | Input/Output: [(77 -3 -75 -22) -75]
Test Case: 745 | Input/Output: [(-86 -74 11 80) -86]
Test Case: 746 | Input/Output: [(36 -72 1 -4) -72]
Test Case: 747 | Input/Output: [(55 100 41 49) 41]
Test Case: 748 | Input/Output: [(66 -41 55 69) -41]
Test Case: 749 | Input/Output: [(6 80 8 49) 6]
Test Case: 750 | Input/Output: [(-1 -96 -52 26) -96]
Test Case: 751 | Input/Output: [(65 -67 -85 64) -85]
Test Case: 752 | Input/Output: [(29 -17 -66 3) -66]
Test Case: 753 | Input/Output: [(7 -28 26 10) -28]
Test Case: 754 | Input/Output: [(53 11 -35 -75) -75]
Test Case: 755 | Input/Output: [(-57 73 -55 -41) -57]
Test Case: 756 | Input/Output: [(-81 91 -19 65) -81]
Test Case: 757 | Input/Output: [(-15 -30 100 41) -30]
Test Case: 758 | Input/Output: [(17 85 -41 -37) -41]
Test Case: 759 | Input/Output: [(85 -14 81 -15) -15]
Test Case: 760 | Input/Output: [(69 53 -17 -66) -66]
Test Case: 761 | Input/Output: [(-76 -35 94 -58) -76]
Test Case: 762 | Input/Output: [(-67 41 11 11) -67]
Test Case: 763 | Input/Output: [(-58 24 35 59) -58]
Test Case: 764 | Input/Output: [(2 -42 -67 28) -67]
Test Case: 765 | Input/Output: [(77 64 -63 -5) -63]
Test Case: 766 | Input/Output: [(-65 -40 -2 32) -65]
Test Case: 767 | Input/Output: [(58 -67 49 66) -67]
Test Case: 768 | Input/Output: [(-41 -15 -52 -29) -52]
Test Case: 769 | Input/Output: [(76 -31 21 54) -31]
Test Case: 770 | Input/Output: [(74 59 -42 71) -42]
Test Case: 771 | Input/Output: [(-35 -54 66 -9) -54]
Test Case: 772 | Input/Output: [(-57 -79 -88 -38) -88]
Test Case: 773 | Input/Output: [(50 -19 -20 88) -20]
Test Case: 774 | Input/Output: [(-78 -59 85 89) -78]
Test Case: 775 | Input/Output: [(58 -22 -18 69) -22]
Test Case: 776 | Input/Output: [(56 77 -2 88) -2]
Test Case: 777 | Input/Output: [(-80 -69 -39 -32) -80]
Test Case: 778 | Input/Output: [(49 -31 100 -59) -59]
Test Case: 779 | Input/Output: [(37 53 -74 -70) -74]
Test Case: 780 | Input/Output: [(64 -48 -21 -36) -48]
Test Case: 781 | Input/Output: [(21 48 34 94) 21]
Test Case: 782 | Input/Output: [(52 -49 24 33) -49]
Test Case: 783 | Input/Output: [(52 9 85 -21) -21]
Test Case: 784 | Input/Output: [(35 11 49 -5) -5]
Test Case: 785 | Input/Output: [(37 -4 33 -98) -98]
Test Case: 786 | Input/Output: [(-20 -18 -99 -68) -99]
Test Case: 787 | Input/Output: [(26 -70 -67 -57) -70]
Test Case: 788 | Input/Output: [(99 7 -68 -88) -88]
Test Case: 789 | Input/Output: [(92 60 -61 -1) -61]
Test Case: 790 | Input/Output: [(56 -1 -17 51) -17]
Test Case: 791 | Input/Output: [(-32 31 77 50) -32]
Test Case: 792 | Input/Output: [(29 82 100 10) 10]
Test Case: 793 | Input/Output: [(-71 -22 54 24) -71]
Test Case: 794 | Input/Output: [(-21 -26 34 27) -26]
Test Case: 795 | Input/Output: [(55 -31 55 44) -31]
Test Case: 796 | Input/Output: [(-67 -32 -75 68) -75]
Test Case: 797 | Input/Output: [(81 -90 55 -84) -90]
Test Case: 798 | Input/Output: [(-91 -100 -96 -96) -100]
Test Case: 799 | Input/Output: [(-18 80 51 -58) -58]
Test Case: 800 | Input/Output: [(91 90 96 80) 80]
Test Case: 801 | Input/Output: [(79 10 -6 96) -6]
Test Case: 802 | Input/Output: [(100 54 -39 2) -39]
Test Case: 803 | Input/Output: [(21 -53 -8 -73) -73]
Test Case: 804 | Input/Output: [(-23 39 22 57) -23]
Test Case: 805 | Input/Output: [(47 70 -46 11) -46]
Test Case: 806 | Input/Output: [(92 -31 -28 48) -31]
Test Case: 807 | Input/Output: [(26 53 47 -24) -24]
Test Case: 808 | Input/Output: [(64 -69 63 68) -69]
Test Case: 809 | Input/Output: [(57 -80 34 40) -80]
Test Case: 810 | Input/Output: [(39 -32 -46 39) -46]
Test Case: 811 | Input/Output: [(-46 11 -84 51) -84]
Test Case: 812 | Input/Output: [(-80 43 80 66) -80]
Test Case: 813 | Input/Output: [(92 -22 60 -16) -22]
Test Case: 814 | Input/Output: [(97 -5 66 49) -5]
Test Case: 815 | Input/Output: [(-19 94 17 10) -19]
Test Case: 816 | Input/Output: [(48 -68 31 -3) -68]
Test Case: 817 | Input/Output: [(-63 -37 85 -8) -63]
Test Case: 818 | Input/Output: [(63 11 -25 -71) -71]
Test Case: 819 | Input/Output: [(-74 -32 -74 -71) -74]
Test Case: 820 | Input/Output: [(-68 -78 52 31) -78]
Test Case: 821 | Input/Output: [(-54 35 71 60) -54]
Test Case: 822 | Input/Output: [(-11 67 -24 17) -24]
Test Case: 823 | Input/Output: [(17 -87 70 -70) -87]
Test Case: 824 | Input/Output: [(92 10 -24 -92) -92]
Test Case: 825 | Input/Output: [(28 -66 -36 63) -66]
Test Case: 826 | Input/Output: [(-74 87 -10 25) -74]
Test Case: 827 | Input/Output: [(-94 98 -16 -61) -94]
Test Case: 828 | Input/Output: [(-22 -26 -40 44) -40]
Test Case: 829 | Input/Output: [(27 -42 18 3) -42]
Test Case: 830 | Input/Output: [(44 -32 5 65) -32]
Test Case: 831 | Input/Output: [(-58 91 30 61) -58]
Test Case: 832 | Input/Output: [(25 -89 88 -82) -89]
Test Case: 833 | Input/Output: [(24 47 -97 45) -97]
Test Case: 834 | Input/Output: [(24 91 -8 -66) -66]
Test Case: 835 | Input/Output: [(-32 66 -100 90) -100]
Test Case: 836 | Input/Output: [(49 61 -61 -89) -89]
Test Case: 837 | Input/Output: [(-38 -28 -75 53) -75]
Test Case: 838 | Input/Output: [(18 50 33 68) 18]
Test Case: 839 | Input/Output: [(-48 77 -14 61) -48]
Test Case: 840 | Input/Output: [(-97 -60 -88 -73) -97]
Test Case: 841 | Input/Output: [(-17 -68 -95 -13) -95]
Test Case: 842 | Input/Output: [(67 100 80 -41) -41]
Test Case: 843 | Input/Output: [(37 7 -24 39) -24]
Test Case: 844 | Input/Output: [(-21 45 -10 65) -21]
Test Case: 845 | Input/Output: [(-75 -28 -90 -61) -90]
Test Case: 846 | Input/Output: [(35 94 -66 -97) -97]
Test Case: 847 | Input/Output: [(41 30 72 82) 30]
Test Case: 848 | Input/Output: [(41 94 -75 -78) -78]
Test Case: 849 | Input/Output: [(-93 -24 -63 -10) -93]
Test Case: 850 | Input/Output: [(-66 59 95 -45) -66]
Test Case: 851 | Input/Output: [(8 72 51 92) 8]
Test Case: 852 | Input/Output: [(-22 22 14 39) -22]
Test Case: 853 | Input/Output: [(-45 -36 22 39) -45]
Test Case: 854 | Input/Output: [(-43 57 -28 -72) -72]
Test Case: 855 | Input/Output: [(-66 80 -29 -97) -97]
Test Case: 856 | Input/Output: [(-99 69 21 95) -99]
Test Case: 857 | Input/Output: [(-36 20 22 -50) -50]
Test Case: 858 | Input/Output: [(28 -56 -10 41) -56]
Test Case: 859 | Input/Output: [(-9 -79 -5 -100) -100]
Test Case: 860 | Input/Output: [(-18 72 5 39) -18]
Test Case: 861 | Input/Output: [(-79 -29 23 35) -79]
Test Case: 862 | Input/Output: [(-6 4 72 -53) -53]
Test Case: 863 | Input/Output: [(-88 -56 -2 52) -88]
Test Case: 864 | Input/Output: [(-24 -44 -4 79) -44]
Test Case: 865 | Input/Output: [(-22 -91 77 -12) -91]
Test Case: 866 | Input/Output: [(-13 66 -89 -60) -89]
Test Case: 867 | Input/Output: [(57 63 8 60) 8]
Test Case: 868 | Input/Output: [(36 -49 55 -52) -52]
Test Case: 869 | Input/Output: [(-7 -30 65 48) -30]
Test Case: 870 | Input/Output: [(32 72 -60 52) -60]
Test Case: 871 | Input/Output: [(76 -53 -92 -89) -92]
Test Case: 872 | Input/Output: [(25 -71 64 -22) -71]
Test Case: 873 | Input/Output: [(-12 -98 32 66) -98]
Test Case: 874 | Input/Output: [(53 -35 -31 -4) -35]
Test Case: 875 | Input/Output: [(-46 -64 26 -16) -64]
Test Case: 876 | Input/Output: [(7 23 29 50) 7]
Test Case: 877 | Input/Output: [(-43 71 67 24) -43]
Test Case: 878 | Input/Output: [(-22 -94 -36 40) -94]
Test Case: 879 | Input/Output: [(-54 -96 -43 4) -96]
Test Case: 880 | Input/Output: [(68 67 -27 -94) -94]
Test Case: 881 | Input/Output: [(-25 80 -63 68) -63]
Test Case: 882 | Input/Output: [(20 81 -48 -39) -48]
Test Case: 883 | Input/Output: [(61 79 -63 29) -63]
Test Case: 884 | Input/Output: [(-8 -35 59 -79) -79]
Test Case: 885 | Input/Output: [(73 32 82 70) 32]
Test Case: 886 | Input/Output: [(-32 -99 -26 10) -99]
Test Case: 887 | Input/Output: [(58 -96 -39 -25) -96]
Test Case: 888 | Input/Output: [(-3 -32 41 90) -32]
Test Case: 889 | Input/Output: [(62 53 -87 -12) -87]
Test Case: 890 | Input/Output: [(95 61 -1 -17) -17]
Test Case: 891 | Input/Output: [(-100 -45 -99 71) -100]
Test Case: 892 | Input/Output: [(-90 -41 90 -43) -90]
Test Case: 893 | Input/Output: [(99 38 95 62) 38]
Test Case: 894 | Input/Output: [(12 -37 22 75) -37]
Test Case: 895 | Input/Output: [(-52 -83 89 -23) -83]
Test Case: 896 | Input/Output: [(-41 12 34 36) -41]
Test Case: 897 | Input/Output: [(91 81 10 -61) -61]
Test Case: 898 | Input/Output: [(39 -32 -6 -81) -81]
Test Case: 899 | Input/Output: [(62 83 61 -17) -17]
Test Case: 900 | Input/Output: [(27 71 14 60) 14]
Test Case: 901 | Input/Output: [(36 -48 51 33) -48]
Test Case: 902 | Input/Output: [(-43 -91 94 58) -91]
Test Case: 903 | Input/Output: [(-35 61 -13 -95) -95]
Test Case: 904 | Input/Output: [(93 -25 47 -59) -59]
Test Case: 905 | Input/Output: [(29 -84 -95 -66) -95]
Test Case: 906 | Input/Output: [(-93 5 6 -29) -93]
Test Case: 907 | Input/Output: [(-55 46 16 -76) -76]
Test Case: 908 | Input/Output: [(96 14 30 25) 14]
Test Case: 909 | Input/Output: [(8 -30 -88 21) -88]
Test Case: 910 | Input/Output: [(78 -86 -90 22) -90]
Test Case: 911 | Input/Output: [(-61 -96 71 -46) -96]
Test Case: 912 | Input/Output: [(-87 -85 -3 65) -87]
Test Case: 913 | Input/Output: [(33 -50 -47 67) -50]
Test Case: 914 | Input/Output: [(-11 8 -14 -61) -61]
Test Case: 915 | Input/Output: [(-36 81 48 -58) -58]
Test Case: 916 | Input/Output: [(-44 18 -4 -66) -66]
Test Case: 917 | Input/Output: [(57 12 -68 -10) -68]
Test Case: 918 | Input/Output: [(46 51 91 50) 46]
Test Case: 919 | Input/Output: [(-18 -24 8 -52) -52]
Test Case: 920 | Input/Output: [(10 10 -96 54) -96]
Test Case: 921 | Input/Output: [(14 34 69 -73) -73]
Test Case: 922 | Input/Output: [(-73 -5 -63 67) -73]
Test Case: 923 | Input/Output: [(-73 -77 40 81) -77]
Test Case: 924 | Input/Output: [(24 11 95 -69) -69]
Test Case: 925 | Input/Output: [(63 63 3 -11) -11]
Test Case: 926 | Input/Output: [(55 -43 48 -11) -43]
Test Case: 927 | Input/Output: [(54 -58 12 35) -58]
Test Case: 928 | Input/Output: [(17 85 92 35) 17]
Test Case: 929 | Input/Output: [(94 14 -54 -24) -54]
Test Case: 930 | Input/Output: [(-90 77 -93 -51) -93]
Test Case: 931 | Input/Output: [(52 -9 -21 24) -21]
Test Case: 932 | Input/Output: [(-89 -95 96 -91) -95]
Test Case: 933 | Input/Output: [(52 -64 80 39) -64]
Test Case: 934 | Input/Output: [(-69 7 -62 18) -69]
Test Case: 935 | Input/Output: [(55 10 54 27) 10]
Test Case: 936 | Input/Output: [(-2 -27 15 -75) -75]
Test Case: 937 | Input/Output: [(-63 84 57 80) -63]
Test Case: 938 | Input/Output: [(70 80 41 83) 41]
Test Case: 939 | Input/Output: [(98 -47 49 -80) -80]
Test Case: 940 | Input/Output: [(-62 -91 100 37) -91]
Test Case: 941 | Input/Output: [(51 -72 -36 36) -72]
Test Case: 942 | Input/Output: [(-49 -92 10 -40) -92]
Test Case: 943 | Input/Output: [(-38 -10 -43 77) -43]
Test Case: 944 | Input/Output: [(-35 -54 31 86) -54]
Test Case: 945 | Input/Output: [(85 65 96 -79) -79]
Test Case: 946 | Input/Output: [(31 -77 -3 -64) -77]
Test Case: 947 | Input/Output: [(-20 46 -88 -19) -88]
Test Case: 948 | Input/Output: [(71 69 -54 63) -54]
Test Case: 949 | Input/Output: [(22 -78 64 82) -78]
Test Case: 950 | Input/Output: [(59 40 98 7) 7]
Test Case: 951 | Input/Output: [(-33 95 3 -75) -75]
Test Case: 952 | Input/Output: [(65 -80 -9 26) -80]
Test Case: 953 | Input/Output: [(6 -10 99 90) -10]
Test Case: 954 | Input/Output: [(-74 15 88 79) -74]
Test Case: 955 | Input/Output: [(54 28 -5 -53) -53]
Test Case: 956 | Input/Output: [(92 85 -89 55) -89]
Test Case: 957 | Input/Output: [(39 9 -87 -67) -87]
Test Case: 958 | Input/Output: [(-14 -56 38 -37) -56]
Test Case: 959 | Input/Output: [(62 66 51 -76) -76]
Test Case: 960 | Input/Output: [(-64 97 93 23) -64]
Test Case: 961 | Input/Output: [(47 -8 56 22) -8]
Test Case: 962 | Input/Output: [(62 -55 44 27) -55]
Test Case: 963 | Input/Output: [(6 64 70 7) 6]
Test Case: 964 | Input/Output: [(50 23 -85 -10) -85]
Test Case: 965 | Input/Output: [(-90 -30 -44 -99) -99]
Test Case: 966 | Input/Output: [(49 34 0 62) 0]
Test Case: 967 | Input/Output: [(2 -60 85 37) -60]
Test Case: 968 | Input/Output: [(55 -70 -98 -49) -98]
Test Case: 969 | Input/Output: [(-22 42 -78 -84) -84]
Test Case: 970 | Input/Output: [(-49 -100 71 72) -100]
Test Case: 971 | Input/Output: [(-29 -67 -82 -84) -84]
Test Case: 972 | Input/Output: [(-52 61 76 61) -52]
Test Case: 973 | Input/Output: [(67 -48 -76 69) -76]
Test Case: 974 | Input/Output: [(30 23 49 -68) -68]
Test Case: 975 | Input/Output: [(55 58 -18 -54) -54]
Test Case: 976 | Input/Output: [(-42 -67 -96 -38) -96]
Test Case: 977 | Input/Output: [(-39 -59 -3 12) -59]
Test Case: 978 | Input/Output: [(69 -24 -29 -51) -51]
Test Case: 979 | Input/Output: [(49 -38 -24 -25) -38]
Test Case: 980 | Input/Output: [(72 5 -6 53) -6]
Test Case: 981 | Input/Output: [(59 -27 -11 42) -27]
Test Case: 982 | Input/Output: [(-31 -48 16 -22) -48]
Test Case: 983 | Input/Output: [(-45 41 -82 -34) -82]
Test Case: 984 | Input/Output: [(-41 -14 -8 51) -41]
Test Case: 985 | Input/Output: [(-97 -33 -15 28) -97]
Test Case: 986 | Input/Output: [(96 32 -61 -57) -61]
Test Case: 987 | Input/Output: [(-29 95 -92 30) -92]
Test Case: 988 | Input/Output: [(71 -23 -70 68) -70]
Test Case: 989 | Input/Output: [(-88 -84 -9 16) -88]
Test Case: 990 | Input/Output: [(70 76 45 25) 25]
Test Case: 991 | Input/Output: [(-48 -7 -2 -63) -63]
Test Case: 992 | Input/Output: [(-79 66 -35 41) -79]
Test Case: 993 | Input/Output: [(-40 69 -69 -57) -69]
Test Case: 994 | Input/Output: [(-34 -28 55 -91) -91]
Test Case: 995 | Input/Output: [(67 16 34 -51) -51]
Test Case: 996 | Input/Output: [(90 15 -36 0) -36]
Test Case: 997 | Input/Output: [(81 -3 21 98) -3]
Test Case: 998 | Input/Output: [(94 -1 -76 -36) -76]
Test Case: 999 | Input/Output: [(-68 71 -7 8) -68]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 67 97 70 4 59 106 -101 40 -19 51 116 -27 -77 71 -83 47
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-25 -25 -25 90] -25] [[-26 -26 -10 -26] -26] [[25 25 -79 25] -79] [[63 63 63 -69] -69] [[65 65 -95 65] -95] [[6 6 6 -75] -75] [[-47 -47 -47 -66] -66] [[-7 53 53 53] -7] [[74 74 74 43] 43] [[-99 -99 45 -99] -99] [(-94 -94 -94 -94) -94] [(34 34 34 34) 34] [(81 81 81 81) 81] [(-39 -39 -39 -39) -39] [(-60 -60 -60 -60) -60] [(6 10 26 60) 6] [(23 88 45 30) 23] [(25 85 49 48) 25] [(61 78 17 9) 9] [(50 83 54 12) 12] [(48 82 96 69) 48] [(83 96 53 69) 53] [(88 1 49 100) 1] [(4 67 69 50) 4] [(0 62 50 74) 0] [(38 2 40 33) 2] [(39 46 40 54) 39] [(68 44 50 55) 44] [(72 23 22 51) 22] [(50 23 65 52) 23] [(89 4 90 35) 4] [(71 52 0 95) 0] [(22 6 73 65) 6] [(7 25 16 77) 7] [(97 20 46 14) 14] [(60 70 -80 58) -80] [(-93 -91 3 -6) -93] [(-20 3 27 -15) -20] [(-62 99 -32 -90) -90] [(82 17 10 41) 10] [(-79 -70 69 -26) -79] [(3 -78 50 38) -78] [(38 50 55 -49) -49] [(67 -18 -45 -61) -61] [(87 -44 -57 -87) -87] [(-92 -34 82 9) -92] [(9 6 -46 -1) -46] [(-95 29 -98 69) -98] [(17 -98 8 -58) -98] [(41 1 63 -55) -55] [(-77 49 87 96) -77] [(61 37 0 -12) -12] [(50 94 -71 -60) -71] [(-15 18 -55 34) -55] [(56 -42 -13 68) -42] [(-45 -58 96 20) -58] [(87 92 -58 12) -58] [(71 45 -59 23) -59] [(22 99 91 -89) -89] [(95 -17 -18 -66) -66] [(13 -19 -77 44) -77] [(93 -41 36 91) -41] [(-15 -49 0 -60) -60] [(-90 -86 47 47) -90] [(81 15 -71 19) -71] [(84 16 6 -67) -67] [(-19 -25 95 97) -25] [(90 47 21 -39) -39] [(-36 -33 -6 62) -36] [(-73 62 74 -100) -100] [(71 -28 63 -17) -28] [(77 61 -32 -94) -94] [(-45 12 -38 20) -45] [(32 -16 66 -98) -98] [(97 84 -34 7) -34] [(12 -97 -28 60) -97] [(25 -71 -92 -11) -92] [(-3 -39 20 -48) -48] [(-23 -11 53 64) -23] [(57 8 -99 -43) -99] [(100 97 26 -57) -57] [(92 -83 46 -57) -83] [(88 35 -42 15) -42] [(44 78 -16 -39) -39] [(-47 70 60 -30) -47] [(-43 -92 0 -53) -92] [(44 -69 75 -61) -69] [(83 -29 24 -32) -32] [(-68 -23 -90 97) -90] [(52 72 -44 7) -44] [(98 -36 -85 -42) -85] [(32 -12 4 39) -12] [(91 100 78 -89) -89] [(40 -8 70 89) -8] [(-96 42 16 -45) -96])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 26                 
Correct output: 23                  | Program output: 45                 
Correct output: 25                  | Program output: 49                 
Correct output: 9                   | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 48                  | Program output: 96                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 69                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 40                 
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 65                 
Correct output: 4                   | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 73                 
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 3                  
Correct output: -20                 | Program output: 27                 
Correct output: -90                 | Program output: -32                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: 69                 
Correct output: -78                 | Program output: 50                 
Correct output: -49                 | Program output: 55                 
Correct output: -61                 | Program output: -45                
Correct output: -87                 | Program output: -57                
Correct output: -92                 | Program output: 82                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 8                  
Correct output: -55                 | Program output: 63                 
Correct output: -77                 | Program output: 87                 
Correct output: -12                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 91                 
Correct output: -66                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 6                  
Correct output: -25                 | Program output: 95                 
Correct output: -39                 | Program output: 21                 
Correct output: -36                 | Program output: -6                 
Correct output: -100                | Program output: 74                 
Correct output: -28                 | Program output: 63                 
Correct output: -94                 | Program output: -32                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: 20                 
Correct output: -23                 | Program output: 53                 
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: 26                 
Correct output: -83                 | Program output: 46                 
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -16                
Correct output: -47                 | Program output: 60                 
Correct output: -92                 | Program output: 0                  
Correct output: -69                 | Program output: 75                 
Correct output: -32                 | Program output: 24                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: 78                 
Correct output: -8                  | Program output: 70                 
Correct output: -96                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_149} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (integer_max boolean_flush) exec_swap (boolean_not integer_pop boolean_empty) (boolean_xor integer_min integer_sub integer_div exec_s (integer_min print_newline integer_lt boolean_swap integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_shove) (exec_eq) exec_if (integer_gt integer_dup exec_yank integer_swap) (integer_max)) integer_shove in4) (boolean_dup_times exec_yank) (boolean_invert_first_then_and boolean_dup boolean_swap boolean_swap exec_when (exec_k_when_autoconstructing (exec_do*while (tag_integer_149 boolean_yank integer_fromboolean integer_shove boolean_swap boolean_empty) exec_s (integer_dup_items exec_yank exec_dup (exec_dup_times (exec_empty))) () ()) ())))
Lexicase best errors: [1 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 95
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_149} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (integer_max boolean_flush) exec_swap (boolean_not integer_pop boolean_empty) (boolean_xor integer_min integer_sub integer_div exec_s (integer_min print_newline integer_lt boolean_swap integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_shove) (exec_eq) exec_if (integer_gt integer_dup exec_yank integer_swap) (integer_max)) integer_shove in4) (boolean_dup_times exec_yank) (boolean_invert_first_then_and boolean_dup boolean_swap boolean_swap exec_when (exec_k_when_autoconstructing (exec_do*while (tag_integer_149 boolean_yank integer_fromboolean integer_shove boolean_swap boolean_empty) exec_s (integer_dup_items exec_yank exec_dup (exec_dup_times (exec_empty))) () ()) ())))
Zero cases best errors: [1 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 95
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 3 4 3 4 4 4 2 8 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 3 4 3 4 4 4 2 8 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_149} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty})
Best program: (boolean_invert_first_then_and integer_sub integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (integer_max boolean_flush) exec_swap (boolean_not integer_pop boolean_empty) (boolean_xor integer_min integer_sub integer_div exec_s (integer_min print_newline integer_lt boolean_swap integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_shove) (exec_eq) exec_if (integer_gt integer_dup exec_yank integer_swap) (integer_max)) integer_shove in4) (boolean_dup_times exec_yank) (boolean_invert_first_then_and boolean_dup boolean_swap boolean_swap exec_when (exec_k_when_autoconstructing (exec_do*while (tag_integer_149 boolean_yank integer_fromboolean integer_shove boolean_swap boolean_empty) exec_s (integer_dup_items exec_yank exec_dup (exec_dup_times (exec_empty))) () ()) ())))
Errors: [1 0 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 72
Size: 95
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.996 0.997 0.996 0.997 0.996 0.996 0.996 0.998 0.992 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.481
Average program size in population (points): 68.004
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466390
--- Timings ---
Current time: 1559593799795 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 29.5%
Fitness Testing:      1.6 seconds, 66.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 26                 
Correct output: 23                  | Program output: 45                 
Correct output: 25                  | Program output: 49                 
Correct output: 9                   | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 48                  | Program output: 96                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 69                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 40                 
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 65                 
Correct output: 4                   | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 73                 
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 3                  
Correct output: -20                 | Program output: 27                 
Correct output: -90                 | Program output: -32                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: 69                 
Correct output: -78                 | Program output: 50                 
Correct output: -49                 | Program output: 55                 
Correct output: -61                 | Program output: -45                
Correct output: -87                 | Program output: -57                
Correct output: -92                 | Program output: 82                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 8                  
Correct output: -55                 | Program output: 63                 
Correct output: -77                 | Program output: 87                 
Correct output: -12                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 91                 
Correct output: -66                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 6                  
Correct output: -25                 | Program output: 95                 
Correct output: -39                 | Program output: 21                 
Correct output: -36                 | Program output: -6                 
Correct output: -100                | Program output: 74                 
Correct output: -28                 | Program output: 63                 
Correct output: -94                 | Program output: -32                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: 20                 
Correct output: -23                 | Program output: 53                 
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: 26                 
Correct output: -83                 | Program output: 46                 
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -16                
Correct output: -47                 | Program output: 60                 
Correct output: -92                 | Program output: 0                  
Correct output: -69                 | Program output: 75                 
Correct output: -32                 | Program output: 24                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: 78                 
Correct output: -8                  | Program output: 70                 
Correct output: -96                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_149} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (integer_max boolean_flush) exec_swap () (exec_swap (boolean_not integer_pop boolean_empty) (boolean_xor integer_min integer_sub integer_div exec_s (integer_min exec_while (print_newline integer_lt boolean_swap integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) integer_gt boolean_dup integer_fromboolean exec_dup_times (exec_dup_items boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_dup_times integer_shove) (exec_eq) exec_if (integer_gt integer_dup exec_yank integer_yankdup integer_swap) (integer_max)) (integer_shove in4) (boolean_and exec_yank) boolean_invert_first_then_and boolean_dup boolean_swap boolean_eq boolean_swap exec_when (exec_k_when_autoconstructing (tag_integer_149 boolean_yank integer_fromboolean integer_shove boolean_swap boolean_empty) (integer_flush) exec_s (exec_yank exec_dup (exec_dup_times (integer_inc) exec_empty)) () ())))) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 103
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_149} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (integer_max boolean_flush) exec_swap () (exec_swap (boolean_not integer_pop boolean_empty) (boolean_xor integer_min integer_sub integer_div exec_s (integer_min exec_while (print_newline integer_lt boolean_swap integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) integer_gt boolean_dup integer_fromboolean exec_dup_times (exec_dup_items boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_dup_times integer_shove) (exec_eq) exec_if (integer_gt integer_dup exec_yank integer_yankdup integer_swap) (integer_max)) (integer_shove in4) (boolean_and exec_yank) boolean_invert_first_then_and boolean_dup boolean_swap boolean_eq boolean_swap exec_when (exec_k_when_autoconstructing (tag_integer_149 boolean_yank integer_fromboolean integer_shove boolean_swap boolean_empty) (integer_flush) exec_s (exec_yank exec_dup (exec_dup_times (integer_inc) exec_empty)) () ())))) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 103
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 1 1 112 294 99 289 4 99 294)
Population mean number of elite cases: 1.29
Count of perfect (error zero) individuals by case: (98 1 1 112 294 99 289 4 99 294)
Population mean number of perfect (error zero) cases: 1.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_149} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty})
Best program: (boolean_invert_first_then_and integer_yankdup integer_sub integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (integer_max boolean_flush) exec_swap (integer_min integer_pop boolean_empty) (boolean_xor integer_min integer_sub integer_div exec_s (integer_min print_newline integer_lt boolean_swap integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items boolean_flush) exec_swap (boolean_swap boolean_pop integer_dup_times print_newline boolean_rot integer_shove) (exec_if (integer_gt exec_yank integer_swap) (integer_max)) integer_shove integer_div) in4) (boolean_dup_times exec_yank) (boolean_invert_first_then_and boolean_dup boolean_swap exec_k_when_autoconstructing (exec_do*while (tag_integer_149 boolean_yank integer_fromboolean integer_shove boolean_swap boolean_empty) print_newline exec_yank exec_dup (boolean_and) exec_dup_times (exec_empty)) ()))
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 69
Size: 88
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 8.709
Median total errors in population: 10
Error averages by case: (0.902 0.999 0.999 0.888 0.706 0.901 0.711 0.996 0.901 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.12
Average program size in population (points): 79.223
Average percent parens in population: 0.228
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1302333
--- Timings ---
Current time: 1559593802741 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         1.8 seconds, 32.2%
Fitness Testing:      2.6 seconds, 47.3%
Report:               1.0 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 26                 
Correct output: 23                  | Program output: 45                 
Correct output: 25                  | Program output: 49                 
Correct output: 9                   | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 48                  | Program output: 96                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 69                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 40                 
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 65                 
Correct output: 4                   | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 73                 
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 3                  
Correct output: -20                 | Program output: 27                 
Correct output: -90                 | Program output: -32                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: 69                 
Correct output: -78                 | Program output: 50                 
Correct output: -49                 | Program output: 55                 
Correct output: -61                 | Program output: -45                
Correct output: -87                 | Program output: -57                
Correct output: -92                 | Program output: 82                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 8                  
Correct output: -55                 | Program output: 63                 
Correct output: -77                 | Program output: 87                 
Correct output: -12                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 91                 
Correct output: -66                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: 0                  
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 6                  
Correct output: -25                 | Program output: 95                 
Correct output: -39                 | Program output: 21                 
Correct output: -36                 | Program output: -6                 
Correct output: -100                | Program output: 74                 
Correct output: -28                 | Program output: 63                 
Correct output: -94                 | Program output: -32                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: 20                 
Correct output: -23                 | Program output: 53                 
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: 26                 
Correct output: -83                 | Program output: 46                 
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -16                
Correct output: -47                 | Program output: 60                 
Correct output: -92                 | Program output: 0                  
Correct output: -69                 | Program output: 75                 
Correct output: -32                 | Program output: 24                 
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: 78                 
Correct output: -8                  | Program output: 70                 
Correct output: -96                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_179} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_149} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_do*range})
Lexicase best program: (boolean_invert_first_then_and integer_yank integer_sub exec_rot (integer_max in3 print_integer exec_rot (tagged_195 boolean_rot boolean_rot integer_empty exec_swap (boolean_not integer_pop integer_dup boolean_xor integer_min integer_sub exec_s (boolean_dup_items print_newline integer_lt integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (boolean_or integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items integer_empty boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_dup integer_shove) (exec_if (integer_gt exec_yank integer_swap) (integer_max)) integer_shove boolean_dup_times exec_yank) (tag_integer_179 boolean_invert_first_then_and boolean_dup boolean_swap boolean_swap exec_when (exec_k_when_autoconstructing (exec_do*while (tag_integer_149 integer_fromboolean integer_shove boolean_empty) integer_dup_items exec_dup (exec_empty integer_dup_items exec_do*range ())) ()))) () ()) () ())
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_179} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_149} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_do*range})
Zero cases best program: (boolean_invert_first_then_and integer_yank integer_sub exec_rot (integer_max in3 print_integer exec_rot (tagged_195 boolean_rot boolean_rot integer_empty exec_swap (boolean_not integer_pop integer_dup boolean_xor integer_min integer_sub exec_s (boolean_dup_items print_newline integer_lt integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (boolean_or integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items integer_empty boolean_flush) exec_swap (boolean_swap boolean_pop integer_rot integer_dup_times print_newline boolean_rot integer_dup integer_shove) (exec_if (integer_gt exec_yank integer_swap) (integer_max)) integer_shove boolean_dup_times exec_yank) (tag_integer_179 boolean_invert_first_then_and boolean_dup boolean_swap boolean_swap exec_when (exec_k_when_autoconstructing (exec_do*while (tag_integer_149 integer_fromboolean integer_shove boolean_empty) integer_dup_items exec_dup (exec_empty integer_dup_items exec_do*range ())) ()))) () ()) () ())
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 147 147 223 224 146 19 19 319 163)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (19 147 147 223 224 146 19 19 319 163)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_195} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 2, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_179} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_149} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items})
Best program: (boolean_invert_first_then_and integer_yank integer_max in3 print_integer exec_rot (tagged_195 boolean_rot exec_dup_times (exec_y (boolean_flush) integer_lt) exec_swap (boolean_not integer_pop exec_y_when_autoconstructing (integer_dup integer_sub integer_div exec_s (integer_min print_newline integer_lt integer_rot integer_min boolean_invert_first_then_and boolean_invert_first_then_and) (boolean_or integer_gt boolean_dup integer_fromboolean boolean_or) (exec_dup_items integer_empty boolean_flush) exec_swap (boolean_pop integer_rot exec_shove (integer_dup_times print_newline boolean_rot integer_dup boolean_or) integer_shove) (exec_if (integer_gt exec_yank integer_swap) (integer_max)) integer_shove exec_yank) tag_integer_179 boolean_invert_first_then_and in1 boolean_dup boolean_swap boolean_swap exec_when (exec_k_when_autoconstructing (tag_integer_149 integer_fromboolean integer_shove boolean_empty) (boolean_yankdup integer_dup_items integer_dup_items))) ()) () ())
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 8.574
Median total errors in population: 8
Error averages by case: (0.981 0.853 0.853 0.777 0.776 0.854 0.981 0.981 0.681 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.717
Average program size in population (points): 66.346
Average percent parens in population: 0.222
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2083539
--- Timings ---
Current time: 1559593805330 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         2.9 seconds, 35.0%
Fitness Testing:      3.4 seconds, 40.9%
Report:               1.9 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 10                 
Correct output: 23                  | Program output: 88                 
Correct output: 25                  | Program output: 85                 
Correct output: 9                   | Program output: 78                 
Correct output: 12                  | Program output: 83                 
Correct output: 48                  | Program output: 82                 
Correct output: 53                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 46                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 25                 
Correct output: 14                  | Program output: 20                 
Correct output: -80                 | Program output: 70                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -62                
Correct output: 10                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: 50                 
Correct output: -61                 | Program output: -18                
Correct output: -87                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: 6                  
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: 1                  
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: 37                 
Correct output: -71                 | Program output: 94                 
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: 92                 
Correct output: -59                 | Program output: 45                 
Correct output: -89                 | Program output: 99                 
Correct output: -66                 | Program output: -17                
Correct output: -77                 | Program output: -19                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 15                 
Correct output: -67                 | Program output: 16                 
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: 47                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -73                
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: 61                 
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -16                
Correct output: -34                 | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -71                
Correct output: -48                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: 8                  
Correct output: -57                 | Program output: 97                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: 35                 
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -29                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 72                 
Correct output: -85                 | Program output: -36                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -73} {:close 0, :instruction boolean_yank} {:close 0, :instruction -8} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_not integer_yankdup exec_do*range (integer_gte exec_do*range (exec_s_when_autoconstructing (boolean_dup integer_rot tagged_535 in1 in2 in1 exec_empty boolean_invert_first_then_and integer_dup_times boolean_or) (print_integer exec_k_when_autoconstructing () (exec_when (exec_dup ()) exec_pop (boolean_not integer_sub integer_dup_times in3 boolean_invert_first_then_and -73 boolean_yank -8 integer_stackdepth in3 integer_lte) integer_gt exec_noop exec_y ())) ())))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -73} {:close 0, :instruction boolean_yank} {:close 0, :instruction -8} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_not integer_yankdup exec_do*range (integer_gte exec_do*range (exec_s_when_autoconstructing (boolean_dup integer_rot tagged_535 in1 in2 in1 exec_empty boolean_invert_first_then_and integer_dup_times boolean_or) (print_integer exec_k_when_autoconstructing () (exec_when (exec_dup ()) exec_pop (boolean_not integer_sub integer_dup_times in3 boolean_invert_first_then_and -73 boolean_yank -8 integer_stackdepth in3 integer_lte) integer_gt exec_noop exec_y ())) ())))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 185 185 152 104 186 627 439 123 479)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (187 185 185 152 104 186 627 439 123 479)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -73} {:close 0, :instruction boolean_yank} {:close 0, :instruction -8} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y})
Best program: (boolean_not integer_yankdup exec_do*range (integer_gte exec_do*range (exec_s_when_autoconstructing (boolean_dup integer_rot tagged_535 in1 in2 in1 exec_empty boolean_invert_first_then_and integer_dup_times boolean_or) (print_integer exec_k_when_autoconstructing () (exec_when (exec_dup ()) exec_pop (boolean_not integer_sub integer_dup_times in3 boolean_invert_first_then_and -73 boolean_yank -8 integer_stackdepth in3 integer_lte) integer_gt exec_noop exec_y ())) ())))
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.333
Median total errors in population: 7
Error averages by case: (0.813 0.815 0.815 0.848 0.896 0.814 0.373 0.561 0.877 0.521)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.794
Average program size in population (points): 61.032
Average percent parens in population: 0.221
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2765293
--- Timings ---
Current time: 1559593807862 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.3 seconds, 38.8%
Fitness Testing:      4.1 seconds, 37.3%
Report:               2.5 seconds, 23.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 610
Test mean error for best: 0.61000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: 90                 
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 61                 
Correct output: 12                  | Program output: 50                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 83                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 68                 
Correct output: 22                  | Program output: 72                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 89                 
Correct output: 0                   | Program output: 71                 
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 97                 
Correct output: -80                 | Program output: 60                 
Correct output: -93                 | Program output: -6                 
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 82                 
Correct output: -79                 | Program output: -26                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: 67                 
Correct output: -87                 | Program output: 87                 
Correct output: -92                 | Program output: 9                  
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: 56                 
Correct output: -58                 | Program output: 20                 
Correct output: -58                 | Program output: 87                 
Correct output: -59                 | Program output: 71                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: 95                 
Correct output: -77                 | Program output: 13                 
Correct output: -41                 | Program output: 93                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: 81                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: 71                 
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: 32                 
Correct output: -34                 | Program output: 97                 
Correct output: -97                 | Program output: 12                 
Correct output: -92                 | Program output: 25                 
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: 64                 
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 88                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: 44                 
Correct output: -32                 | Program output: 83                 
Correct output: -90                 | Program output: 97                 
Correct output: -44                 | Program output: 52                 
Correct output: -85                 | Program output: 98                 
Correct output: -12                 | Program output: 32                 
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_y_when_autoconstructing (boolean_not integer_yankdup in4) exec_do*range (integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_shove exec_k_when_autoconstructing () (boolean_eq integer_dup_times boolean_or) boolean_yankdup) print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (boolean_flush)))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_y_when_autoconstructing (boolean_not integer_yankdup in4) exec_do*range (integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_shove exec_k_when_autoconstructing () (boolean_eq integer_dup_times boolean_or) boolean_yankdup) print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (boolean_flush)))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (26 26 230 382 25 87 88 25 601 393)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (26 26 230 382 25 87 88 25 601 393)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush})
Best program: (boolean_or exec_y_when_autoconstructing (boolean_not integer_dup_times) in4 exec_do*range (integer_gte integer_mod) exec_do*range (integer_dup_times boolean_dup boolean_flush tagged_209 exec_do*while (integer_rot tagged_535 in1 in2 exec_k_when_autoconstructing () (integer_yankdup exec_if (integer_dup_times exec_y_when_autoconstructing () exec_do*range (boolean_or) boolean_yankdup) (print_integer exec_pop (integer_sub integer_dup_times boolean_invert_first_then_and -8 integer_lte) exec_noop boolean_dup_times exec_dup (exec_y (boolean_flush)))))))
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 8.117
Median total errors in population: 7
Error averages by case: (0.974 0.974 0.77 0.618 0.975 0.913 0.912 0.975 0.399 0.607)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.159
Average program size in population (points): 53.851
Average percent parens in population: 0.254
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3448244
--- Timings ---
Current time: 1559593810385 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.5 seconds, 40.7%
Fitness Testing:      4.8 seconds, 35.9%
Report:               3.1 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 453
Test mean error for best: 0.45300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 55                 
Correct output: 22                  | Program output: 51                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 71                 
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: 56                 
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: 13                 
Correct output: -41                 | Program output: 91                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: 12                 
Correct output: -92                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: 32                 
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times boolean_yankdup) print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush)))))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times boolean_yankdup) print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush)))))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 528 149 140 232 22 190 128 190 140)
Population mean number of elite cases: 1.92
Count of perfect (error zero) individuals by case: (198 528 149 140 232 22 190 128 190 140)
Population mean number of perfect (error zero) cases: 1.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times boolean_yankdup) print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush)))))
Errors: [0 0 1 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 8.083
Median total errors in population: 8
Error averages by case: (0.802 0.472 0.851 0.86 0.768 0.978 0.81 0.872 0.81 0.86)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.686
Average program size in population (points): 58.515
Average percent parens in population: 0.253
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4299351
--- Timings ---
Current time: 1559593813014 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.6 seconds, 41.1%
Fitness Testing:      5.7 seconds, 35.6%
Report:               3.6 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -25                 | Program output: 90                 
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 60                 
Correct output: 23                  | Program output: 30                 
Correct output: 25                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 69                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 100                
Correct output: 4                   | Program output: 50                 
Correct output: 0                   | Program output: 74                 
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 54                 
Correct output: 44                  | Program output: 55                 
Correct output: 22                  | Program output: 51                 
Correct output: 23                  | Program output: 52                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 95                 
Correct output: 6                   | Program output: 65                 
Correct output: 7                   | Program output: 77                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -6                 
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 41                 
Correct output: -79                 | Program output: -26                
Correct output: -78                 | Program output: 38                 
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 9                  
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: 69                 
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 96                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: 34                 
Correct output: -42                 | Program output: 68                 
Correct output: -58                 | Program output: 20                 
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: 44                 
Correct output: -41                 | Program output: 91                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: 64                 
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: 97                 
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: 39                 
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 89                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 2, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (integer_max boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times print_integer integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 in2)) integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush))))
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 2, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (integer_max boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times print_integer integer_sub integer_dup_times boolean_invert_first_then_and -8 tagged_302 in2)) integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush))))
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 604 144 146 238 288 239 160 163 275)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (441 604 144 146 238 288 239 160 163 275)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times boolean_yankdup) print_integer exec_when (integer_sub integer_min integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) boolean_shove boolean_dup_times exec_do*range ())))
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.302
Median total errors in population: 7
Error averages by case: (0.559 0.396 0.856 0.854 0.762 0.712 0.761 0.84 0.837 0.725)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.803
Average program size in population (points): 56.94
Average percent parens in population: 0.243
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5143064
--- Timings ---
Current time: 1559593815202 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.8 seconds, 41.6%
Fitness Testing:      6.5 seconds, 35.1%
Report:               4.2 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 453
Test mean error for best: 0.45300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 55                 
Correct output: 22                  | Program output: 51                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 71                 
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: 56                 
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: 13                 
Correct output: -41                 | Program output: 91                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: 12                 
Correct output: -92                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: 32                 
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (in4) integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and exec_swap () (tagged_302 integer_lte) integer_min boolean_shove boolean_dup_times in1)) exec_y (exec_do*range (boolean_or) boolean_flush))))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (in4) integer_gte exec_do*range (boolean_dup boolean_flush tagged_209 integer_rot tagged_535 in1 integer_min integer_shove exec_k_when_autoconstructing () (integer_dup_times print_integer exec_when (integer_sub integer_dup_times boolean_invert_first_then_and exec_swap () (tagged_302 integer_lte) integer_min boolean_shove boolean_dup_times in1)) exec_y (exec_do*range (boolean_or) boolean_flush))))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 198 119 215 215 117 285 128 291 243)
Population mean number of elite cases: 2.04
Count of perfect (error zero) individuals by case: (226 198 119 215 215 117 285 128 291 243)
Population mean number of perfect (error zero) cases: 2.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_flush tagged_209 integer_rot tagged_535 in1 boolean_shove) integer_min exec_k_when_autoconstructing () (integer_dup_times boolean_yankdup) print_integer exec_when (tagged_302 integer_lte) exec_noop integer_dec boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush))))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.963
Median total errors in population: 9
Error averages by case: (0.774 0.802 0.881 0.785 0.785 0.883 0.715 0.872 0.709 0.757)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.448
Average program size in population (points): 54.12
Average percent parens in population: 0.249
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6065501
--- Timings ---
Current time: 1559593817774 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.9 seconds, 42.7%
Fitness Testing:      7.4 seconds, 35.4%
Report:               4.5 seconds, 21.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 26                 
Correct output: 23                  | Program output: 30                 
Correct output: 25                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 52                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 65                 
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -6                 
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -26                
Correct output: -78                 | Program output: 38                 
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 9                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 87                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 95                 
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: 53                 
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 70                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup in3) boolean_flush integer_rot tagged_535 exec_swap (integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush))) ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup in3) boolean_flush integer_rot tagged_535 exec_swap (integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush))) ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 317 318 335 3 10 126 107 319 304)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (108 317 318 335 3 10 126 107 319 304)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup in3) boolean_flush integer_rot tagged_535 exec_swap (integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (boolean_flush))) ()))
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 8.053
Median total errors in population: 9
Error averages by case: (0.892 0.683 0.682 0.665 0.997 0.99 0.874 0.893 0.681 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.44
Average program size in population (points): 53.429
Average percent parens in population: 0.237
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6866116
--- Timings ---
Current time: 1559593820242 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.0 seconds, 43.0%
Fitness Testing:      8.1 seconds, 34.9%
Report:               5.0 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 26                 
Correct output: 23                  | Program output: 30                 
Correct output: 25                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 52                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 65                 
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -6                 
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -26                
Correct output: -78                 | Program output: 38                 
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 9                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 87                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 95                 
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: 53                 
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 70                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or integer_rot exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup in3) boolean_flush integer_rot tagged_535 exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove exec_y (exec_do*range (boolean_flush))) ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or integer_rot exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup in3) boolean_flush integer_rot tagged_535 exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove exec_y (exec_do*range (boolean_flush))) ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 510 98 315 373 315 110 364 316 110)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (364 510 98 315 373 315 110 364 316 110)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte exec_do*range (boolean_dup in3) boolean_flush integer_rot tagged_535 integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 tagged_302 integer_lte) exec_noop boolean_shove boolean_dup_times exec_y (exec_do*range (exec_do*range () boolean_flush))))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.125
Median total errors in population: 7
Error averages by case: (0.636 0.49 0.902 0.685 0.627 0.685 0.89 0.636 0.684 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.369
Average program size in population (points): 47.45
Average percent parens in population: 0.253
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7711817
--- Timings ---
Current time: 1559593822730 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.2 seconds, 43.3%
Fitness Testing:      8.9 seconds, 34.6%
Report:               5.6 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 10                 
Correct output: 23                  | Program output: 45                 
Correct output: 25                  | Program output: 49                 
Correct output: 9                   | Program output: 17-8               
Correct output: 12                  | Program output: 5454               
Correct output: 48                  | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 67                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 2020               
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -91                
Correct output: -20                 | Program output: 3                  
Correct output: -90                 | Program output: -32                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: 50                 
Correct output: -61                 | Program output: -45                
Correct output: -87                 | Program output: -57                
Correct output: -92                 | Program output: -34-34             
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: 1                  
Correct output: -77                 | Program output: 49                 
Correct output: -12                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: -58-58             
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 91                 
Correct output: -66                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -49                
Correct output: -90                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 6                  
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: 21                 
Correct output: -36                 | Program output: -33                
Correct output: -100                | Program output: 62                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -32                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -39                
Correct output: -23                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -16                
Correct output: -47                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: 78                 
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_or exec_do*while (exec_dup_times (exec_y_when_autoconstructing (boolean_not integer_dup_times) integer_dup_items in4) integer_lte integer_gte integer_mod) exec_do*range (boolean_stackdepth integer_dup_times tagged_209 exec_do*while (boolean_or integer_rot tagged_535 in1 boolean_dup_items in2 exec_k_when_autoconstructing () (in3 integer_min boolean_dup_times exec_y_when_autoconstructing () integer_rot exec_do*range (print_integer boolean_shove integer_sub integer_dup_times integer_dec) -8 integer_lte) exec_noop exec_do*while (exec_while (boolean_dup_times exec_dup (exec_y (boolean_flush integer_shove) exec_dup_times ()))))))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_or exec_do*while (exec_dup_times (exec_y_when_autoconstructing (boolean_not integer_dup_times) integer_dup_items in4) integer_lte integer_gte integer_mod) exec_do*range (boolean_stackdepth integer_dup_times tagged_209 exec_do*while (boolean_or integer_rot tagged_535 in1 boolean_dup_items in2 exec_k_when_autoconstructing () (in3 integer_min boolean_dup_times exec_y_when_autoconstructing () integer_rot exec_do*range (print_integer boolean_shove integer_sub integer_dup_times integer_dec) -8 integer_lte) exec_noop exec_do*while (exec_while (boolean_dup_times exec_dup (exec_y (boolean_flush integer_shove) exec_dup_times ()))))))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 266 567 111 111 261 110 213 266 296)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (236 266 567 111 111 261 110 213 266 296)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times})
Best program: (boolean_or exec_do*while (integer_pop) exec_y_when_autoconstructing (boolean_not integer_dup_times) integer_dup_items in4 exec_k_when_autoconstructing (exec_do*range (integer_lte integer_gte integer_mod) exec_do*range (boolean_stackdepth integer_dup_times in4) boolean_flush tagged_209 exec_do*while (integer_rot boolean_shove in1 boolean_dup_items exec_dup_items in2 in3 boolean_shove integer_min integer_dup_times integer_empty integer_rot exec_do*range (print_integer exec_pop (integer_sub integer_dup_times integer_dec) -8 integer_lte) exec_do*while (boolean_frominteger) boolean_dup_times boolean_flush exec_dup (exec_y (boolean_flush integer_shove) exec_dup_times ()))) ())
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 49
Size: 63
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.563
Median total errors in population: 8
Error averages by case: (0.764 0.734 0.433 0.889 0.889 0.739 0.89 0.787 0.734 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.221
Average program size in population (points): 48.945
Average percent parens in population: 0.256
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8511559
--- Timings ---
Current time: 1559593825228 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.3 seconds, 43.5%
Fitness Testing:      9.7 seconds, 34.2%
Report:               6.2 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 26                 
Correct output: 23                  | Program output: 30                 
Correct output: 25                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 52                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 65                 
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -6                 
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -26                
Correct output: -78                 | Program output: 38                 
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 9                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 87                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: 95                 
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: 53                 
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 70                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_302} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte boolean_dup in3) boolean_flush integer_rot integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times integer_swap boolean_invert_first_then_and tagged_302 exec_shove (integer_lte) boolean_shove boolean_dup_times exec_do*range (boolean_flush)))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_302} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_do*times (exec_y_when_autoconstructing (boolean_not in4) integer_gte boolean_dup in3) boolean_flush integer_rot integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times integer_swap boolean_invert_first_then_and tagged_302 exec_shove (integer_lte) boolean_shove boolean_dup_times exec_do*range (boolean_flush)))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (544 224 131 132 253 126 278 235 248 244)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (544 224 131 132 253 126 278 235 248 244)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush})
Best program: (boolean_or exec_if (exec_do*times (exec_y_when_autoconstructing (exec_do*range (boolean_not in4) integer_gte boolean_dup in3) boolean_flush integer_rot tagged_535 integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 exec_stackdepth integer_lte) exec_noop in2) boolean_dup_times exec_do*range (boolean_flush)) ())
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.585
Median total errors in population: 8
Error averages by case: (0.456 0.776 0.869 0.868 0.747 0.874 0.722 0.765 0.752 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.882
Average program size in population (points): 55.262
Average percent parens in population: 0.258
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9266148
--- Timings ---
Current time: 1559593827274 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.4 seconds, 43.7%
Fitness Testing:     10.3 seconds, 33.7%
Report:               6.9 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 396
Test mean error for best: 0.39600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 10                 
Correct output: 23                  | Program output: 45                 
Correct output: 25                  | Program output: 49                 
Correct output: 9                   | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 48                  | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 67                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 20                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -91                
Correct output: -20                 | Program output: 3                  
Correct output: -90                 | Program output: -32                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: 50                 
Correct output: -61                 | Program output: -45                
Correct output: -87                 | Program output: -57                
Correct output: -92                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: 1                  
Correct output: -77                 | Program output: 49                 
Correct output: -12                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 91                 
Correct output: -66                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -49                
Correct output: -90                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 6                  
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: 21                 
Correct output: -36                 | Program output: -33                
Correct output: -100                | Program output: 62                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -32                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -39                
Correct output: -23                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -16                
Correct output: -47                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: 78                 
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_or boolean_not integer_dup_times integer_dup_items boolean_dup in4 integer_mod exec_do*range (boolean_stackdepth integer_dup_times tagged_209 exec_do*while (boolean_or integer_rot tagged_535 in1 exec_do*while (integer_empty) exec_swap (exec_swap () (boolean_dup_items in2 exec_k_when_autoconstructing () (in3 boolean_eq) integer_min integer_dup_times exec_y_when_autoconstructing () print_integer integer_sub exec_yank integer_dup_times -8 integer_lte) exec_noop exec_do*while (boolean_invert_second_then_and exec_while (exec_yankdup exec_dup (exec_y (boolean_flush exec_y_when_autoconstructing (exec_dup_times ())))))) ())))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 61
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_or boolean_not integer_dup_times integer_dup_items boolean_dup in4 integer_mod exec_do*range (boolean_stackdepth integer_dup_times tagged_209 exec_do*while (boolean_or integer_rot tagged_535 in1 exec_do*while (integer_empty) exec_swap (exec_swap () (boolean_dup_items in2 exec_k_when_autoconstructing () (in3 boolean_eq) integer_min integer_dup_times exec_y_when_autoconstructing () print_integer integer_sub exec_yank integer_dup_times -8 integer_lte) exec_noop exec_do*while (boolean_invert_second_then_and exec_while (exec_yankdup exec_dup (exec_y (boolean_flush exec_y_when_autoconstructing (exec_dup_times ())))))) ())))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 61
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 618 121 346 372 350 356 116 365 137)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (367 618 121 346 372 350 356 116 365 137)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_535} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction -8} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times})
Best program: (exec_dup_times (exec_y_when_autoconstructing (boolean_not boolean_pop integer_dup_times) integer_swap) exec_rot (integer_dup_items integer_shove exec_do*range (boolean_dup_items) integer_gte integer_mod) (boolean_and boolean_stackdepth) (exec_do*range (boolean_stackdepth integer_dup_times boolean_flush tagged_855 exec_do*while (boolean_or tagged_535 boolean_dup_items integer_dup_times) in2 exec_k_when_autoconstructing () (in3 integer_min integer_dup_times integer_rot exec_do*range (print_integer integer_sub integer_dup_times integer_stackdepth integer_dec) -8 exec_do*while (boolean_dup_times exec_dup (exec_y (integer_min) boolean_flush integer_shove) exec_dup_times ())))))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.852
Median total errors in population: 8
Error averages by case: (0.633 0.382 0.879 0.654 0.628 0.65 0.644 0.884 0.635 0.863)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.537
Average program size in population (points): 47.803
Average percent parens in population: 0.254
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9969002
--- Timings ---
Current time: 1559593829626 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 44.5%
Fitness Testing:     11.0 seconds, 33.6%
Report:               7.1 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 10                 
Correct output: 23                  | Program output: 30                 
Correct output: 25                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 69                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 50                 
Correct output: 0                   | Program output: 62                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 46                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -91                
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 17                 
Correct output: -79                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -34                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: 29                 
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 49                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: 18                 
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -19                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -86                
Correct output: -71                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -71                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -11                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -23                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_dec} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_604} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_dup_times (exec_y_when_autoconstructing (boolean_not integer_dup_times) integer_dup_items in4) integer_lte integer_gte integer_mod boolean_stackdepth boolean_dup_items integer_dup_times integer_empty tagged_209 exec_do*while (exec_k (tagged_535 in1 exec_do*while (boolean_dup_items in2 integer_min integer_dup_times exec_y_when_autoconstructing () boolean_swap integer_rot exec_do*range (print_integer exec_pop (in3 integer_dec) -8 integer_lte) exec_do*while (tag_boolean_604 boolean_not) exec_dup (exec_y (boolean_rot) boolean_flush))) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_dec} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_604} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_dup_times (exec_y_when_autoconstructing (boolean_not integer_dup_times) integer_dup_items in4) integer_lte integer_gte integer_mod boolean_stackdepth boolean_dup_items integer_dup_times integer_empty tagged_209 exec_do*while (exec_k (tagged_535 in1 exec_do*while (boolean_dup_items in2 integer_min integer_dup_times exec_y_when_autoconstructing () boolean_swap integer_rot exec_do*range (print_integer exec_pop (in3 integer_dec) -8 integer_lte) exec_do*while (tag_boolean_604 boolean_not) exec_dup (exec_y (boolean_rot) boolean_flush))) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 133 135 542 569 126 274 270 383 253)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (255 133 135 542 569 126 274 270 383 253)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times})
Best program: (boolean_or exec_do*while (integer_dup_times) integer_dup_items integer_swap in4 in4 exec_do*range (integer_lte integer_gte integer_mod) exec_do*range (integer_shove) integer_dup_times tagged_209 exec_do*while (boolean_shove) boolean_or integer_rot tagged_535 in1 boolean_dup_items integer_add boolean_eq in2 exec_k_when_autoconstructing () (integer_min exec_empty integer_rot integer_rot print_integer exec_dup_items exec_pop (exec_k (integer_sub integer_dup_times integer_dec) (integer_empty integer_lte) boolean_dup_times integer_shove) boolean_rot exec_dup_times ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 54
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.06
Median total errors in population: 7
Error averages by case: (0.745 0.867 0.865 0.458 0.431 0.874 0.726 0.73 0.617 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.837
Average program size in population (points): 56.521
Average percent parens in population: 0.257
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10704716
--- Timings ---
Current time: 1559593831704 milliseconds
Total Time:          35.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.7 seconds, 44.7%
Fitness Testing:     11.7 seconds, 33.2%
Report:               7.7 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 453
Test mean error for best: 0.45300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 55                 
Correct output: 22                  | Program output: 51                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 71                 
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: 56                 
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: 13                 
Correct output: -41                 | Program output: 91                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: 12                 
Correct output: -92                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: 32                 
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction 30} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_dup_times (boolean_or) exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_not in4) exec_do*range (boolean_empty in1 boolean_dup integer_rot integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times -8 tagged_302 integer_lte) exec_noop 30 boolean_shove integer_lte)) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -8} {:close 0, :instruction tagged_302} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction 30} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_dup_times (boolean_or) exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_not in4) exec_do*range (boolean_empty in1 boolean_dup integer_rot integer_min integer_shove exec_k_when_autoconstructing () (print_integer integer_dup_times -8 tagged_302 integer_lte) exec_noop 30 boolean_shove integer_lte)) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 203 175 222 220 149 174 303 569 151)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (209 203 175 222 220 149 174 303 569 151)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_mod} {:close 0, :instruction exec_do*range})
Best program: (exec_do*times (boolean_not in4) integer_gte exec_swap (boolean_eq integer_rot integer_min) (in1 integer_min integer_shove integer_dup_times print_integer exec_flush integer_gt exec_when (exec_when (integer_sub boolean_and exec_yankdup) boolean_or boolean_invert_second_then_and boolean_invert_first_then_and boolean_not boolean_swap -8 integer_lte) exec_empty) integer_mod exec_do*range ())
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.625
Median total errors in population: 9
Error averages by case: (0.791 0.797 0.825 0.778 0.78 0.851 0.826 0.697 0.431 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.636
Average program size in population (points): 51.086
Average percent parens in population: 0.242
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11395402
--- Timings ---
Current time: 1559593833639 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.8 seconds, 45.3%
Fitness Testing:     12.3 seconds, 33.1%
Report:               7.9 seconds, 21.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 453
Test mean error for best: 0.45300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 55                 
Correct output: 22                  | Program output: 51                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 71                 
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: 56                 
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: 13                 
Correct output: -41                 | Program output: 91                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: 12                 
Correct output: -92                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: 32                 
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 1, :instruction tagged_67} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_302} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_or exec_y_when_autoconstructing (in4) exec_s_when_autoconstructing () (boolean_or boolean_flush exec_do*range (boolean_yankdup integer_dup_times tagged_209 tagged_67) integer_rot tagged_535 in1 integer_min integer_shove exec_do*while (exec_k_when_autoconstructing () (print_integer integer_sub tagged_302 exec_noop boolean_dup_times exec_y (boolean_flush)))) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_209} {:close 1, :instruction tagged_67} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_302} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_or exec_y_when_autoconstructing (in4) exec_s_when_autoconstructing () (boolean_or boolean_flush exec_do*range (boolean_yankdup integer_dup_times tagged_209 tagged_67) integer_rot tagged_535 in1 integer_min integer_shove exec_do*while (exec_k_when_autoconstructing () (print_integer integer_sub tagged_302 exec_noop boolean_dup_times exec_y (boolean_flush)))) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (468 464 281 467 288 467 4 290 264 279)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (468 464 281 467 288 467 4 290 264 279)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction -8} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range})
Best program: (exec_do*times (boolean_not in4) exec_swap (boolean_eq integer_lte integer_rot integer_min) (in1 integer_min integer_shove exec_dup () integer_dup_times print_integer integer_gt exec_when (exec_when (integer_sub boolean_and exec_flush exec_yankdup) boolean_invert_second_then_and integer_flush boolean_invert_first_then_and boolean_not boolean_swap -8 integer_lte) exec_empty) exec_y (exec_do*range ()))
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 6.728
Median total errors in population: 6
Error averages by case: (0.532 0.536 0.719 0.533 0.712 0.533 0.996 0.71 0.736 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.773
Average program size in population (points): 42.033
Average percent parens in population: 0.266
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12018783
--- Timings ---
Current time: 1559593835491 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.9 seconds, 46.0%
Fitness Testing:     12.9 seconds, 33.0%
Report:               8.1 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 396
Test mean error for best: 0.39600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: 63                 
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: 6                  
Correct output: -66                 | Program output: -47                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 10                 
Correct output: 23                  | Program output: 45                 
Correct output: 25                  | Program output: 49                 
Correct output: 9                   | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 48                  | Program output: 82                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 67                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 20                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -91                
Correct output: -20                 | Program output: 3                  
Correct output: -90                 | Program output: -32                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: 50                 
Correct output: -61                 | Program output: -45                
Correct output: -87                 | Program output: -57                
Correct output: -92                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: 1                  
Correct output: -77                 | Program output: 49                 
Correct output: -12                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 91                 
Correct output: -66                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -49                
Correct output: -90                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 6                  
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: 21                 
Correct output: -36                 | Program output: -33                
Correct output: -100                | Program output: 62                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -32                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -16                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -39                
Correct output: -23                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -16                
Correct output: -47                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: 78                 
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y})
Lexicase best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap boolean_not exec_yankdup in4) integer_gte boolean_dup in2 in4 in3) integer_rot exec_swap (exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times exec_swap (boolean_invert_first_then_and -8 boolean_yank integer_lte) (boolean_shove integer_add integer_rot exec_y ()))) ()) ())
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y})
Zero cases best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap boolean_not exec_yankdup in4) integer_gte boolean_dup in2 in4 in3) integer_rot exec_swap (exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times exec_swap (boolean_invert_first_then_and -8 boolean_yank integer_lte) (boolean_shove integer_add integer_rot exec_y ()))) ()) ())
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 87 431 252 429 249 87 380 88 647)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (87 87 431 252 429 249 87 380 88 647)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_y})
Best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap boolean_not exec_yankdup integer_gte boolean_dup integer_div in2 in4 in3) integer_rot exec_swap (exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times exec_swap (boolean_invert_first_then_and -8 boolean_yank exec_yankdup integer_lte) (boolean_shove integer_add exec_yank)) exec_y ()) ()) ()))
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.263
Median total errors in population: 7
Error averages by case: (0.913 0.913 0.569 0.748 0.571 0.751 0.913 0.62 0.912 0.353)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.949
Average program size in population (points): 40.662
Average percent parens in population: 0.260
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 12567867
--- Timings ---
Current time: 1559593837453 milliseconds
Total Time:          40.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.1 seconds, 46.7%
Fitness Testing:     13.4 seconds, 32.8%
Report:               8.2 seconds, 20.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 193
Test mean error for best: 0.19300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 53                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 10                 
Correct output: 23                  | Program output: 30                 
Correct output: 25                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 69                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 40                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -91                
Correct output: -20                 | Program output: -15                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -34                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 49                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -30                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_yank})
Lexicase best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap boolean_not in4) integer_gte boolean_dup exec_rot (in2 integer_min in4 exec_when (in3) exec_rot () (integer_rot exec_swap (exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 boolean_yank integer_lte) boolean_shove integer_add exec_yank) ()) ()) ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 44
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_yank})
Zero cases best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap boolean_not in4) integer_gte boolean_dup exec_rot (in2 integer_min in4 exec_when (in3) exec_rot () (integer_rot exec_swap (exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 boolean_yank integer_lte) boolean_shove integer_add exec_yank) ()) ()) ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 44
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 323 315 321 278 340 285 323 315 280)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (136 323 315 321 278 340 285 323 315 280)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_209} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -8} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_457} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush})
Best program: (boolean_not integer_gte in3 in4 boolean_flush integer_min tagged_209 in2 boolean_eq integer_min exec_k_when_autoconstructing () (integer_fromboolean integer_fromboolean print_integer exec_do*count (exec_do*times (integer_fromboolean integer_sub integer_dup_times -8 integer_empty) exec_noop integer_gt) tagged_457 boolean_dup_times integer_fromboolean boolean_flush))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 27
Size: 32
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 7.084
Median total errors in population: 7
Error averages by case: (0.864 0.677 0.685 0.679 0.722 0.66 0.715 0.677 0.685 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.317
Average program size in population (points): 39.466
Average percent parens in population: 0.252
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 13150689
--- Timings ---
Current time: 1559593839361 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.2 seconds, 47.2%
Fitness Testing:     14.0 seconds, 32.6%
Report:               8.6 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 221
Test mean error for best: 0.22100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -19                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -71                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 2, :instruction exec_yank})
Lexicase best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap in4) integer_gte boolean_dup exec_rot (in2 integer_min in4 exec_when (in3) exec_rot () (integer_rot exec_swap (exec_swap (integer_eq) (in1 integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 boolean_yank integer_lte) exec_empty boolean_shove integer_dec integer_add exec_yank)) ()) ()) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 47
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 2, :instruction exec_yank})
Zero cases best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap in4) integer_gte boolean_dup exec_rot (in2 integer_min in4 exec_when (in3) exec_rot () (integer_rot exec_swap (exec_swap (integer_eq) (in1 integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 boolean_yank integer_lte) exec_empty boolean_shove integer_dec integer_add exec_yank)) ()) ()) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 47
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 437 466 464 482 695 458 123 127 458)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (123 437 466 464 482 695 458 123 127 458)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_yank})
Best program: (exec_do*times (exec_y_when_autoconstructing (integer_swap boolean_not exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (exec_swap (integer_min exec_k_when_autoconstructing () (print_integer integer_dup_times boolean_invert_first_then_and -8 boolean_yank integer_lte) boolean_shove integer_add exec_yank) ()) ()) ())) () ()) ())))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 47
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 6.167
Median total errors in population: 6
Error averages by case: (0.877 0.563 0.534 0.536 0.518 0.305 0.542 0.877 0.873 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.265
Average program size in population (points): 37.052
Average percent parens in population: 0.250
Minimum age in population: 18.0
Maximum age in population: 18.0
Average age in population: 18.0
Median age in population: 18.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 13561260
--- Timings ---
Current time: 1559593841098 milliseconds
Total Time:          44.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.3 seconds, 47.9%
Fitness Testing:     14.3 seconds, 32.2%
Report:               8.8 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_y_when_autoconstructing (boolean_not in4) integer_lt in3 integer_swap exec_s_when_autoconstructing () (boolean_flush integer_min) (boolean_flush integer_lte) integer_rot tagged_535 in1 boolean_yankdup exec_s_when_autoconstructing (integer_min boolean_empty) () (exec_stackdepth integer_shove print_integer boolean_invert_first_then_and boolean_dup_times))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_y_when_autoconstructing (boolean_not in4) integer_lt in3 integer_swap exec_s_when_autoconstructing () (boolean_flush integer_min) (boolean_flush integer_lte) integer_rot tagged_535 in1 boolean_yankdup exec_s_when_autoconstructing (integer_min boolean_empty) () (exec_stackdepth integer_shove print_integer boolean_invert_first_then_and boolean_dup_times))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 216 357 427 430 396 428 431 228 390)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (202 216 357 427 430 396 428 431 228 390)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Best program: (exec_y_when_autoconstructing (exec_dup_items boolean_not in4) integer_lt in3 boolean_swap integer_swap boolean_flush integer_min boolean_shove integer_lte in1 boolean_yankdup integer_min in4 exec_stackdepth integer_shove boolean_swap exec_k_when_autoconstructing () (boolean_empty print_integer boolean_invert_first_then_and boolean_dup_times exec_flush))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 6.495
Median total errors in population: 7
Error averages by case: (0.798 0.784 0.643 0.573 0.57 0.604 0.572 0.569 0.772 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.206
Average program size in population (points): 42.492
Average percent parens in population: 0.326
Minimum age in population: 19.0
Maximum age in population: 19.0
Average age in population: 19.0
Median age in population: 19.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13916778
--- Timings ---
Current time: 1559593842799 milliseconds
Total Time:          46.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.4 seconds, 48.5%
Fitness Testing:     14.7 seconds, 31.8%
Report:               9.0 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 53                 
Correct output: 1                   | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 33                 
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 50                 
Correct output: 4                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -13                
Correct output: -58                 | Program output: -45                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 36                 
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: -97                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -57                
Correct output: -42                 | Program output: -42                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -53                
Correct output: -69                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: 40                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_497} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_y_when_autoconstructing (boolean_not in4) in3 integer_swap boolean_flush integer_min boolean_flush integer_lte integer_rot tagged_497 in1 boolean_yankdup integer_min exec_do*while () exec_stackdepth integer_shove exec_rot (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult) exec_noop boolean_dup print_integer boolean_rot) (integer_max boolean_invert_first_then_and boolean_dup_times exec_flush) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_497} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_y_when_autoconstructing (boolean_not in4) in3 integer_swap boolean_flush integer_min boolean_flush integer_lte integer_rot tagged_497 in1 boolean_yankdup integer_min exec_do*while () exec_stackdepth integer_shove exec_rot (exec_k_when_autoconstructing () (exec_y_when_autoconstructing () integer_mult) exec_noop boolean_dup print_integer boolean_rot) (integer_max boolean_invert_first_then_and boolean_dup_times exec_flush) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 342 327 164 431 393 173 429 362 332)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (387 342 327 164 431 393 173 429 362 332)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_535} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Best program: (exec_y_when_autoconstructing (exec_dup_items boolean_not in4) integer_shove integer_lt in3 boolean_and boolean_swap integer_min boolean_shove integer_lte integer_rot tagged_535 in1 boolean_yankdup integer_min boolean_empty in4 exec_stackdepth integer_shove exec_k_when_autoconstructing () (exec_y_when_autoconstructing () print_integer boolean_invert_first_then_and exec_stackdepth boolean_dup_times exec_flush))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 33
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 6.66
Median total errors in population: 7
Error averages by case: (0.613 0.658 0.673 0.836 0.569 0.607 0.827 0.571 0.638 0.668)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.058
Average program size in population (points): 35.899
Average percent parens in population: 0.261
Minimum age in population: 20.0
Maximum age in population: 20.0
Average age in population: 20.0
Median age in population: 20.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 14258093
--- Timings ---
Current time: 1559593844455 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.6 seconds, 49.2%
Fitness Testing:     15.0 seconds, 31.4%
Report:               9.2 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 221
Test mean error for best: 0.22100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -19                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -71                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_integer_151} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_y_when_autoconstructing (in4) integer_lt in3 integer_swap boolean_flush integer_min integer_fromboolean boolean_flush integer_rot tag_integer_151 tagged_535 exec_empty in1 boolean_and exec_s_when_autoconstructing () (integer_min boolean_empty) () exec_stackdepth boolean_xor integer_shove exec_k_when_autoconstructing () (print_integer boolean_invert_first_then_and boolean_dup_times integer_inc integer_div exec_flush exec_dup_items))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_integer_151} {:close 0, :instruction tagged_535} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_y_when_autoconstructing (in4) integer_lt in3 integer_swap boolean_flush integer_min integer_fromboolean boolean_flush integer_rot tag_integer_151 tagged_535 exec_empty in1 boolean_and exec_s_when_autoconstructing () (integer_min boolean_empty) () exec_stackdepth boolean_xor integer_shove exec_k_when_autoconstructing () (print_integer boolean_invert_first_then_and boolean_dup_times integer_inc integer_div exec_flush exec_dup_items))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 362 399 411 198 359 626 357 414 285)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (230 362 399 411 198 359 626 357 414 285)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 2, :instruction exec_yank})
Best program: (exec_do*times (exec_y_when_autoconstructing (boolean_not integer_sub exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 boolean_dup integer_min integer_min integer_fromboolean exec_k_when_autoconstructing () (print_integer integer_dup_times integer_div -8 boolean_yank integer_rot exec_stackdepth boolean_shove integer_add exec_dup_items integer_div) exec_yank) () ()) ())))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.359
Median total errors in population: 6
Error averages by case: (0.77 0.638 0.601 0.589 0.802 0.641 0.374 0.643 0.586 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.577
Average program size in population (points): 42.127
Average percent parens in population: 0.285
Minimum age in population: 21.0
Maximum age in population: 21.0
Average age in population: 21.0
Median age in population: 21.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 14766406
--- Timings ---
Current time: 1559593846272 milliseconds
Total Time:          49.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 49.7%
Fitness Testing:     15.5 seconds, 31.2%
Report:               9.4 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -19                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -71                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction 69} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add})
Lexicase best program: (exec_do*times (integer_pop exec_y_when_autoconstructing (boolean_not exec_s (in4) (integer_mult integer_gte 69 in1 boolean_dup boolean_invert_second_then_and exec_rot (in2 integer_min exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer exec_k (-8 boolean_yank integer_lte) (print_integer) boolean_rot boolean_shove integer_add)) ()) ()) () ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 47
Percent parens: 0.383
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction 69} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add})
Zero cases best program: (exec_do*times (integer_pop exec_y_when_autoconstructing (boolean_not exec_s (in4) (integer_mult integer_gte 69 in1 boolean_dup boolean_invert_second_then_and exec_rot (in2 integer_min exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer exec_k (-8 boolean_yank integer_lte) (print_integer) boolean_rot boolean_shove integer_add)) ()) ()) () ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 47
Percent parens: 0.383
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 347 358 344 261 341 230 370 611 352)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (330 347 358 344 261 341 230 370 611 352)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_691} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_add})
Best program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 47
Percent parens: 0.383
--- Population Statistics ---
Average total errors in population: 6.456
Median total errors in population: 7
Error averages by case: (0.67 0.653 0.642 0.656 0.739 0.659 0.77 0.63 0.389 0.648)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.938
Average program size in population (points): 44.634
Average percent parens in population: 0.299
Minimum age in population: 22.0
Maximum age in population: 22.0
Average age in population: 22.0
Median age in population: 22.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 15329944
--- Timings ---
Current time: 1559593848210 milliseconds
Total Time:          51.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.8 seconds, 50.1%
Fitness Testing:     16.0 seconds, 31.0%
Report:               9.6 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 22
Successful program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 47


Auto-simplifying with starting size: 47
step: 0
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 500
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 1000
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 1500
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 2000
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 2500
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 3000
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 3500
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 4000
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 4500
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 5000
program: (exec_do*times (boolean_pop exec_y_when_autoconstructing (integer_swap boolean_not integer_sub)) exec_s (in4) (integer_gte in1 boolean_dup exec_rot (in2 integer_min exec_when (exec_rot () (integer_rot exec_swap (integer_min exec_k_when_autoconstructing () (print_integer boolean_swap) integer_dup_times boolean_yank tag_exec_691 (integer_lte) boolean_shove in3 integer_add) ()) ())) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -25                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -79                 | Program output: 25                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: 65                 
Correct output: -75                 | Program output: -75                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: 81                  | Program output: 81                 
Correct output: -39                 | Program output: -39                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 53                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 22                  | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -90                 | Program output: -90                
Correct output: 10                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -46                 | Program output: -1                 
Correct output: -98                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -60                
Correct output: -55                 | Program output: -15                
Correct output: -42                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -58                 | Program output: 12                 
Correct output: -59                 | Program output: 23                 
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -19                
Correct output: -41                 | Program output: -41                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -25                 | Program output: -25                
Correct output: -39                 | Program output: -39                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -71                
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -23                
Correct output: -99                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -90                 | Program output: -68                
Correct output: -44                 | Program output: 7                  
Correct output: -85                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -89                
Correct output: -8                  | Program output: -8                 
Correct output: -96                 | Program output: -96                
;;******************************
